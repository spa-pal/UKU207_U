; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\timer.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\timer.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\timer.crf Timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delayMs PROC
;;;927     */
;;;928    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  b570              PUSH     {r4-r6,lr}
;;;929    {
;;;930      NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  f2423427          MOV      r4,#0x2327
000006  4361              MULS     r1,r4,r1
000008  2300              MOVS     r3,#0
00000a  2202              MOVS     r2,#2
00000c  24ff              MOVS     r4,#0xff
00000e  2504              MOVS     r5,#4
000010  2601              MOVS     r6,#1
000012  b160              CBZ      r0,|L1.46|
000014  2801              CMP      r0,#1
000016  d109              BNE      |L1.44|
000018  480b              LDR      r0,|L1.72|
00001a  6042              STR      r2,[r0,#4]
;;;931    }
00001c  60c3              STR      r3,[r0,#0xc]
00001e  6181              STR      r1,[r0,#0x18]
000020  6004              STR      r4,[r0,#0]
000022  6145              STR      r5,[r0,#0x14]
000024  6046              STR      r6,[r0,#4]
                  |L1.38|
000026  6841              LDR      r1,[r0,#4]
000028  07c9              LSLS     r1,r1,#31
00002a  d1fc              BNE      |L1.38|
                  |L1.44|
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  f04f2040          MOV      r0,#0x40004000
000032  6042              STR      r2,[r0,#4]
000034  60c3              STR      r3,[r0,#0xc]
000036  6181              STR      r1,[r0,#0x18]
000038  6004              STR      r4,[r0,#0]
00003a  6145              STR      r5,[r0,#0x14]
00003c  6046              STR      r6,[r0,#4]
                  |L1.62|
00003e  6841              LDR      r1,[r0,#4]
000040  07c9              LSLS     r1,r1,#31
000042  d1fc              BNE      |L1.62|
000044  bd70              POP      {r4-r6,pc}
;;;932    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x40008000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  TIMER0_IRQHandler PROC
;;;927     */
;;;928    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f04f2140          MOV      r1,#0x40004000
;;;929    {
;;;930      NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000004  f04f0001          MOV      r0,#1
000008  6008              STR      r0,[r1,#0]
00000a  480f              LDR      r0,|L2.72|
00000c  6801              LDR      r1,[r0,#0]  ; timer0_counter
00000e  f1010101          ADD      r1,r1,#1
000012  6001              STR      r1,[r0,#0]  ; timer0_counter
000014  490d              LDR      r1,|L2.76|
000016  f04f0000          MOV      r0,#0
00001a  7008              STRB     r0,[r1,#0]
;;;931    }
00001c  480c              LDR      r0,|L2.80|
00001e  6801              LDR      r1,[r0,#0]
000020  f02101ff          BIC      r1,r1,#0xff
000024  f1010104          ADD      r1,r1,#4
000028  6001              STR      r1,[r0,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0417180          ORR      r1,r1,#0x1000000
000030  6001              STR      r1,[r0,#0]
000032  4770              BX       lr
;;;932    
                          ENDP

                  TIMER1_IRQHandler PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
000034  4907              LDR      r1,|L2.84|
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000036  f04f0001          MOV      r0,#1
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00003a  6008              STR      r0,[r1,#0]
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
00003c  4802              LDR      r0,|L2.72|
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
00003e  6841              LDR      r1,[r0,#4]  ; timer1_counter
000040  f1010101          ADD      r1,r1,#1
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
000044  6041              STR      r1,[r0,#4]  ; timer1_counter
000046  4770              BX       lr
;;;60     
                          ENDP

                  |L2.72|
                          DCD      ||.data||
                  |L2.76|
                          DCD      adc_self_ch_cnt
                  |L2.80|
                          DCD      0x40034000
                  |L2.84|
                          DCD      0x40008000

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  enable_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  2101              MOVS     r1,#1
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  b110              CBZ      r0,|L3.10|
000004  4803              LDR      r0,|L3.20|
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr                    ;33
                  |L3.10|
00000a  f04f2040          MOV      r0,#0x40004000        ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  6041              STR      r1,[r0,#4]
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  4770              BX       lr
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40008000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  disable_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  2100              MOVS     r1,#0
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  b110              CBZ      r0,|L4.10|
000004  4803              LDR      r0,|L4.20|
000006  6041              STR      r1,[r0,#4]
000008  4770              BX       lr                    ;33
                  |L4.10|
00000a  f04f2040          MOV      r0,#0x40004000        ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  6041              STR      r1,[r0,#4]
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  4770              BX       lr
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40008000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  reset_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  b128              CBZ      r0,|L5.14|
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  4906              LDR      r1,|L5.28|
000004  6848              LDR      r0,[r1,#4]
000006  f0400002          ORR      r0,r0,#2
00000a  6048              STR      r0,[r1,#4]            ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  4770              BX       lr
                  |L5.14|
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  f04f2140          MOV      r1,#0x40004000
000012  6848              LDR      r0,[r1,#4]            ;34
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000014  f0400002          ORR      r0,r0,#2
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
000018  6048              STR      r0,[r1,#4]
00001a  4770              BX       lr
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP

                  |L5.28|
                          DCD      0x40008000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  init_timer PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  2300              MOVS     r3,#0
000004  4c0d              LDR      r4,|L6.60|
000006  2203              MOVS     r2,#3
000008  b118              CBZ      r0,|L6.18|
00000a  2801              CMP      r0,#1                 ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  d00c              BEQ      |L6.40|
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  2000              MOVS     r0,#0
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  6023              STR      r3,[r4,#0]            ;34  ; timer0_counter
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000014  f04f2040          MOV      r0,#0x40004000
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
000018  6181              STR      r1,[r0,#0x18]
00001a  6142              STR      r2,[r0,#0x14]
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
00001c  f04f0001          MOV      r0,#1
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
000020  f7fffffe          BL       NVIC_EnableIRQ
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
000024  2001              MOVS     r0,#1
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
000026  bd10              POP      {r4,pc}
                  |L6.40|
000028  6063              STR      r3,[r4,#4]  ; timer1_counter
00002a  4805              LDR      r0,|L6.64|
;;;57       }
;;;58       return;
;;;59     }
00002c  6181              STR      r1,[r0,#0x18]
00002e  6142              STR      r2,[r0,#0x14]         ;36
000030  f04f0002          MOV      r0,#2                 ;36
000034  f7fffffe          BL       NVIC_EnableIRQ
000038  2001              MOVS     r0,#1                 ;39
00003a  bd10              POP      {r4,pc}               ;40
;;;60     
                          ENDP

                  |L6.60|
                          DCD      ||.data||
                  |L6.64|
                          DCD      0x40008000

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  NVIC_EnableIRQ PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  f000021f          AND      r2,r0,#0x1f
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000004  f04f0101          MOV      r1,#1
000008  fa01f102          LSL      r1,r1,r2              ;33
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  ea4f1050          LSR      r0,r0,#5
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  f04f22e0          MOV      r2,#0xe000e000
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000014  eb020080          ADD      r0,r2,r0,LSL #2
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
000018  f8c01100          STR      r1,[r0,#0x100]
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
00001c  4770              BX       lr
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
;;;57       }
;;;58       return;
;;;59     }
;;;60     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  timer0_counter
                          DCD      0x00000000
                  timer1_counter
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Timer.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_Timer_c_30a5fda8____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_Timer_c_30a5fda8____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_Timer_c_30a5fda8____REVSH|
#line 130
|__asm___7_Timer_c_30a5fda8____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
