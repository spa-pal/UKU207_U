; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\timer.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\timer.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\timer.crf Timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delayMs PROC
;;;31     *****************************************************************************/
;;;32     void delayMs(uint8_t timer_num, uint32_t delayInMs)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
;;;34       if ( timer_num == 0 )
;;;35       {
;;;36     	LPC_TIM0->TCR = 0x02;		/* reset timer */
;;;37     	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
;;;38     	LPC_TIM0->MR0 = delayInMs * (9000000 / 1000-1);
000002  f2423427          MOV      r4,#0x2327
000006  4361              MULS     r1,r4,r1
000008  2300              MOVS     r3,#0                 ;33
00000a  2202              MOVS     r2,#2                 ;36
;;;39     	LPC_TIM0->IR  = 0xff;		/* reset all interrrupts */
00000c  24ff              MOVS     r4,#0xff
;;;40     	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
00000e  2504              MOVS     r5,#4
;;;41     	LPC_TIM0->TCR = 0x01;		/* start timer */
000010  2601              MOVS     r6,#1
000012  b160              CBZ      r0,|L1.46|
;;;42       
;;;43     	/* wait until delay time has elapsed */
;;;44     	while (LPC_TIM0->TCR & 0x01);
;;;45       }
;;;46       else if ( timer_num == 1 )
000014  2801              CMP      r0,#1
000016  d109              BNE      |L1.44|
;;;47       {
;;;48     	LPC_TIM1->TCR = 0x02;		/* reset timer */
000018  4843              LDR      r0,|L1.296|
00001a  6042              STR      r2,[r0,#4]
;;;49     	LPC_TIM1->PR  = 0x00;		/* set prescaler to zero */
00001c  60c3              STR      r3,[r0,#0xc]
;;;50     	LPC_TIM1->MR0 = delayInMs * (9000000 / 1000-1);
00001e  6181              STR      r1,[r0,#0x18]
;;;51     	LPC_TIM1->IR  = 0xff;		/* reset all interrrupts */
000020  6004              STR      r4,[r0,#0]
;;;52     	LPC_TIM1->MCR = 0x04;		/* stop timer on match */
000022  6145              STR      r5,[r0,#0x14]
;;;53     	LPC_TIM1->TCR = 0x01;		/* start timer */
000024  6046              STR      r6,[r0,#4]
                  |L1.38|
;;;54       
;;;55     	/* wait until delay time has elapsed */
;;;56     	while (LPC_TIM1->TCR & 0x01);
000026  6841              LDR      r1,[r0,#4]
000028  07c9              LSLS     r1,r1,#31
00002a  d1fc              BNE      |L1.38|
                  |L1.44|
;;;57       }
;;;58       return;
;;;59     }
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  f04f2040          MOV      r0,#0x40004000        ;36
000032  6042              STR      r2,[r0,#4]            ;36
000034  60c3              STR      r3,[r0,#0xc]          ;37
000036  6181              STR      r1,[r0,#0x18]         ;38
000038  6004              STR      r4,[r0,#0]            ;39
00003a  6145              STR      r5,[r0,#0x14]         ;40
00003c  6046              STR      r6,[r0,#4]            ;41
                  |L1.62|
00003e  6841              LDR      r1,[r0,#4]            ;44
000040  07c9              LSLS     r1,r1,#31             ;44
000042  d1fc              BNE      |L1.62|
000044  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP

                  TIMER0_IRQHandler PROC
;;;70     ******************************************************************************/
;;;71     void TIMER0_IRQHandler (void) 
000046  f04f2140          MOV      r1,#0x40004000
;;;72     {  
;;;73       LPC_TIM0->IR = 1;			
00004a  f04f0001          MOV      r0,#1
00004e  6008              STR      r0,[r1,#0]
;;;74       timer0_counter++;
000050  4836              LDR      r0,|L1.300|
000052  6801              LDR      r1,[r0,#0]  ; timer0_counter
000054  f1010101          ADD      r1,r1,#1
000058  6001              STR      r1,[r0,#0]  ; timer0_counter
;;;75     
;;;76     
;;;77     	//adc_drv6();
;;;78     	adc_self_ch_cnt=0;
00005a  4935              LDR      r1,|L1.304|
00005c  f04f0000          MOV      r0,#0
000060  7008              STRB     r0,[r1,#0]
;;;79     	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
000062  4834              LDR      r0,|L1.308|
000064  6801              LDR      r1,[r0,#0]
000066  f02101ff          BIC      r1,r1,#0xff
00006a  f1010104          ADD      r1,r1,#4
00006e  6001              STR      r1,[r0,#0]
;;;80     	LPC_ADC->ADCR |=  (1<<24);
000070  6801              LDR      r1,[r0,#0]
000072  f0417180          ORR      r1,r1,#0x1000000
000076  6001              STR      r1,[r0,#0]
;;;81     
;;;82     }
000078  4770              BX       lr
;;;83     
                          ENDP

                  TIMER1_IRQHandler PROC
;;;93     ******************************************************************************/
;;;94     void TIMER1_IRQHandler (void)  
00007a  492b              LDR      r1,|L1.296|
;;;95     {  
;;;96       LPC_TIM1->IR = 1;			/* clear interrupt flag */
00007c  f04f0001          MOV      r0,#1
000080  6008              STR      r0,[r1,#0]
;;;97       timer1_counter++;
000082  482a              LDR      r0,|L1.300|
000084  6841              LDR      r1,[r0,#4]  ; timer1_counter
000086  f1010101          ADD      r1,r1,#1
00008a  6041              STR      r1,[r0,#4]  ; timer1_counter
;;;98       return;
;;;99     }
00008c  4770              BX       lr
;;;100    
                          ENDP

                  enable_timer PROC
;;;111    ******************************************************************************/
;;;112    void enable_timer( uint8_t timer_num )
00008e  2101              MOVS     r1,#1
;;;113    {
;;;114      if ( timer_num == 0 )
000090  b110              CBZ      r0,|L1.152|
;;;115      {
;;;116    	LPC_TIM0->TCR = 1;
;;;117      }
;;;118      else
;;;119      {
;;;120    	LPC_TIM1->TCR = 1;
000092  4825              LDR      r0,|L1.296|
000094  6041              STR      r1,[r0,#4]
;;;121      }
;;;122      return;
;;;123    }
000096  4770              BX       lr
                  |L1.152|
000098  f04f2040          MOV      r0,#0x40004000        ;116
00009c  6041              STR      r1,[r0,#4]            ;116
00009e  4770              BX       lr
;;;124    
                          ENDP

                  disable_timer PROC
;;;133    ******************************************************************************/
;;;134    void disable_timer( uint8_t timer_num )
0000a0  2100              MOVS     r1,#0
;;;135    {
;;;136      if ( timer_num == 0 )
0000a2  b110              CBZ      r0,|L1.170|
;;;137      {
;;;138    	LPC_TIM0->TCR = 0;
;;;139      }
;;;140      else
;;;141      {
;;;142    	LPC_TIM1->TCR = 0;
0000a4  4820              LDR      r0,|L1.296|
0000a6  6041              STR      r1,[r0,#4]
;;;143      }
;;;144      return;
;;;145    }
0000a8  4770              BX       lr
                  |L1.170|
0000aa  f04f2040          MOV      r0,#0x40004000        ;138
0000ae  6041              STR      r1,[r0,#4]            ;138
0000b0  4770              BX       lr
;;;146    
                          ENDP

                  reset_timer PROC
;;;155    ******************************************************************************/
;;;156    void reset_timer( uint8_t timer_num )
0000b2  b128              CBZ      r0,|L1.192|
;;;157    {
;;;158      uint32_t regVal;
;;;159    
;;;160      if ( timer_num == 0 )
;;;161      {
;;;162    	regVal = LPC_TIM0->TCR;
;;;163    	regVal |= 0x02;
;;;164    	LPC_TIM0->TCR = regVal;
;;;165      }
;;;166      else
;;;167      {
;;;168    	regVal = LPC_TIM1->TCR;
0000b4  491c              LDR      r1,|L1.296|
0000b6  6848              LDR      r0,[r1,#4]
;;;169    	regVal |= 0x02;
0000b8  f0400002          ORR      r0,r0,#2
;;;170    	LPC_TIM1->TCR = regVal;
0000bc  6048              STR      r0,[r1,#4]
;;;171      }
;;;172      return;
;;;173    }
0000be  4770              BX       lr
                  |L1.192|
0000c0  f04f2140          MOV      r1,#0x40004000        ;162
0000c4  6848              LDR      r0,[r1,#4]            ;162
0000c6  f0400002          ORR      r0,r0,#2              ;163
0000ca  6048              STR      r0,[r1,#4]            ;164
0000cc  4770              BX       lr
;;;174    
                          ENDP

                  init_timer PROC
;;;185    ******************************************************************************/
;;;186    uint32_t init_timer ( uint8_t timer_num, uint32_t TimerInterval ) 
0000ce  b510              PUSH     {r4,lr}
;;;187    {
0000d0  2300              MOVS     r3,#0
;;;188      if ( timer_num == 0 )
;;;189      {
;;;190    	timer0_counter = 0;
0000d2  4c16              LDR      r4,|L1.300|
;;;191    	LPC_TIM0->MR0 = TimerInterval;
;;;192    	LPC_TIM0->MCR = 3;				/* Interrupt and Reset on MR0 */
0000d4  2203              MOVS     r2,#3
0000d6  b118              CBZ      r0,|L1.224|
;;;193    
;;;194    	NVIC_EnableIRQ(TIMER0_IRQn);
;;;195    	return (TRUE);
;;;196      }
;;;197      else if ( timer_num == 1 )
0000d8  2801              CMP      r0,#1
0000da  d00c              BEQ      |L1.246|
;;;198      {
;;;199    	timer1_counter = 0;
;;;200    	LPC_TIM1->MR0 = TimerInterval;
;;;201    	LPC_TIM1->MCR = 3;				/* Interrupt and Reset on MR1 */
;;;202    
;;;203    	NVIC_EnableIRQ(TIMER1_IRQn);
;;;204    	return (TRUE);
;;;205      }
;;;206      return (FALSE);
0000dc  2000              MOVS     r0,#0
;;;207    }
0000de  bd10              POP      {r4,pc}
                  |L1.224|
0000e0  6023              STR      r3,[r4,#0]            ;190  ; timer0_counter
0000e2  f04f2040          MOV      r0,#0x40004000        ;191
0000e6  6181              STR      r1,[r0,#0x18]         ;191
0000e8  6142              STR      r2,[r0,#0x14]         ;192
0000ea  f04f0001          MOV      r0,#1                 ;194
0000ee  f7fffffe          BL       NVIC_EnableIRQ
0000f2  2001              MOVS     r0,#1                 ;195
0000f4  bd10              POP      {r4,pc}
                  |L1.246|
0000f6  6063              STR      r3,[r4,#4]            ;199  ; timer1_counter
0000f8  480b              LDR      r0,|L1.296|
0000fa  6181              STR      r1,[r0,#0x18]         ;200
0000fc  6142              STR      r2,[r0,#0x14]         ;201
0000fe  f04f0002          MOV      r0,#2                 ;203
000102  f7fffffe          BL       NVIC_EnableIRQ
000106  2001              MOVS     r0,#1                 ;204
000108  bd10              POP      {r4,pc}
;;;208    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;927     */
;;;928    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
00010a  f000021f          AND      r2,r0,#0x1f
;;;929    {
;;;930      NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
00010e  f04f0101          MOV      r1,#1
000112  fa01f102          LSL      r1,r1,r2
000116  ea4f1050          LSR      r0,r0,#5
00011a  f04f22e0          MOV      r2,#0xe000e000
00011e  eb020080          ADD      r0,r2,r0,LSL #2
000122  f8c01100          STR      r1,[r0,#0x100]
;;;931    }
000126  4770              BX       lr
;;;932    
                          ENDP

                  |L1.296|
                          DCD      0x40008000
                  |L1.300|
                          DCD      ||.data||
                  |L1.304|
                          DCD      adc_self_ch_cnt
                  |L1.308|
                          DCD      0x40034000

                          AREA ||.data||, DATA, ALIGN=2

                  timer0_counter
                          DCD      0x00000000
                  timer1_counter
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Timer.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_Timer_c_30a5fda8____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_Timer_c_30a5fda8____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_Timer_c_30a5fda8____REVSH|
#line 130
|__asm___7_Timer_c_30a5fda8____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
