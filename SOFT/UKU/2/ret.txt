; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\ret.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\ret.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\ret.crf ret.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ret_ind PROC
;;;12     //-----------------------------------------------
;;;13     void ret_ind(char r_i,char r_s,int r_c)
000000  4b20              LDR      r3,|L1.132|
;;;14     {
;;;15     retcnt=r_c;
000002  60da              STR      r2,[r3,#0xc]  ; retcnt
;;;16     retind=r_i;
000004  7018              STRB     r0,[r3,#0]
;;;17     retsub=r_s;
000006  7059              STRB     r1,[r3,#1]
;;;18     }    
000008  4770              BX       lr
;;;19     
                          ENDP

                  ret_ind_hndl PROC
;;;20     //-----------------------------------------------
;;;21     void ret_ind_hndl(void)
00000a  481e              LDR      r0,|L1.132|
;;;22     {
;;;23     if(retcnt)
00000c  68c1              LDR      r1,[r0,#0xc]  ; retcnt
00000e  2900              CMP      r1,#0
000010  d00e              BEQ      |L1.48|
;;;24     	{
;;;25     	if((--retcnt)==0)
000012  1e49              SUBS     r1,r1,#1
000014  60c1              STR      r1,[r0,#0xc]  ; retcnt
000016  d10b              BNE      |L1.48|
;;;26     		{
;;;27      		ind=(i_enum)retind;
000018  4a1b              LDR      r2,|L1.136|
00001a  7801              LDRB     r1,[r0,#0]  ; retind
00001c  7011              STRB     r1,[r2,#0]
;;;28        		sub_ind=retsub;
00001e  7841              LDRB     r1,[r0,#1]  ; retsub
000020  7051              STRB     r1,[r2,#1]
;;;29        		index_set=sub_ind;
000022  7111              STRB     r1,[r2,#4]
;;;30        		f0=0;
000024  f04f0100          MOV      r1,#0
000028  70c1              STRB     r1,[r0,#3]
;;;31        		fc0=0;
00002a  7101              STRB     r1,[r0,#4]
;;;32        		f1=0;
00002c  7141              STRB     r1,[r0,#5]
;;;33        		fc1=0;
00002e  7181              STRB     r1,[r0,#6]
                  |L1.48|
;;;34     	 	}
;;;35          }
;;;36     }  
000030  4770              BX       lr
;;;37     
                          ENDP

                  ret_ind_sec PROC
;;;40     //---------------------------------------------
;;;41     void ret_ind_sec(char r_i,int r_c)
000032  4a14              LDR      r2,|L1.132|
;;;42     {
;;;43     retcntsec=r_c;
000034  6111              STR      r1,[r2,#0x10]  ; retcntsec
;;;44     retindsec=r_i;
000036  7090              STRB     r0,[r2,#2]
;;;45     }
000038  4770              BX       lr
;;;46     
                          ENDP

                  ret_ind_sec_hndl PROC
;;;47     //-----------------------------------------------
;;;48     void ret_ind_sec_hndl(void)
00003a  4812              LDR      r0,|L1.132|
;;;49     {
;;;50     if(retcntsec)
00003c  6901              LDR      r1,[r0,#0x10]  ; retcntsec
00003e  2900              CMP      r1,#0
000040  d00c              BEQ      |L1.92|
;;;51      	{
;;;52     	if((--retcntsec)==0)
000042  1e49              SUBS     r1,r1,#1
000044  6101              STR      r1,[r0,#0x10]  ; retcntsec
000046  d109              BNE      |L1.92|
;;;53     	 	{
;;;54      		ind=(i_enum)retindsec;
000048  4a0f              LDR      r2,|L1.136|
00004a  7881              LDRB     r1,[r0,#2]  ; retindsec
00004c  7011              STRB     r1,[r2,#0]
;;;55      		sub_ind=0;
00004e  f04f0100          MOV      r1,#0
000052  7051              STRB     r1,[r2,#1]
;;;56       		f0=0;
000054  70c1              STRB     r1,[r0,#3]
;;;57        		fc0=0;
000056  7101              STRB     r1,[r0,#4]
;;;58        		f1=0;
000058  7141              STRB     r1,[r0,#5]
;;;59        		fc1=0; 		
00005a  7181              STRB     r1,[r0,#6]
                  |L1.92|
;;;60     	 	}
;;;61        	}		
;;;62     }
00005c  4770              BX       lr
;;;63     
                          ENDP

                  ||ret|| PROC
;;;64     //-----------------------------------------------
;;;65     void ret(short duty)
00005e  4909              LDR      r1,|L1.132|
;;;66     {
;;;67     ret_duty=duty;
000060  8108              STRH     r0,[r1,#8]
;;;68     }
000062  4770              BX       lr
;;;69     
                          ENDP

                  ret_hndl PROC
;;;70     //-----------------------------------------------
;;;71     void ret_hndl(void)
000064  4907              LDR      r1,|L1.132|
;;;72     {
;;;73     if(ret_duty)
000066  f9b10008          LDRSH    r0,[r1,#8]  ; ret_duty
00006a  2800              CMP      r0,#0
00006c  d009              BEQ      |L1.130|
;;;74          {
;;;75          ret_duty--;
00006e  f1a00001          SUB      r0,r0,#1
000072  b200              SXTH     r0,r0
000074  8108              STRH     r0,[r1,#8]
;;;76          if(!ret_duty)
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
;;;77               {
;;;78               tree_down(0,0);
00007a  4601              MOV      r1,r0
00007c  4608              MOV      r0,r1
00007e  f7ffbffe          B.W      tree_down
                  |L1.130|
;;;79               }
;;;80          }
;;;81     }
000082  4770              BX       lr
;;;82     
                          ENDP

                  |L1.132|
                          DCD      ||.data||
                  |L1.136|
                          DCD      a_ind

                          AREA ||.data||, DATA, ALIGN=2

                  retind
000000  00                DCB      0x00
                  retsub
000001  00                DCB      0x00
                  retindsec
000002  00                DCB      0x00
                  ||f0||
000003  00                DCB      0x00
                  ||fc0||
000004  00                DCB      0x00
                  ||f1||
000005  00                DCB      0x00
                  ||fc1||
000006  0000              DCB      0x00,0x00
                  ret_duty
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  retcnt
                          DCD      0x00000000
                  retcntsec
                          DCD      0x00000000
