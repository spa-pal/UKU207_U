; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\net_config_http.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\net_config_http.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\net_config_http.crf Net_Config_HTTP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  sys_error PROC
                  |L1.0|
;;;757    
;;;758    void sys_error (ERROR_CODE code) {
000000  e7fe              B        |L1.0|
;;;759      /* This function is called when a fatal error is encountered. The normal */
;;;760      /* program execution is not possible anymore. Add your crytical error   .*/
;;;761      /* handler code here.                                                    */
;;;762    
;;;763      switch (code) {
;;;764        case ERR_MEM_ALLOC:
;;;765          /* Out of memory. */
;;;766          break;
;;;767    
;;;768        case ERR_MEM_FREE:
;;;769          /* Trying to release non existing memory block. */
;;;770          break;
;;;771    
;;;772        case ERR_MEM_CORRUPT:
;;;773          /* Memory Link pointer is Corrupted. */
;;;774          /* More data written than the size of allocated mem block. */
;;;775          break;
;;;776    
;;;777        case ERR_UDP_ALLOC:
;;;778          /* Out of UDP Sockets. */
;;;779          break;
;;;780    
;;;781        case ERR_TCP_ALLOC:
;;;782          /* Out of TCP Sockets. */
;;;783          break;
;;;784    
;;;785        case ERR_TCP_STATE:
;;;786          /* TCP State machine in undefined state. */
;;;787          break;
;;;788      }
;;;789    
;;;790      /* End-less loop */
;;;791      while (1);
;;;792    }
;;;793    
                          ENDP

                  init_system PROC
;;;188    
;;;189    void init_system (void) {
000002  b510              PUSH     {r4,lr}
;;;190      /* Initialize configured interfaces and applications. */
;;;191    
;;;192    #if (ETH_ENABLE)
;;;193      init_eth_link ();
000004  f7fffffe          BL       init_eth_link
;;;194    #endif
;;;195    #if (PPP_ENABLE)
;;;196      init_ppp_link ();
;;;197    #endif
;;;198    #if (SLIP_ENABLE)
;;;199      init_slip_link ();
;;;200    #endif
;;;201    
;;;202    #if (ETH_ENABLE && IGMP_ENABLE)
;;;203      init_igmp ();
;;;204    #endif
;;;205    #if (UDP_ENABLE)
;;;206      init_udp ();
000008  f7fffffe          BL       init_udp
;;;207    #endif
;;;208    #if (TCP_ENABLE)
;;;209      init_tcp ();
00000c  f7fffffe          BL       init_tcp
;;;210    #endif
;;;211    #if (HTTP_ENABLE)
;;;212      init_http ();
000010  f7fffffe          BL       init_http
;;;213    #endif
;;;214    #if (TNET_ENABLE)
;;;215      init_tnet ();
;;;216    #endif
;;;217    #if (TFTP_ENABLE)
;;;218      init_tftp ();
;;;219    #endif
;;;220    #if (FTP_ENABLE)
;;;221      init_ftp ();
;;;222    #endif
;;;223    #if (ETH_ENABLE && NBNS_ENABLE)
;;;224      init_nbns ();
;;;225    #endif
;;;226    #if (ETH_ENABLE && DHCP_ENABLE)
;;;227      init_dhcp ();
;;;228    #elif (ETH_ENABLE)
;;;229      arp_notify ();
000014  f7fffffe          BL       arp_notify
;;;230    #endif
;;;231    #if (DNS_ENABLE)
;;;232      init_dns ();
;;;233    #endif
;;;234    #if (SMTP_ENABLE)
;;;235      init_smtp ();
;;;236    #endif
;;;237    #if (SNMP_ENABLE)
;;;238      init_snmp ();
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      init_snmp
;;;239    #endif
;;;240    }
;;;241    
                          ENDP

                  run_system PROC
;;;244    
;;;245    void run_system (void) {
000020  b510              PUSH     {r4,lr}
;;;246      /* Run configured interfaces and applications. */
;;;247    
;;;248    #if (ETH_ENABLE)
;;;249      run_eth_link ();
000022  f7fffffe          BL       run_eth_link
;;;250    #endif
;;;251    #if (PPP_ENABLE)
;;;252      run_ppp_link ();
;;;253    #endif
;;;254    #if (SLIP_ENABLE)
;;;255      run_slip_link ();
;;;256    #endif
;;;257    
;;;258    #if (ETH_ENABLE && IGMP_ENABLE)
;;;259      run_igmp_host ();
;;;260    #endif
;;;261    #if (TCP_ENABLE)
;;;262      tcp_poll_sockets ();
000026  f7fffffe          BL       tcp_poll_sockets
;;;263    #endif
;;;264    #if (HTTP_ENABLE)
;;;265      run_http_server ();
00002a  f7fffffe          BL       run_http_server
;;;266    #endif
;;;267    #if (TNET_ENABLE)
;;;268      run_tnet_server ();
;;;269    #endif
;;;270    #if (TFTP_ENABLE)
;;;271      run_tftp_server ();
;;;272    #endif
;;;273    #if (FTP_ENABLE)
;;;274      run_ftp_server ();
;;;275    #endif
;;;276    #if (ETH_ENABLE && DHCP_ENABLE)
;;;277      run_dhcp_client ();
;;;278    #endif
;;;279    #if (DNS_ENABLE)
;;;280      run_dns_client ();
;;;281    #endif
;;;282    #if (SMTP_ENABLE)
;;;283      run_smtp_client ();
;;;284    #endif
;;;285    #if (SNMP_ENABLE)
;;;286      run_snmp_agent ();
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      run_snmp_agent
;;;287    #endif
;;;288    }
;;;289    
                          ENDP

                  process_hl_udp PROC
;;;303    #if (UDP_ENABLE)
;;;304    void process_hl_udp (OS_FRAME *frame) {
000036  f7ffbffe          B.W      process_udp
;;;305      /* Process udp protocol frame */
;;;306      process_udp (frame);
;;;307    }
;;;308    #endif
                          ENDP

                  process_hl_tcp PROC
;;;313    #if (TCP_ENABLE)
;;;314    void process_hl_tcp (OS_FRAME *frame) {
00003a  f7ffbffe          B.W      process_tcp
;;;315      /* Process tcp protocol frame */
;;;316      process_tcp (frame);
;;;317    }
;;;318    #endif
                          ENDP

                  dispatch_frame PROC
;;;322    
;;;323    BOOL dispatch_frame (OS_FRAME *frame, U8 netif) {
00003e  b109              CBZ      r1,|L1.68|
;;;324      /* Dispatch the outgoing frame to selected network interface. */
;;;325    
;;;326    switch (netif) {
;;;327    #if (ETH_ENABLE)
;;;328        case NETIF_ETH:
;;;329          return (eth_send_frame (frame));
;;;330    #endif
;;;331    #if (PPP_ENABLE)
;;;332        case NETIF_PPP:
;;;333          return (ppp_send_frame (frame, PPP_PROT_IP));
;;;334    #endif
;;;335    #if (SLIP_ENABLE)
;;;336        case NETIF_SLIP:
;;;337          return (slip_send_frame (frame));
;;;338    #endif
;;;339      }
;;;340      return (__FALSE);
000040  2000              MOVS     r0,#0
;;;341    }
000042  4770              BX       lr
                  |L1.68|
000044  f7ffbffe          B.W      eth_send_frame
;;;342    
                          ENDP

                  igmp_is_member PROC
;;;377    #if !(ETH_ENABLE && IGMP_ENABLE)
;;;378    BOOL igmp_is_member (U8 *ipadr) {
000048  2000              MOVS     r0,#0
;;;379      /* Provide an empty function when IP Multicasting is not enabled. */
;;;380      ipadr = ipadr;
;;;381      return (__FALSE);
;;;382    }
00004a  4770              BX       lr
;;;383    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  http_auth_passw
                          %        20

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  Mem_Pool
                          %        12384

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.bss||
                  arp_table
                          %        140

                          AREA ||area_number.6||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.bss||
                  udp_socket
                          %        60

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.bss||
                  tcp_socket
                          %        176

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.bss||
                  http_session
                          %        96

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  nlocalm
000000  c0a8016c          DCB      0xc0,0xa8,0x01,0x6c
000004  c0a801fe          DCB      0xc0,0xa8,0x01,0xfe
000008  ffffff00          DCB      0xff,0xff,0xff,0x00
00000c  c2190281          DCB      0xc2,0x19,0x02,0x81
000010  c2190282          DCB      0xc2,0x19,0x02,0x82
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.11||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.constdata||
                  netif_cfg
000000  39                DCB      0x39

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.constdata||
                  MPool_Size
                          DCD      0x00003060

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.constdata||
                  tick_rate
000000  000a              DCW      0x000a

                          AREA ||area_number.14||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.constdata||
                  arp_TabSize
000000  000a              DCW      0x000a

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.constdata||
                  arp_TimeOut
000000  0096              DCW      0x0096

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  arp_MaxRetry
000000  04                DCB      0x04

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  arp_Resend
000000  02                DCB      0x02

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  udp_NumSocks
000000  05                DCB      0x05

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.constdata||
                  tcp_NumSocks
000000  03                DCB      0x03

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  tcp_MaxRetry
000000  05                DCB      0x05

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.21||, ||.constdata||
                  tcp_RetryTout
000000  0028              DCW      0x0028

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.constdata||
                  tcp_2MSSTout
000000  0002              DCW      0x0002

                          AREA ||area_number.23||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.23||, ||.constdata||
                  tcp_SynRetryTout
000000  0014              DCW      0x0014

                          AREA ||area_number.24||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.constdata||
                  tcp_InitRetryTout
000000  000a              DCW      0x000a

                          AREA ||area_number.25||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.25||, ||.constdata||
                  tcp_DefTout
000000  0014              DCW      0x0014

                          AREA ||area_number.26||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.constdata||
                  tcp_ConRetry
000000  07                DCB      0x07

                          AREA ||area_number.27||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.constdata||
                  http_NumSess
000000  02                DCB      0x02

                          AREA ||area_number.28||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.constdata||
                  http_EnAuth
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.29||, ||.constdata||
                  http_PortNum
000000  0050              DCW      0x0050

                          AREA ||area_number.30||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.constdata||
                  http_auth_dev
000000  456d6265          DCB      0x45,0x6d,0x62,0x65
000004  64646564          DCB      0x64,0x64,0x65,0x64
000008  20574542          DCB      0x20,0x57,0x45,0x42
00000c  20536572          DCB      0x20,0x53,0x65,0x72
000010  76657200          DCB      0x76,0x65,0x72,0x00

                          AREA ||area_number.31||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.constdata||
                  http_auth_user
000000  61646d69          DCB      0x61,0x64,0x6d,0x69
000004  6e00              DCB      0x6e,0x00

                          AREA ||area_number.32||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.constdata||
                  snmp_PortNum
000000  00a1              DCW      0x00a1

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.33||, ||.constdata||
                  snmp_TrapPort
000000  00a2              DCW      0x00a2

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  snmp_TickItv
000000  14                DCB      0x14

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  snmp_TrapIp
000000  c0a80109          DCB      0xc0,0xa8,0x01,0x09

                          AREA ||.data||, DATA, ALIGN=0

                  lhost_name
000000  5350412d          DCB      0x53,0x50,0x41,0x2d
000004  554b5532          DCB      0x55,0x4b,0x55,0x32
000008  30320000          DCB      0x30,0x32,0x00,0x00
                          DCDU     0x00000000

                          AREA ||area_number.37||, DATA, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.data||
                  own_hw_adr
000000  01020304          DCB      0x01,0x02,0x03,0x04
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.data||
                  snmp_Community
000000  7075626c          DCB      0x70,0x75,0x62,0x6c
000004  696300            DCB      0x69,0x63,0x00
