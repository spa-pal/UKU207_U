; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\mess.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\mess.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\mess.crf mess.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mess_hndl PROC
;;;10     //-----------------------------------------------
;;;11     void mess_hndl(void)
000000  b530              PUSH     {r4,r5,lr}
;;;12     {
;;;13     char i;
;;;14     for(i=0;i<MESS_DEEP;i++)
000002  f04f0000          MOV      r0,#0
;;;15     	{
;;;16     	if((mess[i])&&(mess[i]==mess_old[i])&&(mess_cnt[i]))
000006  4b3d              LDR      r3,|L1.252|
000008  f1a30214          SUB      r2,r3,#0x14
00000c  f102040a          ADD      r4,r2,#0xa
                  |L1.16|
000010  5c11              LDRB     r1,[r2,r0]
000012  b161              CBZ      r1,|L1.46|
000014  5c25              LDRB     r5,[r4,r0]
000016  42a9              CMP      r1,r5
000018  d109              BNE      |L1.46|
00001a  5c19              LDRB     r1,[r3,r0]
00001c  b139              CBZ      r1,|L1.46|
;;;17     		{
;;;18     		mess_cnt[i]--;
00001e  f1a10101          SUB      r1,r1,#1
000022  b2c9              UXTB     r1,r1
000024  5419              STRB     r1,[r3,r0]
;;;19     		if(!mess_cnt[i])mess[i]=MESS_ZERO;
000026  b911              CBNZ     r1,|L1.46|
000028  f04f0100          MOV      r1,#0
00002c  5411              STRB     r1,[r2,r0]
                  |L1.46|
;;;20     		
;;;21     		}
;;;22     	mess_old[i]=mess[i];
00002e  5c11              LDRB     r1,[r2,r0]
000030  5421              STRB     r1,[r4,r0]
000032  f1000001          ADD      r0,r0,#1              ;14
000036  b2c0              UXTB     r0,r0                 ;14
000038  280a              CMP      r0,#0xa               ;14
00003a  d3e9              BCC      |L1.16|
;;;23     	} 
;;;24     }
00003c  bd30              POP      {r4,r5,pc}
;;;25     
                          ENDP

                  mess_send PROC
;;;26     //-----------------------------------------------
;;;27     void mess_send(char _mess, short par0, short par1, char _time)
00003e  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29     char i;
;;;30     i=0;
000040  f04f0400          MOV      r4,#0
;;;31     
;;;32     do
;;;33     	{
;;;34     	i++;
;;;35     	}
;;;36     while((mess[i])&&(mess[i]!=_mess)&&(i<MESS_DEEP));
000044  4e2d              LDR      r6,|L1.252|
000046  f1a60614          SUB      r6,r6,#0x14
                  |L1.74|
00004a  f1040401          ADD      r4,r4,#1              ;34
00004e  b2e4              UXTB     r4,r4                 ;34
000050  5d35              LDRB     r5,[r6,r4]
000052  b11d              CBZ      r5,|L1.92|
000054  4285              CMP      r5,r0
000056  d001              BEQ      |L1.92|
000058  2c0a              CMP      r4,#0xa
00005a  d3f6              BCC      |L1.74|
                  |L1.92|
;;;37     
;;;38     mess[i]=_mess;  
00005c  5530              STRB     r0,[r6,r4]
;;;39     mess_par0[i]=par0;
00005e  4827              LDR      r0,|L1.252|
000060  300c              ADDS     r0,r0,#0xc
000062  f8401024          STR      r1,[r0,r4,LSL #2]
;;;40     mess_par1[i]=par1;
000066  3028              ADDS     r0,r0,#0x28
000068  f8402024          STR      r2,[r0,r4,LSL #2]
;;;41     mess_cnt[i]=_time; 
00006c  3834              SUBS     r0,r0,#0x34
00006e  5503              STRB     r3,[r0,r4]
;;;42      
;;;43     }
000070  bd70              POP      {r4-r6,pc}
;;;44     
                          ENDP

                  mess_find PROC
;;;45     //-----------------------------------------------
;;;46     char mess_find(char _mess)
000072  f04f0100          MOV      r1,#0
;;;47     {
;;;48     char i;
;;;49     i=0;
;;;50     
;;;51     do
;;;52     	{
;;;53     	i++;
;;;54     	}
;;;55     while((mess[i]!=_mess)&&(i<MESS_DEEP));
000076  4a21              LDR      r2,|L1.252|
000078  f1a20214          SUB      r2,r2,#0x14
                  |L1.124|
00007c  f1010101          ADD      r1,r1,#1              ;53
000080  b2c9              UXTB     r1,r1                 ;53
000082  5c53              LDRB     r3,[r2,r1]
000084  4283              CMP      r3,r0
000086  d001              BEQ      |L1.140|
000088  290a              CMP      r1,#0xa
00008a  d3f7              BCC      |L1.124|
                  |L1.140|
;;;56     
;;;57     if(mess[i]==_mess)
00008c  5c53              LDRB     r3,[r2,r1]
00008e  4283              CMP      r3,r0
000090  d112              BNE      |L1.184|
;;;58     	{ 
;;;59     	mess_data[0]=mess_par0[i];  
000092  481a              LDR      r0,|L1.252|
000094  300c              ADDS     r0,r0,#0xc
000096  f8503021          LDR      r3,[r0,r1,LSL #2]
00009a  4819              LDR      r0,|L1.256|
00009c  6003              STR      r3,[r0,#0]  ; mess_data
;;;60     	mess_data[1]=mess_par1[i];
00009e  4b17              LDR      r3,|L1.252|
0000a0  3334              ADDS     r3,r3,#0x34
0000a2  f8533021          LDR      r3,[r3,r1,LSL #2]
0000a6  6043              STR      r3,[r0,#4]  ; mess_data
;;;61     	mess[i]=MESS_ZERO;
0000a8  f04f0000          MOV      r0,#0
0000ac  5450              STRB     r0,[r2,r1]
;;;62     	mess_cnt[i]=0;
0000ae  4a13              LDR      r2,|L1.252|
0000b0  5450              STRB     r0,[r2,r1]
;;;63     	return 1; 
0000b2  f04f0001          MOV      r0,#1
;;;64     	}
;;;65     else return 0; 
;;;66      
;;;67     }
0000b6  4770              BX       lr
                  |L1.184|
0000b8  2000              MOVS     r0,#0                 ;65
0000ba  4770              BX       lr
;;;68     
                          ENDP

                  mess_find_unvol PROC
;;;69     //-----------------------------------------------
;;;70     char mess_find_unvol(char _mess)
0000bc  f04f0100          MOV      r1,#0
;;;71     {
;;;72     char i;
;;;73     i=0;
;;;74     
;;;75     do
;;;76     	{
;;;77     	i++;
;;;78     	}
;;;79     while((mess[i]!=_mess)&&(i<MESS_DEEP));
0000c0  4a0e              LDR      r2,|L1.252|
0000c2  f1a20214          SUB      r2,r2,#0x14
                  |L1.198|
0000c6  f1010101          ADD      r1,r1,#1              ;77
0000ca  b2c9              UXTB     r1,r1                 ;77
0000cc  5c53              LDRB     r3,[r2,r1]
0000ce  4283              CMP      r3,r0
0000d0  d001              BEQ      |L1.214|
0000d2  290a              CMP      r1,#0xa
0000d4  d3f7              BCC      |L1.198|
                  |L1.214|
;;;80     
;;;81     if(mess[i]==_mess)
0000d6  5c52              LDRB     r2,[r2,r1]
0000d8  4282              CMP      r2,r0
0000da  d10c              BNE      |L1.246|
;;;82     	{ 
;;;83     	mess_data[0]=mess_par0[i];  
0000dc  4807              LDR      r0,|L1.252|
0000de  300c              ADDS     r0,r0,#0xc
0000e0  f8502021          LDR      r2,[r0,r1,LSL #2]
0000e4  4806              LDR      r0,|L1.256|
0000e6  6002              STR      r2,[r0,#0]  ; mess_data
;;;84     	mess_data[1]=mess_par1[i];
0000e8  4a04              LDR      r2,|L1.252|
0000ea  3234              ADDS     r2,r2,#0x34
0000ec  f8521021          LDR      r1,[r2,r1,LSL #2]
0000f0  6041              STR      r1,[r0,#4]  ; mess_data
;;;85     	return 1; 
0000f2  2001              MOVS     r0,#1
;;;86     	}
;;;87     else return 0; 
;;;88      
;;;89     }
0000f4  4770              BX       lr
                  |L1.246|
0000f6  2000              MOVS     r0,#0                 ;87
0000f8  4770              BX       lr
                          ENDP

0000fa  0000              DCW      0x0000
                  |L1.252|
                          DCD      ||.bss||+0x14
                  |L1.256|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mess
                          %        10
                  mess_old
                          %        10
                  mess_cnt
                          %        12
                  mess_par0
                          %        40
                  mess_par1
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  mess_data
                          %        8
