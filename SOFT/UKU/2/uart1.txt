; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart1.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart1.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\uart1.crf uart1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  putchar1 PROC
;;;37     //-----------------------------------------------
;;;38     void putchar1(char c)
000000  b530              PUSH     {r4,r5,lr}
;;;39     {
;;;40     while (tx_counter1 == TX_BUFFER_SIZE1);
000002  f44f7496          MOV      r4,#0x12c
000006  4bff              LDR      r3,|L1.1028|
000008  8a59              LDRH     r1,[r3,#0x12]
                  |L1.10|
00000a  42a1              CMP      r1,r4
00000c  d0fd              BEQ      |L1.10|
;;;41     if (tx_counter1 || ((LPC_UART1->LSR & 0x60)==0))
00000e  b9b1              CBNZ     r1,|L1.62|
000010  4afd              LDR      r2,|L1.1032|
000012  7d15              LDRB     r5,[r2,#0x14]
000014  f0150f60          TST      r5,#0x60
000018  d011              BEQ      |L1.62|
;;;42        {
;;;43        tx_buffer1[tx_wr_index1]=c;
;;;44        if (++tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;;;45        ++tx_counter1;
;;;46        }
;;;47     else
;;;48     	{
;;;49     	LPC_PINCON->PINSEL4 &= ~0x0000c000;//!!!!!!!!!!!
00001a  49fc              LDR      r1,|L1.1036|
00001c  690b              LDR      r3,[r1,#0x10]
00001e  f4234340          BIC      r3,r3,#0xc000
000022  610b              STR      r3,[r1,#0x10]
;;;50     	LPC_PINCON->PINSEL4 |= 0x00000000; //!!!!!!!!!!! 
000024  690b              LDR      r3,[r1,#0x10]
000026  610b              STR      r3,[r1,#0x10]
;;;51     	LPC_GPIO2->FIODIR|=(1UL<<2);
000028  49f9              LDR      r1,|L1.1040|
00002a  6c0b              LDR      r3,[r1,#0x40]
00002c  f0430304          ORR      r3,r3,#4
000030  640b              STR      r3,[r1,#0x40]
;;;52     	LPC_GPIO2->FIOPIN|=(1UL<<2);
000032  6d4b              LDR      r3,[r1,#0x54]
000034  f0430304          ORR      r3,r3,#4
000038  654b              STR      r3,[r1,#0x54]
;;;53     	LPC_UART1->THR=c;
00003a  7010              STRB     r0,[r2,#0]
;;;54     	} 
;;;55     }
00003c  bd30              POP      {r4,r5,pc}
                  |L1.62|
00003e  4df5              LDR      r5,|L1.1044|
000040  89da              LDRH     r2,[r3,#0xe]          ;43  ; tx_wr_index1
000042  54a8              STRB     r0,[r5,r2]            ;43
000044  1c52              ADDS     r2,r2,#1              ;44
000046  b290              UXTH     r0,r2                 ;44
000048  81d8              STRH     r0,[r3,#0xe]          ;44
00004a  42a0              CMP      r0,r4                 ;44
00004c  d102              BNE      |L1.84|
00004e  f04f0000          MOV      r0,#0                 ;44
000052  81d8              STRH     r0,[r3,#0xe]          ;44
                  |L1.84|
000054  f1010101          ADD      r1,r1,#1              ;45
000058  8259              STRH     r1,[r3,#0x12]         ;45
00005a  bd30              POP      {r4,r5,pc}
;;;56     
                          ENDP

                  uart_out1 PROC
;;;57     //-----------------------------------------------
;;;58     void uart_out1 (char num,char data0,char data1,char data2,char data3,char data4,char data5)
00005c  b5ff              PUSH     {r0-r7,lr}
;;;59     {                
00005e  ad09              ADD      r5,sp,#0x24
000060  cde0              LDM      r5,{r5-r7}
;;;60     char i,t=0;
000062  f04f0400          MOV      r4,#0
;;;61     //char *ptr=&data1;
;;;62     char UOB1[16]; 
;;;63     UOB1[0]=data0;
000066  f88d1000          STRB     r1,[sp,#0]
;;;64     UOB1[1]=data1;
00006a  f88d2001          STRB     r2,[sp,#1]
;;;65     UOB1[2]=data2;
00006e  f88d3002          STRB     r3,[sp,#2]
;;;66     UOB1[3]=data3;
000072  f88d5003          STRB     r5,[sp,#3]
;;;67     UOB1[4]=data4;
000076  f88d6004          STRB     r6,[sp,#4]
;;;68     UOB1[5]=data5;
00007a  f88d7005          STRB     r7,[sp,#5]
;;;69     
;;;70     for (i=0;i<num;i++)
00007e  4621              MOV      r1,r4
000080  466d              MOV      r5,sp                 ;62
000082  e005              B        |L1.144|
                  |L1.132|
;;;71     	{
;;;72     	t^=UOB1[i];
000084  5c6a              LDRB     r2,[r5,r1]
000086  ea820404          EOR      r4,r2,r4
00008a  f1010101          ADD      r1,r1,#1              ;70
00008e  b2c9              UXTB     r1,r1                 ;70
                  |L1.144|
000090  4281              CMP      r1,r0                 ;70
000092  d3f7              BCC      |L1.132|
;;;73     	}    
;;;74     UOB1[num]=num;
000094  5428              STRB     r0,[r5,r0]
;;;75     t^=UOB1[num];
000096  ea800204          EOR      r2,r0,r4
;;;76     UOB1[num+1]=t;
00009a  eb050100          ADD      r1,r5,r0
00009e  704a              STRB     r2,[r1,#1]
;;;77     UOB1[num+2]=END;
0000a0  f04f020a          MOV      r2,#0xa
0000a4  708a              STRB     r2,[r1,#2]
;;;78     
;;;79     for (i=0;i<num+3;i++)
0000a6  f04f0400          MOV      r4,#0
0000aa  f1000603          ADD      r6,r0,#3
0000ae  e005              B        |L1.188|
                  |L1.176|
;;;80     	{
;;;81     	putchar1(UOB1[i]);
0000b0  5d28              LDRB     r0,[r5,r4]
0000b2  f7fffffe          BL       putchar1
0000b6  f1040401          ADD      r4,r4,#1              ;79
0000ba  b2e4              UXTB     r4,r4                 ;79
                  |L1.188|
0000bc  42b4              CMP      r4,r6                 ;79
0000be  d3f7              BCC      |L1.176|
;;;82     	}   	
;;;83     }
0000c0  bdff              POP      {r0-r7,pc}
;;;84     
                          ENDP

                  uart1_init PROC
;;;134    //-----------------------------------------------
;;;135    uint32_t uart1_init(uint32_t baudrate)
0000c2  49d2              LDR      r1,|L1.1036|
;;;136    {
;;;137    uint32_t Fdiv;
;;;138    uint32_t pclkdiv, pclk;
;;;139    
;;;140    LPC_PINCON->PINSEL4 &= ~0x0000000F;
0000c4  690a              LDR      r2,[r1,#0x10]
0000c6  f022020f          BIC      r2,r2,#0xf
0000ca  610a              STR      r2,[r1,#0x10]
;;;141    LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
0000cc  690a              LDR      r2,[r1,#0x10]
0000ce  f042020a          ORR      r2,r2,#0xa
0000d2  610a              STR      r2,[r1,#0x10]
;;;142    
;;;143    LPC_PINCON->PINSEL4 &= ~0x00000030;//!!!!!!!!!!!
0000d4  690a              LDR      r2,[r1,#0x10]
0000d6  f0220230          BIC      r2,r2,#0x30
0000da  610a              STR      r2,[r1,#0x10]
;;;144    LPC_PINCON->PINSEL4 |= 0x00000000; //!!!!!!!!!!! 
0000dc  690a              LDR      r2,[r1,#0x10]
0000de  610a              STR      r2,[r1,#0x10]
;;;145    LPC_GPIO2->FIODIR|=(1UL<<2);
0000e0  49cb              LDR      r1,|L1.1040|
0000e2  6c0a              LDR      r2,[r1,#0x40]
0000e4  f0420204          ORR      r2,r2,#4
0000e8  640a              STR      r2,[r1,#0x40]
;;;146    LPC_GPIO2->FIOPIN&=~(1UL<<2);
0000ea  6d4a              LDR      r2,[r1,#0x54]
0000ec  f0220204          BIC      r2,r2,#4
0000f0  654a              STR      r2,[r1,#0x54]
;;;147    
;;;148    pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
0000f2  49c9              LDR      r1,|L1.1048|
0000f4  6809              LDR      r1,[r1,#0]
0000f6  f3c12201          UBFX     r2,r1,#8,#2
;;;149    switch ( pclkdiv )
;;;150    	{
;;;151    	case 0x00:
;;;152    	default:
;;;153         pclk = SystemFrequency/4;
0000fa  49c8              LDR      r1,|L1.1052|
0000fc  2a01              CMP      r2,#1                 ;149
0000fe  6809              LDR      r1,[r1,#0]
000100  d00b              BEQ      |L1.282|
000102  2a02              CMP      r2,#2                 ;149
000104  d004              BEQ      |L1.272|
000106  2a03              CMP      r2,#3                 ;149
000108  d005              BEQ      |L1.278|
00010a  ea4f0191          LSR      r1,r1,#2
;;;154    	break;
00010e  e004              B        |L1.282|
                  |L1.272|
;;;155    	case 0x01:
;;;156    	pclk = SystemFrequency;
;;;157    	break; 
;;;158    	case 0x02:
;;;159    	pclk = SystemFrequency/2;
000110  ea4f0151          LSR      r1,r1,#1
;;;160    	break; 
000114  e001              B        |L1.282|
                  |L1.278|
;;;161    	case 0x03:
;;;162    	pclk = SystemFrequency/8;
000116  ea4f01d1          LSR      r1,r1,#3
                  |L1.282|
;;;163    	break;
;;;164    	}
;;;165    
;;;166    LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
00011a  4abb              LDR      r2,|L1.1032|
00011c  f04f0383          MOV      r3,#0x83
000120  7313              STRB     r3,[r2,#0xc]
;;;167    Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
000122  ea4f1111          LSR      r1,r1,#4
000126  fbb1f0f0          UDIV     r0,r1,r0
;;;168    LPC_UART1->DLM = Fdiv / 256;							
00012a  ea4f2110          LSR      r1,r0,#8
00012e  7111              STRB     r1,[r2,#4]
;;;169    LPC_UART1->DLL = Fdiv % 256;
000130  7010              STRB     r0,[r2,#0]
;;;170    LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
000132  f04f0003          MOV      r0,#3
000136  7310              STRB     r0,[r2,#0xc]
;;;171    LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
000138  f04f0007          MOV      r0,#7
00013c  7210              STRB     r0,[r2,#8]
00013e  49b8              LDR      r1,|L1.1056|
000140  f04f0340          MOV      r3,#0x40
000144  600b              STR      r3,[r1,#0]
;;;172    
;;;173    NVIC_EnableIRQ(UART1_IRQn);
;;;174    
;;;175    LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
000146  6050              STR      r0,[r2,#4]
;;;176    return (TRUE);
000148  f04f0001          MOV      r0,#1
;;;177    
;;;178    
;;;179    }
00014c  4770              BX       lr
;;;180    
                          ENDP

                  UART1_IRQHandler PROC
;;;193    //***********************************************
;;;194    void UART1_IRQHandler (void) 
00014e  e92d41f0          PUSH     {r4-r8,lr}
;;;195    {
;;;196    uint8_t IIRValue, LSRValue;
;;;197    uint8_t Dummy = Dummy;
;;;198    char /*status,u2iir,*/data;
;;;199    
;;;200    			
;;;201    IIRValue = LPC_UART1->IIR;
000152  4ead              LDR      r6,|L1.1032|
000154  68b0              LDR      r0,[r6,#8]
;;;202        
;;;203    IIRValue >>= 1;			/* skip pending bit in IIR */
000156  ea4f0050          LSR      r0,r0,#1
;;;204    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
00015a  f0000007          AND      r0,r0,#7
;;;205    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;206      	{
;;;207    	LSRValue = LPC_UART1->LSR;
;;;208    	/* Receive Line Status */
;;;209    	
;;;210    	
;;;211    	
;;;212    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;213    		{
;;;214    	  	/* There are errors or break interrupt */
;;;215    	  	/* Read LSR will clear the interrupt */
;;;216    	  	UART1Status = LSRValue;
00015e  49a9              LDR      r1,|L1.1028|
;;;217    	  	Dummy = LPC_UART1->RBR;		/* Dummy read on RX to clear 
;;;218    							interrupt, then bail out */
;;;219    	  	return;
;;;220    		}
;;;221    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;222    		{
;;;223    		
;;;224    		data=LPC_UART1->RBR;
;;;225    		rx_buffer1[rx_wr_index1]=data;
000160  f8dfc2b0          LDR      r12,|L1.1044|
;;;226       		bRXIN1=1;
000164  f04f0701          MOV      r7,#1
000168  890d              LDRH     r5,[r1,#8]            ;225
00016a  f1ac0c64          SUB      r12,r12,#0x64         ;225
;;;227       		if (++rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
00016e  f1050201          ADD      r2,r5,#1
000172  b293              UXTH     r3,r2
;;;228       		if (++rx_counter1 == RX_BUFFER_SIZE1)
000174  898a              LDRH     r2,[r1,#0xc]
000176  2803              CMP      r0,#3                 ;205
000178  f1020201          ADD      r2,r2,#1
00017c  b294              UXTH     r4,r2
00017e  f04f0200          MOV      r2,#0                 ;227
000182  d01c              BEQ      |L1.446|
;;;229          		{
;;;230          		rx_counter1=0;
;;;231          		rx_buffer_overflow1=1;
;;;232          		}
;;;233    
;;;234    
;;;235    		}
;;;236    
;;;237      	}
;;;238    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
000184  2802              CMP      r0,#2
000186  d031              BEQ      |L1.492|
;;;239      	{
;;;240    	
;;;241    	//plazma_uart1++;
;;;242    	data=LPC_UART1->RBR;
;;;243    	rx_buffer1[rx_wr_index1]=data;
;;;244       	bRXIN1=1;
;;;245    
;;;246       	if (++rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;;;247       	if (++rx_counter1 == RX_BUFFER_SIZE1)
;;;248          	{
;;;249          	rx_counter1=0;
;;;250          	rx_buffer_overflow1=1;
;;;251          	}
;;;252    	//modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;253    	//modbus_rx_buffer_ptr++;
;;;254    //	modbus_timeout_cnt=0;
;;;255    
;;;256      	}
;;;257    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
000188  2806              CMP      r0,#6
00018a  d03e              BEQ      |L1.522|
;;;258      	{
;;;259    	/* Character Time-out indicator */
;;;260    	UART1Status |= 0x100;		/* Bit 9 as the CTI error */
;;;261      	}
;;;262    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
00018c  2801              CMP      r0,#1
00018e  d114              BNE      |L1.442|
;;;263      	{
;;;264    	/* THRE interrupt */
;;;265    	
;;;266    	LSRValue = LPC_UART1->LSR;		/* Check status in the LSR to see if
000190  7d30              LDRB     r0,[r6,#0x14]
;;;267    									valid data in U0THR or not */
;;;268    	if ( LSRValue & LSR_THRE )
000192  0680              LSLS     r0,r0,#26
000194  d544              BPL      |L1.544|
;;;269    		{
;;;270    	  	UART1TxEmpty = 1;
000196  700f              STRB     r7,[r1,#0]
;;;271    		if (tx_counter1)
000198  8a48              LDRH     r0,[r1,#0x12]  ; tx_counter1
00019a  b3a8              CBZ      r0,|L1.520|
;;;272       			{
;;;273       			--tx_counter1;
00019c  f1a00001          SUB      r0,r0,#1
0001a0  8248              STRH     r0,[r1,#0x12]
;;;274       			LPC_UART1->THR=tx_buffer1[tx_rd_index1];
0001a2  4b9c              LDR      r3,|L1.1044|
0001a4  8a08              LDRH     r0,[r1,#0x10]  ; tx_rd_index1
0001a6  5c1b              LDRB     r3,[r3,r0]
0001a8  7033              STRB     r3,[r6,#0]
;;;275       			if (++tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
0001aa  f1000001          ADD      r0,r0,#1
0001ae  b280              UXTH     r0,r0
0001b0  8208              STRH     r0,[r1,#0x10]
0001b2  f5b07f96          CMP      r0,#0x12c
0001b6  d100              BNE      |L1.442|
0001b8  820a              STRH     r2,[r1,#0x10]
                  |L1.442|
;;;276       			}
;;;277    		else LPC_GPIO2->FIOPIN&=~(1UL<<2);
;;;278    		}
;;;279    	else
;;;280    		{
;;;281    	  	UART1TxEmpty = 0;
;;;282    		}
;;;283      	}
;;;284    }
0001ba  e8bd81f0          POP      {r4-r8,pc}
                  |L1.446|
0001be  7d30              LDRB     r0,[r6,#0x14]         ;207
0001c0  f0100f9e          TST      r0,#0x9e              ;212
0001c4  d002              BEQ      |L1.460|
0001c6  6148              STR      r0,[r1,#0x14]         ;216  ; UART1Status
0001c8  7830              LDRB     r0,[r6,#0]            ;217
0001ca  e7f6              B        |L1.442|
                  |L1.460|
0001cc  07c0              LSLS     r0,r0,#31             ;221
0001ce  d0f4              BEQ      |L1.442|
0001d0  7830              LDRB     r0,[r6,#0]            ;224
0001d2  f80c0005          STRB     r0,[r12,r5]           ;225
0001d6  708f              STRB     r7,[r1,#2]            ;226
0001d8  810b              STRH     r3,[r1,#8]            ;227
0001da  2b64              CMP      r3,#0x64              ;227
0001dc  d100              BNE      |L1.480|
0001de  810a              STRH     r2,[r1,#8]            ;227
                  |L1.480|
0001e0  818c              STRH     r4,[r1,#0xc]          ;228
0001e2  2c64              CMP      r4,#0x64              ;228
0001e4  d1e9              BNE      |L1.442|
0001e6  818a              STRH     r2,[r1,#0xc]          ;230
0001e8  70cf              STRB     r7,[r1,#3]            ;231
0001ea  e7e6              B        |L1.442|
                  |L1.492|
0001ec  7830              LDRB     r0,[r6,#0]            ;242
0001ee  f80c0005          STRB     r0,[r12,r5]           ;243
0001f2  708f              STRB     r7,[r1,#2]            ;244
0001f4  810b              STRH     r3,[r1,#8]            ;246
0001f6  2b64              CMP      r3,#0x64              ;246
0001f8  d100              BNE      |L1.508|
0001fa  810a              STRH     r2,[r1,#8]            ;246
                  |L1.508|
0001fc  818c              STRH     r4,[r1,#0xc]          ;247
0001fe  2c64              CMP      r4,#0x64              ;247
000200  d1db              BNE      |L1.442|
000202  818a              STRH     r2,[r1,#0xc]          ;249
000204  70cf              STRB     r7,[r1,#3]            ;250
000206  e7d8              B        |L1.442|
                  |L1.520|
000208  e004              B        |L1.532|
                  |L1.522|
00020a  6948              LDR      r0,[r1,#0x14]         ;260  ; UART1Status
00020c  f4407080          ORR      r0,r0,#0x100          ;260
000210  6148              STR      r0,[r1,#0x14]         ;260  ; UART1Status
000212  e7d2              B        |L1.442|
                  |L1.532|
000214  487e              LDR      r0,|L1.1040|
000216  6d41              LDR      r1,[r0,#0x54]         ;277
000218  f0210104          BIC      r1,r1,#4              ;277
00021c  6541              STR      r1,[r0,#0x54]         ;277
00021e  e7cc              B        |L1.442|
                  |L1.544|
000220  700a              STRB     r2,[r1,#0]            ;281
000222  e7ca              B        |L1.442|
;;;285     
                          ENDP

                  uart_in_an1 PROC
;;;287    //-----------------------------------------------
;;;288    void uart_in_an1(void)
000224  b5fe              PUSH     {r1-r7,lr}
;;;289    {
;;;290    char i;
;;;291    //motor_ind[0]^=0b0001000;
;;;292    plazma_suz[0]++;
000226  4977              LDR      r1,|L1.1028|
000228  3118              ADDS     r1,r1,#0x18
00022a  7808              LDRB     r0,[r1,#0]  ; plazma_suz
00022c  f1000001          ADD      r0,r0,#1
000230  7008              STRB     r0,[r1,#0]
;;;293    
;;;294    if(UIB1[1]!=0x51)
000232  4c78              LDR      r4,|L1.1044|
000234  f1a40478          SUB      r4,r4,#0x78
000238  7863              LDRB     r3,[r4,#1]  ; UIB1
00023a  2b51              CMP      r3,#0x51
00023c  d00a              BEQ      |L1.596|
;;;295    {
;;;296    for(i=0;i<24;i++)
00023e  f04f0000          MOV      r0,#0
;;;297    	{
;;;298    	UIB10[i]=UIB1[i];
000242  f50471d7          ADD      r1,r4,#0x1ae
                  |L1.582|
000246  5c22              LDRB     r2,[r4,r0]
000248  540a              STRB     r2,[r1,r0]
00024a  f1000001          ADD      r0,r0,#1              ;296
00024e  b2c0              UXTB     r0,r0                 ;296
000250  2818              CMP      r0,#0x18              ;296
000252  d3f8              BCC      |L1.582|
                  |L1.596|
;;;299    	}
;;;300    }
;;;301    uart1_mess[0]++;
000254  4873              LDR      r0,|L1.1060|
000256  7801              LDRB     r1,[r0,#0]  ; uart1_mess
000258  f1010101          ADD      r1,r1,#1
00025c  7001              STRB     r1,[r0,#0]
;;;302    
;;;303    if((UIB1[0]==4)&&(UIB1[1]==0)&&(UIB1[2]==2)&&(UIB1[3]==0)&&(UIB1[4]==1) && (ICA_EN==0))
00025e  7820              LDRB     r0,[r4,#0]  ; UIB1
;;;304    	{
;;;305    	
;;;306    	uart_out1(5,4,1,2,(char)bps_I,(char)(bps_I/256),0);
;;;307    	plazma_uart1++;
000260  4d68              LDR      r5,|L1.1028|
000262  4f71              LDR      r7,|L1.1064|
000264  f04f0600          MOV      r6,#0                 ;296
000268  2804              CMP      r0,#4                 ;303
00026a  d120              BNE      |L1.686|
00026c  b9fb              CBNZ     r3,|L1.686|
00026e  78a0              LDRB     r0,[r4,#2]            ;303  ; UIB1
000270  2802              CMP      r0,#2                 ;303
000272  d11c              BNE      |L1.686|
000274  78e0              LDRB     r0,[r4,#3]            ;303  ; UIB1
000276  b9d0              CBNZ     r0,|L1.686|
000278  7920              LDRB     r0,[r4,#4]            ;303  ; UIB1
00027a  2801              CMP      r0,#1                 ;303
00027c  d117              BNE      |L1.686|
00027e  8838              LDRH     r0,[r7,#0]            ;303  ; ICA_EN
000280  b9a8              CBNZ     r0,|L1.686|
000282  486a              LDR      r0,|L1.1068|
000284  2302              MOVS     r3,#2                 ;306
000286  2201              MOVS     r2,#1                 ;306
000288  f9b00000          LDRSH    r0,[r0,#0]            ;306  ; bps_I
00028c  17c1              ASRS     r1,r0,#31             ;306
00028e  eb006111          ADD      r1,r0,r1,LSR #24      ;306
000292  f3c12107          UBFX     r1,r1,#8,#8           ;306
000296  b2c0              UXTB     r0,r0                 ;306
000298  e88d0043          STM      sp,{r0,r1,r6}         ;306
00029c  2104              MOVS     r1,#4                 ;306
00029e  2005              MOVS     r0,#5                 ;306
0002a0  f7fffffe          BL       uart_out1
0002a4  7928              LDRB     r0,[r5,#4]  ; plazma_uart1
0002a6  f1000001          ADD      r0,r0,#1
0002aa  7128              STRB     r0,[r5,#4]
;;;308    
;;;309    	uart1_net_cnt=0;
0002ac  706e              STRB     r6,[r5,#1]
                  |L1.686|
;;;310    	}
;;;311    
;;;312    
;;;313    if((UIB1[0]==6)&&(UIB1[1]==0)&&(UIB1[2]==100) && (ICA_EN==0))
0002ae  7820              LDRB     r0,[r4,#0]  ; UIB1
0002b0  2806              CMP      r0,#6
0002b2  d106              BNE      |L1.706|
0002b4  7861              LDRB     r1,[r4,#1]  ; UIB1
0002b6  b921              CBNZ     r1,|L1.706|
0002b8  78a1              LDRB     r1,[r4,#2]  ; UIB1
0002ba  2964              CMP      r1,#0x64
0002bc  d101              BNE      |L1.706|
0002be  8839              LDRH     r1,[r7,#0]  ; ICA_EN
0002c0  b111              CBZ      r1,|L1.712|
                  |L1.706|
;;;314    	{
;;;315    	short tempSSSS;
;;;316    	tempSSSS=(short)UIB1[4] + ((short)UIB1[3])*256;
;;;317    
;;;318    	plazma_ica2=tempSSSS;
;;;319    
;;;320    	if(tempSSSS&0x4000)
;;;321    		{
;;;322    		tempSSSS&=0x3fff;
;;;323    		if((tempSSSS>0)&&(tempSSSS<5))tempSSSS=0;
;;;324    		else if(tempSSSS>=60)tempSSSS=60;
;;;325    		if(TBAT!=tempSSSS)lc640_write_int(EE_TBAT,tempSSSS);
;;;326    
;;;327    		main_kb_cnt=(tempSSSS*60)-20;
;;;328    		}
;;;329    	else ica_cntrl_hndl=tempSSSS;
;;;330    
;;;331    	ica_cntrl_hndl_cnt=200;
;;;332    
;;;333    	uart1_net_cnt=0;
;;;334    	}
;;;335    
;;;336    
;;;337    else if((UIB1[0]==4)&&(UIB1[1]==1)&&(UIB1[2]==2) && (ICA_EN==1) && (ICA_CH==2) )
0002c2  2804              CMP      r0,#4
0002c4  d030              BEQ      |L1.808|
0002c6  e03c              B        |L1.834|
                  |L1.712|
0002c8  7920              LDRB     r0,[r4,#4]            ;316  ; UIB1
0002ca  78e1              LDRB     r1,[r4,#3]            ;316  ; UIB1
0002cc  eb002001          ADD      r0,r0,r1,LSL #8       ;316
0002d0  b200              SXTH     r0,r0                 ;316
0002d2  4957              LDR      r1,|L1.1072|
0002d4  8008              STRH     r0,[r1,#0]            ;318
0002d6  0441              LSLS     r1,r0,#17             ;320
0002d8  d51e              BPL      |L1.792|
0002da  f3c0040d          UBFX     r4,r0,#0,#14          ;322
0002de  f1a40001          SUB      r0,r4,#1              ;323
0002e2  2804              CMP      r0,#4                 ;323
0002e4  d202              BCS      |L1.748|
0002e6  f04f0400          MOV      r4,#0                 ;323
0002ea  e003              B        |L1.756|
                  |L1.748|
0002ec  2c3c              CMP      r4,#0x3c              ;324
0002ee  db01              BLT      |L1.756|
0002f0  f04f043c          MOV      r4,#0x3c              ;324
                  |L1.756|
0002f4  484f              LDR      r0,|L1.1076|
0002f6  f9b00000          LDRSH    r0,[r0,#0]            ;325  ; TBAT
0002fa  42a0              CMP      r0,r4                 ;325
0002fc  d003              BEQ      |L1.774|
0002fe  4621              MOV      r1,r4                 ;325
000300  20c2              MOVS     r0,#0xc2              ;325
000302  f7fffffe          BL       lc640_write_int
                  |L1.774|
000306  ebc41004          RSB      r0,r4,r4,LSL #4       ;327
00030a  f06f0113          MVN      r1,#0x13              ;327
00030e  eb010080          ADD      r0,r1,r0,LSL #2       ;327
000312  4949              LDR      r1,|L1.1080|
000314  8008              STRH     r0,[r1,#0]            ;327
000316  e001              B        |L1.796|
                  |L1.792|
000318  4948              LDR      r1,|L1.1084|
00031a  8008              STRH     r0,[r1,#0]            ;329
                  |L1.796|
00031c  4948              LDR      r1,|L1.1088|
00031e  f04f00c8          MOV      r0,#0xc8              ;331
000322  8008              STRH     r0,[r1,#0]            ;331
000324  706e              STRB     r6,[r5,#1]            ;333
                  |L1.806|
;;;338    	{
;;;339    	
;;;340    	ica_your_current=(short)UIB1[3]+((short)UIB1[4]*256);
;;;341    
;;;342    	uart1_net_cnt=0;
;;;343    	}
;;;344    else if((UIB1[0]==CMND)&&(UIB1[1]==1))
;;;345    	{
;;;346    //	adc_buff_out_[0]=UIB1[2]+(UIB1[3]*256);
;;;347    //	adc_buff_out_[1]=UIB1[4]+(UIB1[5]*256);
;;;348    	}
;;;349    
;;;350    else if((UIB1[0]==CMND)&&(UIB1[1]==2))
;;;351    	{
;;;352    //	adc_buff_out_[2]=UIB1[2]+(UIB1[3]*256);
;;;353    //	in_stat_out[0]=UIB1[4];
;;;354    //	in_stat_out[1]=UIB1[5];
;;;355    	}
;;;356    	
;;;357    			
;;;358    }
000326  bdfe              POP      {r1-r7,pc}
                  |L1.808|
000328  7861              LDRB     r1,[r4,#1]            ;337  ; UIB1
00032a  2901              CMP      r1,#1                 ;337
00032c  d109              BNE      |L1.834|
00032e  78a1              LDRB     r1,[r4,#2]            ;337  ; UIB1
000330  2902              CMP      r1,#2                 ;337
000332  d106              BNE      |L1.834|
000334  8839              LDRH     r1,[r7,#0]            ;337  ; ICA_EN
000336  2901              CMP      r1,#1                 ;337
000338  d103              BNE      |L1.834|
00033a  4942              LDR      r1,|L1.1092|
00033c  8809              LDRH     r1,[r1,#0]            ;337  ; ICA_CH
00033e  2902              CMP      r1,#2                 ;337
000340  d004              BEQ      |L1.844|
                  |L1.834|
000342  2816              CMP      r0,#0x16              ;344
000344  d1ef              BNE      |L1.806|
000346  7860              LDRB     r0,[r4,#1]            ;344  ; UIB1
000348  2801              CMP      r0,#1                 ;344
00034a  bdfe              POP      {r1-r7,pc}
                  |L1.844|
00034c  78e0              LDRB     r0,[r4,#3]            ;340  ; UIB1
00034e  7921              LDRB     r1,[r4,#4]            ;340  ; UIB1
000350  eb002001          ADD      r0,r0,r1,LSL #8       ;340
000354  493c              LDR      r1,|L1.1096|
000356  8008              STRH     r0,[r1,#0]            ;340
000358  706e              STRB     r6,[r5,#1]            ;342
00035a  bdfe              POP      {r1-r7,pc}
;;;359     
                          ENDP

                  index_offset1 PROC
;;;360    //-----------------------------------------------
;;;361    char index_offset1 (signed char index,signed char offset)
00035c  4408              ADD      r0,r0,r1
;;;362    {
;;;363    index=index+offset;
00035e  b240              SXTB     r0,r0
;;;364    if(index>=RX_BUFFER_SIZE1) index-=RX_BUFFER_SIZE1; 
000360  2864              CMP      r0,#0x64
000362  db02              BLT      |L1.874|
000364  f1a00064          SUB      r0,r0,#0x64
000368  b240              SXTB     r0,r0
                  |L1.874|
;;;365    if(index<0) index+=RX_BUFFER_SIZE1;
00036a  2800              CMP      r0,#0
00036c  da02              BGE      |L1.884|
00036e  f1000064          ADD      r0,r0,#0x64
000372  b240              SXTB     r0,r0
                  |L1.884|
;;;366    return index;
000374  b2c0              UXTB     r0,r0
;;;367    }
000376  4770              BX       lr
;;;368    
                          ENDP

                  control_check1 PROC
;;;369    //-----------------------------------------------
;;;370    char control_check1(char index)
000378  b570              PUSH     {r4-r6,lr}
;;;371    {
;;;372    char i=0,ii=0,iii;
00037a  f04f0200          MOV      r2,#0
;;;373    
;;;374    if(rx_buffer1[index]!=END) goto error_cc;
00037e  4e25              LDR      r6,|L1.1044|
000380  f1a60664          SUB      r6,r6,#0x64
000384  5c31              LDRB     r1,[r6,r0]
000386  290a              CMP      r1,#0xa
000388  d120              BNE      |L1.972|
;;;375    
;;;376    ii=rx_buffer1[index_offset1(index,-2)];
00038a  b240              SXTB     r0,r0
00038c  1e91              SUBS     r1,r2,#2
00038e  4605              MOV      r5,r0
000390  f7fffffe          BL       index_offset1
000394  5c34              LDRB     r4,[r6,r0]
;;;377    iii=0;
000396  f04f0300          MOV      r3,#0
;;;378    for(i=0;i<=ii;i++)
00039a  e00b              B        |L1.948|
                  |L1.924|
;;;379    	{
;;;380    	iii^=rx_buffer1[index_offset1(index,-2-ii+i)];
00039c  1b10              SUBS     r0,r2,r4
00039e  1e80              SUBS     r0,r0,#2
0003a0  b241              SXTB     r1,r0
0003a2  4628              MOV      r0,r5
0003a4  f7fffffe          BL       index_offset1
0003a8  5c30              LDRB     r0,[r6,r0]
0003aa  ea800303          EOR      r3,r0,r3
0003ae  f1020201          ADD      r2,r2,#1              ;378
0003b2  b2d2              UXTB     r2,r2                 ;378
                  |L1.948|
0003b4  42a2              CMP      r2,r4                 ;378
0003b6  d9f1              BLS      |L1.924|
;;;381    	}
;;;382    if (iii!=rx_buffer1[index_offset1(index,-1)]) goto error_cc;	
0003b8  f04f31ff          MOV      r1,#0xffffffff
0003bc  4628              MOV      r0,r5
0003be  f7fffffe          BL       index_offset1
0003c2  5c30              LDRB     r0,[r6,r0]
0003c4  4298              CMP      r0,r3
0003c6  d101              BNE      |L1.972|
;;;383    
;;;384    
;;;385    //success_cc:
;;;386    return 1;
0003c8  2001              MOVS     r0,#1
;;;387    //goto end_cc;
;;;388    error_cc:
;;;389    return 0;
;;;390    //goto end_cc;
;;;391    
;;;392    //end_cc:
;;;393    //__nop();
;;;394    }
0003ca  bd70              POP      {r4-r6,pc}
                  |L1.972|
0003cc  2000              MOVS     r0,#0                 ;389
0003ce  bd70              POP      {r4-r6,pc}
;;;395    
                          ENDP

                  uart_in1 PROC
;;;396    //-----------------------------------------------
;;;397    void uart_in1(void)
0003d0  e92d41f0          PUSH     {r4-r8,lr}
;;;398    {
;;;399    char temp,i/*,count*/;
;;;400    
;;;401    __disable_irq();
0003d4  b672              CPSID    i
;;;402    
;;;403    if(rx_buffer_overflow1)
0003d6  4d0b              LDR      r5,|L1.1028|
0003d8  2600              MOVS     r6,#0
0003da  78e8              LDRB     r0,[r5,#3]  ; rx_buffer_overflow1
0003dc  b118              CBZ      r0,|L1.998|
;;;404    	{
;;;405    	rx_wr_index1=0;
0003de  812e              STRH     r6,[r5,#8]
;;;406    	rx_rd_index1=0;
0003e0  816e              STRH     r6,[r5,#0xa]
;;;407    	rx_counter1=0;
0003e2  81ae              STRH     r6,[r5,#0xc]
;;;408    	rx_buffer_overflow1=0;
0003e4  70ee              STRB     r6,[r5,#3]
                  |L1.998|
;;;409    	}    
;;;410    usart1_router_wrk=1;	
0003e6  f04f0001          MOV      r0,#1
0003ea  71a8              STRB     r0,[r5,#6]
;;;411    if(rx_counter1&&(rx_buffer1[index_offset1(rx_wr_index1,-1)])==END)
0003ec  89a8              LDRH     r0,[r5,#0xc]  ; rx_counter1
0003ee  b368              CBZ      r0,|L1.1100|
0003f0  8928              LDRH     r0,[r5,#8]  ; rx_wr_index1
0003f2  f04f32ff          MOV      r2,#0xffffffff
0003f6  4611              MOV      r1,r2
0003f8  b240              SXTB     r0,r0
0003fa  f7fffffe          BL       index_offset1
0003fe  4f05              LDR      r7,|L1.1044|
000400  3f64              SUBS     r7,r7,#0x64
000402  e024              B        |L1.1102|
                  |L1.1028|
                          DCD      ||.data||
                  |L1.1032|
                          DCD      0x40010000
                  |L1.1036|
                          DCD      0x4002c000
                  |L1.1040|
                          DCD      0x2009c000
                  |L1.1044|
                          DCD      ||.bss||+0x78
                  |L1.1048|
                          DCD      0x400fc1a8
                  |L1.1052|
                          DCD      SystemFrequency
                  |L1.1056|
                          DCD      0xe000e100
                  |L1.1060|
                          DCD      ||.bss||+0x1a4
                  |L1.1064|
                          DCD      ICA_EN
                  |L1.1068|
                          DCD      bps_I
                  |L1.1072|
                          DCD      plazma_ica2
                  |L1.1076|
                          DCD      TBAT
                  |L1.1080|
                          DCD      main_kb_cnt
                  |L1.1084|
                          DCD      ica_cntrl_hndl
                  |L1.1088|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.1092|
                          DCD      ICA_CH
                  |L1.1096|
                          DCD      ica_your_current
                  |L1.1100|
00044c  e035              B        |L1.1210|
                  |L1.1102|
00044e  5c38              LDRB     r0,[r7,r0]
000450  280a              CMP      r0,#0xa
000452  d132              BNE      |L1.1210|
;;;412    	{
;;;413    	
;;;414         temp=rx_buffer1[index_offset1(rx_wr_index1,-3)];
000454  8928              LDRH     r0,[r5,#8]  ; rx_wr_index1
000456  f06f0102          MVN      r1,#2
00045a  b240              SXTB     r0,r0
00045c  f7fffffe          BL       index_offset1
000460  5c3c              LDRB     r4,[r7,r0]
;;;415        	if(temp<20) 
000462  2c14              CMP      r4,#0x14
000464  d229              BCS      |L1.1210|
;;;416        		{
;;;417        		if(control_check1(index_offset1(rx_wr_index1,-1)))
000466  8928              LDRH     r0,[r5,#8]  ; rx_wr_index1
000468  4611              MOV      r1,r2
00046a  b240              SXTB     r0,r0
00046c  f7fffffe          BL       index_offset1
000470  f7fffffe          BL       control_check1
000474  b308              CBZ      r0,|L1.1210|
;;;418        			{
;;;419        		
;;;420        			rx_rd_index1=index_offset1(rx_wr_index1,-3-temp);
000476  1ce0              ADDS     r0,r4,#3
000478  4240              RSBS     r0,r0,#0
00047a  b241              SXTB     r1,r0
00047c  8928              LDRH     r0,[r5,#8]  ; rx_wr_index1
00047e  b240              SXTB     r0,r0
000480  f7fffffe          BL       index_offset1
000484  8168              STRH     r0,[r5,#0xa]
;;;421        			for(i=0;i<temp;i++)
000486  f04f0200          MOV      r2,#0
;;;422    				{
;;;423    				UIB1[i]=rx_buffer1[index_offset1(rx_rd_index1,i)];
00048a  f1a70314          SUB      r3,r7,#0x14
00048e  e009              B        |L1.1188|
                  |L1.1168|
000490  8968              LDRH     r0,[r5,#0xa]  ; rx_rd_index1
000492  b251              SXTB     r1,r2
000494  b240              SXTB     r0,r0
000496  f7fffffe          BL       index_offset1
00049a  5c38              LDRB     r0,[r7,r0]
00049c  5498              STRB     r0,[r3,r2]
00049e  f1020201          ADD      r2,r2,#1              ;421
0004a2  b2d2              UXTB     r2,r2                 ;421
                  |L1.1188|
0004a4  42a2              CMP      r2,r4                 ;421
0004a6  d3f3              BCC      |L1.1168|
;;;424    				} 
;;;425    			rx_rd_index1=rx_wr_index1;
0004a8  8928              LDRH     r0,[r5,#8]  ; rx_wr_index1
0004aa  8168              STRH     r0,[r5,#0xa]
;;;426    			rx_counter1=0;
0004ac  81ae              STRH     r6,[r5,#0xc]
;;;427    			uart_in_an1();
0004ae  f7fffffe          BL       uart_in_an1
;;;428    			
;;;429    			if(usart1_router_stat==ursMEGA)usart1_router_wrk=0;
0004b2  7968              LDRB     r0,[r5,#5]  ; usart1_router_stat
0004b4  2855              CMP      r0,#0x55
0004b6  d100              BNE      |L1.1210|
0004b8  71ae              STRB     r6,[r5,#6]
                  |L1.1210|
;;;430        			}
;;;431     	
;;;432        		} 
;;;433        	}
;;;434    //rx_read_power_cnt_plazma++;
;;;435    #ifdef CE102M_ENABLED
;;;436    	if(rx_read_power_cnt_phase==1)
;;;437    		{
;;;438    		
;;;439    		if((rx_buffer1[rx_wr_index1-1]==0x0a)/*&&(rx_buffer1[6]==0xc5)*/)
;;;440    			{
;;;441    			rx_read_power_cnt_plazma++;
;;;442    			rx_read_power_cnt_phase=2;
;;;443    			ce102m_delayCnt=200;
;;;444    			}
;;;445    		}
;;;446    else if(rx_read_power_cnt_phase==3)
;;;447    		{
;;;448    		
;;;449    		if(/*(rx_buffer1[6]==0x81)&&*/(rx_buffer1[rx_wr_index1-2]==0x03))
;;;450    			{
;;;451    			rx_read_power_cnt_plazma++;
;;;452    			if(bENERGOMETR_UIP==0) rx_read_power_cnt_phase=4;
;;;453    			else if(bENERGOMETR_UIP==1) rx_read_power_cnt_phase=8;
;;;454    			else rx_read_power_cnt_phase=20;
;;;455    			ce102m_delayCnt=200;
;;;456    			}
;;;457    		}
;;;458    else if((rx_read_power_cnt_phase==5)&&(rx_wr_index1>10))
;;;459    		{
;;;460    		
;;;461    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)=='(')
;;;462    			{
;;;463    			rx_read_power_cnt_plazma++;
;;;464    			rx_read_power_cnt_phase=6;
;;;465    			ce102m_delayCnt=200;
;;;466    			rx_wr_index1=0;
;;;467    			}
;;;468    		}
;;;469    else if(rx_read_power_cnt_phase==6)
;;;470    		{
;;;471    		char float_buff[20]={0,0,0,0,0,0,0,0,0,0};
;;;472    		char* float_buff_ptr;
;;;473    		float volta;
;;;474    		char i,point_marker;
;;;475    		unsigned short ii;		
;;;476    		float_buff_ptr=float_buff;
;;;477    
;;;478    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)==')')
;;;479    			{
;;;480    			ii=rx_wr_index1-1;
;;;481    			rx_read_power_cnt_plazma=rx_wr_index1-1;
;;;482    			
;;;483    			volta_short=0;//rx_wr_index1-1;
;;;484    			for(i=0;i<ii;i++)
;;;485    				{
;;;486    				float_buff[i]=rx_buffer1[i]&0x7f;
;;;487    				float_buff[i+1]=' ';
;;;488     //volta_short+=(rx_buffer1[ii-i]&0x7f);//-0x30)*pow(10,i);
;;;489     				if(float_buff[i]=='.')point_marker=i;
;;;490    				rx_read_power_cnt_plazma++;
;;;491    				}
;;;492    
;;;493    
;;;494    		///if(((rx_buffer1[rx_wr_index1-2])&0x7f)=='.')
;;;495    		///	{
;;;496    		//	char s [] = "1.23";
;;;497    		///	ii=rx_wr_index1-1;
;;;498    		///	rx_read_power_cnt_plazma++;
;;;499    			rx_read_power_cnt_phase=15;
;;;500    			ce102m_delayCnt=200;
;;;501    			//memcpy(float_buff,rx_buffer1,rx_wr_index1-1);
;;;502    		///	volta_short=0;//rx_wr_index1-1;
;;;503    		///	for(i=0;i<ii;i++)
;;;504    				{
;;;505    		///		float_buff[i]=rx_buffer1[i]&0x7f;
;;;506    		///		float_buff[i+1]=' ';
;;;507    				/*if(rx_buffer1[ii-i]=='(')break;
;;;508    				else*/ //volta_short+=(rx_buffer1[ii-i]&0x7f);//-0x30)*pow(10,i);
;;;509    				}
;;;510    			//float_buff[0]='2';
;;;511    			//float_buff[1]='3';
;;;512    			//float_buff[2]='4';
;;;513    			//float_buff[3]='.';
;;;514    			//float_buff[4]='5';
;;;515    			//uart_out__adr1(float_buff, 10);
;;;516    			//volta=atof(s);//atof(float_buff);
;;;517    			volta_short=((atoi(float_buff))*10)+ ((atoi(&float_buff[point_marker+1]))/10);
;;;518    			}
;;;519    		}
;;;520    else if(rx_read_power_cnt_phase==7)
;;;521    		{
;;;522    
;;;523    
;;;524    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)==')')
;;;525    			{
;;;526    			rx_read_power_cnt_phase=18;
;;;527    			rx_wr_index1=0;	
;;;528    			ce102m_delayCnt=200;
;;;529    			}
;;;530    		}
;;;531    else if((rx_read_power_cnt_phase==9)&&(rx_wr_index1>15))
;;;532    		{
;;;533    		
;;;534    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)=='(')
;;;535    			{
;;;536    			rx_read_power_cnt_plazma++;
;;;537    			rx_read_power_cnt_phase=10;
;;;538    			
;;;539    			rx_wr_index1=0;
;;;540    			}
;;;541    		}
;;;542    else if((rx_read_power_cnt_phase==10)/*&&(rx_wr_index1>2)*/)
;;;543    		{
;;;544    		char float_buff[20]={0,0,0,0,0,0,0,0,0,0};
;;;545    		char* float_buff_ptr;
;;;546    		float curr;
;;;547    		char i,point_marker;
;;;548    		unsigned short ii;
;;;549    		int curr_1,curr_2;		
;;;550    		float_buff_ptr=float_buff;
;;;551    
;;;552    
;;;553    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)==')')
;;;554    			{
;;;555    		//	char s [] = "1.23";
;;;556    			ii=rx_wr_index1-1;
;;;557    			rx_read_power_cnt_plazma=rx_wr_index1-1;
;;;558    			
;;;559    			//ce102m_delayCnt=500;
;;;560    			//memcpy(float_buff,rx_buffer1,rx_wr_index1-1);
;;;561    			curr_short=0;//rx_wr_index1-1;
;;;562    			for(i=0;i<ii;i++)
;;;563    				{
;;;564    				float_buff[i]=rx_buffer1[i]&0x7f;
;;;565    				float_buff[i+1]=' ';
;;;566     //volta_short+=(rx_buffer1[ii-i]&0x7f);//-0x30)*pow(10,i);
;;;567     				if(float_buff[i]=='.')point_marker=i;
;;;568    				rx_read_power_cnt_plazma++;
;;;569    				}
;;;570    			curr_short=ii;
;;;571    			/*float_buff[0]='2';
;;;572    			float_buff[1]='.';
;;;573    			float_buff[2]='4';
;;;574    			float_buff[3]='3';
;;;575    			float_buff[4]='5';*/
;;;576    			curr_1=atoi(float_buff);
;;;577    			curr_2=atoi(&float_buff[point_marker+1]);
;;;578    			curr_short=(curr_2/10)+(curr_1*100);
;;;579    			//curr=0.0;
;;;580    			//uart_out__adr1(float_buff, 6);
;;;581    			//curr=atof(float_buff);
;;;582    			//curr=0.354;
;;;583    			//uart_out__adr1((char*)&curr, 10);
;;;584    			//curr*=1000.0;
;;;585    			//(int)(curr);//volta;
;;;586    			rx_read_power_cnt_phase=17;
;;;587    			}
;;;588    		}
;;;589    
;;;590    else if((rx_read_power_cnt_phase==21)&&(rx_wr_index1>10))
;;;591    		{
;;;592    		
;;;593    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)=='(')
;;;594    			{
;;;595    			rx_read_power_cnt_plazma++;
;;;596    			rx_read_power_cnt_phase=22;
;;;597    			
;;;598    			//rx_read_power_cnt_plazma=rx_wr_index1;
;;;599    			rx_wr_index1=0;
;;;600    
;;;601    			}
;;;602    		}
;;;603    else if((rx_read_power_cnt_phase==22)&&(rx_wr_index1>2))
;;;604    		{
;;;605    		char float_buff[20]={0,0,0,0,0,0,0,0,0,0};
;;;606    		char* float_buff_ptr;
;;;607    		float power;
;;;608    		char i,point_marker;
;;;609    		unsigned short ii;
;;;610    		int power_1,power_2;		
;;;611    		float_buff_ptr=float_buff;
;;;612    
;;;613    
;;;614    		if(((rx_buffer1[rx_wr_index1-1])&0x7f)==')')
;;;615    			{
;;;616    		//	char s [] = "1.23";
;;;617    			ii=rx_wr_index1-1;
;;;618    			rx_read_power_cnt_plazma=rx_wr_index1-1;
;;;619    			
;;;620    			//ce102m_delayCnt=500;
;;;621    			//memcpy(float_buff,rx_buffer1,rx_wr_index1-1);
;;;622    			power_int=0;//rx_wr_index1-1;
;;;623    			for(i=0;i<ii;i++)
;;;624    				{
;;;625    				float_buff[i]=rx_buffer1[i]&0x7f;
;;;626    				float_buff[i+1]=' ';
;;;627     //volta_short+=(rx_buffer1[ii-i]&0x7f);//-0x30)*pow(10,i);
;;;628     				if(float_buff[i]=='.')
;;;629    					{
;;;630    					point_marker=i;
;;;631    					//float_buff[i-1]='5';
;;;632    					}
;;;633    				rx_read_power_cnt_plazma++;
;;;634    				//if((point_marker!=0)&&(i==(point_marker+3)))break;
;;;635    				}
;;;636    			power_int=ii;
;;;637    			/*float_buff[0]='2';
;;;638    			float_buff[1]='.';
;;;639    			float_buff[2]='4';
;;;640    			float_buff[3]='3';
;;;641    			float_buff[4]='5';*/
;;;642    			power_1=atoi(float_buff);
;;;643    			power_2=(atoi(&float_buff[point_marker+1]))/1000;
;;;644    			power_int=power_2+(power_1*1000);
;;;645    			//power_int=power_2;
;;;646    			//curr=0.0;
;;;647    			//float_buff[0]=rx_wr_index1;
;;;648    			//uart_out__adr1(float_buff, 5);
;;;649    			//curr=atof(float_buff);
;;;650    			//curr=0.354;
;;;651    			//uart_out__adr1((char*)&curr, 10);
;;;652    			//curr*=1000.0;
;;;653    			//(int)(curr);//volta;
;;;654    			rx_read_power_cnt_phase=16;
;;;655    			}
;;;656    		}
;;;657    
;;;658    #endif	
;;;659    
;;;660    
;;;661    __enable_irq();     
0004ba  b662              CPSIE    i
;;;662    }   	
0004bc  e67d              B        |L1.442|
;;;663    
                          ENDP


                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out_adr1 PROC
;;;37     //-----------------------------------------------
;;;38     void putchar1(char c)
000000  b570              PUSH     {r4-r6,lr}
;;;39     {
;;;40     while (tx_counter1 == TX_BUFFER_SIZE1);
000002  b0cb              SUB      sp,sp,#0x12c
000004  f04f0300          MOV      r3,#0
000008  461a              MOV      r2,r3
00000a  466d              MOV      r5,sp
00000c  e006              B        |L2.28|
                  |L2.14|
;;;41     if (tx_counter1 || ((LPC_UART1->LSR & 0x60)==0))
00000e  5c84              LDRB     r4,[r0,r2]
000010  54ac              STRB     r4,[r5,r2]
000012  ea840303          EOR      r3,r4,r3
000016  f1020201          ADD      r2,r2,#1
;;;42        {
;;;43        tx_buffer1[tx_wr_index1]=c;
;;;44        if (++tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;;;45        ++tx_counter1;
;;;46        }
;;;47     else
;;;48     	{
;;;49     	LPC_PINCON->PINSEL4 &= ~0x0000c000;//!!!!!!!!!!!
00001a  b2d2              UXTB     r2,r2
                  |L2.28|
00001c  428a              CMP      r2,r1
00001e  d3f6              BCC      |L2.14|
000020  5469              STRB     r1,[r5,r1]
000022  ea830301          EOR      r3,r3,r1
;;;50     	LPC_PINCON->PINSEL4 |= 0x00000000; //!!!!!!!!!!! 
000026  eb050001          ADD      r0,r5,r1
;;;51     	LPC_GPIO2->FIODIR|=(1UL<<2);
00002a  7043              STRB     r3,[r0,#1]
00002c  f04f020a          MOV      r2,#0xa
000030  7082              STRB     r2,[r0,#2]
;;;52     	LPC_GPIO2->FIOPIN|=(1UL<<2);
000032  f04f0400          MOV      r4,#0
000036  f1010603          ADD      r6,r1,#3
;;;53     	LPC_UART1->THR=c;
00003a  e005              B        |L2.72|
                  |L2.60|
;;;54     	} 
;;;55     }
00003c  5d28              LDRB     r0,[r5,r4]
00003e  f7fffffe          BL       putchar1
000042  f1040401          ADD      r4,r4,#1              ;43
000046  b2e4              UXTB     r4,r4                 ;44
                  |L2.72|
000048  42b4              CMP      r4,r6                 ;44
00004a  d3f7              BCC      |L2.60|
00004c  b04b              ADD      sp,sp,#0x12c          ;44
00004e  bd70              POP      {r4-r6,pc}            ;44
;;;56     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out__adr1 PROC
;;;37     //-----------------------------------------------
;;;38     void putchar1(char c)
000000  b570              PUSH     {r4-r6,lr}
;;;39     {
;;;40     while (tx_counter1 == TX_BUFFER_SIZE1);
000002  b0cb              SUB      sp,sp,#0x12c
000004  460d              MOV      r5,r1
000006  f04f0200          MOV      r2,#0
00000a  466e              MOV      r6,sp
00000c  e004              B        |L3.24|
                  |L3.14|
;;;41     if (tx_counter1 || ((LPC_UART1->LSR & 0x60)==0))
00000e  5c81              LDRB     r1,[r0,r2]
000010  54b1              STRB     r1,[r6,r2]
000012  f1020201          ADD      r2,r2,#1
000016  b2d2              UXTB     r2,r2
                  |L3.24|
000018  42aa              CMP      r2,r5
;;;42        {
;;;43        tx_buffer1[tx_wr_index1]=c;
;;;44        if (++tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;;;45        ++tx_counter1;
;;;46        }
;;;47     else
;;;48     	{
;;;49     	LPC_PINCON->PINSEL4 &= ~0x0000c000;//!!!!!!!!!!!
00001a  d3f8              BCC      |L3.14|
00001c  f04f0400          MOV      r4,#0
000020  e005              B        |L3.46|
                  |L3.34|
000022  5d30              LDRB     r0,[r6,r4]
;;;50     	LPC_PINCON->PINSEL4 |= 0x00000000; //!!!!!!!!!!! 
000024  f7fffffe          BL       putchar1
;;;51     	LPC_GPIO2->FIODIR|=(1UL<<2);
000028  f1040401          ADD      r4,r4,#1
00002c  b2e4              UXTB     r4,r4
                  |L3.46|
00002e  42ac              CMP      r4,r5
000030  d3f7              BCC      |L3.34|
;;;52     	LPC_GPIO2->FIOPIN|=(1UL<<2);
000032  b04b              ADD      sp,sp,#0x12c
000034  bd70              POP      {r4-r6,pc}
;;;53     	LPC_UART1->THR=c;
;;;54     	} 
;;;55     }
;;;56     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  getchar1 PROC
;;;37     //-----------------------------------------------
;;;38     void putchar1(char c)
000000  4b09              LDR      r3,|L4.40|
;;;39     {
;;;40     while (tx_counter1 == TX_BUFFER_SIZE1);
000002  8999              LDRH     r1,[r3,#0xc]
                  |L4.4|
000004  2900              CMP      r1,#0
000006  d0fd              BEQ      |L4.4|
000008  4808              LDR      r0,|L4.44|
00000a  895a              LDRH     r2,[r3,#0xa]  ; rx_rd_index1
00000c  5c80              LDRB     r0,[r0,r2]
;;;41     if (tx_counter1 || ((LPC_UART1->LSR & 0x60)==0))
00000e  1c52              ADDS     r2,r2,#1
000010  b292              UXTH     r2,r2
000012  815a              STRH     r2,[r3,#0xa]
000014  2a64              CMP      r2,#0x64
000016  d102              BNE      |L4.30|
000018  f04f0200          MOV      r2,#0
;;;42        {
;;;43        tx_buffer1[tx_wr_index1]=c;
;;;44        if (++tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;;;45        ++tx_counter1;
;;;46        }
;;;47     else
;;;48     	{
;;;49     	LPC_PINCON->PINSEL4 &= ~0x0000c000;//!!!!!!!!!!!
00001c  815a              STRH     r2,[r3,#0xa]
                  |L4.30|
00001e  f1a10101          SUB      r1,r1,#1
000022  8199              STRH     r1,[r3,#0xc]
;;;50     	LPC_PINCON->PINSEL4 |= 0x00000000; //!!!!!!!!!!! 
000024  4770              BX       lr
;;;51     	LPC_GPIO2->FIODIR|=(1UL<<2);
;;;52     	LPC_GPIO2->FIOPIN|=(1UL<<2);
;;;53     	LPC_UART1->THR=c;
;;;54     	} 
;;;55     }
;;;56     
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      ||.data||
                  |L4.44|
                          DCD      ||.bss||+0x14

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB1
                          %        20
                  rx_buffer1
                          %        100
                  tx_buffer1
                          %        300
                  uart1_mess
                          %        10
                  UIB10
                          %        30

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.bss||
                  data_rs1
                          %        40

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.bss||
                  memo_out1
                          %        100

                          AREA ||.data||, DATA, ALIGN=2

                  UART1TxEmpty
000000  01                DCB      0x01
                  uart1_net_cnt
000001  00                DCB      0x00
                  bRXIN1
000002  00                DCB      0x00
                  rx_buffer_overflow1
000003  00                DCB      0x00
                  plazma_uart1
000004  00                DCB      0x00
                  usart1_router_stat
000005  00                DCB      0x00
                  usart1_router_wrk
000006  0000              DCB      0x00,0x00
                  rx_wr_index1
000008  0000              DCB      0x00,0x00
                  rx_rd_index1
00000a  0000              DCB      0x00,0x00
                  rx_counter1
00000c  0000              DCB      0x00,0x00
                  tx_wr_index1
00000e  0000              DCB      0x00,0x00
                  tx_rd_index1
000010  0000              DCB      0x00,0x00
                  tx_counter1
000012  0000              DCB      0x00,0x00
                  UART1Status
                          DCD      0x00000000
                  plazma_suz
                          DCD      0x00000000
00001c  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  flag1
000000  00                DCB      0x00

                          AREA ||area_number.12||, DATA, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.data||
                  usart1_router_cnt
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "uart1.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart1_c_4c3c9f65____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_uart1_c_4c3c9f65____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart1_c_4c3c9f65____REVSH|
#line 130
|__asm___7_uart1_c_4c3c9f65____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
