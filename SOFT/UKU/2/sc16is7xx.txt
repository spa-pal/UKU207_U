; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;20     //настройка SPI1
;;;21     void sc16is700_spi_init(void)
000000  489d              LDR      r0,|L1.632|
;;;22     {
;;;23     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;24     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;25     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;26     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;27     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;28     /*
;;;29     S1SPCCR=100;
;;;30     S1SPCR=0x3f; */
;;;31     
;;;32     LPC_SPI->SPCCR=40;
00002a  4894              LDR      r0,|L1.636|
00002c  f04f0128          MOV      r1,#0x28
000030  60c1              STR      r1,[r0,#0xc]
;;;33     LPC_SPI->SPCR=0x20;
000032  f04f0120          MOV      r1,#0x20
000036  6001              STR      r1,[r0,#0]
;;;34     }
000038  4770              BX       lr
;;;35     
                          ENDP

                  sc16is700_wr_buff PROC
;;;37     //Отправка num байт из программного буфера передачи в sc16is700
;;;38     void sc16is700_wr_buff(char reg_num,char num)
00003a  e92d41f0          PUSH     {r4-r8,lr}
;;;39     {
00003e  4603              MOV      r3,r0
000040  460e              MOV      r6,r1
;;;40     short i;
;;;41     sc16is700_spi_init();
000042  f7fffffe          BL       sc16is700_spi_init
;;;42     delay_us(2);
000046  f04f0218          MOV      r2,#0x18
                  |L1.74|
00004a  f1a20201          SUB      r2,r2,#1
00004e  2a00              CMP      r2,#0
000050  d1fb              BNE      |L1.74|
;;;43     sc16is700_CS_ON 
000052  4f8b              LDR      r7,|L1.640|
000054  6838              LDR      r0,[r7,#0]
000056  f0400001          ORR      r0,r0,#1
00005a  6038              STR      r0,[r7,#0]
00005c  69f8              LDR      r0,[r7,#0x1c]
00005e  f0400001          ORR      r0,r0,#1
000062  61f8              STR      r0,[r7,#0x1c]
;;;44     spi1((reg_num&0x0f)<<3);
000064  ea4f7003          LSL      r0,r3,#28
000068  ea4f6050          LSR      r0,r0,#25
00006c  f7fffffe          BL       spi1
;;;45     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000070  f04f0400          MOV      r4,#0
000074  4d83              LDR      r5,|L1.644|
000076  e005              B        |L1.132|
                  |L1.120|
000078  5d28              LDRB     r0,[r5,r4]
00007a  f7fffffe          BL       spi1
00007e  f1040401          ADD      r4,r4,#1
000082  b224              SXTH     r4,r4
                  |L1.132|
000084  42b4              CMP      r4,r6
000086  dbf7              BLT      |L1.120|
;;;46     sc16is700_CS_OFF
000088  6838              LDR      r0,[r7,#0]
00008a  f0400001          ORR      r0,r0,#1
00008e  6038              STR      r0,[r7,#0]
000090  69b8              LDR      r0,[r7,#0x18]
000092  f0400001          ORR      r0,r0,#1
000096  61b8              STR      r0,[r7,#0x18]
;;;47     }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP

                  sc16is700_wr_byte PROC
;;;49     void sc16is700_wr_byte(char reg_num,char data)
00009c  b570              PUSH     {r4-r6,lr}
;;;50     {
00009e  4602              MOV      r2,r0
0000a0  460d              MOV      r5,r1
;;;51     sc16is700_spi_init();
0000a2  f7fffffe          BL       sc16is700_spi_init
;;;52     delay_us(2);
0000a6  f04f0018          MOV      r0,#0x18
                  |L1.170|
0000aa  f1a00001          SUB      r0,r0,#1
0000ae  2800              CMP      r0,#0
0000b0  d1fb              BNE      |L1.170|
;;;53     sc16is700_CS_ON
0000b2  4c73              LDR      r4,|L1.640|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  f0400001          ORR      r0,r0,#1
0000ba  6020              STR      r0,[r4,#0]
0000bc  69e0              LDR      r0,[r4,#0x1c]
0000be  f0400001          ORR      r0,r0,#1
0000c2  61e0              STR      r0,[r4,#0x1c]
;;;54     spi1((reg_num&0x0f)<<3);
0000c4  ea4f7002          LSL      r0,r2,#28
0000c8  ea4f6050          LSR      r0,r0,#25
0000cc  f7fffffe          BL       spi1
;;;55     spi1(data);
0000d0  4628              MOV      r0,r5
0000d2  f7fffffe          BL       spi1
;;;56     sc16is700_CS_OFF
0000d6  6820              LDR      r0,[r4,#0]
0000d8  f0400001          ORR      r0,r0,#1
0000dc  6020              STR      r0,[r4,#0]
0000de  69a0              LDR      r0,[r4,#0x18]
0000e0  f0400001          ORR      r0,r0,#1
0000e4  61a0              STR      r0,[r4,#0x18]
;;;57     }
0000e6  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP

                  sc16is700_rd_byte PROC
;;;59     
;;;60     char sc16is700_rd_byte(char reg_num)
0000e8  b510              PUSH     {r4,lr}
;;;61     {
0000ea  4602              MOV      r2,r0
;;;62     char out;
;;;63     sc16is700_spi_init();
0000ec  f7fffffe          BL       sc16is700_spi_init
;;;64     delay_us(2);
0000f0  f04f0118          MOV      r1,#0x18
                  |L1.244|
0000f4  f1a10101          SUB      r1,r1,#1
0000f8  2900              CMP      r1,#0
0000fa  d1fb              BNE      |L1.244|
;;;65     sc16is700_CS_ON
0000fc  4c60              LDR      r4,|L1.640|
0000fe  6820              LDR      r0,[r4,#0]
000100  f0400001          ORR      r0,r0,#1
000104  6020              STR      r0,[r4,#0]
000106  69e0              LDR      r0,[r4,#0x1c]
000108  f0400001          ORR      r0,r0,#1
00010c  61e0              STR      r0,[r4,#0x1c]
;;;66     spi1(((reg_num&0x0f)<<3)|0x80);
00010e  f002000f          AND      r0,r2,#0xf
000112  f04f0180          MOV      r1,#0x80
000116  ea4100c0          ORR      r0,r1,r0,LSL #3
00011a  f7fffffe          BL       spi1
;;;67     out = spi1(0xff);
00011e  20ff              MOVS     r0,#0xff
000120  f7fffffe          BL       spi1
000124  b2c0              UXTB     r0,r0
;;;68     sc16is700_CS_OFF
000126  6821              LDR      r1,[r4,#0]
000128  f0410101          ORR      r1,r1,#1
00012c  6021              STR      r1,[r4,#0]
00012e  69a1              LDR      r1,[r4,#0x18]
000130  f0410101          ORR      r1,r1,#1
000134  61a1              STR      r1,[r4,#0x18]
;;;69     return out;
;;;70     }
000136  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  sc16is700_init PROC
;;;91     
;;;92     void sc16is700_init(uint32_t baudrate)
000138  b570              PUSH     {r4-r6,lr}
;;;93     {
;;;94     
;;;95     unsigned char baud_h,baud_l;
;;;96     
;;;97     baud_h = (char)((10000000U/16U/baudrate)>>8);
00013a  4953              LDR      r1,|L1.648|
00013c  fbb1f1f0          UDIV     r1,r1,r0
000140  f3c12407          UBFX     r4,r1,#8,#8
;;;98     baud_l = (char)((10000000U/16U/baudrate));
000144  b2cd              UXTB     r5,r1
;;;99     
;;;100    if(RS485_QWARZ_DIGIT==40)
000146  4951              LDR      r1,|L1.652|
000148  f9b12000          LDRSH    r2,[r1,#0]  ; RS485_QWARZ_DIGIT
00014c  2a28              CMP      r2,#0x28
00014e  d105              BNE      |L1.348|
;;;101    	{
;;;102    	baud_h = (char)((40000000U/16U/baudrate)>>8);
000150  494f              LDR      r1,|L1.656|
000152  fbb1f1f0          UDIV     r1,r1,r0
000156  f3c12407          UBFX     r4,r1,#8,#8
;;;103    	baud_l = (char)((40000000U/16U/baudrate));
00015a  b2cd              UXTB     r5,r1
                  |L1.348|
;;;104    	} 
;;;105    if(RS485_QWARZ_DIGIT==30)
00015c  2a1e              CMP      r2,#0x1e
00015e  d105              BNE      |L1.364|
;;;106    	{
;;;107    	baud_h = (char)((30000000U/16U/baudrate)>>8);
000160  494c              LDR      r1,|L1.660|
000162  fbb1f0f0          UDIV     r0,r1,r0
000166  f3c02407          UBFX     r4,r0,#8,#8
;;;108    	baud_l = (char)((30000000U/16U/baudrate));
00016a  b2c5              UXTB     r5,r0
                  |L1.364|
;;;109    	}
;;;110     
;;;111    
;;;112    sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
00016c  2180              MOVS     r1,#0x80
00016e  2003              MOVS     r0,#3
000170  f7fffffe          BL       sc16is700_wr_byte
;;;113    sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
000174  4629              MOV      r1,r5
000176  2000              MOVS     r0,#0
000178  f7fffffe          BL       sc16is700_wr_byte
;;;114    sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
00017c  4621              MOV      r1,r4
00017e  2001              MOVS     r0,#1
000180  f7fffffe          BL       sc16is700_wr_byte
;;;115    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
000184  21bf              MOVS     r1,#0xbf
000186  2003              MOVS     r0,#3
000188  f7fffffe          BL       sc16is700_wr_byte
;;;116    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
00018c  2110              MOVS     r1,#0x10
00018e  2002              MOVS     r0,#2
000190  f7fffffe          BL       sc16is700_wr_byte
;;;117    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
000194  2103              MOVS     r1,#3
000196  4608              MOV      r0,r1
000198  f7fffffe          BL       sc16is700_wr_byte
;;;118    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
00019c  2106              MOVS     r1,#6
00019e  2002              MOVS     r0,#2
0001a0  f7fffffe          BL       sc16is700_wr_byte
;;;119    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
0001a4  2101              MOVS     r1,#1
0001a6  2002              MOVS     r0,#2
0001a8  f7fffffe          BL       sc16is700_wr_byte
;;;120    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
0001ac  e8bd4070          POP      {r4-r6,lr}
0001b0  2130              MOVS     r1,#0x30
0001b2  200f              MOVS     r0,#0xf
0001b4  e7fe              B        sc16is700_wr_byte
;;;121    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;122    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;123    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;124    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;125    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;126    }
;;;127    
                          ENDP

                  putchar_sc16is700 PROC
;;;146    //Посылка байта через sc16is700
;;;147    void putchar_sc16is700(char out_byte)
0001b6  4a38              LDR      r2,|L1.664|
;;;148    {
;;;149    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
0001b8  4b32              LDR      r3,|L1.644|
0001ba  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
0001bc  5458              STRB     r0,[r3,r1]
;;;150    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
0001be  1c49              ADDS     r1,r1,#1
0001c0  b2c8              UXTB     r0,r1
0001c2  7090              STRB     r0,[r2,#2]
0001c4  2820              CMP      r0,#0x20
0001c6  d102              BNE      |L1.462|
0001c8  f04f0000          MOV      r0,#0
0001cc  7090              STRB     r0,[r2,#2]
                  |L1.462|
;;;151    }
0001ce  4770              BX       lr
;;;152    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;155    //Обработчик sc16is700
;;;156    void sc16is700_uart_hndl(void)
0001d0  e92d47f0          PUSH     {r4-r10,lr}
;;;157    {
;;;158    
;;;159    sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
0001d4  2009              MOVS     r0,#9
0001d6  f7fffffe          BL       sc16is700_rd_byte
0001da  4e2f              LDR      r6,|L1.664|
0001dc  7030              STRB     r0,[r6,#0]
0001de  2500              MOVS     r5,#0
;;;160    
;;;161    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
0001e0  b198              CBZ      r0,|L1.522|
;;;162    	{
;;;163    	char i;
;;;164    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
0001e2  462c              MOV      r4,r5
;;;165    		{
;;;166    		if(!sc16is700RecieveDisableFlag)
;;;167    			{
;;;168    			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
0001e4  f8df80b4          LDR      r8,|L1.668|
0001e8  4f2d              LDR      r7,|L1.672|
;;;169    			modbus_rx_buffer_ptr++;
;;;170    			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
0001ea  f8df90b8          LDR      r9,|L1.676|
0001ee  e007              B        |L1.512|
                  |L1.496|
0001f0  79b0              LDRB     r0,[r6,#6]            ;166  ; sc16is700RecieveDisableFlag
0001f2  b388              CBZ      r0,|L1.600|
;;;171    			//pvlk++;
;;;172    			}
;;;173    		else sc16is700_rd_byte(CS16IS7xx_RHR);
0001f4  2000              MOVS     r0,#0
0001f6  f7fffffe          BL       sc16is700_rd_byte
                  |L1.506|
0001fa  f1040401          ADD      r4,r4,#1              ;164
0001fe  b2e4              UXTB     r4,r4                 ;164
                  |L1.512|
000200  7830              LDRB     r0,[r6,#0]            ;164  ; sc16is700ByteAvailable
000202  4284              CMP      r4,r0                 ;164
000204  d201              BCS      |L1.522|
000206  2c05              CMP      r4,#5                 ;164
000208  d3f2              BCC      |L1.496|
                  |L1.522|
;;;174    		}
;;;175    	}
;;;176    
;;;177    
;;;178    
;;;179    sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
00020a  2008              MOVS     r0,#8
00020c  f7fffffe          BL       sc16is700_rd_byte
000210  7070              STRB     r0,[r6,#1]
;;;180    
;;;181    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
000212  2840              CMP      r0,#0x40
000214  d000              BEQ      |L1.536|
000216  7135              STRB     r5,[r6,#4]
                  |L1.536|
;;;182    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
000218  d105              BNE      |L1.550|
;;;183    	{
;;;184    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
00021a  7930              LDRB     r0,[r6,#4]  ; sc16is700TxFifoEmptyCnt
00021c  2805              CMP      r0,#5
00021e  d202              BCS      |L1.550|
000220  f1000001          ADD      r0,r0,#1
000224  7130              STRB     r0,[r6,#4]
                  |L1.550|
;;;185    	}
;;;186    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
000226  7931              LDRB     r1,[r6,#4]  ; sc16is700TxFifoEmptyCnt
000228  2001              MOVS     r0,#1
00022a  2905              CMP      r1,#5
00022c  d021              BEQ      |L1.626|
;;;187    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
00022e  7175              STRB     r5,[r6,#5]
                  |L1.560|
;;;188    
;;;189    
;;;190    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
000230  78b1              LDRB     r1,[r6,#2]  ; tx_wr_index_sc16is700
000232  b149              CBZ      r1,|L1.584|
000234  78f2              LDRB     r2,[r6,#3]  ; tx_rd_index_sc16is700
000236  4291              CMP      r1,r2
000238  d006              BEQ      |L1.584|
;;;191    	{
;;;192    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
00023a  7972              LDRB     r2,[r6,#5]  ; sc16is700TxPossibleFlag
00023c  b122              CBZ      r2,|L1.584|
;;;193    		{
;;;194    		//char i;
;;;195    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;196    			//{
;;;197    		sc16is700RecieveDisableFlag=1;
00023e  71b0              STRB     r0,[r6,#6]
;;;198    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
000240  2000              MOVS     r0,#0
000242  f7fffffe          BL       sc16is700_wr_buff
;;;199    			//}
;;;200    		tx_wr_index_sc16is700=0;
000246  70b5              STRB     r5,[r6,#2]
                  |L1.584|
;;;201    		}
;;;202    	}
;;;203    
;;;204    if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
000248  2005              MOVS     r0,#5
00024a  f7fffffe          BL       sc16is700_rd_byte
00024e  0640              LSLS     r0,r0,#25
000250  d500              BPL      |L1.596|
000252  71b5              STRB     r5,[r6,#6]
                  |L1.596|
;;;205    
;;;206    
;;;207    }
000254  e8bd87f0          POP      {r4-r10,pc}
                  |L1.600|
000258  e7ff              B        |L1.602|
                  |L1.602|
00025a  2000              MOVS     r0,#0                 ;168
00025c  f7fffffe          BL       sc16is700_rd_byte
000260  7839              LDRB     r1,[r7,#0]            ;168  ; modbus_rx_buffer_ptr
000262  f8080001          STRB     r0,[r8,r1]            ;168
000266  f1010101          ADD      r1,r1,#1              ;169
00026a  7039              STRB     r1,[r7,#0]            ;169
00026c  f8895000          STRB     r5,[r9,#0]            ;170
000270  e7c3              B        |L1.506|
                  |L1.626|
000272  7170              STRB     r0,[r6,#5]            ;186
000274  e7dc              B        |L1.560|
                          ENDP

000276  0000              DCW      0x0000
                  |L1.632|
                          DCD      0x4002c000
                  |L1.636|
                          DCD      0x40020000
                  |L1.640|
                          DCD      0x2009c000
                  |L1.644|
                          DCD      ||.bss||
                  |L1.648|
                          DCD      0x00098968
                  |L1.652|
                          DCD      RS485_QWARZ_DIGIT
                  |L1.656|
                          DCD      0x002625a0
                  |L1.660|
                          DCD      0x001c9c38
                  |L1.664|
                          DCD      ||.data||
                  |L1.668|
                          DCD      modbus_rx_buffer
                  |L1.672|
                          DCD      modbus_rx_buffer_ptr
                  |L1.676|
                          DCD      modbus_timeout_cnt

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_init_ PROC
;;;20     //настройка SPI1
;;;21     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;25     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;26     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;27     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;28     /*
;;;29     S1SPCCR=100;
;;;30     S1SPCR=0x3f; */
;;;31     
;;;32     LPC_SPI->SPCCR=40;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;33     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
;;;34     }
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;35     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  sc16is700_spi_init_cnt
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "sc16is7xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_sc16is7xx_c_c1eea82f____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_sc16is7xx_c_c1eea82f____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_sc16is7xx_c_c1eea82f____REVSH|
#line 130
|__asm___11_sc16is7xx_c_c1eea82f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
