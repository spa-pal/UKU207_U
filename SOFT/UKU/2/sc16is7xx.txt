; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;20     //настройка SPI1
;;;21     void sc16is700_spi_init(void)
000000  48b0              LDR      r0,|L1.708|
;;;22     {
;;;23     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;24     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;25     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;26     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;27     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;28     /*
;;;29     S1SPCCR=100;
;;;30     S1SPCR=0x3f; */
;;;31     
;;;32     LPC_SPI->SPCCR=40;
00002a  48a7              LDR      r0,|L1.712|
00002c  f04f0128          MOV      r1,#0x28
000030  60c1              STR      r1,[r0,#0xc]
;;;33     LPC_SPI->SPCR=0x20;
000032  f04f0120          MOV      r1,#0x20
000036  6001              STR      r1,[r0,#0]
;;;34     }
000038  4770              BX       lr
;;;35     
                          ENDP

                  sc16is700_wr_buff PROC
;;;37     //Отправка num байт из программного буфера передачи в sc16is700
;;;38     void sc16is700_wr_buff(char reg_num,char num)
00003a  e92d41f0          PUSH     {r4-r8,lr}
;;;39     {
00003e  4603              MOV      r3,r0
000040  460e              MOV      r6,r1
;;;40     short i;
;;;41     sc16is700_spi_init();
000042  f7fffffe          BL       sc16is700_spi_init
;;;42     delay_us(2);
000046  f04f0218          MOV      r2,#0x18
                  |L1.74|
00004a  f1a20201          SUB      r2,r2,#1
00004e  2a00              CMP      r2,#0
000050  d1fb              BNE      |L1.74|
;;;43     sc16is700_CS_ON 
000052  4f9e              LDR      r7,|L1.716|
000054  6838              LDR      r0,[r7,#0]
000056  f0400001          ORR      r0,r0,#1
00005a  6038              STR      r0,[r7,#0]
00005c  69f8              LDR      r0,[r7,#0x1c]
00005e  f0400001          ORR      r0,r0,#1
000062  61f8              STR      r0,[r7,#0x1c]
;;;44     spi1((reg_num&0x0f)<<3);
000064  ea4f7003          LSL      r0,r3,#28
000068  ea4f6050          LSR      r0,r0,#25
00006c  f7fffffe          BL       spi1
;;;45     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000070  f04f0400          MOV      r4,#0
000074  4d96              LDR      r5,|L1.720|
000076  e005              B        |L1.132|
                  |L1.120|
000078  5d28              LDRB     r0,[r5,r4]
00007a  f7fffffe          BL       spi1
00007e  f1040401          ADD      r4,r4,#1
000082  b224              SXTH     r4,r4
                  |L1.132|
000084  42b4              CMP      r4,r6
000086  dbf7              BLT      |L1.120|
;;;46     sc16is700_CS_OFF
000088  6838              LDR      r0,[r7,#0]
00008a  f0400001          ORR      r0,r0,#1
00008e  6038              STR      r0,[r7,#0]
000090  69b8              LDR      r0,[r7,#0x18]
000092  f0400001          ORR      r0,r0,#1
000096  61b8              STR      r0,[r7,#0x18]
;;;47     }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP

                  sc16is700_wr_byte PROC
;;;49     void sc16is700_wr_byte(char reg_num,char data)
00009c  b570              PUSH     {r4-r6,lr}
;;;50     {
00009e  4602              MOV      r2,r0
0000a0  460d              MOV      r5,r1
;;;51     sc16is700_spi_init();
0000a2  f7fffffe          BL       sc16is700_spi_init
;;;52     delay_us(2);
0000a6  f04f0018          MOV      r0,#0x18
                  |L1.170|
0000aa  f1a00001          SUB      r0,r0,#1
0000ae  2800              CMP      r0,#0
0000b0  d1fb              BNE      |L1.170|
;;;53     sc16is700_CS_ON
0000b2  4c86              LDR      r4,|L1.716|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  f0400001          ORR      r0,r0,#1
0000ba  6020              STR      r0,[r4,#0]
0000bc  69e0              LDR      r0,[r4,#0x1c]
0000be  f0400001          ORR      r0,r0,#1
0000c2  61e0              STR      r0,[r4,#0x1c]
;;;54     spi1((reg_num&0x0f)<<3);
0000c4  ea4f7002          LSL      r0,r2,#28
0000c8  ea4f6050          LSR      r0,r0,#25
0000cc  f7fffffe          BL       spi1
;;;55     spi1(data);
0000d0  4628              MOV      r0,r5
0000d2  f7fffffe          BL       spi1
;;;56     sc16is700_CS_OFF
0000d6  6820              LDR      r0,[r4,#0]
0000d8  f0400001          ORR      r0,r0,#1
0000dc  6020              STR      r0,[r4,#0]
0000de  69a0              LDR      r0,[r4,#0x18]
0000e0  f0400001          ORR      r0,r0,#1
0000e4  61a0              STR      r0,[r4,#0x18]
;;;57     }
0000e6  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP

                  sc16is700_rd_byte PROC
;;;59     
;;;60     char sc16is700_rd_byte(char reg_num)
0000e8  b510              PUSH     {r4,lr}
;;;61     {
0000ea  4602              MOV      r2,r0
;;;62     char out;
;;;63     sc16is700_spi_init();
0000ec  f7fffffe          BL       sc16is700_spi_init
;;;64     delay_us(2);
0000f0  f04f0118          MOV      r1,#0x18
                  |L1.244|
0000f4  f1a10101          SUB      r1,r1,#1
0000f8  2900              CMP      r1,#0
0000fa  d1fb              BNE      |L1.244|
;;;65     sc16is700_CS_ON
0000fc  4c73              LDR      r4,|L1.716|
0000fe  6820              LDR      r0,[r4,#0]
000100  f0400001          ORR      r0,r0,#1
000104  6020              STR      r0,[r4,#0]
000106  69e0              LDR      r0,[r4,#0x1c]
000108  f0400001          ORR      r0,r0,#1
00010c  61e0              STR      r0,[r4,#0x1c]
;;;66     spi1(((reg_num&0x0f)<<3)|0x80);
00010e  f002000f          AND      r0,r2,#0xf
000112  f04f0180          MOV      r1,#0x80
000116  ea4100c0          ORR      r0,r1,r0,LSL #3
00011a  f7fffffe          BL       spi1
;;;67     out = spi1(0xff);
00011e  20ff              MOVS     r0,#0xff
000120  f7fffffe          BL       spi1
000124  b2c0              UXTB     r0,r0
;;;68     sc16is700_CS_OFF
000126  6821              LDR      r1,[r4,#0]
000128  f0410101          ORR      r1,r1,#1
00012c  6021              STR      r1,[r4,#0]
00012e  69a1              LDR      r1,[r4,#0x18]
000130  f0410101          ORR      r1,r1,#1
000134  61a1              STR      r1,[r4,#0x18]
;;;69     return out;
;;;70     }
000136  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  sc16is700_init_ PROC
;;;72     void sc16is700_init_(void)
000138  b510              PUSH     {r4,lr}
;;;73     {
;;;74     sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
00013a  2180              MOVS     r1,#0x80
00013c  2003              MOVS     r0,#3
00013e  f7fffffe          BL       sc16is700_wr_byte
;;;75     sc16is700_wr_byte(CS16IS7xx_DLL, 0x41);
000142  2141              MOVS     r1,#0x41
000144  2000              MOVS     r0,#0
000146  f7fffffe          BL       sc16is700_wr_byte
;;;76     sc16is700_wr_byte(CS16IS7xx_DLH, 0x00);
00014a  2100              MOVS     r1,#0
00014c  2001              MOVS     r0,#1
00014e  f7fffffe          BL       sc16is700_wr_byte
;;;77     sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
000152  21bf              MOVS     r1,#0xbf
000154  2003              MOVS     r0,#3
000156  f7fffffe          BL       sc16is700_wr_byte
;;;78     sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
00015a  2110              MOVS     r1,#0x10
00015c  2002              MOVS     r0,#2
00015e  f7fffffe          BL       sc16is700_wr_byte
;;;79     sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
000162  2103              MOVS     r1,#3
000164  4608              MOV      r0,r1
000166  f7fffffe          BL       sc16is700_wr_byte
;;;80     sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
00016a  2106              MOVS     r1,#6
00016c  2002              MOVS     r0,#2
00016e  f7fffffe          BL       sc16is700_wr_byte
;;;81     sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
000172  2101              MOVS     r1,#1
000174  2002              MOVS     r0,#2
000176  f7fffffe          BL       sc16is700_wr_byte
;;;82     sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
00017a  2130              MOVS     r1,#0x30
00017c  e8bd4010          POP      {r4,lr}
000180  200f              MOVS     r0,#0xf
000182  e7fe              B        sc16is700_wr_byte
;;;83     //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;84     //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;85     //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;86     //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;87     //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;88     }
;;;89     
                          ENDP

                  sc16is700_init PROC
;;;91     
;;;92     void sc16is700_init(uint32_t baudrate)
000184  b570              PUSH     {r4-r6,lr}
;;;93     {
;;;94     
;;;95     unsigned char baud_h,baud_l;
;;;96     
;;;97     baud_h = (char)((10000000U/16U/baudrate)>>8);
000186  4953              LDR      r1,|L1.724|
000188  fbb1f1f0          UDIV     r1,r1,r0
00018c  f3c12407          UBFX     r4,r1,#8,#8
;;;98     baud_l = (char)((10000000U/16U/baudrate));
000190  b2cd              UXTB     r5,r1
;;;99     
;;;100    if(RS485_QWARZ_DIGIT==40)
000192  4951              LDR      r1,|L1.728|
000194  f9b12000          LDRSH    r2,[r1,#0]  ; RS485_QWARZ_DIGIT
000198  2a28              CMP      r2,#0x28
00019a  d105              BNE      |L1.424|
;;;101    	{
;;;102    	baud_h = (char)((40000000U/16U/baudrate)>>8);
00019c  494f              LDR      r1,|L1.732|
00019e  fbb1f1f0          UDIV     r1,r1,r0
0001a2  f3c12407          UBFX     r4,r1,#8,#8
;;;103    	baud_l = (char)((40000000U/16U/baudrate));
0001a6  b2cd              UXTB     r5,r1
                  |L1.424|
;;;104    	} 
;;;105    if(RS485_QWARZ_DIGIT==30)
0001a8  2a1e              CMP      r2,#0x1e
0001aa  d105              BNE      |L1.440|
;;;106    	{
;;;107    	baud_h = (char)((30000000U/16U/baudrate)>>8);
0001ac  494c              LDR      r1,|L1.736|
0001ae  fbb1f0f0          UDIV     r0,r1,r0
0001b2  f3c02407          UBFX     r4,r0,#8,#8
;;;108    	baud_l = (char)((30000000U/16U/baudrate));
0001b6  b2c5              UXTB     r5,r0
                  |L1.440|
;;;109    	}
;;;110     
;;;111    
;;;112    sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
0001b8  2180              MOVS     r1,#0x80
0001ba  2003              MOVS     r0,#3
0001bc  f7fffffe          BL       sc16is700_wr_byte
;;;113    sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
0001c0  4629              MOV      r1,r5
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       sc16is700_wr_byte
;;;114    sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
0001c8  4621              MOV      r1,r4
0001ca  2001              MOVS     r0,#1
0001cc  f7fffffe          BL       sc16is700_wr_byte
;;;115    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
0001d0  21bf              MOVS     r1,#0xbf
0001d2  2003              MOVS     r0,#3
0001d4  f7fffffe          BL       sc16is700_wr_byte
;;;116    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
0001d8  2110              MOVS     r1,#0x10
0001da  2002              MOVS     r0,#2
0001dc  f7fffffe          BL       sc16is700_wr_byte
;;;117    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
0001e0  2103              MOVS     r1,#3
0001e2  4608              MOV      r0,r1
0001e4  f7fffffe          BL       sc16is700_wr_byte
;;;118    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
0001e8  2106              MOVS     r1,#6
0001ea  2002              MOVS     r0,#2
0001ec  f7fffffe          BL       sc16is700_wr_byte
;;;119    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
0001f0  2101              MOVS     r1,#1
0001f2  2002              MOVS     r0,#2
0001f4  f7fffffe          BL       sc16is700_wr_byte
;;;120    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
0001f8  e8bd4070          POP      {r4-r6,lr}
0001fc  2130              MOVS     r1,#0x30
0001fe  200f              MOVS     r0,#0xf
000200  e7fe              B        sc16is700_wr_byte
;;;121    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;122    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;123    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;124    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;125    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;126    }
;;;127    
                          ENDP

                  putchar_sc16is700 PROC
;;;146    //Посылка байта через sc16is700
;;;147    void putchar_sc16is700(char out_byte)
000202  4a38              LDR      r2,|L1.740|
;;;148    {
;;;149    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
000204  4b32              LDR      r3,|L1.720|
000206  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000208  5458              STRB     r0,[r3,r1]
;;;150    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
00020a  1c49              ADDS     r1,r1,#1
00020c  b2c8              UXTB     r0,r1
00020e  7090              STRB     r0,[r2,#2]
000210  2820              CMP      r0,#0x20
000212  d102              BNE      |L1.538|
000214  f04f0000          MOV      r0,#0
000218  7090              STRB     r0,[r2,#2]
                  |L1.538|
;;;151    }
00021a  4770              BX       lr
;;;152    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;155    //Обработчик sc16is700
;;;156    void sc16is700_uart_hndl(void)
00021c  e92d47f0          PUSH     {r4-r10,lr}
;;;157    {
;;;158    
;;;159    sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
000220  2009              MOVS     r0,#9
000222  f7fffffe          BL       sc16is700_rd_byte
000226  4e2f              LDR      r6,|L1.740|
000228  7030              STRB     r0,[r6,#0]
00022a  2500              MOVS     r5,#0
;;;160    
;;;161    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
00022c  b198              CBZ      r0,|L1.598|
;;;162    	{
;;;163    	char i;
;;;164    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
00022e  462c              MOV      r4,r5
;;;165    		{
;;;166    		if(!sc16is700RecieveDisableFlag)
;;;167    			{
;;;168    			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
000230  f8df80b4          LDR      r8,|L1.744|
000234  4f2d              LDR      r7,|L1.748|
;;;169    			modbus_rx_buffer_ptr++;
;;;170    			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
000236  f8df90b8          LDR      r9,|L1.752|
00023a  e007              B        |L1.588|
                  |L1.572|
00023c  79b0              LDRB     r0,[r6,#6]            ;166  ; sc16is700RecieveDisableFlag
00023e  b388              CBZ      r0,|L1.676|
;;;171    			//pvlk++;
;;;172    			}
;;;173    		else sc16is700_rd_byte(CS16IS7xx_RHR);
000240  2000              MOVS     r0,#0
000242  f7fffffe          BL       sc16is700_rd_byte
                  |L1.582|
000246  f1040401          ADD      r4,r4,#1              ;164
00024a  b2e4              UXTB     r4,r4                 ;164
                  |L1.588|
00024c  7830              LDRB     r0,[r6,#0]            ;164  ; sc16is700ByteAvailable
00024e  4284              CMP      r4,r0                 ;164
000250  d201              BCS      |L1.598|
000252  2c05              CMP      r4,#5                 ;164
000254  d3f2              BCC      |L1.572|
                  |L1.598|
;;;174    		}
;;;175    	}
;;;176    
;;;177    
;;;178    
;;;179    sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
000256  2008              MOVS     r0,#8
000258  f7fffffe          BL       sc16is700_rd_byte
00025c  7070              STRB     r0,[r6,#1]
;;;180    
;;;181    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
00025e  2840              CMP      r0,#0x40
000260  d000              BEQ      |L1.612|
000262  7135              STRB     r5,[r6,#4]
                  |L1.612|
;;;182    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
000264  d105              BNE      |L1.626|
;;;183    	{
;;;184    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
000266  7930              LDRB     r0,[r6,#4]  ; sc16is700TxFifoEmptyCnt
000268  2805              CMP      r0,#5
00026a  d202              BCS      |L1.626|
00026c  f1000001          ADD      r0,r0,#1
000270  7130              STRB     r0,[r6,#4]
                  |L1.626|
;;;185    	}
;;;186    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
000272  7931              LDRB     r1,[r6,#4]  ; sc16is700TxFifoEmptyCnt
000274  2001              MOVS     r0,#1
000276  2905              CMP      r1,#5
000278  d021              BEQ      |L1.702|
;;;187    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
00027a  7175              STRB     r5,[r6,#5]
                  |L1.636|
;;;188    
;;;189    
;;;190    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
00027c  78b1              LDRB     r1,[r6,#2]  ; tx_wr_index_sc16is700
00027e  b149              CBZ      r1,|L1.660|
000280  78f2              LDRB     r2,[r6,#3]  ; tx_rd_index_sc16is700
000282  4291              CMP      r1,r2
000284  d006              BEQ      |L1.660|
;;;191    	{
;;;192    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
000286  7972              LDRB     r2,[r6,#5]  ; sc16is700TxPossibleFlag
000288  b122              CBZ      r2,|L1.660|
;;;193    		{
;;;194    		//char i;
;;;195    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;196    			//{
;;;197    		sc16is700RecieveDisableFlag=1;
00028a  71b0              STRB     r0,[r6,#6]
;;;198    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
00028c  2000              MOVS     r0,#0
00028e  f7fffffe          BL       sc16is700_wr_buff
;;;199    			//}
;;;200    		tx_wr_index_sc16is700=0;
000292  70b5              STRB     r5,[r6,#2]
                  |L1.660|
;;;201    		}
;;;202    	}
;;;203    
;;;204    if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
000294  2005              MOVS     r0,#5
000296  f7fffffe          BL       sc16is700_rd_byte
00029a  0640              LSLS     r0,r0,#25
00029c  d500              BPL      |L1.672|
00029e  71b5              STRB     r5,[r6,#6]
                  |L1.672|
;;;205    
;;;206    
;;;207    }
0002a0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.676|
0002a4  e7ff              B        |L1.678|
                  |L1.678|
0002a6  2000              MOVS     r0,#0                 ;168
0002a8  f7fffffe          BL       sc16is700_rd_byte
0002ac  7839              LDRB     r1,[r7,#0]            ;168  ; modbus_rx_buffer_ptr
0002ae  f8080001          STRB     r0,[r8,r1]            ;168
0002b2  f1010101          ADD      r1,r1,#1              ;169
0002b6  7039              STRB     r1,[r7,#0]            ;169
0002b8  f8895000          STRB     r5,[r9,#0]            ;170
0002bc  e7c3              B        |L1.582|
                  |L1.702|
0002be  7170              STRB     r0,[r6,#5]            ;186
0002c0  e7dc              B        |L1.636|
                          ENDP

0002c2  0000              DCW      0x0000
                  |L1.708|
                          DCD      0x4002c000
                  |L1.712|
                          DCD      0x40020000
                  |L1.716|
                          DCD      0x2009c000
                  |L1.720|
                          DCD      ||.bss||
                  |L1.724|
                          DCD      0x00098968
                  |L1.728|
                          DCD      RS485_QWARZ_DIGIT
                  |L1.732|
                          DCD      0x002625a0
                  |L1.736|
                          DCD      0x001c9c38
                  |L1.740|
                          DCD      ||.data||
                  |L1.744|
                          DCD      modbus_rx_buffer
                  |L1.748|
                          DCD      modbus_rx_buffer_ptr
                  |L1.752|
                          DCD      modbus_timeout_cnt

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  sc16is700_spi_init_cnt
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "sc16is7xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_sc16is7xx_c_c1eea82f____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_sc16is7xx_c_c1eea82f____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_sc16is7xx_c_c1eea82f____REVSH|
#line 130
|__asm___11_sc16is7xx_c_c1eea82f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
