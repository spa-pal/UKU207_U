; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;330    	{
;;;331    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;329  ; spc_stat
00000c  2802              CMP      r0,#2                 ;329
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;332    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;333    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;334    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;337  ; snmp_bat_status
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;337
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;337  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;337
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;339  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;339  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;339
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;339
000052  f9b01000          LDRSH    r1,[r0,#0]            ;341
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;342
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;341
000062  8021              STRH     r1,[r4,#0]            ;341
000064  07c0              LSLS     r0,r0,#31             ;342
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;344
00006a  2208              MOVS     r2,#8                 ;344
00006c  2105              MOVS     r1,#5                 ;344
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;345  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;345
00007a  8028              STRH     r0,[r5,#0]            ;345
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;350
000082  8021              STRH     r1,[r4,#0]            ;350
000084  07c0              LSLS     r0,r0,#31             ;351
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;353
00008a  2208              MOVS     r2,#8                 ;353
00008c  2105              MOVS     r1,#5                 ;353
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;354  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;354
00009a  8028              STRH     r0,[r5,#0]            ;354
                  |L1.156|
00009c  f898003f          LDRB     r0,[r8,#0x3f]         ;358  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;358
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;360  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;360
0000aa  8021              STRH     r1,[r4,#0]            ;360
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;361  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;361
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;364
0000b8  8029              STRH     r1,[r5,#0]            ;364
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;369  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;369
0000c2  8021              STRH     r1,[r4,#0]            ;369
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;370  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;370
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;373
0000d0  8029              STRH     r1,[r5,#0]            ;373
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;377
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;379
0000dc  8020              STRH     r0,[r4,#0]            ;379
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;380
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;383
0000ea  8028              STRH     r0,[r5,#0]            ;383
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;388
0000f4  8020              STRH     r0,[r4,#0]            ;388
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;389
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;392
000102  8028              STRH     r0,[r5,#0]            ;392
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960024          LDRB     r0,[r6,#0x24]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;401  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;401
0001b6  8020              STRH     r0,[r4,#0]            ;401
0001b8  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;402
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;404
0001c0  2208              MOVS     r2,#8                 ;404
0001c2  2105              MOVS     r1,#5                 ;404
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;405  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;405
0001d0  8028              STRH     r0,[r5,#0]            ;405
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;420  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;420
0001da  8020              STRH     r0,[r4,#0]            ;420
0001dc  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;421
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;423
0001e4  461a              MOV      r2,r3                 ;423
0001e6  2105              MOVS     r1,#5                 ;423
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;424  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;424
0001f4  8028              STRH     r0,[r5,#0]            ;424
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;458  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;458
000272  8020              STRH     r0,[r4,#0]            ;458
000274  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;459
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;461
00027c  2208              MOVS     r2,#8                 ;461
00027e  2105              MOVS     r1,#5                 ;461
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;462  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;462
00028c  8028              STRH     r0,[r5,#0]            ;462
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;573    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;812    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.26||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;578  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;578  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;578
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;578
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;580  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;580
0006e6  8060              STRH     r0,[r4,#2]            ;580
0006e8  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;581
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;583
0006f0  2208              MOVS     r2,#8                 ;583
0006f2  2105              MOVS     r1,#5                 ;583
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;584  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;584
000700  8068              STRH     r0,[r5,#2]            ;584
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;589  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;589
00070a  8060              STRH     r0,[r4,#2]            ;589
00070c  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;590
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;592
000714  2208              MOVS     r2,#8                 ;592
000716  2105              MOVS     r1,#5                 ;592
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;593  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;593
000724  8068              STRH     r0,[r5,#2]            ;593
                  |L1.1830|
000726  f898008b          LDRB     r0,[r8,#0x8b]         ;597  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;597
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;599  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;599
000734  8061              STRH     r1,[r4,#2]            ;599
000736  8829              LDRH     r1,[r5,#0]            ;600  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;600
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;603  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;603
000742  8069              STRH     r1,[r5,#2]            ;603
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;608  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;608
00074c  8061              STRH     r1,[r4,#2]            ;608
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;609  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;609
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;612
00075a  8069              STRH     r1,[r5,#2]            ;612
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;616
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;618
000766  8060              STRH     r0,[r4,#2]            ;618
000768  f9b50002          LDRSH    r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;619
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;622
000774  8068              STRH     r0,[r5,#2]            ;622
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;627
00077e  8060              STRH     r0,[r4,#2]            ;627
000780  f9b50002          LDRSH    r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;628
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;631
00078c  8068              STRH     r0,[r5,#2]            ;631
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;635  ; IKB
000792  f9b80054          LDRSH    r0,[r8,#0x54]         ;635  ; bat
000796  424a              RSBS     r2,r1,#0              ;635
000798  4290              CMP      r0,r2                 ;635
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;635  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;635
0007a2  8060              STRH     r0,[r4,#2]            ;635
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;636
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;636
0007b0  8060              STRH     r0,[r4,#2]            ;636
                  |L1.1970|
0007b2  f8960023          LDRB     r0,[r6,#0x23]         ;638  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;638
0007b8  d102              BNE      |L1.1984|
0007ba  f8960024          LDRB     r0,[r6,#0x24]         ;638  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;649  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;649
0007c6  8060              STRH     r0,[r4,#2]            ;649
0007c8  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;650
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;652
0007d0  2208              MOVS     r2,#8                 ;652
0007d2  2105              MOVS     r1,#5                 ;652
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;653  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;653
0007e0  8068              STRH     r0,[r5,#2]            ;653
                  |L1.2018|
0007e2  f8960023          LDRB     r0,[r6,#0x23]         ;657  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;657
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;668  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;668
0007f0  8060              STRH     r0,[r4,#2]            ;668
0007f2  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;669
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;671
0007fa  2208              MOVS     r2,#8                 ;671
0007fc  2105              MOVS     r1,#5                 ;671
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;672  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;672
00080a  8068              STRH     r0,[r5,#2]            ;672
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;676  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;678  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;678
000816  8060              STRH     r0,[r4,#2]            ;678
000818  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;679
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;681
000820  2208              MOVS     r2,#8                 ;681
000822  2105              MOVS     r1,#5                 ;681
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;682  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;682
000830  8068              STRH     r0,[r5,#2]            ;682
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;640  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;640
00083c  8060              STRH     r0,[r4,#2]            ;640
00083e  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;641
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;643
000846  2208              MOVS     r2,#8                 ;643
000848  2105              MOVS     r1,#5                 ;643
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;644  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;644
000856  8068              STRH     r0,[r5,#2]            ;644
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;659  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;659
000860  8060              STRH     r0,[r4,#2]            ;659
000862  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;660
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;662
00086a  2208              MOVS     r2,#8                 ;662
00086c  2105              MOVS     r1,#5                 ;662
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;663  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;663
00087a  8068              STRH     r0,[r5,#2]            ;663
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;687  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;687
000886  8060              STRH     r0,[r4,#2]            ;687
000888  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;688
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;690
000890  2208              MOVS     r2,#8                 ;690
000892  2105              MOVS     r1,#5                 ;690
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;691  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;691
0008a0  8068              STRH     r0,[r5,#2]            ;691
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;695  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;695
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;706  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;706
0008b0  8060              STRH     r0,[r4,#2]            ;706
0008b2  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;707
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;709
0008ba  2208              MOVS     r2,#8                 ;709
0008bc  2105              MOVS     r1,#5                 ;709
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;710  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;710
0008ca  8068              STRH     r0,[r5,#2]            ;710
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;714  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;716  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;716
0008d6  8060              STRH     r0,[r4,#2]            ;716
0008d8  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;717
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;719
0008e0  2208              MOVS     r2,#8                 ;719
0008e2  2105              MOVS     r1,#5                 ;719
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;720  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;720
0008f0  8068              STRH     r0,[r5,#2]            ;720
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;697  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;697
0008fa  8060              STRH     r0,[r4,#2]            ;697
0008fc  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;698
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;700
000904  2208              MOVS     r2,#8                 ;700
000906  2105              MOVS     r1,#5                 ;700
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;701  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;701
000914  8068              STRH     r0,[r5,#2]            ;701
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;725  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;725
00091e  8060              STRH     r0,[r4,#2]            ;725
000920  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;726
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;728
000928  2208              MOVS     r2,#8                 ;728
00092a  2105              MOVS     r1,#5                 ;728
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;729  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;729
000938  8068              STRH     r0,[r5,#2]            ;729
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;733  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;735  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;735
000944  8060              STRH     r0,[r4,#2]            ;735
000946  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;736
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;738
00094e  2208              MOVS     r2,#8                 ;738
000950  2105              MOVS     r1,#5                 ;738
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;739  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;739
00095e  8068              STRH     r0,[r5,#2]            ;739
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;744  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;744
000968  8060              STRH     r0,[r4,#2]            ;744
00096a  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;745
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;747
000972  2208              MOVS     r2,#8                 ;747
000974  2105              MOVS     r1,#5                 ;747
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;748  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;748
000982  8068              STRH     r0,[r5,#2]            ;748
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;752  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;754  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;754
00098e  8060              STRH     r0,[r4,#2]            ;754
000990  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;755
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;757
000998  2208              MOVS     r2,#8                 ;757
00099a  2105              MOVS     r1,#5                 ;757
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;758  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;758
0009a8  8068              STRH     r0,[r5,#2]            ;758
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;763  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;763
0009b2  8060              STRH     r0,[r4,#2]            ;763
0009b4  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;764
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;766
0009bc  2208              MOVS     r2,#8                 ;766
0009be  2105              MOVS     r1,#5                 ;766
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;767  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;767
0009cc  8068              STRH     r0,[r5,#2]            ;767
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;771  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;773  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;773
0009d8  8060              STRH     r0,[r4,#2]            ;773
0009da  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;774
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;776
0009e2  2208              MOVS     r2,#8                 ;776
0009e4  2105              MOVS     r1,#5                 ;776
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;777  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;777
0009f2  8068              STRH     r0,[r5,#2]            ;777
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;782  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;782
0009fc  8060              STRH     r0,[r4,#2]            ;782
0009fe  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;783
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;785
000a06  2208              MOVS     r2,#8                 ;785
000a08  2105              MOVS     r1,#5                 ;785
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;786  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;786
000a16  8068              STRH     r0,[r5,#2]            ;786
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;790  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;792  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;792
000a22  8060              STRH     r0,[r4,#2]            ;792
000a24  8868              LDRH     r0,[r5,#2]            ;793  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;793
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;795
000a2e  2208              MOVS     r2,#8                 ;795
000a30  2105              MOVS     r1,#5                 ;795
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;796  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;796
000a3e  8068              STRH     r0,[r5,#2]            ;796
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;801  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;801
000a48  8060              STRH     r0,[r4,#2]            ;801
000a4a  8868              LDRH     r0,[r5,#2]            ;802  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;802
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;804
000a52  2208              MOVS     r2,#8                 ;804
000a54  2105              MOVS     r1,#5                 ;804
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;805  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;805
000a62  8068              STRH     r0,[r5,#2]            ;805
000a64  e4c7              B        |L1.1014|
;;;938    
                          ENDP

                  ke_start PROC
;;;941    //-----------------------------------------------
;;;942    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;943    {          
000a6a  4606              MOV      r6,r0
;;;944    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;945    /*
;;;946    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;947    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;948    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;949    #endif
;;;950    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;951    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;952    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;953    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;954    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;955    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;957    else */
;;;958    	{
;;;959    
;;;960    	ke_start_stat=kssYES;
000a72  f105050a          ADD      r5,r5,#0xa
000a76  f04f0064          MOV      r0,#0x64
000a7a  7768              STRB     r0,[r5,#0x1d]
;;;961    
;;;962    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  766f              STRB     r7,[r5,#0x19]
;;;963    	__ee_spc_stat=spcKE;
000a82  f8a57060          STRH     r7,[r5,#0x60]
;;;964    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;965    	
;;;966    	spc_bat=0;
000a90  76ac              STRB     r4,[r5,#0x1a]
;;;967    	__ee_spc_bat=0;
000a92  f8a54062          STRH     r4,[r5,#0x62]
;;;968    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;969    
;;;970    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;971    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;972    
;;;973    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404a          STRH     r4,[r8,#0x4a]
;;;974    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;975    
;;;976    	
;;;977    	spc_phase=0;
000ac2  76ec              STRB     r4,[r5,#0x1b]
;;;978    	__ee_spc_phase=0;
000ac4  f8a54064          STRH     r4,[r5,#0x64]
;;;979    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.26||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;980    
;;;981    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;982    
;;;983    		{					
;;;984    		signed short temp_temp;
;;;985    		signed char temp;
;;;986    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060046          ADD      r0,r6,r6,LSL #1
000d98  eb001006          ADD      r0,r0,r6,LSL #4
000d9c  eb080180          ADD      r1,r8,r0,LSL #2
000da0  48ff              LDR      r0,|L1.4512|
000da2  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da4  f1000001          ADD      r0,r0,#1
000da8  f0000007          AND      r0,r0,#7
000dac  eb010040          ADD      r0,r1,r0,LSL #1
000db0  8c00              LDRH     r0,[r0,#0x20]
000db2  9001              STR      r0,[sp,#4]
;;;987    		    
;;;988    		temp=LPC_RTC->YEAR;
000db4  4efb              LDR      r6,|L1.4516|
000db6  8bb0              LDRH     r0,[r6,#0x1c]
000db8  9000              STR      r0,[sp,#0]
;;;989    		gran_char(&temp,1,99);
000dba  f04f0263          MOV      r2,#0x63
000dbe  f04f0101          MOV      r1,#1
000dc2  4668              MOV      r0,sp
000dc4  f7fffffe          BL       gran_char
;;;990    		*((char*)(&(ke_date[0])))=temp;
000dc8  4cf7              LDR      r4,|L1.4520|
000dca  f89d0000          LDRB     r0,[sp,#0]
000dce  7020              STRB     r0,[r4,#0]
;;;991    			
;;;992    		temp=LPC_RTC->MONTH;
000dd0  7e30              LDRB     r0,[r6,#0x18]
000dd2  9000              STR      r0,[sp,#0]
;;;993    		gran_char(&temp,1,12);
000dd4  220c              MOVS     r2,#0xc
000dd6  2101              MOVS     r1,#1
000dd8  4668              MOV      r0,sp
000dda  f7fffffe          BL       gran_char
;;;994    		*(((char*)(&(ke_date[0])))+1)=temp;
000dde  f89d0000          LDRB     r0,[sp,#0]
000de2  7060              STRB     r0,[r4,#1]
;;;995    		
;;;996    		temp=LPC_RTC->DOM;
000de4  7b30              LDRB     r0,[r6,#0xc]
000de6  9000              STR      r0,[sp,#0]
;;;997    		gran_char(&temp,1,31);
000de8  221f              MOVS     r2,#0x1f
000dea  2101              MOVS     r1,#1
000dec  4668              MOV      r0,sp
000dee  f7fffffe          BL       gran_char
;;;998    		*(((char*)(&(ke_date[0])))+2)=temp;			
000df2  f89d0000          LDRB     r0,[sp,#0]
000df6  70a0              STRB     r0,[r4,#2]
;;;999    				
;;;1000   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df8  f89d0004          LDRB     r0,[sp,#4]
000dfc  70e0              STRB     r0,[r4,#3]
;;;1001   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfe  f24020a2          MOV      r0,#0x2a2
000e02  6821              LDR      r1,[r4,#0]  ; ke_date
000e04  f7fffffe          BL       lc640_write_long
;;;1002   
;;;1003   		temp=LPC_RTC->HOUR;
000e08  7a30              LDRB     r0,[r6,#8]
000e0a  9000              STR      r0,[sp,#0]
;;;1004   		gran_char(&temp,0,23);
000e0c  2217              MOVS     r2,#0x17
000e0e  2100              MOVS     r1,#0
000e10  4668              MOV      r0,sp
000e12  f7fffffe          BL       gran_char
;;;1005   		*((char*)(&(ke_date[1])))=temp;
000e16  f89d0000          LDRB     r0,[sp,#0]
000e1a  7120              STRB     r0,[r4,#4]
;;;1006                  
;;;1007   		temp=LPC_RTC->MIN;
000e1c  7930              LDRB     r0,[r6,#4]
000e1e  9000              STR      r0,[sp,#0]
;;;1008   		gran_char(&temp,0,59);
000e20  223b              MOVS     r2,#0x3b
000e22  2100              MOVS     r1,#0
000e24  4668              MOV      r0,sp
000e26  f7fffffe          BL       gran_char
;;;1009   		*(((char*)(&(ke_date[1])))+1)=temp;
000e2a  f89d0000          LDRB     r0,[sp,#0]
000e2e  7160              STRB     r0,[r4,#5]
;;;1010   	          
;;;1011   		temp=LPC_RTC->SEC;
000e30  7830              LDRB     r0,[r6,#0]
000e32  9000              STR      r0,[sp,#0]
;;;1012   		gran_char(&temp,0,59);
000e34  223b              MOVS     r2,#0x3b
000e36  2100              MOVS     r1,#0
000e38  4668              MOV      r0,sp
000e3a  f7fffffe          BL       gran_char
;;;1013   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3e  f89d0000          LDRB     r0,[sp,#0]
000e42  71a0              STRB     r0,[r4,#6]
;;;1014   			
;;;1015   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e44  f89d0005          LDRB     r0,[sp,#5]
000e48  71e0              STRB     r0,[r4,#7]
;;;1016   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e4a  f24020a6          MOV      r0,#0x2a6
000e4e  6861              LDR      r1,[r4,#4]  ; ke_date
000e50  f7fffffe          BL       lc640_write_long
;;;1017   		}
;;;1018   	bat_hndl_zvu_ke_init=1;
000e54  702f              STRB     r7,[r5,#0]
;;;1019   	}
;;;1020   }
000e56  e8bd81fc          POP      {r2-r8,pc}
;;;1021   #endif
                          ENDP

                  ke_drv PROC
;;;1103   //-----------------------------------------------
;;;1104   void ke_drv(void)
000e5a  e92d47f0          PUSH     {r4-r10,lr}
;;;1105   {
000e5e  b088              SUB      sp,sp,#0x20
;;;1106   static char ke_drv_cnt_10s;
;;;1107   static short i_bat_buff[6];
;;;1108   static char i_bat_buff_cnt;
;;;1109   short ke_drv_i_temp;
;;;1110   short ke_drv_i_avg;
;;;1111   char i;
;;;1112   short ke_drv_i_temp_temp;
;;;1113   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e60  f04f021c          MOV      r2,#0x1c
000e64  49d1              LDR      r1,|L1.4524|
000e66  a801              ADD      r0,sp,#4
000e68  f7fffffe          BL       __aeabi_memcpy4
;;;1114   
;;;1115   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e6c  4ed0              LDR      r6,|L1.4528|
;;;1116   	{
;;;1117   	
;;;1118   	i_bat_buff[0]=0;
000e6e  4bd1              LDR      r3,|L1.4532|
000e70  2500              MOVS     r5,#0
000e72  7ab0              LDRB     r0,[r6,#0xa]          ;1115  ; bat_hndl_zvu_ke_init
000e74  2801              CMP      r0,#1                 ;1115
000e76  d102              BNE      |L1.3710|
000e78  801d              STRH     r5,[r3,#0]
;;;1119   	i_bat_buff[0]=0;
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff_cnt=0;
000e7a  73b5              STRB     r5,[r6,#0xe]
;;;1125   
;;;1126   	bat_hndl_zvu_ke_init=0;
000e7c  72b5              STRB     r5,[r6,#0xa]
                  |L1.3710|
;;;1127   	}
;;;1128   
;;;1129   
;;;1130   
;;;1131   
;;;1132   if(spc_stat==spcKE)
000e7e  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e82  2801              CMP      r0,#1
000e84  d17e              BNE      |L1.3972|
;;;1133   	{
;;;1134   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e86  48cc              LDR      r0,|L1.4536|
000e88  f04f070a          MOV      r7,#0xa
000e8c  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e90  f1c00000          RSB      r0,r0,#0
000e94  fb90f0f7          SDIV     r0,r0,r7
000e98  b200              SXTH     r0,r0
;;;1135   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e9a  2800              CMP      r0,#0
000e9c  da01              BGE      |L1.3746|
000e9e  f04f0000          MOV      r0,#0
                  |L1.3746|
;;;1136   
;;;1137   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000ea2  4ac6              LDR      r2,|L1.4540|
000ea4  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000ea6  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1138   	if(++ke_drv_cnt_10s>10)
000ea8  1c49              ADDS     r1,r1,#1
;;;1139   		{
;;;1140   		ke_drv_cnt_10s=0;
;;;1141   
;;;1142   		i_bat_buff_cnt++;
;;;1143   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1144   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1145   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1146   		ke_drv_i_temp_temp=0;
;;;1147   		for(i=0;i<6;i++)
;;;1148   			{
;;;1149   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1150   			}
;;;1151   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1152   
;;;1153   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1154   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1155   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1156   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1157   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1158   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1159   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1160   		
;;;1161   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1162   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1163   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1164   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1165   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1166   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1167   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1168   
;;;1169   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1170   		bat_hndl_i_temp=ke_drv_i_avg;
000eaa  4cbf              LDR      r4,|L1.4520|
000eac  b2c9              UXTB     r1,r1                 ;1138
000eae  3c80              SUBS     r4,r4,#0x80
000eb0  7371              STRB     r1,[r6,#0xd]          ;1138
000eb2  290a              CMP      r1,#0xa               ;1138
000eb4  d967              BLS      |L1.3974|
000eb6  7375              STRB     r5,[r6,#0xd]          ;1140
000eb8  7bb1              LDRB     r1,[r6,#0xe]          ;1142  ; i_bat_buff_cnt
000eba  f1010101          ADD      r1,r1,#1              ;1142
000ebe  b2c9              UXTB     r1,r1                 ;1142
000ec0  73b1              STRB     r1,[r6,#0xe]          ;1142
000ec2  2906              CMP      r1,#6                 ;1143
000ec4  d300              BCC      |L1.3784|
000ec6  73b5              STRB     r5,[r6,#0xe]          ;1143
                  |L1.3784|
000ec8  7bb1              LDRB     r1,[r6,#0xe]          ;1144  ; i_bat_buff_cnt
000eca  6091              STR      r1,[r2,#8]            ;1144  ; bat_hndl_plazma
000ecc  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1145
000ed0  f04f0100          MOV      r1,#0                 ;1146
000ed4  4608              MOV      r0,r1                 ;1147
                  |L1.3798|
000ed6  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1149
000eda  4461              ADD      r1,r1,r12             ;1149
000edc  b209              SXTH     r1,r1                 ;1149
000ede  f1000001          ADD      r0,r0,#1              ;1147
000ee2  b2c0              UXTB     r0,r0                 ;1147
000ee4  2806              CMP      r0,#6                 ;1147
000ee6  d3f6              BCC      |L1.3798|
000ee8  f04f0006          MOV      r0,#6                 ;1151
000eec  fb91f0f0          SDIV     r0,r1,r0              ;1151
000ef0  b201              SXTH     r1,r0                 ;1151
000ef2  48b3              LDR      r0,|L1.4544|
000ef4  f8df82c4          LDR      r8,|L1.4540|
000ef8  8800              LDRH     r0,[r0,#0]            ;1153  ; BAT_C_POINT_1_6
000efa  f1a8081c          SUB      r8,r8,#0x1c           ;1153
000efe  eb000040          ADD      r0,r0,r0,LSL #1       ;1153
000f02  ea4f0040          LSL      r0,r0,#1              ;1153
000f06  f8a80000          STRH     r0,[r8,#0]            ;1153
000f0a  48ae              LDR      r0,|L1.4548|
000f0c  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_2
000f0e  ea4f0040          LSL      r0,r0,#1              ;1154
000f12  f8a80002          STRH     r0,[r8,#2]            ;1154
000f16  48ac              LDR      r0,|L1.4552|
000f18  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1
000f1a  f8a80004          STRH     r0,[r8,#4]            ;1155
000f1e  48ab              LDR      r0,|L1.4556|
000f20  f04f0303          MOV      r3,#3                 ;1156
000f24  f9b00000          LDRSH    r0,[r0,#0]            ;1156  ; BAT_C_POINT_3
000f28  fb90f0f3          SDIV     r0,r0,r3              ;1156
000f2c  f8a80006          STRH     r0,[r8,#6]            ;1156
000f30  48a7              LDR      r0,|L1.4560|
000f32  f04f0305          MOV      r3,#5                 ;1157
000f36  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_5
000f3a  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f3e  f8a80008          STRH     r0,[r8,#8]            ;1157
000f42  48a4              LDR      r0,|L1.4564|
000f44  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_10
000f48  fb90f0f7          SDIV     r0,r0,r7              ;1158
000f4c  f8a8000a          STRH     r0,[r8,#0xa]          ;1158
000f50  48a1              LDR      r0,|L1.4568|
000f52  f04f0314          MOV      r3,#0x14              ;1159
000f56  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_20
000f5a  fb90f0f3          SDIV     r0,r0,r3              ;1159
000f5e  f8a8000c          STRH     r0,[r8,#0xc]          ;1159
000f62  489e              LDR      r0,|L1.4572|
000f64  f108090e          ADD      r9,r8,#0xe            ;1161
000f68  f9b07000          LDRSH    r7,[r0,#0]            ;1161  ; BAT_U_END_1_6
000f6c  f8a97000          STRH     r7,[r9,#0]            ;1161
000f70  489b              LDR      r0,|L1.4576|
000f72  8800              LDRH     r0,[r0,#0]            ;1162  ; BAT_U_END_1_2
000f74  f8a90002          STRH     r0,[r9,#2]            ;1162
000f78  489a              LDR      r0,|L1.4580|
000f7a  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1
000f7c  f8a90004          STRH     r0,[r9,#4]            ;1163
000f80  4899              LDR      r0,|L1.4584|
000f82  e001              B        |L1.3976|
                  |L1.3972|
000f84  e0ea              B        |L1.4444|
                  |L1.3974|
000f86  e061              B        |L1.4172|
                  |L1.3976|
000f88  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_3
000f8a  f8a90006          STRH     r0,[r9,#6]            ;1164
000f8e  4897              LDR      r0,|L1.4588|
000f90  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_5
000f92  f8a90008          STRH     r0,[r9,#8]            ;1165
000f96  4896              LDR      r0,|L1.4592|
000f98  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_10
000f9a  f8a9000a          STRH     r0,[r9,#0xa]          ;1166
000f9e  4895              LDR      r0,|L1.4596|
000fa0  f9b0c000          LDRSH    r12,[r0,#0]           ;1167  ; BAT_U_END_20
000fa4  f8a9c00c          STRH     r12,[r9,#0xc]         ;1167
000fa8  6051              STR      r1,[r2,#4]            ;1169  ; bat_hndl_plazma
000faa  8121              STRH     r1,[r4,#8]
;;;1171   		
;;;1172   		for(i=0;i<7;i++)
000fac  f04f0000          MOV      r0,#0
                  |L1.4016|
;;;1173   			{
;;;1174   			if(bat_hndl_i_temp>=I_from_t_table[i])
000fb0  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000fb4  428b              CMP      r3,r1
000fb6  dd04              BLE      |L1.4034|
000fb8  f1000001          ADD      r0,r0,#1              ;1172
000fbc  b2c0              UXTB     r0,r0                 ;1172
000fbe  2807              CMP      r0,#7                 ;1172
000fc0  d3f6              BCC      |L1.4016|
                  |L1.4034|
;;;1175   				{
;;;1176   				break;
;;;1177   				}
;;;1178   			}
;;;1179   
;;;1180   		bat_hndl_plazma[0]=i;
000fc2  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fc4  f10d0a04          ADD      r10,sp,#4             ;1113
;;;1181   
;;;1182   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fc8  b1c8              CBZ      r0,|L1.4094|
;;;1183   		 else if((i>=1)&&(i<7))
000fca  1e42              SUBS     r2,r0,#1
000fcc  2a06              CMP      r2,#6
000fce  d219              BCS      |L1.4100|
;;;1184   		 	{
;;;1185   			short i1,i2;
;;;1186   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fd0  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fd4  eba30101          SUB      r1,r3,r1
000fd8  b209              SXTH     r1,r1
;;;1187   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fda  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fde  eba30308          SUB      r3,r3,r8
000fe2  b21b              SXTH     r3,r3
;;;1188   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fe4  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fe8  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fec  eba80802          SUB      r8,r8,r2
;;;1189   			bat_hndl_t_razr_ke*=(long)i1;
000ff0  fb08f801          MUL      r8,r8,r1
;;;1190   			bat_hndl_t_razr_ke/=(long)i2;
000ff4  fb98f1f3          SDIV     r1,r8,r3
;;;1191   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000ff8  4411              ADD      r1,r1,r2
000ffa  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1192   			}
000ffc  e006              B        |L1.4108|
                  |L1.4094|
000ffe  9901              LDR      r1,[sp,#4]            ;1182
001000  6561              STR      r1,[r4,#0x54]         ;1182  ; bat_hndl_t_razr_ke
001002  e003              B        |L1.4108|
                  |L1.4100|
;;;1193   		else if(i>=7)
001004  2807              CMP      r0,#7
001006  d301              BCC      |L1.4108|
;;;1194   			{
;;;1195   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
001008  9907              LDR      r1,[sp,#0x1c]
00100a  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4108|
;;;1196   			}
;;;1197   
;;;1198   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
00100c  b1c0              CBZ      r0,|L1.4160|
;;;1199   		 else if((i>=1)&&(i<7))
00100e  1e41              SUBS     r1,r0,#1
001010  2906              CMP      r1,#6
001012  d217              BCS      |L1.4164|
;;;1200   		 	{
;;;1201   			long u1,tempL;
;;;1202   
;;;1203   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
001014  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001018  f9392011          LDRSH    r2,[r9,r1,LSL #1]
00101c  eba30302          SUB      r3,r3,r2
;;;1204   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
001020  f85a1021          LDR      r1,[r10,r1,LSL #2]
001024  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
001026  eba70701          SUB      r7,r7,r1
;;;1205   			tempL*=u1;
00102a  fb03f307          MUL      r3,r3,r7
;;;1206   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00102e  f85a0020          LDR      r0,[r10,r0,LSL #2]
001032  eba00001          SUB      r0,r0,r1
;;;1207   			tempL/=u1;
001036  fb93f0f0          SDIV     r0,r3,r0
;;;1208   			tempL+=(long)U_end_from_i_table[i-1];
00103a  4410              ADD      r0,r0,r2
;;;1209   			bat_hndl_u_end=(short)tempL;
00103c  8160              STRH     r0,[r4,#0xa]
;;;1210   			}
00103e  e005              B        |L1.4172|
                  |L1.4160|
001040  8167              STRH     r7,[r4,#0xa]          ;1198
001042  e003              B        |L1.4172|
                  |L1.4164|
;;;1211   		else if(i>=7)
001044  2807              CMP      r0,#7
001046  d301              BCC      |L1.4172|
;;;1212   			{
;;;1213   			bat_hndl_u_end=U_end_from_i_table[6];
001048  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4172|
;;;1214   			}
;;;1215   
;;;1216   		}
;;;1217   
;;;1218   
;;;1219   
;;;1220   	if(spc_phase==0)
00104c  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1221   		{
;;;1222   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1223   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1224   
;;;1225   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1226   	    	
;;;1227   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1228   			{
;;;1229   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1230   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001050  4f69              LDR      r7,|L1.4600|
;;;1231   			}
;;;1232   
;;;1233   		bat[0]._time_min_cnt_ke++;
;;;1234   		if(bat[0]._time_min_cnt_ke>=60)
;;;1235   			{
;;;1236   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
001052  f44f78e3          MOV      r8,#0x1c6
001056  bbe8              CBNZ     r0,|L1.4308|
001058  2314              MOVS     r3,#0x14              ;1223
00105a  f04f32ff          MOV      r2,#0xffffffff        ;1223
00105e  21ce              MOVS     r1,#0xce              ;1223
001060  20cd              MOVS     r0,#0xcd              ;1223
001062  f7fffffe          BL       mess_send
001066  f8961024          LDRB     r1,[r6,#0x24]         ;1225  ; spc_bat
00106a  f8df9190          LDR      r9,|L1.4604|
00106e  eb010041          ADD      r0,r1,r1,LSL #1       ;1225
001072  eb001001          ADD      r0,r0,r1,LSL #4       ;1225
001076  eb090080          ADD      r0,r9,r0,LSL #2       ;1225
00107a  f9b00008          LDRSH    r0,[r0,#8]            ;1225
00107e  f7fffffe          BL       abs
001082  f8d91018          LDR      r1,[r9,#0x18]         ;1225  ; bat
001086  4401              ADD      r1,r1,r0              ;1225
001088  f8c91018          STR      r1,[r9,#0x18]         ;1225  ; bat
00108c  f64840a0          MOV      r0,#0x8ca0            ;1227
001090  4281              CMP      r1,r0                 ;1227
001092  db0c              BLT      |L1.4270|
001094  eba10100          SUB      r1,r1,r0              ;1229
001098  f8c91018          STR      r1,[r9,#0x18]         ;1229  ; bat
00109c  8838              LDRH     r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
00109e  f7fffffe          BL       lc640_read_int
0010a2  1c40              ADDS     r0,r0,#1              ;1230
0010a4  b201              SXTH     r1,r0                 ;1230
0010a6  f9b70000          LDRSH    r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
0010aa  f7fffffe          BL       lc640_write_int
                  |L1.4270|
0010ae  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1233  ; bat
0010b2  f1000001          ADD      r0,r0,#1              ;1233
0010b6  b281              UXTH     r1,r0                 ;1233
0010b8  f8a9104a          STRH     r1,[r9,#0x4a]         ;1233
0010bc  293c              CMP      r1,#0x3c              ;1234
0010be  d309              BCC      |L1.4308|
0010c0  4640              MOV      r0,r8
0010c2  f7fffffe          BL       lc640_read_int
0010c6  1c40              ADDS     r0,r0,#1
0010c8  b201              SXTH     r1,r0
0010ca  4640              MOV      r0,r8
0010cc  f7fffffe          BL       lc640_write_int
;;;1237   			bat[0]._time_min_cnt_ke=0;
0010d0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4308|
;;;1238   			}
;;;1239   		}
;;;1240   
;;;1241   	else if(spc_phase==1)
;;;1242   		{
;;;1243   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1244   		}
;;;1245   
;;;1246   	if(out_U<bat_hndl_u_end)
0010d4  484a              LDR      r0,|L1.4608|
0010d6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010da  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010de  4288              CMP      r0,r1
0010e0  da3a              BGE      |L1.4440|
;;;1247   		{
;;;1248   		cnt_end_ke++;
0010e2  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010e6  f1000001          ADD      r0,r0,#1
0010ea  b200              SXTH     r0,r0
0010ec  f8a60066          STRH     r0,[r6,#0x66]
;;;1249   		if(cnt_end_ke>=30)
0010f0  281e              CMP      r0,#0x1e
0010f2  db33              BLT      |L1.4444|
;;;1250   			{
;;;1251   			
;;;1252   			if((spc_stat==spcKE)&&(spc_phase==0))
0010f4  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010f8  2801              CMP      r0,#1
0010fa  d121              BNE      |L1.4416|
0010fc  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
001100  b9f0              CBNZ     r0,|L1.4416|
;;;1253   				{
;;;1254   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
001102  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001104  f7fffffe          BL       lc640_read_int
001108  b201              SXTH     r1,r0
00110a  483e              LDR      r0,|L1.4612|
00110c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001110  f7fffffe          BL       lc640_write_int
;;;1255   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
001114  4640              MOV      r0,r8
001116  f7fffffe          BL       lc640_read_int
00111a  b284              UXTH     r4,r0
00111c  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00111e  f7fffffe          BL       lc640_read_int
001122  b281              UXTH     r1,r0
001124  4622              MOV      r2,r4
001126  2000              MOVS     r0,#0
001128  f7fffffe          BL       ke_zvu_mem_hndl
;;;1256   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
00112c  4836              LDR      r0,|L1.4616|
00112e  2100              MOVS     r1,#0
001130  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001134  f7fffffe          BL       lc640_write_int
;;;1257   				cntrl_stat=50;
001138  f04f0032          MOV      r0,#0x32
00113c  8670              STRH     r0,[r6,#0x32]
;;;1258   				cntrl_stat_old=50;
00113e  86b0              STRH     r0,[r6,#0x34]
                  |L1.4416|
;;;1259   				}
;;;1260   
;;;1261   			spc_stat=spcOFF;
001140  f8865023          STRB     r5,[r6,#0x23]
;;;1262   			__ee_spc_stat=spcOFF;
001144  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1263   			lc640_write_int(EE_SPC_STAT,spcOFF);
001148  b008              ADD      sp,sp,#0x20
00114a  2100              MOVS     r1,#0
00114c  e8bd47f0          POP      {r4-r10,lr}
001150  f240209a          MOV      r0,#0x29a
001154  f7ffbffe          B.W      lc640_write_int
                  |L1.4440|
;;;1264   
;;;1265   			}
;;;1266   		}
;;;1267   	else cnt_end_ke=0;
001158  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4444|
;;;1268   
;;;1269   	}
;;;1270   			
;;;1271   }
00115c  b008              ADD      sp,sp,#0x20
00115e  e8bd87f0          POP      {r4-r10,pc}
;;;1272   #endif
                          ENDP

                  vz_start PROC
;;;1342   //-----------------------------------------------
;;;1343   char vz_start(char hour)
001162  b570              PUSH     {r4-r6,lr}
;;;1344   {          
001164  4605              MOV      r5,r0
;;;1345   char out;
;;;1346   out=0;
001166  f04f0600          MOV      r6,#0
;;;1347   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00116a  4c11              LDR      r4,|L1.4528|
00116c  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001170  b9a8              CBNZ     r0,|L1.4510|
001172  4826              LDR      r0,|L1.4620|
001174  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001176  2801              CMP      r0,#1
001178  d06a              BEQ      |L1.4688|
;;;1348   	{
;;;1349   	spc_stat=spcVZ;
00117a  f104042c          ADD      r4,r4,#0x2c
00117e  f04f0102          MOV      r1,#2
001182  f8041c09          STRB     r1,[r4,#-9]
;;;1350   	__ee_spc_stat=spcVZ; 
001186  87e1              STRH     r1,[r4,#0x3e]
;;;1351   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001188  f240209a          MOV      r0,#0x29a
00118c  f7fffffe          BL       lc640_write_int
;;;1352   	vz_cnt_h=hour;
001190  86e5              STRH     r5,[r4,#0x36]
;;;1353   	__ee_vz_cnt=hour*60;
001192  ebc51005          RSB      r0,r5,r5,LSL #4
001196  ea4f0080          LSL      r0,r0,#2
00119a  87a0              STRH     r0,[r4,#0x3c]
00119c  e038              B        |L1.4624|
                  |L1.4510|
00119e  e057              B        |L1.4688|
                  |L1.4512|
                          DCD      bat_u_old_cnt
                  |L1.4516|
                          DCD      0x40024020
                  |L1.4520|
                          DCD      ||area_number.26||+0x100
                  |L1.4524|
                          DCD      ||area_number.20||+0x4
                  |L1.4528|
                          DCD      ||area_number.26||
                  |L1.4532|
                          DCD      ||.bss||
                  |L1.4536|
                          DCD      Ib_ips_termokompensat
                  |L1.4540|
                          DCD      ||.bss||+0x468
                  |L1.4544|
                          DCD      BAT_C_POINT_1_6
                  |L1.4548|
                          DCD      BAT_C_POINT_1_2
                  |L1.4552|
                          DCD      BAT_C_POINT_1
                  |L1.4556|
                          DCD      BAT_C_POINT_3
                  |L1.4560|
                          DCD      BAT_C_POINT_5
                  |L1.4564|
                          DCD      BAT_C_POINT_10
                  |L1.4568|
                          DCD      BAT_C_POINT_20
                  |L1.4572|
                          DCD      BAT_U_END_1_6
                  |L1.4576|
                          DCD      BAT_U_END_1_2
                  |L1.4580|
                          DCD      BAT_U_END_1
                  |L1.4584|
                          DCD      BAT_U_END_3
                  |L1.4588|
                          DCD      BAT_U_END_5
                  |L1.4592|
                          DCD      BAT_U_END_10
                  |L1.4596|
                          DCD      BAT_U_END_20
                  |L1.4600|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4604|
                          DCD      bat
                  |L1.4608|
                          DCD      out_U
                  |L1.4612|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4616|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4620|
                          DCD      speedChrgBlckStat
                  |L1.4624|
001210  f1a4042c          SUB      r4,r4,#0x2c
;;;1354   	if(hour==0)__ee_vz_cnt=30;
001214  b91d              CBNZ     r5,|L1.4638|
001216  f04f001e          MOV      r0,#0x1e
00121a  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4638|
;;;1355   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
00121e  f104045e          ADD      r4,r4,#0x5e
001222  f44f7027          MOV      r0,#0x29c
001226  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00122a  f7fffffe          BL       lc640_write_int
;;;1356   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
00122e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001232  f44f702a          MOV      r0,#0x2a8
001236  f7fffffe          BL       lc640_write_int
;;;1357   	vz_cnt_h_=0;
00123a  f04f0000          MOV      r0,#0
00123e  80e0              STRH     r0,[r4,#6]
;;;1358   	vz_cnt_s=0;
001240  8020              STRH     r0,[r4,#0]
;;;1359   	vz_cnt_s_=0;
001242  8060              STRH     r0,[r4,#2]
;;;1360   	out=1;
001244  f04f0601          MOV      r6,#1
;;;1361   	vz_mem_hndl(1);
001248  f04f0001          MOV      r0,#1
00124c  f7fffffe          BL       vz_mem_hndl
                  |L1.4688|
;;;1362   	}
;;;1363   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1364   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1365   //plazma=out;	
;;;1366   return out;
001250  4630              MOV      r0,r6
;;;1367   }
001252  bd70              POP      {r4-r6,pc}
;;;1368   
                          ENDP

                  vz_stop PROC
;;;1369   //-----------------------------------------------
;;;1370   void vz_stop(void)
001254  b510              PUSH     {r4,lr}
;;;1371   {
;;;1372   if(spc_stat==spcVZ)
001256  4cff              LDR      r4,|L1.5716|
001258  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00125c  2802              CMP      r0,#2
00125e  d113              BNE      |L1.4744|
;;;1373        {
;;;1374   vz_mem_hndl(vz_cnt_h);          
001260  f104042c          ADD      r4,r4,#0x2c
001264  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001266  f7fffffe          BL       vz_mem_hndl
;;;1375   vz_cnt_s=0;
00126a  f04f0000          MOV      r0,#0
00126e  8660              STRH     r0,[r4,#0x32]
;;;1376   vz_cnt_h=0;
001270  86e0              STRH     r0,[r4,#0x36]
;;;1377   vz_cnt_h_=0;
001272  8720              STRH     r0,[r4,#0x38]
;;;1378   spc_stat=spcOFF;
001274  f8040c09          STRB     r0,[r4,#-9]
;;;1379   
;;;1380   		__ee_spc_stat=spcOFF;
001278  87e0              STRH     r0,[r4,#0x3e]
;;;1381   		lc640_write_int(EE_SPC_STAT,spcOFF);
00127a  4601              MOV      r1,r0
00127c  e8bd4010          POP      {r4,lr}
001280  f240209a          MOV      r0,#0x29a
001284  f7ffbffe          B.W      lc640_write_int
                  |L1.4744|
;;;1382        }
;;;1383   
;;;1384   }
001288  bd10              POP      {r4,pc}
;;;1385   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1387   //-----------------------------------------------
;;;1388   void amper_chas_cnt_drv(void)
00128a  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390   
;;;1391   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
00128c  4af1              LDR      r2,|L1.5716|
00128e  49f2              LDR      r1,|L1.5720|
001290  3280              ADDS     r2,r2,#0x80
001292  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
001296  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
001298  4401              ADD      r1,r1,r0
00129a  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1392   
;;;1393   if(amper_chas_cnt_drv_summ>=36000L)
00129c  f64843a0          MOV      r3,#0x8ca0
;;;1394   	{
;;;1395   	amper_chas_cnt_drv_summ-=36000L;
;;;1396   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
0012a0  f44f74e4          MOV      r4,#0x1c8
0012a4  4299              CMP      r1,r3                 ;1393
0012a6  db0c              BLT      |L1.4802|
0012a8  eba10103          SUB      r1,r1,r3              ;1395
0012ac  6651              STR      r1,[r2,#0x64]         ;1395  ; amper_chas_cnt_drv_summ
0012ae  4620              MOV      r0,r4
0012b0  f7fffffe          BL       lc640_read_int
0012b4  1c40              ADDS     r0,r0,#1
0012b6  b201              SXTH     r1,r0
0012b8  4620              MOV      r0,r4
0012ba  e8bd4010          POP      {r4,lr}
0012be  f7ffbffe          B.W      lc640_write_int
                  |L1.4802|
;;;1397   	}
;;;1398   else if(amper_chas_cnt_drv_summ<=-36000L)
0012c2  48e6              LDR      r0,|L1.5724|
0012c4  4281              CMP      r1,r0
0012c6  dc0c              BGT      |L1.4834|
;;;1399   	{
;;;1400   	amper_chas_cnt_drv_summ+=36000L;
0012c8  eb010003          ADD      r0,r1,r3
0012cc  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1401   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012ce  4620              MOV      r0,r4
0012d0  f7fffffe          BL       lc640_read_int
0012d4  1e40              SUBS     r0,r0,#1
0012d6  b201              SXTH     r1,r0
0012d8  4620              MOV      r0,r4
0012da  e8bd4010          POP      {r4,lr}
0012de  f7ffbffe          B.W      lc640_write_int
                  |L1.4834|
;;;1402   	}
;;;1403   }
0012e2  bd10              POP      {r4,pc}
;;;1404   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1406   //-----------------------------------------------
;;;1407   void avz_next_date_hndl(void)
0012e4  b570              PUSH     {r4-r6,lr}
;;;1408   {
;;;1409   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012e6  4cde              LDR      r4,|L1.5728|
0012e8  f8940038          LDRB     r0,[r4,#0x38]
0012ec  4ddd              LDR      r5,|L1.5732|
0012ee  7829              LDRB     r1,[r5,#0]  ; AVZ
0012f0  4408              ADD      r0,r0,r1
0012f2  280c              CMP      r0,#0xc
0012f4  d906              BLS      |L1.4868|
0012f6  8fa0              LDRH     r0,[r4,#0x3c]
0012f8  1c40              ADDS     r0,r0,#1
0012fa  b201              SXTH     r1,r0
0012fc  20b8              MOVS     r0,#0xb8
0012fe  f7fffffe          BL       lc640_write_int
001302  e004              B        |L1.4878|
                  |L1.4868|
;;;1410   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
001304  f9b4103c          LDRSH    r1,[r4,#0x3c]
001308  20b8              MOVS     r0,#0xb8
00130a  f7fffffe          BL       lc640_write_int
                  |L1.4878|
;;;1411   
;;;1412   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1413   
;;;1414   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00130e  f8941038          LDRB     r1,[r4,#0x38]
001312  7828              LDRB     r0,[r5,#0]  ; AVZ
001314  4401              ADD      r1,r1,r0
001316  290c              CMP      r1,#0xc
001318  d907              BLS      |L1.4906|
00131a  f8941038          LDRB     r1,[r4,#0x38]
00131e  380c              SUBS     r0,r0,#0xc
001320  4401              ADD      r1,r1,r0
001322  20b6              MOVS     r0,#0xb6
001324  f7fffffe          BL       lc640_write_int
001328  e005              B        |L1.4918|
                  |L1.4906|
;;;1415   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
00132a  f8941038          LDRB     r1,[r4,#0x38]
00132e  4401              ADD      r1,r1,r0
001330  20b6              MOVS     r0,#0xb6
001332  f7fffffe          BL       lc640_write_int
                  |L1.4918|
;;;1416   
;;;1417   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1418   
;;;1419   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
001336  f894002c          LDRB     r0,[r4,#0x2c]
00133a  281c              CMP      r0,#0x1c
00133c  d904              BLS      |L1.4936|
00133e  211c              MOVS     r1,#0x1c
001340  20b4              MOVS     r0,#0xb4
001342  f7fffffe          BL       lc640_write_int
001346  e004              B        |L1.4946|
                  |L1.4936|
;;;1420   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001348  f894102c          LDRB     r1,[r4,#0x2c]
00134c  20b4              MOVS     r0,#0xb4
00134e  f7fffffe          BL       lc640_write_int
                  |L1.4946|
;;;1421   
;;;1422   //lc640_write_int(EE_DATE_AVZ,4);
;;;1423   
;;;1424   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001352  f1040420          ADD      r4,r4,#0x20
001356  7a21              LDRB     r1,[r4,#8]
001358  f04f00ae          MOV      r0,#0xae
00135c  f7fffffe          BL       lc640_write_int
;;;1425   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001360  7921              LDRB     r1,[r4,#4]
001362  20b0              MOVS     r0,#0xb0
001364  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001368  7821              LDRB     r1,[r4,#0]
00136a  e8bd4070          POP      {r4-r6,lr}
00136e  20b2              MOVS     r0,#0xb2
001370  f7ffbffe          B.W      lc640_write_int
;;;1427   
;;;1428   }
;;;1429   
                          ENDP

                  avz_drv PROC
;;;1430   //-----------------------------------------------
;;;1431   void avz_drv(void)                               
001374  b510              PUSH     {r4,lr}
;;;1432   {                
;;;1433   if(AVZ!=AVZ_OFF)
001376  48bb              LDR      r0,|L1.5732|
;;;1434   	{
;;;1435   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1436   		{
;;;1437   		bAVZ=1;
001378  4cb6              LDR      r4,|L1.5716|
00137a  7800              LDRB     r0,[r0,#0]            ;1433  ; AVZ
00137c  b338              CBZ      r0,|L1.5070|
00137e  48b8              LDR      r0,|L1.5728|
001380  8f82              LDRH     r2,[r0,#0x3c]         ;1435
001382  49b9              LDR      r1,|L1.5736|
001384  8809              LDRH     r1,[r1,#0]            ;1435  ; YEAR_AVZ
001386  428a              CMP      r2,r1                 ;1435
001388  d121              BNE      |L1.5070|
00138a  f8902038          LDRB     r2,[r0,#0x38]         ;1435
00138e  49b7              LDR      r1,|L1.5740|
001390  8809              LDRH     r1,[r1,#0]            ;1435  ; MONTH_AVZ
001392  428a              CMP      r2,r1                 ;1435
001394  d11b              BNE      |L1.5070|
001396  f890102c          LDRB     r1,[r0,#0x2c]         ;1435
00139a  4ab5              LDR      r2,|L1.5744|
00139c  8812              LDRH     r2,[r2,#0]            ;1435  ; DATE_AVZ
00139e  4291              CMP      r1,r2                 ;1435
0013a0  d115              BNE      |L1.5070|
0013a2  f8901028          LDRB     r1,[r0,#0x28]         ;1435
0013a6  4ab3              LDR      r2,|L1.5748|
0013a8  8812              LDRH     r2,[r2,#0]            ;1435  ; HOUR_AVZ
0013aa  4291              CMP      r1,r2                 ;1435
0013ac  d10f              BNE      |L1.5070|
0013ae  f8901024          LDRB     r1,[r0,#0x24]         ;1435
0013b2  4ab1              LDR      r2,|L1.5752|
0013b4  8812              LDRH     r2,[r2,#0]            ;1435  ; MIN_AVZ
0013b6  4291              CMP      r1,r2                 ;1435
0013b8  d109              BNE      |L1.5070|
0013ba  f8900020          LDRB     r0,[r0,#0x20]         ;1435
0013be  49af              LDR      r1,|L1.5756|
0013c0  8809              LDRH     r1,[r1,#0]            ;1435  ; SEC_AVZ
0013c2  4288              CMP      r0,r1                 ;1435
0013c4  d103              BNE      |L1.5070|
0013c6  f04f0001          MOV      r0,#1
0013ca  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5070|
;;;1438   		}
;;;1439   	}
;;;1440   if(bAVZ)
0013ce  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013d2  2800              CMP      r0,#0
0013d4  d00d              BEQ      |L1.5106|
;;;1441   	{
;;;1442   	if(vz_start(AVZ_TIME))
0013d6  48aa              LDR      r0,|L1.5760|
0013d8  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013da  b2c0              UXTB     r0,r0
0013dc  f7fffffe          BL       vz_start
0013e0  2800              CMP      r0,#0
0013e2  d006              BEQ      |L1.5106|
;;;1443   		{
;;;1444   		bAVZ=0;
0013e4  f04f0000          MOV      r0,#0
0013e8  f8840026          STRB     r0,[r4,#0x26]
;;;1445   		avz_next_date_hndl();
0013ec  e8bd4010          POP      {r4,lr}
0013f0  e7fe              B        avz_next_date_hndl
                  |L1.5106|
;;;1446   		}
;;;1447   	}	
;;;1448   
;;;1449   }
0013f2  bd10              POP      {r4,pc}
;;;1450   
                          ENDP

                  vz_drv PROC
;;;1451   //-----------------------------------------------
;;;1452   void vz_drv(void)
0013f4  b538              PUSH     {r3-r5,lr}
;;;1453   { 
;;;1454   if(spc_stat==spcVZ)
0013f6  4c97              LDR      r4,|L1.5716|
0013f8  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013fc  2802              CMP      r0,#2
0013fe  d11d              BNE      |L1.5180|
;;;1455   	{
;;;1456   #ifndef UKU_6U
;;;1457   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001400  48a0              LDR      r0,|L1.5764|
001402  7800              LDRB     r0,[r0,#0]  ; sk_stat
001404  2801              CMP      r0,#1
001406  d01a              BEQ      |L1.5182|
001408  489f              LDR      r0,|L1.5768|
00140a  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
00140c  2800              CMP      r0,#0
00140e  d016              BEQ      |L1.5182|
;;;1458   #endif //UKU_6U
;;;1459   		{
;;;1460   
;;;1461   		if(vz_cnt_s_<3600)
;;;1462   			{
;;;1463   			vz_cnt_s_++;
;;;1464   			if(vz_cnt_s_>=3600)
;;;1465   				{
;;;1466   				vz_cnt_s_=0;
;;;1467   				if(vz_cnt_h)
;;;1468   					{
;;;1469   					vz_cnt_h--;
;;;1470   					vz_cnt_h_++;
;;;1471   					}
;;;1472   				}
;;;1473   			}
;;;1474   	
;;;1475   	
;;;1476   		if(vz_cnt_s<60)
;;;1477   			{
;;;1478   			vz_cnt_s++;
;;;1479   			if(vz_cnt_s>=60)
;;;1480   				{
;;;1481   				vz_cnt_s=0;
;;;1482   				
;;;1483   				__ee_vz_cnt--;
;;;1484   				lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1485   				if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1486   					{
;;;1487   					spc_stat=spcOFF;
;;;1488   							__ee_spc_stat=spcOFF;
;;;1489   			lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1490   	
;;;1491   	//				hv_vz_stat=hvsOFF;
;;;1492   	//		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1493   					vz_mem_hndl(0);
;;;1494   					}
;;;1495   				}
;;;1496   			}
;;;1497   		vz_error=0; 
;;;1498   		}
;;;1499   #ifndef UKU_6U
;;;1500   	else 
;;;1501   		{
;;;1502   		vz_error=1; 
001410  f04f0001          MOV      r0,#1
001414  7060              STRB     r0,[r4,#1]
;;;1503   		if(((LPC_RTC->SEC)%10)==0)
001416  489d              LDR      r0,|L1.5772|
001418  7800              LDRB     r0,[r0,#0]
00141a  f04f010a          MOV      r1,#0xa
00141e  fbb0f2f1          UDIV     r2,r0,r1
001422  fb010012          MLS      r0,r1,r2,r0
001426  2800              CMP      r0,#0
001428  d108              BNE      |L1.5180|
;;;1504   			{
;;;1505   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00142a  f2413088          MOV      r0,#0x1388
00142e  9000              STR      r0,[sp,#0]
001430  a397              ADR      r3,|L1.5776|
001432  a29d              ADR      r2,|L1.5800|
001434  a1a2              ADR      r1,|L1.5824|
001436  a0a8              ADR      r0,|L1.5848|
001438  f7fffffe          BL       show_mess
                  |L1.5180|
;;;1506   						"    ЗАБЛОКИРОВАН    ",
;;;1507   						"     НЕИСПРАВНА     ",
;;;1508   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1509   						5000);			
;;;1510   			}
;;;1511   		}
;;;1512   #endif //UKU_6U
;;;1513   /*	if(vz_cnt_s_>=3)
;;;1514   		{
;;;1515   		if(sk_stat[0]==0)
;;;1516   		} */
;;;1517   
;;;1518   	}
;;;1519   
;;;1520   
;;;1521   } 
00143c  bd38              POP      {r3-r5,pc}
                  |L1.5182|
00143e  f8b40060          LDRH     r0,[r4,#0x60]         ;1461  ; vz_cnt_s_
001442  f44f6161          MOV      r1,#0xe10             ;1461
001446  2500              MOVS     r5,#0                 ;1457
001448  4288              CMP      r0,r1                 ;1461
00144a  d215              BCS      |L1.5240|
00144c  f1000001          ADD      r0,r0,#1              ;1463
001450  b280              UXTH     r0,r0                 ;1463
001452  f8a40060          STRH     r0,[r4,#0x60]         ;1463
001456  4288              CMP      r0,r1                 ;1464
001458  d30e              BCC      |L1.5240|
00145a  f8a45060          STRH     r5,[r4,#0x60]         ;1466
00145e  f8b40062          LDRH     r0,[r4,#0x62]         ;1467  ; vz_cnt_h
001462  b148              CBZ      r0,|L1.5240|
001464  f1a00001          SUB      r0,r0,#1              ;1469
001468  f8240f62          STRH     r0,[r4,#0x62]!        ;1469
00146c  8860              LDRH     r0,[r4,#2]            ;1470  ; vz_cnt_h_
00146e  f1000001          ADD      r0,r0,#1              ;1470
001472  8060              STRH     r0,[r4,#2]            ;1470
001474  f1a40462          SUB      r4,r4,#0x62           ;1470
                  |L1.5240|
001478  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1476  ; vz_cnt_s
00147c  283c              CMP      r0,#0x3c              ;1476
00147e  d225              BCS      |L1.5324|
001480  f1000001          ADD      r0,r0,#1              ;1478
001484  b280              UXTH     r0,r0                 ;1478
001486  f8a4005e          STRH     r0,[r4,#0x5e]         ;1478
00148a  283c              CMP      r0,#0x3c              ;1479
00148c  d31e              BCC      |L1.5324|
00148e  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1481
001492  8960              LDRH     r0,[r4,#0xa]          ;1483  ; __ee_vz_cnt
001494  f1a00001          SUB      r0,r0,#1              ;1483
001498  b201              SXTH     r1,r0                 ;1483
00149a  8161              STRH     r1,[r4,#0xa]          ;1483
00149c  f44f7027          MOV      r0,#0x29c             ;1484
0014a0  f7fffffe          BL       lc640_write_int
0014a4  8960              LDRH     r0,[r4,#0xa]          ;1485  ; __ee_vz_cnt
0014a6  f1a4045e          SUB      r4,r4,#0x5e           ;1485
0014aa  b118              CBZ      r0,|L1.5300|
0014ac  4890              LDR      r0,|L1.5872|
0014ae  8800              LDRH     r0,[r0,#0]            ;1485  ; speedChrgBlckStat
0014b0  2801              CMP      r0,#1                 ;1485
0014b2  d10b              BNE      |L1.5324|
                  |L1.5300|
0014b4  f8845023          STRB     r5,[r4,#0x23]         ;1487
0014b8  f8a4506a          STRH     r5,[r4,#0x6a]         ;1488
0014bc  2100              MOVS     r1,#0                 ;1489
0014be  f240209a          MOV      r0,#0x29a             ;1489
0014c2  f7fffffe          BL       lc640_write_int
0014c6  2000              MOVS     r0,#0                 ;1493
0014c8  f7fffffe          BL       vz_mem_hndl
                  |L1.5324|
0014cc  7065              STRB     r5,[r4,#1]            ;1497
0014ce  bd38              POP      {r3-r5,pc}
;;;1522   
                          ENDP

                  vz1_drv PROC
;;;1524   //драйвер уравнительного заряда
;;;1525   void vz1_drv(void)
0014d0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1526   {
;;;1527   if(volt_region_cnt)volt_region_cnt--;
0014d4  f8df817c          LDR      r8,|L1.5716|
0014d8  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014dc  b118              CBZ      r0,|L1.5350|
0014de  f1a00001          SUB      r0,r0,#1
0014e2  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5350|
;;;1528   if(vz1_stat==vz1sOFF)
0014e6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014ea  b928              CBNZ     r0,|L1.5368|
;;;1529   	{
;;;1530   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014ec  2314              MOVS     r3,#0x14
0014ee  2200              MOVS     r2,#0
0014f0  2164              MOVS     r1,#0x64
0014f2  20d2              MOVS     r0,#0xd2
0014f4  f7fffffe          BL       mess_send
                  |L1.5368|
;;;1531   	}
;;;1532   if(vz1_stat==vz1sSTEP1)
0014f8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1533   	{
;;;1534   	if(vz1_stat_old!=vz1_stat)
;;;1535   		{
;;;1536   		vz1_stat_cnt=5;
;;;1537   		}
;;;1538   	if(vz1_stat_cnt)
;;;1539   		{
;;;1540   		vz1_stat_cnt--;
;;;1541   		if(vz1_stat_cnt==0)
;;;1542   			{
;;;1543   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1544   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1545   			}
;;;1546   		}
;;;1547   	if(sk_stat[0]==1)
0014fc  4d61              LDR      r5,|L1.5764|
0014fe  f44f7bc9          MOV      r11,#0x192            ;1544
001502  2801              CMP      r0,#1                 ;1532
001504  d139              BNE      |L1.5498|
001506  f8980006          LDRB     r0,[r8,#6]            ;1534  ; vz1_stat_old
00150a  2801              CMP      r0,#1                 ;1534
00150c  d003              BEQ      |L1.5398|
00150e  f04f0005          MOV      r0,#5                 ;1536
001512  f8a80076          STRH     r0,[r8,#0x76]         ;1536
                  |L1.5398|
001516  f9b80076          LDRSH    r0,[r8,#0x76]         ;1538  ; vz1_stat_cnt
00151a  b168              CBZ      r0,|L1.5432|
00151c  f1a00001          SUB      r0,r0,#1              ;1540
001520  b200              SXTH     r0,r0                 ;1540
001522  f8a80076          STRH     r0,[r8,#0x76]         ;1540
001526  b938              CBNZ     r0,|L1.5432|
001528  f04f000b          MOV      r0,#0xb               ;1543
00152c  f8880005          STRB     r0,[r8,#5]            ;1543
001530  4601              MOV      r1,r0                 ;1544
001532  4658              MOV      r0,r11                ;1544
001534  f7fffffe          BL       lc640_write
                  |L1.5432|
001538  7828              LDRB     r0,[r5,#0]  ; sk_stat
00153a  2801              CMP      r0,#1
00153c  d117              BNE      |L1.5486|
;;;1548   		{
;;;1549   		vz1_stat=vz1sSTEP2;
00153e  f04f0002          MOV      r0,#2
001542  f8880005          STRB     r0,[r8,#5]
;;;1550   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
001546  4601              MOV      r1,r0
001548  4658              MOV      r0,r11
00154a  f7fffffe          BL       lc640_write
;;;1551   		tree_up(iVZ1_STEP2_2,1,0,0);
00154e  2300              MOVS     r3,#0
001550  461a              MOV      r2,r3
001552  2101              MOVS     r1,#1
001554  20ed              MOVS     r0,#0xed
001556  f7fffffe          BL       tree_up
;;;1552   		tree_up(iVZ1_STEP2_1,0,0,0);
00155a  2300              MOVS     r3,#0
00155c  461a              MOV      r2,r3
00155e  4619              MOV      r1,r3
001560  20ec              MOVS     r0,#0xec
001562  f7fffffe          BL       tree_up
;;;1553   		ret(1200);
001566  f44f6096          MOV      r0,#0x4b0
00156a  f7fffffe          BL       ||ret||
                  |L1.5486|
;;;1554   		}
;;;1555   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00156e  2314              MOVS     r3,#0x14
001570  2200              MOVS     r2,#0
001572  2164              MOVS     r1,#0x64
001574  20d2              MOVS     r0,#0xd2
001576  f7fffffe          BL       mess_send
                  |L1.5498|
;;;1556   	}
;;;1557   
;;;1558   if(vz1_stat==vz1sSTEP2)
00157a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1559   	{
;;;1560   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1561   		{
;;;1562   		vz1_stat_cnt=15;
00157e  f04f090f          MOV      r9,#0xf
001582  2802              CMP      r0,#2                 ;1558
001584  d118              BNE      |L1.5560|
001586  f8980006          LDRB     r0,[r8,#6]            ;1560  ; vz1_stat_old
00158a  2802              CMP      r0,#2                 ;1560
00158c  d102              BNE      |L1.5524|
00158e  f8b80076          LDRH     r0,[r8,#0x76]         ;1560  ; vz1_stat_cnt
001592  b908              CBNZ     r0,|L1.5528|
                  |L1.5524|
001594  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5528|
;;;1563   		}
;;;1564   	vz1_stat_cnt--;
001598  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00159c  f1a00001          SUB      r0,r0,#1
0015a0  f8a80076          STRH     r0,[r8,#0x76]
;;;1565   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015a4  f04f0314          MOV      r3,#0x14
0015a8  f04f0200          MOV      r2,#0
0015ac  f04f0164          MOV      r1,#0x64
0015b0  f04f00d2          MOV      r0,#0xd2
0015b4  f7fffffe          BL       mess_send
                  |L1.5560|
;;;1566   	}
;;;1567   
;;;1568   if(vz1_stat==vz1sSTEP3)
0015b8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1569   	{
;;;1570   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1571   		{
;;;1572   		vz1_stat_cnt=10;
0015bc  240a              MOVS     r4,#0xa
0015be  2600              MOVS     r6,#0                 ;1527
0015c0  f04f0a01          MOV      r10,#1                ;1528
;;;1573   
;;;1574   		}
;;;1575   	vz1_stat_cnt--;
;;;1576   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1577   		{
;;;1578   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015c4  f2413788          MOV      r7,#0x1388
0015c8  2803              CMP      r0,#3                 ;1568
0015ca  d131              BNE      |L1.5680|
0015cc  f8980006          LDRB     r0,[r8,#6]            ;1570  ; vz1_stat_old
0015d0  2803              CMP      r0,#3                 ;1570
0015d2  d102              BNE      |L1.5594|
0015d4  f8b80076          LDRH     r0,[r8,#0x76]         ;1570  ; vz1_stat_cnt
0015d8  b908              CBNZ     r0,|L1.5598|
                  |L1.5594|
0015da  f8a84076          STRH     r4,[r8,#0x76]         ;1572
                  |L1.5598|
0015de  f8b80076          LDRH     r0,[r8,#0x76]         ;1575  ; vz1_stat_cnt
0015e2  f1a00001          SUB      r0,r0,#1              ;1575
0015e6  b200              SXTH     r0,r0                 ;1575
0015e8  f8a80076          STRH     r0,[r8,#0x76]         ;1575
0015ec  280a              CMP      r0,#0xa               ;1576
0015ee  d001              BEQ      |L1.5620|
0015f0  2809              CMP      r0,#9                 ;1576
0015f2  d106              BNE      |L1.5634|
                  |L1.5620|
0015f4  a33f              ADR      r3,|L1.5876|
0015f6  a245              ADR      r2,|L1.5900|
0015f8  a14a              ADR      r1,|L1.5924|
0015fa  a050              ADR      r0,|L1.5948|
0015fc  9700              STR      r7,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1579   					"      ТУМБЛЕР       ",
;;;1580   					"     ВЫСОКОГО       ",
;;;1581   					"    НАПРЯЖЕНИЯ      ",
;;;1582   					5000);
;;;1583   		}
;;;1584   	if(sk_stat[1]==1)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  2801              CMP      r0,#1
001606  d10d              BNE      |L1.5668|
;;;1585   		{
;;;1586   		vz1_stat=vz1sWRK;
001608  f8884005          STRB     r4,[r8,#5]
;;;1587   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00160c  210a              MOVS     r1,#0xa
00160e  4658              MOV      r0,r11
001610  f7fffffe          BL       lc640_write
;;;1588   		volt_region=1;
001614  f888a02f          STRB     r10,[r8,#0x2f]
;;;1589   		cntrl_stat=0;
001618  f8a86032          STRH     r6,[r8,#0x32]
;;;1590   		cntrl_stat_new=0;
00161c  f8a86048          STRH     r6,[r8,#0x48]
;;;1591   		cntrl_stat_old=0;
001620  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5668|
;;;1592   		}
;;;1593   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001624  2314              MOVS     r3,#0x14
001626  2200              MOVS     r2,#0
001628  2164              MOVS     r1,#0x64
00162a  20d2              MOVS     r0,#0xd2
00162c  f7fffffe          BL       mess_send
                  |L1.5680|
;;;1594   	}
;;;1595   
;;;1596   if(vz1_stat==vz1sWRK)
001630  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001634  280a              CMP      r0,#0xa
001636  d10b              BNE      |L1.5712|
;;;1597   	{
;;;1598   	if(vz1_stat_old!=vz1_stat)
;;;1599   		{
;;;1600   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001638  4906              LDR      r1,|L1.5716|
00163a  f8980006          LDRB     r0,[r8,#6]            ;1598  ; vz1_stat_old
00163e  3180              ADDS     r1,r1,#0x80
001640  280a              CMP      r0,#0xa               ;1598
001642  d006              BEQ      |L1.5714|
001644  4843              LDR      r0,|L1.5972|
001646  f44f6261          MOV      r2,#0xe10
00164a  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00164e  e083              B        |L1.5976|
                  |L1.5712|
001650  e0f6              B        |L1.6208|
                  |L1.5714|
001652  e085              B        |L1.5984|
                  |L1.5716|
                          DCD      ||area_number.26||
                  |L1.5720|
                          DCD      Ib_ips_termokompensat
                  |L1.5724|
                          DCD      0xffff7360
                  |L1.5728|
                          DCD      0x40024000
                  |L1.5732|
                          DCD      AVZ
                  |L1.5736|
                          DCD      YEAR_AVZ
                  |L1.5740|
                          DCD      MONTH_AVZ
                  |L1.5744|
                          DCD      DATE_AVZ
                  |L1.5748|
                          DCD      HOUR_AVZ
                  |L1.5752|
                          DCD      MIN_AVZ
                  |L1.5756|
                          DCD      SEC_AVZ
                  |L1.5760|
                          DCD      AVZ_TIME
                  |L1.5764|
                          DCD      sk_stat
                  |L1.5768|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5772|
                          DCD      0x40024020
                  |L1.5776|
001690  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001694  c2c5cdd2
001698  c8cbdfd6
00169c  c8df2121
0016a0  21202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016ac  20cdc5c8
0016b0  d1cfd0c0
0016b4  c2cdc020
0016b8  20202020
0016bc  00      
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016c4  c7c0c1cb
0016c8  cecac8d0
0016cc  cec2c0cd
0016d0  20      
0016d1  20202000          DCB      "   ",0
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
0016d8  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016dc  c2cdc8c2
0016e0  c0ded9c8
0016e4  c920c7  
0016e7  c0d0dfc4          DCB      192,208,223,196," ",0
0016eb  2000    
0016ed  00                DCB      0
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
                          DCD      speedChrgBlckStat
                  |L1.5876|
0016f4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016f8  cdc0cfd0
0016fc  dfc6c5cd
001700  c8df2020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001710  20c2dbd1
001714  cecacec3
001718  ce202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001728  2020d2d3
00172c  ccc1cbc5
001730  d0202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
00173c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001740  20c2cacb
001744  ded7c8d2
001748  c5202020
00174c  20202020
001750  00      
001751  00                DCB      0
001752  00                DCB      0
001753  00                DCB      0
                  |L1.5972|
                          DCD      UZ_T
                  |L1.5976|
001758  fb00f002          MUL      r0,r0,r2
00175c  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1601   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1602   		vz1_up_cnt=0L;
00175e  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5984|
;;;1603   
;;;1604   		}
;;;1605   	vz1_wrk_cnt--;
001760  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
001762  f1a00001          SUB      r0,r0,#1
001766  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1606   	vz1_up_cnt++;
001768  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
00176a  f1020201          ADD      r2,r2,#1
00176e  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1607   
;;;1608   	if(vz1_wrk_cnt==0)
001770  b940              CBNZ     r0,|L1.6020|
;;;1609   		{
;;;1610   		vz1_stat=vz1sFINE;
001772  f8889005          STRB     r9,[r8,#5]
;;;1611   		lc640_write(EE_VZ1_STAT,vz1sFINE);
001776  210f              MOVS     r1,#0xf
001778  4658              MOV      r0,r11
00177a  f7fffffe          BL       lc640_write
;;;1612   		uz_mem_hndl(0);
00177e  2000              MOVS     r0,#0
001780  f7fffffe          BL       uz_mem_hndl
                  |L1.6020|
;;;1613   		}
;;;1614   	if(sk_stat[0]==0)
001784  7828              LDRB     r0,[r5,#0]  ; sk_stat
001786  b938              CBNZ     r0,|L1.6040|
;;;1615   		{
;;;1616   		vz1_stat=vz1sERR2;
001788  f04f000c          MOV      r0,#0xc
00178c  f8880005          STRB     r0,[r8,#5]
;;;1617   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001790  4601              MOV      r1,r0
001792  4658              MOV      r0,r11
001794  f7fffffe          BL       lc640_write
                  |L1.6040|
;;;1618   		}
;;;1619   	if(sk_stat[1]==0)
001798  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179a  b938              CBNZ     r0,|L1.6060|
;;;1620   		{
;;;1621   		vz1_stat=vz1sERR3;
00179c  f04f000d          MOV      r0,#0xd
0017a0  f8880005          STRB     r0,[r8,#5]
;;;1622   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0017a4  4601              MOV      r1,r0
0017a6  4658              MOV      r0,r11
0017a8  f7fffffe          BL       lc640_write
                  |L1.6060|
;;;1623   		}
;;;1624   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017ac  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0017b0  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0017b4  fb90f0f4          SDIV     r0,r0,r4
;;;1625   		{
;;;1626   		volt_region=0;
;;;1627   		cntrl_stat=1000;
0017b8  f44f727a          MOV      r2,#0x3e8
0017bc  4288              CMP      r0,r1                 ;1624
0017be  dd16              BLE      |L1.6126|
0017c0  f9b83032          LDRSH    r3,[r8,#0x32]         ;1624  ; cntrl_stat
0017c4  2b14              CMP      r3,#0x14              ;1624
0017c6  dc12              BGT      |L1.6126|
0017c8  f898302f          LDRB     r3,[r8,#0x2f]         ;1624  ; volt_region
0017cc  2b01              CMP      r3,#1                 ;1624
0017ce  d10e              BNE      |L1.6126|
0017d0  f8b83078          LDRH     r3,[r8,#0x78]         ;1624  ; volt_region_cnt
0017d4  b95b              CBNZ     r3,|L1.6126|
0017d6  f888602f          STRB     r6,[r8,#0x2f]         ;1626
0017da  f8a82032          STRH     r2,[r8,#0x32]
;;;1628   		cntrl_stat_new=1000;
0017de  f8a82048          STRH     r2,[r8,#0x48]
;;;1629   		cntrl_stat_old=1000;
0017e2  f8a82034          STRH     r2,[r8,#0x34]
;;;1630   		volt_region_cnt=110;
0017e6  f04f036e          MOV      r3,#0x6e
0017ea  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6126|
;;;1631   		}
;;;1632   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017ee  4288              CMP      r0,r1
0017f0  da13              BGE      |L1.6170|
0017f2  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017f6  4290              CMP      r0,r2
0017f8  db0f              BLT      |L1.6170|
0017fa  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017fe  b960              CBNZ     r0,|L1.6170|
001800  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
001804  b948              CBNZ     r0,|L1.6170|
;;;1633   		{
;;;1634   		volt_region=1;
001806  f888a02f          STRB     r10,[r8,#0x2f]
;;;1635   		cntrl_stat=10;
00180a  f8a84032          STRH     r4,[r8,#0x32]
;;;1636   		cntrl_stat_new=10;
00180e  f8a84048          STRH     r4,[r8,#0x48]
;;;1637   		cntrl_stat_old=10;
001812  f8a84034          STRH     r4,[r8,#0x34]
;;;1638   		volt_region_cnt=10;
001816  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6170|
;;;1639   		}
;;;1640   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00181a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00181e  b110              CBZ      r0,|L1.6182|
;;;1641   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001820  2801              CMP      r0,#1
001822  d007              BEQ      |L1.6196|
001824  e00c              B        |L1.6208|
                  |L1.6182|
001826  2314              MOVS     r3,#0x14              ;1640
001828  2200              MOVS     r2,#0                 ;1640
00182a  2164              MOVS     r1,#0x64              ;1640
00182c  20d2              MOVS     r0,#0xd2              ;1640
00182e  f7fffffe          BL       mess_send
001832  e005              B        |L1.6208|
                  |L1.6196|
001834  2314              MOVS     r3,#0x14
001836  2201              MOVS     r2,#1
001838  2164              MOVS     r1,#0x64
00183a  20d2              MOVS     r0,#0xd2
00183c  f7fffffe          BL       mess_send
                  |L1.6208|
;;;1642   	}
;;;1643   
;;;1644   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001840  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001844  280b              CMP      r0,#0xb
001846  d120              BNE      |L1.6282|
;;;1645   	{
;;;1646   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001848  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00184c  280b              CMP      r0,#0xb
00184e  d102              BNE      |L1.6230|
001850  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001854  b908              CBNZ     r0,|L1.6234|
                  |L1.6230|
;;;1647   		{
;;;1648   		vz1_stat_cnt=10;
001856  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6234|
;;;1649   		}
;;;1650   	vz1_stat_cnt--;
00185a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00185e  f1a00001          SUB      r0,r0,#1
001862  b200              SXTH     r0,r0
001864  f8a80076          STRH     r0,[r8,#0x76]
;;;1651   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001868  280a              CMP      r0,#0xa
00186a  d001              BEQ      |L1.6256|
00186c  2809              CMP      r0,#9
00186e  d106              BNE      |L1.6270|
                  |L1.6256|
;;;1652   		{
;;;1653   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001870  a3ee              ADR      r3,|L1.7212|
001872  a2f4              ADR      r2,|L1.7236|
001874  a1f9              ADR      r1,|L1.7260|
001876  a0ff              ADR      r0,|L1.7284|
001878  9700              STR      r7,[sp,#0]
00187a  f7fffffe          BL       show_mess
                  |L1.6270|
;;;1654   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1655   					"      ВКЛЮЧЕН       ",
;;;1656   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1657   					5000);
;;;1658   		}
;;;1659   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00187e  2314              MOVS     r3,#0x14
001880  2200              MOVS     r2,#0
001882  2164              MOVS     r1,#0x64
001884  20d2              MOVS     r0,#0xd2
001886  f7fffffe          BL       mess_send
                  |L1.6282|
;;;1660   	}
;;;1661   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00188a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00188e  280c              CMP      r0,#0xc
001890  d12c              BNE      |L1.6380|
;;;1662   	{
;;;1663   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001892  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001896  280c              CMP      r0,#0xc
001898  d102              BNE      |L1.6304|
00189a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00189e  b908              CBNZ     r0,|L1.6308|
                  |L1.6304|
;;;1664   		{
;;;1665   		vz1_stat_cnt=10;
0018a0  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6308|
;;;1666   		}
;;;1667   	vz1_stat_cnt--;
0018a4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018a8  f1a00001          SUB      r0,r0,#1
0018ac  b200              SXTH     r0,r0
0018ae  f8a80076          STRH     r0,[r8,#0x76]
;;;1668   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018b2  280a              CMP      r0,#0xa
0018b4  d001              BEQ      |L1.6330|
0018b6  2809              CMP      r0,#9
0018b8  d109              BNE      |L1.6350|
                  |L1.6330|
;;;1669   		{
;;;1670   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018ba  f2af232c          ADR      r3,|L1.5776|
0018be  f2af2218          ADR      r2,|L1.5800|
0018c2  f2af2104          ADR      r1,|L1.5824|
0018c6  a0eb              ADR      r0,|L1.7284|
0018c8  9700              STR      r7,[sp,#0]
0018ca  f7fffffe          BL       show_mess
                  |L1.6350|
;;;1671   					"    ЗАБЛОКИРОВАН    ",
;;;1672   					"     НЕИСПРАВНА     ",
;;;1673   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1674   					5000);
;;;1675   		}
;;;1676   	if(sk_stat[0]==1)
0018ce  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018d0  2801              CMP      r0,#1
0018d2  d105              BNE      |L1.6368|
;;;1677   		{
;;;1678   		vz1_stat=vz1sWRK;
0018d4  f8884005          STRB     r4,[r8,#5]
;;;1679   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018d8  210a              MOVS     r1,#0xa
0018da  4658              MOV      r0,r11
0018dc  f7fffffe          BL       lc640_write
                  |L1.6368|
;;;1680   		}
;;;1681   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018e0  2314              MOVS     r3,#0x14
0018e2  2200              MOVS     r2,#0
0018e4  2164              MOVS     r1,#0x64
0018e6  20d2              MOVS     r0,#0xd2
0018e8  f7fffffe          BL       mess_send
                  |L1.6380|
;;;1682   	}
;;;1683   
;;;1684   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018ec  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018f0  280d              CMP      r0,#0xd
0018f2  d129              BNE      |L1.6472|
;;;1685   	{
;;;1686   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018f4  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018f8  280d              CMP      r0,#0xd
0018fa  d102              BNE      |L1.6402|
0018fc  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001900  b908              CBNZ     r0,|L1.6406|
                  |L1.6402|
;;;1687   		{
;;;1688   		vz1_stat_cnt=10;
001902  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6406|
;;;1689   		}
;;;1690   	vz1_stat_cnt--;
001906  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00190a  f1a00001          SUB      r0,r0,#1
00190e  b200              SXTH     r0,r0
001910  f8a80076          STRH     r0,[r8,#0x76]
;;;1691   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001914  280a              CMP      r0,#0xa
001916  d001              BEQ      |L1.6428|
001918  2809              CMP      r0,#9
00191a  d106              BNE      |L1.6442|
                  |L1.6428|
;;;1692   		{
;;;1693   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
00191c  a3db              ADR      r3,|L1.7308|
00191e  a2e1              ADR      r2,|L1.7332|
001920  a1e6              ADR      r1,|L1.7356|
001922  a0d4              ADR      r0,|L1.7284|
001924  9700              STR      r7,[sp,#0]
001926  f7fffffe          BL       show_mess
                  |L1.6442|
;;;1694   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1695   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1696   					"*   ТУМБЛЕРА!!!     ",
;;;1697   					5000);
;;;1698   		}
;;;1699   	if(sk_stat[1]==1)
00192a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00192c  2801              CMP      r0,#1
00192e  d105              BNE      |L1.6460|
;;;1700   		{
;;;1701   		vz1_stat=vz1sWRK;
001930  f8884005          STRB     r4,[r8,#5]
;;;1702   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001934  210a              MOVS     r1,#0xa
001936  4658              MOV      r0,r11
001938  f7fffffe          BL       lc640_write
                  |L1.6460|
;;;1703   		}
;;;1704   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00193c  2314              MOVS     r3,#0x14
00193e  2200              MOVS     r2,#0
001940  2164              MOVS     r1,#0x64
001942  20d2              MOVS     r0,#0xd2
001944  f7fffffe          BL       mess_send
                  |L1.6472|
;;;1705   	}
;;;1706   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001948  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00194c  280e              CMP      r0,#0xe
00194e  d12d              BNE      |L1.6572|
;;;1707   	{
;;;1708   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001950  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001954  280e              CMP      r0,#0xe
001956  d102              BNE      |L1.6494|
001958  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00195c  b908              CBNZ     r0,|L1.6498|
                  |L1.6494|
;;;1709   		{
;;;1710   		vz1_stat_cnt=10;
00195e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6498|
;;;1711   		}
;;;1712   	vz1_stat_cnt--;
001962  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001966  f1a00001          SUB      r0,r0,#1
00196a  b200              SXTH     r0,r0
00196c  f8a80076          STRH     r0,[r8,#0x76]
;;;1713   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001970  280a              CMP      r0,#0xa
001972  d001              BEQ      |L1.6520|
001974  2809              CMP      r0,#9
001976  d109              BNE      |L1.6540|
                  |L1.6520|
;;;1714   		{
;;;1715   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001978  f2af2388          ADR      r3,|L1.5876|
00197c  f2af2274          ADR      r2,|L1.5900|
001980  f2af2160          ADR      r1,|L1.5924|
001984  a0d3              ADR      r0,|L1.7380|
001986  9700              STR      r7,[sp,#0]
001988  f7fffffe          BL       show_mess
                  |L1.6540|
;;;1716   					"      ТУМБЛЕР       ",
;;;1717   					"     ВЫСОКОГО       ",
;;;1718   					"    НАПРЯЖЕНИЯ      ",
;;;1719   					5000);
;;;1720   		}
;;;1721   	if(sk_stat[1]==0)
00198c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00198e  b938              CBNZ     r0,|L1.6560|
;;;1722   		{
;;;1723   		vz1_stat=vz1sOFF;
001990  f8886005          STRB     r6,[r8,#5]
;;;1724   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001994  2100              MOVS     r1,#0
001996  4658              MOV      r0,r11
001998  f7fffffe          BL       lc640_write
;;;1725   		vz_stop();
00199c  f7fffffe          BL       vz_stop
                  |L1.6560|
;;;1726   
;;;1727   		}
;;;1728   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0019a0  2314              MOVS     r3,#0x14
0019a2  2201              MOVS     r2,#1
0019a4  2164              MOVS     r1,#0x64
0019a6  20d2              MOVS     r0,#0xd2
0019a8  f7fffffe          BL       mess_send
                  |L1.6572|
;;;1729   	}
;;;1730   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019ac  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1731   	{
;;;1732   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1733   		{
;;;1734   		vz1_stat_cnt=10;
;;;1735   		}
;;;1736   	vz1_stat_cnt--;
;;;1737   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1738   		{
;;;1739   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019b0  f64037b8          MOV      r7,#0xbb8
0019b4  280f              CMP      r0,#0xf               ;1730
0019b6  d138              BNE      |L1.6698|
0019b8  f8980006          LDRB     r0,[r8,#6]            ;1732  ; vz1_stat_old
0019bc  280f              CMP      r0,#0xf               ;1732
0019be  d102              BNE      |L1.6598|
0019c0  f8b80076          LDRH     r0,[r8,#0x76]         ;1732  ; vz1_stat_cnt
0019c4  b908              CBNZ     r0,|L1.6602|
                  |L1.6598|
0019c6  f8a84076          STRH     r4,[r8,#0x76]         ;1734
                  |L1.6602|
0019ca  f8b80076          LDRH     r0,[r8,#0x76]         ;1736  ; vz1_stat_cnt
0019ce  f1a00001          SUB      r0,r0,#1              ;1736
0019d2  b200              SXTH     r0,r0                 ;1736
0019d4  f8a80076          STRH     r0,[r8,#0x76]         ;1736
0019d8  280a              CMP      r0,#0xa               ;1737
0019da  d001              BEQ      |L1.6624|
0019dc  2809              CMP      r0,#9                 ;1737
0019de  d106              BNE      |L1.6638|
                  |L1.6624|
0019e0  a3c2              ADR      r3,|L1.7404|
0019e2  a2c8              ADR      r2,|L1.7428|
0019e4  a1cd              ADR      r1,|L1.7452|
0019e6  a0d3              ADR      r0,|L1.7476|
0019e8  9700              STR      r7,[sp,#0]
0019ea  f7fffffe          BL       show_mess
                  |L1.6638|
;;;1740   					"       ЗАРЯД        ",
;;;1741   					"      УСПЕШНО       ",
;;;1742   					"     ЗАВЕРШЕН       ",
;;;1743   					3000);
;;;1744   		}
;;;1745   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019ee  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019f2  2806              CMP      r0,#6
0019f4  d001              BEQ      |L1.6650|
0019f6  2805              CMP      r0,#5
0019f8  d109              BNE      |L1.6670|
                  |L1.6650|
;;;1746   		{
;;;1747   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019fa  f2af3308          ADR      r3,|L1.5876|
0019fe  f2af22f4          ADR      r2,|L1.5900|
001a02  f2af21e0          ADR      r1,|L1.5924|
001a06  a0d1              ADR      r0,|L1.7500|
001a08  9700              STR      r7,[sp,#0]
001a0a  f7fffffe          BL       show_mess
                  |L1.6670|
;;;1748   					"      ТУМБЛЕР       ",
;;;1749   					"     ВЫСОКОГО       ",
;;;1750   					"    НАПРЯЖЕНИЯ      ",
;;;1751   					3000);
;;;1752   		}
;;;1753   	if(sk_stat[1]==0)
001a0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a10  b928              CBNZ     r0,|L1.6686|
;;;1754   		{
;;;1755   		vz1_stat=vz1sOFF;
001a12  f8886005          STRB     r6,[r8,#5]
;;;1756   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a16  2100              MOVS     r1,#0
001a18  4658              MOV      r0,r11
001a1a  f7fffffe          BL       lc640_write
                  |L1.6686|
;;;1757   		}
;;;1758   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a1e  2314              MOVS     r3,#0x14
001a20  2200              MOVS     r2,#0
001a22  2164              MOVS     r1,#0x64
001a24  20d2              MOVS     r0,#0xd2
001a26  f7fffffe          BL       mess_send
                  |L1.6698|
;;;1759   	}
;;;1760   
;;;1761   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a2a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a2e  2810              CMP      r0,#0x10
001a30  d138              BNE      |L1.6820|
;;;1762   	{
;;;1763   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a32  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a36  2810              CMP      r0,#0x10
001a38  d102              BNE      |L1.6720|
001a3a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a3e  b908              CBNZ     r0,|L1.6724|
                  |L1.6720|
;;;1764   		{
;;;1765   		vz1_stat_cnt=10;
001a40  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6724|
;;;1766   		}
;;;1767   	vz1_stat_cnt--;
001a44  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a48  f1a00001          SUB      r0,r0,#1
001a4c  b200              SXTH     r0,r0
001a4e  f8a80076          STRH     r0,[r8,#0x76]
;;;1768   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a52  280a              CMP      r0,#0xa
001a54  d001              BEQ      |L1.6746|
001a56  2809              CMP      r0,#9
001a58  d106              BNE      |L1.6760|
                  |L1.6746|
;;;1769   		{
;;;1770   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a5a  a3c2              ADR      r3,|L1.7524|
001a5c  a2c7              ADR      r2,|L1.7548|
001a5e  a1af              ADR      r1,|L1.7452|
001a60  a0b4              ADR      r0,|L1.7476|
001a62  9700              STR      r7,[sp,#0]
001a64  f7fffffe          BL       show_mess
                  |L1.6760|
;;;1771   					"       ЗАРЯД        ",
;;;1772   					"     ПРЕКРАЩЕН      ",
;;;1773   					"                    ",
;;;1774   					3000);
;;;1775   		}
;;;1776   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a68  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a6c  2806              CMP      r0,#6
001a6e  d001              BEQ      |L1.6772|
001a70  2805              CMP      r0,#5
001a72  d109              BNE      |L1.6792|
                  |L1.6772|
;;;1777   		{
;;;1778   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a74  f2af3384          ADR      r3,|L1.5876|
001a78  f2af3270          ADR      r2,|L1.5900|
001a7c  f2af315c          ADR      r1,|L1.5924|
001a80  a0b2              ADR      r0,|L1.7500|
001a82  9700              STR      r7,[sp,#0]
001a84  f7fffffe          BL       show_mess
                  |L1.6792|
;;;1779   					"      ТУМБЛЕР       ",
;;;1780   					"     ВЫСОКОГО       ",
;;;1781   					"    НАПРЯЖЕНИЯ      ",
;;;1782   					3000);
;;;1783   		}
;;;1784   	if(sk_stat[1]==0)
001a88  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a8a  b928              CBNZ     r0,|L1.6808|
;;;1785   		{
;;;1786   		vz1_stat=vz1sOFF;
001a8c  f8886005          STRB     r6,[r8,#5]
;;;1787   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a90  2100              MOVS     r1,#0
001a92  4658              MOV      r0,r11
001a94  f7fffffe          BL       lc640_write
                  |L1.6808|
;;;1788   		}
;;;1789   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a98  2314              MOVS     r3,#0x14
001a9a  2200              MOVS     r2,#0
001a9c  2164              MOVS     r1,#0x64
001a9e  20d2              MOVS     r0,#0xd2
001aa0  f7fffffe          BL       mess_send
                  |L1.6820|
;;;1790   	}
;;;1791   
;;;1792   vz1_stat_old=vz1_stat;
001aa4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001aa8  f8880006          STRB     r0,[r8,#6]
;;;1793   
;;;1794   
;;;1795   
;;;1796   }
001aac  e8bd8ff8          POP      {r3-r11,pc}
;;;1797   
                          ENDP

                  vz1_start PROC
;;;1799   //старт уравнительног заряда
;;;1800   char vz1_start(char hour)
001ab0  b510              PUSH     {r4,lr}
;;;1801   {          
;;;1802   char out;
;;;1803   out=0;
001ab2  f04f0000          MOV      r0,#0
;;;1804   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001ab6  49b7              LDR      r1,|L1.7572|
001ab8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001abc  2a00              CMP      r2,#0
001abe  d110              BNE      |L1.6882|
001ac0  4ab5              LDR      r2,|L1.7576|
001ac2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001ac4  2a01              CMP      r2,#1
001ac6  d00c              BEQ      |L1.6882|
001ac8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001aca  2a00              CMP      r2,#0
001acc  d109              BNE      |L1.6882|
;;;1805   	{
;;;1806   	if(vz1_stat==vz1sOFF)
;;;1807   		{
;;;1808   		vz1_stat=vz1sSTEP1;
001ace  f04f0001          MOV      r0,#1
001ad2  7148              STRB     r0,[r1,#5]
;;;1809   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001ad4  4601              MOV      r1,r0
001ad6  f44f70c9          MOV      r0,#0x192
001ada  f7fffffe          BL       lc640_write
;;;1810   		out=1;
001ade  f04f0001          MOV      r0,#1
                  |L1.6882|
;;;1811   		
;;;1812   		}
;;;1813   /*	spc_stat=spcVZ;
;;;1814   	__ee_spc_stat=spcVZ; 
;;;1815   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1816   	vz_cnt_h=hour;
;;;1817   	__ee_vz_cnt=hour*60;
;;;1818   	if(hour==0)__ee_vz_cnt=30;
;;;1819   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1820   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1821   	vz_cnt_h_=0;
;;;1822   	vz_cnt_s=0;
;;;1823   	vz_cnt_s_=0;
;;;1824   	
;;;1825   		*/
;;;1826   	}
;;;1827   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1828   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1829   //plazma=out;	
;;;1830   return out;
;;;1831   }
001ae2  bd10              POP      {r4,pc}
;;;1832   
                          ENDP

                  vz1_stop PROC
;;;1834   //стоп уравнительног заряда
;;;1835   void vz1_stop(void)
001ae4  48ab              LDR      r0,|L1.7572|
;;;1836   {
;;;1837   if(vz1_stat!=vz1sOFF)
001ae6  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ae8  2900              CMP      r1,#0
001aea  d006              BEQ      |L1.6906|
;;;1838   	{
;;;1839   	vz1_stat=vz1sSTOP;
001aec  f04f0110          MOV      r1,#0x10
001af0  7141              STRB     r1,[r0,#5]
;;;1840   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001af2  f44f70c9          MOV      r0,#0x192
001af6  f7ffbffe          B.W      lc640_write
                  |L1.6906|
;;;1841   	}
;;;1842   }
001afa  4770              BX       lr
;;;1843   
                          ENDP

                  vz2_drv PROC
;;;1845   //драйвер формовочного заряда
;;;1846   void vz2_drv(void)
001afc  e92d4ff8          PUSH     {r3-r11,lr}
;;;1847   {
;;;1848   
;;;1849   if(vz2_stat==vz2sSTEP1)
001b00  4ea4              LDR      r6,|L1.7572|
;;;1850   	{
;;;1851   	if(vz2_stat_old!=vz2_stat)
;;;1852   		{
;;;1853   		vz2_stat_cnt=5;
;;;1854   		}
;;;1855   	if(vz2_stat_cnt)
;;;1856   		{
;;;1857   		vz2_stat_cnt--;
;;;1858   		if(vz2_stat_cnt==0)
;;;1859   			{
;;;1860   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1861   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1862   			}
;;;1863   		}
;;;1864   	if(sk_stat[0]==1)
001b02  4da6              LDR      r5,|L1.7580|
001b04  79f0              LDRB     r0,[r6,#7]            ;1849  ; vz2_stat
001b06  2801              CMP      r0,#1                 ;1849
001b08  d138              BNE      |L1.7036|
001b0a  7a30              LDRB     r0,[r6,#8]            ;1851  ; vz2_stat_old
001b0c  2801              CMP      r0,#1                 ;1851
001b0e  d003              BEQ      |L1.6936|
001b10  f04f0005          MOV      r0,#5                 ;1853
001b14  f8a6007a          STRH     r0,[r6,#0x7a]         ;1853
                  |L1.6936|
001b18  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1855  ; vz2_stat_cnt
001b1c  b168              CBZ      r0,|L1.6970|
001b1e  f1a00001          SUB      r0,r0,#1              ;1857
001b22  b200              SXTH     r0,r0                 ;1857
001b24  f8a6007a          STRH     r0,[r6,#0x7a]         ;1857
001b28  b938              CBNZ     r0,|L1.6970|
001b2a  f04f000c          MOV      r0,#0xc               ;1860
001b2e  71f0              STRB     r0,[r6,#7]            ;1860
001b30  4601              MOV      r1,r0                 ;1861
001b32  f44f70ca          MOV      r0,#0x194             ;1861
001b36  f7fffffe          BL       lc640_write
                  |L1.6970|
001b3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b3c  2801              CMP      r0,#1
001b3e  d117              BNE      |L1.7024|
;;;1865   		{
;;;1866   		vz2_stat=vz2sSTEP2;
001b40  f04f0002          MOV      r0,#2
001b44  71f0              STRB     r0,[r6,#7]
;;;1867   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b46  4601              MOV      r1,r0
001b48  f44f70ca          MOV      r0,#0x194
001b4c  f7fffffe          BL       lc640_write
;;;1868   		tree_up(iVZ2_STEP2_2,1,0,0);
001b50  2300              MOVS     r3,#0
001b52  461a              MOV      r2,r3
001b54  2101              MOVS     r1,#1
001b56  20ef              MOVS     r0,#0xef
001b58  f7fffffe          BL       tree_up
;;;1869   		tree_up(iVZ2_STEP2_1,0,0,0);
001b5c  2300              MOVS     r3,#0
001b5e  461a              MOV      r2,r3
001b60  4619              MOV      r1,r3
001b62  20ee              MOVS     r0,#0xee
001b64  f7fffffe          BL       tree_up
;;;1870   		ret(1200);
001b68  f44f6096          MOV      r0,#0x4b0
001b6c  f7fffffe          BL       ||ret||
                  |L1.7024|
;;;1871   		}
;;;1872   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b70  2314              MOVS     r3,#0x14
001b72  2200              MOVS     r2,#0
001b74  2164              MOVS     r1,#0x64
001b76  20d2              MOVS     r0,#0xd2
001b78  f7fffffe          BL       mess_send
                  |L1.7036|
;;;1873   	}
;;;1874   
;;;1875   if(vz2_stat==vz2sSTEP2)
001b7c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b7e  2802              CMP      r0,#2
001b80  d119              BNE      |L1.7094|
;;;1876   	{
;;;1877   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b82  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b84  2802              CMP      r0,#2
001b86  d102              BNE      |L1.7054|
001b88  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b8c  b918              CBNZ     r0,|L1.7062|
                  |L1.7054|
;;;1878   		{
;;;1879   		vz2_stat_cnt=15;
001b8e  f04f000f          MOV      r0,#0xf
001b92  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7062|
;;;1880   		}
;;;1881   	vz2_stat_cnt--;
001b96  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b9a  f1a00001          SUB      r0,r0,#1
001b9e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1882   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ba2  f04f0314          MOV      r3,#0x14
001ba6  f04f0200          MOV      r2,#0
001baa  f04f0164          MOV      r1,#0x64
001bae  f04f00d2          MOV      r0,#0xd2
001bb2  f7fffffe          BL       mess_send
                  |L1.7094|
;;;1883   	}
;;;1884   
;;;1885   if(vz2_stat==vz2sSTEP3)
001bb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1886   	{
;;;1887   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1888   		{
;;;1889   		vz2_stat_cnt=10;
001bb8  240a              MOVS     r4,#0xa
001bba  2700              MOVS     r7,#0
;;;1890   		cntrl_stat=0;
;;;1891   		cntrl_stat_new=0;
;;;1892   		cntrl_stat_old=0;
;;;1893   		}
;;;1894   	vz2_stat_cnt--;
;;;1895   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1896   		{
;;;1897   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bbc  f2413888          MOV      r8,#0x1388
001bc0  2803              CMP      r0,#3                 ;1885
001bc2  d131              BNE      |L1.7208|
001bc4  7a30              LDRB     r0,[r6,#8]            ;1887  ; vz2_stat_old
001bc6  2803              CMP      r0,#3                 ;1887
001bc8  d102              BNE      |L1.7120|
001bca  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1887  ; vz2_stat_cnt
001bce  b928              CBNZ     r0,|L1.7132|
                  |L1.7120|
001bd0  f8a6407a          STRH     r4,[r6,#0x7a]         ;1889
001bd4  8677              STRH     r7,[r6,#0x32]         ;1890
001bd6  f8a67048          STRH     r7,[r6,#0x48]         ;1891
001bda  86b7              STRH     r7,[r6,#0x34]         ;1892
                  |L1.7132|
001bdc  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1894  ; vz2_stat_cnt
001be0  f1a00001          SUB      r0,r0,#1              ;1894
001be4  b200              SXTH     r0,r0                 ;1894
001be6  f8a6007a          STRH     r0,[r6,#0x7a]         ;1894
001bea  280a              CMP      r0,#0xa               ;1895
001bec  d001              BEQ      |L1.7154|
001bee  2809              CMP      r0,#9                 ;1895
001bf0  d10b              BNE      |L1.7178|
                  |L1.7154|
001bf2  f2af5300          ADR      r3,|L1.5876|
001bf6  f2af42ec          ADR      r2,|L1.5900|
001bfa  f2af41d8          ADR      r1,|L1.5924|
001bfe  f2af40c4          ADR      r0,|L1.5948|
001c02  f8cd8000          STR      r8,[sp,#0]
001c06  f7fffffe          BL       show_mess
                  |L1.7178|
;;;1898   					"      ТУМБЛЕР       ",
;;;1899   					"     ВЫСОКОГО       ",
;;;1900   					"    НАПРЯЖЕНИЯ      ",
;;;1901   					5000);
;;;1902   		}
;;;1903   	if(sk_stat[1]==1)
001c0a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c0c  2801              CMP      r0,#1
001c0e  d10c              BNE      |L1.7210|
;;;1904   		{
;;;1905   		vz2_stat=vz2sWRK1;
001c10  71f4              STRB     r4,[r6,#7]
;;;1906   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001c12  210a              MOVS     r1,#0xa
001c14  f44f70ca          MOV      r0,#0x194
001c18  f7fffffe          BL       lc640_write
;;;1907   		volt_region=1;
001c1c  f04f0001          MOV      r0,#1
001c20  f886002f          STRB     r0,[r6,#0x2f]
;;;1908   		cntrl_stat=0;
001c24  8677              STRH     r7,[r6,#0x32]
;;;1909   		cntrl_stat_new=0;
001c26  e0bb              B        |L1.7584|
                  |L1.7208|
001c28  e0c3              B        |L1.7602|
                  |L1.7210|
001c2a  e0bc              B        |L1.7590|
                  |L1.7212|
001c2c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c30  c720c2c5
001c34  cdd2c8cb
001c38  dfd6c8  
001c3b  c8212120          DCB      200,"!!  ",0
001c3f  2000    
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c48  2020c2ca
001c4c  cbded7c5
001c50  cd202020
001c54  20202020
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c60  c520ccce
001c64  c6c5d220
001c68  c1dbd2dc
001c6c  20202020          DCB      "    ",0
001c70  00      
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c78  cdc8d2c5
001c7c  cbdccddb
001c80  c920c7  
001c83  c0d0dfc4          DCB      192,208,223,196," ",0
001c87  2000    
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c90  d2d3ccc1
001c94  cbc5d0c0
001c98  21212120
001c9c  20202020
001ca0  00      
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001ca8  d1cbc520
001cac  c2cacbde
001cb0  d7c5cd  
001cb3  c8df2020          DCB      200,223,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001cc0  c4c5d220
001cc4  cfd0cec4
001cc8  cecbc6  
001ccb  c5cd2020          DCB      197,205,"   ",0
001ccf  2000    
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cd8  20c2dbca
001cdc  cbded7c8
001ce0  d2c52020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cf0  20c7c0c2
001cf4  c5d0d8c5
001cf8  cd202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d08  2020d3d1
001d0c  cfc5d8cd
001d10  ce202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d20  202020c7
001d24  c0d0dfc4
001d28  20202020
001d2c  20202020
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d38  d0c0c2cd
001d3c  c8d2c5cb
001d40  dccddbc9
001d44  20202020          DCB      "    ",0
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d50  20c2dbca
001d54  cbded7c8
001d58  d2c52020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "                    ",0
001d68  20202020
001d6c  20202020
001d70  20202020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
001d7c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d80  20cfd0c5
001d84  cad0c0d9
001d88  c5cd2020
001d8c  20202020
001d90  00      
001d91  00                DCB      0
001d92  00                DCB      0
001d93  00                DCB      0
                  |L1.7572|
                          DCD      ||area_number.26||
                  |L1.7576|
                          DCD      speedChrgBlckStat
                  |L1.7580|
                          DCD      sk_stat
                  |L1.7584|
001da0  f8a67048          STRH     r7,[r6,#0x48]
;;;1910   		cntrl_stat_old=0;
001da4  86b7              STRH     r7,[r6,#0x34]
                  |L1.7590|
;;;1911   		}
;;;1912   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001da6  2314              MOVS     r3,#0x14
001da8  2200              MOVS     r2,#0
001daa  2164              MOVS     r1,#0x64
001dac  20d2              MOVS     r0,#0xd2
001dae  f7fffffe          BL       mess_send
                  |L1.7602|
;;;1913   	}
;;;1914   
;;;1915   if(vz2_stat==vz2sWRK1)
001db2  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1916   	{
;;;1917   
;;;1918   	if(vz2_stat_old!=vz2_stat)
;;;1919   		{
;;;1920   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001db4  f8df940c          LDR      r9,|L1.8644|
;;;1921   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1922   		vz2_up_cnt=0L;
;;;1923   
;;;1924   		}
;;;1925   	vz2_wrk_cnt--;
;;;1926   	vz2_up_cnt++;
;;;1927   
;;;1928   	if(vz2_wrk_cnt==0)
;;;1929   		{
;;;1930   		vz2_stat=vz2sWRK2;
;;;1931   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1932   		}
;;;1933   	if(sk_stat[0]==0)
;;;1934   		{
;;;1935   		vz2_stat=vz2sERR2;
;;;1936   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1937   		}
;;;1938   	if(sk_stat[1]==0)
;;;1939   		{
;;;1940   		vz2_stat=vz2sERR3;
;;;1941   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1942   		}
;;;1943   	//if(abs(out_U-FZ_U1)<10)
;;;1944   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1945   		{
;;;1946   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1947   			{
;;;1948   			if(vz2_stat_ph2_cnt)
;;;1949   				{
;;;1950   				vz2_stat_ph2_cnt--;
;;;1951   				if(vz2_stat_ph2_cnt==0)
;;;1952   					{
;;;1953   					vz2_stat=vz2sWRK2;
;;;1954   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1955   					}
;;;1956   				}
;;;1957   			}
;;;1958   		else
;;;1959   			{
;;;1960   			vz2_stat_ph2_cnt=60;
;;;1961   			}
;;;1962   		}
;;;1963   	else
;;;1964   		{
;;;1965   		vz2_stat_ph2_cnt=60;
;;;1966   		}
;;;1967   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1968   		{
;;;1969   		volt_region=0;
;;;1970   		cntrl_stat=1000;
001db8  f44f7b7a          MOV      r11,#0x3e8
001dbc  f04f0a0b          MOV      r10,#0xb              ;1930
001dc0  280a              CMP      r0,#0xa               ;1915
001dc2  d17d              BNE      |L1.7872|
001dc4  7a30              LDRB     r0,[r6,#8]            ;1918  ; vz2_stat_old
001dc6  280a              CMP      r0,#0xa               ;1918
001dc8  d00a              BEQ      |L1.7648|
001dca  48ff              LDR      r0,|L1.8648|
001dcc  f44f6161          MOV      r1,#0xe10             ;1920
001dd0  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; FZ_T1
001dd4  fb00f001          MUL      r0,r0,r1              ;1920
001dd8  f8c90048          STR      r0,[r9,#0x48]         ;1920  ; vz2_wrk_cnt
001ddc  f8c9704c          STR      r7,[r9,#0x4c]         ;1922  ; vz2_up_cnt
                  |L1.7648|
001de0  f8d90048          LDR      r0,[r9,#0x48]         ;1925  ; vz2_wrk_cnt
001de4  f1a00001          SUB      r0,r0,#1              ;1925
001de8  f8c90048          STR      r0,[r9,#0x48]         ;1925  ; vz2_wrk_cnt
001dec  f8d9104c          LDR      r1,[r9,#0x4c]         ;1926  ; vz2_up_cnt
001df0  f1010101          ADD      r1,r1,#1              ;1926
001df4  f8c9104c          STR      r1,[r9,#0x4c]         ;1926  ; vz2_up_cnt
001df8  b930              CBNZ     r0,|L1.7688|
001dfa  f886a007          STRB     r10,[r6,#7]           ;1930
001dfe  210b              MOVS     r1,#0xb               ;1931
001e00  f44f70ca          MOV      r0,#0x194             ;1931
001e04  f7fffffe          BL       lc640_write
                  |L1.7688|
001e08  7828              LDRB     r0,[r5,#0]            ;1933  ; sk_stat
001e0a  b938              CBNZ     r0,|L1.7708|
001e0c  f04f000d          MOV      r0,#0xd               ;1935
001e10  71f0              STRB     r0,[r6,#7]            ;1935
001e12  4601              MOV      r1,r0                 ;1936
001e14  f44f70ca          MOV      r0,#0x194             ;1936
001e18  f7fffffe          BL       lc640_write
                  |L1.7708|
001e1c  7868              LDRB     r0,[r5,#1]            ;1938  ; sk_stat
001e1e  b938              CBNZ     r0,|L1.7728|
001e20  f04f000e          MOV      r0,#0xe               ;1940
001e24  71f0              STRB     r0,[r6,#7]            ;1940
001e26  4601              MOV      r1,r0                 ;1941
001e28  f44f70ca          MOV      r0,#0x194             ;1941
001e2c  f7fffffe          BL       lc640_write
                  |L1.7728|
001e30  48e6              LDR      r0,|L1.8652|
001e32  223c              MOVS     r2,#0x3c              ;1960
001e34  f9b01000          LDRSH    r1,[r0,#0]            ;1944  ; out_U
001e38  48e5              LDR      r0,|L1.8656|
001e3a  f9b00000          LDRSH    r0,[r0,#0]            ;1944  ; FZ_U1
001e3e  f100031e          ADD      r3,r0,#0x1e           ;1944
001e42  4299              CMP      r1,r3                 ;1944
001e44  da20              BGE      |L1.7816|
001e46  380a              SUBS     r0,r0,#0xa            ;1944
001e48  4281              CMP      r1,r0                 ;1944
001e4a  dd1d              BLE      |L1.7816|
001e4c  48e1              LDR      r0,|L1.8660|
001e4e  49e2              LDR      r1,|L1.8664|
001e50  f9b00000          LDRSH    r0,[r0,#0]            ;1946  ; Ib_ips_termokompensat
001e54  f9b11000          LDRSH    r1,[r1,#0]            ;1946  ; FZ_ISW12
001e58  fb90f0f4          SDIV     r0,r0,r4              ;1946
001e5c  4288              CMP      r0,r1                 ;1946
001e5e  da10              BGE      |L1.7810|
001e60  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1948  ; vz2_stat_ph2_cnt
001e64  b190              CBZ      r0,|L1.7820|
001e66  f1a00001          SUB      r0,r0,#1              ;1950
001e6a  b200              SXTH     r0,r0                 ;1950
001e6c  f8a6007c          STRH     r0,[r6,#0x7c]         ;1950
001e70  b960              CBNZ     r0,|L1.7820|
001e72  f886a007          STRB     r10,[r6,#7]           ;1953
001e76  210b              MOVS     r1,#0xb               ;1954
001e78  f44f70ca          MOV      r0,#0x194             ;1954
001e7c  f7fffffe          BL       lc640_write
001e80  e004              B        |L1.7820|
                  |L1.7810|
001e82  f8a6207c          STRH     r2,[r6,#0x7c]         ;1960
001e86  e001              B        |L1.7820|
                  |L1.7816|
001e88  f8a6207c          STRH     r2,[r6,#0x7c]         ;1965
                  |L1.7820|
001e8c  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1967  ; Ibmax
001e90  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1967  ; IZMAX_
001e94  fb90f0f4          SDIV     r0,r0,r4              ;1967
001e98  4288              CMP      r0,r1                 ;1967
001e9a  dd18              BLE      |L1.7886|
001e9c  f9b62032          LDRSH    r2,[r6,#0x32]         ;1967  ; cntrl_stat
001ea0  2a14              CMP      r2,#0x14              ;1967
001ea2  dc14              BGT      |L1.7886|
001ea4  f896202f          LDRB     r2,[r6,#0x2f]         ;1967  ; volt_region
001ea8  2a01              CMP      r2,#1                 ;1967
001eaa  d110              BNE      |L1.7886|
001eac  f8b62078          LDRH     r2,[r6,#0x78]         ;1967  ; volt_region_cnt
001eb0  b96a              CBNZ     r2,|L1.7886|
001eb2  f886702f          STRB     r7,[r6,#0x2f]         ;1969
001eb6  f8a6b032          STRH     r11,[r6,#0x32]
;;;1971   		cntrl_stat_new=1000;
001eba  f8a6b048          STRH     r11,[r6,#0x48]
;;;1972   		cntrl_stat_old=1000;
001ebe  e000              B        |L1.7874|
                  |L1.7872|
001ec0  e02e              B        |L1.7968|
                  |L1.7874|
001ec2  f8a6b034          STRH     r11,[r6,#0x34]
;;;1973   		volt_region_cnt=110;
001ec6  f04f026e          MOV      r2,#0x6e
001eca  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7886|
;;;1974   		}
;;;1975   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001ece  4288              CMP      r0,r1
001ed0  da13              BGE      |L1.7930|
001ed2  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ed6  4558              CMP      r0,r11
001ed8  db0f              BLT      |L1.7930|
001eda  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ede  b960              CBNZ     r0,|L1.7930|
001ee0  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001ee4  b948              CBNZ     r0,|L1.7930|
;;;1976   		{
;;;1977   		volt_region=1;
001ee6  f04f0001          MOV      r0,#1
001eea  f886002f          STRB     r0,[r6,#0x2f]
;;;1978   		cntrl_stat=10;
001eee  8674              STRH     r4,[r6,#0x32]
;;;1979   		cntrl_stat_new=10;
001ef0  f8a64048          STRH     r4,[r6,#0x48]
;;;1980   		cntrl_stat_old=10;
001ef4  86b4              STRH     r4,[r6,#0x34]
;;;1981   		volt_region_cnt=10;
001ef6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7930|
;;;1982   		}
;;;1983   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001efa  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001efe  b110              CBZ      r0,|L1.7942|
;;;1984   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f00  2801              CMP      r0,#1
001f02  d007              BEQ      |L1.7956|
001f04  e00c              B        |L1.7968|
                  |L1.7942|
001f06  2314              MOVS     r3,#0x14              ;1983
001f08  2200              MOVS     r2,#0                 ;1983
001f0a  2164              MOVS     r1,#0x64              ;1983
001f0c  20d2              MOVS     r0,#0xd2              ;1983
001f0e  f7fffffe          BL       mess_send
001f12  e005              B        |L1.7968|
                  |L1.7956|
001f14  2314              MOVS     r3,#0x14
001f16  2201              MOVS     r2,#1
001f18  2164              MOVS     r1,#0x64
001f1a  20d2              MOVS     r0,#0xd2
001f1c  f7fffffe          BL       mess_send
                  |L1.7968|
;;;1985   	}
;;;1986   
;;;1987   if(vz2_stat==vz2sWRK2)
001f20  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f22  280b              CMP      r0,#0xb
001f24  d17f              BNE      |L1.8230|
;;;1988   	{
;;;1989   	if(vz2_stat_old!=vz2_stat)
001f26  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f28  280b              CMP      r0,#0xb
001f2a  d008              BEQ      |L1.7998|
;;;1990   		{
;;;1991   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f2c  48ab              LDR      r0,|L1.8668|
001f2e  f44f6161          MOV      r1,#0xe10
001f32  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f36  fb00f001          MUL      r0,r0,r1
001f3a  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7998|
;;;1992   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1993   		//vz2_up_cnt=0L;
;;;1994   		}
;;;1995   	vz2_wrk_cnt--;
001f3e  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f42  f1a00001          SUB      r0,r0,#1
001f46  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1996   	vz2_up_cnt++;
001f4a  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f4e  f1010101          ADD      r1,r1,#1
001f52  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1997   
;;;1998   	if(vz2_wrk_cnt==0)
001f56  b950              CBNZ     r0,|L1.8046|
;;;1999   		{
;;;2000   		vz2_stat=vz2sFINE;
001f58  f04f0012          MOV      r0,#0x12
001f5c  71f0              STRB     r0,[r6,#7]
;;;2001   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f5e  4601              MOV      r1,r0
001f60  f44f70ca          MOV      r0,#0x194
001f64  f7fffffe          BL       lc640_write
;;;2002   		fz_mem_hndl(0);
001f68  2000              MOVS     r0,#0
001f6a  f7fffffe          BL       fz_mem_hndl
                  |L1.8046|
;;;2003   		}
;;;2004   	if(sk_stat[0]==0)
001f6e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f70  b938              CBNZ     r0,|L1.8066|
;;;2005   		{
;;;2006   		vz2_stat=vz2sERR5;
001f72  f04f0010          MOV      r0,#0x10
001f76  71f0              STRB     r0,[r6,#7]
;;;2007   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f78  4601              MOV      r1,r0
001f7a  f44f70ca          MOV      r0,#0x194
001f7e  f7fffffe          BL       lc640_write
                  |L1.8066|
;;;2008   		}
;;;2009   	if(sk_stat[1]==0)
001f82  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f84  b938              CBNZ     r0,|L1.8086|
;;;2010   		{
;;;2011   		vz2_stat=vz2sERR6;
001f86  f04f0011          MOV      r0,#0x11
001f8a  71f0              STRB     r0,[r6,#7]
;;;2012   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f8c  4601              MOV      r1,r0
001f8e  f44f70ca          MOV      r0,#0x194
001f92  f7fffffe          BL       lc640_write
                  |L1.8086|
;;;2013   		}
;;;2014   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f96  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f9a  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f9e  fb90f0f4          SDIV     r0,r0,r4
001fa2  4288              CMP      r0,r1
001fa4  dd16              BLE      |L1.8148|
001fa6  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001faa  2a14              CMP      r2,#0x14
001fac  dc12              BGT      |L1.8148|
001fae  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001fb2  2a01              CMP      r2,#1
001fb4  d10e              BNE      |L1.8148|
001fb6  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fba  b95a              CBNZ     r2,|L1.8148|
;;;2015   		{
;;;2016   		volt_region=0;
001fbc  f886702f          STRB     r7,[r6,#0x2f]
;;;2017   		cntrl_stat=1000;
001fc0  f8a6b032          STRH     r11,[r6,#0x32]
;;;2018   		cntrl_stat_new=1000;
001fc4  f8a6b048          STRH     r11,[r6,#0x48]
;;;2019   		cntrl_stat_old=1000;
001fc8  f8a6b034          STRH     r11,[r6,#0x34]
;;;2020   		volt_region_cnt=110;
001fcc  f04f026e          MOV      r2,#0x6e
001fd0  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8148|
;;;2021   		}
;;;2022   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fd4  4288              CMP      r0,r1
001fd6  da13              BGE      |L1.8192|
001fd8  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fdc  4558              CMP      r0,r11
001fde  db0f              BLT      |L1.8192|
001fe0  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fe4  b960              CBNZ     r0,|L1.8192|
001fe6  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fea  b948              CBNZ     r0,|L1.8192|
;;;2023   		{
;;;2024   		volt_region=1;
001fec  f04f0001          MOV      r0,#1
001ff0  f886002f          STRB     r0,[r6,#0x2f]
;;;2025   		cntrl_stat=10;
001ff4  8674              STRH     r4,[r6,#0x32]
;;;2026   		cntrl_stat_new=10;
001ff6  f8a64048          STRH     r4,[r6,#0x48]
;;;2027   		cntrl_stat_old=10;
001ffa  86b4              STRH     r4,[r6,#0x34]
;;;2028   		volt_region_cnt=10;
001ffc  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8192|
;;;2029   		}
;;;2030   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002000  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
002004  b110              CBZ      r0,|L1.8204|
;;;2031   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002006  2801              CMP      r0,#1
002008  d007              BEQ      |L1.8218|
00200a  e00c              B        |L1.8230|
                  |L1.8204|
00200c  2314              MOVS     r3,#0x14              ;2030
00200e  2200              MOVS     r2,#0                 ;2030
002010  2164              MOVS     r1,#0x64              ;2030
002012  20d2              MOVS     r0,#0xd2              ;2030
002014  f7fffffe          BL       mess_send
002018  e005              B        |L1.8230|
                  |L1.8218|
00201a  2314              MOVS     r3,#0x14
00201c  2201              MOVS     r2,#1
00201e  2164              MOVS     r1,#0x64
002020  20d2              MOVS     r0,#0xd2
002022  f7fffffe          BL       mess_send
                  |L1.8230|
;;;2032   	}
;;;2033   
;;;2034   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002026  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002028  280c              CMP      r0,#0xc
00202a  d123              BNE      |L1.8308|
;;;2035   	{
;;;2036   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00202c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00202e  280c              CMP      r0,#0xc
002030  d102              BNE      |L1.8248|
002032  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002036  b908              CBNZ     r0,|L1.8252|
                  |L1.8248|
;;;2037   		{
;;;2038   		vz2_stat_cnt=10;
002038  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8252|
;;;2039   		}
;;;2040   	vz2_stat_cnt--;
00203c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002040  f1a00001          SUB      r0,r0,#1
002044  b200              SXTH     r0,r0
002046  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2041   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00204a  280a              CMP      r0,#0xa
00204c  d001              BEQ      |L1.8274|
00204e  2809              CMP      r0,#9
002050  d10a              BNE      |L1.8296|
                  |L1.8274|
;;;2042   		{
;;;2043   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002052  f2af4328          ADR      r3,|L1.7212|
002056  f2af4214          ADR      r2,|L1.7236|
00205a  f2af4100          ADR      r1,|L1.7260|
00205e  a060              ADR      r0,|L1.8672|
002060  f8cd8000          STR      r8,[sp,#0]
002064  f7fffffe          BL       show_mess
                  |L1.8296|
;;;2044   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2045   					"      ВКЛЮЧЕН       ",
;;;2046   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2047   					5000);
;;;2048   		}
;;;2049   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002068  2314              MOVS     r3,#0x14
00206a  2200              MOVS     r2,#0
00206c  2164              MOVS     r1,#0x64
00206e  20d2              MOVS     r0,#0xd2
002070  f7fffffe          BL       mess_send
                  |L1.8308|
;;;2050   	}
;;;2051   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002074  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002076  280d              CMP      r0,#0xd
002078  d12c              BNE      |L1.8404|
;;;2052   	{
;;;2053   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00207c  280d              CMP      r0,#0xd
00207e  d102              BNE      |L1.8326|
002080  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002084  b908              CBNZ     r0,|L1.8330|
                  |L1.8326|
;;;2054   		{
;;;2055   		vz2_stat_cnt=10;
002086  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8330|
;;;2056   		}
;;;2057   	vz2_stat_cnt--;
00208a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00208e  f1a00001          SUB      r0,r0,#1
002092  b200              SXTH     r0,r0
002094  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2058   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002098  280a              CMP      r0,#0xa
00209a  d001              BEQ      |L1.8352|
00209c  2809              CMP      r0,#9
00209e  d10a              BNE      |L1.8374|
                  |L1.8352|
;;;2059   		{
;;;2060   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020a0  f6af2314          ADR      r3,|L1.5776|
0020a4  f6af2200          ADR      r2,|L1.5800|
0020a8  f6af11ec          ADR      r1,|L1.5824|
0020ac  a04c              ADR      r0,|L1.8672|
0020ae  f8cd8000          STR      r8,[sp,#0]
0020b2  f7fffffe          BL       show_mess
                  |L1.8374|
;;;2061   					"    ЗАБЛОКИРОВАН    ",
;;;2062   					"     НЕИСПРАВНА     ",
;;;2063   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2064   					5000);
;;;2065   		}
;;;2066   	if(sk_stat[0]==1)
0020b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020b8  2801              CMP      r0,#1
0020ba  d105              BNE      |L1.8392|
;;;2067   		{
;;;2068   		vz2_stat=vz2sWRK1;
0020bc  71f4              STRB     r4,[r6,#7]
;;;2069   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020be  210a              MOVS     r1,#0xa
0020c0  f44f70ca          MOV      r0,#0x194
0020c4  f7fffffe          BL       lc640_write
                  |L1.8392|
;;;2070   		}
;;;2071   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020c8  2314              MOVS     r3,#0x14
0020ca  2200              MOVS     r2,#0
0020cc  2164              MOVS     r1,#0x64
0020ce  20d2              MOVS     r0,#0xd2
0020d0  f7fffffe          BL       mess_send
                  |L1.8404|
;;;2072   	}
;;;2073   
;;;2074   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020d4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020d6  280e              CMP      r0,#0xe
0020d8  d12b              BNE      |L1.8498|
;;;2075   	{
;;;2076   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020da  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020dc  280e              CMP      r0,#0xe
0020de  d102              BNE      |L1.8422|
0020e0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020e4  b908              CBNZ     r0,|L1.8426|
                  |L1.8422|
;;;2077   		{
;;;2078   		vz2_stat_cnt=10;
0020e6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8426|
;;;2079   		}
;;;2080   	vz2_stat_cnt--;
0020ea  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020ee  f1a00001          SUB      r0,r0,#1
0020f2  b200              SXTH     r0,r0
0020f4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2081   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020f8  280a              CMP      r0,#0xa
0020fa  d001              BEQ      |L1.8448|
0020fc  2809              CMP      r0,#9
0020fe  d109              BNE      |L1.8468|
                  |L1.8448|
;;;2082   		{
;;;2083   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002100  a33d              ADR      r3,|L1.8696|
002102  f2af4260          ADR      r2,|L1.7332|
002106  f2af414c          ADR      r1,|L1.7356|
00210a  a035              ADR      r0,|L1.8672|
00210c  f8cd8000          STR      r8,[sp,#0]
002110  f7fffffe          BL       show_mess
                  |L1.8468|
;;;2084   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2085   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2086   					"    ТУМБЛЕРА!!!     ",
;;;2087   					5000);
;;;2088   		}
;;;2089   	if(sk_stat[1]==1)
002114  7868              LDRB     r0,[r5,#1]  ; sk_stat
002116  2801              CMP      r0,#1
002118  d105              BNE      |L1.8486|
;;;2090   		{
;;;2091   		vz2_stat=vz2sWRK1;
00211a  71f4              STRB     r4,[r6,#7]
;;;2092   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00211c  210a              MOVS     r1,#0xa
00211e  f44f70ca          MOV      r0,#0x194
002122  f7fffffe          BL       lc640_write
                  |L1.8486|
;;;2093   		}
;;;2094   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002126  2314              MOVS     r3,#0x14
002128  2200              MOVS     r2,#0
00212a  2164              MOVS     r1,#0x64
00212c  20d2              MOVS     r0,#0xd2
00212e  f7fffffe          BL       mess_send
                  |L1.8498|
;;;2095   	}
;;;2096   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
002132  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002134  2810              CMP      r0,#0x10
002136  d12d              BNE      |L1.8596|
;;;2097   	{
;;;2098   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002138  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00213a  2810              CMP      r0,#0x10
00213c  d102              BNE      |L1.8516|
00213e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002142  b908              CBNZ     r0,|L1.8520|
                  |L1.8516|
;;;2099   		{
;;;2100   		vz2_stat_cnt=10;
002144  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8520|
;;;2101   		}
;;;2102   	vz2_stat_cnt--;
002148  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00214c  f1a00001          SUB      r0,r0,#1
002150  b200              SXTH     r0,r0
002152  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2103   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002156  280a              CMP      r0,#0xa
002158  d001              BEQ      |L1.8542|
00215a  2809              CMP      r0,#9
00215c  d10a              BNE      |L1.8564|
                  |L1.8542|
;;;2104   		{
;;;2105   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00215e  f6af23d0          ADR      r3,|L1.5776|
002162  f6af22bc          ADR      r2,|L1.5800|
002166  f6af21a8          ADR      r1,|L1.5824|
00216a  a01d              ADR      r0,|L1.8672|
00216c  f8cd8000          STR      r8,[sp,#0]
002170  f7fffffe          BL       show_mess
                  |L1.8564|
;;;2106   					"    ЗАБЛОКИРОВАН    ",
;;;2107   					"     НЕИСПРАВНА     ",
;;;2108   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2109   					5000);
;;;2110   		}
;;;2111   	if(sk_stat[0]==1)
002174  7828              LDRB     r0,[r5,#0]  ; sk_stat
002176  2801              CMP      r0,#1
002178  d106              BNE      |L1.8584|
;;;2112   		{
;;;2113   		vz2_stat=vz2sWRK2;
00217a  f886a007          STRB     r10,[r6,#7]
;;;2114   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00217e  210b              MOVS     r1,#0xb
002180  f44f70ca          MOV      r0,#0x194
002184  f7fffffe          BL       lc640_write
                  |L1.8584|
;;;2115   		}
;;;2116   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002188  2314              MOVS     r3,#0x14
00218a  2200              MOVS     r2,#0
00218c  2164              MOVS     r1,#0x64
00218e  20d2              MOVS     r0,#0xd2
002190  f7fffffe          BL       mess_send
                  |L1.8596|
;;;2117   	}
;;;2118   
;;;2119   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002194  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002196  2811              CMP      r0,#0x11
002198  d154              BNE      |L1.8772|
;;;2120   	{
;;;2121   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00219a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00219c  2811              CMP      r0,#0x11
00219e  d102              BNE      |L1.8614|
0021a0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021a4  b908              CBNZ     r0,|L1.8618|
                  |L1.8614|
;;;2122   		{
;;;2123   		vz2_stat_cnt=10;
0021a6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8618|
;;;2124   		}
;;;2125   	vz2_stat_cnt--;
0021aa  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021ae  f1a00001          SUB      r0,r0,#1
0021b2  b200              SXTH     r0,r0
0021b4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2126   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021b8  280a              CMP      r0,#0xa
0021ba  d001              BEQ      |L1.8640|
0021bc  2809              CMP      r0,#9
0021be  d131              BNE      |L1.8740|
                  |L1.8640|
;;;2127   		{
;;;2128   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021c0  a30d              ADR      r3,|L1.8696|
0021c2  e025              B        |L1.8720|
                  |L1.8644|
                          DCD      ||area_number.26||+0x80
                  |L1.8648|
                          DCD      FZ_T1
                  |L1.8652|
                          DCD      out_U
                  |L1.8656|
                          DCD      FZ_U1
                  |L1.8660|
                          DCD      Ib_ips_termokompensat
                  |L1.8664|
                          DCD      FZ_ISW12
                  |L1.8668|
                          DCD      FZ_T2
                  |L1.8672|
0021e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021e4  cccec2ce
0021e8  d7cddbc9
0021ec  20c7c0  
0021ef  d0dfc420          DCB      208,223,196,"  ",0
0021f3  2000    
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021fc  d2d3ccc1
002200  cbc5d0c0
002204  21212120
002208  20202020
00220c  00      
00220d  00                DCB      0
00220e  00                DCB      0
00220f  00                DCB      0
                  |L1.8720|
002210  f2af5270          ADR      r2,|L1.7332|
002214  f2af515c          ADR      r1,|L1.7356|
002218  f2af003c          ADR      r0,|L1.8672|
00221c  f8cd8000          STR      r8,[sp,#0]
002220  f7fffffe          BL       show_mess
                  |L1.8740|
;;;2129   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2130   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2131   					"    ТУМБЛЕРА!!!     ",
;;;2132   					5000);
;;;2133   		}
;;;2134   	if(sk_stat[1]==1)
002224  7868              LDRB     r0,[r5,#1]  ; sk_stat
002226  2801              CMP      r0,#1
002228  d106              BNE      |L1.8760|
;;;2135   		{
;;;2136   		vz2_stat=vz2sWRK2;
00222a  f886a007          STRB     r10,[r6,#7]
;;;2137   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00222e  210b              MOVS     r1,#0xb
002230  f44f70ca          MOV      r0,#0x194
002234  f7fffffe          BL       lc640_write
                  |L1.8760|
;;;2138   		}
;;;2139   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002238  2314              MOVS     r3,#0x14
00223a  2200              MOVS     r2,#0
00223c  2164              MOVS     r1,#0x64
00223e  20d2              MOVS     r0,#0xd2
002240  f7fffffe          BL       mess_send
                  |L1.8772|
;;;2140   	}
;;;2141   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002244  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002246  280f              CMP      r0,#0xf
002248  d12e              BNE      |L1.8872|
;;;2142   	{
;;;2143   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00224a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00224c  280f              CMP      r0,#0xf
00224e  d102              BNE      |L1.8790|
002250  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002254  b908              CBNZ     r0,|L1.8794|
                  |L1.8790|
;;;2144   		{
;;;2145   		vz2_stat_cnt=10;
002256  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8794|
;;;2146   		}
;;;2147   	vz2_stat_cnt--;
00225a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00225e  f1a00001          SUB      r0,r0,#1
002262  b200              SXTH     r0,r0
002264  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2148   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002268  280a              CMP      r0,#0xa
00226a  d001              BEQ      |L1.8816|
00226c  2809              CMP      r0,#9
00226e  d10b              BNE      |L1.8840|
                  |L1.8816|
;;;2149   		{
;;;2150   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002270  f6af3380          ADR      r3,|L1.5876|
002274  f6af326c          ADR      r2,|L1.5900|
002278  f6af3158          ADR      r1,|L1.5924|
00227c  f2af5034          ADR      r0,|L1.7500|
002280  f8cd8000          STR      r8,[sp,#0]
002284  f7fffffe          BL       show_mess
                  |L1.8840|
;;;2151   					"      ТУМБЛЕР       ",
;;;2152   					"     ВЫСОКОГО       ",
;;;2153   					"    НАПРЯЖЕНИЯ      ",
;;;2154   					5000);
;;;2155   		}
;;;2156   	if(sk_stat[1]==0)
002288  7868              LDRB     r0,[r5,#1]  ; sk_stat
00228a  b938              CBNZ     r0,|L1.8860|
;;;2157   		{
;;;2158   		vz2_stat=vz2sOFF;
00228c  71f7              STRB     r7,[r6,#7]
;;;2159   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00228e  2100              MOVS     r1,#0
002290  f44f70ca          MOV      r0,#0x194
002294  f7fffffe          BL       lc640_write
;;;2160   		vz_stop();
002298  f7fffffe          BL       vz_stop
                  |L1.8860|
;;;2161   
;;;2162   		}
;;;2163   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00229c  2314              MOVS     r3,#0x14
00229e  2200              MOVS     r2,#0
0022a0  2164              MOVS     r1,#0x64
0022a2  20d2              MOVS     r0,#0xd2
0022a4  f7fffffe          BL       mess_send
                  |L1.8872|
;;;2164   	}
;;;2165   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022a8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2166   	{
;;;2167   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2168   		{
;;;2169   		vz2_stat_cnt=10;
;;;2170   		}
;;;2171   	vz2_stat_cnt--;
;;;2172   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2173   		{
;;;2174   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022aa  f64038b8          MOV      r8,#0xbb8
0022ae  2812              CMP      r0,#0x12              ;2165
0022b0  d13d              BNE      |L1.9006|
0022b2  7a30              LDRB     r0,[r6,#8]            ;2167  ; vz2_stat_old
0022b4  2812              CMP      r0,#0x12              ;2167
0022b6  d102              BNE      |L1.8894|
0022b8  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2167  ; vz2_stat_cnt
0022bc  b908              CBNZ     r0,|L1.8898|
                  |L1.8894|
0022be  f8a6407a          STRH     r4,[r6,#0x7a]         ;2169
                  |L1.8898|
0022c2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2171  ; vz2_stat_cnt
0022c6  f1a00001          SUB      r0,r0,#1              ;2171
0022ca  b200              SXTH     r0,r0                 ;2171
0022cc  f8a6007a          STRH     r0,[r6,#0x7a]         ;2171
0022d0  280a              CMP      r0,#0xa               ;2172
0022d2  d001              BEQ      |L1.8920|
0022d4  2809              CMP      r0,#9                 ;2172
0022d6  d10a              BNE      |L1.8942|
                  |L1.8920|
0022d8  f2af53f0          ADR      r3,|L1.7404|
0022dc  f2af52dc          ADR      r2,|L1.7428|
0022e0  f2af51c8          ADR      r1,|L1.7452|
0022e4  a0ff              ADR      r0,|L1.9956|
0022e6  f8cd8000          STR      r8,[sp,#0]
0022ea  f7fffffe          BL       show_mess
                  |L1.8942|
;;;2175   					"       ЗАРЯД        ",
;;;2176   					"      УСПЕШНО       ",
;;;2177   					"     ЗАВЕРШЕН       ",
;;;2178   					3000);
;;;2179   		}
;;;2180   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022ee  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022f2  2806              CMP      r0,#6
0022f4  d001              BEQ      |L1.8954|
0022f6  2805              CMP      r0,#5
0022f8  d10b              BNE      |L1.8978|
                  |L1.8954|
;;;2181   		{
;;;2182   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022fa  f6af4308          ADR      r3,|L1.5876|
0022fe  f6af32f4          ADR      r2,|L1.5900|
002302  f6af31e0          ADR      r1,|L1.5924|
002306  f2af50bc          ADR      r0,|L1.7500|
00230a  f8cd8000          STR      r8,[sp,#0]
00230e  f7fffffe          BL       show_mess
                  |L1.8978|
;;;2183   					"      ТУМБЛЕР       ",
;;;2184   					"     ВЫСОКОГО       ",
;;;2185   					"    НАПРЯЖЕНИЯ      ",
;;;2186   					3000);
;;;2187   		}
;;;2188   	if(sk_stat[1]==0)
002312  7868              LDRB     r0,[r5,#1]  ; sk_stat
002314  b928              CBNZ     r0,|L1.8994|
;;;2189   		{
;;;2190   		vz2_stat=vz2sOFF;
002316  71f7              STRB     r7,[r6,#7]
;;;2191   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002318  2100              MOVS     r1,#0
00231a  f44f70ca          MOV      r0,#0x194
00231e  f7fffffe          BL       lc640_write
                  |L1.8994|
;;;2192   		}
;;;2193   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002322  2314              MOVS     r3,#0x14
002324  2200              MOVS     r2,#0
002326  2164              MOVS     r1,#0x64
002328  20d2              MOVS     r0,#0xd2
00232a  f7fffffe          BL       mess_send
                  |L1.9006|
;;;2194   	}
;;;2195   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00232e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002330  2813              CMP      r0,#0x13
002332  d13d              BNE      |L1.9136|
;;;2196   	{
;;;2197   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002334  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002336  2813              CMP      r0,#0x13
002338  d102              BNE      |L1.9024|
00233a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00233e  b908              CBNZ     r0,|L1.9028|
                  |L1.9024|
;;;2198   		{
;;;2199   		vz2_stat_cnt=10;
002340  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9028|
;;;2200   		}
;;;2201   	vz2_stat_cnt--;
002344  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002348  f1a00001          SUB      r0,r0,#1
00234c  b200              SXTH     r0,r0
00234e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2202   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002352  280a              CMP      r0,#0xa
002354  d001              BEQ      |L1.9050|
002356  2809              CMP      r0,#9
002358  d10a              BNE      |L1.9072|
                  |L1.9050|
;;;2203   		{
;;;2204   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00235a  f2af53f8          ADR      r3,|L1.7524|
00235e  f2af52e4          ADR      r2,|L1.7548|
002362  f2af6148          ADR      r1,|L1.7452|
002366  a0df              ADR      r0,|L1.9956|
002368  f8cd8000          STR      r8,[sp,#0]
00236c  f7fffffe          BL       show_mess
                  |L1.9072|
;;;2205   					"       ЗАРЯД        ",
;;;2206   					"     ПРЕКРАЩЕН      ",
;;;2207   					"                    ",
;;;2208   					3000);
;;;2209   		}
;;;2210   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002370  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
002374  2806              CMP      r0,#6
002376  d001              BEQ      |L1.9084|
002378  2805              CMP      r0,#5
00237a  d10b              BNE      |L1.9108|
                  |L1.9084|
;;;2211   		{
;;;2212   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00237c  f6af438c          ADR      r3,|L1.5876|
002380  f6af4278          ADR      r2,|L1.5900|
002384  f6af4164          ADR      r1,|L1.5924|
002388  f2af6040          ADR      r0,|L1.7500|
00238c  f8cd8000          STR      r8,[sp,#0]
002390  f7fffffe          BL       show_mess
                  |L1.9108|
;;;2213   					"      ТУМБЛЕР       ",
;;;2214   					"     ВЫСОКОГО       ",
;;;2215   					"    НАПРЯЖЕНИЯ      ",
;;;2216   					3000);
;;;2217   		}
;;;2218   	if(sk_stat[1]==0)
002394  7868              LDRB     r0,[r5,#1]  ; sk_stat
002396  b928              CBNZ     r0,|L1.9124|
;;;2219   		{
;;;2220   		vz2_stat=vz2sOFF;
002398  71f7              STRB     r7,[r6,#7]
;;;2221   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00239a  2100              MOVS     r1,#0
00239c  f44f70ca          MOV      r0,#0x194
0023a0  f7fffffe          BL       lc640_write
                  |L1.9124|
;;;2222   		}
;;;2223   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023a4  2314              MOVS     r3,#0x14
0023a6  2200              MOVS     r2,#0
0023a8  2164              MOVS     r1,#0x64
0023aa  20d2              MOVS     r0,#0xd2
0023ac  f7fffffe          BL       mess_send
                  |L1.9136|
;;;2224   	}
;;;2225   vz2_stat_old=vz2_stat;
0023b0  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0023b2  7230              STRB     r0,[r6,#8]
;;;2226   
;;;2227   }
0023b4  e8bd8ff8          POP      {r3-r11,pc}
;;;2228   
                          ENDP

                  vz2_start PROC
;;;2230   //старт уравнительног заряда
;;;2231   char vz2_start(char hour)
0023b8  b510              PUSH     {r4,lr}
;;;2232   {          
;;;2233   char out;
;;;2234   out=0;
0023ba  f04f0000          MOV      r0,#0
;;;2235   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023be  49cf              LDR      r1,|L1.9980|
0023c0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023c4  2a00              CMP      r2,#0
0023c6  d110              BNE      |L1.9194|
0023c8  4acd              LDR      r2,|L1.9984|
0023ca  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023cc  2a01              CMP      r2,#1
0023ce  d00c              BEQ      |L1.9194|
0023d0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023d2  2a00              CMP      r2,#0
0023d4  d109              BNE      |L1.9194|
;;;2236   	{
;;;2237   	if(vz1_stat==vz1sOFF)
;;;2238   		{
;;;2239   		vz2_stat=vz2sSTEP1;
0023d6  f04f0001          MOV      r0,#1
0023da  71c8              STRB     r0,[r1,#7]
;;;2240   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023dc  4601              MOV      r1,r0
0023de  f44f70ca          MOV      r0,#0x194
0023e2  f7fffffe          BL       lc640_write
;;;2241   		out=1;
0023e6  f04f0001          MOV      r0,#1
                  |L1.9194|
;;;2242   		
;;;2243   		}
;;;2244   /*	spc_stat=spcVZ;
;;;2245   	__ee_spc_stat=spcVZ; 
;;;2246   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2247   	vz_cnt_h=hour;
;;;2248   	__ee_vz_cnt=hour*60;
;;;2249   	if(hour==0)__ee_vz_cnt=30;
;;;2250   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2251   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2252   	vz_cnt_h_=0;
;;;2253   	vz_cnt_s=0;
;;;2254   	vz_cnt_s_=0;
;;;2255   	
;;;2256   		*/
;;;2257   	}
;;;2258   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2259   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2260   //plazma=out;	
;;;2261   return out;
;;;2262   }
0023ea  bd10              POP      {r4,pc}
;;;2263   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2264   //стоп формовочного заряда
;;;2265   void vz2_stop(void)
0023ec  48c3              LDR      r0,|L1.9980|
;;;2266   {
;;;2267   if(vz2_stat!=vz2sOFF)
0023ee  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023f0  2900              CMP      r1,#0
0023f2  d006              BEQ      |L1.9218|
;;;2268   	{
;;;2269   	vz2_stat=vz2sSTOP;
0023f4  f04f0113          MOV      r1,#0x13
0023f8  71c1              STRB     r1,[r0,#7]
;;;2270   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023fa  f44f70ca          MOV      r0,#0x194
0023fe  f7ffbffe          B.W      lc640_write
                  |L1.9218|
;;;2271   	}
;;;2272   }
002402  4770              BX       lr
;;;2273   
                          ENDP

                  kb_init PROC
;;;2274   //-----------------------------------------------
;;;2275   void kb_init(void)
002404  48bf              LDR      r0,|L1.9988|
;;;2276   {
;;;2277   main_kb_cnt=(TBAT*60)-60/*120*/;
002406  f06f013b          MVN      r1,#0x3b
00240a  8800              LDRH     r0,[r0,#0]  ; TBAT
00240c  ebc01000          RSB      r0,r0,r0,LSL #4
002410  eb010080          ADD      r0,r1,r0,LSL #2
002414  49b9              LDR      r1,|L1.9980|
002416  f8a10052          STRH     r0,[r1,#0x52]
;;;2278   }
00241a  4770              BX       lr
;;;2279   
                          ENDP

                  kb_hndl PROC
;;;2280   //-----------------------------------------------
;;;2281   void kb_hndl(void)
00241c  e92d5ff0          PUSH     {r4-r12,lr}
;;;2282   {
;;;2283   
;;;2284   static signed short ibat[2],ibat_[2];
;;;2285   #ifdef UKU_TELECORE2015
;;;2286   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2287   #else 
;;;2288   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002420  f8df82d8          LDR      r8,|L1.9980|
;;;2289   #endif
;;;2290   	{
;;;2291   	main_kb_cnt=0;
;;;2292   	
;;;2293   	kb_start[0]=0;
;;;2294   	kb_start[1]=0;
;;;2295   	kb_start_ips=0;
;;;2296   
;;;2297   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2298   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2299   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2300   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002424  f8dfa2e0          LDR      r10,|L1.9992|
002428  2500              MOVS     r5,#0                 ;2288
00242a  f8b80052          LDRH     r0,[r8,#0x52]         ;2288  ; main_kb_cnt
00242e  4eb7              LDR      r6,|L1.9996|
002430  1c40              ADDS     r0,r0,#1              ;2288
002432  b201              SXTH     r1,r0                 ;2288
002434  48b3              LDR      r0,|L1.9988|
002436  f8a81052          STRH     r1,[r8,#0x52]         ;2288
00243a  f8df92d4          LDR      r9,|L1.10000|
00243e  f9b00000          LDRSH    r0,[r0,#0]            ;2288  ; TBAT
;;;2301   #endif	
;;;2302   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2303   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2304   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2305   #endif
;;;2306   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2307    
;;;2308   		{
;;;2309   		kb_start[0]=0;
;;;2310   		kb_start[1]=0;
;;;2311   		kb_start_ips=0;
;;;2312   		}
;;;2313   
;;;2314   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2315   		{
;;;2316   		kb_cnt_1lev=10;
002442  270a              MOVS     r7,#0xa
002444  ebc01200          RSB      r2,r0,r0,LSL #4       ;2288
002448  f04f0b01          MOV      r11,#1                ;2297
00244c  f1080458          ADD      r4,r8,#0x58           ;2293
002450  ebb10f82          CMP      r1,r2,LSL #2          ;2288
002454  db6c              BLT      |L1.9520|
002456  2800              CMP      r0,#0                 ;2288
002458  d06a              BEQ      |L1.9520|
00245a  f8a85052          STRH     r5,[r8,#0x52]         ;2291
00245e  7025              STRB     r5,[r4,#0]            ;2293
002460  7065              STRB     r5,[r4,#1]            ;2294
002462  f888501d          STRB     r5,[r8,#0x1d]         ;2295
002466  48ab              LDR      r0,|L1.10004|
002468  7800              LDRB     r0,[r0,#0]            ;2297  ; BAT_IS_ON
00246a  2855              CMP      r0,#0x55              ;2297
00246c  d111              BNE      |L1.9362|
00246e  f9b60002          LDRSH    r0,[r6,#2]            ;2297  ; bat
002472  2850              CMP      r0,#0x50              ;2297
002474  dd0d              BLE      |L1.9362|
002476  f9b60008          LDRSH    r0,[r6,#8]            ;2297  ; bat
00247a  f7fffffe          BL       abs
00247e  f9b91000          LDRSH    r1,[r9,#0]            ;2297  ; IKB
002482  4288              CMP      r0,r1                 ;2297
002484  db03              BLT      |L1.9358|
002486  f896003d          LDRB     r0,[r6,#0x3d]         ;2297  ; bat
00248a  07c0              LSLS     r0,r0,#31             ;2297
00248c  d001              BEQ      |L1.9362|
                  |L1.9358|
00248e  f884b000          STRB     r11,[r4,#0]           ;2297
                  |L1.9362|
002492  48a0              LDR      r0,|L1.10004|
002494  7840              LDRB     r0,[r0,#1]            ;2298  ; BAT_IS_ON
002496  2855              CMP      r0,#0x55              ;2298
002498  d111              BNE      |L1.9406|
00249a  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2298  ; bat
00249e  2850              CMP      r0,#0x50              ;2298
0024a0  dd0d              BLE      |L1.9406|
0024a2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2298  ; bat
0024a6  f7fffffe          BL       abs
0024aa  f9b91000          LDRSH    r1,[r9,#0]            ;2298  ; IKB
0024ae  4288              CMP      r0,r1                 ;2298
0024b0  db03              BLT      |L1.9402|
0024b2  f8960089          LDRB     r0,[r6,#0x89]         ;2298  ; bat
0024b6  07c0              LSLS     r0,r0,#31             ;2298
0024b8  d001              BEQ      |L1.9406|
                  |L1.9402|
0024ba  f884b001          STRB     r11,[r4,#1]           ;2298
                  |L1.9406|
0024be  4896              LDR      r0,|L1.10008|
0024c0  7800              LDRB     r0,[r0,#0]            ;2300  ; ips_bat_av_vzvod
0024c2  b970              CBNZ     r0,|L1.9442|
0024c4  f9ba0000          LDRSH    r0,[r10,#0]           ;2300  ; Ib_ips_termokompensat
0024c8  f7fffffe          BL       abs
0024cc  f9b91000          LDRSH    r1,[r9,#0]            ;2300  ; IKB
0024d0  4288              CMP      r0,r1                 ;2300
0024d2  db04              BLT      |L1.9438|
0024d4  4891              LDR      r0,|L1.10012|
0024d6  f890003d          LDRB     r0,[r0,#0x3d]         ;2300  ; bat_ips
0024da  07c0              LSLS     r0,r0,#31             ;2300
0024dc  d001              BEQ      |L1.9442|
                  |L1.9438|
0024de  f888b01d          STRB     r11,[r8,#0x1d]        ;2300
                  |L1.9442|
0024e2  488f              LDR      r0,|L1.10016|
0024e4  7800              LDRB     r0,[r0,#0]            ;2302  ; net_av
0024e6  b998              CBNZ     r0,|L1.9488|
0024e8  f898001e          LDRB     r0,[r8,#0x1e]         ;2302  ; num_of_wrks_bps
0024ec  b180              CBZ      r0,|L1.9488|
0024ee  f8980023          LDRB     r0,[r8,#0x23]         ;2302  ; spc_stat
0024f2  b108              CBZ      r0,|L1.9464|
0024f4  2802              CMP      r0,#2                 ;2302
0024f6  d10b              BNE      |L1.9488|
                  |L1.9464|
0024f8  f8980005          LDRB     r0,[r8,#5]            ;2304  ; vz1_stat
0024fc  f8981007          LDRB     r1,[r8,#7]            ;2304  ; vz2_stat
002500  4308              ORRS     r0,r0,r1              ;2304
002502  d002              BEQ      |L1.9482|
002504  4887              LDR      r0,|L1.10020|
002506  8800              LDRH     r0,[r0,#0]            ;2304  ; SMART_SPC
002508  b910              CBNZ     r0,|L1.9488|
                  |L1.9482|
00250a  4887              LDR      r0,|L1.10024|
00250c  7800              LDRB     r0,[r0,#0]            ;2306  ; sp_ch_stat
00250e  b118              CBZ      r0,|L1.9496|
                  |L1.9488|
002510  7025              STRB     r5,[r4,#0]            ;2309
002512  7065              STRB     r5,[r4,#1]            ;2310
002514  f888501d          STRB     r5,[r8,#0x1d]         ;2311
                  |L1.9496|
002518  7820              LDRB     r0,[r4,#0]            ;2314  ; kb_start
00251a  2801              CMP      r0,#1                 ;2314
00251c  d020              BEQ      |L1.9568|
00251e  7860              LDRB     r0,[r4,#1]            ;2314  ; kb_start
002520  2801              CMP      r0,#1                 ;2314
002522  d01d              BEQ      |L1.9568|
002524  f898001d          LDRB     r0,[r8,#0x1d]         ;2314  ; kb_start_ips
002528  2801              CMP      r0,#1                 ;2314
00252a  d019              BEQ      |L1.9568|
;;;2317   		}
;;;2318   	else kb_cnt_1lev=0;
00252c  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9520|
;;;2319   	}
;;;2320   
;;;2321   if(kb_cnt_1lev)
002530  4641              MOV      r1,r8
002532  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2322   	{
;;;2323   	kb_cnt_1lev--;
;;;2324   
;;;2325   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2326   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2327   
;;;2328   
;;;2329   	if(kb_cnt_1lev==5)
;;;2330   		{
;;;2331   		ibat[0]=abs(bat[0]._Ib);
002536  f8df81c4          LDR      r8,|L1.9980|
00253a  2800              CMP      r0,#0                 ;2321
00253c  f1080890          ADD      r8,r8,#0x90
002540  d07e              BEQ      |L1.9792|
002542  f1a00001          SUB      r0,r0,#1              ;2323
002546  b200              SXTH     r0,r0                 ;2323
002548  468b              MOV      r11,r1                ;2323
00254a  f8a10054          STRH     r0,[r1,#0x54]         ;2323
00254e  2805              CMP      r0,#5                 ;2325
002550  dd09              BLE      |L1.9574|
002552  230f              MOVS     r3,#0xf               ;2325
002554  221e              MOVS     r2,#0x1e              ;2325
002556  2164              MOVS     r1,#0x64              ;2325
002558  20e1              MOVS     r0,#0xe1              ;2325
00255a  f7fffffe          BL       mess_send
00255e  e00a              B        |L1.9590|
                  |L1.9568|
002560  f8a87054          STRH     r7,[r8,#0x54]         ;2316
002564  e7e4              B        |L1.9520|
                  |L1.9574|
002566  2800              CMP      r0,#0                 ;2326
002568  dd05              BLE      |L1.9590|
00256a  230f              MOVS     r3,#0xf               ;2326
00256c  221e              MOVS     r2,#0x1e              ;2326
00256e  2169              MOVS     r1,#0x69              ;2326
002570  20e1              MOVS     r0,#0xe1              ;2326
002572  f7fffffe          BL       mess_send
                  |L1.9590|
002576  f8bb0054          LDRH     r0,[r11,#0x54]        ;2329  ; kb_cnt_1lev
00257a  2805              CMP      r0,#5                 ;2329
00257c  d111              BNE      |L1.9634|
00257e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002582  f7fffffe          BL       abs
002586  f8a80000          STRH     r0,[r8,#0]
;;;2332   		ibat[1]=abs(bat[1]._Ib);
00258a  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00258e  f7fffffe          BL       abs
002592  f8a80002          STRH     r0,[r8,#2]
;;;2333   		ibat_ips=abs(Ib_ips_termokompensat);
002596  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00259a  f7fffffe          BL       abs
00259e  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9634|
;;;2334   		}
;;;2335   	
;;;2336   	if(kb_cnt_1lev==0)
0025a2  4856              LDR      r0,|L1.9980|
0025a4  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025a8  2800              CMP      r0,#0
0025aa  d158              BNE      |L1.9822|
;;;2337   		{
;;;2338   		ibat_[0]=abs(bat[0]._Ib);
0025ac  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025b0  f7fffffe          BL       abs
0025b4  f8dfb144          LDR      r11,|L1.9980|
0025b8  f10b0b94          ADD      r11,r11,#0x94
0025bc  f8ab0000          STRH     r0,[r11,#0]
;;;2339   		ibat_[1]=abs(bat[1]._Ib);
0025c0  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025c4  f7fffffe          BL       abs
0025c8  f8ab0002          STRH     r0,[r11,#2]
;;;2340   		ibat_ips_=abs(Ib_ips_termokompensat);
0025cc  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025d0  f7fffffe          BL       abs
0025d4  f8dfa124          LDR      r10,|L1.9980|
0025d8  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2341   
;;;2342   		kb_cnt_2lev=0;
0025dc  f8aa5056          STRH     r5,[r10,#0x56]
;;;2343   
;;;2344   
;;;2345   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025e0  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025e4  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025e8  4408              ADD      r0,r0,r1
0025ea  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025ee  4288              CMP      r0,r1
0025f0  da02              BGE      |L1.9720|
0025f2  7820              LDRB     r0,[r4,#0]  ; kb_start
0025f4  2801              CMP      r0,#1
0025f6  d034              BEQ      |L1.9826|
                  |L1.9720|
;;;2346   			{
;;;2347   			kb_cnt_2lev=10;  
;;;2348   			}
;;;2349   		else if(bat[0]._Ub>200)
0025f8  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025fc  28c8              CMP      r0,#0xc8
0025fe  dd04              BLE      |L1.9738|
;;;2350   			{
;;;2351   			kb_start[0]=0;
002600  7025              STRB     r5,[r4,#0]
;;;2352   			avar_bat_hndl(0,0);
002602  2100              MOVS     r1,#0
002604  4608              MOV      r0,r1
002606  f7fffffe          BL       avar_bat_hndl
                  |L1.9738|
;;;2353   			}
;;;2354   		
;;;2355   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
00260a  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
00260e  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
002612  4408              ADD      r0,r0,r1
002614  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002618  4288              CMP      r0,r1
00261a  da02              BGE      |L1.9762|
00261c  7860              LDRB     r0,[r4,#1]  ; kb_start
00261e  2801              CMP      r0,#1
002620  d022              BEQ      |L1.9832|
                  |L1.9762|
;;;2356   			{
;;;2357   			kb_cnt_2lev=10;     
;;;2358   			}
;;;2359   		else  if(bat[1]._Ub>200)
002622  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002626  28c8              CMP      r0,#0xc8
002628  dd04              BLE      |L1.9780|
;;;2360   			{
;;;2361   			kb_start[1]=0;
00262a  7065              STRB     r5,[r4,#1]
;;;2362   			avar_bat_hndl(1,0);
00262c  2100              MOVS     r1,#0
00262e  2001              MOVS     r0,#1
002630  f7fffffe          BL       avar_bat_hndl
                  |L1.9780|
;;;2363   			}
;;;2364   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2365   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002634  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002638  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
00263c  4408              ADD      r0,r0,r1
00263e  e000              B        |L1.9794|
                  |L1.9792|
002640  e01b              B        |L1.9850|
                  |L1.9794|
002642  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002646  4288              CMP      r0,r1
002648  da09              BGE      |L1.9822|
00264a  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00264e  2801              CMP      r0,#1
002650  d105              BNE      |L1.9822|
;;;2366   			{
;;;2367   			if(KB_ALGORITM==1)
002652  4836              LDR      r0,|L1.10028|
002654  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002656  2801              CMP      r0,#1
002658  d009              BEQ      |L1.9838|
;;;2368   				{
;;;2369   				avar_bat_ips_hndl(1);
;;;2370   				kb_start_ips=0;
;;;2371   				}
;;;2372   			else
;;;2373   				{
;;;2374   				kb_cnt_2lev=10;     
00265a  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9822|
;;;2375   				}
;;;2376   			}
;;;2377   #endif
;;;2378   		}	
;;;2379   
;;;2380   
;;;2381   	}
;;;2382   else if(kb_cnt_2lev)
;;;2383   	{
;;;2384   	kb_cnt_2lev--;
;;;2385   
;;;2386   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2387   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2388   
;;;2389   
;;;2390   	if(kb_cnt_2lev==5)
;;;2391   		{
;;;2392   		ibat[0]=abs(bat[0]._Ib);
;;;2393   		ibat[1]=abs(bat[1]._Ib);
;;;2394   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2395   		}
;;;2396   	
;;;2397   	if(kb_cnt_2lev==0)
;;;2398   		{
;;;2399   		ibat_[0]=abs(bat[0]._Ib);
;;;2400   		ibat_[1]=abs(bat[1]._Ib);
;;;2401   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2402   
;;;2403   		kb_full_ver=0;
;;;2404   
;;;2405   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2406   			{
;;;2407   			kb_full_ver=1;  
;;;2408   			}
;;;2409   		else if(bat[0]._Ub>200)			
;;;2410   			{
;;;2411   			kb_start[0]=0;
;;;2412   			avar_bat_hndl(0,0);
;;;2413   			}
;;;2414   
;;;2415   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2416   			{
;;;2417   			kb_full_ver=1;     
;;;2418   			}
;;;2419   		else	if(bat[1]._Ub>200)		
;;;2420   			{
;;;2421   			kb_start[1]=0;
;;;2422   			avar_bat_hndl(1,0);
;;;2423   			}
;;;2424   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2425   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2426   			{
;;;2427   			if(KB_ALGORITM==2)
;;;2428   				{
;;;2429   				avar_bat_ips_hndl(1);
;;;2430   				kb_start_ips=0;
;;;2431   				}
;;;2432   			else
;;;2433   				{
;;;2434   				kb_full_ver=1;     
;;;2435   				}
;;;2436   			}
;;;2437   #endif
;;;2438   		}	
;;;2439   	}
;;;2440   
;;;2441   else if(kb_full_ver)
;;;2442   	{
;;;2443   	
;;;2444   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2445   
;;;2446   	if( abs(bat[0]._Ib) > IKB ) 
;;;2447   		{
;;;2448   		if(kb_start[0]==1)
;;;2449   			{
;;;2450   			kb_start[0]=0;
;;;2451   			avar_bat_hndl(0,0);
;;;2452   			}
;;;2453   		}
;;;2454   
;;;2455   	if( abs(bat[1]._Ib) > IKB ) 
;;;2456   		{
;;;2457   		if(kb_start[1]==1)
;;;2458   			{
;;;2459   			kb_start[1]=0;
;;;2460   			avar_bat_hndl(1,0);
;;;2461   			}
;;;2462   		}
;;;2463   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2464   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2465   		{
;;;2466   		if(kb_start_ips==1)
;;;2467   			{
;;;2468   			kb_start_ips=0;
;;;2469   			avar_bat_ips_hndl(0);
;;;2470   			}
;;;2471   		}
;;;2472   #endif
;;;2473   
;;;2474   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2475   		{
;;;2476   		kb_full_ver=0;
;;;2477   		}
;;;2478   
;;;2479   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2480   		{
;;;2481   		kb_full_ver=0;
;;;2482   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2483   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2484   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2485   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2486   #endif
;;;2487   		}
;;;2488   	}
;;;2489   
;;;2490   }
00265e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9826|
002662  f8aa7056          STRH     r7,[r10,#0x56]        ;2347
002666  e7d0              B        |L1.9738|
                  |L1.9832|
002668  f8aa7056          STRH     r7,[r10,#0x56]        ;2357
00266c  e7e2              B        |L1.9780|
                  |L1.9838|
00266e  2001              MOVS     r0,#1                 ;2369
002670  f7fffffe          BL       avar_bat_ips_hndl
002674  f88a501d          STRB     r5,[r10,#0x1d]        ;2370
                  |L1.9848|
002678  e7f1              B        |L1.9822|
                  |L1.9850|
00267a  f9b10056          LDRSH    r0,[r1,#0x56]         ;2382  ; kb_cnt_2lev
00267e  b380              CBZ      r0,|L1.9954|
002680  f1a00001          SUB      r0,r0,#1              ;2384
002684  b200              SXTH     r0,r0                 ;2384
002686  460f              MOV      r7,r1                 ;2384
002688  f8a10056          STRH     r0,[r1,#0x56]         ;2384
00268c  2805              CMP      r0,#5                 ;2386
00268e  dd06              BLE      |L1.9886|
002690  230f              MOVS     r3,#0xf               ;2386
002692  22c8              MOVS     r2,#0xc8              ;2386
002694  2164              MOVS     r1,#0x64              ;2386
002696  20e1              MOVS     r0,#0xe1              ;2386
002698  f7fffffe          BL       mess_send
00269c  e007              B        |L1.9902|
                  |L1.9886|
00269e  2800              CMP      r0,#0                 ;2387
0026a0  dd05              BLE      |L1.9902|
0026a2  230f              MOVS     r3,#0xf               ;2387
0026a4  22c8              MOVS     r2,#0xc8              ;2387
0026a6  2169              MOVS     r1,#0x69              ;2387
0026a8  20e1              MOVS     r0,#0xe1              ;2387
0026aa  f7fffffe          BL       mess_send
                  |L1.9902|
0026ae  f8b70056          LDRH     r0,[r7,#0x56]         ;2390  ; kb_cnt_2lev
0026b2  2805              CMP      r0,#5                 ;2390
0026b4  d111              BNE      |L1.9946|
0026b6  f9b60008          LDRSH    r0,[r6,#8]            ;2392  ; bat
0026ba  f7fffffe          BL       abs
0026be  f8a80000          STRH     r0,[r8,#0]            ;2392
0026c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2393  ; bat
0026c6  f7fffffe          BL       abs
0026ca  f8a80002          STRH     r0,[r8,#2]            ;2393
0026ce  f9ba0000          LDRSH    r0,[r10,#0]           ;2394  ; Ib_ips_termokompensat
0026d2  f7fffffe          BL       abs
0026d6  f8a7005a          STRH     r0,[r7,#0x5a]         ;2394
                  |L1.9946|
0026da  4808              LDR      r0,|L1.9980|
0026dc  f8b00056          LDRH     r0,[r0,#0x56]         ;2397  ; kb_cnt_2lev
0026e0  e026              B        |L1.10032|
                  |L1.9954|
0026e2  e087              B        |L1.10228|
                  |L1.9956|
0026e4  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026e8  d4ced0cc
0026ec  cec2ced7
0026f0  cddbc920
0026f4  202020  
0026f7  2000              DCB      " ",0
0026f9  00                DCB      0
0026fa  00                DCB      0
0026fb  00                DCB      0
                  |L1.9980|
                          DCD      ||area_number.26||
                  |L1.9984|
                          DCD      speedChrgBlckStat
                  |L1.9988|
                          DCD      TBAT
                  |L1.9992|
                          DCD      Ib_ips_termokompensat
                  |L1.9996|
                          DCD      bat
                  |L1.10000|
                          DCD      IKB
                  |L1.10004|
                          DCD      BAT_IS_ON
                  |L1.10008|
                          DCD      ips_bat_av_vzvod
                  |L1.10012|
                          DCD      bat_ips
                  |L1.10016|
                          DCD      net_av
                  |L1.10020|
                          DCD      SMART_SPC
                  |L1.10024|
                          DCD      sp_ch_stat
                  |L1.10028|
                          DCD      KB_ALGORITM
                  |L1.10032|
002730  2800              CMP      r0,#0                 ;2397
                  |L1.10034|
002732  d194              BNE      |L1.9822|
002734  f9b60008          LDRSH    r0,[r6,#8]            ;2399  ; bat
002738  f7fffffe          BL       abs
00273c  4fff              LDR      r7,|L1.11068|
00273e  8038              STRH     r0,[r7,#0]            ;2399
002740  f9b60054          LDRSH    r0,[r6,#0x54]         ;2400  ; bat
002744  f7fffffe          BL       abs
002748  8078              STRH     r0,[r7,#2]            ;2400
00274a  f9ba0000          LDRSH    r0,[r10,#0]           ;2401  ; Ib_ips_termokompensat
00274e  f7fffffe          BL       abs
002752  f1a70a94          SUB      r10,r7,#0x94          ;2401
002756  f8aa005c          STRH     r0,[r10,#0x5c]        ;2401
00275a  f88a501c          STRB     r5,[r10,#0x1c]        ;2403
00275e  f9b80000          LDRSH    r0,[r8,#0]            ;2405  ; ibat
002762  f9b71000          LDRSH    r1,[r7,#0]            ;2405  ; ibat_
002766  4408              ADD      r0,r0,r1              ;2405
002768  f9b91000          LDRSH    r1,[r9,#0]            ;2405  ; IKB
00276c  4288              CMP      r0,r1                 ;2405
00276e  da02              BGE      |L1.10102|
002770  7820              LDRB     r0,[r4,#0]            ;2405  ; kb_start
002772  2801              CMP      r0,#1                 ;2405
002774  d032              BEQ      |L1.10204|
                  |L1.10102|
002776  f9b60002          LDRSH    r0,[r6,#2]            ;2409  ; bat
00277a  28c8              CMP      r0,#0xc8              ;2409
00277c  dd04              BLE      |L1.10120|
00277e  7025              STRB     r5,[r4,#0]            ;2411
002780  2100              MOVS     r1,#0                 ;2412
002782  4608              MOV      r0,r1                 ;2412
002784  f7fffffe          BL       avar_bat_hndl
                  |L1.10120|
002788  f9b80002          LDRSH    r0,[r8,#2]            ;2415  ; ibat
00278c  f9b71002          LDRSH    r1,[r7,#2]            ;2415  ; ibat_
002790  4408              ADD      r0,r0,r1              ;2415
002792  f9b91000          LDRSH    r1,[r9,#0]            ;2415  ; IKB
002796  4288              CMP      r0,r1                 ;2415
002798  da02              BGE      |L1.10144|
00279a  7860              LDRB     r0,[r4,#1]            ;2415  ; kb_start
00279c  2801              CMP      r0,#1                 ;2415
00279e  d020              BEQ      |L1.10210|
                  |L1.10144|
0027a0  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2419  ; bat
0027a4  28c8              CMP      r0,#0xc8              ;2419
0027a6  dd04              BLE      |L1.10162|
0027a8  7065              STRB     r5,[r4,#1]            ;2421
0027aa  2100              MOVS     r1,#0                 ;2422
0027ac  2001              MOVS     r0,#1                 ;2422
0027ae  f7fffffe          BL       avar_bat_hndl
                  |L1.10162|
0027b2  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2425  ; ibat_ips
0027b6  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2425  ; ibat_ips_
0027ba  4408              ADD      r0,r0,r1              ;2425
0027bc  f9b91000          LDRSH    r1,[r9,#0]            ;2425  ; IKB
0027c0  4288              CMP      r0,r1                 ;2425
0027c2  f6bfaf59          BGE      |L1.9848|
0027c6  f89a001d          LDRB     r0,[r10,#0x1d]        ;2425  ; kb_start_ips
0027ca  2801              CMP      r0,#1                 ;2425
0027cc  d1b1              BNE      |L1.10034|
0027ce  48dc              LDR      r0,|L1.11072|
0027d0  8800              LDRH     r0,[r0,#0]            ;2427  ; KB_ALGORITM
0027d2  2802              CMP      r0,#2                 ;2427
0027d4  d008              BEQ      |L1.10216|
0027d6  f88ab01c          STRB     r11,[r10,#0x1c]       ;2434
                  |L1.10202|
0027da  e740              B        |L1.9822|
                  |L1.10204|
0027dc  f88ab01c          STRB     r11,[r10,#0x1c]       ;2407
0027e0  e7d2              B        |L1.10120|
                  |L1.10210|
0027e2  f88ab01c          STRB     r11,[r10,#0x1c]       ;2417
0027e6  e7e4              B        |L1.10162|
                  |L1.10216|
0027e8  2001              MOVS     r0,#1                 ;2429
0027ea  f7fffffe          BL       avar_bat_ips_hndl
0027ee  f88a501d          STRB     r5,[r10,#0x1d]        ;2430
0027f2  e734              B        |L1.9822|
                  |L1.10228|
0027f4  7f08              LDRB     r0,[r1,#0x1c]         ;2441  ; kb_full_ver
0027f6  4688              MOV      r8,r1                 ;2441
0027f8  2800              CMP      r0,#0                 ;2441
0027fa  d0ee              BEQ      |L1.10202|
0027fc  230f              MOVS     r3,#0xf               ;2444
0027fe  2200              MOVS     r2,#0                 ;2444
002800  216e              MOVS     r1,#0x6e              ;2444
002802  20e1              MOVS     r0,#0xe1              ;2444
002804  f7fffffe          BL       mess_send
002808  f9b60008          LDRSH    r0,[r6,#8]            ;2446  ; bat
00280c  f7fffffe          BL       abs
002810  f9b91000          LDRSH    r1,[r9,#0]            ;2446  ; IKB
002814  4288              CMP      r0,r1                 ;2446
002816  dd07              BLE      |L1.10280|
002818  7820              LDRB     r0,[r4,#0]            ;2448  ; kb_start
00281a  2801              CMP      r0,#1                 ;2448
00281c  d104              BNE      |L1.10280|
00281e  7025              STRB     r5,[r4,#0]            ;2450
002820  2100              MOVS     r1,#0                 ;2451
002822  4608              MOV      r0,r1                 ;2451
002824  f7fffffe          BL       avar_bat_hndl
                  |L1.10280|
002828  f9b60054          LDRSH    r0,[r6,#0x54]         ;2455  ; bat
00282c  f7fffffe          BL       abs
002830  f9b91000          LDRSH    r1,[r9,#0]            ;2455  ; IKB
002834  4288              CMP      r0,r1                 ;2455
002836  dd06              BLE      |L1.10310|
002838  7860              LDRB     r0,[r4,#1]            ;2457  ; kb_start
00283a  2801              CMP      r0,#1                 ;2457
00283c  d103              BNE      |L1.10310|
00283e  7065              STRB     r5,[r4,#1]            ;2459
002840  2100              MOVS     r1,#0                 ;2460
002842  f7fffffe          BL       avar_bat_hndl
                  |L1.10310|
002846  f9ba0000          LDRSH    r0,[r10,#0]           ;2464  ; Ib_ips_termokompensat
00284a  f7fffffe          BL       abs
00284e  f9b91000          LDRSH    r1,[r9,#0]            ;2464  ; IKB
002852  4288              CMP      r0,r1                 ;2464
002854  dd08              BLE      |L1.10344|
002856  f898001d          LDRB     r0,[r8,#0x1d]         ;2466  ; kb_start_ips
00285a  2801              CMP      r0,#1                 ;2466
00285c  d104              BNE      |L1.10344|
00285e  f888501d          STRB     r5,[r8,#0x1d]         ;2468
002862  2000              MOVS     r0,#0                 ;2469
002864  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10344|
002868  7820              LDRB     r0,[r4,#0]            ;2474  ; kb_start
00286a  b930              CBNZ     r0,|L1.10362|
00286c  7860              LDRB     r0,[r4,#1]            ;2474  ; kb_start
00286e  b920              CBNZ     r0,|L1.10362|
002870  f898001d          LDRB     r0,[r8,#0x1d]         ;2474  ; kb_start_ips
002874  b908              CBNZ     r0,|L1.10362|
002876  f888501c          STRB     r5,[r8,#0x1c]         ;2476
                  |L1.10362|
00287a  20e6              MOVS     r0,#0xe6              ;2479
00287c  f7fffffe          BL       mess_find
002880  b118              CBZ      r0,|L1.10378|
002882  48b0              LDR      r0,|L1.11076|
002884  6800              LDR      r0,[r0,#0]            ;2479  ; mess_data
002886  28e7              CMP      r0,#0xe7              ;2479
002888  d00a              BEQ      |L1.10400|
                  |L1.10378|
00288a  48af              LDR      r0,|L1.11080|
00288c  49af              LDR      r1,|L1.11084|
00288e  f9b00000          LDRSH    r0,[r0,#0]            ;2479  ; USIGN
002892  f9b11000          LDRSH    r1,[r1,#0]            ;2479  ; load_U
002896  eb000080          ADD      r0,r0,r0,LSL #2       ;2479
00289a  ebb10f40          CMP      r1,r0,LSL #1          ;2479
                  |L1.10398|
00289e  da9c              BGE      |L1.10202|
                  |L1.10400|
0028a0  f888501c          STRB     r5,[r8,#0x1c]         ;2481
0028a4  7820              LDRB     r0,[r4,#0]            ;2482  ; kb_start
0028a6  4daa              LDR      r5,|L1.11088|
0028a8  2801              CMP      r0,#1                 ;2482
0028aa  d10f              BNE      |L1.10444|
0028ac  f9b90000          LDRSH    r0,[r9,#0]            ;2482  ; IKB
0028b0  f9b51000          LDRSH    r1,[r5,#0]            ;2482  ; load_I
0028b4  0040              LSLS     r0,r0,#1              ;2482
0028b6  fb90f0f7          SDIV     r0,r0,r7              ;2482
0028ba  4288              CMP      r0,r1                 ;2482
0028bc  da06              BGE      |L1.10444|
0028be  f896003d          LDRB     r0,[r6,#0x3d]         ;2482  ; bat
0028c2  07c0              LSLS     r0,r0,#31             ;2482
0028c4  d102              BNE      |L1.10444|
0028c6  2101              MOVS     r1,#1                 ;2482
0028c8  f7fffffe          BL       avar_bat_hndl
                  |L1.10444|
0028cc  7860              LDRB     r0,[r4,#1]            ;2483  ; kb_start
0028ce  2801              CMP      r0,#1                 ;2483
0028d0  d110              BNE      |L1.10484|
0028d2  f9b90000          LDRSH    r0,[r9,#0]            ;2483  ; IKB
0028d6  f9b51000          LDRSH    r1,[r5,#0]            ;2483  ; load_I
0028da  0040              LSLS     r0,r0,#1              ;2483
0028dc  fb90f0f7          SDIV     r0,r0,r7              ;2483
0028e0  4288              CMP      r0,r1                 ;2483
0028e2  da07              BGE      |L1.10484|
0028e4  f8960089          LDRB     r0,[r6,#0x89]         ;2483  ; bat
0028e8  07c0              LSLS     r0,r0,#31             ;2483
0028ea  d103              BNE      |L1.10484|
0028ec  2101              MOVS     r1,#1                 ;2483
0028ee  4608              MOV      r0,r1                 ;2483
0028f0  f7fffffe          BL       avar_bat_hndl
                  |L1.10484|
0028f4  f898001d          LDRB     r0,[r8,#0x1d]         ;2485  ; kb_start_ips
0028f8  2801              CMP      r0,#1                 ;2485
                  |L1.10490|
0028fa  f47faebd          BNE      |L1.9848|
0028fe  f9b90000          LDRSH    r0,[r9,#0]            ;2485  ; IKB
002902  f9b51000          LDRSH    r1,[r5,#0]            ;2485  ; load_I
002906  0040              LSLS     r0,r0,#1              ;2485
002908  fb90f0f7          SDIV     r0,r0,r7              ;2485
00290c  4288              CMP      r0,r1                 ;2485
00290e  dac6              BGE      |L1.10398|
002910  4890              LDR      r0,|L1.11092|
002912  f890003d          LDRB     r0,[r0,#0x3d]         ;2485  ; bat_ips
002916  07c0              LSLS     r0,r0,#31             ;2485
002918  d1ef              BNE      |L1.10490|
00291a  e8bd5ff0          POP      {r4-r12,lr}           ;2485
00291e  2001              MOVS     r0,#1                 ;2485
002920  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2491   
                          ENDP

                  samokalibr_hndl PROC
;;;2500   //-----------------------------------------------
;;;2501   void samokalibr_hndl(void)
002924  4770              BX       lr
;;;2502   {
;;;2503   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2504   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2505   
;;;2506   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2507   	{
;;;2508   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2509   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2510   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2511   	} 
;;;2512   
;;;2513   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2514   	{
;;;2515   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2516   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2517   	
;;;2518   	}
;;;2519   #endif	 	
;;;2520   }
;;;2521   
                          ENDP

                  ubat_old_drv PROC
;;;2524   //-----------------------------------------------
;;;2525   void ubat_old_drv(void)
002926  b510              PUSH     {r4,lr}
;;;2526   {        
;;;2527   bat_u_old_cnt++;
002928  4c8b              LDR      r4,|L1.11096|
00292a  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
00292c  f1000001          ADD      r0,r0,#1
002930  8020              STRH     r0,[r4,#0]
;;;2528   gran_ring(&bat_u_old_cnt,0,8);
002932  f04f0208          MOV      r2,#8
002936  f04f0100          MOV      r1,#0
00293a  4620              MOV      r0,r4
00293c  f7fffffe          BL       gran_ring
;;;2529   
;;;2530   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002940  4986              LDR      r1,|L1.11100|
002942  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002946  eb010040          ADD      r0,r1,r0,LSL #1
00294a  884a              LDRH     r2,[r1,#2]  ; bat
00294c  8402              STRH     r2,[r0,#0x20]
;;;2531   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
00294e  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002952  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2532   }
002956  bd10              POP      {r4,pc}
;;;2533   
                          ENDP

                  unet_drv PROC
;;;2534   //-----------------------------------------------
;;;2535   void unet_drv(void)
002958  e92d41f0          PUSH     {r4-r8,lr}
;;;2536   {
;;;2537   if(net_av_2min_timer)net_av_2min_timer--;
00295c  4980              LDR      r1,|L1.11104|
00295e  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002962  b110              CBZ      r0,|L1.10602|
002964  f1a00001          SUB      r0,r0,#1
002968  8008              STRH     r0,[r1,#0]
                  |L1.10602|
;;;2538   
;;;2539   if(net_U<UMN)
00296a  f8df81f8          LDR      r8,|L1.11108|
00296e  487e              LDR      r0,|L1.11112|
;;;2540   	{
;;;2541   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002970  4a7f              LDR      r2,|L1.11120|
;;;2542   		{
;;;2543   		unet_drv_cnt++;
;;;2544   		if(unet_drv_cnt>=10)
;;;2545   			{
;;;2546   			net_Ustore=net_U;
;;;2547   		 	avar_unet_hndl(1);
;;;2548   			
;;;2549   			}
;;;2550   		}
;;;2551   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2552   
;;;2553   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2554   	}
;;;2555   
;;;2556   else if(net_U>UMN)
;;;2557   	{                 
;;;2558   	if(unet_drv_cnt)
;;;2559   		{
;;;2560   		unet_drv_cnt--;
;;;2561   		if(unet_drv_cnt<=0)
;;;2562   			{
;;;2563   			avar_unet_hndl(0);
;;;2564   			avar_bps_reset_cnt=10;
002972  4c72              LDR      r4,|L1.11068|
002974  f9b81000          LDRSH    r1,[r8,#0]            ;2539  ; net_U
002978  f9b03000          LDRSH    r3,[r0,#0]            ;2539  ; UMN
00297c  4e7b              LDR      r6,|L1.11116|
00297e  f9920000          LDRSB    r0,[r2,#0]            ;2541
002982  250a              MOVS     r5,#0xa               ;2551
002984  3c94              SUBS     r4,r4,#0x94
002986  4299              CMP      r1,r3                 ;2539
002988  da1c              BGE      |L1.10692|
00298a  4f7a              LDR      r7,|L1.11124|
00298c  280a              CMP      r0,#0xa               ;2541
00298e  da0e              BGE      |L1.10670|
002990  f9b63000          LDRSH    r3,[r6,#0]            ;2541  ; main_1Hz_cnt
002994  2b0f              CMP      r3,#0xf               ;2541
002996  dd0a              BLE      |L1.10670|
002998  f1000001          ADD      r0,r0,#1              ;2543
00299c  b240              SXTB     r0,r0                 ;2543
00299e  7010              STRB     r0,[r2,#0]            ;2543
0029a0  280a              CMP      r0,#0xa               ;2544
0029a2  db07              BLT      |L1.10676|
0029a4  8039              STRH     r1,[r7,#0]            ;2546
0029a6  2001              MOVS     r0,#1                 ;2547
0029a8  f7fffffe          BL       avar_unet_hndl
0029ac  e002              B        |L1.10676|
                  |L1.10670|
0029ae  280a              CMP      r0,#0xa               ;2551
0029b0  db00              BLT      |L1.10676|
0029b2  7015              STRB     r5,[r2,#0]            ;2551
                  |L1.10676|
0029b4  f9b80000          LDRSH    r0,[r8,#0]            ;2553  ; net_U
0029b8  f9b71000          LDRSH    r1,[r7,#0]            ;2553  ; net_Ustore
0029bc  4288              CMP      r0,r1                 ;2553
0029be  da0e              BGE      |L1.10718|
0029c0  8038              STRH     r0,[r7,#0]            ;2553
0029c2  e00c              B        |L1.10718|
                  |L1.10692|
0029c4  dd0b              BLE      |L1.10718|
0029c6  b150              CBZ      r0,|L1.10718|
0029c8  f1a00001          SUB      r0,r0,#1              ;2560
0029cc  b240              SXTB     r0,r0                 ;2560
0029ce  7010              STRB     r0,[r2,#0]            ;2560
0029d0  2800              CMP      r0,#0                 ;2561
0029d2  dc04              BGT      |L1.10718|
0029d4  2000              MOVS     r0,#0                 ;2563
0029d6  f7fffffe          BL       avar_unet_hndl
0029da  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10718|
;;;2565   			}
;;;2566   		}
;;;2567   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2568   	
;;;2569   	}
;;;2570   //#ifdef UKU_6U || UKU_ZVU
;;;2571   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2572   if(net_Umax>UMAXN) //o_11
0029de  f8df8198          LDR      r8,|L1.11128|
0029e2  4866              LDR      r0,|L1.11132|
;;;2573   	{
;;;2574   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
0029e4  4a66              LDR      r2,|L1.11136|
0029e6  f9b81000          LDRSH    r1,[r8,#0]            ;2572  ; net_Umax
0029ea  f9b00000          LDRSH    r0,[r0,#0]            ;2572  ; UMAXN
0029ee  4281              CMP      r1,r0                 ;2572
0029f0  dd1e              BLE      |L1.10800|
0029f2  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
;;;2575   		{
;;;2576   		unet_max_drv_cnt++;
;;;2577   		if(unet_max_drv_cnt>=10)
;;;2578   			{
;;;2579   			net_Ustore_max=net_Umax; //o_11
0029f6  4f63              LDR      r7,|L1.11140|
0029f8  280a              CMP      r0,#0xa               ;2574
0029fa  da0e              BGE      |L1.10778|
0029fc  f9b63000          LDRSH    r3,[r6,#0]            ;2574  ; main_1Hz_cnt
002a00  2b0f              CMP      r3,#0xf               ;2574
002a02  dd0a              BLE      |L1.10778|
002a04  f1000001          ADD      r0,r0,#1              ;2576
002a08  b240              SXTB     r0,r0                 ;2576
002a0a  7010              STRB     r0,[r2,#0]            ;2576
002a0c  280a              CMP      r0,#0xa               ;2577
002a0e  db07              BLT      |L1.10784|
002a10  8039              STRH     r1,[r7,#0]
;;;2580   		 	avar_unet_hndl(2);
002a12  2002              MOVS     r0,#2
002a14  f7fffffe          BL       avar_unet_hndl
002a18  e002              B        |L1.10784|
                  |L1.10778|
;;;2581   			
;;;2582   			}
;;;2583   		}
;;;2584   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002a1a  280a              CMP      r0,#0xa
002a1c  db00              BLT      |L1.10784|
002a1e  7015              STRB     r5,[r2,#0]
                  |L1.10784|
;;;2585   
;;;2586   	if(net_Umax>net_Ustore_max) net_Ustore_max=net_Umax; //o_11	
002a20  f9b80000          LDRSH    r0,[r8,#0]  ; net_Umax
002a24  f9b71000          LDRSH    r1,[r7,#0]  ; net_Ustore_max
002a28  4288              CMP      r0,r1
002a2a  dd10              BLE      |L1.10830|
002a2c  8038              STRH     r0,[r7,#0]
002a2e  e00e              B        |L1.10830|
                  |L1.10800|
;;;2587   	}
;;;2588   
;;;2589   else if(net_Umax<UMAXN) //o_11
002a30  da0d              BGE      |L1.10830|
;;;2590   	{                 
;;;2591   	if(unet_max_drv_cnt)
002a32  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002a36  b150              CBZ      r0,|L1.10830|
;;;2592   		{
;;;2593   		unet_max_drv_cnt--;
002a38  f1a00001          SUB      r0,r0,#1
002a3c  b240              SXTB     r0,r0
002a3e  7010              STRB     r0,[r2,#0]
;;;2594   		if(unet_max_drv_cnt<=0)
002a40  2800              CMP      r0,#0
002a42  dc04              BGT      |L1.10830|
;;;2595   			{
;;;2596   			avar_unet_hndl(4); //o_11
002a44  2004              MOVS     r0,#4
002a46  f7fffffe          BL       avar_unet_hndl
;;;2597   			avar_bps_reset_cnt=10;
002a4a  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10830|
;;;2598   			}
;;;2599   		}
;;;2600   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2601   	
;;;2602   	}
;;;2603   #endif /*UKU_6U*/
;;;2604   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a4e  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002a52  2800              CMP      r0,#0
002a54  d003              BEQ      |L1.10846|
002a56  f1a00001          SUB      r0,r0,#1
002a5a  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10846|
;;;2605   }
002a5e  e8bd81f0          POP      {r4-r8,pc}
;;;2606   
                          ENDP

                  matemat PROC
;;;2608   //-----------------------------------------------
;;;2609   void matemat(void)
002a62  e92d5fff          PUSH     {r0-r12,lr}
;;;2610   {
;;;2611   //signed short temp_SS;
;;;2612   signed long temp_SL/*,temp_SL_*/;
;;;2613   char /*temp,*/i;
;;;2614   //signed short temp_SS;
;;;2615   
;;;2616   #ifdef UKU_MGTS
;;;2617   //напряжение сети
;;;2618   temp_SL=(signed long)net_buff_;
;;;2619   temp_SL*=Kunet;
;;;2620   temp_SL/=110000L;
;;;2621   net_U=(signed short)temp_SL;
;;;2622   #endif
;;;2623   
;;;2624   #ifdef UKU_RSTKM
;;;2625   //напряжение сети
;;;2626   temp_SL=(signed long)net_buff_;
;;;2627   temp_SL*=Kunet;
;;;2628   temp_SL/=110000L;
;;;2629   net_U=(signed short)temp_SL;
;;;2630   #endif
;;;2631   
;;;2632   #ifdef UKU_3U
;;;2633   //напряжение сети
;;;2634   temp_SL=(signed long)net_buff_;
;;;2635   temp_SL*=Kunet;
;;;2636   temp_SL/=36000L;
;;;2637   net_U=(signed short)temp_SL;
;;;2638   #endif
;;;2639   
;;;2640   #ifdef UKU_6U
;;;2641   //напряжение сети
;;;2642   
;;;2643   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2644   	{
;;;2645   
;;;2646   	if(bps[11]._device==dNET_METR)
;;;2647   		{
;;;2648   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2649   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2650   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2651   
;;;2652   		temp_SL=(signed long)net_metr_buff_[0];
;;;2653   		temp_SL*=KunetA;
;;;2654   		temp_SL/=6000L;
;;;2655   		net_Ua=(signed short)temp_SL;
;;;2656   	
;;;2657   		temp_SL=(signed long)net_metr_buff_[1];
;;;2658   		temp_SL*=KunetB;
;;;2659   		temp_SL/=6000L;
;;;2660   		net_Ub=(signed short)temp_SL;
;;;2661   	
;;;2662   		temp_SL=(signed long)net_metr_buff_[2];
;;;2663   		temp_SL*=KunetC;
;;;2664   		temp_SL/=6000L;
;;;2665   		net_Uc=(signed short)temp_SL;
;;;2666   		}
;;;2667   	else
;;;2668   		{
;;;2669   		temp_SL=(signed long)net_buff_;
;;;2670   		temp_SL*=KunetA;
;;;2671   		temp_SL/=110000L;
;;;2672   		net_Ua=(signed short)temp_SL;
;;;2673   	
;;;2674   		temp_SL=(signed long)adc_buff_[3];
;;;2675   		temp_SL*=KunetB;
;;;2676   		temp_SL/=6000L;
;;;2677   		net_Ub=(signed short)temp_SL;
;;;2678   	
;;;2679   		temp_SL=(signed long)adc_buff_[10];
;;;2680   		temp_SL*=KunetC;
;;;2681   		temp_SL/=6000L;
;;;2682   		net_Uc=(signed short)temp_SL;
;;;2683   		}
;;;2684   
;;;2685   	net_U=net_Ua;
;;;2686   	if(net_Ub<net_U)net_U=net_Ub;
;;;2687   	if(net_Uc<net_U)net_U=net_Uc;
;;;2688   	//o_10_s
;;;2689   	net_Umax=net_Ua;
;;;2690   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2691   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2692   	//o_10_e
;;;2693   	}
;;;2694   else 
;;;2695   	{
;;;2696   	temp_SL=(signed long)net_buff_;
;;;2697   	temp_SL*=Kunet;
;;;2698   	temp_SL/=110000L;
;;;2699   	net_U=(signed short)temp_SL;
;;;2700   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2701   	}
;;;2702   
;;;2703   
;;;2704   
;;;2705   
;;;2706   #endif
;;;2707   
;;;2708   #ifdef UKU_GLONASS
;;;2709   //напряжение сети
;;;2710   temp_SL=(signed long)net_buff_;
;;;2711   temp_SL*=Kunet;
;;;2712   temp_SL/=110000L;
;;;2713   net_U=(signed short)temp_SL;
;;;2714   #endif
;;;2715   
;;;2716   #ifdef UKU_KONTUR
;;;2717   //напряжение сети
;;;2718   temp_SL=(signed long)net_buff_;
;;;2719   temp_SL*=Kunet;
;;;2720   temp_SL/=110000L;
;;;2721   net_U=(signed short)temp_SL;
;;;2722   #endif
;;;2723   
;;;2724   #ifdef IPS_SGEP_GAZPROM
;;;2725   //напряжение сети
;;;2726   temp_SL=(signed long)net_buff_;
;;;2727   temp_SL*=Kunet;
;;;2728   temp_SL/=110000L;
;;;2729   net_U=(signed short)temp_SL;
;;;2730   #endif
;;;2731   
;;;2732   #ifdef UKU_220_V2
;;;2733   //напряжение сети
;;;2734   
;;;2735   if(AUSW_MAIN==22033)
;;;2736   	{
;;;2737   	temp_SL=(signed long)net_buff_;
;;;2738   	temp_SL*=KunetA;
;;;2739   	temp_SL/=6000L;
;;;2740   	net_Ua=(signed short)temp_SL;
;;;2741   
;;;2742   	temp_SL=(signed long)adc_buff_[3];
;;;2743   	temp_SL*=KunetB;
;;;2744   	temp_SL/=6000L;
;;;2745   	net_Ub=(signed short)temp_SL;
;;;2746   
;;;2747   	temp_SL=(signed long)adc_buff_[10];
;;;2748   	temp_SL*=KunetC;
;;;2749   	temp_SL/=6000L;
;;;2750   	net_Uc=(signed short)temp_SL;
;;;2751   
;;;2752   	net_U=net_Ua;
;;;2753   	if(net_Ub<net_U)net_U=net_Ub;
;;;2754   	if(net_Uc<net_U)net_U=net_Uc;
;;;2755   	}
;;;2756   else
;;;2757   	{
;;;2758   	temp_SL=(signed long)net_buff_;
;;;2759   	temp_SL*=Kunet;
;;;2760   	temp_SL/=5000L;
;;;2761   	net_U=(signed short)temp_SL;
;;;2762   	}
;;;2763   #endif
;;;2764   
;;;2765   
;;;2766   #ifdef UKU_220
;;;2767   //напряжение сети
;;;2768   
;;;2769   if(AUSW_MAIN==22035)
;;;2770   	{
;;;2771   	temp_SL=(signed long)net_buff_;
;;;2772   	temp_SL*=KunetA;
;;;2773   	temp_SL/=6000L;
;;;2774   	net_Ua=(signed short)temp_SL;
;;;2775   
;;;2776   	temp_SL=(signed long)adc_buff_[3];
;;;2777   	temp_SL*=KunetB;
;;;2778   	temp_SL/=6000L;
;;;2779   	net_Ub=(signed short)temp_SL;
;;;2780   
;;;2781   	temp_SL=(signed long)adc_buff_[10];
;;;2782   	temp_SL*=KunetC;
;;;2783   	temp_SL/=6000L;
;;;2784   	net_Uc=(signed short)temp_SL;
;;;2785   
;;;2786   	net_U=net_Ua;
;;;2787   	if(net_Ub<net_U)net_U=net_Ub;
;;;2788   	if(net_Uc<net_U)net_U=net_Uc;
;;;2789   	}
;;;2790   else
;;;2791   	{
;;;2792   	temp_SL=(signed long)net_buff_;
;;;2793   	temp_SL*=Kunet;
;;;2794   	#ifdef _ACDC_
;;;2795   	temp_SL/=500L;
;;;2796   	#else
;;;2797   	temp_SL/=5000L;
;;;2798   	#endif
;;;2799   	net_U=(signed short)temp_SL;
;;;2800   	
;;;2801   	}
;;;2802   #endif
;;;2803   
;;;2804   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2805   //напряжение сети
;;;2806   
;;;2807   
;;;2808   	if(bps[11]._device==dNET_METR)
002a66  4848              LDR      r0,|L1.11144|
;;;2809   		{
;;;2810   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2811   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2812   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2813   
;;;2814   		temp_SL=(signed long)net_metr_buff_[2];
;;;2815   		temp_SL*=KunetA;
002a68  4a48              LDR      r2,|L1.11148|
;;;2816   		temp_SL/=6000L;
;;;2817   		net_Ua=(signed short)temp_SL;
;;;2818   	
;;;2819   		temp_SL=(signed long)net_metr_buff_[1];
;;;2820   		temp_SL*=KunetB;
;;;2821   		temp_SL/=6000L;
;;;2822   		net_Ub=(signed short)temp_SL;
;;;2823   	
;;;2824   		temp_SL=(signed long)net_metr_buff_[0];
;;;2825   		temp_SL*=KunetC;
002a6a  4b4a              LDR      r3,|L1.11156|
002a6c  f890044c          LDRB     r0,[r0,#0x44c]        ;2808  ; bps
002a70  9003              STR      r0,[sp,#0xc]          ;2815
002a72  4947              LDR      r1,|L1.11152|
;;;2826   		temp_SL/=6000L;
;;;2827   		net_Uc=(signed short)temp_SL;
;;;2828   
;;;2829   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2830   
;;;2831   		net_U=net_Ua;
;;;2832   		if(net_Ub<net_U)net_U=net_Ub;
;;;2833   		if(net_Uc<net_U)net_U=net_Uc;
;;;2834   		//o_10_s
;;;2835   		net_Umax=net_Ua;
;;;2836   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2837   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2838   		//o_10_e
;;;2839   		}
;;;2840   	  else if(AUSW_MAIN==22033)
;;;2841   	{
;;;2842   	temp_SL=(signed long)net_buff_;
002a74  4e31              LDR      r6,|L1.11068|
002a76  f9b28000          LDRSH    r8,[r2,#0]            ;2815
002a7a  f9b39000          LDRSH    r9,[r3,#0]            ;2825
002a7e  f9b12000          LDRSH    r2,[r1,#0]            ;2820
002a82  f8dfc114          LDR      r12,|L1.11160|
002a86  4d45              LDR      r5,|L1.11164|
002a88  4c45              LDR      r4,|L1.11168|
002a8a  4b3b              LDR      r3,|L1.11128|
002a8c  3e94              SUBS     r6,r6,#0x94
002a8e  2807              CMP      r0,#7                 ;2808
002a90  d040              BEQ      |L1.11028|
002a92  4631              MOV      r1,r6
;;;2843   	temp_SL*=KunetA;
;;;2844   	temp_SL/=4000L;
;;;2845   	net_Ua=(signed short)temp_SL;
;;;2846   
;;;2847   	temp_SL=(signed long)adc_buff_[3];
002a94  f8dfa110          LDR      r10,|L1.11176|
002a98  8f4f              LDRH     r7,[r1,#0x3a]         ;2842
002a9a  493c              LDR      r1,|L1.11148|
002a9c  4a3c              LDR      r2,|L1.11152|
002a9e  f2417970          MOV      r9,#0x1770            ;2816
002aa2  f9b11000          LDRSH    r1,[r1,#0]            ;2815
002aa6  f9b22000          LDRSH    r2,[r2,#0]            ;2820
002aaa  434f              MULS     r7,r1,r7              ;2843
002aac  f9ba1006          LDRSH    r1,[r10,#6]
002ab0  483c              LDR      r0,|L1.11172|
;;;2848   	temp_SL*=KunetB;
002ab2  4351              MULS     r1,r2,r1
;;;2849   	temp_SL/=6000L;
002ab4  fb91f1f9          SDIV     r1,r1,r9
;;;2850   	net_Ub=(signed short)temp_SL;
002ab8  b20a              SXTH     r2,r1
;;;2851   
;;;2852   	temp_SL=(signed long)adc_buff_[10];
002aba  f9ba1014          LDRSH    r1,[r10,#0x14]
002abe  f8dfa0d4          LDR      r10,|L1.11156|
002ac2  8800              LDRH     r0,[r0,#0]            ;2840  ; AUSW_MAIN
002ac4  f2456811          MOV      r8,#0x5611            ;2840
002ac8  f9baa000          LDRSH    r10,[r10,#0]          ;2825
002acc  4540              CMP      r0,r8                 ;2840
;;;2853   	temp_SL*=KunetC;
002ace  fb01f10a          MUL      r1,r1,r10
;;;2854   	temp_SL/=6000L;
002ad2  fb91f1f9          SDIV     r1,r1,r9
;;;2855   	net_Uc=(signed short)temp_SL;
002ad6  b209              SXTH     r1,r1
002ad8  d12f              BNE      |L1.11066|
002ada  f44f607a          MOV      r0,#0xfa0             ;2844
002ade  fb97f0f0          SDIV     r0,r7,r0              ;2844
002ae2  b200              SXTH     r0,r0                 ;2845
002ae4  f8ac0000          STRH     r0,[r12,#0]           ;2845
002ae8  802a              STRH     r2,[r5,#0]            ;2850
002aea  8021              STRH     r1,[r4,#0]
;;;2856   
;;;2857   	net_U=net_Ua;
002aec  4c1d              LDR      r4,|L1.11108|
002aee  8020              STRH     r0,[r4,#0]
;;;2858   	if(net_Ub<net_U)net_U=net_Ub;
002af0  4282              CMP      r2,r0
002af2  da00              BGE      |L1.10998|
002af4  8022              STRH     r2,[r4,#0]
                  |L1.10998|
;;;2859   	if(net_Uc<net_U)net_U=net_Uc;
002af6  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002afa  42a9              CMP      r1,r5
002afc  da00              BGE      |L1.11008|
002afe  8021              STRH     r1,[r4,#0]
                  |L1.11008|
;;;2860   	//o_10_s
;;;2861   	net_Umax=net_Ua;
002b00  8018              STRH     r0,[r3,#0]
;;;2862   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002b02  4282              CMP      r2,r0
002b04  dd00              BLE      |L1.11016|
002b06  801a              STRH     r2,[r3,#0]
                  |L1.11016|
;;;2863   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002b08  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002b0c  4281              CMP      r1,r0
002b0e  dd00              BLE      |L1.11026|
002b10  8019              STRH     r1,[r3,#0]
                  |L1.11026|
002b12  e0d1              B        |L1.11448|
                  |L1.11028|
002b14  4925              LDR      r1,|L1.11180|
002b16  7808              LDRB     r0,[r1,#0]            ;2810  ; bps
002b18  784f              LDRB     r7,[r1,#1]            ;2810  ; bps
002b1a  eb002007          ADD      r0,r0,r7,LSL #8       ;2810
002b1e  4f07              LDR      r7,|L1.11068|
002b20  b280              UXTH     r0,r0                 ;2810
002b22  f1070758          ADD      r7,r7,#0x58           ;2810
002b26  8038              STRH     r0,[r7,#0]            ;2810
002b28  f891a002          LDRB     r10,[r1,#2]           ;2811  ; bps
002b2c  f891b003          LDRB     r11,[r1,#3]           ;2811  ; bps
002b30  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2811
002b34  fa1ffa8a          UXTH     r10,r10               ;2811
002b38  e03a              B        |L1.11184|
                  |L1.11066|
002b3a  e074              B        |L1.11302|
                  |L1.11068|
                          DCD      ||area_number.26||+0x94
                  |L1.11072|
                          DCD      KB_ALGORITM
                  |L1.11076|
                          DCD      mess_data
                  |L1.11080|
                          DCD      USIGN
                  |L1.11084|
                          DCD      load_U
                  |L1.11088|
                          DCD      load_I
                  |L1.11092|
                          DCD      bat_ips
                  |L1.11096|
                          DCD      bat_u_old_cnt
                  |L1.11100|
                          DCD      bat
                  |L1.11104|
                          DCD      net_av_2min_timer
                  |L1.11108|
                          DCD      net_U
                  |L1.11112|
                          DCD      UMN
                  |L1.11116|
                          DCD      main_1Hz_cnt
                  |L1.11120|
                          DCD      unet_drv_cnt
                  |L1.11124|
                          DCD      net_Ustore
                  |L1.11128|
                          DCD      net_Umax
                  |L1.11132|
                          DCD      UMAXN
                  |L1.11136|
                          DCD      unet_max_drv_cnt
                  |L1.11140|
                          DCD      net_Ustore_max
                  |L1.11144|
                          DCD      bps
                  |L1.11148|
                          DCD      KunetA
                  |L1.11152|
                          DCD      KunetB
                  |L1.11156|
                          DCD      KunetC
                  |L1.11160|
                          DCD      net_Ua
                  |L1.11164|
                          DCD      net_Ub
                  |L1.11168|
                          DCD      net_Uc
                  |L1.11172|
                          DCD      AUSW_MAIN
                  |L1.11176|
                          DCD      ||.bss||+0x40c
                  |L1.11180|
                          DCD      bps+0x452
                  |L1.11184|
002bb0  f8a7a002          STRH     r10,[r7,#2]           ;2811
002bb4  f891b004          LDRB     r11,[r1,#4]           ;2812  ; bps
002bb8  f891e005          LDRB     lr,[r1,#5]            ;2812  ; bps
002bbc  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2812
002bc0  fa1ffb8b          UXTH     r11,r11               ;2812
002bc4  f8a7b004          STRH     r11,[r7,#4]           ;2812
002bc8  fb0bfb08          MUL      r11,r11,r8            ;2815
002bcc  f2417870          MOV      r8,#0x1770            ;2816
002bd0  fb9bf7f8          SDIV     r7,r11,r8             ;2816
002bd4  b23f              SXTH     r7,r7                 ;2817
002bd6  f8ac7000          STRH     r7,[r12,#0]           ;2817
002bda  fb0afa02          MUL      r10,r10,r2            ;2820
002bde  fb9af2f8          SDIV     r2,r10,r8             ;2821
002be2  b212              SXTH     r2,r2                 ;2822
002be4  802a              STRH     r2,[r5,#0]            ;2822
002be6  fb00f009          MUL      r0,r0,r9              ;2825
002bea  fb90f0f8          SDIV     r0,r0,r8              ;2826
002bee  b200              SXTH     r0,r0                 ;2827
002bf0  8020              STRH     r0,[r4,#0]            ;2827
002bf2  798c              LDRB     r4,[r1,#6]            ;2829  ; bps
002bf4  79c9              LDRB     r1,[r1,#7]            ;2829  ; bps
002bf6  eb042401          ADD      r4,r4,r1,LSL #8       ;2829
002bfa  49ff              LDR      r1,|L1.12280|
002bfc  800c              STRH     r4,[r1,#0]            ;2829
002bfe  49ff              LDR      r1,|L1.12284|
002c00  800f              STRH     r7,[r1,#0]            ;2831
002c02  42ba              CMP      r2,r7                 ;2832
002c04  da00              BGE      |L1.11272|
002c06  800a              STRH     r2,[r1,#0]            ;2832
                  |L1.11272|
002c08  f9b14000          LDRSH    r4,[r1,#0]            ;2833  ; net_U
002c0c  42a0              CMP      r0,r4                 ;2833
002c0e  da00              BGE      |L1.11282|
002c10  8008              STRH     r0,[r1,#0]            ;2833
                  |L1.11282|
002c12  801f              STRH     r7,[r3,#0]            ;2835
002c14  42ba              CMP      r2,r7                 ;2836
002c16  dd00              BLE      |L1.11290|
002c18  801a              STRH     r2,[r3,#0]            ;2836
                  |L1.11290|
002c1a  f9b31000          LDRSH    r1,[r3,#0]            ;2837  ; net_Umax
002c1e  4288              CMP      r0,r1                 ;2837
002c20  dd4a              BLE      |L1.11448|
002c22  8018              STRH     r0,[r3,#0]            ;2837
002c24  e048              B        |L1.11448|
                  |L1.11302|
;;;2864   	//o_10_e
;;;2865   	}
;;;2866   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002c26  f5a048ac          SUB      r8,r0,#0x5600
002c2a  f1b8082f          SUBS     r8,r8,#0x2f
002c2e  d00b              BEQ      |L1.11336|
002c30  f1180828          ADDS     r8,r8,#0x28
002c34  d008              BEQ      |L1.11336|
002c36  f1b80814          SUBS     r8,r8,#0x14
002c3a  d005              BEQ      |L1.11336|
002c3c  f1b80801          SUBS     r8,r8,#1
002c40  d002              BEQ      |L1.11336|
002c42  f118081a          ADDS     r8,r8,#0x1a
002c46  d11c              BNE      |L1.11394|
                  |L1.11336|
;;;2867   	{
;;;2868   	temp_SL=(signed long)net_buff_;
;;;2869   	temp_SL*=KunetA;
;;;2870   	temp_SL/=40000L;
002c48  f6494040          MOV      r0,#0x9c40
002c4c  fb97f0f0          SDIV     r0,r7,r0
;;;2871   	net_Ua=(signed short)temp_SL;
002c50  b200              SXTH     r0,r0
002c52  f8ac0000          STRH     r0,[r12,#0]
;;;2872   
;;;2873   	temp_SL=(signed long)adc_buff_[3];
;;;2874   	temp_SL*=KunetB;
;;;2875   	temp_SL/=6000L;
;;;2876   	net_Ub=(signed short)temp_SL;
002c56  802a              STRH     r2,[r5,#0]
;;;2877   
;;;2878   	temp_SL=(signed long)adc_buff_[10];
;;;2879   	temp_SL*=KunetC;
;;;2880   	temp_SL/=6000L;
;;;2881   	net_Uc=(signed short)temp_SL;
002c58  8021              STRH     r1,[r4,#0]
;;;2882   
;;;2883   	net_U=net_Ua;
002c5a  4ce8              LDR      r4,|L1.12284|
002c5c  8020              STRH     r0,[r4,#0]
;;;2884   	if(net_Ub<net_U)net_U=net_Ub;
002c5e  4282              CMP      r2,r0
002c60  da00              BGE      |L1.11364|
002c62  8022              STRH     r2,[r4,#0]
                  |L1.11364|
;;;2885   	if(net_Uc<net_U)net_U=net_Uc;
002c64  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002c68  42a9              CMP      r1,r5
002c6a  da00              BGE      |L1.11374|
002c6c  8021              STRH     r1,[r4,#0]
                  |L1.11374|
;;;2886   	//o_10_s
;;;2887   	net_Umax=net_Ua;
002c6e  8018              STRH     r0,[r3,#0]
;;;2888   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002c70  4282              CMP      r2,r0
002c72  dd00              BLE      |L1.11382|
002c74  801a              STRH     r2,[r3,#0]
                  |L1.11382|
;;;2889   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002c76  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002c7a  4281              CMP      r1,r0
002c7c  dd1c              BLE      |L1.11448|
002c7e  8019              STRH     r1,[r3,#0]
002c80  e01a              B        |L1.11448|
                  |L1.11394|
;;;2890   	//o_10_e
;;;2891   	}
;;;2892   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2893   	{
;;;2894   	temp_SL=(signed long)net_buff_;
;;;2895   	temp_SL*=Kunet;
002c82  49df              LDR      r1,|L1.12288|
002c84  f5a044aa          SUB      r4,r0,#0x5500         ;2892
002c88  f9b12000          LDRSH    r2,[r1,#0]
002c8c  49dd              LDR      r1,|L1.12292|
002c8e  8f49              LDRH     r1,[r1,#0x3a]         ;2842
002c90  4351              MULS     r1,r2,r1
002c92  3cfa              SUBS     r4,r4,#0xfa           ;2892
002c94  d001              BEQ      |L1.11418|
002c96  1e62              SUBS     r2,r4,#1              ;2892
002c98  d107              BNE      |L1.11434|
                  |L1.11418|
;;;2896   	temp_SL/=35000L;
002c9a  f64800b8          MOV      r0,#0x88b8
002c9e  fb91f0f0          SDIV     r0,r1,r0
;;;2897   	net_U=(signed short)temp_SL;
002ca2  49d6              LDR      r1,|L1.12284|
002ca4  8008              STRH     r0,[r1,#0]
;;;2898   	net_Umax=net_U; //o_10
002ca6  8018              STRH     r0,[r3,#0]
002ca8  e006              B        |L1.11448|
                  |L1.11434|
;;;2899   	}
;;;2900   else
;;;2901   	{
;;;2902   	temp_SL=(signed long)net_buff_;
;;;2903   	temp_SL*=Kunet;
;;;2904   	#ifdef _ACDC_
;;;2905   	temp_SL/=500L;
002caa  f44f70fa          MOV      r0,#0x1f4
002cae  fb91f0f0          SDIV     r0,r1,r0
;;;2906   	#else
;;;2907   	temp_SL/=5000L;
;;;2908   	#endif
;;;2909   	net_U=(signed short)temp_SL;
002cb2  49d2              LDR      r1,|L1.12284|
002cb4  8008              STRH     r0,[r1,#0]
;;;2910   	net_Umax=net_U; //o_10
002cb6  8018              STRH     r0,[r3,#0]
                  |L1.11448|
;;;2911   	
;;;2912   	}
;;;2913   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002cb8  9803              LDR      r0,[sp,#0xc]
002cba  2807              CMP      r0,#7
002cbc  d003              BEQ      |L1.11462|
002cbe  48d2              LDR      r0,|L1.12296|
002cc0  8801              LDRH     r1,[r0,#0]  ; net_F
002cc2  48cd              LDR      r0,|L1.12280|
002cc4  8001              STRH     r1,[r0,#0]
                  |L1.11462|
;;;2914   #endif
;;;2915   
;;;2916   #ifdef UKU_TELECORE2015
;;;2917   //напряжение сети
;;;2918   temp_SL=(signed long)net_buff_;
;;;2919   temp_SL*=Kunet;
;;;2920   temp_SL/=110000L;
;;;2921   net_U=(signed short)temp_SL;
;;;2922   #endif
;;;2923   
;;;2924   #ifdef UKU_TELECORE2017
;;;2925   //напряжение сети
;;;2926   temp_SL=(signed long)net_buff_;
;;;2927   temp_SL*=Kunet;
;;;2928   temp_SL/=110000L;
;;;2929   net_U=(signed short)temp_SL;
;;;2930   #endif
;;;2931   
;;;2932   
;;;2933   #ifdef UKU_FSO
;;;2934   //напряжение сети
;;;2935   if(NUMPHASE==1)
;;;2936   	{
;;;2937   	temp_SL=(signed long)net_buff_;
;;;2938   	temp_SL*=Kunet;
;;;2939   	temp_SL/=110000L;
;;;2940   	net_U=(signed short)temp_SL;
;;;2941   	net_Umax=net_U;
;;;2942   	}
;;;2943   else
;;;2944   	{
;;;2945   	temp_SL=(signed long)net_buff_;
;;;2946   	temp_SL*=KunetA;
;;;2947   	temp_SL/=40000L;
;;;2948   	net_Ua=(signed short)temp_SL;
;;;2949   
;;;2950   	temp_SL=(signed long)adc_buff_[3];
;;;2951   	temp_SL*=KunetB;
;;;2952   	temp_SL/=6000L;
;;;2953   	net_Ub=(signed short)temp_SL;
;;;2954   
;;;2955   	temp_SL=(signed long)adc_buff_[10];
;;;2956   	temp_SL*=KunetC;
;;;2957   	temp_SL/=6000L;
;;;2958   	net_Uc=(signed short)temp_SL;
;;;2959   
;;;2960   	net_U=net_Ua;
;;;2961   	if(net_Ub<net_U)net_U=net_Ub;
;;;2962   	if(net_Uc<net_U)net_U=net_Uc;
;;;2963   	//o_10_s
;;;2964   	net_Umax=net_Ua;
;;;2965   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2966   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2967   	}
;;;2968   #endif	//UKU_FSO
;;;2969   
;;;2970   //Напряжения батарей
;;;2971   temp_SL=(signed long)adc_buff_[0];
002cc6  4cd1              LDR      r4,|L1.12300|
002cc8  f9b41000          LDRSH    r1,[r4,#0]  ; adc_buff_
;;;2972   temp_SL*=Kubat[0];
002ccc  4ad0              LDR      r2,|L1.12304|
002cce  f9b20000          LDRSH    r0,[r2,#0]  ; Kubat
002cd2  4348              MULS     r0,r1,r0
;;;2973   temp_SL/=2000L;
002cd4  f44f68fa          MOV      r8,#0x7d0
002cd8  fb90f0f8          SDIV     r0,r0,r8
;;;2974   bat[0]._Ub=(signed short)temp_SL;
002cdc  4dcd              LDR      r5,|L1.12308|
002cde  8068              STRH     r0,[r5,#2]
;;;2975   
;;;2976   #ifdef UKU_220
;;;2977   //Напряжения батарей
;;;2978   temp_SL=(signed long)adc_buff_[0];
;;;2979   temp_SL*=Kubat[0];
;;;2980   temp_SL/=400L;
;;;2981   bat[0]._Ub=(signed short)temp_SL;
;;;2982   #endif
;;;2983   
;;;2984   #ifdef UKU_220_V2
;;;2985   //Напряжения батарей
;;;2986   temp_SL=(signed long)adc_buff_[0];
;;;2987   temp_SL*=Kubat[0];
;;;2988   temp_SL/=400L;
;;;2989   bat[0]._Ub=(signed short)temp_SL;
;;;2990   #endif
;;;2991   
;;;2992   //adc_buff_[4]=300;
;;;2993   
;;;2994   temp_SL=(signed long)adc_buff_[4];
002ce0  f9b40008          LDRSH    r0,[r4,#8]  ; adc_buff_
;;;2995   temp_SL*=Kubatm[0];
002ce4  4bcc              LDR      r3,|L1.12312|
002ce6  f9b31000          LDRSH    r1,[r3,#0]  ; Kubatm
002cea  fb01f100          MUL      r1,r1,r0
;;;2996   temp_SL/=700L;
002cee  f44f772f          MOV      r7,#0x2bc
002cf2  fb91f0f7          SDIV     r0,r1,r7
;;;2997   bat[0]._Ubm=(signed short)temp_SL;
002cf6  80a8              STRH     r0,[r5,#4]
;;;2998   
;;;2999   #ifdef UKU_KONTUR
;;;3000   temp_SL=(signed long)adc_buff_[4];
;;;3001   temp_SL*=Kubatm[0];
;;;3002   temp_SL/=2000L;
;;;3003   bat[0]._Ubm=(signed short)temp_SL;
;;;3004   #endif
;;;3005   
;;;3006   #ifdef UKU_6U
;;;3007   temp_SL=(signed long)adc_buff_[4];
;;;3008   temp_SL*=Kubatm[0];
;;;3009   temp_SL/=2000L;
;;;3010   bat[0]._Ubm=(signed short)temp_SL;
;;;3011   #endif
;;;3012   
;;;3013   temp_SL=(signed long)adc_buff_[12];
002cf8  f9b40018          LDRSH    r0,[r4,#0x18]  ; adc_buff_
;;;3014   temp_SL*=Kubat[1];
002cfc  f9b21002          LDRSH    r1,[r2,#2]  ; Kubat
002d00  fb01f100          MUL      r1,r1,r0
;;;3015   temp_SL/=2000L;
002d04  fb91f0f8          SDIV     r0,r1,r8
;;;3016   bat[1]._Ub=(signed short)temp_SL;
002d08  f8a5004e          STRH     r0,[r5,#0x4e]
;;;3017   
;;;3018   #ifdef UKU_220
;;;3019   temp_SL=(signed long)adc_buff_[12];
;;;3020   temp_SL*=Kubat[1];
;;;3021   temp_SL/=400L;
;;;3022   bat[1]._Ub=(signed short)temp_SL;
;;;3023   #endif
;;;3024   
;;;3025   #ifdef UKU_220_V2
;;;3026   temp_SL=(signed long)adc_buff_[12];
;;;3027   temp_SL*=Kubat[1];
;;;3028   temp_SL/=400L;
;;;3029   bat[1]._Ub=(signed short)temp_SL;
;;;3030   #endif
;;;3031   
;;;3032   //adc_buff_[1]=300;
;;;3033   
;;;3034   temp_SL=(signed long)adc_buff_[1];
002d0c  f9b41002          LDRSH    r1,[r4,#2]  ; adc_buff_
;;;3035   temp_SL*=Kubatm[1];
002d10  f9b30002          LDRSH    r0,[r3,#2]  ; Kubatm
002d14  fb00f001          MUL      r0,r0,r1
;;;3036   temp_SL/=700L;
002d18  fb90f0f7          SDIV     r0,r0,r7
;;;3037   bat[1]._Ubm=(signed short)temp_SL;
002d1c  f8a50050          STRH     r0,[r5,#0x50]
;;;3038   #ifdef UKU_KONTUR
;;;3039   temp_SL=(signed long)adc_buff_[1];
;;;3040   temp_SL*=Kubatm[1];
;;;3041   temp_SL/=2000L;
;;;3042   bat[1]._Ubm=(signed short)temp_SL;
;;;3043   #endif
;;;3044   #ifdef UKU_6U
;;;3045   temp_SL=(signed long)adc_buff_[1];
;;;3046   temp_SL*=Kubatm[1];
;;;3047   temp_SL/=2000L;
;;;3048   bat[1]._Ubm=(signed short)temp_SL;
;;;3049   #endif
;;;3050   
;;;3051   #ifdef UKU_TELECORE2015
;;;3052   temp_SL=(signed long)adc_buff_[2];
;;;3053   temp_SL*=Kubat[0];
;;;3054   temp_SL/=2000L;
;;;3055   bat[0]._Ub=(signed short)temp_SL;
;;;3056   #endif
;;;3057   
;;;3058   /*
;;;3059   //Токи батарей
;;;3060   if(!mess_find_unvol(MESS2MATEMAT))
;;;3061   	{
;;;3062   	temp_SL=(signed long)ad7705_buff_[0];
;;;3063   	temp_SL-=(signed long)Kibat0[0];
;;;3064   	temp_SL*=(signed long)Kibat1[0];
;;;3065   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3066   	else temp_SL/=1000L;
;;;3067   	bat[0]._Ib=(signed short)temp_SL;
;;;3068   
;;;3069   	temp_SL=(signed long)ad7705_buff_[1];
;;;3070   	temp_SL-=(signed long)Kibat0[1];
;;;3071   	temp_SL*=(signed long)Kibat1[1];
;;;3072   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3073   	else temp_SL/=1000L;
;;;3074   	bat[1]._Ib=(signed short)temp_SL;
;;;3075   	}
;;;3076   */
;;;3077   
;;;3078   
;;;3079   //Токи батарей
;;;3080   if(!mess_find_unvol(MESS2MATEMAT))
002d20  f04f00dc          MOV      r0,#0xdc
002d24  f7fffffe          BL       mess_find_unvol
;;;3081   	{
;;;3082   	temp_SL=(signed long)ad7705_buff_[0];
;;;3083   	temp_SL-=(signed long)Kibat0[0];
;;;3084   	temp_SL*=(signed long)Kibat1[0];
;;;3085   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3086   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d28  f2456913          MOV      r9,#0x5613
002d2c  bbf0              CBNZ     r0,|L1.11692|
002d2e  f8dfa2ec          LDR      r10,|L1.12316|
002d32  f8ba0000          LDRH     r0,[r10,#0]           ;3082  ; ad7705_buff_
002d36  f8dfb2e8          LDR      r11,|L1.12320|
002d3a  f8bb1000          LDRH     r1,[r11,#0]           ;3083  ; Kibat0
002d3e  eba00001          SUB      r0,r0,r1              ;3083
002d42  4ab8              LDR      r2,|L1.12324|
002d44  f9b21000          LDRSH    r1,[r2,#0]            ;3084  ; Kibat1
002d48  fb01f100          MUL      r1,r1,r0              ;3084
002d4c  48b6              LDR      r0,|L1.12328|
002d4e  f6456338          MOV      r3,#0x5e38            ;3085
002d52  f6456792          MOV      r7,#0x5e92            ;3085
002d56  8800              LDRH     r0,[r0,#0]            ;3085  ; AUSW_MAIN
002d58  f44f7c96          MOV      r12,#0x12c            ;3085
002d5c  4298              CMP      r0,r3                 ;3085
002d5e  d001              BEQ      |L1.11620|
002d60  42b8              CMP      r0,r7                 ;3085
002d62  d102              BNE      |L1.11626|
                  |L1.11620|
002d64  fb91f1fc          SDIV     r1,r1,r12             ;3085
002d68  e010              B        |L1.11660|
                  |L1.11626|
002d6a  f5a04ea8          SUB      lr,r0,#0x5400
002d6e  f5be7efd          SUBS     lr,lr,#0x1fa
002d72  d004              BEQ      |L1.11646|
002d74  4548              CMP      r0,r9
002d76  d002              BEQ      |L1.11646|
002d78  f1be0e17          SUBS     lr,lr,#0x17
002d7c  d102              BNE      |L1.11652|
                  |L1.11646|
002d7e  fb91f1f8          SDIV     r1,r1,r8
002d82  e003              B        |L1.11660|
                  |L1.11652|
;;;3087   	else temp_SL/=1000L;
002d84  f44f7e7a          MOV      lr,#0x3e8
002d88  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11660|
;;;3088   	#ifdef UKU_TELECORE2015
;;;3089   	temp_SL/=2L;
;;;3090   	//temp_SL=-temp_SL;
;;;3091   	#endif
;;;3092   	//#ifdef UKU_TELECORE2017
;;;3093   	//temp_SL/=-2L;
;;;3094   	//temp_SL=-temp_SL;
;;;3095   	//#endif
;;;3096   	bat[0]._Ib=(signed short)temp_SL;
002d8c  8129              STRH     r1,[r5,#8]
;;;3097   
;;;3098   	temp_SL=(signed long)ad7705_buff_[1];
002d8e  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3099   	temp_SL-=(signed long)Kibat0[1];
002d92  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002d96  eba10a0a          SUB      r10,r1,r10
;;;3100   	temp_SL*=(signed long)Kibat1[1];
002d9a  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002d9e  fb01f10a          MUL      r1,r1,r10
;;;3101   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002da2  4298              CMP      r0,r3
002da4  d001              BEQ      |L1.11690|
002da6  42b8              CMP      r0,r7
002da8  d104              BNE      |L1.11700|
                  |L1.11690|
002daa  e000              B        |L1.11694|
                  |L1.11692|
002dac  e013              B        |L1.11734|
                  |L1.11694|
002dae  fb91f0fc          SDIV     r0,r1,r12
002db2  e00e              B        |L1.11730|
                  |L1.11700|
;;;3102   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002db4  f5a042aa          SUB      r2,r0,#0x5500
002db8  3afa              SUBS     r2,r2,#0xfa
002dba  d003              BEQ      |L1.11716|
002dbc  4548              CMP      r0,r9
002dbe  d001              BEQ      |L1.11716|
002dc0  3a17              SUBS     r2,r2,#0x17
002dc2  d102              BNE      |L1.11722|
                  |L1.11716|
002dc4  fb91f0f8          SDIV     r0,r1,r8
002dc8  e003              B        |L1.11730|
                  |L1.11722|
;;;3103   	else temp_SL/=1000L;
002dca  f44f707a          MOV      r0,#0x3e8
002dce  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11730|
;;;3104   	bat[1]._Ib=(signed short)temp_SL;
002dd2  f8a50054          STRH     r0,[r5,#0x54]
                  |L1.11734|
;;;3105   	}
;;;3106   
;;;3107   
;;;3108   
;;;3109   
;;;3110   
;;;3111   //Температуры батарей
;;;3112   
;;;3113   #ifdef UKU_KONTUR
;;;3114   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3115   else bat[0]._nd=1;
;;;3116   temp_SL=(signed long)adc_buff_[6];
;;;3117   temp_SL*=Ktbat[0];
;;;3118   temp_SL/=20000L;
;;;3119   temp_SL-=273L;
;;;3120   bat[0]._Tb=(signed short)temp_SL;
;;;3121   #else
;;;3122   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002dd6  f9b4000c          LDRSH    r0,[r4,#0xc]  ; adc_buff_
002dda  f64031b7          MOV      r1,#0xbb7
002dde  4684              MOV      r12,r0
002de0  f2a03021          SUB      r0,r0,#0x321
;;;3123   else bat[0]._nd=1;
002de4  2701              MOVS     r7,#1
002de6  2300              MOVS     r3,#0                 ;3122
002de8  9002              STR      r0,[sp,#8]            ;3122
002dea  4288              CMP      r0,r1                 ;3122
002dec  d201              BCS      |L1.11762|
002dee  732b              STRB     r3,[r5,#0xc]          ;3122
002df0  e000              B        |L1.11764|
                  |L1.11762|
002df2  732f              STRB     r7,[r5,#0xc]
                  |L1.11764|
;;;3124   temp_SL=(signed long)adc_buff_[6];
;;;3125   temp_SL*=Ktbat[0];
002df4  4a8d              LDR      r2,|L1.12332|
002df6  f9b20000          LDRSH    r0,[r2,#0]  ; Ktbat
002dfa  fb00f00c          MUL      r0,r0,r12
;;;3126   temp_SL/=20000L;
002dfe  f6446a20          MOV      r10,#0x4e20
002e02  fb90f0fa          SDIV     r0,r0,r10
;;;3127   temp_SL-=273L;
002e06  f2a01011          SUB      r0,r0,#0x111
;;;3128   bat[0]._Tb=(signed short)temp_SL;
002e0a  8168              STRH     r0,[r5,#0xa]
;;;3129   #endif
;;;3130   
;;;3131   #ifdef UKU_KONTUR
;;;3132   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3133   else bat[1]._nd=1;
;;;3134   temp_SL=(signed long)adc_buff_[7];
;;;3135   temp_SL*=Ktbat[1];
;;;3136   temp_SL/=20000L;
;;;3137   temp_SL-=273L;
;;;3138   bat[1]._Tb=(signed short)temp_SL;
;;;3139   #else
;;;3140   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002e0c  f9b4000e          LDRSH    r0,[r4,#0xe]  ; adc_buff_
002e10  f64031b7          MOV      r1,#0xbb7
002e14  f2a03b21          SUB      r11,r0,#0x321
002e18  458b              CMP      r11,r1
002e1a  d202              BCS      |L1.11810|
002e1c  f8853058          STRB     r3,[r5,#0x58]
002e20  e001              B        |L1.11814|
                  |L1.11810|
;;;3141   else bat[1]._nd=1;
002e22  f8857058          STRB     r7,[r5,#0x58]
                  |L1.11814|
;;;3142   temp_SL=(signed long)adc_buff_[7];
;;;3143   temp_SL*=Ktbat[1];
002e26  f9b21002          LDRSH    r1,[r2,#2]  ; Ktbat
002e2a  4341              MULS     r1,r0,r1
;;;3144   temp_SL/=20000L;
002e2c  f6446020          MOV      r0,#0x4e20
002e30  fb91f0f0          SDIV     r0,r1,r0
;;;3145   temp_SL-=273L;
002e34  f2a01011          SUB      r0,r0,#0x111
;;;3146   bat[1]._Tb=(signed short)temp_SL;
002e38  4976              LDR      r1,|L1.12308|
002e3a  f8a10056          STRH     r0,[r1,#0x56]
;;;3147   #endif
;;;3148   
;;;3149   #ifdef UKU_6U
;;;3150   
;;;3151   if(NUMMAKB==2)
;;;3152   	{
;;;3153   	if(makb[0]._cnt<5)
;;;3154   		{
;;;3155   		if(makb[0]._T_nd[0]==0)
;;;3156   			{
;;;3157   			bat[0]._Tb=makb[0]._T[0];
;;;3158   			bat[0]._nd=0;
;;;3159   			}
;;;3160   		}
;;;3161   
;;;3162   	if(makb[1]._cnt<5)
;;;3163   		{
;;;3164   		if(makb[1]._T_nd[0]==0)
;;;3165   			{
;;;3166   			bat[1]._Tb=makb[1]._T[0];
;;;3167   			bat[1]._nd=0;
;;;3168   			}
;;;3169   		}
;;;3170   
;;;3171   	}
;;;3172   else if(NUMMAKB==4)
;;;3173   	{
;;;3174   	signed short temp_t;
;;;3175   	temp_t=-20;
;;;3176   	if(makb[0]._cnt<5)
;;;3177   		{
;;;3178   		if(makb[0]._T_nd[0]==0)
;;;3179   			{
;;;3180   			temp_t=makb[0]._T[0];
;;;3181   			bat[0]._nd=0;
;;;3182   			}
;;;3183   		}
;;;3184   	if(makb[1]._cnt<5)
;;;3185   		{
;;;3186   		if(makb[1]._T_nd[0]==0)
;;;3187   			{
;;;3188   			if(temp_t<makb[1]._T[0])
;;;3189   				{
;;;3190   				bat[0]._nd=0;
;;;3191   				temp_t=makb[1]._T[0];
;;;3192   				}
;;;3193   			}
;;;3194   		}
;;;3195   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3196   
;;;3197    	temp_t=-20;
;;;3198   	if(makb[2]._cnt<5)
;;;3199   		{
;;;3200   		if(makb[2]._T_nd[0]==0)
;;;3201   			{
;;;3202   			temp_t=makb[2]._T[0];
;;;3203   			bat[1]._nd=0;
;;;3204   			}
;;;3205   		}
;;;3206   	if(makb[3]._cnt<5)
;;;3207   		{
;;;3208   		if(makb[3]._T_nd[0]==0)
;;;3209   			{
;;;3210   			if(temp_t<makb[3]._T[0])
;;;3211   				{
;;;3212   				bat[1]._nd=0;
;;;3213   				temp_t=makb[3]._T[0];
;;;3214   				}
;;;3215   			}
;;;3216   		}
;;;3217   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3218   	}
;;;3219   
;;;3220   #endif
;;;3221   
;;;3222   
;;;3223   //Напряжение нагрузки
;;;3224   temp_SL=(signed long)adc_buff_[2];
002e3e  f9b41004          LDRSH    r1,[r4,#4]  ; adc_buff_
;;;3225   temp_SL*=Kuload;
002e42  487b              LDR      r0,|L1.12336|
002e44  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002e48  fb01f000          MUL      r0,r1,r0
;;;3226   temp_SL/=2000L;
002e4c  f44f62fa          MOV      r2,#0x7d0
002e50  fb90f0f2          SDIV     r0,r0,r2
;;;3227   load_U=(signed short)temp_SL;
002e54  f8dfb1dc          LDR      r11,|L1.12340|
002e58  f8ab0000          STRH     r0,[r11,#0]
;;;3228   
;;;3229   #ifdef UKU_220 
;;;3230   //Напряжение нагрузки
;;;3231   temp_SL=(signed long)adc_buff_[2];
;;;3232   temp_SL*=Kuload;
;;;3233   temp_SL/=350L;
;;;3234   load_U=(signed short)temp_SL;
;;;3235   #endif
;;;3236   
;;;3237   #ifdef UKU_220_V2 
;;;3238   //Напряжение нагрузки
;;;3239   temp_SL=(signed long)adc_buff_[2];
;;;3240   temp_SL*=Kuload;
;;;3241   temp_SL/=350L;
;;;3242   load_U=(signed short)temp_SL;
;;;3243   #endif
;;;3244   
;;;3245   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3246   //Напряжение шины
;;;3247   temp_SL=(signed long)adc_buff_[1];
002e5c  f9b42002          LDRSH    r2,[r4,#2]  ; adc_buff_
;;;3248   temp_SL*=Kuout;
002e60  4875              LDR      r0,|L1.12344|
002e62  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002e66  fb02f200          MUL      r2,r2,r0
;;;3249   if(AUSW_MAIN==22010)temp_SL/=400L;
002e6a  486f              LDR      r0,|L1.12328|
002e6c  f24555fa          MOV      r5,#0x55fa
002e70  f44f78c8          MOV      r8,#0x190
002e74  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002e76  42a8              CMP      r0,r5
002e78  d102              BNE      |L1.11904|
002e7a  fb92f2f8          SDIV     r2,r2,r8
002e7e  e003              B        |L1.11912|
                  |L1.11904|
;;;3250   else temp_SL/=500L;
002e80  f44f7afa          MOV      r10,#0x1f4
002e84  fb92f2fa          SDIV     r2,r2,r10
                  |L1.11912|
;;;3251   out_U=(signed short)temp_SL;
002e88  fa0ffa82          SXTH     r10,r2
002e8c  4a6b              LDR      r2,|L1.12348|
002e8e  f8a2a000          STRH     r10,[r2,#0]
;;;3252   load_U=out_U;
002e92  f8aba000          STRH     r10,[r11,#0]
;;;3253   
;;;3254   //Напряжение выпрямителей
;;;3255   temp_SL=(signed long)adc_buff_[2];
;;;3256   temp_SL*=Kubps;
002e96  4a6a              LDR      r2,|L1.12352|
002e98  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002e9c  fb01f102          MUL      r1,r1,r2
;;;3257   if(AUSW_MAIN==22010)temp_SL/=400L;
002ea0  d102              BNE      |L1.11944|
002ea2  fb91f1f8          SDIV     r1,r1,r8
002ea6  e003              B        |L1.11952|
                  |L1.11944|
;;;3258   else temp_SL/=500L;
002ea8  f44f72fa          MOV      r2,#0x1f4
002eac  fb91f1f2          SDIV     r1,r1,r2
                  |L1.11952|
;;;3259   bps_U=(signed short)temp_SL;
002eb0  4d64              LDR      r5,|L1.12356|
002eb2  b209              SXTH     r1,r1
002eb4  8029              STRH     r1,[r5,#0]
;;;3260   
;;;3261   if(bps_U<100)
;;;3262   	{
;;;3263   	char i;
;;;3264   	for(i=0;i<NUMIST;i++)
002eb6  f8dfe190          LDR      lr,|L1.12360|
002eba  2964              CMP      r1,#0x64              ;3261
002ebc  da17              BGE      |L1.12014|
002ebe  f04f0100          MOV      r1,#0
002ec2  f9be8000          LDRSH    r8,[lr,#0]
002ec6  f8dfb184          LDR      r11,|L1.12364|
002eca  e00e              B        |L1.12010|
                  |L1.11980|
;;;3265   		{
;;;3266   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002ecc  eb0102c1          ADD      r2,r1,r1,LSL #3
002ed0  eb021201          ADD      r2,r2,r1,LSL #4
002ed4  eb0b0282          ADD      r2,r11,r2,LSL #2
002ed8  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002edc  6a12              LDR      r2,[r2,#0x20]
002ede  42a2              CMP      r2,r4
002ee0  dd00              BLE      |L1.12004|
002ee2  802a              STRH     r2,[r5,#0]
                  |L1.12004|
002ee4  f1010101          ADD      r1,r1,#1              ;3264
002ee8  b2c9              UXTB     r1,r1                 ;3264
                  |L1.12010|
002eea  4541              CMP      r1,r8                 ;3264
002eec  dbee              BLT      |L1.11980|
                  |L1.12014|
;;;3267   		}
;;;3268   	}
;;;3269   
;;;3270   //Суммарный ток выпрямителей
;;;3271   temp_SL=0;
002eee  f04f0500          MOV      r5,#0
;;;3272   for (i=0;i<NUMIST;i++)
002ef2  4629              MOV      r1,r5
002ef4  f9be2000          LDRSH    r2,[lr,#0]            ;3264
002ef8  4c54              LDR      r4,|L1.12364|
002efa  e00b              B        |L1.12052|
                  |L1.12028|
;;;3273   	{
;;;3274   	temp_SL+=((signed long)bps[i]._Ii);
002efc  eb0108c1          ADD      r8,r1,r1,LSL #3
002f00  eb081801          ADD      r8,r8,r1,LSL #4
002f04  eb040888          ADD      r8,r4,r8,LSL #2
002f08  f8d88024          LDR      r8,[r8,#0x24]
002f0c  4445              ADD      r5,r5,r8
002f0e  f1010101          ADD      r1,r1,#1              ;3272
002f12  b2c9              UXTB     r1,r1                 ;3272
                  |L1.12052|
002f14  4291              CMP      r1,r2                 ;3272
002f16  dbf1              BLT      |L1.12028|
;;;3275   	}
;;;3276   bps_I=(signed short)temp_SL;
002f18  494d              LDR      r1,|L1.12368|
002f1a  800d              STRH     r5,[r1,#0]
;;;3277   
;;;3278   
;;;3279   #endif
;;;3280   
;;;3281   
;;;3282   #ifdef UKU_KONTUR
;;;3283   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3284   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3285   else ND_EXT[0]=1;
;;;3286   temp_SL=(signed long)adc_buff_[5];
;;;3287   temp_SL*=Ktext[0];
;;;3288   temp_SL/=20000L;
;;;3289   temp_SL-=273L;
;;;3290   t_ext[0]=(signed short)temp_SL;
;;;3291   #else 
;;;3292   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3293   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002f1c  493b              LDR      r1,|L1.12300|
002f1e  f6403bb7          MOV      r11,#0xbb7
002f22  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
002f26  494b              LDR      r1,|L1.12372|
002f28  f2a53821          SUB      r8,r5,#0x321
002f2c  f8cd8004          STR      r8,[sp,#4]
002f30  45d8              CMP      r8,r11
002f32  d201              BCS      |L1.12088|
002f34  700b              STRB     r3,[r1,#0]
002f36  e000              B        |L1.12090|
                  |L1.12088|
;;;3294   else ND_EXT[0]=1;
002f38  700f              STRB     r7,[r1,#0]
                  |L1.12090|
;;;3295   temp_SL=(signed long)adc_buff_[5];
;;;3296   temp_SL*=Ktext[0];
002f3a  f8df811c          LDR      r8,|L1.12376|
002f3e  f9b88000          LDRSH    r8,[r8,#0]  ; Ktext
002f42  fb08fb05          MUL      r11,r8,r5
;;;3297   temp_SL/=20000L;
002f46  f6446e20          MOV      lr,#0x4e20
002f4a  fb9bfbfe          SDIV     r11,r11,lr
;;;3298   temp_SL-=273L;
002f4e  f2ab1b11          SUB      r11,r11,#0x111
;;;3299   t_ext[0]=(signed short)temp_SL;
002f52  f8dfe108          LDR      lr,|L1.12380|
002f56  f8aeb000          STRH     r11,[lr,#0]
;;;3300   /*
;;;3301   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3302   else ND_EXT[1]=1;
;;;3303   temp_SL=(signed long)adc_buff_[6];
;;;3304   temp_SL*=Ktext[1];
;;;3305   temp_SL/=20000L;
;;;3306   temp_SL-=273L;
;;;3307   t_ext[1]=(signed short)temp_SL;	*/
;;;3308   #endif
;;;3309   
;;;3310   #ifdef UKU_220
;;;3311   
;;;3312   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3313   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3314   else ND_EXT[1]=1;
;;;3315   temp_SL=(signed long)adc_buff_[3];
;;;3316   temp_SL*=Ktext[1];
;;;3317   temp_SL/=20000L;
;;;3318   temp_SL-=273L;
;;;3319   t_ext[1]=(signed short)temp_SL;
;;;3320   
;;;3321   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3322   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3323   else ND_EXT[2]=1;
;;;3324   temp_SL=(signed long)adc_buff_[10];
;;;3325   temp_SL*=Ktext[2];
;;;3326   temp_SL/=20000L;
;;;3327   temp_SL-=273L;
;;;3328   t_ext[2]=(signed short)temp_SL;
;;;3329   
;;;3330   #else
;;;3331   
;;;3332   
;;;3333   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3334   
;;;3335   //Внешний датчик температуры 
;;;3336   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002f5a  f8dde008          LDR      lr,[sp,#8]
002f5e  f6403bb7          MOV      r11,#0xbb7
002f62  45de              CMP      lr,r11
002f64  d201              BCS      |L1.12138|
002f66  700b              STRB     r3,[r1,#0]
002f68  e000              B        |L1.12140|
                  |L1.12138|
;;;3337   else ND_EXT[0]=1;
002f6a  700f              STRB     r7,[r1,#0]
                  |L1.12140|
;;;3338   temp_SL=(signed long)adc_buff_[6];
;;;3339   temp_SL*=Ktext[0];
002f6c  fb08f80c          MUL      r8,r8,r12
;;;3340   temp_SL/=20000L;
002f70  f6446e20          MOV      lr,#0x4e20
002f74  fb98f8fe          SDIV     r8,r8,lr
;;;3341   temp_SL-=273L;
002f78  f2a81811          SUB      r8,r8,#0x111
;;;3342   t_ext[0]=(signed short)temp_SL;
002f7c  f8dfc0dc          LDR      r12,|L1.12380|
002f80  f8ac8000          STRH     r8,[r12,#0]
;;;3343   
;;;3344   //Внешний датчик температуры №2
;;;3345   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002f84  f8dd8004          LDR      r8,[sp,#4]
002f88  45d8              CMP      r8,r11
002f8a  d201              BCS      |L1.12176|
002f8c  704b              STRB     r3,[r1,#1]
002f8e  e000              B        |L1.12178|
                  |L1.12176|
;;;3346   else ND_EXT[1]=1;
002f90  704f              STRB     r7,[r1,#1]
                  |L1.12178|
;;;3347   temp_SL=(signed long)adc_buff_[5];
;;;3348   temp_SL*=Ktext[1];
002f92  4f31              LDR      r7,|L1.12376|
002f94  f9b77002          LDRSH    r7,[r7,#2]  ; Ktext
002f98  436f              MULS     r7,r5,r7
;;;3349   temp_SL/=20000L;
002f9a  fb97f5fe          SDIV     r5,r7,lr
;;;3350   temp_SL-=273L;
002f9e  f2a51511          SUB      r5,r5,#0x111
;;;3351   t_ext[1]=(signed short)temp_SL;
002fa2  4f2e              LDR      r7,|L1.12380|
002fa4  b22d              SXTH     r5,r5
002fa6  807d              STRH     r5,[r7,#2]
002fa8  9500              STR      r5,[sp,#0]
;;;3352   #else
;;;3353   
;;;3354   
;;;3355   
;;;3356   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3357   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3358   else ND_EXT[1]=1;
;;;3359   temp_SL=(signed long)adc_buff_[6];
;;;3360   temp_SL*=Ktext[1];
;;;3361   temp_SL/=20000L;
;;;3362   temp_SL-=273L;
;;;3363   t_ext[1]=(signed short)temp_SL;
;;;3364   
;;;3365   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3366   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3367   else ND_EXT[2]=1;
;;;3368   temp_SL=(signed long)adc_buff_[3];
;;;3369   temp_SL*=Ktext[2];
;;;3370   temp_SL/=20000L;
;;;3371   temp_SL-=273L;
;;;3372   t_ext[2]=(signed short)temp_SL;
;;;3373   
;;;3374   #endif
;;;3375   #endif
;;;3376   
;;;3377   #ifdef UKU_220_V2
;;;3378   
;;;3379   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3380   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3381   else ND_EXT[1]=1;
;;;3382   temp_SL=(signed long)adc_buff_[3];
;;;3383   temp_SL*=Ktext[1];
;;;3384   temp_SL/=20000L;
;;;3385   temp_SL-=273L;
;;;3386   t_ext[1]=(signed short)temp_SL;
;;;3387   
;;;3388   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3389   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3390   else ND_EXT[2]=1;
;;;3391   temp_SL=(signed long)adc_buff_[10];
;;;3392   temp_SL*=Ktext[2];
;;;3393   temp_SL/=20000L;
;;;3394   temp_SL-=273L;
;;;3395   t_ext[2]=(signed short)temp_SL;
;;;3396   
;;;3397   #else
;;;3398   
;;;3399   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3400   //Ток батареи
;;;3401   if(bps[8]._device==dIBAT_METR)
002faa  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3402   	{
;;;3403   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3404   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3405   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3406   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3407   	if(!bIBAT_SMKLBR)
;;;3408   		{
;;;3409   		signed long temp_SL;
;;;3410   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3411   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3412   		temp_SL*=(signed long)Kibat1[0];
;;;3413   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3414   	
;;;3415   		Ib_ips_termokompensat =(signed short)temp_SL;
002fae  f8dfc0b0          LDR      r12,|L1.12384|
002fb2  2d09              CMP      r5,#9                 ;3401
002fb4  d17e              BNE      |L1.12468|
002fb6  f8945326          LDRB     r5,[r4,#0x326]        ;3403  ; bps
002fba  f8947327          LDRB     r7,[r4,#0x327]        ;3403  ; bps
002fbe  f8df80a4          LDR      r8,|L1.12388|
002fc2  eb052507          ADD      r5,r5,r7,LSL #8       ;3403
002fc6  f8c85000          STR      r5,[r8,#0]            ;3403  ; ibat_metr_buff_
002fca  f8947328          LDRB     r7,[r4,#0x328]        ;3404  ; bps
002fce  f894b329          LDRB     r11,[r4,#0x329]       ;3404  ; bps
002fd2  eb07270b          ADD      r7,r7,r11,LSL #8      ;3404
002fd6  f8c87004          STR      r7,[r8,#4]            ;3404  ; ibat_metr_buff_
002fda  f894832a          LDRB     r8,[r4,#0x32a]        ;3405  ; bps
002fde  f894b32b          LDRB     r11,[r4,#0x32b]       ;3405  ; bps
002fe2  eb08280b          ADD      r8,r8,r11,LSL #8      ;3405
002fe6  fa0ffb88          SXTH     r11,r8                ;3405
002fea  f8df807c          LDR      r8,|L1.12392|
002fee  f8a8b000          STRH     r11,[r8,#0]           ;3405
002ff2  f8df8078          LDR      r8,|L1.12396|
002ff6  e03b              B        |L1.12400|
                  |L1.12280|
                          DCD      net_F3
                  |L1.12284|
                          DCD      net_U
                  |L1.12288|
                          DCD      Kunet
                  |L1.12292|
                          DCD      ||area_number.26||
                  |L1.12296|
                          DCD      net_F
                  |L1.12300|
                          DCD      ||.bss||+0x40c
                  |L1.12304|
                          DCD      Kubat
                  |L1.12308|
                          DCD      bat
                  |L1.12312|
                          DCD      Kubatm
                  |L1.12316|
                          DCD      ad7705_buff_
                  |L1.12320|
                          DCD      Kibat0
                  |L1.12324|
                          DCD      Kibat1
                  |L1.12328|
                          DCD      AUSW_MAIN
                  |L1.12332|
                          DCD      Ktbat
                  |L1.12336|
                          DCD      Kuload
                  |L1.12340|
                          DCD      load_U
                  |L1.12344|
                          DCD      Kuout
                  |L1.12348|
                          DCD      out_U
                  |L1.12352|
                          DCD      Kubps
                  |L1.12356|
                          DCD      bps_U
                  |L1.12360|
                          DCD      NUMIST
                  |L1.12364|
                          DCD      bps
                  |L1.12368|
                          DCD      bps_I
                  |L1.12372|
                          DCD      ND_EXT
                  |L1.12376|
                          DCD      Ktext
                  |L1.12380|
                          DCD      t_ext
                  |L1.12384|
                          DCD      Ib_ips_termokompensat
                  |L1.12388|
                          DCD      ibat_metr_buff_
                  |L1.12392|
                          DCD      bIBAT_SMKLBR
                  |L1.12396|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12400|
003070  f1bb0f00          CMP      r11,#0                ;3406
003074  d003              BEQ      |L1.12414|
003076  f04f0b32          MOV      r11,#0x32             ;3406
00307a  f8a8b000          STRH     r11,[r8,#0]           ;3406
                  |L1.12414|
00307e  d131              BNE      |L1.12516|
003080  eba50707          SUB      r7,r5,r7              ;3411
003084  4dff              LDR      r5,|L1.13444|
003086  f9b55000          LDRSH    r5,[r5,#0]            ;3412  ; Kibat1
00308a  fb05f507          MUL      r5,r5,r7              ;3412
00308e  f5a047aa          SUB      r7,r0,#0x5500         ;3413
003092  3ffa              SUBS     r7,r7,#0xfa           ;3413
003094  d00d              BEQ      |L1.12466|
003096  1e7f              SUBS     r7,r7,#1              ;3413
003098  d00b              BEQ      |L1.12466|
00309a  4548              CMP      r0,r9                 ;3413
00309c  d009              BEQ      |L1.12466|
00309e  3f16              SUBS     r7,r7,#0x16           ;3413
0030a0  d007              BEQ      |L1.12466|
0030a2  3f1e              SUBS     r7,r7,#0x1e           ;3413
0030a4  d005              BEQ      |L1.12466|
0030a6  3728              ADDS     r7,r7,#0x28           ;3413
0030a8  d003              BEQ      |L1.12466|
0030aa  3f14              SUBS     r7,r7,#0x14           ;3413
0030ac  d001              BEQ      |L1.12466|
0030ae  1e7f              SUBS     r7,r7,#1              ;3413
0030b0  d105              BNE      |L1.12478|
                  |L1.12466|
0030b2  e000              B        |L1.12470|
                  |L1.12468|
0030b4  e016              B        |L1.12516|
                  |L1.12470|
0030b6  f44f67fa          MOV      r7,#0x7d0             ;3413
0030ba  fb95f5f7          SDIV     r5,r5,r7              ;3413
                  |L1.12478|
0030be  b22f              SXTH     r7,r5
0030c0  f8ac7000          STRH     r7,[r12,#0]
;;;3416   		if(bIBAT_SMKLBR_cnt)
0030c4  f9b85000          LDRSH    r5,[r8,#0]  ; bIBAT_SMKLBR_cnt
;;;3417   			{
;;;3418   			bIBAT_SMKLBR_cnt--;
;;;3419   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0030c8  f8df93bc          LDR      r9,|L1.13448|
0030cc  b145              CBZ      r5,|L1.12512|
0030ce  f1a50501          SUB      r5,r5,#1              ;3418
0030d2  f8a85000          STRH     r5,[r8,#0]            ;3418
0030d6  f8b95000          LDRH     r5,[r9,#0]  ; Ib_ips_termokompensat_temp
0030da  f8ac5000          STRH     r5,[r12,#0]
0030de  e001              B        |L1.12516|
                  |L1.12512|
;;;3420   			}
;;;3421   		else 
;;;3422   			{
;;;3423   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0030e0  f8a97000          STRH     r7,[r9,#0]
                  |L1.12516|
;;;3424   			}
;;;3425   		}
;;;3426   	}
;;;3427   
;;;3428   bat[0]._Ub=load_U;
0030e4  4de9              LDR      r5,|L1.13452|
0030e6  f8a5a002          STRH     r10,[r5,#2]
;;;3429   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0030ea  f5a047ac          SUB      r7,r0,#0x5600
0030ee  3f02              SUBS     r7,#2
0030f0  d103              BNE      |L1.12538|
0030f2  8928              LDRH     r0,[r5,#8]  ; bat
0030f4  f8ac0000          STRH     r0,[r12,#0]
0030f8  e002              B        |L1.12544|
                  |L1.12538|
;;;3430   else bat[0]._Ib=Ib_ips_termokompensat;
0030fa  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0030fe  8128              STRH     r0,[r5,#8]
                  |L1.12544|
;;;3431   
;;;3432   #endif
;;;3433   #endif
;;;3434   
;;;3435   
;;;3436   #ifdef UKU_TELECORE2015
;;;3437   
;;;3438   //Внешний датчик температуры №1
;;;3439   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3440   else ND_EXT[0]=1;
;;;3441   temp_SL=(signed long)adc_buff_[7];
;;;3442   temp_SL*=Ktext[0];
;;;3443   temp_SL/=20000L;
;;;3444   temp_SL-=273L;
;;;3445   t_ext[0]=(signed short)temp_SL;
;;;3446   
;;;3447   
;;;3448   //Внешний датчик температуры №2
;;;3449   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3450   else ND_EXT[1]=1;
;;;3451   temp_SL=(signed long)adc_buff_[6];
;;;3452   temp_SL*=Ktext[1];
;;;3453   temp_SL/=20000L;
;;;3454   temp_SL-=273L;
;;;3455   t_ext[1]=(signed short)temp_SL;
;;;3456   
;;;3457   #endif
;;;3458   
;;;3459   #ifdef UKU_TELECORE2017
;;;3460   
;;;3461   //Внешний датчик температуры №1
;;;3462   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3463   else ND_EXT[0]=1;
;;;3464   temp_SL=(signed long)adc_buff_[7];
;;;3465   temp_SL*=Ktext[0];
;;;3466   temp_SL/=20000L;
;;;3467   temp_SL-=273L;
;;;3468   t_ext[0]=(signed short)temp_SL;
;;;3469   
;;;3470   
;;;3471   //Внешний датчик температуры №2
;;;3472   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3473   else ND_EXT[1]=1;
;;;3474   temp_SL=(signed long)adc_buff_[6];
;;;3475   temp_SL*=Ktext[1];
;;;3476   temp_SL/=20000L;
;;;3477   temp_SL-=273L;
;;;3478   t_ext[1]=(signed short)temp_SL;
;;;3479   
;;;3480   #endif
;;;3481   
;;;3482   //напряжение ввода
;;;3483   temp_SL=(signed long)adc_buff_ext_[0];
003100  f8df838c          LDR      r8,|L1.13456|
003104  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3484   temp_SL*=Kunet_ext[0];
003108  f8df9388          LDR      r9,|L1.13460|
00310c  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
003110  4378              MULS     r0,r7,r0
;;;3485   temp_SL/=4000L;
003112  f44f6b7a          MOV      r11,#0xfa0
003116  fb90f0fb          SDIV     r0,r0,r11
;;;3486   Uvv[0]=(signed short)temp_SL;
00311a  4fdf              LDR      r7,|L1.13464|
00311c  b280              UXTH     r0,r0
00311e  8038              STRH     r0,[r7,#0]
;;;3487   if(Uvv[0]<100) Uvv0=Uvv[0];
003120  f8dfe378          LDR      lr,|L1.13468|
003124  2864              CMP      r0,#0x64
003126  d202              BCS      |L1.12590|
003128  f8ae0000          STRH     r0,[lr,#0]
00312c  e003              B        |L1.12598|
                  |L1.12590|
;;;3488   else Uvv0=net_U;
00312e  48dc              LDR      r0,|L1.13472|
003130  8800              LDRH     r0,[r0,#0]  ; net_U
003132  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12598|
;;;3489   
;;;3490   //напряжение пэс
;;;3491   temp_SL=(signed long)adc_buff_ext_[1];
003136  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3492   temp_SL*=Kunet_ext[1];
00313a  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
00313e  fb00f008          MUL      r0,r0,r8
;;;3493   temp_SL/=4000L;
003142  fb90f0fb          SDIV     r0,r0,r11
;;;3494   Uvv[1]=(signed short)temp_SL;
003146  8078              STRH     r0,[r7,#2]
;;;3495   
;;;3496   
;;;3497   //напряжение ввода трехфазное
;;;3498   temp_SL=(signed long)eb2_data_short[0];
003148  4fd6              LDR      r7,|L1.13476|
00314a  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3499   temp_SL*=Kvv_eb2[0];
00314e  f8df8358          LDR      r8,|L1.13480|
003152  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
003156  fb09f900          MUL      r9,r9,r0
;;;3500   temp_SL/=6000L;
00315a  f2417070          MOV      r0,#0x1770
00315e  fb99fbf0          SDIV     r11,r9,r0
;;;3501   Uvv_eb2[0]=(signed short)temp_SL;
003162  f8df9348          LDR      r9,|L1.13484|
003166  f8a9b000          STRH     r11,[r9,#0]
;;;3502   
;;;3503   temp_SL=(signed long)eb2_data_short[1];
00316a  f9b7e002          LDRSH    lr,[r7,#2]  ; eb2_data_short
;;;3504   temp_SL*=Kvv_eb2[1];
00316e  f9b8b002          LDRSH    r11,[r8,#2]  ; Kvv_eb2
003172  fb0bfb0e          MUL      r11,r11,lr
;;;3505   temp_SL/=6000L;
003176  fb9bfbf0          SDIV     r11,r11,r0
;;;3506   Uvv_eb2[1]=(signed short)temp_SL;
00317a  f8a9b002          STRH     r11,[r9,#2]
;;;3507   
;;;3508   temp_SL=(signed long)eb2_data_short[2];
00317e  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3509   temp_SL*=Kvv_eb2[2];
003182  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
003186  fb08f80b          MUL      r8,r8,r11
;;;3510   temp_SL/=6000L;
00318a  fb98f8f0          SDIV     r8,r8,r0
;;;3511   Uvv_eb2[2]=(signed short)temp_SL;
00318e  f8a98004          STRH     r8,[r9,#4]
;;;3512   
;;;3513   //напряжение пэс трехфазное
;;;3514   temp_SL=(signed long)eb2_data_short[3];
003192  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3515   temp_SL*=Kpes_eb2[0];
003196  f8df8318          LDR      r8,|L1.13488|
00319a  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
00319e  fb09f90b          MUL      r9,r9,r11
;;;3516   temp_SL/=6000L;
0031a2  fb99fbf0          SDIV     r11,r9,r0
;;;3517   Upes_eb2[0]=(signed short)temp_SL;
0031a6  f8df930c          LDR      r9,|L1.13492|
0031aa  f8a9b000          STRH     r11,[r9,#0]
;;;3518   
;;;3519   temp_SL=(signed long)eb2_data_short[4];
0031ae  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3520   temp_SL*=Kpes_eb2[1];
0031b2  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
0031b6  fb0bfb0e          MUL      r11,r11,lr
;;;3521   temp_SL/=6000L;
0031ba  fb9bfbf0          SDIV     r11,r11,r0
;;;3522   Upes_eb2[1]=(signed short)temp_SL;
0031be  f8a9b002          STRH     r11,[r9,#2]
;;;3523   
;;;3524   temp_SL=(signed long)eb2_data_short[5];
0031c2  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3525   temp_SL*=Kpes_eb2[2];
0031c6  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
0031ca  fb07f70b          MUL      r7,r7,r11
;;;3526   temp_SL/=6000L;
0031ce  fb97f0f0          SDIV     r0,r7,r0
;;;3527   Upes_eb2[2]=(signed short)temp_SL;
0031d2  f8a90004          STRH     r0,[r9,#4]
;;;3528   
;;;3529   //Вычисление температуры шкафа
;;;3530   
;;;3531   ibt._T[0]=t_ext[1]+273;
0031d6  9f00              LDR      r7,[sp,#0]
0031d8  f8dfb2e0          LDR      r11,|L1.13500|
0031dc  f2071711          ADD      r7,r7,#0x111
0031e0  48b5              LDR      r0,|L1.13496|
0031e2  fa0ff887          SXTH     r8,r7
0031e6  f8ab8000          STRH     r8,[r11,#0]
;;;3532   ibt._T[1]=t_ext[2]+273;
0031ea  8880              LDRH     r0,[r0,#4]  ; t_ext
0031ec  f2001011          ADD      r0,r0,#0x111
0031f0  fa0ff980          SXTH     r9,r0
0031f4  f8ab9002          STRH     r9,[r11,#2]
;;;3533   
;;;3534   ibt._nd[0]=ND_EXT[1];
0031f8  784f              LDRB     r7,[r1,#1]  ; ND_EXT
0031fa  f88b7008          STRB     r7,[r11,#8]
;;;3535   ibt._nd[1]=ND_EXT[2];
0031fe  7888              LDRB     r0,[r1,#2]  ; ND_EXT
003200  f88b0009          STRB     r0,[r11,#9]
;;;3536   
;;;3537   #ifndef UKU_TELECORE2015
;;;3538   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3539   	{
;;;3540   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003204  49ae              LDR      r1,|L1.13504|
003206  b907              CBNZ     r7,|L1.12810|
003208  b110              CBZ      r0,|L1.12816|
                  |L1.12810|
;;;3541   	}
;;;3542   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00320a  2f01              CMP      r7,#1
00320c  d00a              BEQ      |L1.12836|
00320e  e00a              B        |L1.12838|
                  |L1.12816|
003210  eb080009          ADD      r0,r8,r9              ;3540
003214  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3540
003218  f46f7788          MVN      r7,#0x110             ;3540
00321c  eb070060          ADD      r0,r7,r0,ASR #1       ;3540
003220  8008              STRH     r0,[r1,#0]            ;3540
003222  e01e              B        |L1.12898|
                  |L1.12836|
003224  b108              CBZ      r0,|L1.12842|
                  |L1.12838|
;;;3543   	{
;;;3544   	t_box=ibt._T[1]-273;
;;;3545   	}
;;;3546   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003226  b12f              CBZ      r7,|L1.12852|
003228  e006              B        |L1.12856|
                  |L1.12842|
00322a  f2a91911          SUB      r9,r9,#0x111          ;3544
00322e  f8a19000          STRH     r9,[r1,#0]            ;3544
003232  e016              B        |L1.12898|
                  |L1.12852|
003234  2801              CMP      r0,#1
003236  d002              BEQ      |L1.12862|
                  |L1.12856|
;;;3547   	{
;;;3548   	t_box=ibt._T[0]-273;
;;;3549   	}
;;;3550   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003238  2f01              CMP      r7,#1
00323a  d005              BEQ      |L1.12872|
00323c  e011              B        |L1.12898|
                  |L1.12862|
00323e  f2a81811          SUB      r8,r8,#0x111          ;3548
003242  f8a18000          STRH     r8,[r1,#0]            ;3548
003246  e00c              B        |L1.12898|
                  |L1.12872|
003248  2801              CMP      r0,#1
00324a  d10a              BNE      |L1.12898|
;;;3551   	{
;;;3552   	if(t_ext_can_nd<5)t_box= t_ext_can;
00324c  489d              LDR      r0,|L1.13508|
00324e  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
003250  2805              CMP      r0,#5
003252  d203              BCS      |L1.12892|
003254  489c              LDR      r0,|L1.13512|
003256  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003258  8008              STRH     r0,[r1,#0]
00325a  e002              B        |L1.12898|
                  |L1.12892|
;;;3553   	else t_box=20;
00325c  f04f0014          MOV      r0,#0x14
003260  8008              STRH     r0,[r1,#0]
                  |L1.12898|
;;;3554   	}
;;;3555   #endif
;;;3556   /*
;;;3557   //Вычисление температуры шкафа
;;;3558   
;;;3559   ibt._T[0]=bat[0]._Tb+273;
;;;3560   ibt._T[1]=bat[1]._Tb+273;
;;;3561   ibt._T[2]=t_ext[1]+273;
;;;3562   ibt._T[3]=t_ext[2]+273;
;;;3563   
;;;3564   ibt._nd[0]=bat[0]._nd;
;;;3565   ibt._nd[1]=bat[1]._nd;
;;;3566   ibt._nd[2]=ND_EXT[1];
;;;3567   ibt._nd[3]=ND_EXT[2];
;;;3568   
;;;3569   ibt._avg1=0;
;;;3570   ibt._avg_cnt=4;
;;;3571   
;;;3572   if(ibt._nd[0]==0)
;;;3573   	{
;;;3574   	ibt._avg1+=ibt._T[0];
;;;3575   	}
;;;3576   else 
;;;3577   	{
;;;3578   	ibt._avg_cnt--;
;;;3579   	}
;;;3580   
;;;3581   if(ibt._nd[1]==0)
;;;3582   	{
;;;3583   	ibt._avg1+=ibt._T[1];
;;;3584   	}
;;;3585   else 
;;;3586   	{
;;;3587   	ibt._avg_cnt--;
;;;3588   	}
;;;3589   
;;;3590   if(ibt._nd[2]==0)
;;;3591   	{
;;;3592   	ibt._avg1+=ibt._T[2];
;;;3593   	}
;;;3594   else 
;;;3595   	{
;;;3596   	ibt._avg_cnt--;
;;;3597   	}
;;;3598   
;;;3599   if(ibt._nd[3]==0)
;;;3600   	{
;;;3601   	ibt._avg1+=ibt._T[3];
;;;3602   	}
;;;3603   else 
;;;3604   	{
;;;3605   	ibt._avg_cnt--;
;;;3606   	}
;;;3607   
;;;3608   if(ibt._avg_cnt==0)
;;;3609   	{
;;;3610   	}
;;;3611   else
;;;3612   	{
;;;3613   	ibt._avg1/=ibt._avg_cnt;
;;;3614   	}
;;;3615   
;;;3616   
;;;3617   if(ibt._nd[0]!=0)
;;;3618   	{
;;;3619   	ibt._T_dispers[0]=0;
;;;3620   	}
;;;3621   else 
;;;3622   	{
;;;3623   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3624   	}
;;;3625   
;;;3626   if(ibt._nd[1]!=0)
;;;3627   	{
;;;3628   	ibt._T_dispers[1]=0;
;;;3629   	}
;;;3630   else 
;;;3631   	{
;;;3632   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3633   	}
;;;3634   
;;;3635   if(ibt._nd[2]!=0)
;;;3636   	{
;;;3637   	ibt._T_dispers[2]=0;
;;;3638   	}
;;;3639   else 
;;;3640   	{
;;;3641   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3642   	}
;;;3643   
;;;3644   if(ibt._nd[3]!=0)
;;;3645   	{
;;;3646   	ibt._T_dispers[3]=0;
;;;3647   	}
;;;3648   else 
;;;3649   	{
;;;3650   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3651   	}
;;;3652   
;;;3653   if(	ibt._nd[0]&&
;;;3654   	ibt._nd[1]&&
;;;3655   	ibt._nd[2]&&
;;;3656   	ibt._nd[3]
;;;3657   	)
;;;3658   	{
;;;3659   	t_box=(bps[0]._Ti);
;;;3660   	}
;;;3661   
;;;3662   else if(	ibt._nd[0]||
;;;3663   	ibt._nd[1]||
;;;3664   	ibt._nd[2]||
;;;3665   	ibt._nd[3]
;;;3666   	)
;;;3667   	{
;;;3668   	t_box=(ibt._avg1-273);
;;;3669   	}
;;;3670   else 
;;;3671   	{
;;;3672   	ibt._max_dispers_num=0;
;;;3673   	ibt._max_dispers=ibt._T_dispers[0];
;;;3674   
;;;3675   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3676   		{
;;;3677   		ibt._max_dispers_num=1;
;;;3678   		ibt._max_dispers=ibt._T_dispers[1];
;;;3679   		}
;;;3680   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3681   		{
;;;3682   		ibt._max_dispers_num=2;
;;;3683   		ibt._max_dispers=ibt._T_dispers[2];
;;;3684   		}
;;;3685   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3686   		{
;;;3687   		ibt._max_dispers_num=3;
;;;3688   		ibt._max_dispers=ibt._T_dispers[3];
;;;3689   		}
;;;3690   
;;;3691   	ibt._avg2=0;
;;;3692   
;;;3693   	if(ibt._max_dispers_num!=0)
;;;3694   		{
;;;3695   		ibt._avg2+=ibt._T[0];
;;;3696   		}
;;;3697   	if(ibt._max_dispers_num!=1)
;;;3698   		{
;;;3699   		ibt._avg2+=ibt._T[1];
;;;3700   		}
;;;3701   	if(ibt._max_dispers_num!=2)
;;;3702   		{
;;;3703   		ibt._avg2+=ibt._T[2];
;;;3704   		}
;;;3705   	if(ibt._max_dispers_num!=3)
;;;3706   		{
;;;3707   		ibt._avg2+=ibt._T[3];
;;;3708   		}
;;;3709   
;;;3710   	t_box=(ibt._avg2/3)-273;
;;;3711   
;;;3712   	}*/
;;;3713   
;;;3714   
;;;3715   //*********************************************
;;;3716   
;;;3717   #ifndef TELECORE
;;;3718   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
003262  489a              LDR      r0,|L1.13516|
003264  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
003266  2955              CMP      r1,#0x55
003268  d105              BNE      |L1.12918|
00326a  f1ba0fc8          CMP      r10,#0xc8
00326e  dd02              BLE      |L1.12918|
003270  8929              LDRH     r1,[r5,#8]  ; bat
003272  f8a6104a          STRH     r1,[r6,#0x4a]
                  |L1.12918|
;;;3719   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003276  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
003278  2855              CMP      r0,#0x55
00327a  d10b              BNE      |L1.12948|
00327c  f9b5004e          LDRSH    r0,[r5,#0x4e]  ; bat
003280  28c8              CMP      r0,#0xc8
003282  dd07              BLE      |L1.12948|
003284  f9b50054          LDRSH    r0,[r5,#0x54]  ; bat
003288  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00328c  4288              CMP      r0,r1
00328e  dd01              BLE      |L1.12948|
003290  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12948|
;;;3720   #endif
;;;3721   
;;;3722   #ifdef TELECORE
;;;3723   Ibmax=0;
;;;3724   /*
;;;3725   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3726   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3727   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3728   */
;;;3729   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3730   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3731   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3732   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3733   #endif
;;;3734   
;;;3735   #ifdef UKU_FSO
;;;3736   Ibmax=0;
;;;3737   if((NUMBAT_FSO>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3738   if((NUMBAT_FSO>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3739   #endif
;;;3740   
;;;3741   #ifdef UKU_TELECORE2017
;;;3742   Ibmax=0;
;;;3743   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3744   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3745   #endif
;;;3746   
;;;3747   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3748   Ibmax=Ib_ips_termokompensat;
003294  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
003298  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3749   #endif
;;;3750   for(i=0;i<NUMIST;i++)
00329c  f04f0100          MOV      r1,#0
0032a0  e02f              B        |L1.13058|
                  |L1.12962|
;;;3751   	{
;;;3752   	if(bps[i]._cnt<25)
0032a2  eb0100c1          ADD      r0,r1,r1,LSL #3
0032a6  eb001001          ADD      r0,r0,r1,LSL #4
0032aa  eb040080          ADD      r0,r4,r0,LSL #2
0032ae  78c6              LDRB     r6,[r0,#3]
0032b0  2e19              CMP      r6,#0x19
0032b2  d21c              BCS      |L1.13038|
;;;3753        	{
;;;3754        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0032b4  7986              LDRB     r6,[r0,#6]
0032b6  79c7              LDRB     r7,[r0,#7]
0032b8  eb062607          ADD      r6,r6,r7,LSL #8
0032bc  6246              STR      r6,[r0,#0x24]
;;;3755        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0032be  7a06              LDRB     r6,[r0,#8]
0032c0  7a47              LDRB     r7,[r0,#9]
0032c2  eb062607          ADD      r6,r6,r7,LSL #8
0032c6  6206              STR      r6,[r0,#0x20]
;;;3756        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0032c8  7a86              LDRB     r6,[r0,#0xa]
0032ca  7ac7              LDRB     r7,[r0,#0xb]
0032cc  eb062607          ADD      r6,r6,r7,LSL #8
0032d0  61c6              STR      r6,[r0,#0x1c]
;;;3757        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0032d2  7b06              LDRB     r6,[r0,#0xc]
0032d4  6286              STR      r6,[r0,#0x28]
;;;3758        	bps[i]._adr_ee=bps[i]._buff[7];
0032d6  7b46              LDRB     r6,[r0,#0xd]
0032d8  f8806056          STRB     r6,[r0,#0x56]
;;;3759        	bps[i]._flags_tm=bps[i]._buff[8];
0032dc  7b86              LDRB     r6,[r0,#0xe]
0032de  f8806042          STRB     r6,[r0,#0x42]
;;;3760   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0032e2  7c06              LDRB     r6,[r0,#0x10]
0032e4  7c47              LDRB     r7,[r0,#0x11]
0032e6  eb062607          ADD      r6,r6,r7,LSL #8
0032ea  6506              STR      r6,[r0,#0x50]
0032ec  e006              B        |L1.13052|
                  |L1.13038|
;;;3761        	} 
;;;3762   	else 
;;;3763        	{
;;;3764        	bps[i]._Uii=0; 
0032ee  61c3              STR      r3,[r0,#0x1c]
;;;3765        	bps[i]._Ii=0;
0032f0  6243              STR      r3,[r0,#0x24]
;;;3766        	bps[i]._Uin=0;
0032f2  6203              STR      r3,[r0,#0x20]
;;;3767        	bps[i]._Ti=0;
0032f4  6283              STR      r3,[r0,#0x28]
;;;3768        	bps[i]._flags_tm=0; 
0032f6  f8803042          STRB     r3,[r0,#0x42]
;;;3769   	     bps[i]._rotor=0;    
0032fa  6503              STR      r3,[r0,#0x50]
                  |L1.13052|
0032fc  f1010101          ADD      r1,r1,#1              ;3750
003300  b2c9              UXTB     r1,r1                 ;3750
                  |L1.13058|
003302  4291              CMP      r1,r2                 ;3750
003304  dbcd              BLT      |L1.12962|
;;;3770        	}
;;;3771        
;;;3772        }
;;;3773   
;;;3774   load_I=0;
003306  4e72              LDR      r6,|L1.13520|
;;;3775   #ifdef TELECORE
;;;3776   
;;;3777   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3778   	{
;;;3779   	load_I-=lakb[i]._ch_curr/10;
;;;3780   	}*/
;;;3781   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3782   #elif UKU_TELECORE2017
;;;3783   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3784   #else
;;;3785   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003308  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00330c  f04f000a          MOV      r0,#0xa
003310  fb91f1f0          SDIV     r1,r1,r0
003314  f9b55054          LDRSH    r5,[r5,#0x54]  ; bat
003318  fb95f0f0          SDIV     r0,r5,r0
00331c  4408              ADD      r0,r0,r1
00331e  f1c00000          RSB      r0,r0,#0
003322  b207              SXTH     r7,r0
003324  8037              STRH     r7,[r6,#0]
;;;3786   #endif
;;;3787   Isumm=0;
003326  4d6b              LDR      r5,|L1.13524|
003328  802b              STRH     r3,[r5,#0]
;;;3788   
;;;3789   for(i=0;i<NUMIST;i++)
00332a  f04f0000          MOV      r0,#0
00332e  e012              B        |L1.13142|
                  |L1.13104|
;;;3790        {
;;;3791        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003330  eb0001c0          ADD      r1,r0,r0,LSL #3
003334  eb011100          ADD      r1,r1,r0,LSL #4
003338  eb040181          ADD      r1,r4,r1,LSL #2
00333c  f891c003          LDRB     r12,[r1,#3]
003340  f1bc0f05          CMP      r12,#5
003344  d204              BCS      |L1.13136|
003346  6a49              LDR      r1,[r1,#0x24]
003348  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
00334c  4461              ADD      r1,r1,r12
00334e  8029              STRH     r1,[r5,#0]
                  |L1.13136|
003350  f1000001          ADD      r0,r0,#1              ;3789
003354  b2c0              UXTB     r0,r0                 ;3789
                  |L1.13142|
003356  4290              CMP      r0,r2                 ;3789
003358  dbea              BLT      |L1.13104|
;;;3792        }  
;;;3793        
;;;3794   load_I=load_I+Isumm;
00335a  8828              LDRH     r0,[r5,#0]  ; Isumm
00335c  4438              ADD      r0,r0,r7
00335e  b200              SXTH     r0,r0
003360  8030              STRH     r0,[r6,#0]
;;;3795   if(load_I<0)load_I=0;
003362  2800              CMP      r0,#0
003364  da00              BGE      |L1.13160|
003366  8033              STRH     r3,[r6,#0]
                  |L1.13160|
;;;3796   
;;;3797   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3798   load_I=0;
003368  8033              STRH     r3,[r6,#0]
;;;3799   
;;;3800   Isumm=0;
00336a  802b              STRH     r3,[r5,#0]
;;;3801   
;;;3802   for(i=0;i<NUMIST;i++)
00336c  f04f0000          MOV      r0,#0
003370  e00f              B        |L1.13202|
                  |L1.13170|
;;;3803        {
;;;3804        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003372  eb0001c0          ADD      r1,r0,r0,LSL #3
003376  eb011100          ADD      r1,r1,r0,LSL #4
00337a  eb040181          ADD      r1,r4,r1,LSL #2
00337e  78cf              LDRB     r7,[r1,#3]
003380  2f05              CMP      r7,#5
003382  d203              BCS      |L1.13196|
003384  6a49              LDR      r1,[r1,#0x24]
003386  882f              LDRH     r7,[r5,#0]  ; Isumm
003388  4439              ADD      r1,r1,r7
00338a  8029              STRH     r1,[r5,#0]
                  |L1.13196|
00338c  f1000001          ADD      r0,r0,#1              ;3802
003390  b2c0              UXTB     r0,r0                 ;3802
                  |L1.13202|
003392  4290              CMP      r0,r2                 ;3802
003394  dbed              BLT      |L1.13170|
;;;3805        }  
;;;3806        
;;;3807   load_I=load_I+Isumm;
003396  8829              LDRH     r1,[r5,#0]  ; Isumm
003398  eb030001          ADD      r0,r3,r1
00339c  b200              SXTH     r0,r0
00339e  8030              STRH     r0,[r6,#0]
;;;3808   if(load_I<0)load_I=0;
0033a0  2800              CMP      r0,#0
0033a2  da00              BGE      |L1.13222|
0033a4  8033              STRH     r3,[r6,#0]
                  |L1.13222|
;;;3809   
;;;3810   #endif
;;;3811   #ifdef IPS_SGEP_GAZPROM
;;;3812   load_I=Isumm;
;;;3813   #endif
;;;3814   
;;;3815   
;;;3816   #ifdef UKU_GLONASS
;;;3817   inv[0]._Uio=6;
;;;3818   if (NUMINV)
;;;3819   	{
;;;3820   	for(i=0;i<NUMINV;i++)
;;;3821   		{
;;;3822   		if(bps[i+first_inv_slot]._cnt<25)
;;;3823        		{
;;;3824        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3825        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3826        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3827        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3828        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3829   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3830   			inv[i]._cnt=0;    
;;;3831        		} 
;;;3832   		else 
;;;3833        		{
;;;3834        		inv[i]._Uio=0; 
;;;3835        		inv[i]._Ii=0;
;;;3836        		inv[i]._Uin=0;
;;;3837        		inv[i]._Ti=0;
;;;3838        		inv[i]._flags_tm=0; 
;;;3839   //	     	inv[i]._rotor0;
;;;3840   			inv[i]._cnt=25;    
;;;3841        		}
;;;3842        	}
;;;3843      	}
;;;3844   #endif
;;;3845   
;;;3846   #ifndef UKU_GLONASS
;;;3847   if (NUMINV)
0033a6  484c              LDR      r0,|L1.13528|
0033a8  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0033ac  2d00              CMP      r5,#0
0033ae  d066              BEQ      |L1.13438|
;;;3848   	{
;;;3849   	for(i=0;i<NUMINV;i++)
0033b0  f04f0200          MOV      r2,#0
;;;3850   		{
;;;3851   		if(bps[i+20]._cnt<25)
;;;3852        		{
;;;3853        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0033b4  4e49              LDR      r6,|L1.13532|
0033b6  e060              B        |L1.13434|
                  |L1.13240|
0033b8  f1020014          ADD      r0,r2,#0x14           ;3851
0033bc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3851
0033c0  eb011000          ADD      r0,r1,r0,LSL #4       ;3851
0033c4  eb040080          ADD      r0,r4,r0,LSL #2       ;3851
0033c8  78c1              LDRB     r1,[r0,#3]            ;3851
0033ca  2919              CMP      r1,#0x19              ;3851
0033cc  d239              BCS      |L1.13378|
0033ce  7981              LDRB     r1,[r0,#6]
0033d0  79c7              LDRB     r7,[r0,#7]
0033d2  eb012707          ADD      r7,r1,r7,LSL #8
0033d6  eb020142          ADD      r1,r2,r2,LSL #1
0033da  eb061141          ADD      r1,r6,r1,LSL #5
0033de  61cf              STR      r7,[r1,#0x1c]
;;;3854        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0033e0  7a07              LDRB     r7,[r0,#8]
0033e2  f890c009          LDRB     r12,[r0,#9]
0033e6  eb07270c          ADD      r7,r7,r12,LSL #8
0033ea  62cf              STR      r7,[r1,#0x2c]
;;;3855        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0033ec  7a87              LDRB     r7,[r0,#0xa]
0033ee  f890c00b          LDRB     r12,[r0,#0xb]
0033f2  eb07270c          ADD      r7,r7,r12,LSL #8
0033f6  618f              STR      r7,[r1,#0x18]
;;;3856        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0033f8  7b07              LDRB     r7,[r0,#0xc]
0033fa  620f              STR      r7,[r1,#0x20]
;;;3857        		inv[i]._flags_tm=bps[i+20]._buff[7];
0033fc  7b47              LDRB     r7,[r0,#0xd]
0033fe  f8817046          STRB     r7,[r1,#0x46]
;;;3858        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003402  7b87              LDRB     r7,[r0,#0xe]
003404  f890c00f          LDRB     r12,[r0,#0xf]
003408  eb07270c          ADD      r7,r7,r12,LSL #8
00340c  628f              STR      r7,[r1,#0x28]
;;;3859        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00340e  7c07              LDRB     r7,[r0,#0x10]
003410  f890c011          LDRB     r12,[r0,#0x11]
003414  eb07270c          ADD      r7,r7,r12,LSL #8
003418  624f              STR      r7,[r1,#0x24]
;;;3860   			inv[i]._cnt=0;
00341a  708b              STRB     r3,[r1,#2]
;;;3861   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00341c  7c87              LDRB     r7,[r0,#0x12]
00341e  f8817059          STRB     r7,[r1,#0x59]
;;;3862   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003422  7cc7              LDRB     r7,[r0,#0x13]
003424  f881705a          STRB     r7,[r1,#0x5a]
;;;3863   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003428  7d07              LDRB     r7,[r0,#0x14]
00342a  f8817058          STRB     r7,[r1,#0x58]
;;;3864   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00342e  7d47              LDRB     r7,[r0,#0x15]
003430  f881705b          STRB     r7,[r1,#0x5b]
;;;3865   			inv[i]._pwm_en=bps[i+20]._buff[16];  
003434  7d87              LDRB     r7,[r0,#0x16]
003436  f881705c          STRB     r7,[r1,#0x5c]
;;;3866   			inv[i]._phase_mode=bps[i+20]._buff[17];  
00343a  7dc0              LDRB     r0,[r0,#0x17]
00343c  f881005d          STRB     r0,[r1,#0x5d]
003440  e018              B        |L1.13428|
                  |L1.13378|
;;;3867        		} 
;;;3868   		else 
;;;3869        		{
;;;3870         		inv[i]._Ii=0;
003442  eb020042          ADD      r0,r2,r2,LSL #1
003446  eb061040          ADD      r0,r6,r0,LSL #5
00344a  61c3              STR      r3,[r0,#0x1c]
;;;3871   			inv[i]._Pio=0;
00344c  62c3              STR      r3,[r0,#0x2c]
;;;3872   			inv[i]._Uio=0;
00344e  6183              STR      r3,[r0,#0x18]
;;;3873        		inv[i]._Ti=0;
003450  6203              STR      r3,[r0,#0x20]
;;;3874        		inv[i]._flags_tm=0; 
003452  f8803046          STRB     r3,[r0,#0x46]
;;;3875        		inv[i]._Uil=0;
003456  6243              STR      r3,[r0,#0x24]
;;;3876        		inv[i]._Uin=0;
003458  6283              STR      r3,[r0,#0x28]
;;;3877   			inv[i]._cnt=25; 
00345a  f04f0119          MOV      r1,#0x19
00345e  7081              STRB     r1,[r0,#2]
;;;3878   			inv[i]._Uoutmin=0; 
003460  f8803059          STRB     r3,[r0,#0x59]
;;;3879   			inv[i]._Uoutmax=0; 
003464  f880305a          STRB     r3,[r0,#0x5a]
;;;3880   			inv[i]._Pnom=0; 
003468  f8803058          STRB     r3,[r0,#0x58]
;;;3881   			inv[i]._net_contr_en=0;
00346c  f880305b          STRB     r3,[r0,#0x5b]
;;;3882   			inv[i]._pwm_en=0;   
003470  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13428|
003474  f1020201          ADD      r2,r2,#1              ;3849
003478  b2d2              UXTB     r2,r2                 ;3849
                  |L1.13434|
00347a  42aa              CMP      r2,r5                 ;3849
00347c  db9c              BLT      |L1.13240|
                  |L1.13438|
;;;3883   			   
;;;3884        		}
;;;3885        	}
;;;3886      	}
;;;3887   #endif
;;;3888   
;;;3889   #ifdef GLADKOV
;;;3890   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3891   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3892   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3893   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3894   inv[0]._flags_tm=bps[4]._buff[7];
;;;3895   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3896   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3897   inv[0]._cnt=0;    
;;;3898   
;;;3899   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3900   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3901   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3902   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3903   inv[1]._flags_tm=bps[21]._buff[7];
;;;3904   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3905   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3906   inv[1]._cnt=0;    
;;;3907   #endif
;;;3908   
;;;3909   /*
;;;3910   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3911   	{
;;;3912   	lakb[0]._battCommState=0;
;;;3913   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3914   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3915   	
;;;3916   	if(lakb[0]._battCommState==0)
;;;3917   		{	
;;;3918   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3919   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3920   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3921   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3922   		}
;;;3923   	}
;;;3924   */
;;;3925   
;;;3926   #ifdef UKU_FSO
;;;3927   
;;;3928   	//if(BAT_TYPE==2)
;;;3929   		//{
;;;3930   		lakb[0]._ch_curr=((ascii2halFhex(liBatteryInBuff[105]))<<12)+
;;;3931   					 		((ascii2halFhex(liBatteryInBuff[106]))<<8)+
;;;3932   							((ascii2halFhex(liBatteryInBuff[107]))<<4)+
;;;3933   							((ascii2halFhex(liBatteryInBuff[108])));
;;;3934   		
;;;3935   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3936   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3937   	
;;;3938   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[109]))<<12)+
;;;3939   							((ascii2halFhex(liBatteryInBuff[110]))<<8)+
;;;3940   							((ascii2halFhex(liBatteryInBuff[111]))<<4)+
;;;3941   							((ascii2halFhex(liBatteryInBuff[112]))))/10;
;;;3942   
;;;3943   
;;;3944   		lakb[0]._cell_temp_1= (signed char)((((ascii2halFhex(liBatteryInBuff[81]))<<12)+
;;;3945   							((ascii2halFhex(liBatteryInBuff[82]))<<8)+
;;;3946   							((ascii2halFhex(liBatteryInBuff[83]))<<4)+
;;;3947   							((ascii2halFhex(liBatteryInBuff[84]))))/100);
;;;3948   		lakb[0]._cell_temp_2= (signed char)((((ascii2halFhex(liBatteryInBuff[85]))<<12)+
;;;3949   							((ascii2halFhex(liBatteryInBuff[86]))<<8)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[87]))<<4)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[88]))))/100);
;;;3952   		lakb[0]._cell_temp_3= (signed char)((((ascii2halFhex(liBatteryInBuff[89]))<<12)+
;;;3953   							((ascii2halFhex(liBatteryInBuff[90]))<<8)+
;;;3954   							((ascii2halFhex(liBatteryInBuff[91]))<<4)+
;;;3955   							((ascii2halFhex(liBatteryInBuff[92]))))/100);
;;;3956   		lakb[0]._cell_temp_4= (signed char)((((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3959   							((ascii2halFhex(liBatteryInBuff[96]))))/100);
;;;3960   		lakb[0]._cell_temp_ambient= (signed char)((((ascii2halFhex(liBatteryInBuff[97]))<<12)+
;;;3961   							((ascii2halFhex(liBatteryInBuff[98]))<<8)+
;;;3962   							((ascii2halFhex(liBatteryInBuff[99]))<<4)+
;;;3963   							((ascii2halFhex(liBatteryInBuff[100]))))/100);
;;;3964   		lakb[0]._cell_temp_power= (signed char)((((ascii2halFhex(liBatteryInBuff[101]))<<12)+
;;;3965   							((ascii2halFhex(liBatteryInBuff[102]))<<8)+
;;;3966   							((ascii2halFhex(liBatteryInBuff[103]))<<4)+
;;;3967   							((ascii2halFhex(liBatteryInBuff[104]))))/100);
;;;3968   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_ambient,'[',0);
;;;3969   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_power,']',0);
;;;3970   	
;;;3971   /*		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3972   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;	*/
;;;3975   	
;;;3976   		lakb[0]._s_o_c=		(unsigned short)((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3977   							((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3978   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3980   	
;;;3981   		lakb[0]._s_o_h=		(unsigned short)((ascii2halFhex(liBatteryInBuff[119]))<<12)+
;;;3982   							((ascii2halFhex(liBatteryInBuff[120]))<<8)+
;;;3983   							((ascii2halFhex(liBatteryInBuff[121]))<<4)+
;;;3984   							((ascii2halFhex(liBatteryInBuff[122])));
;;;3985   
;;;3986   		if(lakb[0]._s_o_h==0)lakb[0]._s_o_h=1;
;;;3987   
;;;3988   		temp_SL=((signed long)lakb[0]._s_o_c)*100L;
;;;3989   		temp_SL/=(signed long)lakb[0]._s_o_h;
;;;3990   		lakb[0]._s_o_c_percent=(signed short)temp_SL;
;;;3991   			
;;;3992   
;;;3993   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3994   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3995   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3996   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3997   	
;;;3998   		//lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3999   	
;;;4000   #endif //UKU_FSO	
;;;4001   
;;;4002   
;;;4003   
;;;4004   #ifdef UKU_TELECORE2015
;;;4005   
;;;4006   	if(BAT_TYPE==2)
;;;4007   		{
;;;4008   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4009   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4010   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4011   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4012   		
;;;4013   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;4014   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;4015   	
;;;4016   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;4017   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;4018   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;4019   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;4020   	
;;;4021   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;4022   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;4023   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;4024   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;4025   	
;;;4026   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;4027   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;4028   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;4029   							((ascii2halFhex(liBatteryInBuff[124])));
;;;4030   	
;;;4031   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4032   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4033   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4034   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4035   	
;;;4036   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4037   	
;;;4038   	
;;;4039   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4040   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4041   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4042   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;4043   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;4044   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4045   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;4046   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4047   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;4048   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;4049   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4050   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;4051   	
;;;4052   		if(lakb[i]._rat_cap==0)
;;;4053   			{
;;;4054   			if(lakb[i]._isOnCnt)
;;;4055   				{
;;;4056   				lakb[i]._isOnCnt--;
;;;4057   				if(lakb[i]._isOnCnt==0)
;;;4058   					{
;;;4059   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4060   					}
;;;4061   				}
;;;4062   			}
;;;4063   		else 
;;;4064   			{
;;;4065   			if(lakb[i]._isOnCnt<50)
;;;4066   				{
;;;4067   				lakb[i]._isOnCnt++;
;;;4068   				if(lakb[i]._isOnCnt==50)
;;;4069   					{
;;;4070   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4071   					}
;;;4072   				}
;;;4073   			}
;;;4074   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;4075   		}
;;;4076   	else if(BAT_TYPE==3)
;;;4077   		{
;;;4078   		//short numOfPacks;
;;;4079   		//short numOfCells, numOfTemperCells, baseOfData;
;;;4080   		
;;;4081   		#ifndef UKU_TELECORE2016
;;;4082   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;4083   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;4084   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;4085   		if(numOfPacks)numOfPacks-=1;
;;;4086   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;4087   		plazma_numOfCells=numOfCells;
;;;4088   		plazma_numOfTemperCells=numOfTemperCells;
;;;4089   		plazma_numOfPacks=numOfPacks;
;;;4090   
;;;4091   
;;;4092   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;4093   
;;;4094   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;4095   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;4096   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;4097   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;4098   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;4099   							);	  
;;;4100   
;;;4101   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;4102   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;4103   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;4104   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;4105   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;4106   							)/10;
;;;4107   
;;;4108   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;4109   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;4110   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;4111   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;4112   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;4113   							)-2730;
;;;4114   
;;;4115   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;4116   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;4117   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;4118   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;4119   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;4120   							)/10;
;;;4121   
;;;4122   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;4123   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4124   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4125   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4126   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4127   							)/10;
;;;4128   		#endif
;;;4129   		
;;;4130   		#ifdef UKU_TELECORE2016
;;;4131   		{
;;;4132   		char i;
;;;4133   		
;;;4134   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4135   			{
;;;4136   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4137   			}
;;;4138   		}
;;;4139   		#endif
;;;4140   		
;;;4141   										  
;;;4142   		}
;;;4143   	
;;;4144   if(sacredSunSilentCnt<3) 
;;;4145   	{
;;;4146       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4147       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4148      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4149   	}
;;;4150   else 
;;;4151   	{
;;;4152       	//bat[0]._Ub=0;
;;;4153       	//bat[0]._Tb=0;
;;;4154      	//bat[0]._Ib=0;
;;;4155   	}
;;;4156   
;;;4157   if(BAT_TYPE==1)
;;;4158   	{
;;;4159   	char i;
;;;4160   	for(i=0;i<1;i++)
;;;4161   		{
;;;4162   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4163   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4164   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4165   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4166   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4167   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4168   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4169   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4170   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4171   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4172   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4173   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4174   		lakb[i]._flags1= lakb_damp[i][34];
;;;4175   		lakb[i]._flags2= lakb_damp[i][35];
;;;4176   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4177   
;;;4178   /*		if(lakb[i]._rat_cap==0)
;;;4179   			{
;;;4180   			if(lakb[i]._isOnCnt)
;;;4181   				{
;;;4182   				lakb[i]._isOnCnt--;
;;;4183   				if(lakb[i]._isOnCnt==0)
;;;4184   					{
;;;4185   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4186   					}
;;;4187   				}
;;;4188   			}
;;;4189   		else 
;;;4190   			{
;;;4191   			if(lakb[i]._isOnCnt<50)
;;;4192   				{
;;;4193   				lakb[i]._isOnCnt++;
;;;4194   				if(lakb[i]._isOnCnt==50)
;;;4195   					{
;;;4196   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4197   					}
;;;4198   				}
;;;4199   			} */
;;;4200   		gran(&lakb[i]._isOnCnt,0,50);
;;;4201   	 	}
;;;4202   
;;;4203   	if(lakb_damp[0][41]==100)
;;;4204   		{
;;;4205   		li_bat._485Error=1;
;;;4206   		}
;;;4207   	if(lakb_damp[0][41]==0)
;;;4208   		{
;;;4209   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4210   		li_bat._485Error=0;
;;;4211   		}
;;;4212   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4213   
;;;4214   
;;;4215   	}
;;;4216   
;;;4217   
;;;4218   #endif
;;;4219   
;;;4220   		#ifdef UKU_TELECORE2017
;;;4221   		{
;;;4222   		char i;
;;;4223   		
;;;4224   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4225   			{
;;;4226   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4227   			}
;;;4228   		}
;;;4229   		#endif
;;;4230   #ifdef UKU_TELECORE2015
;;;4231   //вычисление параметров работы батареи
;;;4232   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4233   li_bat._batStat=bsOK;
;;;4234   if(BAT_TYPE==1) //COSLIGHT
;;;4235   	{
;;;4236   	if(li_bat._batStat==bsOK)
;;;4237   		{
;;;4238   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4239   
;;;4240   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4241   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4242   	
;;;4243   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4244   		li_bat._soc=lakb[0]._s_o_c;
;;;4245   		li_bat._soh=lakb[0]._s_o_h;
;;;4246   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4247   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4248   		li_bat._rbt=lakb[0]._r_b_t;
;;;4249   		}
;;;4250   	else 
;;;4251   		{
;;;4252   		li_bat._Ub=bat[0]._Ub;
;;;4253   		li_bat._Ib=bat[0]._Ib/10;
;;;4254   		li_bat._Tb=bat[0]._Tb;
;;;4255   		}
;;;4256   
;;;4257   	if((li_bat._485Error)||(li_bat._canError))
;;;4258   		{
;;;4259   		li_bat._batStat=bsOFF;
;;;4260   		}
;;;4261   	else li_bat._batStat=bsOK;
;;;4262   	}
;;;4263   else if(BAT_TYPE==2) //SACRED SUN
;;;4264   	{
;;;4265   	}
;;;4266   else if(BAT_TYPE==3) //ZTT
;;;4267   	{
;;;4268   	if(li_bat._batStat==bsOK)
;;;4269   		{
;;;4270   
;;;4271   		}
;;;4272   	}
;;;4273   #endif
;;;4274   
;;;4275   
;;;4276   /*
;;;4277   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4278   	{
;;;4279   
;;;4280   
;;;4281   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4282   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4283   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4284   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4285   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4286   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4287   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4288   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4289   
;;;4290   	tempSS=0;
;;;4291   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4292   
;;;4293   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4294   
;;;4295   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4296   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4297   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4298   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4299   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4300   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4301   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4302   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4303   
;;;4304   	tempSS=0;
;;;4305   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4306   
;;;4307   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4308   
;;;4309   
;;;4310   	}*/
;;;4311   }
00347e  e8bd9fff          POP      {r0-r12,pc}
003482  0000              DCW      0x0000
                  |L1.13444|
                          DCD      Kibat1
                  |L1.13448|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13452|
                          DCD      bat
                  |L1.13456|
                          DCD      adc_buff_ext_
                  |L1.13460|
                          DCD      Kunet_ext
                  |L1.13464|
                          DCD      Uvv
                  |L1.13468|
                          DCD      Uvv0
                  |L1.13472|
                          DCD      net_U
                  |L1.13476|
                          DCD      eb2_data_short
                  |L1.13480|
                          DCD      Kvv_eb2
                  |L1.13484|
                          DCD      Uvv_eb2
                  |L1.13488|
                          DCD      Kpes_eb2
                  |L1.13492|
                          DCD      Upes_eb2
                  |L1.13496|
                          DCD      t_ext
                  |L1.13500|
                          DCD      ibt
                  |L1.13504|
                          DCD      t_box
                  |L1.13508|
                          DCD      t_ext_can_nd
                  |L1.13512|
                          DCD      t_ext_can
                  |L1.13516|
                          DCD      BAT_IS_ON
                  |L1.13520|
                          DCD      load_I
                  |L1.13524|
                          DCD      Isumm
                  |L1.13528|
                          DCD      NUMINV
                  |L1.13532|
                          DCD      inv
                          ENDP

                  mnemo_hndl PROC
;;;4372   //-----------------------------------------------
;;;4373   void mnemo_hndl(void)
0034e0  4afb              LDR      r2,|L1.14544|
;;;4374   {
;;;4375   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4376   	{
;;;4377   	if(mnemo_cnt)mnemo_cnt--;
0034e2  49fc              LDR      r1,|L1.14548|
0034e4  7810              LDRB     r0,[r2,#0]            ;4375  ; a_ind
0034e6  2804              CMP      r0,#4                 ;4375
0034e8  d001              BEQ      |L1.13550|
0034ea  2801              CMP      r0,#1                 ;4375
0034ec  d105              BNE      |L1.13562|
                  |L1.13550|
0034ee  7850              LDRB     r0,[r2,#1]            ;4375  ; a_ind
0034f0  b918              CBNZ     r0,|L1.13562|
0034f2  48f9              LDR      r0,|L1.14552|
0034f4  7800              LDRB     r0,[r0,#0]            ;4375  ; MNEMO_ON
0034f6  2855              CMP      r0,#0x55              ;4375
0034f8  d003              BEQ      |L1.13570|
                  |L1.13562|
;;;4378   	}
;;;4379   else mnemo_cnt=MNEMO_TIME;
0034fa  48f8              LDR      r0,|L1.14556|
0034fc  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0034fe  7008              STRB     r0,[r1,#0]
                  |L1.13568|
;;;4380   }
003500  4770              BX       lr
                  |L1.13570|
003502  7808              LDRB     r0,[r1,#0]            ;4377  ; mnemo_cnt
003504  2800              CMP      r0,#0                 ;4377
003506  d0fb              BEQ      |L1.13568|
003508  f1a00001          SUB      r0,r0,#1              ;4377
00350c  7008              STRB     r0,[r1,#0]            ;4377
00350e  4770              BX       lr
;;;4381   
                          ENDP

                  apv_start PROC
;;;4382   //-----------------------------------------------
;;;4383   void apv_start(char in)
003510  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4384   {
;;;4385   if(	(bps[in]._apv_timer_1_lev==0)&&
003514  eb011100          ADD      r1,r1,r0,LSL #4
003518  48f1              LDR      r0,|L1.14560|
00351a  eb000081          ADD      r0,r0,r1,LSL #2
00351e  f890105e          LDRB     r1,[r0,#0x5e]
003522  2900              CMP      r1,#0
003524  d115              BNE      |L1.13650|
;;;4386   	(bps[in]._apv_cnt_1_lev==0)&&
003526  f890105f          LDRB     r1,[r0,#0x5f]
00352a  2900              CMP      r1,#0
00352c  d111              BNE      |L1.13650|
;;;4387   	(bps[in]._apv_timer_2_lev==0) )
00352e  f8b01060          LDRH     r1,[r0,#0x60]
003532  2900              CMP      r1,#0
003534  d10d              BNE      |L1.13650|
;;;4388   		{
;;;4389    		bps[in]._apv_timer_1_lev=60;
003536  f04f013c          MOV      r1,#0x3c
00353a  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4390   		bps[in]._apv_cnt_1_lev=3;
00353e  f04f0103          MOV      r1,#3
003542  7041              STRB     r1,[r0,#1]
;;;4391   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003544  49e7              LDR      r1,|L1.14564|
003546  f44f6261          MOV      r2,#0xe10
00354a  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
00354c  fb01f102          MUL      r1,r1,r2
003550  8041              STRH     r1,[r0,#2]
                  |L1.13650|
;;;4392   		}
;;;4393   }
003552  4770              BX       lr
;;;4394   
                          ENDP

                  apv_stop PROC
;;;4395   //-----------------------------------------------
;;;4396   void apv_stop(char in)
003554  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4397   {
;;;4398   bps[in]._apv_timer_1_lev=0;
003558  eb021200          ADD      r2,r2,r0,LSL #4
00355c  48e0              LDR      r0,|L1.14560|
00355e  f04f0100          MOV      r1,#0
003562  eb000082          ADD      r0,r0,r2,LSL #2
003566  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4399   bps[in]._apv_cnt_1_lev=0;
00356a  7041              STRB     r1,[r0,#1]
;;;4400   bps[in]._apv_timer_2_lev=0;
00356c  8041              STRH     r1,[r0,#2]
;;;4401   }
00356e  4770              BX       lr
;;;4402   
                          ENDP

                  apv_drv PROC
;;;4403   //-----------------------------------------------
;;;4404   void apv_drv(void)		//1 Гц
003570  e92d43f0          PUSH     {r4-r9,lr}
;;;4405   {
;;;4406   for(i=0;i<NUMIST;i++)
003574  4edc              LDR      r6,|L1.14568|
003576  f04f0300          MOV      r3,#0
00357a  75f3              STRB     r3,[r6,#0x17]
;;;4407   	{
;;;4408   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4409   		{
;;;4410   		bps[i]._apv_timer_1_lev=0;
;;;4411   		bps[i]._apv_cnt_1_lev=0;
;;;4412   		bps[i]._apv_timer_2_lev=0;
;;;4413   		}
;;;4414   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
00357c  4cdb              LDR      r4,|L1.14572|
;;;4415   		{
;;;4416   		bps[i]._apv_timer_2_lev=0;
;;;4417   		}
;;;4418   
;;;4419   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4420   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4421   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4422   			{
;;;4423   			if(bps[i]._state==bsWRK)
;;;4424   				{
;;;4425   				if(bps[i]._apv_succes_timer<60)
;;;4426   					{
;;;4427   					bps[i]._apv_succes_timer++;
;;;4428   					if(bps[i]._apv_succes_timer>=60)
;;;4429   						{
;;;4430   						apv_stop(i);
;;;4431   						}
;;;4432   					}
;;;4433   				}
;;;4434   			else bps[i]._apv_succes_timer=0;
;;;4435   			}
;;;4436   
;;;4437   	if(bps[i]._apv_timer_1_lev)
;;;4438   		{
;;;4439   		bps[i]._apv_timer_2_lev=0;
;;;4440   		bps[i]._apv_timer_1_lev--;
;;;4441   		if(bps[i]._apv_timer_1_lev==0)
;;;4442   			{
;;;4443   			if(bps[i]._apv_cnt_1_lev)
;;;4444   				{
;;;4445   				bps[i]._apv_cnt_1_lev--;
;;;4446   				bps[i]._apv_timer_1_lev=60;
00357e  f04f073c          MOV      r7,#0x3c
;;;4447   				bps[i]._apv_reset_av_timer=2;
003582  f04f0802          MOV      r8,#2
003586  4dd6              LDR      r5,|L1.14560|
003588  f8df9364          LDR      r9,|L1.14576|
00358c  e079              B        |L1.13954|
                  |L1.13710|
00358e  49d9              LDR      r1,|L1.14580|
003590  7809              LDRB     r1,[r1,#0]            ;4408  ; APV_ON1
003592  b949              CBNZ     r1,|L1.13736|
003594  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4410
003598  eb011100          ADD      r1,r1,r0,LSL #4       ;4410
00359c  eb050181          ADD      r1,r5,r1,LSL #2       ;4410
0035a0  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4410
0035a4  704b              STRB     r3,[r1,#1]            ;4411
0035a6  804b              STRH     r3,[r1,#2]            ;4412
                  |L1.13736|
0035a8  7821              LDRB     r1,[r4,#0]            ;4414  ; APV_ON2
0035aa  b939              CBNZ     r1,|L1.13756|
0035ac  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4416
0035b0  eb011100          ADD      r1,r1,r0,LSL #4       ;4416
0035b4  eb050181          ADD      r1,r5,r1,LSL #2       ;4416
0035b8  f8a13060          STRH     r3,[r1,#0x60]         ;4416
                  |L1.13756|
0035bc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4419
0035c0  eb011100          ADD      r1,r1,r0,LSL #4       ;4419
0035c4  eb050181          ADD      r1,r5,r1,LSL #2       ;4419
0035c8  f891205e          LDRB     r2,[r1,#0x5e]         ;4419
0035cc  b92a              CBNZ     r2,|L1.13786|
0035ce  f891205f          LDRB     r2,[r1,#0x5f]         ;4420
0035d2  b912              CBNZ     r2,|L1.13786|
0035d4  f8b12060          LDRH     r2,[r1,#0x60]         ;4421
0035d8  b122              CBZ      r2,|L1.13796|
                  |L1.13786|
0035da  788a              LDRB     r2,[r1,#2]            ;4423
0035dc  2a01              CMP      r2,#1                 ;4423
0035de  d014              BEQ      |L1.13834|
0035e0  f8813063          STRB     r3,[r1,#0x63]         ;4434
                  |L1.13796|
0035e4  7df1              LDRB     r1,[r6,#0x17]         ;4437  ; i
0035e6  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4437
0035ea  eb001001          ADD      r0,r0,r1,LSL #4       ;4437
0035ee  eb050080          ADD      r0,r5,r0,LSL #2       ;4437
0035f2  f890205e          LDRB     r2,[r0,#0x5e]         ;4437
0035f6  b30a              CBZ      r2,|L1.13884|
0035f8  f8a03060          STRH     r3,[r0,#0x60]         ;4439
0035fc  f1a20201          SUB      r2,r2,#1              ;4440
003600  b2d2              UXTB     r2,r2                 ;4440
003602  f880205e          STRB     r2,[r0,#0x5e]         ;4440
003606  b172              CBZ      r2,|L1.13862|
003608  e024              B        |L1.13908|
                  |L1.13834|
00360a  f8912063          LDRB     r2,[r1,#0x63]         ;4425
00360e  2a3c              CMP      r2,#0x3c              ;4425
003610  d2e8              BCS      |L1.13796|
003612  f1020201          ADD      r2,r2,#1              ;4427
003616  b2d2              UXTB     r2,r2                 ;4427
003618  f8812063          STRB     r2,[r1,#0x63]         ;4427
00361c  2a3c              CMP      r2,#0x3c              ;4428
00361e  d3e1              BCC      |L1.13796|
003620  f7fffffe          BL       apv_stop
003624  e7de              B        |L1.13796|
                  |L1.13862|
003626  f890205f          LDRB     r2,[r0,#0x5f]         ;4443
00362a  b142              CBZ      r2,|L1.13886|
00362c  f1a20201          SUB      r2,r2,#1              ;4445
003630  f880205f          STRB     r2,[r0,#0x5f]         ;4445
003634  f880705e          STRB     r7,[r0,#0x5e]         ;4446
003638  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13884|
00363c  e00a              B        |L1.13908|
                  |L1.13886|
;;;4448   				}
;;;4449   			else
;;;4450   				{
;;;4451   				if(APV_ON2==apvON)
00363e  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003640  2a01              CMP      r2,#1
003642  d107              BNE      |L1.13908|
;;;4452   					{
;;;4453   					bps[i]._apv_timer_1_lev=0;
;;;4454   					bps[i]._apv_cnt_1_lev=0;
;;;4455   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003644  4aa7              LDR      r2,|L1.14564|
003646  f44f6c61          MOV      r12,#0xe10
00364a  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
00364c  fb02f20c          MUL      r2,r2,r12
003650  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13908|
;;;4456   					}
;;;4457   				}
;;;4458   			
;;;4459   			}
;;;4460   		}
;;;4461   	if(bps[i]._apv_timer_2_lev)
003654  f8b02060          LDRH     r2,[r0,#0x60]
003658  b14a              CBZ      r2,|L1.13934|
;;;4462   		{
;;;4463   		bps[i]._apv_timer_2_lev--;
00365a  f1a20201          SUB      r2,r2,#1
00365e  b292              UXTH     r2,r2
003660  f8a02060          STRH     r2,[r0,#0x60]
;;;4464   		if(bps[i]._apv_timer_2_lev==0)
003664  b91a              CBNZ     r2,|L1.13934|
;;;4465   			{
;;;4466   			bps[i]._apv_cnt_1_lev=2;
003666  f880805f          STRB     r8,[r0,#0x5f]
;;;4467   			bps[i]._apv_timer_1_lev=60;
00366a  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13934|
;;;4468   			}
;;;4469   		}
;;;4470   
;;;4471   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
00366e  f8902062          LDRB     r2,[r0,#0x62]
003672  b11a              CBZ      r2,|L1.13948|
003674  f1a20201          SUB      r2,r2,#1
003678  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13948|
00367c  f1010101          ADD      r1,r1,#1              ;4406
003680  75f1              STRB     r1,[r6,#0x17]         ;4406
                  |L1.13954|
003682  7df0              LDRB     r0,[r6,#0x17]         ;4406  ; i
003684  f9b91000          LDRSH    r1,[r9,#0]            ;4406  ; NUMIST
003688  4288              CMP      r0,r1                 ;4406
00368a  db80              BLT      |L1.13710|
;;;4472   	} 
;;;4473   /*char i;
;;;4474   for(i=0;i<2;i++) 
;;;4475   	{
;;;4476   	if(apv_cnt_sec[i])
;;;4477   		{
;;;4478   		apv_cnt_sec[i]--;
;;;4479   		if(apv_cnt_sec[i]==0)
;;;4480   			{
;;;4481   			cnt_av_umax[i]=0;
;;;4482   			cnt_av_umin[i]=0;
;;;4483   			reset_apv_cnt[i]=600;
;;;4484   			}
;;;4485   		}
;;;4486   	
;;;4487   	if(reset_apv_cnt[i])
;;;4488   		{
;;;4489   		reset_apv_cnt[i]--;
;;;4490   		if(reset_apv_cnt[i]==0)
;;;4491   			{
;;;4492   			apv_cnt[i]=0;
;;;4493   			}
;;;4494   		}	
;;;4495   		
;;;4496   	if(hour_apv_cnt[i])
;;;4497   		{
;;;4498   		hour_apv_cnt[i]--;
;;;4499   		if(hour_apv_cnt[i]==0)
;;;4500   			{
;;;4501   			apv_cnt[i]=0;
;;;4502   			avar_src_reset(i);
;;;4503   			}
;;;4504   		}			
;;;4505   	}
;;;4506   
;;;4507   
;;;4508   
;;;4509   
;;;4510   if(apv_cnt_1)
;;;4511   	{
;;;4512   	apv_cnt_1--;
;;;4513   	if(!apv_cnt_1) 
;;;4514   		{
;;;4515   		avar_src_reset(0);
;;;4516   		avar_src_reset(1);
;;;4517   		//cntrl_stat=0;
;;;4518   		}
;;;4519   	}*/		
;;;4520   }
00368c  e8bd83f0          POP      {r4-r9,pc}
;;;4521   
                          ENDP

                  adc_init PROC
;;;4522   //-----------------------------------------------
;;;4523   void adc_init(void)
003690  4899              LDR      r0,|L1.14584|
;;;4524   {
;;;4525   
;;;4526   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
003692  6841              LDR      r1,[r0,#4]
003694  f4212140          BIC      r1,r1,#0xc0000
003698  f4412180          ORR      r1,r1,#0x40000
00369c  6041              STR      r1,[r0,#4]
;;;4527   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00369e  6841              LDR      r1,[r0,#4]
0036a0  f4213140          BIC      r1,r1,#0x30000
0036a4  f4413180          ORR      r1,r1,#0x10000
0036a8  6041              STR      r1,[r0,#4]
;;;4528   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0036aa  6841              LDR      r1,[r0,#4]
0036ac  f4214140          BIC      r1,r1,#0xc000
0036b0  f4414180          ORR      r1,r1,#0x4000
0036b4  6041              STR      r1,[r0,#4]
;;;4529   
;;;4530   
;;;4531   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0036b6  6c41              LDR      r1,[r0,#0x44]
0036b8  f4212140          BIC      r1,r1,#0xc0000
0036bc  f4412100          ORR      r1,r1,#0x80000
0036c0  6441              STR      r1,[r0,#0x44]
;;;4532   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0036c2  6c41              LDR      r1,[r0,#0x44]
0036c4  f4213140          BIC      r1,r1,#0x30000
0036c8  f4413100          ORR      r1,r1,#0x20000
0036cc  6441              STR      r1,[r0,#0x44]
;;;4533   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0036ce  6c41              LDR      r1,[r0,#0x44]
0036d0  f4214140          BIC      r1,r1,#0xc000
0036d4  f4414100          ORR      r1,r1,#0x8000
0036d8  6441              STR      r1,[r0,#0x44]
;;;4534   
;;;4535   SET_REG(LPC_ADC->ADCR,0,24,3);
0036da  4888              LDR      r0,|L1.14588|
0036dc  6801              LDR      r1,[r0,#0]
0036de  f02161e0          BIC      r1,r1,#0x7000000
0036e2  6001              STR      r1,[r0,#0]
;;;4536   
;;;4537   SET_REG(LPC_ADC->ADCR,1,21,1);
0036e4  6801              LDR      r1,[r0,#0]
0036e6  f4411100          ORR      r1,r1,#0x200000
0036ea  6001              STR      r1,[r0,#0]
;;;4538   SET_REG(LPC_ADC->ADCR,0,16,1);
0036ec  6801              LDR      r1,[r0,#0]
0036ee  f4213180          BIC      r1,r1,#0x10000
0036f2  6001              STR      r1,[r0,#0]
;;;4539   SET_REG(LPC_ADC->ADCR,1,8,8);
0036f4  6801              LDR      r1,[r0,#0]
0036f6  f421417f          BIC      r1,r1,#0xff00
0036fa  f4417180          ORR      r1,r1,#0x100
0036fe  6001              STR      r1,[r0,#0]
;;;4540   
;;;4541   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4542   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4543   	
;;;4544   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4545        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4546        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4547   
;;;4548   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003700  f44f7180          MOV      r1,#0x100
003704  60c1              STR      r1,[r0,#0xc]
003706  487e              LDR      r0,|L1.14592|
003708  f44f0180          MOV      r1,#0x400000
00370c  6001              STR      r1,[r0,#0]
;;;4549   
;;;4550   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4551   
;;;4552   
;;;4553   }
00370e  4770              BX       lr
;;;4554   
                          ENDP

                  adc_drv7 PROC
;;;4555   //-----------------------------------------------
;;;4556   void adc_drv7(void) //(Uсети - постоянка)
003710  e92d41f0          PUSH     {r4-r8,lr}
;;;4557   {
;;;4558   //int temp_S;
;;;4559   //char i;
;;;4560   //signed short temp_SS;
;;;4561   
;;;4562   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
003714  4c74              LDR      r4,|L1.14568|
003716  34f2              ADDS     r4,r4,#0xf2
003718  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00371a  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00371c  1a40              SUBS     r0,r0,r1
00371e  b200              SXTH     r0,r0
003720  f7fffffe          BL       abs_pal
003724  1da6              ADDS     r6,r4,#6
003726  8030              STRH     r0,[r6,#0]
;;;4563   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003728  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00372a  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00372c  1a40              SUBS     r0,r0,r1
00372e  b200              SXTH     r0,r0
003730  f7fffffe          BL       abs_pal
003734  8070              STRH     r0,[r6,#2]
;;;4564   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
003736  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003738  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00373a  1a40              SUBS     r0,r0,r1
00373c  b200              SXTH     r0,r0
00373e  f7fffffe          BL       abs_pal
003742  80b0              STRH     r0,[r6,#4]
;;;4565   
;;;4566   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4567   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4568   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4569   
;;;4570   
;;;4571   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003744  f44f7196          MOV      r1,#0x12c
;;;4572   	{
;;;4573   	adc_result=adc_self_ch_buff[2];
003748  4d67              LDR      r5,|L1.14568|
00374a  4288              CMP      r0,r1                 ;4571
00374c  da02              BGE      |L1.14164|
00374e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003750  87a8              STRH     r0,[r5,#0x3c]
003752  e00c              B        |L1.14190|
                  |L1.14164|
;;;4574   	} 
;;;4575   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003754  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003758  4288              CMP      r0,r1
00375a  da02              BGE      |L1.14178|
;;;4576   	{
;;;4577   	adc_result=adc_self_ch_buff[1];
00375c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00375e  87a8              STRH     r0,[r5,#0x3c]
003760  e005              B        |L1.14190|
                  |L1.14178|
;;;4578   	}
;;;4579   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003762  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003766  4288              CMP      r0,r1
003768  da01              BGE      |L1.14190|
;;;4580   	{
;;;4581   	adc_result=adc_self_ch_buff[0];
00376a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00376c  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14190|
;;;4582   	}
;;;4583       //adc_result=92;
;;;4584   
;;;4585   if(adc_ch_net)
00376e  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003770  2600              MOVS     r6,#0
003772  b347              CBZ      r7,|L1.14278|
;;;4586   	{
;;;4587   
;;;4588   	main_power_buffer[0]+=(long)(adc_result);
003774  4863              LDR      r0,|L1.14596|
003776  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
00377a  6802              LDR      r2,[r0,#0]  ; main_power_buffer
00377c  440a              ADD      r2,r2,r1
00377e  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4589   	main_power_buffer[1]+=(long)(adc_result);
003780  6842              LDR      r2,[r0,#4]  ; main_power_buffer
003782  440a              ADD      r2,r2,r1
003784  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4590   	main_power_buffer[2]+=(long)(adc_result);
003786  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003788  440a              ADD      r2,r2,r1
00378a  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4591   	main_power_buffer[3]+=(long)(adc_result);
00378c  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00378e  4411              ADD      r1,r1,r2
003790  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4592   
;;;4593   	adc_net_buff_cnt++;
003792  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
003796  f1010101          ADD      r1,r1,#1
00379a  b209              SXTH     r1,r1
00379c  f8a51044          STRH     r1,[r5,#0x44]
;;;4594   	if(adc_net_buff_cnt>=0x1000)
0037a0  f5b15f80          CMP      r1,#0x1000
0037a4  db01              BLT      |L1.14250|
;;;4595   		{
;;;4596   		adc_net_buff_cnt=0;
0037a6  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14250|
;;;4597   		}
;;;4598   	if((adc_net_buff_cnt&0x03ff)==0)
0037aa  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0037ae  058a              LSLS     r2,r1,#22
0037b0  d131              BNE      |L1.14358|
;;;4599   		{
;;;4600   		#ifdef UKU_220
;;;4601   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4602   		#else
;;;4603   		#ifdef UKU_220_V2
;;;4604   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4605   		#else
;;;4606   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0037b2  ea4f21a1          ASR      r1,r1,#10
0037b6  f8502021          LDR      r2,[r0,r1,LSL #2]
0037ba  ea4f2222          ASR      r2,r2,#8
0037be  876a              STRH     r2,[r5,#0x3a]
;;;4607   		#endif
;;;4608   		#endif
;;;4609   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0037c0  f8406021          STR      r6,[r0,r1,LSL #2]
0037c4  e027              B        |L1.14358|
                  |L1.14278|
;;;4610   		}
;;;4611   
;;;4612   
;;;4613   	} 
;;;4614   else if(!adc_ch_net)
;;;4615   	{
;;;4616   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0037c6  4850              LDR      r0,|L1.14600|
0037c8  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0037ca  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0037cc  eb001384          ADD      r3,r0,r4,LSL #6
0037d0  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0037d4  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4617   	
;;;4618   	if((adc_ch_cnt&0x03)==0)
0037d8  0790              LSLS     r0,r2,#30
0037da  d10f              BNE      |L1.14332|
;;;4619   		{
;;;4620   		long temp_L;
;;;4621   		char i;
;;;4622   		temp_L=0;
0037dc  4601              MOV      r1,r0
                  |L1.14302|
;;;4623   		for(i=0;i<16;i++)
;;;4624   			{
;;;4625   			temp_L+=adc_buff[adc_ch][i];
0037de  f853c020          LDR      r12,[r3,r0,LSL #2]
0037e2  4461              ADD      r1,r1,r12
0037e4  f1000001          ADD      r0,r0,#1              ;4623
0037e8  b2c0              UXTB     r0,r0                 ;4623
0037ea  2810              CMP      r0,#0x10              ;4623
0037ec  d3f7              BCC      |L1.14302|
;;;4626   			}
;;;4627   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0037ee  ea4f1021          ASR      r0,r1,#4
0037f2  4944              LDR      r1,|L1.14596|
0037f4  f1a10120          SUB      r1,r1,#0x20
0037f8  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14332|
;;;4628   
;;;4629   		//adc_buff_[3]=346;
;;;4630   		}
;;;4631   	if(++adc_ch>=16) 
0037fc  1c64              ADDS     r4,r4,#1
0037fe  b2e0              UXTB     r0,r4
003800  74a8              STRB     r0,[r5,#0x12]
003802  2810              CMP      r0,#0x10
003804  d307              BCC      |L1.14358|
;;;4632   		{
;;;4633   		adc_ch=0;
003806  74ae              STRB     r6,[r5,#0x12]
;;;4634   		adc_ch_cnt++;
003808  f1020201          ADD      r2,r2,#1
00380c  b2d0              UXTB     r0,r2
00380e  74e8              STRB     r0,[r5,#0x13]
;;;4635   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003810  2810              CMP      r0,#0x10
003812  d300              BCC      |L1.14358|
003814  74ee              STRB     r6,[r5,#0x13]
                  |L1.14358|
;;;4636   		}
;;;4637   	}
;;;4638   
;;;4639   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4640   
;;;4641   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4642   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4643   /*
;;;4644   	{
;;;4645   	if((adc_cnt1&0x03)==0)
;;;4646   		{
;;;4647   		temp_S=0;
;;;4648   		for(i=0;i<16;i++)
;;;4649   			{
;;;4650   			temp_S+=adc_buff[adc_ch][i];
;;;4651   			} 
;;;4652            	adc_buff_[adc_ch]=temp_S>>4;
;;;4653             }
;;;4654   	}*/
;;;4655   
;;;4656   
;;;4657   		  
;;;4658   
;;;4659   adc_self_ch_cnt=0;
003816  742e              STRB     r6,[r5,#0x10]
;;;4660   
;;;4661   adc_ch_net++;
003818  f1070701          ADD      r7,r7,#1
;;;4662   adc_ch_net&=1;
00381c  f0070001          AND      r0,r7,#1
003820  7468              STRB     r0,[r5,#0x11]
;;;4663   
;;;4664   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4665   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4666   
;;;4667   if(adc_ch_net)
;;;4668   	{
;;;4669   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4670   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4671   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003822  4a36              LDR      r2,|L1.14588|
003824  b130              CBZ      r0,|L1.14388|
003826  6810              LDR      r0,[r2,#0]
003828  f02000ff          BIC      r0,r0,#0xff
00382c  f1000004          ADD      r0,r0,#4
003830  6010              STR      r0,[r2,#0]
003832  e03d              B        |L1.14512|
                  |L1.14388|
;;;4672   	}
;;;4673   else
;;;4674   	{
;;;4675   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4676   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4677   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003834  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003836  0708              LSLS     r0,r1,#28
003838  d406              BMI      |L1.14408|
00383a  6810              LDR      r0,[r2,#0]
00383c  f02000ff          BIC      r0,r0,#0xff
003840  f1000001          ADD      r0,r0,#1
003844  6010              STR      r0,[r2,#0]
003846  e005              B        |L1.14420|
                  |L1.14408|
;;;4678   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003848  6810              LDR      r0,[r2,#0]
00384a  f02000ff          BIC      r0,r0,#0xff
00384e  f1000002          ADD      r0,r0,#2
003852  6010              STR      r0,[r2,#0]
                  |L1.14420|
;;;4679   
;;;4680   
;;;4681   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003854  482d              LDR      r0,|L1.14604|
003856  6803              LDR      r3,[r0,#0]
003858  f0435380          ORR      r3,r3,#0x10000000
00385c  6003              STR      r3,[r0,#0]
;;;4682   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00385e  6a03              LDR      r3,[r0,#0x20]
003860  f0434380          ORR      r3,r3,#0x40000000
003864  6203              STR      r3,[r0,#0x20]
;;;4683   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003866  6e03              LDR      r3,[r0,#0x60]
003868  f0436380          ORR      r3,r3,#0x4000000
00386c  6603              STR      r3,[r0,#0x60]
;;;4684   
;;;4685   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
00386e  07cb              LSLS     r3,r1,#31
003870  d00a              BEQ      |L1.14472|
;;;4686   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003872  6943              LDR      r3,[r0,#0x14]
003874  f0435380          ORR      r3,r3,#0x10000000
003878  6143              STR      r3,[r0,#0x14]
                  |L1.14458|
;;;4687   
;;;4688   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
00387a  078b              LSLS     r3,r1,#30
00387c  d409              BMI      |L1.14482|
00387e  6b43              LDR      r3,[r0,#0x34]
003880  f0234380          BIC      r3,r3,#0x40000000
003884  6343              STR      r3,[r0,#0x34]
003886  e008              B        |L1.14490|
                  |L1.14472|
003888  6943              LDR      r3,[r0,#0x14]         ;4685
00388a  f0235380          BIC      r3,r3,#0x10000000     ;4685
00388e  6143              STR      r3,[r0,#0x14]         ;4685
003890  e7f3              B        |L1.14458|
                  |L1.14482|
;;;4689   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003892  6b43              LDR      r3,[r0,#0x34]
003894  f0434380          ORR      r3,r3,#0x40000000
003898  6343              STR      r3,[r0,#0x34]
                  |L1.14490|
;;;4690   
;;;4691   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
00389a  0749              LSLS     r1,r1,#29
00389c  d404              BMI      |L1.14504|
00389e  6f41              LDR      r1,[r0,#0x74]
0038a0  f0216180          BIC      r1,r1,#0x4000000
0038a4  6741              STR      r1,[r0,#0x74]
0038a6  e003              B        |L1.14512|
                  |L1.14504|
;;;4692   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0038a8  6f41              LDR      r1,[r0,#0x74]
0038aa  f0416180          ORR      r1,r1,#0x4000000
0038ae  6741              STR      r1,[r0,#0x74]
                  |L1.14512|
;;;4693   	}
;;;4694   	
;;;4695   
;;;4696   
;;;4697   
;;;4698   LPC_ADC->ADCR |=  (1<<24);
0038b0  6810              LDR      r0,[r2,#0]
0038b2  f0407080          ORR      r0,r0,#0x1000000
0038b6  6010              STR      r0,[r2,#0]
                  |L1.14520|
;;;4699   
;;;4700   }
0038b8  e8bd81f0          POP      {r4-r8,pc}
;;;4701   
                          ENDP

                  avg_hndl PROC
;;;4958   //-----------------------------------------------
;;;4959   void avg_hndl(void)
0038bc  e92d41f0          PUSH     {r4-r8,lr}
;;;4960   { 
;;;4961   char i;
;;;4962   
;;;4963   //#define AVGCNTMAX	5
;;;4964   if(avg_main_cnt)
0038c0  4d09              LDR      r5,|L1.14568|
0038c2  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
0038c6  b318              CBZ      r0,|L1.14608|
;;;4965   	{
;;;4966   	avg_main_cnt--;
0038c8  f1a00001          SUB      r0,r0,#1
0038cc  86e8              STRH     r0,[r5,#0x36]
;;;4967   	//goto avg_hndl_end;
;;;4968   	return;
;;;4969   	}                 
;;;4970   
;;;4971   avg_main_cnt=5;
;;;4972   avg_num=0;
;;;4973   
;;;4974   for(i=0;i<NUMIST;i++)
;;;4975   	{
;;;4976   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4977   	}
;;;4978   
;;;4979   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4980   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4981   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4982   
;;;4983   if(avg_vektor) avg_vektor=0;
;;;4984   else avg_vektor=1;
;;;4985   	
;;;4986   if(avg_num<2)
;;;4987   	{
;;;4988   	//goto avg_hndl_end;
;;;4989   	return;
;;;4990   	}
;;;4991   	
;;;4992   else
;;;4993   	{
;;;4994   	i_avg_min=5000;
;;;4995   	i_avg_max=0;
;;;4996   	i_avg_summ=0;
;;;4997   	for(i=0;i<NUMIST;i++)
;;;4998   		{
;;;4999   		if(bps[i]._state==bsWRK)
;;;5000   			{
;;;5001   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;5002   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;5003   			
;;;5004   			i_avg_summ+=bps[i]._Ii;
;;;5005   			}
;;;5006   		}
;;;5007   	i_avg=i_avg_summ/avg_num;	
;;;5008   	
;;;5009   	if(i_avg_min==0)i_avg_min=1;
;;;5010   
;;;5011   	avg=i_avg_max;
;;;5012   	avg*=100;
;;;5013   	avg/=i_avg_min;
;;;5014   
;;;5015   	if(avg>130) bAVG=1;
;;;5016   	if(avg<110) bAVG=0;
;;;5017   
;;;5018   	if(bAVG==1)
;;;5019   		{
;;;5020   		for(i=0;i<NUMIST;i++)
;;;5021   			{
;;;5022   			if(bps[i]._state==bsWRK)
;;;5023   				{
;;;5024   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;5025   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;5026   			
;;;5027   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;5028   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;5029   				}
;;;5030   			}		
;;;5031   		}			
;;;5032   	}   	 
;;;5033   
;;;5034   
;;;5035   avg_hndl_end:
;;;5036   __nop();  
;;;5037   }
0038ce  e7f3              B        |L1.14520|
                  |L1.14544|
                          DCD      a_ind
                  |L1.14548|
                          DCD      mnemo_cnt
                  |L1.14552|
                          DCD      MNEMO_ON
                  |L1.14556|
                          DCD      MNEMO_TIME
                  |L1.14560|
                          DCD      bps
                  |L1.14564|
                          DCD      APV_ON2_TIME
                  |L1.14568|
                          DCD      ||area_number.26||
                  |L1.14572|
                          DCD      APV_ON2
                  |L1.14576|
                          DCD      NUMIST
                  |L1.14580|
                          DCD      APV_ON1
                  |L1.14584|
                          DCD      0x4002c000
                  |L1.14588|
                          DCD      0x40034000
                  |L1.14592|
                          DCD      0xe000e100
                  |L1.14596|
                          DCD      ||.bss||+0x42c
                  |L1.14600|
                          DCD      ||.bss||+0xc
                  |L1.14604|
                          DCD      0x2009c000
                  |L1.14608|
003910  f04f0005          MOV      r0,#5                 ;4971
003914  86e8              STRH     r0,[r5,#0x36]         ;4971
003916  f04f0700          MOV      r7,#0                 ;4972
00391a  76af              STRB     r7,[r5,#0x1a]         ;4972
00391c  f04f0000          MOV      r0,#0                 ;4974
003920  49f8              LDR      r1,|L1.15620|
003922  4cf7              LDR      r4,|L1.15616|
003924  f9b12000          LDRSH    r2,[r1,#0]            ;4974
003928  e012              B        |L1.14672|
                  |L1.14634|
00392a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4976
00392e  eb011100          ADD      r1,r1,r0,LSL #4       ;4976
003932  eb040181          ADD      r1,r4,r1,LSL #2       ;4976
003936  788b              LDRB     r3,[r1,#2]            ;4976
003938  2b01              CMP      r3,#1                 ;4976
00393a  d106              BNE      |L1.14666|
00393c  78c9              LDRB     r1,[r1,#3]            ;4976
00393e  2914              CMP      r1,#0x14              ;4976
003940  d203              BCS      |L1.14666|
003942  7ea9              LDRB     r1,[r5,#0x1a]         ;4976  ; avg_num
003944  f1010101          ADD      r1,r1,#1              ;4976
003948  76a9              STRB     r1,[r5,#0x1a]         ;4976
                  |L1.14666|
00394a  f1000001          ADD      r0,r0,#1              ;4974
00394e  b2c0              UXTB     r0,r0                 ;4974
                  |L1.14672|
003950  4290              CMP      r0,r2                 ;4974
003952  dbea              BLT      |L1.14634|
003954  7ee8              LDRB     r0,[r5,#0x1b]         ;4983  ; avg_vektor
003956  f04f0c01          MOV      r12,#1                ;4976
00395a  b108              CBZ      r0,|L1.14688|
00395c  76ef              STRB     r7,[r5,#0x1b]         ;4983
00395e  e001              B        |L1.14692|
                  |L1.14688|
003960  f885c01b          STRB     r12,[r5,#0x1b]        ;4984
                  |L1.14692|
003964  7eae              LDRB     r6,[r5,#0x1a]         ;4986  ; avg_num
003966  2e02              CMP      r6,#2                 ;4986
003968  d3a6              BCC      |L1.14520|
00396a  4be7              LDR      r3,|L1.15624|
00396c  f2413088          MOV      r0,#0x1388            ;4994
003970  61d8              STR      r0,[r3,#0x1c]         ;4994  ; i_avg_min
003972  619f              STR      r7,[r3,#0x18]         ;4995  ; i_avg_max
003974  621f              STR      r7,[r3,#0x20]         ;4996  ; i_avg_summ
003976  f04f0100          MOV      r1,#0                 ;4997
00397a  e01c              B        |L1.14774|
                  |L1.14716|
00397c  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4999
003980  eb001001          ADD      r0,r0,r1,LSL #4       ;4999
003984  eb040080          ADD      r0,r4,r0,LSL #2       ;4999
003988  f8908002          LDRB     r8,[r0,#2]            ;4999
00398c  f1b80f01          CMP      r8,#1                 ;4999
003990  d10e              BNE      |L1.14768|
003992  6a40              LDR      r0,[r0,#0x24]         ;5001
003994  f8d38018          LDR      r8,[r3,#0x18]         ;5001  ; i_avg_max
003998  4540              CMP      r0,r8                 ;5001
00399a  dd00              BLE      |L1.14750|
00399c  6198              STR      r0,[r3,#0x18]         ;5001  ; i_avg_max
                  |L1.14750|
00399e  f8d3801c          LDR      r8,[r3,#0x1c]         ;5002  ; i_avg_min
0039a2  4540              CMP      r0,r8                 ;5002
0039a4  da00              BGE      |L1.14760|
0039a6  61d8              STR      r0,[r3,#0x1c]         ;5002  ; i_avg_min
                  |L1.14760|
0039a8  f8d38020          LDR      r8,[r3,#0x20]         ;5004  ; i_avg_summ
0039ac  4440              ADD      r0,r0,r8              ;5004
0039ae  6218              STR      r0,[r3,#0x20]         ;5004  ; i_avg_summ
                  |L1.14768|
0039b0  f1010101          ADD      r1,r1,#1              ;4997
0039b4  b2c9              UXTB     r1,r1                 ;4997
                  |L1.14774|
0039b6  4291              CMP      r1,r2                 ;4997
0039b8  dbe0              BLT      |L1.14716|
0039ba  6a18              LDR      r0,[r3,#0x20]         ;5007  ; i_avg_summ
0039bc  fb90f6f6          SDIV     r6,r0,r6              ;5007
0039c0  625e              STR      r6,[r3,#0x24]         ;5007  ; i_avg
0039c2  69d8              LDR      r0,[r3,#0x1c]         ;5009  ; i_avg_min
0039c4  b908              CBNZ     r0,|L1.14794|
0039c6  f8c3c01c          STR      r12,[r3,#0x1c]        ;5009  ; i_avg_min
                  |L1.14794|
0039ca  6998              LDR      r0,[r3,#0x18]         ;5011  ; i_avg_max
0039cc  f04f0164          MOV      r1,#0x64              ;5012
0039d0  fb00f001          MUL      r0,r0,r1              ;5012
0039d4  69d9              LDR      r1,[r3,#0x1c]         ;5013  ; i_avg_min
0039d6  fb90f0f1          SDIV     r0,r0,r1              ;5013
0039da  6298              STR      r0,[r3,#0x28]         ;5013  ; avg
0039dc  2882              CMP      r0,#0x82              ;5015
0039de  dd01              BLE      |L1.14820|
0039e0  f885c019          STRB     r12,[r5,#0x19]        ;5015
                  |L1.14820|
0039e4  286e              CMP      r0,#0x6e              ;5016
0039e6  da00              BGE      |L1.14826|
0039e8  766f              STRB     r7,[r5,#0x19]         ;5016
                  |L1.14826|
0039ea  7e68              LDRB     r0,[r5,#0x19]         ;5018  ; bAVG
0039ec  2801              CMP      r0,#1                 ;5018
0039ee  d138              BNE      |L1.14946|
0039f0  f04f0100          MOV      r1,#0                 ;5020
0039f4  f06f0731          MVN      r7,#0x31              ;5027
0039f8  e031              B        |L1.14942|
                  |L1.14842|
0039fa  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5022
0039fe  eb001001          ADD      r0,r0,r1,LSL #4       ;5022
003a02  eb040080          ADD      r0,r4,r0,LSL #2       ;5022
003a06  7883              LDRB     r3,[r0,#2]            ;5022
003a08  2b01              CMP      r3,#1                 ;5022
003a0a  d125              BNE      |L1.14936|
003a0c  6a43              LDR      r3,[r0,#0x24]         ;5024
003a0e  42b3              CMP      r3,r6                 ;5024
003a10  dd0a              BLE      |L1.14888|
003a12  f895c01b          LDRB     r12,[r5,#0x1b]        ;5024  ; avg_vektor
003a16  f1bc0f00          CMP      r12,#0                ;5024
003a1a  d105              BNE      |L1.14888|
003a1c  f8b0c054          LDRH     r12,[r0,#0x54]        ;5024
003a20  f1ac0c01          SUB      r12,r12,#1            ;5024
003a24  f8a0c054          STRH     r12,[r0,#0x54]        ;5024
                  |L1.14888|
003a28  42b3              CMP      r3,r6                 ;5025
003a2a  da07              BGE      |L1.14908|
003a2c  7eeb              LDRB     r3,[r5,#0x1b]         ;5025  ; avg_vektor
003a2e  b12b              CBZ      r3,|L1.14908|
003a30  f8b03054          LDRH     r3,[r0,#0x54]         ;5025
003a34  f1030301          ADD      r3,r3,#1              ;5025
003a38  f8a03054          STRH     r3,[r0,#0x54]         ;5025
                  |L1.14908|
003a3c  f9b03054          LDRSH    r3,[r0,#0x54]         ;5027
003a40  42bb              CMP      r3,r7                 ;5027
003a42  da01              BGE      |L1.14920|
003a44  f8a07054          STRH     r7,[r0,#0x54]         ;5027
                  |L1.14920|
003a48  f9b03054          LDRSH    r3,[r0,#0x54]         ;5028
003a4c  2b32              CMP      r3,#0x32              ;5028
003a4e  dd03              BLE      |L1.14936|
003a50  f04f0332          MOV      r3,#0x32              ;5028
003a54  f8a03054          STRH     r3,[r0,#0x54]         ;5028
                  |L1.14936|
003a58  f1010101          ADD      r1,r1,#1              ;5020
003a5c  b2c9              UXTB     r1,r1                 ;5020
                  |L1.14942|
003a5e  4291              CMP      r1,r2                 ;5020
003a60  dbcb              BLT      |L1.14842|
                  |L1.14946|
003a62  bf00              NOP                            ;5036
003a64  e728              B        |L1.14520|
;;;5038   
                          ENDP

                  rele_hndl PROC
;;;5051   //*************-----------------------------------------------
;;;5052   void rele_hndl(void)
003a66  e92d5ff0          PUSH     {r4-r12,lr}
;;;5053   {
;;;5054   //static char cnt_rel_sam;
;;;5055   //char temp;
;;;5056   
;;;5057   //temp=0;
;;;5058   
;;;5059   
;;;5060   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003a6a  48a8              LDR      r0,|L1.15628|
003a6c  6801              LDR      r1,[r0,#0]
003a6e  4aa8              LDR      r2,|L1.15632|
003a70  ea010102          AND      r1,r1,r2
003a74  6001              STR      r1,[r0,#0]
;;;5061   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003a76  4ca7              LDR      r4,|L1.15636|
003a78  6821              LDR      r1,[r4,#0]
003a7a  f441717c          ORR      r1,r1,#0x3f0
003a7e  6021              STR      r1,[r4,#0]
;;;5062   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003a80  69c1              LDR      r1,[r0,#0x1c]
003a82  f4212140          BIC      r1,r1,#0xc0000
003a86  61c1              STR      r1,[r0,#0x1c]
;;;5063   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003a88  6e21              LDR      r1,[r4,#0x60]
003a8a  f0417100          ORR      r1,r1,#0x2000000
003a8e  6621              STR      r1,[r4,#0x60]
;;;5064   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003a90  6841              LDR      r1,[r0,#4]
003a92  f0216140          BIC      r1,r1,#0xc000000
003a96  6041              STR      r1,[r0,#4]
;;;5065   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003a98  6820              LDR      r0,[r4,#0]
003a9a  f0405000          ORR      r0,r0,#0x20000000
003a9e  6020              STR      r0,[r4,#0]
;;;5066   
;;;5067   
;;;5068   
;;;5069   
;;;5070   
;;;5071   
;;;5072   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003aa0  489e              LDR      r0,|L1.15644|
003aa2  4d9d              LDR      r5,|L1.15640|
003aa4  499f              LDR      r1,|L1.15652|
003aa6  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003aa8  489d              LDR      r0,|L1.15648|
003aaa  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003aae  f9b11000          LDRSH    r1,[r1,#0]
003ab2  7800              LDRB     r0,[r0,#0]
003ab4  4313              ORRS     r3,r3,r2
003ab6  d007              BEQ      |L1.15048|
003ab8  b130              CBZ      r0,|L1.15048|
003aba  2905              CMP      r1,#5
003abc  dd04              BLE      |L1.15048|
;;;5073   	{
;;;5074   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003abe  69a3              LDR      r3,[r4,#0x18]
003ac0  f4437380          ORR      r3,r3,#0x100
003ac4  61a3              STR      r3,[r4,#0x18]
003ac6  e003              B        |L1.15056|
                  |L1.15048|
;;;5075   	}
;;;5076   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003ac8  69e3              LDR      r3,[r4,#0x1c]
003aca  f4437380          ORR      r3,r3,#0x100
003ace  61e3              STR      r3,[r4,#0x1c]
                  |L1.15056|
;;;5077   
;;;5078   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003ad0  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003ad4  4313              ORRS     r3,r3,r2
003ad6  d007              BEQ      |L1.15080|
003ad8  b130              CBZ      r0,|L1.15080|
003ada  2905              CMP      r1,#5
003adc  dd04              BLE      |L1.15080|
;;;5079   	{
;;;5080   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003ade  69a0              LDR      r0,[r4,#0x18]
003ae0  f0400040          ORR      r0,r0,#0x40
003ae4  61a0              STR      r0,[r4,#0x18]
003ae6  e003              B        |L1.15088|
                  |L1.15080|
;;;5081   	}
;;;5082   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003ae8  69e0              LDR      r0,[r4,#0x1c]
003aea  f0400040          ORR      r0,r0,#0x40
003aee  61e0              STR      r0,[r4,#0x1c]
                  |L1.15088|
;;;5083   
;;;5084   
;;;5085   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003af0  20d2              MOVS     r0,#0xd2
003af2  f7fffffe          BL       mess_find_unvol
003af6  4d8c              LDR      r5,|L1.15656|
003af8  b110              CBZ      r0,|L1.15104|
003afa  6828              LDR      r0,[r5,#0]  ; mess_data
003afc  2864              CMP      r0,#0x64
003afe  d048              BEQ      |L1.15250|
                  |L1.15104|
;;;5086   	{
;;;5087   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;5088   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;5089   	}
;;;5090   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003b00  69e0              LDR      r0,[r4,#0x1c]
003b02  f0405000          ORR      r0,r0,#0x20000000
003b06  61e0              STR      r0,[r4,#0x1c]
                  |L1.15112|
;;;5091   
;;;5092   
;;;5093   #ifndef UKU2071x
;;;5094   //Реле аварии сети
;;;5095   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5096   	{
;;;5097   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5098   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5099   	}
;;;5100   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5101   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5102   #endif
;;;5103   #ifdef UKU2071x
;;;5104   //Реле аварии сети
;;;5105   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b08  20d2              MOVS     r0,#0xd2
003b0a  f7fffffe          BL       mess_find_unvol
;;;5106   	{
;;;5107   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;5108   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5109   	}
;;;5110   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003b0e  4e87              LDR      r6,|L1.15660|
003b10  b110              CBZ      r0,|L1.15128|
003b12  6828              LDR      r0,[r5,#0]            ;5105  ; mess_data
003b14  2866              CMP      r0,#0x66              ;5105
003b16  d04b              BEQ      |L1.15280|
                  |L1.15128|
003b18  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b1a  07c0              LSLS     r0,r0,#31
003b1c  d054              BEQ      |L1.15304|
;;;5111   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b1e  6fa0              LDR      r0,[r4,#0x78]
003b20  f0407000          ORR      r0,r0,#0x2000000
003b24  67a0              STR      r0,[r4,#0x78]
                  |L1.15142|
;;;5112   #endif
;;;5113   
;;;5114   #ifdef UKU_3U
;;;5115   //Реле аварий батарей
;;;5116   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5117   	{
;;;5118   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5119   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5120        }
;;;5121   else 
;;;5122   	{
;;;5123   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5124        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5125   	} 
;;;5126   
;;;5127   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5128   	{
;;;5129   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5130   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5131        }
;;;5132   else 
;;;5133   	{
;;;5134   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5135        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5136   	} 
;;;5137   
;;;5138   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5139   	{
;;;5140   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5141   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5142        }
;;;5143   else 
;;;5144   	{
;;;5145   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5146        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5147   	} 
;;;5148   
;;;5149   #endif
;;;5150   
;;;5151   
;;;5152   #ifdef UKU_GLONASS
;;;5153   //Реле аварий батарей
;;;5154   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5155   	{
;;;5156   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5157   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5158        }
;;;5159   else 
;;;5160   	{
;;;5161   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5162        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5163   	} 
;;;5164   
;;;5165   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5166   	{
;;;5167   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5168   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5169        }
;;;5170   else 
;;;5171   	{
;;;5172   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5173        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5174   	} 
;;;5175   
;;;5176   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5177   	{
;;;5178   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5179   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5180        }
;;;5181   else 
;;;5182   	{
;;;5183   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5184        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5185   	} 
;;;5186   
;;;5187   #endif
;;;5188   
;;;5189   #ifdef U 
;;;5190   
;;;5191   #endif
;;;5192   
;;;5193   #ifdef UKU_RSTKM
;;;5194   
;;;5195   //Реле общей аварии
;;;5196   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5197   	{
;;;5198   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5199   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5200   	}
;;;5201   else 
;;;5202   	{
;;;5203        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5204             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5205             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5206             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5207             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5208        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5209   	}
;;;5210   	
;;;5211   
;;;5212   //Реле освещения
;;;5213   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5214   	{
;;;5215   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5216   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5217        }
;;;5218   else 
;;;5219   	{
;;;5220   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5221        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5222   	}
;;;5223   
;;;5224   
;;;5225   //Реле выключения нагрузки
;;;5226   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5227   	{
;;;5228   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5229   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5230        }
;;;5231   else if(tloaddisable_cmnd==0)
;;;5232   	{
;;;5233   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5234   	}
;;;5235   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5236   	{
;;;5237   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5238   	}
;;;5239   
;;;5240   else 
;;;5241   	{
;;;5242   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5243        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5244   	} 
;;;5245   
;;;5246   //Реле осевого вентилятора
;;;5247   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5248   	{
;;;5249   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5250   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5251   	}
;;;5252   else 
;;;5253   	{
;;;5254   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5255        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5256   	} 
;;;5257   
;;;5258   #endif
;;;5259   
;;;5260   #ifdef UKU_KONTUR
;;;5261   
;;;5262   //Реле общей аварии
;;;5263   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5264   	{
;;;5265   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5266   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5267   	}
;;;5268   else 
;;;5269   	{
;;;5270        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5271             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5272             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5273             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5274             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5275        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5276   	}
;;;5277   
;;;5278   	
;;;5279   //rel_warm_plazma=0;
;;;5280   //Реле освещения   
;;;5281   /*
;;;5282   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5283   	{
;;;5284   	if(mess_data[1]==0)
;;;5285   		{
;;;5286   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5287   		rel_warm_plazma=1;
;;;5288   		}
;;;5289   	else if(mess_data[1]==1) 
;;;5290   		{
;;;5291   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5292   		rel_warm_plazma=2;
;;;5293   		}
;;;5294        }
;;;5295   else 
;;;5296   	{
;;;5297   	if(warm_stat_k==wsOFF) 
;;;5298   		{
;;;5299   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5300   		rel_warm_plazma=3;
;;;5301   		}
;;;5302        else 
;;;5303   		{
;;;5304   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5305   		rel_warm_plazma=4;
;;;5306   		}
;;;5307   	}
;;;5308   */
;;;5309   //Реле освещения
;;;5310   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5311   	{
;;;5312   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5313   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5314        }
;;;5315   else 
;;;5316   	{
;;;5317   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5318        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5319   	}
;;;5320   
;;;5321   
;;;5322   
;;;5323   //Реле выключения нагрузки
;;;5324   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5325   	{
;;;5326   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5327   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5328        }
;;;5329   else if(tloaddisable_cmnd==0)
;;;5330   	{
;;;5331   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5332   	}
;;;5333   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5334   	{
;;;5335   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5336   	}
;;;5337   
;;;5338   else 
;;;5339   	{
;;;5340   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5341        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5342   	} 
;;;5343   
;;;5344   //Реле осевого вентилятора или отопителя
;;;5345   if(RELE_LOG)
;;;5346   	{
;;;5347   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5348   		{
;;;5349   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5350   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5351   		}
;;;5352   	else 
;;;5353   		{
;;;5354   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5355   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5356   		} 
;;;5357   
;;;5358   	}
;;;5359   else 
;;;5360   	{
;;;5361   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5362   		{
;;;5363   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5364   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5365   		}
;;;5366   	else 
;;;5367   		{
;;;5368   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5369   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5370   		} 
;;;5371   	}
;;;5372   #endif
;;;5373   
;;;5374   #ifdef UKU_6U
;;;5375   //Реле аварий батарей
;;;5376   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5377   	{
;;;5378   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5379   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5380        }
;;;5381   else 
;;;5382   	{
;;;5383   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5384        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5385   	} 
;;;5386   
;;;5387   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5388   	{
;;;5389   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5390   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5391       }
;;;5392   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5393   	{
;;;5394   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5395   		{
;;;5396   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5397   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5398        	}
;;;5399   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5400   	}
;;;5401   else 
;;;5402   	{
;;;5403   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5404       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5405   	} 
;;;5406   
;;;5407   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5408   	{
;;;5409   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5410   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5411        }
;;;5412   else 
;;;5413   	{
;;;5414   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5415        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5416   	} 
;;;5417   
;;;5418   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5419   	{
;;;5420   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5421   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5422   	}
;;;5423   else if((NPN_OUT==npnoRELEVENT))
;;;5424   	{
;;;5425   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5426   		{
;;;5427   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5428   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5429       	}
;;;5430   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5431   	}
;;;5432   else 
;;;5433   	{
;;;5434   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5435   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5436   	}
;;;5437   
;;;5438   #endif
;;;5439   
;;;5440   #ifdef UKU_220
;;;5441   //Реле аварий батарей
;;;5442   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5443   	{
;;;5444   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5445   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5446        }
;;;5447   else 
;;;5448   	{
;;;5449   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5450        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5451   	} 
;;;5452   
;;;5453   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5454   	{
;;;5455   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5456   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5457        }
;;;5458   else 
;;;5459   	{
;;;5460   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5461        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5462   	} 
;;;5463   
;;;5464   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5465   	{
;;;5466   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5467   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5468   	}
;;;5469   else 
;;;5470   	{
;;;5471   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5472   		{
;;;5473   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5474   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5475   		}
;;;5476   	else 
;;;5477   		{
;;;5478   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5479        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5480   		}
;;;5481   	}
;;;5482   
;;;5483   #endif
;;;5484   
;;;5485   #ifdef UKU_220_V2
;;;5486   //Реле аварий батарей
;;;5487   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5488   	{
;;;5489   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5490   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5491        }
;;;5492   else 
;;;5493   	{
;;;5494   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5495        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5496   	} 
;;;5497   
;;;5498   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5499   	{
;;;5500   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5501   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5502        }
;;;5503   else 
;;;5504   	{
;;;5505   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5506        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5507   	} 
;;;5508   
;;;5509   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5510   	{
;;;5511   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5512   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5513   	}
;;;5514   else 
;;;5515   	{
;;;5516   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5517   		{
;;;5518   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5519   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5520   		}
;;;5521   	else 
;;;5522   		{
;;;5523   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5524        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5525   		}
;;;5526   	}
;;;5527   
;;;5528   #endif
;;;5529   
;;;5530   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5531   
;;;5532   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003b26  4882              LDR      r0,|L1.15664|
;;;5533   	{
;;;5534   	#ifndef UKU2071x
;;;5535   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5536   		{
;;;5537   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5538   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5539   		}
;;;5540   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5541   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5542   	#endif
;;;5543   
;;;5544   	#ifdef UKU2071x
;;;5545   		#ifndef APSENERGIA
;;;5546   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5547   			{
;;;5548   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5549   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5550   			}
;;;5551   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5552   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5553   		#endif
;;;5554   
;;;5555   		#ifdef APSENERGIA
;;;5556   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5557   			{
;;;5558   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5559   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5560   			}
;;;5561   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5562   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5563   		#endif
;;;5564   
;;;5565   	#endif
;;;5566   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5567   		{
;;;5568   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5569   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5570   	     }
;;;5571   	else 
;;;5572   		{
;;;5573   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5574   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5575   		} 
;;;5576   
;;;5577   	//Реле аварий батарей
;;;5578   	#ifndef APSENERGIA
;;;5579   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5580   		{
;;;5581   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5582   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5583        	}
;;;5584   	else 
;;;5585   		{
;;;5586   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b28  f8df8208          LDR      r8,|L1.15668|
003b2c  4f82              LDR      r7,|L1.15672|
003b2e  8800              LDRH     r0,[r0,#0]            ;5532  ; AUSW_MAIN
003b30  f5a041aa          SUB      r1,r0,#0x5500         ;5532
003b34  39fa              SUBS     r1,r1,#0xfa           ;5532
003b36  d001              BEQ      |L1.15164|
003b38  1e49              SUBS     r1,r1,#1              ;5532
003b3a  d16f              BNE      |L1.15388|
                  |L1.15164|
003b3c  20d2              MOVS     r0,#0xd2              ;5546
003b3e  f7fffffe          BL       mess_find_unvol
003b42  b110              CBZ      r0,|L1.15178|
003b44  6828              LDR      r0,[r5,#0]            ;5546  ; mess_data
003b46  2866              CMP      r0,#0x66              ;5546
003b48  d043              BEQ      |L1.15314|
                  |L1.15178|
003b4a  6830              LDR      r0,[r6,#0]            ;5551  ; avar_ind_stat
003b4c  07c0              LSLS     r0,r0,#31             ;5551
003b4e  d04d              BEQ      |L1.15340|
003b50  6fa0              LDR      r0,[r4,#0x78]         ;5552
003b52  f0407000          ORR      r0,r0,#0x2000000      ;5552
003b56  67a0              STR      r0,[r4,#0x78]         ;5552
                  |L1.15192|
003b58  20d2              MOVS     r0,#0xd2              ;5566
003b5a  f7fffffe          BL       mess_find_unvol
003b5e  b110              CBZ      r0,|L1.15206|
003b60  6828              LDR      r0,[r5,#0]            ;5566  ; mess_data
003b62  286a              CMP      r0,#0x6a              ;5566
003b64  d047              BEQ      |L1.15350|
                  |L1.15206|
003b66  6830              LDR      r0,[r6,#0]            ;5573  ; avar_ind_stat
003b68  4238              TST      r0,r7                 ;5573
003b6a  d052              BEQ      |L1.15378|
003b6c  69a0              LDR      r0,[r4,#0x18]         ;5574
003b6e  f0400080          ORR      r0,r0,#0x80           ;5574
003b72  61a0              STR      r0,[r4,#0x18]         ;5574
                  |L1.15220|
003b74  20d2              MOVS     r0,#0xd2              ;5579
003b76  f7fffffe          BL       mess_find_unvol
003b7a  b110              CBZ      r0,|L1.15234|
003b7c  6828              LDR      r0,[r5,#0]            ;5579  ; mess_data
003b7e  2867              CMP      r0,#0x67              ;5579
003b80  d04d              BEQ      |L1.15390|
                  |L1.15234|
003b82  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b86  b380              CBZ      r0,|L1.15338|
;;;5587        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b88  69a0              LDR      r0,[r4,#0x18]
003b8a  f0400010          ORR      r0,r0,#0x10
003b8e  61a0              STR      r0,[r4,#0x18]
003b90  e1f1              B        |L1.16246|
                  |L1.15250|
003b92  6868              LDR      r0,[r5,#4]            ;5087  ; mess_data
003b94  2801              CMP      r0,#1                 ;5087
003b96  d006              BEQ      |L1.15270|
003b98  2800              CMP      r0,#0                 ;5088
003b9a  d1b5              BNE      |L1.15112|
003b9c  69e0              LDR      r0,[r4,#0x1c]         ;5088
003b9e  f0405000          ORR      r0,r0,#0x20000000     ;5088
003ba2  61e0              STR      r0,[r4,#0x1c]         ;5088
003ba4  e7b0              B        |L1.15112|
                  |L1.15270|
003ba6  69a0              LDR      r0,[r4,#0x18]         ;5087
003ba8  f0405000          ORR      r0,r0,#0x20000000     ;5087
003bac  61a0              STR      r0,[r4,#0x18]         ;5087
003bae  e7ab              B        |L1.15112|
                  |L1.15280|
003bb0  6868              LDR      r0,[r5,#4]            ;5107  ; mess_data
003bb2  b120              CBZ      r0,|L1.15294|
003bb4  6fa0              LDR      r0,[r4,#0x78]         ;5108
003bb6  f0407000          ORR      r0,r0,#0x2000000      ;5108
003bba  67a0              STR      r0,[r4,#0x78]         ;5108
003bbc  e7b3              B        |L1.15142|
                  |L1.15294|
003bbe  6fe0              LDR      r0,[r4,#0x7c]         ;5107
003bc0  f0407000          ORR      r0,r0,#0x2000000      ;5107
003bc4  67e0              STR      r0,[r4,#0x7c]         ;5107
003bc6  e7ae              B        |L1.15142|
                  |L1.15304|
003bc8  6fe0              LDR      r0,[r4,#0x7c]         ;5110
003bca  f0407000          ORR      r0,r0,#0x2000000      ;5110
003bce  67e0              STR      r0,[r4,#0x7c]         ;5110
003bd0  e7a9              B        |L1.15142|
                  |L1.15314|
003bd2  6868              LDR      r0,[r5,#4]            ;5548  ; mess_data
003bd4  b120              CBZ      r0,|L1.15328|
003bd6  6fa0              LDR      r0,[r4,#0x78]         ;5549
003bd8  f0407000          ORR      r0,r0,#0x2000000      ;5549
003bdc  67a0              STR      r0,[r4,#0x78]         ;5549
003bde  e7bb              B        |L1.15192|
                  |L1.15328|
003be0  6fe0              LDR      r0,[r4,#0x7c]         ;5548
003be2  f0407000          ORR      r0,r0,#0x2000000      ;5548
003be6  67e0              STR      r0,[r4,#0x7c]         ;5548
003be8  e7b6              B        |L1.15192|
                  |L1.15338|
003bea  e027              B        |L1.15420|
                  |L1.15340|
003bec  6fe0              LDR      r0,[r4,#0x7c]         ;5551
003bee  f0407000          ORR      r0,r0,#0x2000000      ;5551
003bf2  67e0              STR      r0,[r4,#0x7c]         ;5551
003bf4  e7b0              B        |L1.15192|
                  |L1.15350|
003bf6  6868              LDR      r0,[r5,#4]            ;5568  ; mess_data
003bf8  b130              CBZ      r0,|L1.15368|
003bfa  2801              CMP      r0,#1                 ;5569
003bfc  d1ba              BNE      |L1.15220|
003bfe  69a0              LDR      r0,[r4,#0x18]         ;5569
003c00  f0400080          ORR      r0,r0,#0x80           ;5569
003c04  61a0              STR      r0,[r4,#0x18]         ;5569
003c06  e7b5              B        |L1.15220|
                  |L1.15368|
003c08  69e0              LDR      r0,[r4,#0x1c]         ;5568
003c0a  f0400080          ORR      r0,r0,#0x80           ;5568
003c0e  61e0              STR      r0,[r4,#0x1c]         ;5568
003c10  e7b0              B        |L1.15220|
                  |L1.15378|
003c12  69e0              LDR      r0,[r4,#0x1c]         ;5573
003c14  f0400080          ORR      r0,r0,#0x80           ;5573
003c18  61e0              STR      r0,[r4,#0x1c]         ;5573
003c1a  e7ab              B        |L1.15220|
                  |L1.15388|
003c1c  e013              B        |L1.15430|
                  |L1.15390|
003c1e  6868              LDR      r0,[r5,#4]            ;5581  ; mess_data
003c20  b110              CBZ      r0,|L1.15400|
003c22  2801              CMP      r0,#1                 ;5582
003c24  d005              BEQ      |L1.15410|
003c26  e1a6              B        |L1.16246|
                  |L1.15400|
003c28  69e0              LDR      r0,[r4,#0x1c]         ;5581
003c2a  f0400010          ORR      r0,r0,#0x10           ;5581
003c2e  61e0              STR      r0,[r4,#0x1c]         ;5581
003c30  e1a1              B        |L1.16246|
                  |L1.15410|
003c32  69a0              LDR      r0,[r4,#0x18]         ;5582
003c34  f0400010          ORR      r0,r0,#0x10           ;5582
003c38  61a0              STR      r0,[r4,#0x18]         ;5582
003c3a  e19c              B        |L1.16246|
                  |L1.15420|
003c3c  69e0              LDR      r0,[r4,#0x1c]         ;5586
003c3e  f0400010          ORR      r0,r0,#0x10           ;5586
003c42  61e0              STR      r0,[r4,#0x1c]         ;5586
003c44  e197              B        |L1.16246|
                  |L1.15430|
;;;5588   		}
;;;5589   	#endif
;;;5590   	#ifdef APSENERGIA
;;;5591   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5592   		{
;;;5593   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5594   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5595        	}
;;;5596   	else 
;;;5597   		{
;;;5598   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5599   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5600   		}
;;;5601   	#endif
;;;5602   	}
;;;5603   
;;;5604   else	if(AUSW_MAIN==22023)
003c46  f5a041ac          SUB      r1,r0,#0x5600
003c4a  3907              SUBS     r1,#7
003c4c  d176              BNE      |L1.15676|
;;;5605   	{
;;;5606   
;;;5607   	//Реле аварий батарей
;;;5608   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003c4e  20d2              MOVS     r0,#0xd2
003c50  f7fffffe          BL       mess_find_unvol
003c54  b110              CBZ      r0,|L1.15452|
003c56  6828              LDR      r0,[r5,#0]  ; mess_data
003c58  2867              CMP      r0,#0x67
003c5a  d023              BEQ      |L1.15524|
                  |L1.15452|
;;;5609   		{
;;;5610   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5611   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5612        	}
;;;5613   	else 
;;;5614   		{
;;;5615   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c5c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c60  b370              CBZ      r0,|L1.15552|
;;;5616        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c62  69a0              LDR      r0,[r4,#0x18]
003c64  f0400010          ORR      r0,r0,#0x10
003c68  61a0              STR      r0,[r4,#0x18]
                  |L1.15466|
;;;5617   		} 
;;;5618   
;;;5619   
;;;5620   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5621   	#ifndef UKU2071x
;;;5622   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5623   		{
;;;5624   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5625   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5626   		}
;;;5627   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5628   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5629   	#endif
;;;5630   	#ifdef UKU2071x
;;;5631   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c6a  20d2              MOVS     r0,#0xd2
003c6c  f7fffffe          BL       mess_find_unvol
003c70  b110              CBZ      r0,|L1.15480|
003c72  6828              LDR      r0,[r5,#0]  ; mess_data
003c74  2866              CMP      r0,#0x66
003c76  d028              BEQ      |L1.15562|
                  |L1.15480|
;;;5632   		{
;;;5633   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5634   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5635   		}
;;;5636   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003c78  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c7a  07c0              LSLS     r0,r0,#31
003c7c  d031              BEQ      |L1.15586|
;;;5637   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c7e  6fa0              LDR      r0,[r4,#0x78]
003c80  f0407000          ORR      r0,r0,#0x2000000
003c84  67a0              STR      r0,[r4,#0x78]
                  |L1.15494|
;;;5638   	#endif
;;;5639   
;;;5640   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003c86  20d2              MOVS     r0,#0xd2
003c88  f7fffffe          BL       mess_find_unvol
003c8c  b110              CBZ      r0,|L1.15508|
003c8e  6828              LDR      r0,[r5,#0]  ; mess_data
003c90  286a              CMP      r0,#0x6a
003c92  d02b              BEQ      |L1.15596|
                  |L1.15508|
;;;5641   		{
;;;5642   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5643   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5644   	     }
;;;5645   	else 
;;;5646   		{
;;;5647   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003c94  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c96  4238              TST      r0,r7
003c98  d056              BEQ      |L1.15688|
;;;5648   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003c9a  69a0              LDR      r0,[r4,#0x18]
003c9c  f0400080          ORR      r0,r0,#0x80
003ca0  61a0              STR      r0,[r4,#0x18]
003ca2  e168              B        |L1.16246|
                  |L1.15524|
003ca4  6868              LDR      r0,[r5,#4]            ;5610  ; mess_data
003ca6  b130              CBZ      r0,|L1.15542|
003ca8  2801              CMP      r0,#1                 ;5611
003caa  d1de              BNE      |L1.15466|
003cac  69a0              LDR      r0,[r4,#0x18]         ;5611
003cae  f0400010          ORR      r0,r0,#0x10           ;5611
003cb2  61a0              STR      r0,[r4,#0x18]         ;5611
003cb4  e7d9              B        |L1.15466|
                  |L1.15542|
003cb6  69e0              LDR      r0,[r4,#0x1c]         ;5610
003cb8  f0400010          ORR      r0,r0,#0x10           ;5610
003cbc  61e0              STR      r0,[r4,#0x1c]         ;5610
003cbe  e7d4              B        |L1.15466|
                  |L1.15552|
003cc0  69e0              LDR      r0,[r4,#0x1c]         ;5615
003cc2  f0400010          ORR      r0,r0,#0x10           ;5615
003cc6  61e0              STR      r0,[r4,#0x1c]         ;5615
003cc8  e7cf              B        |L1.15466|
                  |L1.15562|
003cca  6868              LDR      r0,[r5,#4]            ;5633  ; mess_data
003ccc  b120              CBZ      r0,|L1.15576|
003cce  69e0              LDR      r0,[r4,#0x1c]         ;5634
003cd0  f0407000          ORR      r0,r0,#0x2000000      ;5634
003cd4  61e0              STR      r0,[r4,#0x1c]         ;5634
003cd6  e7d6              B        |L1.15494|
                  |L1.15576|
003cd8  69a0              LDR      r0,[r4,#0x18]         ;5633
003cda  f0407000          ORR      r0,r0,#0x2000000      ;5633
003cde  61a0              STR      r0,[r4,#0x18]         ;5633
003ce0  e7d1              B        |L1.15494|
                  |L1.15586|
003ce2  6ba0              LDR      r0,[r4,#0x38]         ;5636
003ce4  f0407000          ORR      r0,r0,#0x2000000      ;5636
003ce8  63a0              STR      r0,[r4,#0x38]         ;5636
003cea  e7cc              B        |L1.15494|
                  |L1.15596|
003cec  6868              LDR      r0,[r5,#4]            ;5642  ; mess_data
003cee  b110              CBZ      r0,|L1.15606|
003cf0  2801              CMP      r0,#1                 ;5643
003cf2  d024              BEQ      |L1.15678|
003cf4  e13f              B        |L1.16246|
                  |L1.15606|
003cf6  69e0              LDR      r0,[r4,#0x1c]         ;5642
003cf8  f0400080          ORR      r0,r0,#0x80           ;5642
003cfc  61e0              STR      r0,[r4,#0x1c]         ;5642
003cfe  e13a              B        |L1.16246|
                  |L1.15616|
                          DCD      bps
                  |L1.15620|
                          DCD      NUMIST
                  |L1.15624|
                          DCD      ||area_number.26||+0x80
                  |L1.15628|
                          DCD      0x4002c000
                  |L1.15632|
                          DCD      0xfff000ff
                  |L1.15636|
                          DCD      0x2009c000
                  |L1.15640|
                          DCD      bat
                  |L1.15644|
                          DCD      tbatdisable_stat
                  |L1.15648|
                          DCD      tbatdisable_cmnd
                  |L1.15652|
                          DCD      main_1Hz_cnt
                  |L1.15656|
                          DCD      mess_data
                  |L1.15660|
                          DCD      avar_ind_stat
                  |L1.15664|
                          DCD      AUSW_MAIN
                  |L1.15668|
                          DCD      ips_bat_av_stat
                  |L1.15672|
                          DCD      0x100007f8
                  |L1.15676|
003d3c  e009              B        |L1.15698|
                  |L1.15678|
003d3e  69a0              LDR      r0,[r4,#0x18]         ;5643
003d40  f0400080          ORR      r0,r0,#0x80           ;5643
003d44  61a0              STR      r0,[r4,#0x18]         ;5643
003d46  e116              B        |L1.16246|
                  |L1.15688|
003d48  69e0              LDR      r0,[r4,#0x1c]         ;5647
003d4a  f0400080          ORR      r0,r0,#0x80           ;5647
003d4e  61e0              STR      r0,[r4,#0x1c]         ;5647
003d50  e111              B        |L1.16246|
                  |L1.15698|
;;;5649   		} 
;;;5650   	}
;;;5651   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003d52  f5a041ac          SUB      r1,r0,#0x5600
003d56  391b              SUBS     r1,r1,#0x1b
003d58  d001              BEQ      |L1.15710|
003d5a  1e49              SUBS     r1,r1,#1
003d5c  d170              BNE      |L1.15936|
                  |L1.15710|
;;;5652   	{
;;;5653   	//Реле аварий батарей
;;;5654   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003d5e  20d2              MOVS     r0,#0xd2
003d60  f7fffffe          BL       mess_find_unvol
003d64  b110              CBZ      r0,|L1.15724|
003d66  6828              LDR      r0,[r5,#0]  ; mess_data
003d68  2867              CMP      r0,#0x67
003d6a  d031              BEQ      |L1.15824|
                  |L1.15724|
;;;5655   		{
;;;5656   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5657   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5658        	}
;;;5659   	else 
;;;5660   		{
;;;5661   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003d6c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003d70  b3b8              CBZ      r0,|L1.15842|
;;;5662        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003d72  69a0              LDR      r0,[r4,#0x18]
003d74  f0400010          ORR      r0,r0,#0x10
003d78  61a0              STR      r0,[r4,#0x18]
                  |L1.15738|
;;;5663   		} 
;;;5664   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5665   	#ifndef UKU2071x 
;;;5666   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5667   		{
;;;5668   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5669   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5670   		}
;;;5671   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5672   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5673   	#endif
;;;5674   	#ifdef UKU2071x 
;;;5675   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d7a  20d2              MOVS     r0,#0xd2
003d7c  f7fffffe          BL       mess_find_unvol
003d80  b110              CBZ      r0,|L1.15752|
003d82  6828              LDR      r0,[r5,#0]  ; mess_data
003d84  2866              CMP      r0,#0x66
003d86  d037              BEQ      |L1.15864|
                  |L1.15752|
;;;5676   		{
;;;5677   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5678   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5679   		}
;;;5680   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d88  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d8a  07c0              LSLS     r0,r0,#31
003d8c  d040              BEQ      |L1.15888|
;;;5681   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d8e  6fa0              LDR      r0,[r4,#0x78]
003d90  f0407000          ORR      r0,r0,#0x2000000
003d94  67a0              STR      r0,[r4,#0x78]
                  |L1.15766|
;;;5682   	#endif
;;;5683   
;;;5684   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d96  20d2              MOVS     r0,#0xd2
003d98  f7fffffe          BL       mess_find_unvol
003d9c  b110              CBZ      r0,|L1.15780|
003d9e  6828              LDR      r0,[r5,#0]  ; mess_data
003da0  286a              CMP      r0,#0x6a
003da2  d03a              BEQ      |L1.15898|
                  |L1.15780|
;;;5685   		{
;;;5686   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5687   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5688   	     }
;;;5689   	else 
;;;5690   		{
;;;5691   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003da4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003da6  4238              TST      r0,r7
003da8  d045              BEQ      |L1.15926|
;;;5692   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003daa  69a0              LDR      r0,[r4,#0x18]
003dac  f0400080          ORR      r0,r0,#0x80
003db0  61a0              STR      r0,[r4,#0x18]
                  |L1.15794|
;;;5693   		}
;;;5694   	//Реле аварии БПС
;;;5695   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003db2  20d2              MOVS     r0,#0xd2
003db4  f7fffffe          BL       mess_find_unvol
003db8  b110              CBZ      r0,|L1.15808|
003dba  6828              LDR      r0,[r5,#0]  ; mess_data
003dbc  286a              CMP      r0,#0x6a
003dbe  d040              BEQ      |L1.15938|
                  |L1.15808|
;;;5696   		{
;;;5697   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5698   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5699        	}
;;;5700   	else 
;;;5701   		{
;;;5702   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003dc0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003dc2  4238              TST      r0,r7
003dc4  d04c              BEQ      |L1.15968|
;;;5703        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003dc6  69a0              LDR      r0,[r4,#0x18]
003dc8  f0400020          ORR      r0,r0,#0x20
003dcc  61a0              STR      r0,[r4,#0x18]
003dce  e0d2              B        |L1.16246|
                  |L1.15824|
003dd0  6868              LDR      r0,[r5,#4]            ;5656  ; mess_data
003dd2  b138              CBZ      r0,|L1.15844|
003dd4  2801              CMP      r0,#1                 ;5657
003dd6  d1d0              BNE      |L1.15738|
003dd8  69a0              LDR      r0,[r4,#0x18]         ;5657
003dda  f0400010          ORR      r0,r0,#0x10           ;5657
003dde  61a0              STR      r0,[r4,#0x18]         ;5657
003de0  e7cb              B        |L1.15738|
                  |L1.15842|
003de2  e004              B        |L1.15854|
                  |L1.15844|
003de4  69e0              LDR      r0,[r4,#0x1c]         ;5656
003de6  f0400010          ORR      r0,r0,#0x10           ;5656
003dea  61e0              STR      r0,[r4,#0x1c]         ;5656
003dec  e7c5              B        |L1.15738|
                  |L1.15854|
003dee  69e0              LDR      r0,[r4,#0x1c]         ;5661
003df0  f0400010          ORR      r0,r0,#0x10           ;5661
003df4  61e0              STR      r0,[r4,#0x1c]         ;5661
003df6  e7c0              B        |L1.15738|
                  |L1.15864|
003df8  6868              LDR      r0,[r5,#4]            ;5677  ; mess_data
003dfa  b120              CBZ      r0,|L1.15878|
003dfc  69e0              LDR      r0,[r4,#0x1c]         ;5678
003dfe  f0407000          ORR      r0,r0,#0x2000000      ;5678
003e02  61e0              STR      r0,[r4,#0x1c]         ;5678
003e04  e7c7              B        |L1.15766|
                  |L1.15878|
003e06  69a0              LDR      r0,[r4,#0x18]         ;5677
003e08  f0407000          ORR      r0,r0,#0x2000000      ;5677
003e0c  61a0              STR      r0,[r4,#0x18]         ;5677
003e0e  e7c2              B        |L1.15766|
                  |L1.15888|
003e10  6ba0              LDR      r0,[r4,#0x38]         ;5680
003e12  f0407000          ORR      r0,r0,#0x2000000      ;5680
003e16  63a0              STR      r0,[r4,#0x38]         ;5680
003e18  e7bd              B        |L1.15766|
                  |L1.15898|
003e1a  6868              LDR      r0,[r5,#4]            ;5686  ; mess_data
003e1c  b130              CBZ      r0,|L1.15916|
003e1e  2801              CMP      r0,#1                 ;5687
003e20  d1c7              BNE      |L1.15794|
003e22  69a0              LDR      r0,[r4,#0x18]         ;5687
003e24  f0400080          ORR      r0,r0,#0x80           ;5687
003e28  61a0              STR      r0,[r4,#0x18]         ;5687
003e2a  e7c2              B        |L1.15794|
                  |L1.15916|
003e2c  69e0              LDR      r0,[r4,#0x1c]         ;5686
003e2e  f0400080          ORR      r0,r0,#0x80           ;5686
003e32  61e0              STR      r0,[r4,#0x1c]         ;5686
003e34  e7bd              B        |L1.15794|
                  |L1.15926|
003e36  69e0              LDR      r0,[r4,#0x1c]         ;5691
003e38  f0400080          ORR      r0,r0,#0x80           ;5691
003e3c  61e0              STR      r0,[r4,#0x1c]         ;5691
003e3e  e7b8              B        |L1.15794|
                  |L1.15936|
003e40  e013              B        |L1.15978|
                  |L1.15938|
003e42  6868              LDR      r0,[r5,#4]            ;5697  ; mess_data
003e44  b110              CBZ      r0,|L1.15948|
003e46  2801              CMP      r0,#1                 ;5698
003e48  d005              BEQ      |L1.15958|
003e4a  e094              B        |L1.16246|
                  |L1.15948|
003e4c  69e0              LDR      r0,[r4,#0x1c]         ;5697
003e4e  f0400020          ORR      r0,r0,#0x20           ;5697
003e52  61e0              STR      r0,[r4,#0x1c]         ;5697
003e54  e08f              B        |L1.16246|
                  |L1.15958|
003e56  69a0              LDR      r0,[r4,#0x18]         ;5698
003e58  f0400020          ORR      r0,r0,#0x20           ;5698
003e5c  61a0              STR      r0,[r4,#0x18]         ;5698
003e5e  e08a              B        |L1.16246|
                  |L1.15968|
003e60  69e0              LDR      r0,[r4,#0x1c]         ;5702
003e62  f0400020          ORR      r0,r0,#0x20           ;5702
003e66  61e0              STR      r0,[r4,#0x1c]         ;5702
003e68  e085              B        |L1.16246|
                  |L1.15978|
;;;5704   		} 
;;;5705   	}
;;;5706   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003e6a  f5a041ac          SUB      r1,r0,#0x5600
003e6e  3911              SUBS     r1,r1,#0x11
003e70  d001              BEQ      |L1.15990|
003e72  310f              ADDS     r1,r1,#0xf
003e74  d163              BNE      |L1.16190|
                  |L1.15990|
;;;5707   	{
;;;5708   	#ifndef UKU2071x 
;;;5709   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5710   		{
;;;5711   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5712   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5713   		}
;;;5714   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5715   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5716   	#endif
;;;5717   	#ifdef UKU2071x 
;;;5718   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e76  20d2              MOVS     r0,#0xd2
003e78  f7fffffe          BL       mess_find_unvol
003e7c  b110              CBZ      r0,|L1.16004|
003e7e  6828              LDR      r0,[r5,#0]  ; mess_data
003e80  2866              CMP      r0,#0x66
003e82  d023              BEQ      |L1.16076|
                  |L1.16004|
;;;5719   		{
;;;5720   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5721   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5722   		}
;;;5723   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003e84  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e86  07c0              LSLS     r0,r0,#31
003e88  d02c              BEQ      |L1.16100|
;;;5724   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003e8a  6fa0              LDR      r0,[r4,#0x78]
003e8c  f0407000          ORR      r0,r0,#0x2000000
003e90  67a0              STR      r0,[r4,#0x78]
                  |L1.16018|
;;;5725   	#endif
;;;5726   	
;;;5727   	
;;;5728   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e92  20d2              MOVS     r0,#0xd2
003e94  f7fffffe          BL       mess_find_unvol
003e98  b110              CBZ      r0,|L1.16032|
003e9a  6828              LDR      r0,[r5,#0]  ; mess_data
003e9c  286a              CMP      r0,#0x6a
003e9e  d026              BEQ      |L1.16110|
                  |L1.16032|
;;;5729   		{
;;;5730   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5731   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5732   	     }
;;;5733   	else 
;;;5734   		{
;;;5735   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003ea0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ea2  4238              TST      r0,r7
003ea4  d031              BEQ      |L1.16138|
;;;5736   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003ea6  69a0              LDR      r0,[r4,#0x18]
003ea8  f0400080          ORR      r0,r0,#0x80
003eac  61a0              STR      r0,[r4,#0x18]
                  |L1.16046|
;;;5737   		} 
;;;5738   
;;;5739   	//Реле аварий батарей
;;;5740   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003eae  20d2              MOVS     r0,#0xd2
003eb0  f7fffffe          BL       mess_find_unvol
003eb4  b110              CBZ      r0,|L1.16060|
003eb6  6828              LDR      r0,[r5,#0]  ; mess_data
003eb8  2867              CMP      r0,#0x67
003eba  d02b              BEQ      |L1.16148|
                  |L1.16060|
;;;5741   		{
;;;5742   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5743   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5744        	}
;;;5745   	else 
;;;5746   		{
;;;5747   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003ebc  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ec0  b390              CBZ      r0,|L1.16168|
;;;5748        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ec2  69a0              LDR      r0,[r4,#0x18]
003ec4  f0400010          ORR      r0,r0,#0x10
003ec8  61a0              STR      r0,[r4,#0x18]
003eca  e054              B        |L1.16246|
                  |L1.16076|
003ecc  6868              LDR      r0,[r5,#4]            ;5720  ; mess_data
003ece  b120              CBZ      r0,|L1.16090|
003ed0  6fa0              LDR      r0,[r4,#0x78]         ;5721
003ed2  f0407000          ORR      r0,r0,#0x2000000      ;5721
003ed6  67a0              STR      r0,[r4,#0x78]         ;5721
003ed8  e7db              B        |L1.16018|
                  |L1.16090|
003eda  6fe0              LDR      r0,[r4,#0x7c]         ;5720
003edc  f0407000          ORR      r0,r0,#0x2000000      ;5720
003ee0  67e0              STR      r0,[r4,#0x7c]         ;5720
003ee2  e7d6              B        |L1.16018|
                  |L1.16100|
003ee4  6fe0              LDR      r0,[r4,#0x7c]         ;5723
003ee6  f0407000          ORR      r0,r0,#0x2000000      ;5723
003eea  67e0              STR      r0,[r4,#0x7c]         ;5723
003eec  e7d1              B        |L1.16018|
                  |L1.16110|
003eee  6868              LDR      r0,[r5,#4]            ;5730  ; mess_data
003ef0  b130              CBZ      r0,|L1.16128|
003ef2  2801              CMP      r0,#1                 ;5731
003ef4  d1db              BNE      |L1.16046|
003ef6  69a0              LDR      r0,[r4,#0x18]         ;5731
003ef8  f0400080          ORR      r0,r0,#0x80           ;5731
003efc  61a0              STR      r0,[r4,#0x18]         ;5731
003efe  e7d6              B        |L1.16046|
                  |L1.16128|
003f00  69e0              LDR      r0,[r4,#0x1c]         ;5730
003f02  f0400080          ORR      r0,r0,#0x80           ;5730
003f06  61e0              STR      r0,[r4,#0x1c]         ;5730
003f08  e7d1              B        |L1.16046|
                  |L1.16138|
003f0a  69e0              LDR      r0,[r4,#0x1c]         ;5735
003f0c  f0400080          ORR      r0,r0,#0x80           ;5735
003f10  61e0              STR      r0,[r4,#0x1c]         ;5735
003f12  e7cc              B        |L1.16046|
                  |L1.16148|
003f14  6868              LDR      r0,[r5,#4]            ;5742  ; mess_data
003f16  b110              CBZ      r0,|L1.16158|
003f18  2801              CMP      r0,#1                 ;5743
003f1a  d006              BEQ      |L1.16170|
003f1c  e02b              B        |L1.16246|
                  |L1.16158|
003f1e  69e0              LDR      r0,[r4,#0x1c]         ;5742
003f20  f0400010          ORR      r0,r0,#0x10           ;5742
003f24  61e0              STR      r0,[r4,#0x1c]         ;5742
003f26  e026              B        |L1.16246|
                  |L1.16168|
003f28  e004              B        |L1.16180|
                  |L1.16170|
003f2a  69a0              LDR      r0,[r4,#0x18]         ;5743
003f2c  f0400010          ORR      r0,r0,#0x10           ;5743
003f30  61a0              STR      r0,[r4,#0x18]         ;5743
003f32  e020              B        |L1.16246|
                  |L1.16180|
003f34  69e0              LDR      r0,[r4,#0x1c]         ;5747
003f36  f0400010          ORR      r0,r0,#0x10           ;5747
003f3a  61e0              STR      r0,[r4,#0x1c]         ;5747
003f3c  e01b              B        |L1.16246|
                  |L1.16190|
;;;5749   		} 
;;;5750   	} 	 
;;;5751   else	
;;;5752   	{
;;;5753   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5754   	#ifndef UKU2071x 
;;;5755   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5756   		{
;;;5757   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5758   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5759   		}
;;;5760   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5761   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5762   	#endif
;;;5763   	#ifdef UKU2071x 
;;;5764   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003f3e  20d2              MOVS     r0,#0xd2
003f40  f7fffffe          BL       mess_find_unvol
003f44  b110              CBZ      r0,|L1.16204|
003f46  6828              LDR      r0,[r5,#0]  ; mess_data
003f48  2866              CMP      r0,#0x66
003f4a  d026              BEQ      |L1.16282|
                  |L1.16204|
;;;5765   		{
;;;5766   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5767   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5768   		}
;;;5769   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003f4c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f4e  07c0              LSLS     r0,r0,#31
003f50  d02f              BEQ      |L1.16306|
;;;5770   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003f52  6fa0              LDR      r0,[r4,#0x78]
003f54  f0407000          ORR      r0,r0,#0x2000000
003f58  67a0              STR      r0,[r4,#0x78]
                  |L1.16218|
;;;5771   	#endif
;;;5772   
;;;5773   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f5a  20d2              MOVS     r0,#0xd2
003f5c  f7fffffe          BL       mess_find_unvol
003f60  b110              CBZ      r0,|L1.16232|
003f62  6828              LDR      r0,[r5,#0]  ; mess_data
003f64  286a              CMP      r0,#0x6a
003f66  d029              BEQ      |L1.16316|
                  |L1.16232|
;;;5774   		{
;;;5775   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5776   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5777        	}
;;;5778   	else 
;;;5779   		{
;;;5780   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003f68  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f6a  4238              TST      r0,r7
003f6c  d034              BEQ      |L1.16344|
;;;5781        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003f6e  69a0              LDR      r0,[r4,#0x18]
003f70  f0400020          ORR      r0,r0,#0x20
003f74  61a0              STR      r0,[r4,#0x18]
                  |L1.16246|
;;;5782   		}
;;;5783   	}
;;;5784   //Дополнительное реле УКУ 
;;;5785   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003f76  20d2              MOVS     r0,#0xd2
003f78  f7fffffe          BL       mess_find_unvol
;;;5786   	{
;;;5787   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5788   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5789   	}
;;;5790   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5791   	{
;;;5792   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003f7c  f8df83f8          LDR      r8,|L1.17272|
003f80  4ffe              LDR      r7,|L1.17276|
003f82  4eff              LDR      r6,|L1.17280|
003f84  b110              CBZ      r0,|L1.16268|
003f86  6828              LDR      r0,[r5,#0]            ;5785  ; mess_data
003f88  2871              CMP      r0,#0x71              ;5785
003f8a  d02a              BEQ      |L1.16354|
                  |L1.16268|
003f8c  48fd              LDR      r0,|L1.17284|
003f8e  f9b00000          LDRSH    r0,[r0,#0]            ;5790  ; DOP_RELE_FUNC
003f92  b380              CBZ      r0,|L1.16374|
;;;5793   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5794   	}
;;;5795   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003f94  2801              CMP      r0,#1
003f96  d066              BEQ      |L1.16486|
003f98  e070              B        |L1.16508|
                  |L1.16282|
003f9a  6868              LDR      r0,[r5,#4]            ;5766  ; mess_data
003f9c  b120              CBZ      r0,|L1.16296|
003f9e  69e0              LDR      r0,[r4,#0x1c]         ;5767
003fa0  f0407000          ORR      r0,r0,#0x2000000      ;5767
003fa4  61e0              STR      r0,[r4,#0x1c]         ;5767
003fa6  e7d8              B        |L1.16218|
                  |L1.16296|
003fa8  69a0              LDR      r0,[r4,#0x18]         ;5766
003faa  f0407000          ORR      r0,r0,#0x2000000      ;5766
003fae  61a0              STR      r0,[r4,#0x18]         ;5766
003fb0  e7d3              B        |L1.16218|
                  |L1.16306|
003fb2  6ba0              LDR      r0,[r4,#0x38]         ;5769
003fb4  f0407000          ORR      r0,r0,#0x2000000      ;5769
003fb8  63a0              STR      r0,[r4,#0x38]         ;5769
003fba  e7ce              B        |L1.16218|
                  |L1.16316|
003fbc  6868              LDR      r0,[r5,#4]            ;5775  ; mess_data
003fbe  b130              CBZ      r0,|L1.16334|
003fc0  2801              CMP      r0,#1                 ;5776
003fc2  d1d8              BNE      |L1.16246|
003fc4  69a0              LDR      r0,[r4,#0x18]         ;5776
003fc6  f0400020          ORR      r0,r0,#0x20           ;5776
003fca  61a0              STR      r0,[r4,#0x18]         ;5776
003fcc  e7d3              B        |L1.16246|
                  |L1.16334|
003fce  69e0              LDR      r0,[r4,#0x1c]         ;5775
003fd0  f0400020          ORR      r0,r0,#0x20           ;5775
003fd4  61e0              STR      r0,[r4,#0x1c]         ;5775
003fd6  e7ce              B        |L1.16246|
                  |L1.16344|
003fd8  69e0              LDR      r0,[r4,#0x1c]         ;5780
003fda  f0400020          ORR      r0,r0,#0x20           ;5780
003fde  61e0              STR      r0,[r4,#0x1c]         ;5780
003fe0  e7c9              B        |L1.16246|
                  |L1.16354|
003fe2  6868              LDR      r0,[r5,#4]            ;5787  ; mess_data
003fe4  b110              CBZ      r0,|L1.16364|
003fe6  2801              CMP      r0,#1                 ;5788
003fe8  d006              BEQ      |L1.16376|
003fea  e047              B        |L1.16508|
                  |L1.16364|
003fec  69e0              LDR      r0,[r4,#0x1c]         ;5787
003fee  f4407000          ORR      r0,r0,#0x200          ;5787
003ff2  61e0              STR      r0,[r4,#0x1c]         ;5787
003ff4  e042              B        |L1.16508|
                  |L1.16374|
003ff6  e004              B        |L1.16386|
                  |L1.16376|
003ff8  69a0              LDR      r0,[r4,#0x18]         ;5788
003ffa  f4407000          ORR      r0,r0,#0x200          ;5788
003ffe  61a0              STR      r0,[r4,#0x18]         ;5788
004000  e03c              B        |L1.16508|
                  |L1.16386|
004002  48e1              LDR      r0,|L1.17288|
004004  49e1              LDR      r1,|L1.17292|
004006  f9b00000          LDRSH    r0,[r0,#0]            ;5792  ; speedChIsOn
00400a  b9d0              CBNZ     r0,|L1.16450|
00400c  f8962023          LDRB     r2,[r6,#0x23]         ;5792  ; spc_stat
004010  2a02              CMP      r2,#2                 ;5792
004012  d016              BEQ      |L1.16450|
004014  780a              LDRB     r2,[r1,#0]            ;5792  ; hv_vz_stat
004016  b9a2              CBNZ     r2,|L1.16450|
004018  783a              LDRB     r2,[r7,#0]            ;5792  ; sp_ch_stat
00401a  b992              CBNZ     r2,|L1.16450|
00401c  7972              LDRB     r2,[r6,#5]            ;5792  ; vz1_stat
00401e  b982              CBNZ     r2,|L1.16450|
004020  79f2              LDRB     r2,[r6,#7]            ;5792  ; vz2_stat
004022  b972              CBNZ     r2,|L1.16450|
004024  f9b82000          LDRSH    r2,[r8,#0]            ;5792  ; load_U
004028  230a              MOVS     r3,#0xa               ;5792
00402a  fb92f2f3          SDIV     r2,r2,r3              ;5792
00402e  4bd8              LDR      r3,|L1.17296|
004030  f9b33000          LDRSH    r3,[r3,#0]            ;5792  ; UVENTOFF
004034  429a              CMP      r2,r3                 ;5792
004036  da04              BGE      |L1.16450|
004038  69e0              LDR      r0,[r4,#0x1c]         ;5792
00403a  f4407000          ORR      r0,r0,#0x200          ;5792
00403e  61e0              STR      r0,[r4,#0x1c]         ;5792
004040  e01c              B        |L1.16508|
                  |L1.16450|
004042  b958              CBNZ     r0,|L1.16476|
004044  f8960023          LDRB     r0,[r6,#0x23]         ;5793  ; spc_stat
004048  2802              CMP      r0,#2                 ;5793
00404a  d007              BEQ      |L1.16476|
00404c  7808              LDRB     r0,[r1,#0]            ;5793  ; hv_vz_stat
00404e  b928              CBNZ     r0,|L1.16476|
004050  7838              LDRB     r0,[r7,#0]            ;5793  ; sp_ch_stat
004052  b918              CBNZ     r0,|L1.16476|
004054  7970              LDRB     r0,[r6,#5]            ;5793  ; vz1_stat
004056  b908              CBNZ     r0,|L1.16476|
004058  79f0              LDRB     r0,[r6,#7]            ;5793  ; vz2_stat
00405a  b178              CBZ      r0,|L1.16508|
                  |L1.16476|
00405c  69a0              LDR      r0,[r4,#0x18]         ;5793
00405e  f4407000          ORR      r0,r0,#0x200          ;5793
004062  61a0              STR      r0,[r4,#0x18]         ;5793
004064  e00a              B        |L1.16508|
                  |L1.16486|
;;;5796   	{
;;;5797   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
004066  20d2              MOVS     r0,#0xd2
004068  f7fffffe          BL       mess_find_unvol
00406c  b110              CBZ      r0,|L1.16500|
00406e  6828              LDR      r0,[r5,#0]  ; mess_data
004070  2872              CMP      r0,#0x72
004072  d017              BEQ      |L1.16548|
                  |L1.16500|
;;;5798   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
004074  69a0              LDR      r0,[r4,#0x18]
004076  f4407000          ORR      r0,r0,#0x200
00407a  61a0              STR      r0,[r4,#0x18]
                  |L1.16508|
;;;5799   	}
;;;5800   
;;;5801   #endif //o_9
;;;5802   
;;;5803   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5804   //Блок выносной реле
;;;5805   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
00407c  20d2              MOVS     r0,#0xd2
00407e  f7fffffe          BL       mess_find_unvol
;;;5806   	{
;;;5807   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
004082  f8df9310          LDR      r9,|L1.17300|
;;;5808   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5809   	}
;;;5810   else 
;;;5811   	{
;;;5812   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
004086  4cc4              LDR      r4,|L1.17304|
004088  b110              CBZ      r0,|L1.16528|
00408a  6828              LDR      r0,[r5,#0]            ;5805  ; mess_data
00408c  2875              CMP      r0,#0x75              ;5805
00408e  d00e              BEQ      |L1.16558|
                  |L1.16528|
004090  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004092  07c0              LSLS     r0,r0,#31
004094  d01e              BEQ      |L1.16596|
004096  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00409a  f0400001          ORR      r0,r0,#1
00409e  f8890000          STRB     r0,[r9,#0]
0040a2  e01d              B        |L1.16608|
                  |L1.16548|
0040a4  69e0              LDR      r0,[r4,#0x1c]         ;5797
0040a6  f4407000          ORR      r0,r0,#0x200          ;5797
0040aa  61e0              STR      r0,[r4,#0x1c]         ;5797
0040ac  e7e6              B        |L1.16508|
                  |L1.16558|
0040ae  6868              LDR      r0,[r5,#4]            ;5807  ; mess_data
0040b0  b110              CBZ      r0,|L1.16568|
0040b2  2801              CMP      r0,#1                 ;5808
0040b4  d007              BEQ      |L1.16582|
0040b6  e013              B        |L1.16608|
                  |L1.16568|
0040b8  f8990000          LDRB     r0,[r9,#0]            ;5807  ; bdr_transmit_stat
0040bc  f00000fe          AND      r0,r0,#0xfe           ;5807
0040c0  f8890000          STRB     r0,[r9,#0]            ;5807
0040c4  e00c              B        |L1.16608|
                  |L1.16582|
0040c6  f8990000          LDRB     r0,[r9,#0]            ;5808  ; bdr_transmit_stat
0040ca  f0400001          ORR      r0,r0,#1              ;5808
0040ce  f8890000          STRB     r0,[r9,#0]            ;5808
0040d2  e005              B        |L1.16608|
                  |L1.16596|
;;;5813   	else 						bdr_transmit_stat&=0xfe;
0040d4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040d8  f00000fe          AND      r0,r0,#0xfe
0040dc  f8890000          STRB     r0,[r9,#0]
                  |L1.16608|
;;;5814   	}	
;;;5815   
;;;5816   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
0040e0  20d2              MOVS     r0,#0xd2
0040e2  f7fffffe          BL       mess_find_unvol
0040e6  b110              CBZ      r0,|L1.16622|
0040e8  6828              LDR      r0,[r5,#0]  ; mess_data
0040ea  2876              CMP      r0,#0x76
0040ec  d009              BEQ      |L1.16642|
                  |L1.16622|
;;;5817   	{
;;;5818   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5819   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5820   	}
;;;5821   else 
;;;5822   	{
;;;5823   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
0040ee  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0040f0  0780              LSLS     r0,r0,#30
0040f2  d519              BPL      |L1.16680|
0040f4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040f8  f0400002          ORR      r0,r0,#2
0040fc  f8890000          STRB     r0,[r9,#0]
004100  e018              B        |L1.16692|
                  |L1.16642|
004102  6868              LDR      r0,[r5,#4]            ;5818  ; mess_data
004104  b110              CBZ      r0,|L1.16652|
004106  2801              CMP      r0,#1                 ;5819
004108  d007              BEQ      |L1.16666|
00410a  e013              B        |L1.16692|
                  |L1.16652|
00410c  f8990000          LDRB     r0,[r9,#0]            ;5818  ; bdr_transmit_stat
004110  f00000fd          AND      r0,r0,#0xfd           ;5818
004114  f8890000          STRB     r0,[r9,#0]            ;5818
004118  e00c              B        |L1.16692|
                  |L1.16666|
00411a  f8990000          LDRB     r0,[r9,#0]            ;5819  ; bdr_transmit_stat
00411e  f0400002          ORR      r0,r0,#2              ;5819
004122  f8890000          STRB     r0,[r9,#0]            ;5819
004126  e005              B        |L1.16692|
                  |L1.16680|
;;;5824   	else 						bdr_transmit_stat&=0xfd;
004128  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00412c  f00000fd          AND      r0,r0,#0xfd
004130  f8890000          STRB     r0,[r9,#0]
                  |L1.16692|
;;;5825   	}	
;;;5826   	
;;;5827   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
004134  20d2              MOVS     r0,#0xd2
004136  f7fffffe          BL       mess_find_unvol
00413a  b110              CBZ      r0,|L1.16706|
00413c  6828              LDR      r0,[r5,#0]  ; mess_data
00413e  2877              CMP      r0,#0x77
004140  d009              BEQ      |L1.16726|
                  |L1.16706|
;;;5828   	{
;;;5829   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5830   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5831   	}
;;;5832   else 
;;;5833   	{
;;;5834   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
004142  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004144  0740              LSLS     r0,r0,#29
004146  d519              BPL      |L1.16764|
004148  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00414c  f0400004          ORR      r0,r0,#4
004150  f8890000          STRB     r0,[r9,#0]
004154  e018              B        |L1.16776|
                  |L1.16726|
004156  6868              LDR      r0,[r5,#4]            ;5829  ; mess_data
004158  b110              CBZ      r0,|L1.16736|
00415a  2801              CMP      r0,#1                 ;5830
00415c  d007              BEQ      |L1.16750|
00415e  e013              B        |L1.16776|
                  |L1.16736|
004160  f8990000          LDRB     r0,[r9,#0]            ;5829  ; bdr_transmit_stat
004164  f00000fb          AND      r0,r0,#0xfb           ;5829
004168  f8890000          STRB     r0,[r9,#0]            ;5829
00416c  e00c              B        |L1.16776|
                  |L1.16750|
00416e  f8990000          LDRB     r0,[r9,#0]            ;5830  ; bdr_transmit_stat
004172  f0400004          ORR      r0,r0,#4              ;5830
004176  f8890000          STRB     r0,[r9,#0]            ;5830
00417a  e005              B        |L1.16776|
                  |L1.16764|
;;;5835   	else 						bdr_transmit_stat&=0xfb;
00417c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004180  f00000fb          AND      r0,r0,#0xfb
004184  f8890000          STRB     r0,[r9,#0]
                  |L1.16776|
;;;5836   	}	
;;;5837   	
;;;5838   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
004188  20d2              MOVS     r0,#0xd2
00418a  f7fffffe          BL       mess_find_unvol
00418e  b110              CBZ      r0,|L1.16790|
004190  6828              LDR      r0,[r5,#0]  ; mess_data
004192  2878              CMP      r0,#0x78
004194  d009              BEQ      |L1.16810|
                  |L1.16790|
;;;5839   	{
;;;5840   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5841   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5842   	}
;;;5843   else 
;;;5844   	{
;;;5845   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
004196  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004198  0700              LSLS     r0,r0,#28
00419a  d519              BPL      |L1.16848|
00419c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041a0  f0400008          ORR      r0,r0,#8
0041a4  f8890000          STRB     r0,[r9,#0]
0041a8  e018              B        |L1.16860|
                  |L1.16810|
0041aa  6868              LDR      r0,[r5,#4]            ;5840  ; mess_data
0041ac  b110              CBZ      r0,|L1.16820|
0041ae  2801              CMP      r0,#1                 ;5841
0041b0  d007              BEQ      |L1.16834|
0041b2  e013              B        |L1.16860|
                  |L1.16820|
0041b4  f8990000          LDRB     r0,[r9,#0]            ;5840  ; bdr_transmit_stat
0041b8  f00000f7          AND      r0,r0,#0xf7           ;5840
0041bc  f8890000          STRB     r0,[r9,#0]            ;5840
0041c0  e00c              B        |L1.16860|
                  |L1.16834|
0041c2  f8990000          LDRB     r0,[r9,#0]            ;5841  ; bdr_transmit_stat
0041c6  f0400008          ORR      r0,r0,#8              ;5841
0041ca  f8890000          STRB     r0,[r9,#0]            ;5841
0041ce  e005              B        |L1.16860|
                  |L1.16848|
;;;5846   	else 						bdr_transmit_stat&=0xf7;
0041d0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041d4  f00000f7          AND      r0,r0,#0xf7
0041d8  f8890000          STRB     r0,[r9,#0]
                  |L1.16860|
;;;5847   	}	
;;;5848   					 	
;;;5849   #endif
;;;5850   
;;;5851   #ifdef UKU_KONTUR
;;;5852   
;;;5853   //Реле общей аварии
;;;5854   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5855   	{
;;;5856   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5857   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5858   	}
;;;5859   else 
;;;5860   	{
;;;5861        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5862             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5863             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5864             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5865             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5866        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5867   	}
;;;5868   
;;;5869   	
;;;5870   //rel_warm_plazma=0;
;;;5871   //Реле освещения   
;;;5872   /*
;;;5873   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5874   	{
;;;5875   	if(mess_data[1]==0)
;;;5876   		{
;;;5877   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5878   		rel_warm_plazma=1;
;;;5879   		}
;;;5880   	else if(mess_data[1]==1) 
;;;5881   		{
;;;5882   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5883   		rel_warm_plazma=2;
;;;5884   		}
;;;5885        }
;;;5886   else 
;;;5887   	{
;;;5888   	if(warm_stat_k==wsOFF) 
;;;5889   		{
;;;5890   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5891   		rel_warm_plazma=3;
;;;5892   		}
;;;5893        else 
;;;5894   		{
;;;5895   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5896   		rel_warm_plazma=4;
;;;5897   		}
;;;5898   	}
;;;5899   */
;;;5900   //Реле освещения
;;;5901   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5902   	{
;;;5903   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5904   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5905        }
;;;5906   else 
;;;5907   	{
;;;5908   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5909        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5910   	}
;;;5911   
;;;5912   
;;;5913   
;;;5914   //Реле выключения нагрузки
;;;5915   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5916   	{
;;;5917   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5918   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5919        }
;;;5920   else if(tloaddisable_cmnd==0)
;;;5921   	{
;;;5922   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5923   	}
;;;5924   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5925   	{
;;;5926   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5927   	}
;;;5928   
;;;5929   else 
;;;5930   	{
;;;5931   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5932        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5933   	} 
;;;5934   
;;;5935   //Реле осевого вентилятора или отопителя
;;;5936   if(RELE_LOG)
;;;5937   	{
;;;5938   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5939   		{
;;;5940   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5941   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5942   		}
;;;5943   	else 
;;;5944   		{
;;;5945   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5946   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5947   		} 
;;;5948   
;;;5949   	}
;;;5950   else 
;;;5951   	{
;;;5952   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5953   		{
;;;5954   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5955   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5956   		}
;;;5957   	else 
;;;5958   		{
;;;5959   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5960   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5961   		} 
;;;5962   	}
;;;5963   #endif
;;;5964   
;;;5965   
;;;5966   #ifdef UKU_TELECORE2015
;;;5967   //Реле аварии сети
;;;5968   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5969   	{
;;;5970   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5971   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5972   	}
;;;5973   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5974   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5975   
;;;5976   
;;;5977   //Реле освещения
;;;5978   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5979   	{
;;;5980   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5981   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5982        }
;;;5983   else 
;;;5984   	{
;;;5985   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5986        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5987   	}
;;;5988   
;;;5989   //Реле отопителя
;;;5990   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5991   	{
;;;5992   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5993   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5994   	}
;;;5995   else 
;;;5996   	{
;;;5997   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5998        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5999   	} 
;;;6000   //Реле вентилятора
;;;6001   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6002   	{
;;;6003   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6004   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6005   	}
;;;6006   else 
;;;6007   	{
;;;6008   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6009        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6010   	} 
;;;6011   
;;;6012   //Реле внутреннего вентилятора
;;;6013   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6014   	{
;;;6015   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6016   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6017   	}
;;;6018   else 
;;;6019   	{
;;;6020   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6021        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6022   	} 
;;;6023   
;;;6024   #endif
;;;6025   
;;;6026   #ifdef UKU_TELECORE2017
;;;6027   //Реле аварии сети
;;;6028   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6029   	{
;;;6030   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6031   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6032   	}
;;;6033   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6034   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6035   
;;;6036   
;;;6037   //Реле освещения
;;;6038   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6039   	{
;;;6040   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6041   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6042        }
;;;6043   else 
;;;6044   	{
;;;6045   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6046        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6047   	}
;;;6048   
;;;6049   //Реле отопителя
;;;6050   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6051   	{
;;;6052   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6053   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6054   	}
;;;6055   else 
;;;6056   	{
;;;6057   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6058        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6059   	} 
;;;6060   //Реле вентилятора
;;;6061   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6062   	{
;;;6063   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6064   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6065   	}
;;;6066   else 
;;;6067   	{
;;;6068   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6069        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6070   	} 
;;;6071   
;;;6072   //Реле внутреннего вентилятора
;;;6073   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6074   	{
;;;6075   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6076   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6077   	}
;;;6078   else 
;;;6079   	{
;;;6080   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6081        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6082   	} 
;;;6083   
;;;6084   //Реле выключения нагрузки
;;;6085   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6086   	{
;;;6087   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6088   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6089        }
;;;6090   else if(tloaddisable_cmnd==0)
;;;6091   	{
;;;6092   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6093   	}
;;;6094   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6095   	{
;;;6096   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6097   	}
;;;6098   
;;;6099   else 
;;;6100   	{
;;;6101   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6102        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6103   	} 
;;;6104   
;;;6105   
;;;6106   #endif
;;;6107   
;;;6108   #ifdef IPS_SGEP_GAZPROM
;;;6109   rele_hndl_plazma[0]++;
;;;6110   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;6111   	{
;;;6112   	rele_hndl_plazma[1]++;
;;;6113   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6114   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6115        }
;;;6116   else 
;;;6117   	{
;;;6118   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6119        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6120   	} 
;;;6121   
;;;6122   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6123   	{
;;;6124   	rele_hndl_plazma[2]++;
;;;6125   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6126   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6127   	}
;;;6128   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6129   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6130   #endif
;;;6131   
;;;6132   if(NUMBDR==1)
0041dc  486f              LDR      r0,|L1.17308|
0041de  8800              LDRH     r0,[r0,#0]  ; NUMBDR
0041e0  2801              CMP      r0,#1
0041e2  d17e              BNE      |L1.17122|
;;;6133   	{
;;;6134   	char ii_;
;;;6135   	char bdr_avar_stat_temp=0;
0041e4  f04f0000          MOV      r0,#0
;;;6136   	for	(ii_=0;ii_<4;ii_++)
0041e8  4601              MOV      r1,r0
;;;6137   		{
;;;6138   	//o_9_s
;;;6139   	#ifdef UKU_6U
;;;6140   		 //АБ разряжена
;;;6141   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6142   			( (bat[0]._Ub<(USIGN*10)) || (bat[1]._Ub<(USIGN*10)) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6143   		//Выравнивающий заряд
;;;6144   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6145   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6146   	   	//Общая авария ИБЭП
;;;6147   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6148   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6149   		//Ток АКБ<-0,5А
;;;6150   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6151   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6152   	   	//отключение НПН
;;;6153   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6154   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6155   		//контроль емкости АКБ1
;;;6156   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6157   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6158   		//контроль емкости АКБ2
;;;6159   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6160   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6161   	#else
;;;6162   	//o_9_e		//АБ разряжена
;;;6163   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6164   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6165   		//Ускоренный заряд
;;;6166   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6167   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6168   		//Выравнивающий заряд
;;;6169   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6170   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6171   		//Общая авария ЗВУ
;;;6172   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6173   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6174   		//Uвых завышено
;;;6175   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6176   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
0041ea  f8dfa1b4          LDR      r10,|L1.17312|
;;;6177   		//Uвых занижено
;;;6178   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6179   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6180   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6181   			(
;;;6182   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
0041ee  f8df91b4          LDR      r9,|L1.17316|
0041f2  4d6d              LDR      r5,|L1.17320|
0041f4  f8dfb1b4          LDR      r11,|L1.17324|
0041f8  f04f0301          MOV      r3,#1                 ;5087
                  |L1.16892|
0041fc  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6163
004200  ea5f7cc2          LSLS     r12,r2,#31            ;6163
004204  d010              BEQ      |L1.16936|
004206  f8dfc1a8          LDR      r12,|L1.17328|
00420a  f9b8e000          LDRSH    lr,[r8,#0]            ;6164  ; load_U
00420e  f9bcc000          LDRSH    r12,[r12,#0]          ;6164  ; USIGN
004212  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6164
004216  ebbe0f4c          CMP      lr,r12,LSL #1         ;6164
00421a  da05              BGE      |L1.16936|
00421c  fa03fc01          LSL      r12,r3,r1             ;6164
004220  ea4c0c00          ORR      r12,r12,r0            ;6164
004224  f00c00ff          AND      r0,r12,#0xff          ;6164
                  |L1.16936|
004228  ea5f7c82          LSLS     r12,r2,#30            ;6166
00422c  d50a              BPL      |L1.16964|
00422e  f897c000          LDRB     r12,[r7,#0]           ;6167  ; sp_ch_stat
004232  f1bc0f02          CMP      r12,#2                ;6167
004236  d105              BNE      |L1.16964|
004238  fa03fc01          LSL      r12,r3,r1             ;6167
00423c  ea4c0c00          ORR      r12,r12,r0            ;6167
004240  f00c00ff          AND      r0,r12,#0xff          ;6167
                  |L1.16964|
004244  ea5f7c42          LSLS     r12,r2,#29            ;6169
004248  d50a              BPL      |L1.16992|
00424a  f896c023          LDRB     r12,[r6,#0x23]        ;6170  ; spc_stat
00424e  f1bc0f02          CMP      r12,#2                ;6170
004252  d105              BNE      |L1.16992|
004254  fa03fc01          LSL      r12,r3,r1             ;6170
004258  ea4c0c00          ORR      r12,r12,r0            ;6170
00425c  f00c00ff          AND      r0,r12,#0xff          ;6170
                  |L1.16992|
004260  ea5f7c02          LSLS     r12,r2,#28            ;6172
004264  d50c              BPL      |L1.17024|
004266  f8dfc14c          LDR      r12,|L1.17332|
00426a  f8dcc000          LDR      r12,[r12,#0]          ;6173  ; avar_stat
00426e  f1bc0f00          CMP      r12,#0                ;6173
004272  d005              BEQ      |L1.17024|
004274  fa03fc01          LSL      r12,r3,r1             ;6173
004278  ea4c0c00          ORR      r12,r12,r0            ;6173
00427c  f00c00ff          AND      r0,r12,#0xff          ;6173
                  |L1.17024|
004280  ea5f6cc2          LSLS     r12,r2,#27            ;6175
004284  d50a              BPL      |L1.17052|
004286  f89ac000          LDRB     r12,[r10,#0]          ;6176  ; uout_av
00428a  f1bc0f01          CMP      r12,#1                ;6176
00428e  d105              BNE      |L1.17052|
004290  fa03fc01          LSL      r12,r3,r1             ;6176
004294  ea4c0c00          ORR      r12,r12,r0            ;6176
004298  f00c00ff          AND      r0,r12,#0xff          ;6176
                  |L1.17052|
00429c  ea5f6c82          LSLS     r12,r2,#26            ;6178
0042a0  d50a              BPL      |L1.17080|
0042a2  f89ac000          LDRB     r12,[r10,#0]          ;6179  ; uout_av
0042a6  f1bc0f02          CMP      r12,#2                ;6179
0042aa  d105              BNE      |L1.17080|
0042ac  fa03fc01          LSL      r12,r3,r1             ;6179
0042b0  ea4c0c00          ORR      r12,r12,r0            ;6179
0042b4  f00c00ff          AND      r0,r12,#0xff          ;6179
                  |L1.17080|
0042b8  ea5f6c42          LSLS     r12,r2,#25            ;6180
0042bc  d525              BPL      |L1.17162|
0042be  f899c001          LDRB     r12,[r9,#1]  ; bps
0042c2  ea5f6ccc          LSLS     r12,r12,#27
0042c6  d504              BPL      |L1.17106|
0042c8  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042cc  f1bc0f01          CMP      r12,#1
0042d0  da15              BGE      |L1.17150|
                  |L1.17106|
;;;6183   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0042d2  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0042d6  ea5f6ccc          LSLS     r12,r12,#27
0042da  d506              BPL      |L1.17130|
0042dc  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042e0  e000              B        |L1.17124|
                  |L1.17122|
0042e2  e047              B        |L1.17268|
                  |L1.17124|
0042e4  f1bc0f02          CMP      r12,#2
0042e8  da09              BGE      |L1.17150|
                  |L1.17130|
;;;6184   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0042ea  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0042ee  ea5f6ccc          LSLS     r12,r12,#27
0042f2  d50a              BPL      |L1.17162|
0042f4  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042f8  f1bc0f03          CMP      r12,#3
0042fc  db05              BLT      |L1.17162|
                  |L1.17150|
;;;6185   			))bdr_avar_stat_temp|=(1<<ii_);
0042fe  fa03fc01          LSL      r12,r3,r1
004302  ea4c0c00          ORR      r12,r12,r0
004306  f00c00ff          AND      r0,r12,#0xff
                  |L1.17162|
;;;6186   		if((RELE_SET_MASK[ii_]&0x80)&&
00430a  ea5f6c02          LSLS     r12,r2,#24
00430e  d523              BPL      |L1.17240|
;;;6187   			(
;;;6188   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004310  f899c001          LDRB     r12,[r9,#1]  ; bps
004314  ea5f7c0c          LSLS     r12,r12,#28
004318  d004              BEQ      |L1.17188|
00431a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00431e  f1bc0f01          CMP      r12,#1
004322  da13              BGE      |L1.17228|
                  |L1.17188|
;;;6189   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004324  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004328  ea5f7c0c          LSLS     r12,r12,#28
00432c  d004              BEQ      |L1.17208|
00432e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004332  f1bc0f02          CMP      r12,#2
004336  da09              BGE      |L1.17228|
                  |L1.17208|
;;;6190   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004338  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00433c  ea5f7c0c          LSLS     r12,r12,#28
004340  d00a              BEQ      |L1.17240|
004342  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004346  f1bc0f03          CMP      r12,#3
00434a  db05              BLT      |L1.17240|
                  |L1.17228|
;;;6191   			))bdr_avar_stat_temp|=(1<<ii_);
00434c  fa03fc01          LSL      r12,r3,r1
004350  ea4c0c00          ORR      r12,r12,r0
004354  f00c00ff          AND      r0,r12,#0xff
                  |L1.17240|
;;;6192   	  #endif											 //o_9
;;;6193   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004358  0412              LSLS     r2,r2,#16
00435a  d404              BMI      |L1.17254|
00435c  fa03f201          LSL      r2,r3,r1
004360  ea820200          EOR      r2,r2,r0
004364  b2d0              UXTB     r0,r2
                  |L1.17254|
004366  f1010101          ADD      r1,r1,#1              ;6136
00436a  b2c9              UXTB     r1,r1                 ;6136
00436c  2904              CMP      r1,#4                 ;6136
00436e  f4ffaf45          BCC      |L1.16892|
;;;6194   		}
;;;6195   	bdr_avar_stat=bdr_avar_stat_temp;
004372  7020              STRB     r0,[r4,#0]
                  |L1.17268|
;;;6196   	}
;;;6197   }
004374  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17272|
                          DCD      load_U
                  |L1.17276|
                          DCD      sp_ch_stat
                  |L1.17280|
                          DCD      ||area_number.26||
                  |L1.17284|
                          DCD      DOP_RELE_FUNC
                  |L1.17288|
                          DCD      speedChIsOn
                  |L1.17292|
                          DCD      hv_vz_stat
                  |L1.17296|
                          DCD      UVENTOFF
                  |L1.17300|
                          DCD      bdr_transmit_stat
                  |L1.17304|
                          DCD      bdr_avar_stat
                  |L1.17308|
                          DCD      NUMBDR
                  |L1.17312|
                          DCD      uout_av
                  |L1.17316|
                          DCD      bps
                  |L1.17320|
                          DCD      NUMIST
                  |L1.17324|
                          DCD      RELE_SET_MASK
                  |L1.17328|
                          DCD      USIGN
                  |L1.17332|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6200   //-----------------------------------------------
;;;6201   void bps_hndl(void)
0043b8  e92d5ff0          PUSH     {r4-r12,lr}
;;;6202   {
;;;6203   char ptr__,i;
;;;6204   unsigned short tempUS;
;;;6205   
;;;6206   if(sh_cnt0<10)
0043bc  f8dfb40c          LDR      r11,|L1.18380|
;;;6207   	{
;;;6208   	sh_cnt0++;
;;;6209   	if(sh_cnt0>=10)
;;;6210   		{
;;;6211   		sh_cnt0=0;
0043c0  2600              MOVS     r6,#0
;;;6212   		b1Hz_sh=1;
0043c2  f04f0a01          MOV      r10,#1
0043c6  f89b0021          LDRB     r0,[r11,#0x21]        ;6206  ; sh_cnt0
0043ca  280a              CMP      r0,#0xa               ;6206
0043cc  d20a              BCS      |L1.17380|
0043ce  f1000001          ADD      r0,r0,#1              ;6208
0043d2  b2c0              UXTB     r0,r0                 ;6208
0043d4  f88b0021          STRB     r0,[r11,#0x21]        ;6208
0043d8  280a              CMP      r0,#0xa               ;6209
0043da  d303              BCC      |L1.17380|
0043dc  f88b6021          STRB     r6,[r11,#0x21]        ;6211
0043e0  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17380|
;;;6213   		}
;;;6214   	}
;;;6215   
;;;6216   /*if(sh_cnt1<5)
;;;6217   	{
;;;6218   	sh_cnt1++;
;;;6219   	if(sh_cnt1==5)
;;;6220   		{
;;;6221   		sh_cnt1=0;
;;;6222   		b2Hz_sh=1;
;;;6223   		}
;;;6224   	} */
;;;6225   
;;;6226   
;;;6227   /*
;;;6228   if(mess_find(MESS_SRC_ON_OFF))
;;;6229   	{
;;;6230   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6231   		{
;;;6232   		char i;
;;;6233   		for(i=0;i<NUMIST;i++)
;;;6234   			{
;;;6235   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6236   			}
;;;6237   		
;;;6238   		}
;;;6239   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6240   		{
;;;6241   		char i;
;;;6242   		for(i=0;i<NUMIST;i++)
;;;6243   			{
;;;6244   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6245   			}
;;;6246   		
;;;6247   		}
;;;6248   	}
;;;6249   	
;;;6250   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6251   	{				
;;;6252   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6253   		{
;;;6254   		char i;
;;;6255   		for(i=0;i<NUMIST;i++)
;;;6256   			{
;;;6257   			if(mess_data[1]&(1<<i))
;;;6258   				{
;;;6259   				src[i]._ist_blok_cnt=0;
;;;6260   				src[i]._flags_tu=2;
;;;6261   				}
;;;6262   			}
;;;6263   		
;;;6264   		}				
;;;6265   	}*/
;;;6266   
;;;6267   
;;;6268   
;;;6269   /*else*/ 
;;;6270   bps_on_mask=0;
0043e4  4ff9              LDR      r7,|L1.18380|
0043e6  3780              ADDS     r7,r7,#0x80
0043e8  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6271   bps_off_mask=0;
0043ea  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6272   
;;;6273   if(mess_find_unvol(MESS2BPS_HNDL))
0043ec  20cd              MOVS     r0,#0xcd
0043ee  f7fffffe          BL       mess_find_unvol
;;;6274   	{
;;;6275   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6276   		{
;;;6277   		bps_off_mask=0xffff;
;;;6278   		}
;;;6279   
;;;6280   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6281   		{
;;;6282   		bps_off_mask=mess_data[1];
;;;6283   		}
;;;6284   
;;;6285   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6286   		{
;;;6287   		bps_on_mask=mess_data[1];
;;;6288   		}
;;;6289   
;;;6290   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6291   		{
;;;6292   		bps_on_mask=0xffff;
;;;6293   		}
;;;6294   
;;;6295   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6296   		{
;;;6297   		bps_on_mask=(unsigned)mess_data[1];
;;;6298   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6299   		}
;;;6300   
;;;6301    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6302   		{
;;;6303   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6304   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6305   		}
;;;6306   
;;;6307   	for(i=0;i<=NUMIST;i++)
;;;6308   		{
;;;6309   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
0043f2  f8df83dc          LDR      r8,|L1.18384|
0043f6  b3b8              CBZ      r0,|L1.17512|
0043f8  4af6              LDR      r2,|L1.18388|
0043fa  f64f71ff          MOV      r1,#0xffff            ;6277
0043fe  6810              LDR      r0,[r2,#0]            ;6275  ; mess_data
004400  28ce              CMP      r0,#0xce              ;6275
004402  d100              BNE      |L1.17414|
004404  6339              STR      r1,[r7,#0x30]         ;6277  ; bps_off_mask
                  |L1.17414|
004406  28cf              CMP      r0,#0xcf              ;6280
004408  d101              BNE      |L1.17422|
00440a  6853              LDR      r3,[r2,#4]            ;6282  ; mess_data
00440c  633b              STR      r3,[r7,#0x30]         ;6282  ; bps_off_mask
                  |L1.17422|
00440e  28d1              CMP      r0,#0xd1              ;6285
004410  d101              BNE      |L1.17430|
004412  6853              LDR      r3,[r2,#4]            ;6287  ; mess_data
004414  62fb              STR      r3,[r7,#0x2c]         ;6287  ; bps_on_mask
                  |L1.17430|
004416  28d2              CMP      r0,#0xd2              ;6290
004418  d100              BNE      |L1.17436|
00441a  62f9              STR      r1,[r7,#0x2c]         ;6292  ; bps_on_mask
                  |L1.17436|
00441c  28d0              CMP      r0,#0xd0              ;6295
00441e  d104              BNE      |L1.17450|
004420  6851              LDR      r1,[r2,#4]            ;6297  ; mess_data
004422  62f9              STR      r1,[r7,#0x2c]         ;6297  ; bps_on_mask
004424  ea6f0101          MVN      r1,r1                 ;6298
004428  6339              STR      r1,[r7,#0x30]         ;6298  ; bps_off_mask
                  |L1.17450|
00442a  f5b07f9a          CMP      r0,#0x134             ;6301
00442e  d106              BNE      |L1.17470|
004430  6851              LDR      r1,[r2,#4]            ;6303  ; mess_data
004432  fa0af001          LSL      r0,r10,r1             ;6303
004436  62f8              STR      r0,[r7,#0x2c]         ;6303  ; bps_on_mask
004438  ea6f0000          MVN      r0,r0                 ;6304
00443c  6338              STR      r0,[r7,#0x30]         ;6304  ; bps_off_mask
                  |L1.17470|
00443e  f04f0400          MOV      r4,#0                 ;6307
004442  e035              B        |L1.17584|
                  |L1.17476|
004444  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
004446  fa0af904          LSL      r9,r10,r4
00444a  ea190f00          TST      r9,r0
00444e  d00c              BEQ      |L1.17514|
004450  eb0400c4          ADD      r0,r4,r4,LSL #3
004454  eb001004          ADD      r0,r0,r4,LSL #4
004458  eb080080          ADD      r0,r8,r0,LSL #2
00445c  f8301f40          LDRH     r1,[r0,#0x40]!
004460  f1010101          ADD      r1,r1,#1
004464  8001              STRH     r1,[r0,#0]
004466  e008              B        |L1.17530|
                  |L1.17512|
004468  e028              B        |L1.17596|
                  |L1.17514|
;;;6310   		else bps[i]._blok_cnt=0;
00446a  eb0400c4          ADD      r0,r4,r4,LSL #3
00446e  eb001004          ADD      r0,r0,r4,LSL #4
004472  eb080080          ADD      r0,r8,r0,LSL #2
004476  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17530|
;;;6311   		gran(&bps[i]._blok_cnt,0,50);
00447a  eb0400c4          ADD      r0,r4,r4,LSL #3
00447e  eb001004          ADD      r0,r0,r4,LSL #4
004482  eb080580          ADD      r5,r8,r0,LSL #2
004486  f1050040          ADD      r0,r5,#0x40
00448a  2232              MOVS     r2,#0x32
00448c  2100              MOVS     r1,#0
00448e  f7fffffe          BL       gran
;;;6312   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
004492  f9b50040          LDRSH    r0,[r5,#0x40]
004496  2814              CMP      r0,#0x14
004498  dd01              BLE      |L1.17566|
00449a  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17566|
;;;6313   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
00449e  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
0044a0  ea190f00          TST      r9,r0
0044a4  d001              BEQ      |L1.17578|
0044a6  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17578|
0044aa  f1040401          ADD      r4,r4,#1              ;6307
0044ae  b2e4              UXTB     r4,r4                 ;6307
                  |L1.17584|
0044b0  48c9              LDR      r0,|L1.18392|
0044b2  f9b00000          LDRSH    r0,[r0,#0]            ;6307  ; NUMIST
0044b6  4284              CMP      r4,r0                 ;6307
0044b8  ddc4              BLE      |L1.17476|
0044ba  e08e              B        |L1.17882|
                  |L1.17596|
;;;6314   	     }
;;;6315   
;;;6316   	
;;;6317   /*
;;;6318   
;;;6319   	if(bps_all_off_cnt>20)
;;;6320   		{
;;;6321   		for(i=0;i<=NUMIST;i++)
;;;6322   			{
;;;6323   	     	bps[i]._flags_tu=1;
;;;6324   	     	}
;;;6325   		}
;;;6326   	else if(bps_mask_off_cnt>20)
;;;6327   		{
;;;6328   		for(i=0;i<=NUMIST;i++)
;;;6329   			{
;;;6330   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6331   	     	}
;;;6332   		}	
;;;6333   		
;;;6334   	else if(bps_mask_on_off_cnt>20)
;;;6335   		{
;;;6336   		for(i=0;i<=NUMIST;i++)
;;;6337   			{
;;;6338   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6339   			else bps[i]._flags_tu=0;
;;;6340   	     	}
;;;6341   		}
;;;6342   		
;;;6343   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6344   		{
;;;6345   		for(i=0;i<=NUMIST;i++)
;;;6346   			{
;;;6347   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6348   	     	}
;;;6349   		}
;;;6350   */										
;;;6351   	}
;;;6352   
;;;6353   
;;;6354   else if(b1Hz_sh)
0044bc  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
0044c0  b3f0              CBZ      r0,|L1.17728|
;;;6355   	{
;;;6356   	ptr__=0;
0044c2  f04f0400          MOV      r4,#0
;;;6357        for(i=0;i<=NUMIST;i++)
0044c6  4621              MOV      r1,r4
0044c8  48c3              LDR      r0,|L1.18392|
0044ca  f9b00000          LDRSH    r0,[r0,#0]            ;6307
0044ce  e00a              B        |L1.17638|
                  |L1.17616|
;;;6358   		{
;;;6359   	     bps[i]._flags_tu=1;
0044d0  eb0102c1          ADD      r2,r1,r1,LSL #3
0044d4  eb021201          ADD      r2,r2,r1,LSL #4
0044d8  eb080282          ADD      r2,r8,r2,LSL #2
0044dc  f882a02c          STRB     r10,[r2,#0x2c]
0044e0  f1010101          ADD      r1,r1,#1              ;6357
0044e4  b2c9              UXTB     r1,r1                 ;6357
                  |L1.17638|
0044e6  4281              CMP      r1,r0                 ;6357
0044e8  ddf2              BLE      |L1.17616|
;;;6360   	     }	
;;;6361     	     
;;;6362     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0044ea  f04f0100          MOV      r1,#0
0044ee  e023              B        |L1.17720|
                  |L1.17648|
;;;6363     		{
;;;6364   		char ii,iii;
;;;6365   
;;;6366   		ii=(char)NUMIST;
0044f0  b2c2              UXTB     r2,r0
;;;6367   		//if(ii<0)ii=0;
;;;6368   		if(ii>32)ii=32;
0044f2  2a20              CMP      r2,#0x20
0044f4  d901              BLS      |L1.17658|
0044f6  f04f0220          MOV      r2,#0x20
                  |L1.17658|
;;;6369   		iii=numOfForvardBps;
0044fa  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6370   		//if(iii<0)iii=0;
;;;6371   		if(iii>=NUMIST)iii=0;
0044fe  4283              CMP      r3,r0
004500  db01              BLT      |L1.17670|
004502  f04f0300          MOV      r3,#0
                  |L1.17670|
;;;6372   		iii+=i;
004506  440b              ADD      r3,r3,r1
004508  b2db              UXTB     r3,r3
;;;6373   		iii=iii%ii;
00450a  fbb3f5f2          UDIV     r5,r3,r2
00450e  fb023215          MLS      r2,r2,r5,r3
;;;6374   		
;;;6375     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004512  eb0203c2          ADD      r3,r2,r2,LSL #3
004516  eb031202          ADD      r2,r3,r2,LSL #4
00451a  eb080282          ADD      r2,r8,r2,LSL #2
00451e  7893              LDRB     r3,[r2,#2]
004520  2b02              CMP      r3,#2
004522  d001              BEQ      |L1.17704|
004524  2b01              CMP      r3,#1
004526  d104              BNE      |L1.17714|
                  |L1.17704|
;;;6376     	         	{
;;;6377     	         	bps[iii]._flags_tu=0;
004528  f882602c          STRB     r6,[r2,#0x2c]
;;;6378     	         	ptr__++;
00452c  f1040401          ADD      r4,r4,#1
004530  b2e4              UXTB     r4,r4
                  |L1.17714|
004532  f1010101          ADD      r1,r1,#1              ;6362
004536  b2c9              UXTB     r1,r1                 ;6362
                  |L1.17720|
004538  4281              CMP      r1,r0                 ;6362
00453a  da06              BGE      |L1.17738|
00453c  4aa7              LDR      r2,|L1.18396|
00453e  e000              B        |L1.17730|
                  |L1.17728|
004540  e04b              B        |L1.17882|
                  |L1.17730|
004542  f9b22000          LDRSH    r2,[r2,#0]            ;6362  ; num_necc
004546  4294              CMP      r4,r2                 ;6362
004548  dbd2              BLT      |L1.17648|
                  |L1.17738|
;;;6379     	         	}
;;;6380   			
;;;6381     	     }
;;;6382   	bps[numOfForvardBps_old]._flags_tu=0;
00454a  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
00454e  eb0102c1          ADD      r2,r1,r1,LSL #3
004552  eb021101          ADD      r1,r2,r1,LSL #4
004556  eb080181          ADD      r1,r8,r1,LSL #2
00455a  f881602c          STRB     r6,[r1,#0x2c]
;;;6383   
;;;6384   	if(main_1Hz_cnt<60)
00455e  49a0              LDR      r1,|L1.18400|
004560  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004564  293c              CMP      r1,#0x3c
004566  da0f              BGE      |L1.17800|
;;;6385   		{
;;;6386        	for(i=0;i<=NUMIST;i++)
004568  f04f0100          MOV      r1,#0
00456c  e00a              B        |L1.17796|
                  |L1.17774|
;;;6387   			{
;;;6388   	     	bps[i]._flags_tu=0;
00456e  eb0102c1          ADD      r2,r1,r1,LSL #3
004572  eb021201          ADD      r2,r2,r1,LSL #4
004576  eb080282          ADD      r2,r8,r2,LSL #2
00457a  f882602c          STRB     r6,[r2,#0x2c]
00457e  f1010101          ADD      r1,r1,#1              ;6386
004582  b2c9              UXTB     r1,r1                 ;6386
                  |L1.17796|
004584  4281              CMP      r1,r0                 ;6386
004586  ddf2              BLE      |L1.17774|
                  |L1.17800|
;;;6389   	     	}	
;;;6390   		}
;;;6391   	if(ipsBlckStat)
004588  4996              LDR      r1,|L1.18404|
00458a  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00458c  b179              CBZ      r1,|L1.17838|
;;;6392   		{
;;;6393        	for(i=0;i<=NUMIST;i++)
00458e  f04f0100          MOV      r1,#0
004592  e00a              B        |L1.17834|
                  |L1.17812|
;;;6394   			{
;;;6395   	     	bps[i]._flags_tu=1;
004594  eb0102c1          ADD      r2,r1,r1,LSL #3
004598  eb021201          ADD      r2,r2,r1,LSL #4
00459c  eb080282          ADD      r2,r8,r2,LSL #2
0045a0  f882a02c          STRB     r10,[r2,#0x2c]
0045a4  f1010101          ADD      r1,r1,#1              ;6393
0045a8  b2c9              UXTB     r1,r1                 ;6393
                  |L1.17834|
0045aa  4281              CMP      r1,r0                 ;6393
0045ac  ddf2              BLE      |L1.17812|
                  |L1.17838|
;;;6396   	     	}
;;;6397   		}
;;;6398   
;;;6399        for(i=0;i<=NUMIST;i++)
0045ae  f04f0100          MOV      r1,#0
;;;6400   		{
;;;6401   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0045b2  f06f0331          MVN      r3,#0x31
0045b6  e00e              B        |L1.17878|
                  |L1.17848|
0045b8  eb0102c1          ADD      r2,r1,r1,LSL #3
0045bc  eb021201          ADD      r2,r2,r1,LSL #4
0045c0  eb080282          ADD      r2,r8,r2,LSL #2
0045c4  f892402c          LDRB     r4,[r2,#0x2c]
0045c8  2c01              CMP      r4,#1
0045ca  d101              BNE      |L1.17872|
0045cc  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17872|
0045d0  f1010101          ADD      r1,r1,#1              ;6399
0045d4  b2c9              UXTB     r1,r1                 ;6399
                  |L1.17878|
0045d6  4281              CMP      r1,r0                 ;6399
0045d8  ddee              BLE      |L1.17848|
                  |L1.17882|
;;;6402   	   	}	
;;;6403   		 
;;;6404     	}
;;;6405   
;;;6406   
;;;6407   for(i=0;i<NUMIST;i++)
0045da  f04f0000          MOV      r0,#0
0045de  497e              LDR      r1,|L1.18392|
;;;6408        {
;;;6409        if(bps[i]._ist_blok_host_cnt!=0)
;;;6410             {
;;;6411             bps[i]._flags_tu=99;
0045e0  f04f0463          MOV      r4,#0x63
0045e4  f9b11000          LDRSH    r1,[r1,#0]            ;6307
0045e8  e00f              B        |L1.17930|
                  |L1.17898|
0045ea  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6409
0045ee  eb021200          ADD      r2,r2,r0,LSL #4       ;6409
0045f2  eb080282          ADD      r2,r8,r2,LSL #2       ;6409
0045f6  6bd3              LDR      r3,[r2,#0x3c]         ;6409
0045f8  b123              CBZ      r3,|L1.17924|
0045fa  f882402c          STRB     r4,[r2,#0x2c]
;;;6412   	     bps[i]._ist_blok_host_cnt--;
0045fe  f1a30301          SUB      r3,r3,#1
004602  63d3              STR      r3,[r2,#0x3c]
                  |L1.17924|
004604  f1000001          ADD      r0,r0,#1              ;6407
004608  b2c0              UXTB     r0,r0                 ;6407
                  |L1.17930|
00460a  4288              CMP      r0,r1                 ;6407
00460c  dbed              BLT      |L1.17898|
;;;6413             }
;;;6414        }
;;;6415   
;;;6416   
;;;6417   
;;;6418   
;;;6419   b1Hz_sh=0;
00460e  f88b6022          STRB     r6,[r11,#0x22]
;;;6420   
;;;6421   
;;;6422   num_of_wrks_bps=0;
004612  f88b601e          STRB     r6,[r11,#0x1e]
;;;6423   tempUS=0;
004616  f04f0200          MOV      r2,#0
;;;6424   for(i=0;i<NUMIST;i++)
00461a  4610              MOV      r0,r2
00461c  e015              B        |L1.17994|
                  |L1.17950|
;;;6425   	{
;;;6426   	if(bps[i]._state==bsWRK)
00461e  eb0003c0          ADD      r3,r0,r0,LSL #3
004622  eb031300          ADD      r3,r3,r0,LSL #4
004626  eb080383          ADD      r3,r8,r3,LSL #2
00462a  789c              LDRB     r4,[r3,#2]
00462c  2c01              CMP      r4,#1
00462e  d109              BNE      |L1.17988|
;;;6427   		{
;;;6428   		num_of_wrks_bps++;
004630  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
004634  f1040401          ADD      r4,r4,#1
004638  f88b401e          STRB     r4,[r11,#0x1e]
;;;6429   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00463c  69db              LDR      r3,[r3,#0x1c]
00463e  4293              CMP      r3,r2
004640  dd00              BLE      |L1.17988|
004642  b29a              UXTH     r2,r3
                  |L1.17988|
004644  f1000001          ADD      r0,r0,#1              ;6424
004648  b2c0              UXTB     r0,r0                 ;6424
                  |L1.17994|
00464a  4288              CMP      r0,r1                 ;6424
00464c  dbe7              BLT      |L1.17950|
;;;6430   		}
;;;6431   	}
;;;6432   Ubpsmax=tempUS;
00464e  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6433   
;;;6434   bPARALLEL_ENOUG=0;
004652  f88b602c          STRB     r6,[r11,#0x2c]
;;;6435   bPARALLEL_NOT_ENOUG=1;
004656  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6436   
;;;6437   for(i=0;i<NUMIST;i++)
00465a  f04f0000          MOV      r0,#0
;;;6438   	{
;;;6439   	if(bps[i]._Ti>=TSIGN)
00465e  4a62              LDR      r2,|L1.18408|
004660  f9b23000          LDRSH    r3,[r2,#0]
;;;6440   		{
;;;6441   		bPARALLEL_ENOUG=1;
;;;6442   		}
;;;6443   	if(bps[i]._Ti>=(TSIGN-5))
004664  f1a30405          SUB      r4,r3,#5
004668  e011              B        |L1.18062|
                  |L1.18026|
00466a  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6439
00466e  eb021200          ADD      r2,r2,r0,LSL #4       ;6439
004672  eb080282          ADD      r2,r8,r2,LSL #2       ;6439
004676  6a92              LDR      r2,[r2,#0x28]         ;6439
004678  429a              CMP      r2,r3                 ;6439
00467a  db01              BLT      |L1.18048|
00467c  f88ba02c          STRB     r10,[r11,#0x2c]       ;6441
                  |L1.18048|
004680  42a2              CMP      r2,r4
004682  db01              BLT      |L1.18056|
;;;6444   		{
;;;6445   		bPARALLEL_NOT_ENOUG=0;
004684  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.18056|
004688  f1000001          ADD      r0,r0,#1              ;6437
00468c  b2c0              UXTB     r0,r0                 ;6437
                  |L1.18062|
00468e  4288              CMP      r0,r1                 ;6437
004690  dbeb              BLT      |L1.18026|
;;;6446   		}
;;;6447   	}
;;;6448   
;;;6449   if(bPARALLEL_ENOUG==1)
004692  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
004696  2801              CMP      r0,#1
004698  d00a              BEQ      |L1.18096|
;;;6450   	{
;;;6451   	bPARALLEL=1;
;;;6452   	}
;;;6453   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
00469a  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
00469e  2800              CMP      r0,#0
0046a0  d005              BEQ      |L1.18094|
0046a2  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
0046a6  2800              CMP      r0,#0
0046a8  d001              BEQ      |L1.18094|
;;;6454   	{
;;;6455   	bPARALLEL=0;
0046aa  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.18094|
;;;6456   	}
;;;6457   }
0046ae  e661              B        |L1.17268|
                  |L1.18096|
0046b0  f88ba02d          STRB     r10,[r11,#0x2d]       ;6451
0046b4  e65e              B        |L1.17268|
;;;6458   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6465   //-----------------------------------------------
;;;6466   void powerAntiAliasingHndl(void)
0046b6  b570              PUSH     {r4-r6,lr}
;;;6467   {
;;;6468   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0046b8  230a              MOVS     r3,#0xa
0046ba  4c4d              LDR      r4,|L1.18416|
0046bc  484b              LDR      r0,|L1.18412|
;;;6469   	{
;;;6470   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6471   	if(powerSummaryCnt>=10)
;;;6472   		{
;;;6473   		power_summary=power_summary_tempo;
;;;6474   		}
;;;6475   	}
;;;6476   else powerSummaryCnt=0;
0046be  2500              MOVS     r5,#0
0046c0  6822              LDR      r2,[r4,#0]            ;6468  ; power_summary_tempo_old
0046c2  6800              LDR      r0,[r0,#0]            ;6468  ; power_summary_tempo
0046c4  fbb2f6f3          UDIV     r6,r2,r3              ;6468
0046c8  fbb0f1f3          UDIV     r1,r0,r3              ;6468
0046cc  4a49              LDR      r2,|L1.18420|
0046ce  42b1              CMP      r1,r6                 ;6468
0046d0  d10b              BNE      |L1.18154|
0046d2  7811              LDRB     r1,[r2,#0]            ;6470  ; powerSummaryCnt
0046d4  290f              CMP      r1,#0xf               ;6470
0046d6  d202              BCS      |L1.18142|
0046d8  f1010101          ADD      r1,r1,#1              ;6470
0046dc  7011              STRB     r1,[r2,#0]            ;6470
                  |L1.18142|
0046de  7811              LDRB     r1,[r2,#0]            ;6471  ; powerSummaryCnt
0046e0  290a              CMP      r1,#0xa               ;6471
0046e2  d303              BCC      |L1.18156|
0046e4  4944              LDR      r1,|L1.18424|
0046e6  6008              STR      r0,[r1,#0]            ;6473  ; power_summary
0046e8  e000              B        |L1.18156|
                  |L1.18154|
0046ea  7015              STRB     r5,[r2,#0]
                  |L1.18156|
;;;6477   power_summary_tempo_old=power_summary_tempo;
0046ec  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6478   
;;;6479   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0046ee  4843              LDR      r0,|L1.18428|
0046f0  4c43              LDR      r4,|L1.18432|
0046f2  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0046f6  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0046fa  fbb0f1f3          UDIV     r1,r0,r3
0046fe  fbb2f3f3          UDIV     r3,r2,r3
;;;6480   	{
;;;6481   	if(powerCurrentCnt<15)powerCurrentCnt++;
004702  4a40              LDR      r2,|L1.18436|
004704  4299              CMP      r1,r3                 ;6479
004706  d10b              BNE      |L1.18208|
004708  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00470a  290f              CMP      r1,#0xf
00470c  d202              BCS      |L1.18196|
00470e  f1010101          ADD      r1,r1,#1
004712  7011              STRB     r1,[r2,#0]
                  |L1.18196|
;;;6482   	if(powerCurrentCnt>=10)
004714  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004716  290a              CMP      r1,#0xa
004718  d303              BCC      |L1.18210|
;;;6483   		{
;;;6484   		power_current=power_current_tempo;
00471a  493b              LDR      r1,|L1.18440|
00471c  8008              STRH     r0,[r1,#0]
00471e  e000              B        |L1.18210|
                  |L1.18208|
;;;6485   		}
;;;6486   	}
;;;6487   else powerCurrentCnt=0;
004720  7015              STRB     r5,[r2,#0]
                  |L1.18210|
;;;6488   power_current_tempo_old=power_current_tempo;
004722  8020              STRH     r0,[r4,#0]
;;;6489   }
004724  bd70              POP      {r4-r6,pc}
;;;6490   
                          ENDP

                  energometr_hndl PROC
;;;6600   //-----------------------------------------------
;;;6601   void energometr_hndl(void)
004726  4770              BX       lr
;;;6602   {
;;;6603   //2F 3F 21 0D 0A 
;;;6604   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6605   //2F 3F 21 0D 0A 
;;;6606   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6607   //06 30 35 31 0D 0A 
;;;6608   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6609   
;;;6610   #ifdef CE102M_ENABLED
;;;6611   /*if
;;;6612   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6613   
;;;6614   if(read_power_cnt_main_cnt)
;;;6615   	{
;;;6616   	read_power_cnt_main_cnt--;
;;;6617   	if(read_power_cnt_main_cnt==0)
;;;6618   		{
;;;6619   		rx_read_power_cnt_phase=0;
;;;6620   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6621   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6622   		else bENERGOMETR_UIP=0;
;;;6623   		//bENERGOMETR_UIP=2;
;;;6624   		}
;;;6625   	}
;;;6626   
;;;6627   if (rx_read_power_cnt_phase==0)
;;;6628   	{
;;;6629   	char command_with_crc[20];
;;;6630   	
;;;6631      	command_with_crc[0]=0xaf;  // /
;;;6632   	command_with_crc[1]=0x3f;  // ?
;;;6633   	command_with_crc[2]=0x21;  // !
;;;6634   	command_with_crc[3]=0x8d;  // CR
;;;6635   	command_with_crc[4]=0x0a;  // LF
;;;6636   
;;;6637   	uart_out__adr1(command_with_crc,5);
;;;6638   
;;;6639   	rx_wr_index1=0;
;;;6640   	rx_read_power_cnt_phase=1;
;;;6641   
;;;6642   	read_power_cnt_main_cnt=50;
;;;6643   	}
;;;6644   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6645   	{
;;;6646   	char command_with_crc[20];
;;;6647   	
;;;6648   	command_with_crc[0]=0x06;  //  
;;;6649   	command_with_crc[1]=0x30;  // 0
;;;6650   	command_with_crc[2]=0x35;  // 5
;;;6651   	command_with_crc[3]=0xb1;  // 1
;;;6652   	command_with_crc[4]=0x8d;  // CR
;;;6653   	command_with_crc[5]=0x0a;  // LF
;;;6654   	
;;;6655   	uart_out__adr1(command_with_crc,6);
;;;6656   	
;;;6657   	rx_wr_index1=0;
;;;6658   	rx_read_power_cnt_phase=3;
;;;6659   
;;;6660   	read_power_cnt_main_cnt=50;
;;;6661   	}  
;;;6662   
;;;6663   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6664   	{
;;;6665   	char command_with_crc[20];
;;;6666   	
;;;6667   	command_with_crc[0]=0x81;  //  
;;;6668   	command_with_crc[1]=0xd2;  // 0
;;;6669   	command_with_crc[2]=0xb1;  // 5
;;;6670   	command_with_crc[3]=0x82;  // 1
;;;6671   	command_with_crc[4]=0x56;  // CR
;;;6672   	command_with_crc[5]=0xcf;  // LF
;;;6673   	command_with_crc[6]=0xcc;  // 1
;;;6674   	command_with_crc[7]=0xd4;  // CR
;;;6675   	command_with_crc[8]=0x41;  // LF
;;;6676   	command_with_crc[9]=0x28;  // 1
;;;6677   	command_with_crc[10]=0xa9;  // CR
;;;6678   	command_with_crc[11]=0x03;  // LF
;;;6679   	command_with_crc[12]=0x5f;  // LF
;;;6680   		
;;;6681   	uart_out__adr1(command_with_crc,13);
;;;6682   	
;;;6683   	rx_wr_index1=0;
;;;6684   	rx_read_power_cnt_phase=5;
;;;6685   
;;;6686   	read_power_cnt_main_cnt=50;
;;;6687   	}  
;;;6688   
;;;6689   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6690   	{
;;;6691   	char command_with_crc[20];
;;;6692   	
;;;6693   	command_with_crc[0]=0x81;  //  
;;;6694   	command_with_crc[1]=0xd2;  // 0
;;;6695   	command_with_crc[2]=0xb1;  // 5
;;;6696   	command_with_crc[3]=0x82;  // 1
;;;6697   	command_with_crc[4]=0xc3;  // CR
;;;6698   	command_with_crc[5]=0x55;  // LF
;;;6699   	command_with_crc[6]=0xd2;  // 1
;;;6700   	command_with_crc[7]=0xd2;  // CR
;;;6701   	command_with_crc[8]=0xc5;  // LF
;;;6702   	command_with_crc[9]=0x28;  // 1
;;;6703   	command_with_crc[10]=0xa9;  // CR
;;;6704   	command_with_crc[11]=0x03;  // LF
;;;6705   	command_with_crc[12]=0x5a;  // LF
;;;6706   		
;;;6707   	uart_out__adr1(command_with_crc,13);
;;;6708   	
;;;6709   	rx_wr_index1=0;
;;;6710   	rx_read_power_cnt_phase=9;
;;;6711   
;;;6712   	read_power_cnt_main_cnt=50;
;;;6713   	}  
;;;6714   
;;;6715   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6716   	{
;;;6717   	char command_with_crc[20];
;;;6718   	
;;;6719   	command_with_crc[0]=0x81;  //  		01
;;;6720   	command_with_crc[1]=0xd2;  // R		52
;;;6721   	command_with_crc[2]=0xb1;  // 1		31
;;;6722   	command_with_crc[3]=0x82;  // 		02
;;;6723   	command_with_crc[4]=0x50;  // P		50
;;;6724   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6725   	command_with_crc[6]=0xd7;  // W		57
;;;6726   	command_with_crc[7]=0xc5;  // E		45
;;;6727   	command_with_crc[8]=0x50;  // P		50
;;;6728   	command_with_crc[9]=0x28;  // (		28
;;;6729   	command_with_crc[10]=0xa9;  // )	29
;;;6730   	command_with_crc[11]=0x03;  // 		03
;;;6731   	command_with_crc[12]=0xe4;  // d	64
;;;6732   		
;;;6733   	uart_out__adr1(command_with_crc,13);
;;;6734   	
;;;6735   	rx_wr_index1=0;
;;;6736   	rx_read_power_cnt_phase=21;
;;;6737   
;;;6738   	read_power_cnt_main_cnt=50;
;;;6739   	}  
;;;6740   
;;;6741   
;;;6742   #endif
;;;6743   }
;;;6744   
                          ENDP

                  ips_current_average_hndl PROC
;;;6745   //-----------------------------------------------
;;;6746   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004728  e92d4ff0          PUSH     {r4-r11,lr}
;;;6747   {
00472c  b089              SUB      sp,sp,#0x24
;;;6748   
;;;6749   if(++ica_timer_cnt>=10) 
00472e  4e37              LDR      r6,|L1.18444|
;;;6750   	{
;;;6751   	ica_timer_cnt=0;
004730  2400              MOVS     r4,#0
004732  7830              LDRB     r0,[r6,#0]            ;6749  ; ica_timer_cnt
004734  1c40              ADDS     r0,r0,#1              ;6749
004736  b2c0              UXTB     r0,r0                 ;6749
004738  7030              STRB     r0,[r6,#0]            ;6749
00473a  280a              CMP      r0,#0xa               ;6749
00473c  d300              BCC      |L1.18240|
00473e  7034              STRB     r4,[r6,#0]
                  |L1.18240|
;;;6752   	}
;;;6753   
;;;6754   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004740  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004742  4f33              LDR      r7,|L1.18448|
;;;6755   	{
;;;6756   	
;;;6757   	ica_plazma[0]++;
;;;6758   
;;;6759   	ica_my_current=bps_I;
;;;6760   
;;;6761   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004744  f8dfb0cc          LDR      r11,|L1.18452|
004748  4d20              LDR      r5,|L1.18380|
00474a  bbe8              CBNZ     r0,|L1.18376|
00474c  7fa8              LDRB     r0,[r5,#0x1e]         ;6754  ; num_of_wrks_bps
00474e  b3d8              CBZ      r0,|L1.18376|
004750  f8950023          LDRB     r0,[r5,#0x23]         ;6754  ; spc_stat
004754  7969              LDRB     r1,[r5,#5]            ;6754  ; vz1_stat
004756  4308              ORRS     r0,r0,r1              ;6754
004758  79e9              LDRB     r1,[r5,#7]            ;6754  ; vz2_stat
00475a  4308              ORRS     r0,r0,r1              ;6754
00475c  7839              LDRB     r1,[r7,#0]            ;6754  ; sp_ch_stat
00475e  4308              ORRS     r0,r0,r1              ;6754
004760  d17f              BNE      |L1.18530|
004762  f8df90b4          LDR      r9,|L1.18456|
004766  f8990000          LDRB     r0,[r9,#0]            ;6757  ; ica_plazma
00476a  f1000001          ADD      r0,r0,#1              ;6757
00476e  f8890000          STRB     r0,[r9,#0]            ;6757
004772  482a              LDR      r0,|L1.18460|
004774  f9b01000          LDRSH    r1,[r0,#0]            ;6759  ; bps_I
004778  4829              LDR      r0,|L1.18464|
00477a  8001              STRH     r1,[r0,#0]            ;6759
00477c  4829              LDR      r0,|L1.18468|
;;;6762   		{
;;;6763   		ica_plazma[1]++;
;;;6764   		ica_u_necc--;
00477e  f8dfa0a8          LDR      r10,|L1.18472|
004782  f9b02000          LDRSH    r2,[r0,#0]            ;6761  ; ica_your_current
004786  4648              MOV      r0,r9                 ;6757
004788  f9bac000          LDRSH    r12,[r10,#0]
00478c  7843              LDRB     r3,[r0,#1]            ;6763
00478e  4827              LDR      r0,|L1.18476|
004790  4291              CMP      r1,r2                 ;6761
004792  f9b08000          LDRSH    r8,[r0,#0]            ;6761
004796  4658              MOV      r0,r11                ;6761
004798  f9b00000          LDRSH    r0,[r0,#0]            ;6761
00479c  dd48              BLE      |L1.18480|
00479e  eba10e02          SUB      lr,r1,r2              ;6761
0047a2  f1be0f05          CMP      lr,#5                 ;6761
0047a6  db43              BLT      |L1.18480|
0047a8  2801              CMP      r0,#1                 ;6761
0047aa  d004              BEQ      |L1.18358|
0047ac  2802              CMP      r0,#2                 ;6761
0047ae  d13f              BNE      |L1.18480|
0047b0  f1b80f05          CMP      r8,#5                 ;6761
0047b4  dd3c              BLE      |L1.18480|
                  |L1.18358|
0047b6  f1030301          ADD      r3,r3,#1              ;6763
0047ba  f8893001          STRB     r3,[r9,#1]            ;6763
0047be  f1ac0c01          SUB      r12,r12,#1
0047c2  f8aac000          STRH     r12,[r10,#0]
0047c6  e047              B        |L1.18520|
                  |L1.18376|
0047c8  e04b              B        |L1.18530|
0047ca  0000              DCW      0x0000
                  |L1.18380|
                          DCD      ||area_number.26||
                  |L1.18384|
                          DCD      bps
                  |L1.18388|
                          DCD      mess_data
                  |L1.18392|
                          DCD      NUMIST
                  |L1.18396|
                          DCD      num_necc
                  |L1.18400|
                          DCD      main_1Hz_cnt
                  |L1.18404|
                          DCD      ipsBlckStat
                  |L1.18408|
                          DCD      TSIGN
                  |L1.18412|
                          DCD      power_summary_tempo
                  |L1.18416|
                          DCD      power_summary_tempo_old
                  |L1.18420|
                          DCD      powerSummaryCnt
                  |L1.18424|
                          DCD      power_summary
                  |L1.18428|
                          DCD      power_current_tempo
                  |L1.18432|
                          DCD      power_current_tempo_old
                  |L1.18436|
                          DCD      powerCurrentCnt
                  |L1.18440|
                          DCD      power_current
                  |L1.18444|
                          DCD      ica_timer_cnt
                  |L1.18448|
                          DCD      sp_ch_stat
                  |L1.18452|
                          DCD      ICA_EN
                  |L1.18456|
                          DCD      ica_plazma
                  |L1.18460|
                          DCD      bps_I
                  |L1.18464|
                          DCD      ica_my_current
                  |L1.18468|
                          DCD      ica_your_current
                  |L1.18472|
                          DCD      ica_u_necc
                  |L1.18476|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18480|
;;;6765   		}
;;;6766   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004830  4291              CMP      r1,r2
004832  da11              BGE      |L1.18520|
004834  1a51              SUBS     r1,r2,r1
004836  2905              CMP      r1,#5
004838  db0e              BLT      |L1.18520|
00483a  2801              CMP      r0,#1
00483c  d004              BEQ      |L1.18504|
00483e  2802              CMP      r0,#2
004840  d10a              BNE      |L1.18520|
004842  f1b80f05          CMP      r8,#5
004846  dd07              BLE      |L1.18520|
                  |L1.18504|
;;;6767   		{
;;;6768   		ica_plazma[1]--;
004848  f1a30301          SUB      r3,r3,#1
00484c  f8893001          STRB     r3,[r9,#1]
;;;6769   		ica_u_necc++;
004850  f10c0c01          ADD      r12,r12,#1
004854  f8aac000          STRH     r12,[r10,#0]
                  |L1.18520|
;;;6770   		}
;;;6771   	gran(&ica_u_necc,-100,100);
004858  2264              MOVS     r2,#0x64
00485a  4251              RSBS     r1,r2,#0
00485c  48fc              LDR      r0,|L1.19536|
00485e  f7fffffe          BL       gran
                  |L1.18530|
;;;6772   	}
;;;6773   
;;;6774   
;;;6775   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004862  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
004866  2801              CMP      r0,#1
004868  d169              BNE      |L1.18750|
00486a  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
00486e  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004870  4308              ORRS     r0,r0,r1
004872  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004874  4308              ORRS     r0,r0,r1
004876  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004878  4308              ORRS     r0,r0,r1
00487a  d160              BNE      |L1.18750|
00487c  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
00487e  2800              CMP      r0,#0
004880  d05d              BEQ      |L1.18750|
;;;6776   	{
;;;6777   	
;;;6778   //	ica_connect_cnt++;
;;;6779   
;;;6780   	if(ica_timer_cnt==8)
004882  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6781   		{
;;;6782   		char modbus_buff[20],i;
;;;6783   		short crc_temp;
;;;6784   	
;;;6785   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004884  4bf3              LDR      r3,|L1.19540|
;;;6786   		modbus_buff[1] = 4;
;;;6787   		modbus_buff[2] = 0;
;;;6788   		modbus_buff[3] = 2;
;;;6789   		modbus_buff[4] = 0;	
;;;6790   		modbus_buff[5] = 1;
;;;6791   	
;;;6792   		crc_temp= CRC16_2(modbus_buff,6);
;;;6793   	
;;;6794   		modbus_buff[6]= (char)crc_temp;
;;;6795   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6796   	
;;;6797   		if(ICA_CH==0)
004886  4ff4              LDR      r7,|L1.19544|
004888  2808              CMP      r0,#8                 ;6780
00488a  d05b              BEQ      |L1.18756|
;;;6798   			{
;;;6799   			for (i=0;i<8;i++)
;;;6800   				{
;;;6801   				putchar_sc16is700(modbus_buff[i]);
;;;6802   				}
;;;6803   			}
;;;6804   		else if(ICA_CH==2)
;;;6805   			{
;;;6806   			uart_out1 (5,4,0,2,0,1,0);
;;;6807   			}
;;;6808   		}
;;;6809   	else
;;;6810   		{
;;;6811   		char modbus_buff[20],i;
;;;6812   		short crc_temp, tempSSSS;
;;;6813   
;;;6814   		tempSSSS=cntrl_stat_old;
00488c  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6815   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004890  48f2              LDR      r0,|L1.19548|
004892  f06f0214          MVN      r2,#0x14
004896  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
00489a  ebc01100          RSB      r1,r0,r0,LSL #4
00489e  eb020c81          ADD      r12,r2,r1,LSL #2
0048a2  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0048a6  4594              CMP      r12,r2
0048a8  d00b              BEQ      |L1.18626|
0048aa  f06f0c13          MVN      r12,#0x13
0048ae  eb0c0c81          ADD      r12,r12,r1,LSL #2
0048b2  4594              CMP      r12,r2
0048b4  d005              BEQ      |L1.18626|
0048b6  f06f0c12          MVN      r12,#0x12
0048ba  eb0c0181          ADD      r1,r12,r1,LSL #2
0048be  4291              CMP      r1,r2
0048c0  d101              BNE      |L1.18630|
                  |L1.18626|
0048c2  f4404680          ORR      r6,r0,#0x4000
                  |L1.18630|
;;;6816   
;;;6817   
;;;6818   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0048c6  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0048c8  f88d0010          STRB     r0,[sp,#0x10]
;;;6819   		modbus_buff[1] = 6;
0048cc  f04f0006          MOV      r0,#6
0048d0  f88d0011          STRB     r0,[sp,#0x11]
;;;6820   		modbus_buff[2] = 0;
0048d4  f88d4012          STRB     r4,[sp,#0x12]
;;;6821   		modbus_buff[3] = 100;
0048d8  f04f0064          MOV      r0,#0x64
0048dc  f88d0013          STRB     r0,[sp,#0x13]
;;;6822   		modbus_buff[4] = (char)(tempSSSS/256);	
0048e0  ea4f70e6          ASR      r0,r6,#31
0048e4  eb066010          ADD      r0,r6,r0,LSR #24
0048e8  ea4f2120          ASR      r1,r0,#8
0048ec  f88d1014          STRB     r1,[sp,#0x14]
;;;6823   		modbus_buff[5] = (char)(tempSSSS%256);
0048f0  4630              MOV      r0,r6
0048f2  f88d0015          STRB     r0,[sp,#0x15]
;;;6824   	
;;;6825   		crc_temp= CRC16_2(modbus_buff,6);
0048f6  f04f0106          MOV      r1,#6
0048fa  a804              ADD      r0,sp,#0x10
0048fc  f7fffffe          BL       CRC16_2
;;;6826   	
;;;6827   		modbus_buff[6]= (char)crc_temp;
004900  f88d0016          STRB     r0,[sp,#0x16]
;;;6828   		modbus_buff[7]= (char)(crc_temp>>8);
004904  ea4f2020          ASR      r0,r0,#8
004908  f88d0017          STRB     r0,[sp,#0x17]
;;;6829   	
;;;6830   		crc_temp= CRC16_2(modbus_buff,6);
00490c  f04f0106          MOV      r1,#6
004910  a804              ADD      r0,sp,#0x10
004912  f7fffffe          BL       CRC16_2
;;;6831   	
;;;6832   		plazma_ica1=tempSSSS;
004916  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6833   		if(ICA_CH==0)
00491a  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
00491e  b3f0              CBZ      r0,|L1.18846|
;;;6834   			{
;;;6835   			for (i=0;i<8;i++)
;;;6836   				{
;;;6837   				putchar_sc16is700(modbus_buff[i]);
;;;6838   				}
;;;6839   			}
;;;6840   		else if(ICA_CH==2)
004920  2802              CMP      r0,#2
004922  d10c              BNE      |L1.18750|
;;;6841   			{
;;;6842   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004924  f89d0015          LDRB     r0,[sp,#0x15]
004928  f89d1014          LDRB     r1,[sp,#0x14]
00492c  e9cd0401          STRD     r0,r4,[sp,#4]
004930  9100              STR      r1,[sp,#0]
004932  2364              MOVS     r3,#0x64
004934  2200              MOVS     r2,#0
004936  2106              MOVS     r1,#6
004938  2005              MOVS     r0,#5
00493a  f7fffffe          BL       uart_out1
                  |L1.18750|
;;;6843   			}
;;;6844   		}
;;;6845   	}
;;;6846   }
00493e  b009              ADD      sp,sp,#0x24
004940  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18756|
004944  8818              LDRH     r0,[r3,#0]            ;6785  ; ICA_MODBUS_ADDRESS
004946  f88d0010          STRB     r0,[sp,#0x10]         ;6785
00494a  f04f0004          MOV      r0,#4                 ;6786
00494e  f88d0011          STRB     r0,[sp,#0x11]         ;6786
004952  f88d4012          STRB     r4,[sp,#0x12]         ;6787
004956  f04f0002          MOV      r0,#2                 ;6788
00495a  f88d0013          STRB     r0,[sp,#0x13]         ;6788
00495e  f88d4014          STRB     r4,[sp,#0x14]         ;6789
004962  f04f0501          MOV      r5,#1                 ;6790
004966  f88d5015          STRB     r5,[sp,#0x15]         ;6790
00496a  f04f0106          MOV      r1,#6                 ;6792
00496e  a804              ADD      r0,sp,#0x10           ;6792
004970  f7fffffe          BL       CRC16_2
004974  f88d0016          STRB     r0,[sp,#0x16]         ;6794
004978  ea4f2020          ASR      r0,r0,#8              ;6795
00497c  f88d0017          STRB     r0,[sp,#0x17]         ;6795
004980  f9b70000          LDRSH    r0,[r7,#0]            ;6797  ; ICA_CH
004984  b160              CBZ      r0,|L1.18848|
004986  2802              CMP      r0,#2                 ;6804
004988  d1d9              BNE      |L1.18750|
00498a  e9cd4500          STRD     r4,r5,[sp,#0]         ;6806
00498e  2302              MOVS     r3,#2                 ;6806
004990  2200              MOVS     r2,#0                 ;6806
004992  2104              MOVS     r1,#4                 ;6806
004994  2005              MOVS     r0,#5                 ;6806
004996  9402              STR      r4,[sp,#8]            ;6806
004998  f7fffffe          BL       uart_out1
00499c  e7cf              B        |L1.18750|
                  |L1.18846|
00499e  e00b              B        |L1.18872|
                  |L1.18848|
0049a0  f04f0400          MOV      r4,#0                 ;6799
0049a4  ad04              ADD      r5,sp,#0x10           ;6782
                  |L1.18854|
0049a6  5d28              LDRB     r0,[r5,r4]            ;6801
0049a8  f7fffffe          BL       putchar_sc16is700
0049ac  f1040401          ADD      r4,r4,#1              ;6799
0049b0  b2e4              UXTB     r4,r4                 ;6799
0049b2  2c08              CMP      r4,#8                 ;6799
0049b4  d3f7              BCC      |L1.18854|
0049b6  e7c2              B        |L1.18750|
                  |L1.18872|
0049b8  f04f0400          MOV      r4,#0                 ;6835
0049bc  ad04              ADD      r5,sp,#0x10           ;6811
                  |L1.18878|
0049be  5d28              LDRB     r0,[r5,r4]            ;6837
0049c0  f7fffffe          BL       putchar_sc16is700
0049c4  f1040401          ADD      r4,r4,#1              ;6835
0049c8  b2e4              UXTB     r4,r4                 ;6835
0049ca  2c08              CMP      r4,#8                 ;6835
0049cc  d3f7              BCC      |L1.18878|
0049ce  e7b6              B        |L1.18750|
;;;6847   
                          ENDP

                  ipsBlckHndl PROC
;;;6930   //-----------------------------------------------
;;;6931   void ipsBlckHndl(char in)
0049d0  b510              PUSH     {r4,lr}
;;;6932   {
;;;6933   
;;;6934   ipsBlckStat=0;
0049d2  4ba3              LDR      r3,|L1.19552|
0049d4  f04f0000          MOV      r0,#0
0049d8  8018              STRH     r0,[r3,#0]
;;;6935   if(ipsBlckSrc==1)
0049da  48a2              LDR      r0,|L1.19556|
0049dc  f04f0401          MOV      r4,#1
;;;6936   	{
;;;6937   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0049e0  f44f62fa          MOV      r2,#0x7d0
0049e4  f9b01000          LDRSH    r1,[r0,#0]            ;6935  ; ipsBlckSrc
0049e8  489f              LDR      r0,|L1.19560|
0049ea  2901              CMP      r1,#1                 ;6935
0049ec  f9b00000          LDRSH    r0,[r0,#0]
0049f0  d006              BEQ      |L1.18944|
;;;6938   	}
;;;6939   else if(ipsBlckSrc==2)
0049f2  2902              CMP      r1,#2
0049f4  d10f              BNE      |L1.18966|
0049f6  499d              LDR      r1,|L1.19564|
;;;6940   	{
;;;6941   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0049f8  f9b1101a          LDRSH    r1,[r1,#0x1a]
0049fc  b160              CBZ      r0,|L1.18968|
0049fe  e00d              B        |L1.18972|
                  |L1.18944|
004a00  499a              LDR      r1,|L1.19564|
004a02  f9b11016          LDRSH    r1,[r1,#0x16]         ;6937
004a06  b908              CBNZ     r0,|L1.18956|
004a08  4291              CMP      r1,r2                 ;6937
004a0a  dc03              BGT      |L1.18964|
                  |L1.18956|
004a0c  2801              CMP      r0,#1                 ;6937
004a0e  d102              BNE      |L1.18966|
004a10  4291              CMP      r1,r2                 ;6937
004a12  da00              BGE      |L1.18966|
                  |L1.18964|
004a14  801c              STRH     r4,[r3,#0]            ;6937
                  |L1.18966|
;;;6942   	}
;;;6943   }
004a16  bd10              POP      {r4,pc}
                  |L1.18968|
004a18  4291              CMP      r1,r2                 ;6941
004a1a  dc03              BGT      |L1.18980|
                  |L1.18972|
004a1c  2801              CMP      r0,#1                 ;6941
004a1e  d1fa              BNE      |L1.18966|
004a20  4291              CMP      r1,r2                 ;6941
004a22  daf8              BGE      |L1.18966|
                  |L1.18980|
004a24  801c              STRH     r4,[r3,#0]            ;6941
004a26  bd10              POP      {r4,pc}
;;;6944   
                          ENDP

                  bps_drv PROC
;;;6945   //-----------------------------------------------
;;;6946   void bps_drv(char in)
004a28  e92d41f0          PUSH     {r4-r8,lr}
;;;6947   {
004a2c  4606              MOV      r6,r0
;;;6948   char temp;
;;;6949   
;;;6950   if (bps[in]._device!=dSRC) return;
004a2e  eb0600c6          ADD      r0,r6,r6,LSL #3
004a32  498f              LDR      r1,|L1.19568|
004a34  eb001006          ADD      r0,r0,r6,LSL #4
004a38  f8112020          LDRB     r2,[r1,r0,LSL #2]
004a3c  2a03              CMP      r2,#3
004a3e  d17d              BNE      |L1.19260|
;;;6951   temp=bps[in]._flags_tm;
004a40  eb010480          ADD      r4,r1,r0,LSL #2
004a44  f8945042          LDRB     r5,[r4,#0x42]
;;;6952   if(temp&(1<<AV_T))
004a48  07a8              LSLS     r0,r5,#30
004a4a  d517              BPL      |L1.19068|
;;;6953   	{
;;;6954   	if(bps[in]._temp_av_cnt<1200) 
004a4c  f9b41046          LDRSH    r1,[r4,#0x46]
004a50  f44f6296          MOV      r2,#0x4b0
004a54  4291              CMP      r1,r2
004a56  da22              BGE      |L1.19102|
;;;6955   		{
;;;6956   		bps[in]._temp_av_cnt++;
004a58  f1010101          ADD      r1,r1,#1
004a5c  b208              SXTH     r0,r1
004a5e  f8a40046          STRH     r0,[r4,#0x46]
;;;6957   		if(bps[in]._temp_av_cnt>=1200)
004a62  4290              CMP      r0,r2
004a64  db1b              BLT      |L1.19102|
;;;6958   			{
;;;6959   			bps[in]._temp_av_cnt=1200;
004a66  f8a42046          STRH     r2,[r4,#0x46]
;;;6960   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004a6a  7860              LDRB     r0,[r4,#1]
004a6c  07c0              LSLS     r0,r0,#31
004a6e  d116              BNE      |L1.19102|
004a70  2201              MOVS     r2,#1
004a72  2100              MOVS     r1,#0
004a74  4630              MOV      r0,r6
004a76  f7fffffe          BL       avar_bps_hndl
004a7a  e010              B        |L1.19102|
                  |L1.19068|
;;;6961   			}
;;;6962   		}
;;;6963   	}
;;;6964   
;;;6965   else if(!(temp&(1<<AV_T)))
;;;6966   	{
;;;6967   	if(bps[in]._temp_av_cnt) 
004a7c  f9b41046          LDRSH    r1,[r4,#0x46]
004a80  b169              CBZ      r1,|L1.19102|
;;;6968   		{
;;;6969   		bps[in]._temp_av_cnt--;
004a82  f1a10101          SUB      r1,r1,#1
004a86  b208              SXTH     r0,r1
004a88  f8a40046          STRH     r0,[r4,#0x46]
;;;6970   		if(!bps[in]._temp_av_cnt)
004a8c  b938              CBNZ     r0,|L1.19102|
;;;6971   			{
;;;6972   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004a8e  7860              LDRB     r0,[r4,#1]
004a90  07c0              LSLS     r0,r0,#31
004a92  d004              BEQ      |L1.19102|
004a94  2200              MOVS     r2,#0
004a96  4611              MOV      r1,r2
004a98  4630              MOV      r0,r6
004a9a  f7fffffe          BL       avar_bps_hndl
                  |L1.19102|
;;;6973   			}
;;;6974   		} 	
;;;6975   
;;;6976   	}
;;;6977   
;;;6978   if((temp&(1<<AVUMAX)))
004a9e  0728              LSLS     r0,r5,#28
;;;6979   	{
;;;6980   	if(bps[in]._umax_av_cnt<10) 
;;;6981   		{
;;;6982   		bps[in]._umax_av_cnt++;
;;;6983   		if(bps[in]._umax_av_cnt>=10)
;;;6984   			{ 
;;;6985   			bps[in]._umax_av_cnt=10;
004aa0  f04f080a          MOV      r8,#0xa
004aa4  f04f0700          MOV      r7,#0                 ;6960
004aa8  d518              BPL      |L1.19164|
004aaa  f9b41048          LDRSH    r1,[r4,#0x48]         ;6980
004aae  290a              CMP      r1,#0xa               ;6980
004ab0  da29              BGE      |L1.19206|
004ab2  f1010101          ADD      r1,r1,#1              ;6982
004ab6  b208              SXTH     r0,r1                 ;6982
004ab8  f8a40048          STRH     r0,[r4,#0x48]         ;6982
004abc  280a              CMP      r0,#0xa               ;6983
004abe  db22              BLT      |L1.19206|
004ac0  f8a48048          STRH     r8,[r4,#0x48]
;;;6986   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004ac4  7860              LDRB     r0,[r4,#1]
004ac6  0780              LSLS     r0,r0,#30
004ac8  d404              BMI      |L1.19156|
004aca  2201              MOVS     r2,#1
004acc  4611              MOV      r1,r2
004ace  4630              MOV      r0,r6
004ad0  f7fffffe          BL       avar_bps_hndl
                  |L1.19156|
;;;6987   			apv_start(in);
004ad4  4630              MOV      r0,r6
004ad6  f7fffffe          BL       apv_start
004ada  e014              B        |L1.19206|
                  |L1.19164|
;;;6988   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6989   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6990   				{
;;;6991   				apv_cnt[in,0]=APV_INIT;
;;;6992   				apv_cnt[in,1]=APV_INIT;
;;;6993   				apv_cnt[in,2]=APV_INIT;
;;;6994   				apv_flags[in]=afOFF;
;;;6995   				}				*/
;;;6996   						
;;;6997   			}
;;;6998   		} 
;;;6999   	}		
;;;7000   else if(!(temp&(1<<AVUMAX)))
;;;7001   	{
;;;7002   	if(bps[in]._umax_av_cnt>0) 
004adc  f9b41048          LDRSH    r1,[r4,#0x48]
004ae0  2900              CMP      r1,#0
004ae2  dd0d              BLE      |L1.19200|
;;;7003   		{
;;;7004   		bps[in]._umax_av_cnt--;
004ae4  f1a10101          SUB      r1,r1,#1
004ae8  b208              SXTH     r0,r1
004aea  f8a40048          STRH     r0,[r4,#0x48]
;;;7005   		if(bps[in]._umax_av_cnt==0)
004aee  b950              CBNZ     r0,|L1.19206|
;;;7006   			{
;;;7007   			bps[in]._umax_av_cnt=0;
;;;7008   			avar_bps_hndl(in,1,0);
004af0  f04f0200          MOV      r2,#0
004af4  f04f0101          MOV      r1,#1
004af8  4630              MOV      r0,r6
004afa  f7fffffe          BL       avar_bps_hndl
004afe  e002              B        |L1.19206|
                  |L1.19200|
;;;7009   			//apv_stop(in);
;;;7010   	 //		apv_cnt[in,0]=0;
;;;7011   	//		apv_cnt[in,1]=0;
;;;7012   	 //		apv_cnt[in,2]=0;			
;;;7013   			}
;;;7014   		}
;;;7015   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004b00  da01              BGE      |L1.19206|
004b02  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19206|
;;;7016   	}
;;;7017   
;;;7018   if(temp&(1<<AVUMIN))
004b06  06e8              LSLS     r0,r5,#27
004b08  d519              BPL      |L1.19262|
;;;7019   	{
;;;7020   	if(bps[in]._umin_av_cnt<10) 
004b0a  f9b4104a          LDRSH    r1,[r4,#0x4a]
004b0e  290a              CMP      r1,#0xa
004b10  da23              BGE      |L1.19290|
;;;7021   		{
;;;7022   		bps[in]._umin_av_cnt++;
004b12  f1010101          ADD      r1,r1,#1
004b16  b208              SXTH     r0,r1
004b18  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7023   		if(bps[in]._umin_av_cnt>=10)
004b1c  280a              CMP      r0,#0xa
004b1e  db1c              BLT      |L1.19290|
;;;7024   			{ 
;;;7025   			bps[in]._umin_av_cnt=10;
004b20  f8a4804a          STRH     r8,[r4,#0x4a]
;;;7026   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b24  7860              LDRB     r0,[r4,#1]
004b26  0740              LSLS     r0,r0,#29
004b28  d404              BMI      |L1.19252|
004b2a  2201              MOVS     r2,#1
004b2c  2102              MOVS     r1,#2
004b2e  4630              MOV      r0,r6
004b30  f7fffffe          BL       avar_bps_hndl
                  |L1.19252|
;;;7027   			apv_start(in);
004b34  4630              MOV      r0,r6
004b36  f7fffffe          BL       apv_start
004b3a  e00e              B        |L1.19290|
                  |L1.19260|
004b3c  e0b1              B        |L1.19618|
                  |L1.19262|
;;;7028   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7029   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7030   				{
;;;7031   				apv_cnt[in,0]=APV_INIT;
;;;7032   				apv_cnt[in,1]=APV_INIT;
;;;7033   				apv_cnt[in,2]=APV_INIT;
;;;7034   				apv_flags[in]=afOFF;
;;;7035   				}*/				
;;;7036   			}
;;;7037   		} 
;;;7038   	}	
;;;7039   	
;;;7040   else if(!(temp&(1<<AVUMIN)))
;;;7041   	{
;;;7042   	if(bps[in]._umin_av_cnt) 
004b3e  f9b4004a          LDRSH    r0,[r4,#0x4a]
004b42  b150              CBZ      r0,|L1.19290|
;;;7043   		{
;;;7044   		bps[in]._umin_av_cnt--;
004b44  f1a00001          SUB      r0,r0,#1
004b48  b200              SXTH     r0,r0
004b4a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7045   		if(bps[in]._umin_av_cnt==0)
004b4e  b920              CBNZ     r0,|L1.19290|
;;;7046   			{
;;;7047   			bps[in]._umin_av_cnt=0;
;;;7048   			avar_bps_hndl(in,2,0);
004b50  2200              MOVS     r2,#0
004b52  2102              MOVS     r1,#2
004b54  4630              MOV      r0,r6
004b56  f7fffffe          BL       avar_bps_hndl
                  |L1.19290|
;;;7049   			//apv_stop(in);
;;;7050   		//	apv_cnt[in,0]=0;
;;;7051   		//	apv_cnt[in,1]=0;
;;;7052   		//	apv_cnt[in,2]=0;
;;;7053   			}
;;;7054   		}
;;;7055   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;7056   	}
;;;7057   
;;;7058   if((bps[in]._Uii<(UB20-DU)))
004b5a  4846              LDR      r0,|L1.19572|
004b5c  69e1              LDR      r1,[r4,#0x1c]
004b5e  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004b62  4845              LDR      r0,|L1.19576|
004b64  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004b68  1a10              SUBS     r0,r2,r0
004b6a  4281              CMP      r1,r0
004b6c  da1d              BGE      |L1.19370|
;;;7059   	{
;;;7060   	if(bps[in]._state==bsWRK)
004b6e  78a0              LDRB     r0,[r4,#2]
004b70  2801              CMP      r0,#1
004b72  d128              BNE      |L1.19398|
;;;7061   		{
;;;7062   		if(bps[in]._umin_av_cnt_uku<300) 
004b74  f9b4004c          LDRSH    r0,[r4,#0x4c]
004b78  f44f7196          MOV      r1,#0x12c
004b7c  4288              CMP      r0,r1
004b7e  da11              BGE      |L1.19364|
;;;7063   			{
;;;7064   			bps[in]._umin_av_cnt_uku++;
004b80  f1000001          ADD      r0,r0,#1
004b84  b200              SXTH     r0,r0
004b86  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7065   			if(bps[in]._umin_av_cnt_uku>=300)
004b8a  4288              CMP      r0,r1
004b8c  db1b              BLT      |L1.19398|
;;;7066   				{ 
;;;7067   				bps[in]._umin_av_cnt_uku=300;
004b8e  f8a4104c          STRH     r1,[r4,#0x4c]
;;;7068   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b92  7860              LDRB     r0,[r4,#1]
004b94  0740              LSLS     r0,r0,#29
004b96  d416              BMI      |L1.19398|
004b98  2201              MOVS     r2,#1
004b9a  2102              MOVS     r1,#2
004b9c  4630              MOV      r0,r6
004b9e  f7fffffe          BL       avar_bps_hndl
004ba2  e010              B        |L1.19398|
                  |L1.19364|
;;;7069   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7070   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7071   					{
;;;7072   					apv_cnt[in,0]=APV_INIT;
;;;7073   					apv_cnt[in,1]=APV_INIT;
;;;7074   					apv_cnt[in,2]=APV_INIT;
;;;7075   					apv_flags[in]=afOFF;
;;;7076   					}*/				
;;;7077   				}
;;;7078   			}
;;;7079   		else
;;;7080   			{
;;;7081   			bps[in]._umin_av_cnt_uku=0;
004ba4  f8a4704c          STRH     r7,[r4,#0x4c]
004ba8  e00d              B        |L1.19398|
                  |L1.19370|
;;;7082   			} 
;;;7083   		}
;;;7084   	}	
;;;7085   	
;;;7086   else if(bps[in]._Uii>=(UB20-DU))
;;;7087   	{
;;;7088   	if(bps[in]._umin_av_cnt_uku) 
004baa  f9b4004c          LDRSH    r0,[r4,#0x4c]
004bae  b150              CBZ      r0,|L1.19398|
;;;7089   		{
;;;7090   		bps[in]._umin_av_cnt_uku--;
004bb0  f1a00001          SUB      r0,r0,#1
004bb4  b200              SXTH     r0,r0
004bb6  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7091   		if(bps[in]._umin_av_cnt_uku==0)
004bba  b920              CBNZ     r0,|L1.19398|
;;;7092   			{
;;;7093   			bps[in]._umin_av_cnt_uku=0;
;;;7094   			avar_bps_hndl(in,2,0);
004bbc  2200              MOVS     r2,#0
004bbe  2102              MOVS     r1,#2
004bc0  4630              MOV      r0,r6
004bc2  f7fffffe          BL       avar_bps_hndl
                  |L1.19398|
;;;7095   		//	apv_cnt[in,0]=0;
;;;7096   		//	apv_cnt[in,1]=0;
;;;7097   		//	apv_cnt[in,2]=0;
;;;7098   			}
;;;7099   		}
;;;7100   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;7101   	}
;;;7102   
;;;7103   //bps[in]._state=bsOFF;
;;;7104   
;;;7105   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004bc6  7860              LDRB     r0,[r4,#1]
004bc8  0700              LSLS     r0,r0,#28
004bca  d003              BEQ      |L1.19412|
004bcc  f04f0004          MOV      r0,#4
004bd0  70a0              STRB     r0,[r4,#2]
004bd2  e017              B        |L1.19460|
                  |L1.19412|
;;;7106   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004bd4  4829              LDR      r0,|L1.19580|
004bd6  7800              LDRB     r0,[r0,#0]  ; net_av
004bd8  b130              CBZ      r0,|L1.19432|
004bda  78e0              LDRB     r0,[r4,#3]
004bdc  2814              CMP      r0,#0x14
004bde  d903              BLS      |L1.19432|
;;;7107   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004be0  f04f0005          MOV      r0,#5
004be4  70a0              STRB     r0,[r4,#2]
004be6  e00d              B        |L1.19460|
                  |L1.19432|
;;;7108   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004be8  f8940042          LDRB     r0,[r4,#0x42]
004bec  0680              LSLS     r0,r0,#26
004bee  d503              BPL      |L1.19448|
004bf0  f04f0002          MOV      r0,#2
004bf4  70a0              STRB     r0,[r4,#2]
004bf6  e005              B        |L1.19460|
                  |L1.19448|
;;;7109   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004bf8  78e0              LDRB     r0,[r4,#3]
004bfa  2814              CMP      r0,#0x14
004bfc  d202              BCS      |L1.19460|
004bfe  f04f0001          MOV      r0,#1
004c02  70a0              STRB     r0,[r4,#2]
                  |L1.19460|
;;;7110   
;;;7111   
;;;7112   
;;;7113   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;7114   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;7115   //else bps[0]._state=ssNOT;
;;;7116   
;;;7117   //bps[in]._is_ready=0;
;;;7118   //bps[in]._is_wrk=0;
;;;7119   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;7120   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;7121   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;7122   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;7123   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7124   //	{
;;;7125   //	bps[in]._flags_bp='B';// заблокирован
;;;7126   //	bps[in]._is_ready=1;
;;;7127   //	}
;;;7128   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7129   //     {
;;;7130   //     bps[in]._flags_bp='W';// работает
;;;7131   //     bps[in]._is_ready=1;
;;;7132   //     bps[in]._is_wrk=1;
;;;7133        
;;;7134   //     }
;;;7135   //else bps[in]._is_ready=1;     
;;;7136   
;;;7137   
;;;7138   
;;;7139   
;;;7140   
;;;7141   /*
;;;7142   bps[in]._flags_tu&=BIN8(11111110);
;;;7143   if(bps[in]._ist_blok_cnt)
;;;7144   	{
;;;7145   	bps[in]._ist_blok_cnt--;
;;;7146   	bps[in]._flags_tu|=BIN8(1);
;;;7147   	}
;;;7148   
;;;7149   	   */ 
;;;7150   
;;;7151   //Пересброс БПСа при потере связи
;;;7152   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004c04  78e0              LDRB     r0,[r4,#3]
004c06  280a              CMP      r0,#0xa
004c08  d306              BCC      |L1.19480|
004c0a  f894002c          LDRB     r0,[r4,#0x2c]
004c0e  f0400080          ORR      r0,r0,#0x80
004c12  f884002c          STRB     r0,[r4,#0x2c]
004c16  e005              B        |L1.19492|
                  |L1.19480|
;;;7153   else bps[in]._flags_tu&=BIN8(1111111);
004c18  f894002c          LDRB     r0,[r4,#0x2c]
004c1c  f000007f          AND      r0,r0,#0x7f
004c20  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19492|
;;;7154   
;;;7155   if(avar_bps_reset_cnt) 
004c24  4816              LDR      r0,|L1.19584|
004c26  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004c2a  b139              CBZ      r1,|L1.19516|
;;;7156   	{
;;;7157   	bps[in]._flags_tu|=BIN8(10);
004c2c  f894102c          LDRB     r1,[r4,#0x2c]
004c30  f0410102          ORR      r1,r1,#2
004c34  f884102c          STRB     r1,[r4,#0x2c]
;;;7158   	bps[in]._av=0;
004c38  7067              STRB     r7,[r4,#1]
004c3a  e029              B        |L1.19600|
                  |L1.19516|
;;;7159   	}
;;;7160   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004c3c  f8941062          LDRB     r1,[r4,#0x62]
004c40  b301              CBZ      r1,|L1.19588|
004c42  f894102c          LDRB     r1,[r4,#0x2c]
004c46  f0410102          ORR      r1,r1,#2
004c4a  f884102c          STRB     r1,[r4,#0x2c]
004c4e  e01f              B        |L1.19600|
                  |L1.19536|
                          DCD      ica_u_necc
                  |L1.19540|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19544|
                          DCD      ICA_CH
                  |L1.19548|
                          DCD      TBAT
                  |L1.19552|
                          DCD      ipsBlckStat
                  |L1.19556|
                          DCD      ipsBlckSrc
                  |L1.19560|
                          DCD      ipsBlckLog
                  |L1.19564|
                          DCD      ||.bss||+0x40c
                  |L1.19568|
                          DCD      bps
                  |L1.19572|
                          DCD      UB20
                  |L1.19576|
                          DCD      ||DU||
                  |L1.19580|
                          DCD      net_av
                  |L1.19584|
                          DCD      ||area_number.26||
                  |L1.19588|
;;;7161   else bps[in]._flags_tu&=BIN8(11111101);
004c84  f894102c          LDRB     r1,[r4,#0x2c]
004c88  f00101fd          AND      r1,r1,#0xfd
004c8c  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19600|
;;;7162   	
;;;7163   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004c90  f9b41054          LDRSH    r1,[r4,#0x54]
004c94  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004c98  4408              ADD      r0,r0,r1
004c9a  6320              STR      r0,[r4,#0x30]
;;;7164   bps[in]._vol_i=1000;
004c9c  f44f707a          MOV      r0,#0x3e8
004ca0  6360              STR      r0,[r4,#0x34]
                  |L1.19618|
;;;7165   //bps[0]._vol_u=500;
;;;7166   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7167   }
004ca2  e8bd81f0          POP      {r4-r8,pc}
;;;7168   
                          ENDP

                  avt_hndl PROC
;;;7169   //-----------------------------------------------
;;;7170   void avt_hndl(void)
004ca6  b570              PUSH     {r4-r6,lr}
;;;7171   {
;;;7172   char i;
;;;7173   for(i=0;i<12;i++)
004ca8  f04f0000          MOV      r0,#0
;;;7174   	{
;;;7175   	if(eb2_data_short[6]&(1<<i))
004cac  49ff              LDR      r1,|L1.20652|
004cae  f04f0401          MOV      r4,#1
004cb2  4603              MOV      r3,r0                 ;7173
004cb4  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;7176   		{
;;;7177   		avt_stat[i]=avtON;
004cb8  4dfd              LDR      r5,|L1.20656|
                  |L1.19642|
004cba  fa04f100          LSL      r1,r4,r0              ;7175
004cbe  420a              TST      r2,r1                 ;7175
004cc0  d001              BEQ      |L1.19654|
004cc2  542c              STRB     r4,[r5,r0]
004cc4  e000              B        |L1.19656|
                  |L1.19654|
;;;7178   		}
;;;7179   	else avt_stat[i]=avtOFF;
004cc6  542b              STRB     r3,[r5,r0]
                  |L1.19656|
004cc8  f1000001          ADD      r0,r0,#1              ;7173
004ccc  b2c0              UXTB     r0,r0                 ;7173
004cce  280c              CMP      r0,#0xc               ;7173
004cd0  d3f3              BCC      |L1.19642|
;;;7180   	}
;;;7181   
;;;7182   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004cd2  4ef8              LDR      r6,|L1.20660|
004cd4  7828              LDRB     r0,[r5,#0]  ; avt_stat
004cd6  4cf8              LDR      r4,|L1.20664|
004cd8  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004cda  4281              CMP      r1,r0
004cdc  d00b              BEQ      |L1.19702|
004cde  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ce2  2901              CMP      r1,#1
004ce4  db07              BLT      |L1.19702|
;;;7183   	{
;;;7184   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004ce6  2801              CMP      r0,#1
004ce8  d07e              BEQ      |L1.19944|
;;;7185   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004cea  2300              MOVS     r3,#0
004cec  2201              MOVS     r2,#1
004cee  210b              MOVS     r1,#0xb
004cf0  a0f2              ADR      r0,|L1.20668|
004cf2  f7fffffe          BL       snmp_trap_send
                  |L1.19702|
;;;7186   	}
;;;7187   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004cf6  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004cf8  7868              LDRB     r0,[r5,#1]  ; avt_stat
004cfa  4281              CMP      r1,r0
004cfc  d00b              BEQ      |L1.19734|
004cfe  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d02  2902              CMP      r1,#2
004d04  db07              BLT      |L1.19734|
;;;7188   	{
;;;7189   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004d06  2801              CMP      r0,#1
004d08  d06f              BEQ      |L1.19946|
;;;7190   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004d0a  2300              MOVS     r3,#0
004d0c  2202              MOVS     r2,#2
004d0e  210b              MOVS     r1,#0xb
004d10  a0ef              ADR      r0,|L1.20688|
004d12  f7fffffe          BL       snmp_trap_send
                  |L1.19734|
;;;7191   	}
;;;7192   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004d16  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004d18  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004d1a  4281              CMP      r1,r0
004d1c  d00b              BEQ      |L1.19766|
004d1e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d22  2903              CMP      r1,#3
004d24  db07              BLT      |L1.19766|
;;;7193   	{
;;;7194   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004d26  2801              CMP      r0,#1
004d28  d072              BEQ      |L1.19984|
;;;7195   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004d2a  2300              MOVS     r3,#0
004d2c  2203              MOVS     r2,#3
004d2e  210b              MOVS     r1,#0xb
004d30  a0ec              ADR      r0,|L1.20708|
004d32  f7fffffe          BL       snmp_trap_send
                  |L1.19766|
;;;7196   	}
;;;7197   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004d36  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004d38  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004d3a  4281              CMP      r1,r0
004d3c  d00b              BEQ      |L1.19798|
004d3e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d42  2904              CMP      r1,#4
004d44  db07              BLT      |L1.19798|
;;;7198   	{
;;;7199   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004d46  2801              CMP      r0,#1
004d48  d079              BEQ      |L1.20030|
;;;7200   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004d4a  2300              MOVS     r3,#0
004d4c  2204              MOVS     r2,#4
004d4e  210b              MOVS     r1,#0xb
004d50  a0e9              ADR      r0,|L1.20728|
004d52  f7fffffe          BL       snmp_trap_send
                  |L1.19798|
;;;7201   	}
;;;7202   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004d56  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004d58  7928              LDRB     r0,[r5,#4]  ; avt_stat
004d5a  4281              CMP      r1,r0
004d5c  d00b              BEQ      |L1.19830|
004d5e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d62  2905              CMP      r1,#5
004d64  db07              BLT      |L1.19830|
;;;7203   	{
;;;7204   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004d66  2801              CMP      r0,#1
004d68  d071              BEQ      |L1.20046|
;;;7205   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004d6a  2300              MOVS     r3,#0
004d6c  2205              MOVS     r2,#5
004d6e  210b              MOVS     r1,#0xb
004d70  a0e6              ADR      r0,|L1.20748|
004d72  f7fffffe          BL       snmp_trap_send
                  |L1.19830|
;;;7206   	}
;;;7207   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004d76  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004d78  7968              LDRB     r0,[r5,#5]  ; avt_stat
004d7a  4281              CMP      r1,r0
004d7c  d00b              BEQ      |L1.19862|
004d7e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d82  2906              CMP      r1,#6
004d84  db07              BLT      |L1.19862|
;;;7208   	{
;;;7209   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004d86  2801              CMP      r0,#1
004d88  d068              BEQ      |L1.20060|
;;;7210   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004d8a  2300              MOVS     r3,#0
004d8c  2206              MOVS     r2,#6
004d8e  210b              MOVS     r1,#0xb
004d90  a0e3              ADR      r0,|L1.20768|
004d92  f7fffffe          BL       snmp_trap_send
                  |L1.19862|
;;;7211   	}
;;;7212   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004d96  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004d98  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004d9a  4281              CMP      r1,r0
004d9c  d00b              BEQ      |L1.19894|
004d9e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004da2  2907              CMP      r1,#7
004da4  db07              BLT      |L1.19894|
;;;7213   	{
;;;7214   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004da6  2801              CMP      r0,#1
004da8  d05f              BEQ      |L1.20074|
;;;7215   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004daa  2300              MOVS     r3,#0
004dac  2207              MOVS     r2,#7
004dae  210b              MOVS     r1,#0xb
004db0  a0e0              ADR      r0,|L1.20788|
004db2  f7fffffe          BL       snmp_trap_send
                  |L1.19894|
;;;7216   	}
;;;7217   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004db6  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004db8  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004dba  4281              CMP      r1,r0
004dbc  d00b              BEQ      |L1.19926|
004dbe  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dc2  2908              CMP      r1,#8
004dc4  db07              BLT      |L1.19926|
;;;7218   	{
;;;7219   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004dc6  2801              CMP      r0,#1
004dc8  d056              BEQ      |L1.20088|
;;;7220   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004dca  2300              MOVS     r3,#0
004dcc  2208              MOVS     r2,#8
004dce  210b              MOVS     r1,#0xb
004dd0  a0dd              ADR      r0,|L1.20808|
004dd2  f7fffffe          BL       snmp_trap_send
                  |L1.19926|
;;;7221   	}
;;;7222   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004dd6  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004dd8  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004dda  4281              CMP      r1,r0
004ddc  d00e              BEQ      |L1.19964|
004dde  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004de2  2909              CMP      r1,#9
004de4  db0a              BLT      |L1.19964|
;;;7223   	{
;;;7224   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004de6  e001              B        |L1.19948|
                  |L1.19944|
004de8  e013              B        |L1.19986|
                  |L1.19946|
004dea  e019              B        |L1.20000|
                  |L1.19948|
004dec  2801              CMP      r0,#1
004dee  d04a              BEQ      |L1.20102|
;;;7225   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004df0  2300              MOVS     r3,#0
004df2  2209              MOVS     r2,#9
004df4  210b              MOVS     r1,#0xb
004df6  a0d9              ADR      r0,|L1.20828|
004df8  f7fffffe          BL       snmp_trap_send
                  |L1.19964|
;;;7226   	}
;;;7227   
;;;7228   for(i=0;i<12;i++)
004dfc  f04f0000          MOV      r0,#0
                  |L1.19968|
;;;7229   	{
;;;7230   	avt_stat_old[i]=avt_stat[i];
004e00  5c29              LDRB     r1,[r5,r0]
004e02  5431              STRB     r1,[r6,r0]
004e04  f1000001          ADD      r0,r0,#1              ;7228
004e08  b2c0              UXTB     r0,r0                 ;7228
004e0a  280c              CMP      r0,#0xc               ;7228
004e0c  d3f8              BCC      |L1.19968|
                  |L1.19982|
;;;7231   	}
;;;7232   }
004e0e  bd70              POP      {r4-r6,pc}
                  |L1.19984|
004e10  e00e              B        |L1.20016|
                  |L1.19986|
004e12  2301              MOVS     r3,#1                 ;7184
004e14  461a              MOV      r2,r3                 ;7184
004e16  210b              MOVS     r1,#0xb               ;7184
004e18  a0d5              ADR      r0,|L1.20848|
004e1a  f7fffffe          BL       snmp_trap_send
004e1e  e76a              B        |L1.19702|
                  |L1.20000|
004e20  2301              MOVS     r3,#1                 ;7189
004e22  2202              MOVS     r2,#2                 ;7189
004e24  210b              MOVS     r1,#0xb               ;7189
004e26  a0d7              ADR      r0,|L1.20868|
004e28  f7fffffe          BL       snmp_trap_send
004e2c  e773              B        |L1.19734|
004e2e  e006              B        |L1.20030|
                  |L1.20016|
004e30  2301              MOVS     r3,#1                 ;7194
004e32  2203              MOVS     r2,#3                 ;7194
004e34  210b              MOVS     r1,#0xb               ;7194
004e36  a0d8              ADR      r0,|L1.20888|
004e38  f7fffffe          BL       snmp_trap_send
004e3c  e77b              B        |L1.19766|
                  |L1.20030|
004e3e  2301              MOVS     r3,#1                 ;7199
004e40  2204              MOVS     r2,#4                 ;7199
004e42  210b              MOVS     r1,#0xb               ;7199
004e44  a0d9              ADR      r0,|L1.20908|
004e46  f7fffffe          BL       snmp_trap_send
004e4a  e784              B        |L1.19798|
004e4c  e7ff              B        |L1.20046|
                  |L1.20046|
004e4e  2301              MOVS     r3,#1                 ;7204
004e50  2205              MOVS     r2,#5                 ;7204
004e52  210b              MOVS     r1,#0xb               ;7204
004e54  a0da              ADR      r0,|L1.20928|
004e56  f7fffffe          BL       snmp_trap_send
004e5a  e78c              B        |L1.19830|
                  |L1.20060|
004e5c  2301              MOVS     r3,#1                 ;7209
004e5e  2206              MOVS     r2,#6                 ;7209
004e60  210b              MOVS     r1,#0xb               ;7209
004e62  a0dc              ADR      r0,|L1.20948|
004e64  f7fffffe          BL       snmp_trap_send
004e68  e795              B        |L1.19862|
                  |L1.20074|
004e6a  2301              MOVS     r3,#1                 ;7214
004e6c  2207              MOVS     r2,#7                 ;7214
004e6e  210b              MOVS     r1,#0xb               ;7214
004e70  a0dd              ADR      r0,|L1.20968|
004e72  f7fffffe          BL       snmp_trap_send
004e76  e79e              B        |L1.19894|
                  |L1.20088|
004e78  2301              MOVS     r3,#1                 ;7219
004e7a  2208              MOVS     r2,#8                 ;7219
004e7c  210b              MOVS     r1,#0xb               ;7219
004e7e  a0df              ADR      r0,|L1.20988|
004e80  f7fffffe          BL       snmp_trap_send
004e84  e7a7              B        |L1.19926|
                  |L1.20102|
004e86  2301              MOVS     r3,#1                 ;7224
004e88  2209              MOVS     r2,#9                 ;7224
004e8a  210b              MOVS     r1,#0xb               ;7224
004e8c  a0e0              ADR      r0,|L1.21008|
004e8e  f7fffffe          BL       snmp_trap_send
004e92  e7b3              B        |L1.19964|
;;;7233   
                          ENDP

                  bat_hndl PROC
;;;7234   //-----------------------------------------------
;;;7235   void bat_hndl(void)
004e94  b570              PUSH     {r4-r6,lr}
;;;7236   {
;;;7237   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7238   	{
;;;7239   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7240   		{
;;;7241   		char i;
;;;7242   		for(i=0;i<2;i++)
;;;7243   			{
;;;7244   			if(mess_data[1]&(1<<i))
;;;7245   				{
;;;7246   				bat[i]._cnt_to_block=0;
;;;7247        			bat[i]._rel_stat=0;
;;;7248        			}
;;;7249   			}
;;;7250   		}
;;;7251   	}
;;;7252   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7253   	{		
;;;7254   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7255   		{
;;;7256   		char i;
;;;7257   		for(i=0;i<2;i++)
;;;7258   			{
;;;7259   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7260   				{
;;;7261   				bat[i]._cnt_to_block=20;
;;;7262   				bat[i]._rel_stat=1;
;;;7263        			}
;;;7264   			}
;;;7265   		
;;;7266   		}		
;;;7267   	}*/
;;;7268   
;;;7269   if(mess_find_unvol(MESS2BAT_HNDL))
004e96  20c8              MOVS     r0,#0xc8
004e98  f7fffffe          BL       mess_find_unvol
;;;7270   	{ 
;;;7271   	char i;
;;;7272   	
;;;7273   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7274   		{
;;;7275   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7276   			{
;;;7277   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004e9c  49e1              LDR      r1,|L1.21028|
004e9e  2200              MOVS     r2,#0                 ;7275
004ea0  b3a8              CBZ      r0,|L1.20238|
004ea2  4be1              LDR      r3,|L1.21032|
;;;7278   			}
;;;7279   		}
;;;7280   
;;;7281   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7282   		{
;;;7283   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7284   			{
;;;7285   			if(mess_data[1]&(1<<i))
004ea4  2401              MOVS     r4,#1
004ea6  6818              LDR      r0,[r3,#0]            ;7273  ; mess_data
004ea8  28c9              CMP      r0,#0xc9              ;7273
004eaa  d01c              BEQ      |L1.20198|
004eac  28ca              CMP      r0,#0xca              ;7281
004eae  d02f              BEQ      |L1.20240|
;;;7286   				{
;;;7287   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7288   				}
;;;7289   			else bat[i]._cnt_to_block=0;
;;;7290   			}
;;;7291   		}
;;;7292   	else 
;;;7293   	 	{
;;;7294   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004eb0  4610              MOV      r0,r2
                  |L1.20146|
;;;7295   			{
;;;7296   			bat[i]._cnt_to_block=0;
004eb2  eb000340          ADD      r3,r0,r0,LSL #1
004eb6  eb031300          ADD      r3,r3,r0,LSL #4
004eba  f8012023          STRB     r2,[r1,r3,LSL #2]
004ebe  f1000001          ADD      r0,r0,#1              ;7294
004ec2  b2c0              UXTB     r0,r0                 ;7294
004ec4  2802              CMP      r0,#2                 ;7294
004ec6  d3f4              BCC      |L1.20146|
                  |L1.20168|
;;;7297   			}
;;;7298   
;;;7299   		}
;;;7300   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004ec8  f04f0000          MOV      r0,#0
                  |L1.20172|
;;;7301   		{
;;;7302   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004ecc  eb000340          ADD      r3,r0,r0,LSL #1
004ed0  eb031300          ADD      r3,r3,r0,LSL #4
004ed4  f8115023          LDRB     r5,[r1,r3,LSL #2]
004ed8  2d14              CMP      r5,#0x14
004eda  d939              BLS      |L1.20304|
004edc  eb010383          ADD      r3,r1,r3,LSL #2
004ee0  f883403c          STRB     r4,[r3,#0x3c]
004ee4  e038              B        |L1.20312|
                  |L1.20198|
004ee6  f04f0000          MOV      r0,#0                 ;7275
                  |L1.20202|
004eea  eb000340          ADD      r3,r0,r0,LSL #1       ;7277
004eee  eb031500          ADD      r5,r3,r0,LSL #4       ;7277
004ef2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7277
004ef6  2b32              CMP      r3,#0x32              ;7277
004ef8  d203              BCS      |L1.20226|
004efa  f1030301          ADD      r3,r3,#1              ;7277
004efe  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7277
                  |L1.20226|
004f02  f1000001          ADD      r0,r0,#1              ;7275
004f06  b2c0              UXTB     r0,r0                 ;7275
004f08  2802              CMP      r0,#2                 ;7275
004f0a  d3ee              BCC      |L1.20202|
004f0c  e7dc              B        |L1.20168|
                  |L1.20238|
004f0e  e029              B        |L1.20324|
                  |L1.20240|
004f10  f04f0000          MOV      r0,#0                 ;7283
004f14  685e              LDR      r6,[r3,#4]            ;7285
                  |L1.20246|
004f16  fa04f300          LSL      r3,r4,r0              ;7285
004f1a  421e              TST      r6,r3                 ;7285
004f1c  d00c              BEQ      |L1.20280|
004f1e  eb000340          ADD      r3,r0,r0,LSL #1       ;7287
004f22  eb031500          ADD      r5,r3,r0,LSL #4       ;7287
004f26  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7287
004f2a  2b32              CMP      r3,#0x32              ;7287
004f2c  d20a              BCS      |L1.20292|
004f2e  f1030301          ADD      r3,r3,#1              ;7287
004f32  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7287
004f36  e005              B        |L1.20292|
                  |L1.20280|
004f38  eb000340          ADD      r3,r0,r0,LSL #1       ;7289
004f3c  eb031300          ADD      r3,r3,r0,LSL #4       ;7289
004f40  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7289
                  |L1.20292|
004f44  f1000001          ADD      r0,r0,#1              ;7283
004f48  b2c0              UXTB     r0,r0                 ;7283
004f4a  2802              CMP      r0,#2                 ;7283
004f4c  d3e3              BCC      |L1.20246|
004f4e  e7bb              B        |L1.20168|
                  |L1.20304|
;;;7303   		else bat[i]._rel_stat=0;
004f50  eb010383          ADD      r3,r1,r3,LSL #2
004f54  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20312|
004f58  f1000001          ADD      r0,r0,#1              ;7300
004f5c  b2c0              UXTB     r0,r0                 ;7300
004f5e  2802              CMP      r0,#2                 ;7300
004f60  d3b4              BCC      |L1.20172|
;;;7304   		}
;;;7305   
;;;7306   	}
;;;7307   
;;;7308   else 
;;;7309   	{
;;;7310   	char i;
;;;7311   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7312   		{
;;;7313   		bat[i]._cnt_to_block=0;
;;;7314   		bat[i]._rel_stat=0;
;;;7315   		}
;;;7316   
;;;7317   	}
;;;7318   
;;;7319   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7320   	{
;;;7321   	if(PARAM_BAT_ON)
;;;7322   		{
;;;7323   		char i;
;;;7324   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7325   			{
;;;7326   			if(mess_data[1]&(1<<i))
;;;7327   				{
;;;7328   				bat[i]._cnt_to_block=0;
;;;7329   				bat[i]._rel_stat=0;
;;;7330   				}
;;;7331   			}
;;;7332   		}
;;;7333   	} */
;;;7334   }
004f62  e754              B        |L1.19982|
                  |L1.20324|
004f64  f04f0000          MOV      r0,#0                 ;7311
                  |L1.20328|
004f68  eb000340          ADD      r3,r0,r0,LSL #1       ;7313
004f6c  eb031300          ADD      r3,r3,r0,LSL #4       ;7313
004f70  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7313
004f74  eb010383          ADD      r3,r1,r3,LSL #2       ;7314
004f78  f883203c          STRB     r2,[r3,#0x3c]         ;7314
004f7c  f1000001          ADD      r0,r0,#1              ;7311
004f80  b2c0              UXTB     r0,r0                 ;7311
004f82  2802              CMP      r0,#2                 ;7311
004f84  d3f0              BCC      |L1.20328|
004f86  e742              B        |L1.19982|
;;;7335   
                          ENDP

                  bat_drv PROC
;;;7973   //-----------------------------------------------
;;;7974   void bat_drv(char in)
004f88  e92d4ffe          PUSH     {r1-r11,lr}
;;;7975   {
004f8c  4605              MOV      r5,r0
;;;7976   unsigned short /*tempUS,*/tempUS_;
;;;7977   unsigned long tempUL,tempUL_;
;;;7978   unsigned short b_zar;
;;;7979   //static unsigned short time_cnt[2];
;;;7980   
;;;7981   
;;;7982   
;;;7983   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004f8e  49a7              LDR      r1,|L1.21036|
004f90  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004f94  b118              CBZ      r0,|L1.20382|
004f96  f1a00001          SUB      r0,r0,#1
004f9a  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20382|
;;;7984   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004f9e  4aa3              LDR      r2,|L1.21036|
004fa0  1d12              ADDS     r2,r2,#4
004fa2  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004fa6  b118              CBZ      r0,|L1.20400|
004fa8  f1a00001          SUB      r0,r0,#1
004fac  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20400|
;;;7985   
;;;7986   
;;;7987   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004fb0  eb050045          ADD      r0,r5,r5,LSL #1
004fb4  4b9b              LDR      r3,|L1.21028|
004fb6  eb001005          ADD      r0,r0,r5,LSL #4
004fba  eb030480          ADD      r4,r3,r0,LSL #2
004fbe  4b9c              LDR      r3,|L1.21040|
004fc0  9002              STR      r0,[sp,#8]
004fc2  f9b40008          LDRSH    r0,[r4,#8]
004fc6  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004fca  2364              MOVS     r3,#0x64
004fcc  42b0              CMP      r0,r6
004fce  dd01              BLE      |L1.20436|
004fd0  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20436|
;;;7988   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004fd4  2800              CMP      r0,#0
004fd6  da01              BGE      |L1.20444|
004fd8  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20444|
;;;7989   
;;;7990   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7991        {
;;;7992        if(!cntrl_stat_blok_cnt_)
004fdc  4893              LDR      r0,|L1.21036|
004fde  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7990
004fe2  38b4              SUBS     r0,r0,#0xb4
004fe4  2700              MOVS     r7,#0
004fe6  b14b              CBZ      r3,|L1.20476|
004fe8  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7990
004fec  b133              CBZ      r3,|L1.20476|
004fee  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
004ff2  b1a3              CBZ      r3,|L1.20510|
;;;7993             {
;;;7994             cntrl_stat_blok_cnt_=600; 
;;;7995             cntrl_stat_blok_cnt_plus[in]=0;
;;;7996             cntrl_stat_blok_cnt_minus[in]=0;
;;;7997             }
;;;7998        else cntrl_stat_blok_cnt=3000;
004ff4  f64031b8          MOV      r1,#0xbb8
004ff8  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.20476|
;;;7999        }
;;;8000   cntrl_stat_blok_cnt=0;
004ffc  f8a07070          STRH     r7,[r0,#0x70]
;;;8001   
;;;8002   if(++(bat[in]._time_cnt)>=10)
005000  f894003e          LDRB     r0,[r4,#0x3e]
005004  1c40              ADDS     r0,r0,#1
005006  b2c0              UXTB     r0,r0
005008  f884003e          STRB     r0,[r4,#0x3e]
00500c  280a              CMP      r0,#0xa
00500e  d301              BCC      |L1.20500|
;;;8003   	{
;;;8004   	bat[in]._time_cnt=0;
005010  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20500|
;;;8005   	//bat[in]._zar_cnt++;
;;;8006   	}
;;;8007   
;;;8008   if(main_10Hz_cnt==50)
005014  4e87              LDR      r6,|L1.21044|
005016  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005018  2832              CMP      r0,#0x32
00501a  d009              BEQ      |L1.20528|
00501c  e017              B        |L1.20558|
                  |L1.20510|
00501e  f44f7316          MOV      r3,#0x258             ;7994
005022  f8a03072          STRH     r3,[r0,#0x72]         ;7994
005026  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7995
00502a  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7996
00502e  e7e5              B        |L1.20476|
                  |L1.20528|
;;;8009   	{
;;;8010   	if(!bat[in]._rel_stat)
005030  f894003c          LDRB     r0,[r4,#0x3c]
005034  b958              CBNZ     r0,|L1.20558|
;;;8011   		{
;;;8012   		
;;;8013   		if(bat[in]._Ub<80) 
005036  f9b40002          LDRSH    r0,[r4,#2]
00503a  2850              CMP      r0,#0x50
00503c  da07              BGE      |L1.20558|
;;;8014   			{
;;;8015   			
;;;8016   			if(!(bat[in]._av&1))
00503e  f894003d          LDRB     r0,[r4,#0x3d]
005042  07c0              LSLS     r0,r0,#31
005044  d103              BNE      |L1.20558|
;;;8017   				{
;;;8018   				avar_bat_hndl(in,1);
005046  2101              MOVS     r1,#1
005048  4628              MOV      r0,r5
00504a  f7fffffe          BL       avar_bat_hndl
                  |L1.20558|
;;;8019   				//if(in==0)plazma_bat++;
;;;8020   				}
;;;8021   			}				
;;;8022   
;;;8023   		}
;;;8024   	}
;;;8025   
;;;8026   if(main_10Hz_cnt>200)
00504e  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;8027   	{
;;;8028   	if(abs(bat[in]._Ib)>IKB) 
005052  4e79              LDR      r6,|L1.21048|
005054  28c8              CMP      r0,#0xc8              ;8026
005056  dd0f              BLE      |L1.20600|
005058  f9b40008          LDRSH    r0,[r4,#8]
00505c  f7fffffe          BL       abs
005060  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005064  4288              CMP      r0,r1
005066  dd07              BLE      |L1.20600|
;;;8029   		{
;;;8030   		if((bat[in]._av&1))avar_bat_hndl(in,0);
005068  f894003d          LDRB     r0,[r4,#0x3d]
00506c  07c0              LSLS     r0,r0,#31
00506e  d003              BEQ      |L1.20600|
005070  2100              MOVS     r1,#0
005072  4628              MOV      r0,r5
005074  f7fffffe          BL       avar_bat_hndl
                  |L1.20600|
;;;8031   		}
;;;8032   	}
;;;8033   
;;;8034   #ifdef APSENERGIA
;;;8035   //if(bat[in]._Ib>(-IKB))
;;;8036   
;;;8037   
;;;8038   #endif
;;;8039   
;;;8040   if(bat[in]._Ib>(-IKB))
005078  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
00507c  f9b40008          LDRSH    r0,[r4,#8]
005080  4249              RSBS     r1,r1,#0
005082  4288              CMP      r0,r1
005084  dd0e              BLE      |L1.20644|
;;;8041   	{
;;;8042   	if(bat[in]._cnt_wrk<10)
005086  7b60              LDRB     r0,[r4,#0xd]
005088  280a              CMP      r0,#0xa
00508a  d20c              BCS      |L1.20646|
;;;8043   		{
;;;8044   		bat[in]._cnt_wrk++;
00508c  f1000001          ADD      r0,r0,#1
005090  b2c0              UXTB     r0,r0
005092  7360              STRB     r0,[r4,#0xd]
;;;8045   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
005094  280a              CMP      r0,#0xa
005096  d307              BCC      |L1.20648|
005098  7ba0              LDRB     r0,[r4,#0xe]
00509a  2800              CMP      r0,#0
00509c  d004              BEQ      |L1.20648|
;;;8046   			{
;;;8047   			bat[in]._wrk=0;
00509e  73a7              STRB     r7,[r4,#0xe]
;;;8048   			//beep_init(0x7L,'O');
;;;8049   			//wrk_mem_hndl(0);
;;;8050   			wrk_mem_hndl(in);
0050a0  4628              MOV      r0,r5
0050a2  e0cb              B        |L1.21052|
                  |L1.20644|
0050a4  e0d1              B        |L1.21066|
                  |L1.20646|
0050a6  e0cc              B        |L1.21058|
                  |L1.20648|
0050a8  e111              B        |L1.21198|
0050aa  0000              DCW      0x0000
                  |L1.20652|
                          DCD      eb2_data_short
                  |L1.20656|
                          DCD      avt_stat
                  |L1.20660|
                          DCD      avt_stat_old
                  |L1.20664|
                          DCD      NUMAVT
                  |L1.20668|
0050bc  4176746f          DCB      "Avtomat #1 is OFF",0
0050c0  6d617420
0050c4  23312069
0050c8  73204f46
0050cc  4600    
0050ce  00                DCB      0
0050cf  00                DCB      0
                  |L1.20688|
0050d0  4176746f          DCB      "Avtomat #2 is OFF",0
0050d4  6d617420
0050d8  23322069
0050dc  73204f46
0050e0  4600    
0050e2  00                DCB      0
0050e3  00                DCB      0
                  |L1.20708|
0050e4  4176746f          DCB      "Avtomat #3 is OFF",0
0050e8  6d617420
0050ec  23332069
0050f0  73204f46
0050f4  4600    
0050f6  00                DCB      0
0050f7  00                DCB      0
                  |L1.20728|
0050f8  4176746f          DCB      "Avtomat #4 is OFF",0
0050fc  6d617420
005100  23342069
005104  73204f46
005108  4600    
00510a  00                DCB      0
00510b  00                DCB      0
                  |L1.20748|
00510c  4176746f          DCB      "Avtomat #5 is OFF",0
005110  6d617420
005114  23352069
005118  73204f46
00511c  4600    
00511e  00                DCB      0
00511f  00                DCB      0
                  |L1.20768|
005120  4176746f          DCB      "Avtomat #6 is OFF",0
005124  6d617420
005128  23362069
00512c  73204f46
005130  4600    
005132  00                DCB      0
005133  00                DCB      0
                  |L1.20788|
005134  4176746f          DCB      "Avtomat #7 is OFF",0
005138  6d617420
00513c  23372069
005140  73204f46
005144  4600    
005146  00                DCB      0
005147  00                DCB      0
                  |L1.20808|
005148  4176746f          DCB      "Avtomat #8 is OFF",0
00514c  6d617420
005150  23382069
005154  73204f46
005158  4600    
00515a  00                DCB      0
00515b  00                DCB      0
                  |L1.20828|
00515c  4176746f          DCB      "Avtomat #9 is OFF",0
005160  6d617420
005164  23392069
005168  73204f46
00516c  4600    
00516e  00                DCB      0
00516f  00                DCB      0
                  |L1.20848|
005170  4176746f          DCB      "Avtomat #1 is ON ",0
005174  6d617420
005178  23312069
00517c  73204f4e
005180  2000    
005182  00                DCB      0
005183  00                DCB      0
                  |L1.20868|
005184  4176746f          DCB      "Avtomat #2 is ON ",0
005188  6d617420
00518c  23322069
005190  73204f4e
005194  2000    
005196  00                DCB      0
005197  00                DCB      0
                  |L1.20888|
005198  4176746f          DCB      "Avtomat #3 is ON ",0
00519c  6d617420
0051a0  23332069
0051a4  73204f4e
0051a8  2000    
0051aa  00                DCB      0
0051ab  00                DCB      0
                  |L1.20908|
0051ac  4176746f          DCB      "Avtomat #4 is ON ",0
0051b0  6d617420
0051b4  23342069
0051b8  73204f4e
0051bc  2000    
0051be  00                DCB      0
0051bf  00                DCB      0
                  |L1.20928|
0051c0  4176746f          DCB      "Avtomat #5 is ON ",0
0051c4  6d617420
0051c8  23352069
0051cc  73204f4e
0051d0  2000    
0051d2  00                DCB      0
0051d3  00                DCB      0
                  |L1.20948|
0051d4  4176746f          DCB      "Avtomat #6 is ON ",0
0051d8  6d617420
0051dc  23362069
0051e0  73204f4e
0051e4  2000    
0051e6  00                DCB      0
0051e7  00                DCB      0
                  |L1.20968|
0051e8  4176746f          DCB      "Avtomat #7 is ON ",0
0051ec  6d617420
0051f0  23372069
0051f4  73204f4e
0051f8  2000    
0051fa  00                DCB      0
0051fb  00                DCB      0
                  |L1.20988|
0051fc  4176746f          DCB      "Avtomat #8 is ON ",0
005200  6d617420
005204  23382069
005208  73204f4e
00520c  2000    
00520e  00                DCB      0
00520f  00                DCB      0
                  |L1.21008|
005210  4176746f          DCB      "Avtomat #9 is ON ",0
005214  6d617420
005218  23392069
00521c  73204f4e
005220  2000    
005222  00                DCB      0
005223  00                DCB      0
                  |L1.21028|
                          DCD      bat
                  |L1.21032|
                          DCD      mess_data
                  |L1.21036|
                          DCD      ||area_number.26||+0xb4
                  |L1.21040|
                          DCD      IZMAX
                  |L1.21044|
                          DCD      main_10Hz_cnt
                  |L1.21048|
                          DCD      IKB
                  |L1.21052|
00523c  f7fffffe          BL       wrk_mem_hndl
005240  e069              B        |L1.21270|
                  |L1.21058|
;;;8051   			//plazma++;
;;;8052   			}
;;;8053   		}
;;;8054   	else bat[in]._cnt_wrk=10;	
005242  f04f000a          MOV      r0,#0xa
005246  7360              STRB     r0,[r4,#0xd]
005248  e065              B        |L1.21270|
                  |L1.21066|
;;;8055   	}	
;;;8056   
;;;8057   else if(bat[in]._Ib<(-IKB))
00524a  da64              BGE      |L1.21270|
;;;8058   	{
;;;8059   	if(bat[in]._cnt_wrk)
00524c  7b60              LDRB     r0,[r4,#0xd]
00524e  b3f0              CBZ      r0,|L1.21198|
;;;8060   		{
;;;8061   		bat[in]._cnt_wrk--;
005250  f1a00001          SUB      r0,r0,#1
005254  b2c0              UXTB     r0,r0
005256  7360              STRB     r0,[r4,#0xd]
;;;8062   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005258  bbc8              CBNZ     r0,|L1.21198|
00525a  7ba0              LDRB     r0,[r4,#0xe]
00525c  bbb8              CBNZ     r0,|L1.21198|
;;;8063   			{
;;;8064   			bat[in]._wrk=1;
00525e  f04f0001          MOV      r0,#1
005262  73a0              STRB     r0,[r4,#0xe]
;;;8065   
;;;8066   				{
;;;8067   				char temp;
;;;8068   				signed short temp_temp;
;;;8069   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
005264  48ff              LDR      r0,|L1.22116|
005266  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005268  f1000001          ADD      r0,r0,#1
00526c  f0000007          AND      r0,r0,#7
005270  eb040040          ADD      r0,r4,r0,LSL #1
005274  8c00              LDRH     r0,[r0,#0x20]
005276  9000              STR      r0,[sp,#0]
;;;8070   			 
;;;8071   				temp=LPC_RTC->YEAR;
005278  4efb              LDR      r6,|L1.22120|
00527a  8bb0              LDRH     r0,[r6,#0x1c]
00527c  9001              STR      r0,[sp,#4]
;;;8072   				gran_char((signed char*)&temp,1,99);
00527e  f04f0263          MOV      r2,#0x63
005282  f04f0101          MOV      r1,#1
005286  a801              ADD      r0,sp,#4
005288  f7fffffe          BL       gran_char
;;;8073   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
00528c  f104041c          ADD      r4,r4,#0x1c
005290  f89d0004          LDRB     r0,[sp,#4]
005294  7620              STRB     r0,[r4,#0x18]
;;;8074   			
;;;8075   				temp=LPC_RTC->MONTH;
005296  7e30              LDRB     r0,[r6,#0x18]
005298  9001              STR      r0,[sp,#4]
;;;8076   				gran_char((signed char*)&temp,1,12);
00529a  f04f020c          MOV      r2,#0xc
00529e  f04f0101          MOV      r1,#1
0052a2  a801              ADD      r0,sp,#4
0052a4  f7fffffe          BL       gran_char
;;;8077   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0052a8  f89d0004          LDRB     r0,[sp,#4]
0052ac  7660              STRB     r0,[r4,#0x19]
;;;8078   			
;;;8079   				temp=LPC_RTC->DOM;
0052ae  7b30              LDRB     r0,[r6,#0xc]
0052b0  9001              STR      r0,[sp,#4]
;;;8080   				gran_char((signed char*)&temp,1,31);
0052b2  221f              MOVS     r2,#0x1f
0052b4  2101              MOVS     r1,#1
0052b6  a801              ADD      r0,sp,#4
0052b8  f7fffffe          BL       gran_char
;;;8081   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0052bc  f89d0004          LDRB     r0,[sp,#4]
0052c0  76a0              STRB     r0,[r4,#0x1a]
;;;8082   				
;;;8083   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0052c2  f89d0000          LDRB     r0,[sp,#0]
0052c6  76e0              STRB     r0,[r4,#0x1b]
;;;8084   
;;;8085   				temp=LPC_RTC->HOUR;
0052c8  7a30              LDRB     r0,[r6,#8]
0052ca  9001              STR      r0,[sp,#4]
;;;8086   				gran_char((signed char*)&temp,0,23);
0052cc  e000              B        |L1.21200|
                  |L1.21198|
0052ce  e022              B        |L1.21270|
                  |L1.21200|
0052d0  2217              MOVS     r2,#0x17
0052d2  2100              MOVS     r1,#0
0052d4  a801              ADD      r0,sp,#4
0052d6  f7fffffe          BL       gran_char
;;;8087   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0052da  f89d0004          LDRB     r0,[sp,#4]
0052de  7720              STRB     r0,[r4,#0x1c]
;;;8088                  	
;;;8089   				temp=LPC_RTC->MIN;
0052e0  7930              LDRB     r0,[r6,#4]
0052e2  9001              STR      r0,[sp,#4]
;;;8090   				gran_char((signed char*)&temp,0,59);
0052e4  223b              MOVS     r2,#0x3b
0052e6  2100              MOVS     r1,#0
0052e8  a801              ADD      r0,sp,#4
0052ea  f7fffffe          BL       gran_char
;;;8091   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0052ee  f89d0004          LDRB     r0,[sp,#4]
0052f2  7760              STRB     r0,[r4,#0x1d]
;;;8092   	          
;;;8093   				temp=LPC_RTC->SEC;
0052f4  7830              LDRB     r0,[r6,#0]
0052f6  9001              STR      r0,[sp,#4]
;;;8094   				gran_char((signed char*)&temp,0,59);
0052f8  223b              MOVS     r2,#0x3b
0052fa  2100              MOVS     r1,#0
0052fc  a801              ADD      r0,sp,#4
0052fe  f7fffffe          BL       gran_char
;;;8095   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005302  f89d0004          LDRB     r0,[sp,#4]
005306  77a0              STRB     r0,[r4,#0x1e]
;;;8096   			
;;;8097   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005308  f89d0001          LDRB     r0,[sp,#1]
00530c  77e0              STRB     r0,[r4,#0x1f]
;;;8098   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
00530e  8027              STRH     r7,[r4,#0]
;;;8099   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005310  8067              STRH     r7,[r4,#2]
005312  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21270|
;;;8100   				}
;;;8101   	
;;;8102   			}
;;;8103   
;;;8104   		}
;;;8105   	else bat[in]._cnt_wrk=0;	 
;;;8106   	
;;;8107   	}					
;;;8108   
;;;8109   /*
;;;8110   if(Ibat>=(-IKB))
;;;8111   	{
;;;8112   	if(cnt_wrk<10)
;;;8113   		{
;;;8114   		cnt_wrk++;
;;;8115   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;8116   			{
;;;8117   			wrk=wrkOFF;
;;;8118   			//beep_init(0x7L,'O');
;;;8119   			wrk_mem_hndl(ibat_integr);
;;;8120   			}
;;;8121   		}
;;;8122   	else cnt_wrk=10;	
;;;8123   	}	
;;;8124   
;;;8125   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8126   	{
;;;8127   	if(cnt_wrk)
;;;8128   		{
;;;8129   		cnt_wrk--;
;;;8130   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8131   			{
;;;8132   			char temp;
;;;8133   			signed short temp_temp;
;;;8134   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8135   			 
;;;8136   			wrk=wrkON;
;;;8137   			
;;;8138   			temp=_year;
;;;8139   			gran_char(&temp,1,99);
;;;8140   			*((char*)(&(wrk_date[0])))=temp;
;;;8141   			
;;;8142   			temp=_month;
;;;8143   			gran_char(&temp,1,12);
;;;8144   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8145   			
;;;8146   			temp=_date;
;;;8147   			gran_char(&temp,1,31);
;;;8148   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8149   				
;;;8150   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8151   
;;;8152   			temp=_hour;
;;;8153   			gran_char(&temp,0,23);
;;;8154   			*((char*)(&(wrk_date[1])))=temp;
;;;8155                  
;;;8156   			temp=_min;
;;;8157   			gran_char(&temp,0,59);
;;;8158   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8159   	          
;;;8160   			temp=_sec;
;;;8161   			gran_char(&temp,0,59);
;;;8162   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8163   			
;;;8164   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8165   
;;;8166   			
;;;8167   			//beep_init(0xFL,'O'); 
;;;8168   			ibat_integr=0;
;;;8169   			ibat_integr_=0;
;;;8170   			}
;;;8171   		}
;;;8172   	else cnt_wrk=0;	 
;;;8173   	
;;;8174   	}
;;;8175   if(wrk==wrkON)
;;;8176   	{
;;;8177   	ibat_integr_+=-Ibat;
;;;8178   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8179   		{
;;;8180   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8181   		ibat_integr++;
;;;8182   		}
;;;8183   	}
;;;8184   
;;;8185   */
;;;8186   
;;;8187   
;;;8188   /*if(bat[in]._cnt_to_block)
;;;8189   	{
;;;8190   	bat[in]._cnt_to_block--;
;;;8191   	if(!(bat[in]._cnt_to_block))
;;;8192   		{
;;;8193   		//bat[in]._rel_stat=1;
;;;8194   		}
;;;8195   	}
;;;8196   */
;;;8197   
;;;8198   
;;;8199   
;;;8200   
;;;8201   //unsigned int tempUI,tempUI_;
;;;8202   //unsigned int b_zar; 
;;;8203   //char i;
;;;8204   //Ibat[0]=5000;                     
;;;8205   
;;;8206   
;;;8207                               
;;;8208   if(bat[in]._time_cnt==0)
;;;8209   	{
;;;8210   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8211   	
;;;8212   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005316  f64848a0          MOV      r8,#0x8ca0
00531a  f894003e          LDRB     r0,[r4,#0x3e]         ;8208
00531e  bba8              CBNZ     r0,|L1.21388|
005320  f9b41008          LDRSH    r1,[r4,#8]            ;8210
005324  6960              LDR      r0,[r4,#0x14]         ;8210
005326  4408              ADD      r0,r0,r1              ;8210
005328  6160              STR      r0,[r4,#0x14]         ;8210
;;;8213   		{
;;;8214   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8215   		else tempUS_=BAT_C_REAL[in];
;;;8216   		
;;;8217   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00532a  f8df9340          LDR      r9,|L1.22124|
00532e  f8dfa340          LDR      r10,|L1.22128|
005332  f2455b55          MOV      r11,#0x5555           ;8214
005336  4540              CMP      r0,r8                 ;8212
005338  db29              BLT      |L1.21390|
00533a  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8214
00533e  4558              CMP      r0,r11                ;8214
005340  d103              BNE      |L1.21322|
005342  48cc              LDR      r0,|L1.22132|
005344  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8214
005348  e001              B        |L1.21326|
                  |L1.21322|
00534a  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8215
                  |L1.21326|
00534e  f8390015          LDRH     r0,[r9,r5,LSL #1]
005352  f7fffffe          BL       lc640_read_int
005356  b280              UXTH     r0,r0
;;;8218   
;;;8219   		if(b_zar<(tempUS_/**10*/))
005358  42b0              CMP      r0,r6
00535a  d20e              BCS      |L1.21370|
;;;8220   			{
;;;8221   			bat[in]._zar_cnt-=AH_CONSTANT;
00535c  6961              LDR      r1,[r4,#0x14]
00535e  f5a14100          SUB      r1,r1,#0x8000
005362  f5a1614a          SUB      r1,r1,#0xca0
005366  6161              STR      r1,[r4,#0x14]
;;;8222   
;;;8223   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005368  f9392015          LDRSH    r2,[r9,r5,LSL #1]
00536c  f1000001          ADD      r0,r0,#1
005370  b201              SXTH     r1,r0
005372  4610              MOV      r0,r2
005374  f7fffffe          BL       lc640_write_int
005378  e032              B        |L1.21472|
                  |L1.21370|
;;;8224   			}
;;;8225   		else if(b_zar>(tempUS_/**10*/))  
00537a  d931              BLS      |L1.21472|
;;;8226   			{
;;;8227   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
00537c  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005380  b231              SXTH     r1,r6
005382  f7fffffe          BL       lc640_write_int
;;;8228   			bat[in]._zar_cnt=AH_CONSTANT;
005386  f8c48014          STR      r8,[r4,#0x14]
00538a  e029              B        |L1.21472|
                  |L1.21388|
00538c  e054              B        |L1.21560|
                  |L1.21390|
;;;8229   
;;;8230   			}
;;;8231   
;;;8232   		}
;;;8233   
;;;8234   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
00538e  49ba              LDR      r1,|L1.22136|
005390  4288              CMP      r0,r1
005392  dc25              BGT      |L1.21472|
;;;8235   		{
;;;8236   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
005394  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005398  4558              CMP      r0,r11
00539a  d103              BNE      |L1.21412|
00539c  48b5              LDR      r0,|L1.22132|
00539e  f8306015          LDRH     r6,[r0,r5,LSL #1]
0053a2  e001              B        |L1.21416|
                  |L1.21412|
;;;8237   		else tempUS_=BAT_C_REAL[in];
0053a4  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21416|
;;;8238   		
;;;8239   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053a8  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053ac  f7fffffe          BL       lc640_read_int
0053b0  b280              UXTH     r0,r0
;;;8240   
;;;8241   		if(b_zar>tempUS_)
0053b2  42b0              CMP      r0,r6
0053b4  d905              BLS      |L1.21442|
;;;8242   			{
;;;8243   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0053b6  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0053ba  b231              SXTH     r1,r6
0053bc  f7fffffe          BL       lc640_write_int
;;;8244   			b_zar=tempUS_;
0053c0  4630              MOV      r0,r6
                  |L1.21442|
;;;8245   			}
;;;8246   		if(b_zar)
0053c2  b158              CBZ      r0,|L1.21468|
;;;8247   			{
;;;8248   			bat[in]._zar_cnt+=AH_CONSTANT;
0053c4  6961              LDR      r1,[r4,#0x14]
0053c6  4441              ADD      r1,r1,r8
0053c8  6161              STR      r1,[r4,#0x14]
;;;8249   
;;;8250   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0053ca  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0053ce  f1a00001          SUB      r0,r0,#1
0053d2  b201              SXTH     r1,r0
0053d4  4610              MOV      r0,r2
0053d6  f7fffffe          BL       lc640_write_int
0053da  e001              B        |L1.21472|
                  |L1.21468|
;;;8251   			}
;;;8252   		else 
;;;8253   			{
;;;8254   			bat[in]._zar_cnt=-AH_CONSTANT;
0053dc  48a6              LDR      r0,|L1.22136|
0053de  6160              STR      r0,[r4,#0x14]
                  |L1.21472|
;;;8255   			}
;;;8256   
;;;8257   		}
;;;8258   
;;;8259   			
;;;8260   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053e0  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053e4  f7fffffe          BL       lc640_read_int
0053e8  4601              MOV      r1,r0
;;;8261   	
;;;8262   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0053ea  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0053ee  4558              CMP      r0,r11
0053f0  d102              BNE      |L1.21496|
0053f2  48a0              LDR      r0,|L1.22132|
0053f4  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21496|
;;;8263   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8264   		           	
;;;8265   	tempUL*=1000L;
0053f8  f44f727a          MOV      r2,#0x3e8
0053fc  fb01f102          MUL      r1,r1,r2
;;;8266   
;;;8267   
;;;8268   	if(tempUL_==0) tempUL=0;
005400  b158              CBZ      r0,|L1.21530|
;;;8269   	else tempUL/=tempUL_;
005402  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21510|
;;;8270   
;;;8271   	tempUL/=10L;
005406  f04f010a          MOV      r1,#0xa
00540a  fbb0f0f1          UDIV     r0,r0,r1
;;;8272   
;;;8273   	bat[in]._zar=(unsigned short)tempUL;
00540e  8220              STRH     r0,[r4,#0x10]
;;;8274   
;;;8275   	if(BAT_TYPE==1)
005410  489a              LDR      r0,|L1.22140|
005412  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
005414  2801              CMP      r0,#1
005416  d003              BEQ      |L1.21536|
005418  e008              B        |L1.21548|
                  |L1.21530|
00541a  f04f0000          MOV      r0,#0                 ;8268
00541e  e7f2              B        |L1.21510|
                  |L1.21536|
;;;8276   		{
;;;8277   		bat[in]._zar=lakb[in]._s_o_c;
005420  4997              LDR      r1,|L1.22144|
005422  9802              LDR      r0,[sp,#8]
005424  eb010080          ADD      r0,r1,r0,LSL #2
005428  8a40              LDRH     r0,[r0,#0x12]
00542a  8220              STRH     r0,[r4,#0x10]
                  |L1.21548|
;;;8278   		}
;;;8279   	
;;;8280   	gran((signed short*)&bat[in]._zar,0,100);
00542c  f1040010          ADD      r0,r4,#0x10
005430  2264              MOVS     r2,#0x64
005432  2100              MOVS     r1,#0
005434  f7fffffe          BL       gran
                  |L1.21560|
;;;8281        }
;;;8282   
;;;8283   
;;;8284   //Подсчет тока разряда батареи      
;;;8285   if(bat[in]._wrk==1)
005438  7ba0              LDRB     r0,[r4,#0xe]
00543a  2801              CMP      r0,#1
00543c  d113              BNE      |L1.21606|
;;;8286   	{
;;;8287   	if(bat[in]._Iintegr<36000)
00543e  8ba0              LDRH     r0,[r4,#0x1c]
005440  4540              CMP      r0,r8
005442  d20f              BCS      |L1.21604|
;;;8288   		{          
;;;8289   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005444  f9b40008          LDRSH    r0,[r4,#8]
005448  f7fffffe          BL       abs
00544c  8ba1              LDRH     r1,[r4,#0x1c]
00544e  4408              ADD      r0,r0,r1
005450  b280              UXTH     r0,r0
005452  83a0              STRH     r0,[r4,#0x1c]
;;;8290   		if(bat[in]._Iintegr>=36000)
005454  4540              CMP      r0,r8
005456  d306              BCC      |L1.21606|
;;;8291   			{
;;;8292   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005458  83a7              STRH     r7,[r4,#0x1c]
;;;8293   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00545a  8be0              LDRH     r0,[r4,#0x1e]
00545c  f1000001          ADD      r0,r0,#1
005460  83e0              STRH     r0,[r4,#0x1e]
005462  e000              B        |L1.21606|
                  |L1.21604|
;;;8294   			}
;;;8295   		}
;;;8296   	else 
;;;8297   		{
;;;8298   		bat[in]._Iintegr=0;
005464  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21606|
;;;8299   		}	
;;;8300   	} 
;;;8301   	    
;;;8302   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8303   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
005466  4e87              LDR      r6,|L1.22148|
005468  4987              LDR      r1,|L1.22152|
00546a  f8df9220          LDR      r9,|L1.22156|
00546e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005472  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
005476  4288              CMP      r0,r1
005478  dd02              BLE      |L1.21632|
00547a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00547e  b380              CBZ      r0,|L1.21730|
                  |L1.21632|
;;;8304   	{
;;;8305   	bat[in]._sign_temper_cnt++;
;;;8306   	}
;;;8307   else 
;;;8308   	{
;;;8309   	bat[in]._sign_temper_cnt--;
005480  f8b40040          LDRH     r0,[r4,#0x40]
005484  f1a00001          SUB      r0,r0,#1
005488  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21644|
;;;8310   	}
;;;8311   #else
;;;8312   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8313   	{
;;;8314   	bat[in]._sign_temper_cnt++;
;;;8315   	}
;;;8316   else 
;;;8317   	{
;;;8318   	bat[in]._sign_temper_cnt--;
;;;8319   	}
;;;8320   #endif
;;;8321   gran(&bat[in]._sign_temper_cnt,0,600);
00548c  f44f7b16          MOV      r11,#0x258
005490  f1040040          ADD      r0,r4,#0x40
005494  465a              MOV      r2,r11
005496  2100              MOVS     r1,#0
005498  f7fffffe          BL       gran
;;;8322   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
00549c  f9b40040          LDRSH    r0,[r4,#0x40]
0054a0  f2402a4e          MOV      r10,#0x24e
0054a4  4550              CMP      r0,r10
0054a6  db05              BLT      |L1.21684|
0054a8  f894103f          LDRB     r1,[r4,#0x3f]
0054ac  f0410101          ORR      r1,r1,#1
0054b0  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21684|
;;;8323   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0054b4  280a              CMP      r0,#0xa
0054b6  dc05              BGT      |L1.21700|
0054b8  f894003f          LDRB     r0,[r4,#0x3f]
0054bc  f0200001          BIC      r0,r0,#1
0054c0  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21700|
;;;8324   
;;;8325   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0054c4  f894003f          LDRB     r0,[r4,#0x3f]
0054c8  07c1              LSLS     r1,r0,#31
0054ca  d005              BEQ      |L1.21720|
0054cc  06c0              LSLS     r0,r0,#27
0054ce  d403              BMI      |L1.21720|
0054d0  2101              MOVS     r1,#1
0054d2  4628              MOV      r0,r5
0054d4  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21720|
;;;8326   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0054d8  f894003f          LDRB     r0,[r4,#0x3f]
0054dc  07c1              LSLS     r1,r0,#31
0054de  d008              BEQ      |L1.21746|
0054e0  e00d              B        |L1.21758|
                  |L1.21730|
0054e2  e7ff              B        |L1.21732|
                  |L1.21732|
0054e4  f8b40040          LDRH     r0,[r4,#0x40]         ;8305
0054e8  f1000001          ADD      r0,r0,#1              ;8305
0054ec  f8a40040          STRH     r0,[r4,#0x40]         ;8305
0054f0  e7cc              B        |L1.21644|
                  |L1.21746|
0054f2  06c0              LSLS     r0,r0,#27
0054f4  d503              BPL      |L1.21758|
0054f6  2100              MOVS     r1,#0
0054f8  4628              MOV      r0,r5
0054fa  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21758|
;;;8327   
;;;8328   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
0054fe  f894003f          LDRB     r0,[r4,#0x3f]
005502  07c1              LSLS     r1,r0,#31
005504  d004              BEQ      |L1.21776|
005506  f0400010          ORR      r0,r0,#0x10
00550a  f884003f          STRB     r0,[r4,#0x3f]
00550e  e003              B        |L1.21784|
                  |L1.21776|
;;;8329   else 								bat[in]._temper_stat&=~(1<<4);
005510  f0200010          BIC      r0,r0,#0x10
005514  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21784|
;;;8330   
;;;8331   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8332   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005518  495d              LDR      r1,|L1.22160|
00551a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00551e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005522  4288              CMP      r0,r1
005524  dd02              BLE      |L1.21804|
005526  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00552a  b3d0              CBZ      r0,|L1.21922|
                  |L1.21804|
;;;8333   	{
;;;8334   	bat[in]._max_temper_cnt++;
;;;8335   	}
;;;8336   else 
;;;8337   	{
;;;8338   	bat[in]._max_temper_cnt--;
00552c  f8b40042          LDRH     r0,[r4,#0x42]
005530  f1a00001          SUB      r0,r0,#1
005534  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21816|
;;;8339   	}
;;;8340   #else
;;;8341   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8342   	{
;;;8343   	bat[in]._max_temper_cnt++;
;;;8344   	}
;;;8345   else 
;;;8346   	{
;;;8347   	bat[in]._max_temper_cnt--;
;;;8348   	}
;;;8349   #endif
;;;8350   
;;;8351   gran(&bat[in]._max_temper_cnt,0,600);
005538  f1040042          ADD      r0,r4,#0x42
00553c  465a              MOV      r2,r11
00553e  2100              MOVS     r1,#0
005540  f7fffffe          BL       gran
;;;8352   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005544  f9b40042          LDRSH    r0,[r4,#0x42]
005548  4550              CMP      r0,r10
00554a  db05              BLT      |L1.21848|
00554c  f894103f          LDRB     r1,[r4,#0x3f]
005550  f0410102          ORR      r1,r1,#2
005554  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21848|
;;;8353   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005558  280a              CMP      r0,#0xa
00555a  dc05              BGT      |L1.21864|
00555c  f894003f          LDRB     r0,[r4,#0x3f]
005560  f0200002          BIC      r0,r0,#2
005564  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21864|
;;;8354   
;;;8355   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005568  f894003f          LDRB     r0,[r4,#0x3f]
00556c  0781              LSLS     r1,r0,#30
00556e  d505              BPL      |L1.21884|
005570  0680              LSLS     r0,r0,#26
005572  d403              BMI      |L1.21884|
005574  2103              MOVS     r1,#3
005576  4628              MOV      r0,r5
005578  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21884|
;;;8356   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
00557c  f894003f          LDRB     r0,[r4,#0x3f]
005580  0781              LSLS     r1,r0,#30
005582  d405              BMI      |L1.21904|
005584  0680              LSLS     r0,r0,#26
005586  d503              BPL      |L1.21904|
005588  2102              MOVS     r1,#2
00558a  4628              MOV      r0,r5
00558c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21904|
;;;8357   
;;;8358   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005590  f894003f          LDRB     r0,[r4,#0x3f]
005594  0781              LSLS     r1,r0,#30
005596  d50c              BPL      |L1.21938|
005598  f0400020          ORR      r0,r0,#0x20
00559c  f884003f          STRB     r0,[r4,#0x3f]
0055a0  e00b              B        |L1.21946|
                  |L1.21922|
0055a2  e7ff              B        |L1.21924|
                  |L1.21924|
0055a4  f8b40042          LDRH     r0,[r4,#0x42]         ;8334
0055a8  f1000001          ADD      r0,r0,#1              ;8334
0055ac  f8a40042          STRH     r0,[r4,#0x42]         ;8334
0055b0  e7c2              B        |L1.21816|
                  |L1.21938|
;;;8359   else 								bat[in]._temper_stat&=~(1<<5);
0055b2  f0200020          BIC      r0,r0,#0x20
0055b6  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21946|
;;;8360   
;;;8361   //Подсчет наработки батареи
;;;8362   if(bat[in]._resurs_cnt<36000)
0055ba  6c60              LDR      r0,[r4,#0x44]
0055bc  4540              CMP      r0,r8
0055be  da13              BGE      |L1.21992|
;;;8363   	{               
;;;8364   	bat[in]._resurs_cnt++;
0055c0  f1000001          ADD      r0,r0,#1
0055c4  6460              STR      r0,[r4,#0x44]
;;;8365   	if(bat[in]._resurs_cnt>=36000)
0055c6  4540              CMP      r0,r8
0055c8  db0f              BLT      |L1.21994|
;;;8366   		{
;;;8367   		bat[in]._resurs_cnt=0;
0055ca  6467              STR      r7,[r4,#0x44]
;;;8368   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0055cc  4c31              LDR      r4,|L1.22164|
0055ce  f8340015          LDRH     r0,[r4,r5,LSL #1]
0055d2  f7fffffe          BL       lc640_read_int
0055d6  1c40              ADDS     r0,r0,#1
0055d8  b201              SXTH     r1,r0
0055da  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0055de  b003              ADD      sp,sp,#0xc
0055e0  e8bd4ff0          POP      {r4-r11,lr}
0055e4  f7ffbffe          B.W      lc640_write_int
                  |L1.21992|
;;;8369   		}
;;;8370   	}
;;;8371   else bat[in]._resurs_cnt=0;
0055e8  6467              STR      r7,[r4,#0x44]
                  |L1.21994|
;;;8372   
;;;8373   
;;;8374   #ifndef UKU_220_V2
;;;8375   #ifndef UKU_GLONASS
;;;8376   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8377   //#ifndef UKU_6U
;;;8378   //#ifndef UKU_220
;;;8379   if(UBM_AV)
;;;8380        {
;;;8381        signed short temp_SS;
;;;8382   #ifdef UKU_220
;;;8383   temp_SS=bat[in]._Ub/2;
;;;8384   #else
;;;8385        if(U0B<600)
;;;8386             {
;;;8387   
;;;8388             temp_SS=bat[in]._Ub/4;
;;;8389             }
;;;8390        else temp_SS=bat[in]._Ub/5;
;;;8391   	
;;;8392   	temp_SS+=temp_SS;     
;;;8393   #endif
;;;8394        temp_SS-=(bat[in]._Ubm);
;;;8395   
;;;8396        temp_SS=abs(temp_SS);
;;;8397   
;;;8398        temp_SS*=10;
;;;8399   
;;;8400        temp_SS/=12;
;;;8401   
;;;8402        bat[in]._dUbm=temp_SS;
;;;8403   
;;;8404   
;;;8405        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8406   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8407   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8408   		(!(bat[in]._av & 2))  )
;;;8409   		{
;;;8410   		bat[in]._cnt_as++;
;;;8411   		if(bat[in]._cnt_as==3000)
;;;8412   			{
;;;8413   			avar_bat_as_hndl(in,1);
;;;8414   			}
;;;8415   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8416   		}
;;;8417   	else 
;;;8418   		{
;;;8419   		if(bat[in]._cnt_as)
;;;8420   			{
;;;8421   			bat[in]._cnt_as--;
;;;8422   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8423   			}
;;;8424   		}
;;;8425        
;;;8426        }
;;;8427   //#endif 
;;;8428   #endif 
;;;8429   #endif
;;;8430   #endif
;;;8431   
;;;8432   }
0055ea  e8bd8ffe          POP      {r1-r11,pc}
;;;8433   
                          ENDP

                  bat_hndl_zvu PROC
;;;8435   //-----------------------------------------------
;;;8436   void bat_hndl_zvu(void)
0055ee  e92d4ff0          PUSH     {r4-r11,lr}
;;;8437   {
0055f2  b089              SUB      sp,sp,#0x24
;;;8438   char i;
;;;8439   short bat_hndl_i_temp;
;;;8440   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0055f4  f04f021c          MOV      r2,#0x1c
0055f8  4927              LDR      r1,|L1.22168|
0055fa  4668              MOV      r0,sp
0055fc  f7fffffe          BL       __aeabi_memcpy4
;;;8441   
;;;8442   //Ib_ips_termokompensat=-17000;
;;;8443    
;;;8444   if(bat_hndl_zvu_init==0)
005600  4c26              LDR      r4,|L1.22172|
;;;8445   	{
;;;8446   	//Инициализация при включении системы
;;;8447   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8448   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005602  2564              MOVS     r5,#0x64
;;;8449   	bat_hndl_zvu_Q*=10000L;
;;;8450   
;;;8451   	bat_hndl_zvu_init=1;
;;;8452   	}
;;;8453   else 
;;;8454   	{
;;;8455   	if(Ib_ips_termokompensat<-IKB)
;;;8456   		{
;;;8457   		bat_hndl_i_vector=0;
;;;8458   		bat_hndl_i_zar_price=0L;
;;;8459   			
;;;8460   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8461   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8462   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8463   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8464   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8465   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8466   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8467   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8468   		
;;;8469   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8470   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8471   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8472   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8473   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8474   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8475   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8476   
;;;8477   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8478   		for(i=0;i<7;i++)
;;;8479   			{
;;;8480   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8481   				{
;;;8482   				break;
;;;8483   				}
;;;8484   			}
;;;8485   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8486   		 else if((i>=1)&&(i<7))
;;;8487   		 	{
;;;8488   			short i1,i2;
;;;8489   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8490   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8491   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8492   			bat_hndl_t_razr*=(long)i1;
;;;8493   			bat_hndl_t_razr/=(long)i2;
;;;8494   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8495   			}
;;;8496   		else if(i>=7)
;;;8497   			{
;;;8498   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8499   			}
;;;8500   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005604  f8df8098          LDR      r8,|L1.22176|
005608  7a60              LDRB     r0,[r4,#9]            ;8444  ; bat_hndl_zvu_init
00560a  2700              MOVS     r7,#0                 ;8444
00560c  f04f0901          MOV      r9,#1                 ;8451
005610  f1040680          ADD      r6,r4,#0x80           ;8447
005614  2800              CMP      r0,#0                 ;8444
005616  d07e              BEQ      |L1.22294|
005618  4923              LDR      r1,|L1.22184|
00561a  4822              LDR      r0,|L1.22180|
00561c  f9b12000          LDRSH    r2,[r1,#0]            ;8455  ; IKB
005620  4631              MOV      r1,r6                 ;8447
005622  f9b00000          LDRSH    r0,[r0,#0]            ;8455  ; Ib_ips_termokompensat
005626  4253              RSBS     r3,r2,#0              ;8455
005628  6d89              LDR      r1,[r1,#0x58]         ;8447
00562a  4298              CMP      r0,r3                 ;8455
00562c  da74              BGE      |L1.22296|
00562e  72e7              STRB     r7,[r4,#0xb]          ;8457
005630  60f7              STR      r7,[r6,#0xc]          ;8458  ; bat_hndl_i_zar_price
005632  f1c00000          RSB      r0,r0,#0              ;8460
005636  b200              SXTH     r0,r0                 ;8460
005638  8030              STRH     r0,[r6,#0]            ;8460
00563a  9008              STR      r0,[sp,#0x20]         ;8460
00563c  481b              LDR      r0,|L1.22188|
00563e  4a1c              LDR      r2,|L1.22192|
005640  8800              LDRH     r0,[r0,#0]            ;8461  ; BAT_C_POINT_1_6
005642  eb000040          ADD      r0,r0,r0,LSL #1       ;8461
005646  ea4f0040          LSL      r0,r0,#1              ;8461
00564a  fa0ffb80          SXTH     r11,r0                ;8461
00564e  4819              LDR      r0,|L1.22196|
005650  8800              LDRH     r0,[r0,#0]            ;8462  ; BAT_C_POINT_1_2
005652  ea4f0040          LSL      r0,r0,#1              ;8462
005656  b203              SXTH     r3,r0                 ;8462
005658  4817              LDR      r0,|L1.22200|
00565a  f9b0c000          LDRSH    r12,[r0,#0]           ;8463  ; BAT_C_POINT_1
00565e  4817              LDR      r0,|L1.22204|
005660  e02e              B        |L1.22208|
005662  0000              DCW      0x0000
                  |L1.22116|
                          DCD      bat_u_old_cnt
                  |L1.22120|
                          DCD      0x40024020
                  |L1.22124|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22128|
                          DCD      BAT_C_REAL
                  |L1.22132|
                          DCD      BAT_C_NOM
                  |L1.22136|
                          DCD      0xffff7360
                  |L1.22140|
                          DCD      BAT_TYPE
                  |L1.22144|
                          DCD      lakb
                  |L1.22148|
                          DCD      t_ext
                  |L1.22152|
                          DCD      TBATSIGN
                  |L1.22156|
                          DCD      ND_EXT
                  |L1.22160|
                          DCD      TBATMAX
                  |L1.22164|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22168|
                          DCD      ||area_number.20||+0x20
                  |L1.22172|
                          DCD      ||area_number.26||
                  |L1.22176|
                          DCD      0x000f4240
                  |L1.22180|
                          DCD      Ib_ips_termokompensat
                  |L1.22184|
                          DCD      IKB
                  |L1.22188|
                          DCD      BAT_C_POINT_1_6
                  |L1.22192|
                          DCD      ||.bss||+0x44c
                  |L1.22196|
                          DCD      BAT_C_POINT_1_2
                  |L1.22200|
                          DCD      BAT_C_POINT_1
                  |L1.22204|
                          DCD      BAT_C_POINT_3
                  |L1.22208|
0056c0  f9b00000          LDRSH    r0,[r0,#0]            ;8464  ; BAT_C_POINT_3
0056c4  f04f0903          MOV      r9,#3                 ;8464
0056c8  fb90f0f9          SDIV     r0,r0,r9              ;8464
0056cc  b200              SXTH     r0,r0                 ;8464
0056ce  9007              STR      r0,[sp,#0x1c]         ;8464
0056d0  48ff              LDR      r0,|L1.23248|
0056d2  f04f0905          MOV      r9,#5                 ;8465
0056d6  f9b00000          LDRSH    r0,[r0,#0]            ;8465  ; BAT_C_POINT_5
0056da  fb90f0f9          SDIV     r0,r0,r9              ;8465
0056de  fa0ff980          SXTH     r9,r0                 ;8465
0056e2  48fc              LDR      r0,|L1.23252|
0056e4  f9b0a000          LDRSH    r10,[r0,#0]           ;8466  ; BAT_C_POINT_10
0056e8  f04f000a          MOV      r0,#0xa               ;8466
0056ec  fb9af0f0          SDIV     r0,r10,r0             ;8466
0056f0  fa0ffe80          SXTH     lr,r0                 ;8466
0056f4  48f8              LDR      r0,|L1.23256|
0056f6  f04f0a14          MOV      r10,#0x14             ;8467
0056fa  f9b00000          LDRSH    r0,[r0,#0]            ;8467  ; BAT_C_POINT_20
0056fe  fb90f0fa          SDIV     r0,r0,r10             ;8467
005702  fa0ffa80          SXTH     r10,r0                ;8467
005706  48f5              LDR      r0,|L1.23260|
005708  f9b00000          LDRSH    r0,[r0,#0]            ;8469  ; BAT_K_OLD
00570c  fb0bfb00          MUL      r11,r11,r0            ;8469
005710  fb9bfbf5          SDIV     r11,r11,r5            ;8469
005714  e001              B        |L1.22298|
                  |L1.22294|
005716  e04e              B        |L1.22454|
                  |L1.22296|
005718  e082              B        |L1.22560|
                  |L1.22298|
00571a  f8a2b000          STRH     r11,[r2,#0]           ;8469
00571e  fb03f300          MUL      r3,r3,r0              ;8470
005722  fb93f3f5          SDIV     r3,r3,r5              ;8470
005726  8053              STRH     r3,[r2,#2]            ;8470
005728  fb0cfc00          MUL      r12,r12,r0            ;8471
00572c  fb9cf3f5          SDIV     r3,r12,r5             ;8471
005730  8093              STRH     r3,[r2,#4]            ;8471
005732  9b07              LDR      r3,[sp,#0x1c]         ;8472
005734  fb03f300          MUL      r3,r3,r0              ;8472
005738  fb93f3f5          SDIV     r3,r3,r5              ;8472
00573c  80d3              STRH     r3,[r2,#6]            ;8472
00573e  fb09f900          MUL      r9,r9,r0              ;8473
005742  fb99f3f5          SDIV     r3,r9,r5              ;8473
005746  8113              STRH     r3,[r2,#8]            ;8473
005748  fb0efe00          MUL      lr,lr,r0              ;8474
00574c  fb9ef3f5          SDIV     r3,lr,r5              ;8474
005750  8153              STRH     r3,[r2,#0xa]          ;8474
005752  fb0afa00          MUL      r10,r10,r0            ;8475
005756  fb9af0f5          SDIV     r0,r10,r5             ;8475
00575a  8190              STRH     r0,[r2,#0xc]          ;8475
00575c  9808              LDR      r0,[sp,#0x20]         ;8477
00575e  f04f030a          MOV      r3,#0xa               ;8477
005762  fb90f0f3          SDIV     r0,r0,r3              ;8477
005766  b203              SXTH     r3,r0                 ;8477
005768  f04f0000          MOV      r0,#0                 ;8478
                  |L1.22380|
00576c  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8480
005770  429d              CMP      r5,r3                 ;8480
005772  dd04              BLE      |L1.22398|
005774  f1000001          ADD      r0,r0,#1              ;8478
005778  b2c0              UXTB     r0,r0                 ;8478
00577a  2807              CMP      r0,#7                 ;8478
00577c  d3f6              BCC      |L1.22380|
                  |L1.22398|
00577e  b358              CBZ      r0,|L1.22488|
005780  1e45              SUBS     r5,r0,#1              ;8486
005782  2d06              CMP      r5,#6                 ;8486
005784  d22b              BCS      |L1.22494|
005786  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8489
00578a  ebac0303          SUB      r3,r12,r3             ;8489
00578e  b21b              SXTH     r3,r3                 ;8489
005790  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8490
005794  ebac0202          SUB      r2,r12,r2             ;8490
005798  fa0ffc82          SXTH     r12,r2                ;8490
00579c  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8491
0057a0  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8491
0057a4  eba90200          SUB      r2,r9,r0              ;8491
0057a8  fb02f203          MUL      r2,r2,r3              ;8492
0057ac  fb92f2fc          SDIV     r2,r2,r12             ;8493
0057b0  4410              ADD      r0,r0,r2              ;8494
0057b2  6530              STR      r0,[r6,#0x50]         ;8494  ; bat_hndl_t_razr
0057b4  e017              B        |L1.22502|
                  |L1.22454|
0057b6  f44f70ef          MOV      r0,#0x1de             ;8447
0057ba  f7fffffe          BL       lc640_read_int
0057be  65b0              STR      r0,[r6,#0x58]         ;8447  ; bat_hndl_zvu_Q
0057c0  2865              CMP      r0,#0x65              ;8448
0057c2  d300              BCC      |L1.22470|
0057c4  65b5              STR      r5,[r6,#0x58]         ;8448  ; bat_hndl_zvu_Q
                  |L1.22470|
0057c6  6db0              LDR      r0,[r6,#0x58]         ;8449  ; bat_hndl_zvu_Q
0057c8  f2427110          MOV      r1,#0x2710            ;8449
0057cc  fb00f001          MUL      r0,r0,r1              ;8449
0057d0  65b0              STR      r0,[r6,#0x58]         ;8449  ; bat_hndl_zvu_Q
0057d2  f8849009          STRB     r9,[r4,#9]            ;8451
0057d6  e066              B        |L1.22694|
                  |L1.22488|
0057d8  9800              LDR      r0,[sp,#0]            ;8485
0057da  6530              STR      r0,[r6,#0x50]         ;8485  ; bat_hndl_t_razr
0057dc  e003              B        |L1.22502|
                  |L1.22494|
0057de  2807              CMP      r0,#7                 ;8496
0057e0  d301              BCC      |L1.22502|
0057e2  9806              LDR      r0,[sp,#0x18]         ;8498
0057e4  6530              STR      r0,[r6,#0x50]         ;8498  ; bat_hndl_t_razr
                  |L1.22502|
0057e6  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
0057e8  fb98f0f0          SDIV     r0,r8,r0
0057ec  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8501   
;;;8502   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0057ee  4281              CMP      r1,r0
0057f0  dd03              BLE      |L1.22522|
0057f2  eba10000          SUB      r0,r1,r0
0057f6  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057f8  e000              B        |L1.22524|
                  |L1.22522|
;;;8503   		else bat_hndl_zvu_Q=0L;
0057fa  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22524|
;;;8504   
;;;8505   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
0057fc  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
0057fe  f44f6061          MOV      r0,#0xe10
005802  fb91f0f0          SDIV     r0,r1,r0
005806  8070              STRH     r0,[r6,#2]
;;;8506   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005808  f04f003c          MOV      r0,#0x3c
00580c  fb91f1f0          SDIV     r1,r1,r0
005810  b209              SXTH     r1,r1
005812  80b1              STRH     r1,[r6,#4]
;;;8507   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005814  fb91f2f0          SDIV     r2,r1,r0
005818  fb001012          MLS      r0,r0,r2,r1
00581c  80f0              STRH     r0,[r6,#6]
00581e  e016              B        |L1.22606|
                  |L1.22560|
;;;8508   
;;;8509   		}
;;;8510   	else if(Ib_ips_termokompensat>IKB)
005820  4290              CMP      r0,r2
005822  dd14              BLE      |L1.22606|
;;;8511   		{
;;;8512   		bat_hndl_i_vector=1;
005824  f884900b          STRB     r9,[r4,#0xb]
;;;8513   
;;;8514   		bat_hndl_i=Ib_ips_termokompensat;
005828  8030              STRH     r0,[r6,#0]
;;;8515   		bat_hndl_i_summ+=(long)bat_hndl_i;
00582a  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
00582c  4410              ADD      r0,r0,r2
00582e  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8516   		if(bat_hndl_i_summ>=36000L)
005830  f64842a0          MOV      r2,#0x8ca0
005834  4290              CMP      r0,r2
005836  db0a              BLT      |L1.22606|
;;;8517   
;;;8518   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8519   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8520   			{
;;;8521   			bat_hndl_i_summ-=36000L;
005838  eba00002          SUB      r0,r0,r2
00583c  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8522   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
00583e  4541              CMP      r1,r8
005840  da03              BGE      |L1.22602|
005842  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
005844  4408              ADD      r0,r0,r1
005846  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005848  e001              B        |L1.22606|
                  |L1.22602|
;;;8523   			else bat_hndl_zvu_Q=1000000L; 
00584a  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22606|
;;;8524   			}
;;;8525   		}
;;;8526   
;;;8527   
;;;8528   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
00584e  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005850  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
005852  4288              CMP      r0,r1
005854  d00d              BEQ      |L1.22642|
;;;8529   		{
;;;8530   		if(bat_hndl_i_vector==1)
005856  2801              CMP      r0,#1
005858  d10b              BNE      |L1.22642|
;;;8531   			{
;;;8532   			signed short tempSS;
;;;8533   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
00585a  f44f70e4          MOV      r0,#0x1c8
00585e  f7fffffe          BL       lc640_read_int
005862  b200              SXTH     r0,r0
;;;8534   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005864  4a9e              LDR      r2,|L1.23264|
005866  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
005868  4411              ADD      r1,r1,r2
00586a  fb91f0f0          SDIV     r0,r1,r0
00586e  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8535   			bat_hndl_i_summ=0;
005870  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.22642|
;;;8536   			}
;;;8537   		}
;;;8538   	bat_hndl_i_vector_old=bat_hndl_i_vector;
005872  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005874  7320              STRB     r0,[r4,#0xc]
;;;8539   
;;;8540   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
005876  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005878  f2427a10          MOV      r10,#0x2710
00587c  fb90f5fa          SDIV     r5,r0,r10
005880  f44f79ef          MOV      r9,#0x1de
005884  4648              MOV      r0,r9
005886  f7fffffe          BL       lc640_read_int
00588a  4285              CMP      r5,r0
00588c  d006              BEQ      |L1.22684|
00588e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005890  fb90f0fa          SDIV     r0,r0,r10
005894  b201              SXTH     r1,r0
005896  4648              MOV      r0,r9
005898  f7fffffe          BL       lc640_write_int
                  |L1.22684|
;;;8541   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00589c  e9d60116          LDRD     r0,r1,[r6,#0x58]
0058a0  fb90f0f1          SDIV     r0,r0,r1
0058a4  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.22694|
;;;8542   	}
;;;8543   
;;;8544   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0058a6  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0058a8  4540              CMP      r0,r8
0058aa  dd02              BLE      |L1.22706|
0058ac  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
0058b0  e002              B        |L1.22712|
                  |L1.22706|
;;;8545   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0058b2  2800              CMP      r0,#0
0058b4  da00              BGE      |L1.22712|
0058b6  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22712|
;;;8546   
;;;8547   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0058b8  488a              LDR      r0,|L1.23268|
0058ba  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0058be  200a              MOVS     r0,#0xa
0058c0  fb91f0f0          SDIV     r0,r1,r0
0058c4  4988              LDR      r1,|L1.23272|
0058c6  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0058ca  ebb00f41          CMP      r0,r1,LSL #1
0058ce  da30              BGE      |L1.22834|
0058d0  4249              RSBS     r1,r1,#0
0058d2  ebb00f41          CMP      r0,r1,LSL #1
0058d6  dd2c              BLE      |L1.22834|
0058d8  4884              LDR      r0,|L1.23276|
0058da  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0058de  07c0              LSLS     r0,r0,#31
0058e0  d127              BNE      |L1.22834|
0058e2  4883              LDR      r0,|L1.23280|
0058e4  4983              LDR      r1,|L1.23284|
0058e6  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0058ea  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0058ee  4288              CMP      r0,r1
0058f0  dc1f              BGT      |L1.22834|
0058f2  4981              LDR      r1,|L1.23288|
0058f4  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0058f8  4288              CMP      r0,r1
0058fa  dd1a              BLE      |L1.22834|
0058fc  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005900  280a              CMP      r0,#0xa
005902  db16              BLT      |L1.22834|
005904  28c8              CMP      r0,#0xc8
005906  dc14              BGT      |L1.22834|
;;;8548   	{
;;;8549   	if(bat_hndl_zvu_Q_cnt<60)
005908  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
00590c  283c              CMP      r0,#0x3c
00590e  d20d              BCS      |L1.22828|
;;;8550   		{
;;;8551   		bat_hndl_zvu_Q_cnt++;
005910  f1000001          ADD      r0,r0,#1
005914  b2c0              UXTB     r0,r0
005916  f8840030          STRB     r0,[r4,#0x30]
;;;8552   		if(bat_hndl_zvu_Q_cnt>=60)
00591a  283c              CMP      r0,#0x3c
00591c  d306              BCC      |L1.22828|
;;;8553   			{
;;;8554   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
00591e  2164              MOVS     r1,#0x64
005920  f44f70ef          MOV      r0,#0x1de
005924  f7fffffe          BL       lc640_write_int
;;;8555   			bat_hndl_zvu_Q=1000000L;
005928  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22828|
;;;8556   
;;;8557   
;;;8558   			}
;;;8559   		}
;;;8560   	}
;;;8561   else 
;;;8562   	{
;;;8563   	bat_hndl_zvu_Q_cnt=0;
;;;8564   	}
;;;8565   
;;;8566   
;;;8567   
;;;8568   };
00592c  b009              ADD      sp,sp,#0x24
00592e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22834|
005932  f8847030          STRB     r7,[r4,#0x30]         ;8563
005936  e7f9              B        |L1.22828|
;;;8569   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8573   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8574   void u_avt_set_hndl(void)
005938  e92d5fff          PUSH     {r0-r12,lr}
;;;8575   {
;;;8576   if(uavt_set_stat==uassSTEP1)
00593c  4d6f              LDR      r5,|L1.23292|
;;;8577   	{
;;;8578   	char i,find_succes;
;;;8579   
;;;8580   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8581   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8582   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8583   		{
;;;8584   		uavt_set_error_cnt=60;
00593e  4e70              LDR      r6,|L1.23296|
005940  f8df81c0          LDR      r8,|L1.23300|
005944  7828              LDRB     r0,[r5,#0]            ;8576  ; uavt_set_stat
;;;8585   		}
;;;8586   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8587   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8588   	find_succes=0;
;;;8589   /*	for(i=0;i<NUMIST;i++)
;;;8590   		{
;;;8591   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8592   		else
;;;8593   			{
;;;8594   			find_succes=0;
;;;8595   			break;
;;;8596   			}
;;;8597   		}*/
;;;8598   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
005946  f8dfa1c0          LDR      r10,|L1.23304|
00594a  2400              MOVS     r4,#0                 ;8587
;;;8599   
;;;8600   	if(find_succes==1)
;;;8601   		{
;;;8602   		uavt_set_stat=uassSTEP2;
00594c  f04f0902          MOV      r9,#2
;;;8603   		}
;;;8604   	if(uavt_set_error_cnt)
;;;8605   		{
;;;8606   		uavt_set_error_cnt--;
;;;8607   		if(!uavt_set_error_cnt)
;;;8608   			{
;;;8609   			uavt_set_stat=uassOFF;
;;;8610   			uavt_set_result_stat=uasrsERR;
;;;8611   			avt_error_bps=100;
005950  f04f0b64          MOV      r11,#0x64
005954  2801              CMP      r0,#1                 ;8576
005956  d12e              BNE      |L1.22966|
005958  f8980000          LDRB     r0,[r8,#0]            ;8582  ; uavt_set_stat_old
00595c  2801              CMP      r0,#1                 ;8582
00595e  d002              BEQ      |L1.22886|
005960  f04f003c          MOV      r0,#0x3c              ;8584
005964  7030              STRB     r0,[r6,#0]            ;8584
                  |L1.22886|
005966  230a              MOVS     r3,#0xa               ;8587
005968  2200              MOVS     r2,#0                 ;8587
00596a  21e6              MOVS     r1,#0xe6              ;8587
00596c  20e1              MOVS     r0,#0xe1              ;8587
00596e  f7fffffe          BL       mess_send
005972  f04f0000          MOV      r0,#0                 ;8588
005976  4965              LDR      r1,|L1.23308|
005978  f9b12000          LDRSH    r2,[r1,#0]            ;8598  ; bps_U
00597c  f9ba1000          LDRSH    r1,[r10,#0]           ;8598  ; U_AVT
005980  f1a10301          SUB      r3,r1,#1              ;8598
005984  429a              CMP      r2,r3                 ;8598
005986  db04              BLT      |L1.22930|
005988  1c49              ADDS     r1,r1,#1              ;8598
00598a  428a              CMP      r2,r1                 ;8598
00598c  dc01              BGT      |L1.22930|
00598e  f04f0001          MOV      r0,#1                 ;8598
                  |L1.22930|
005992  2801              CMP      r0,#1                 ;8600
005994  d101              BNE      |L1.22938|
005996  f8859000          STRB     r9,[r5,#0]            ;8602
                  |L1.22938|
00599a  7830              LDRB     r0,[r6,#0]            ;8604  ; uavt_set_error_cnt
00599c  b158              CBZ      r0,|L1.22966|
00599e  f1a00001          SUB      r0,r0,#1              ;8606
0059a2  b2c0              UXTB     r0,r0                 ;8606
0059a4  7030              STRB     r0,[r6,#0]            ;8606
0059a6  b930              CBNZ     r0,|L1.22966|
0059a8  702c              STRB     r4,[r5,#0]            ;8609
0059aa  4859              LDR      r0,|L1.23312|
0059ac  f8809000          STRB     r9,[r0,#0]            ;8610
0059b0  4858              LDR      r0,|L1.23316|
0059b2  f880b000          STRB     r11,[r0,#0]
                  |L1.22966|
;;;8612   			}
;;;8613   		}
;;;8614   	}
;;;8615   if(uavt_set_stat==uassSTEP2)
0059b6  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8616   	{
;;;8617   	char i,find_succes;
;;;8618   
;;;8619   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0059b8  4957              LDR      r1,|L1.23320|
;;;8620   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0059ba  4858              LDR      r0,|L1.23324|
;;;8621   
;;;8622   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8623   		{
;;;8624   		uavt_set_error_cnt=60;
;;;8625   		}
;;;8626   
;;;8627   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8628   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8629   	find_succes=1;
;;;8630   
;;;8631   	for(i=0;i<NUMIST;i++)
;;;8632   		{
;;;8633   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8634   		else
;;;8635   			{
;;;8636   			find_succes=0;
;;;8637   			avt_error_bps=i+1;
;;;8638   			break;
;;;8639   			}
;;;8640   		}
;;;8641   
;;;8642   	if(find_succes==1)
;;;8643   		{
;;;8644   		uavt_set_stat=uassSTEP3;
;;;8645   		uavt_bps_pntr=0;
0059bc  4f58              LDR      r7,|L1.23328|
0059be  2a02              CMP      r2,#2                 ;8615
0059c0  d002              BEQ      |L1.22984|
;;;8646   		avt_plazma=0;
;;;8647   		}
;;;8648   
;;;8649   	if(uavt_set_error_cnt)
;;;8650   		{
;;;8651   		uavt_set_error_cnt--;
;;;8652   		if(!uavt_set_error_cnt)
;;;8653   			{
;;;8654   			uavt_set_stat=uassOFF;
;;;8655   			uavt_set_result_stat=uasrsERR;
;;;8656   			}
;;;8657   		}
;;;8658   	}
;;;8659   else if(uavt_set_stat==uassSTEP3)
0059c2  2a03              CMP      r2,#3
0059c4  d05e              BEQ      |L1.23172|
0059c6  e0fb              B        |L1.23488|
                  |L1.22984|
0059c8  f9ba2000          LDRSH    r2,[r10,#0]           ;8619  ; U_AVT
0059cc  f04f0365          MOV      r3,#0x65              ;8619
0059d0  fb02f303          MUL      r3,r2,r3              ;8619
0059d4  fbb3f3fb          UDIV     r3,r3,r11             ;8619
0059d8  468a              MOV      r10,r1                ;8619
0059da  800b              STRH     r3,[r1,#0]            ;8619
0059dc  eb021142          ADD      r1,r2,r2,LSL #5       ;8620
0059e0  eb010141          ADD      r1,r1,r1,LSL #1       ;8620
0059e4  fbb1f1fb          UDIV     r1,r1,r11             ;8620
0059e8  4683              MOV      r11,r0                ;8620
0059ea  8001              STRH     r1,[r0,#0]            ;8620
0059ec  f8980000          LDRB     r0,[r8,#0]            ;8622  ; uavt_set_stat_old
0059f0  2802              CMP      r0,#2                 ;8622
0059f2  d002              BEQ      |L1.23034|
0059f4  f04f003c          MOV      r0,#0x3c              ;8624
0059f8  7030              STRB     r0,[r6,#0]            ;8624
                  |L1.23034|
0059fa  230a              MOVS     r3,#0xa               ;8627
0059fc  21bf              MOVS     r1,#0xbf              ;8627
0059fe  20be              MOVS     r0,#0xbe              ;8627
005a00  f7fffffe          BL       mess_send
005a04  230a              MOVS     r3,#0xa               ;8628
005a06  2200              MOVS     r2,#0                 ;8628
005a08  21e6              MOVS     r1,#0xe6              ;8628
005a0a  20e1              MOVS     r0,#0xe1              ;8628
005a0c  f7fffffe          BL       mess_send
005a10  f04f0201          MOV      r2,#1                 ;8629
005a14  f04f0000          MOV      r0,#0                 ;8631
005a18  4943              LDR      r1,|L1.23336|
005a1a  f9ba3000          LDRSH    r3,[r10,#0]           ;8631
005a1e  f8dfe104          LDR      lr,|L1.23332|
005a22  f9bbc000          LDRSH    r12,[r11,#0]          ;8633
005a26  f9b1a000          LDRSH    r10,[r1,#0]           ;8631
005a2a  e00d              B        |L1.23112|
                  |L1.23084|
005a2c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8633
005a30  eb011100          ADD      r1,r1,r0,LSL #4       ;8633
005a34  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8633
005a38  69c9              LDR      r1,[r1,#0x1c]         ;8633
005a3a  4299              CMP      r1,r3                 ;8633
005a3c  da09              BGE      |L1.23122|
005a3e  4561              CMP      r1,r12                ;8633
005a40  dd07              BLE      |L1.23122|
005a42  f1000001          ADD      r0,r0,#1              ;8631
005a46  b2c0              UXTB     r0,r0                 ;8631
                  |L1.23112|
005a48  4550              CMP      r0,r10                ;8631
005a4a  dbef              BLT      |L1.23084|
                  |L1.23116|
005a4c  2a01              CMP      r2,#1                 ;8642
005a4e  d007              BEQ      |L1.23136|
005a50  e00c              B        |L1.23148|
                  |L1.23122|
005a52  f04f0200          MOV      r2,#0                 ;8636
005a56  492f              LDR      r1,|L1.23316|
005a58  f1000001          ADD      r0,r0,#1              ;8637
005a5c  7008              STRB     r0,[r1,#0]            ;8637
005a5e  e7f5              B        |L1.23116|
                  |L1.23136|
005a60  f04f0003          MOV      r0,#3                 ;8644
005a64  7028              STRB     r0,[r5,#0]            ;8644
005a66  703c              STRB     r4,[r7,#0]            ;8645
005a68  4830              LDR      r0,|L1.23340|
005a6a  7004              STRB     r4,[r0,#0]            ;8646
                  |L1.23148|
005a6c  7830              LDRB     r0,[r6,#0]            ;8649  ; uavt_set_error_cnt
005a6e  b370              CBZ      r0,|L1.23246|
005a70  f1a00001          SUB      r0,r0,#1              ;8651
005a74  b2c0              UXTB     r0,r0                 ;8651
005a76  7030              STRB     r0,[r6,#0]            ;8651
005a78  bb48              CBNZ     r0,|L1.23246|
005a7a  702c              STRB     r4,[r5,#0]            ;8654
005a7c  4824              LDR      r0,|L1.23312|
005a7e  f8809000          STRB     r9,[r0,#0]            ;8655
005a82  e09d              B        |L1.23488|
                  |L1.23172|
;;;8660   	{
;;;8661   	char i,find_succes;
;;;8662   
;;;8663   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005a84  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005a88  f04f0365          MOV      r3,#0x65
005a8c  fb02f303          MUL      r3,r2,r3
005a90  fbb3f3fb          UDIV     r3,r3,r11
005a94  468a              MOV      r10,r1
005a96  800b              STRH     r3,[r1,#0]
;;;8664   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005a98  eb021142          ADD      r1,r2,r2,LSL #5
005a9c  eb010141          ADD      r1,r1,r1,LSL #1
005aa0  fbb1f1fb          UDIV     r1,r1,r11
005aa4  4683              MOV      r11,r0
005aa6  8001              STRH     r1,[r0,#0]
;;;8665   	
;;;8666   	if(uavt_set_stat_old!=uavt_set_stat)
005aa8  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005aac  2803              CMP      r0,#3
005aae  d000              BEQ      |L1.23218|
;;;8667   		{
;;;8668   		uavt_bps_pntr=0;
005ab0  703c              STRB     r4,[r7,#0]
                  |L1.23218|
;;;8669   		}
;;;8670   
;;;8671   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005ab2  230a              MOVS     r3,#0xa
005ab4  21bf              MOVS     r1,#0xbf
005ab6  20be              MOVS     r0,#0xbe
005ab8  f7fffffe          BL       mess_send
;;;8672   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005abc  230a              MOVS     r3,#0xa
005abe  2200              MOVS     r2,#0
005ac0  21e6              MOVS     r1,#0xe6
005ac2  20e1              MOVS     r0,#0xe1
005ac4  f7fffffe          BL       mess_send
;;;8673   
;;;8674   	find_succes=1;
005ac8  f04f0601          MOV      r6,#1
;;;8675   	for(i=0;i<NUMIST;i++)
005acc  e030              B        |L1.23344|
                  |L1.23246|
005ace  e077              B        |L1.23488|
                  |L1.23248|
                          DCD      BAT_C_POINT_5
                  |L1.23252|
                          DCD      BAT_C_POINT_10
                  |L1.23256|
                          DCD      BAT_C_POINT_20
                  |L1.23260|
                          DCD      BAT_K_OLD
                  |L1.23264|
                          DCD      0xfff0bdc0
                  |L1.23268|
                          DCD      Ib_ips_termokompensat
                  |L1.23272|
                          DCD      IKB
                  |L1.23276|
                          DCD      bat
                  |L1.23280|
                          DCD      out_U
                  |L1.23284|
                          DCD      u_necc_up
                  |L1.23288|
                          DCD      u_necc_dn
                  |L1.23292|
                          DCD      uavt_set_stat
                  |L1.23296|
                          DCD      uavt_set_error_cnt
                  |L1.23300|
                          DCD      uavt_set_stat_old
                  |L1.23304|
                          DCD      U_AVT
                  |L1.23308|
                          DCD      bps_U
                  |L1.23312|
                          DCD      uavt_set_result_stat
                  |L1.23316|
                          DCD      avt_error_bps
                  |L1.23320|
                          DCD      u_max_temp
                  |L1.23324|
                          DCD      u_min_temp
                  |L1.23328|
                          DCD      uavt_bps_pntr
                  |L1.23332|
                          DCD      bps
                  |L1.23336|
                          DCD      NUMIST
                  |L1.23340|
                          DCD      avt_plazma
                  |L1.23344|
005b30  f04f0000          MOV      r0,#0
005b34  f8df9414          LDR      r9,|L1.24396|
005b38  f9ba2000          LDRSH    r2,[r10,#0]
005b3c  f8dfc408          LDR      r12,|L1.24392|
005b40  f9bb3000          LDRSH    r3,[r11,#0]           ;8633
005b44  f9b9a000          LDRSH    r10,[r9,#0]           ;8631
005b48  e00d              B        |L1.23398|
                  |L1.23370|
;;;8676   		{
;;;8677   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005b4a  eb0001c0          ADD      r1,r0,r0,LSL #3
005b4e  eb011100          ADD      r1,r1,r0,LSL #4
005b52  eb0c0181          ADD      r1,r12,r1,LSL #2
005b56  69c9              LDR      r1,[r1,#0x1c]
005b58  4291              CMP      r1,r2
005b5a  da0f              BGE      |L1.23420|
005b5c  4299              CMP      r1,r3
005b5e  dd0d              BLE      |L1.23420|
005b60  f1000001          ADD      r0,r0,#1              ;8675
005b64  b2c0              UXTB     r0,r0                 ;8675
                  |L1.23398|
005b66  4550              CMP      r0,r10                ;8675
005b68  dbef              BLT      |L1.23370|
                  |L1.23402|
;;;8678   		else
;;;8679   			{
;;;8680   			find_succes=0;
;;;8681   			break;
;;;8682   			}
;;;8683   		}
;;;8684   
;;;8685   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005b6a  20d7              MOVS     r0,#0xd7
005b6c  f7fffffe          BL       mess_find
005b70  b1a0              CBZ      r0,|L1.23452|
005b72  48f7              LDR      r0,|L1.24400|
005b74  6800              LDR      r0,[r0,#0]  ; mess_data
005b76  28d9              CMP      r0,#0xd9
005b78  d003              BEQ      |L1.23426|
005b7a  e00f              B        |L1.23452|
                  |L1.23420|
005b7c  f04f0600          MOV      r6,#0                 ;8680
005b80  e7f3              B        |L1.23402|
                  |L1.23426|
;;;8686   		{
;;;8687   		if(++uavt_bps_pntr>=NUMIST)
005b82  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005b84  1c40              ADDS     r0,r0,#1
005b86  b2c0              UXTB     r0,r0
005b88  7038              STRB     r0,[r7,#0]
005b8a  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005b8e  4288              CMP      r0,r1
005b90  db04              BLT      |L1.23452|
;;;8688   			{
;;;8689   			uavt_set_stat=uassOFF;
005b92  702c              STRB     r4,[r5,#0]
;;;8690   			uavt_set_result_stat=uasrsSUCCESS;
005b94  49ef              LDR      r1,|L1.24404|
005b96  f04f0003          MOV      r0,#3
005b9a  7008              STRB     r0,[r1,#0]
                  |L1.23452|
;;;8691   			}
;;;8692   		//uavt_bps_pntr++;
;;;8693   		//if()
;;;8694   		}
;;;8695   	if(find_succes==1)
005b9c  2e01              CMP      r6,#1
005b9e  d10f              BNE      |L1.23488|
;;;8696   		{
;;;8697   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005ba0  20ee              MOVS     r0,#0xee
005ba2  e9cd0400          STRD     r0,r4,[sp,#0]
005ba6  9402              STR      r4,[sp,#8]
005ba8  9403              STR      r4,[sp,#0xc]
005baa  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005bac  4603              MOV      r3,r0
005bae  2216              MOVS     r2,#0x16
005bb0  4608              MOV      r0,r1
005bb2  f7fffffe          BL       mcp2515_transmit
;;;8698   		avt_plazma++;
005bb6  48e8              LDR      r0,|L1.24408|
005bb8  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005bba  f1010101          ADD      r1,r1,#1
005bbe  7001              STRB     r1,[r0,#0]
                  |L1.23488|
;;;8699   		}
;;;8700   	}
;;;8701   
;;;8702   
;;;8703   
;;;8704   uavt_set_stat_old=uavt_set_stat;
005bc0  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005bc2  f8880000          STRB     r0,[r8,#0]
;;;8705   
;;;8706   }
005bc6  e8bd9fff          POP      {r0-r12,pc}
;;;8707   
                          ENDP

                  u_necc_hndl PROC
;;;8782   //-----------------------------------------------
;;;8783   void u_necc_hndl(void)
005bca  b5f8              PUSH     {r3-r7,lr}
;;;8784   {
;;;8785   signed long temp_L;
;;;8786   signed long temp_SL;
;;;8787   //signed short temp_SS;
;;;8788   
;;;8789   //char i;
;;;8790   
;;;8791   //temp_SS=0;
;;;8792   signed short t[2];
;;;8793   
;;;8794   
;;;8795   
;;;8796   
;;;8797   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8798   
;;;8799   if(!TERMOKOMPENS)
005bcc  48e3              LDR      r0,|L1.24412|
;;;8800   	{
;;;8801   	//u_necc=U0B;
;;;8802   	u_necc=UB20;
;;;8803   	}
;;;8804   else
;;;8805   	{
;;;8806   	if(ND_EXT[0])t[0]=20;
;;;8807   	else t[0]=t_ext[0];
;;;8808   
;;;8809   	mat_temper=t[0];
;;;8810   			
;;;8811   	if(mat_temper<0)temp_SL=UB0; 
;;;8812   	else 
;;;8813   		{
;;;8814   		if(mat_temper>40)mat_temper=40; 
;;;8815   		temp_SL=(UB20-UB0)*10;
;;;8816   		temp_SL*=mat_temper;
;;;8817   		temp_SL/=200;
;;;8818   		temp_SL+=UB0;
;;;8819   		}
;;;8820   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005bce  4de6              LDR      r5,|L1.24424|
005bd0  4ce6              LDR      r4,|L1.24428|
005bd2  8801              LDRH     r1,[r0,#0]            ;8799  ; TERMOKOMPENS
005bd4  48e2              LDR      r0,|L1.24416|
005bd6  f9b03000          LDRSH    r3,[r0,#0]            ;8802
;;;8821   		{
;;;8822   		temp_SL=UVZ;
005bda  48e2              LDR      r0,|L1.24420|
005bdc  f9b02000          LDRSH    r2,[r0,#0]
005be0  b139              CBZ      r1,|L1.23538|
005be2  48e3              LDR      r0,|L1.24432|
005be4  7800              LDRB     r0,[r0,#0]            ;8806  ; ND_EXT
005be6  b130              CBZ      r0,|L1.23542|
005be8  f04f0014          MOV      r0,#0x14              ;8806
005bec  f8ad0000          STRH     r0,[sp,#0]            ;8806
005bf0  e005              B        |L1.23550|
                  |L1.23538|
005bf2  8023              STRH     r3,[r4,#0]            ;8802
005bf4  e02c              B        |L1.23632|
                  |L1.23542|
005bf6  48df              LDR      r0,|L1.24436|
005bf8  8800              LDRH     r0,[r0,#0]            ;8807  ; t_ext
005bfa  f8ad0000          STRH     r0,[sp,#0]            ;8807
                  |L1.23550|
005bfe  4ede              LDR      r6,|L1.24440|
005c00  f9bd1000          LDRSH    r1,[sp,#0]            ;8809
005c04  6031              STR      r1,[r6,#0]            ;8809  ; mat_temper
005c06  48dd              LDR      r0,|L1.24444|
005c08  2900              CMP      r1,#0                 ;8811
005c0a  f9b00000          LDRSH    r0,[r0,#0]            ;8811
005c0e  db12              BLT      |L1.23606|
005c10  2928              CMP      r1,#0x28              ;8814
005c12  dd02              BLE      |L1.23578|
005c14  f04f0128          MOV      r1,#0x28              ;8814
005c18  6031              STR      r1,[r6,#0]            ;8814  ; mat_temper
                  |L1.23578|
005c1a  eba30100          SUB      r1,r3,r0              ;8815
005c1e  eb010181          ADD      r1,r1,r1,LSL #2       ;8815
005c22  ea4f0141          LSL      r1,r1,#1              ;8815
005c26  6833              LDR      r3,[r6,#0]            ;8816  ; mat_temper
005c28  fb01f103          MUL      r1,r1,r3              ;8816
005c2c  f04f03c8          MOV      r3,#0xc8              ;8817
005c30  fb91f1f3          SDIV     r1,r1,r3              ;8817
005c34  4408              ADD      r0,r0,r1              ;8818
                  |L1.23606|
005c36  f8951023          LDRB     r1,[r5,#0x23]         ;8820  ; spc_stat
005c3a  2902              CMP      r1,#2                 ;8820
005c3c  d107              BNE      |L1.23630|
005c3e  49d0              LDR      r1,|L1.24448|
005c40  7809              LDRB     r1,[r1,#0]            ;8820  ; sk_stat
005c42  2901              CMP      r1,#1                 ;8820
005c44  d002              BEQ      |L1.23628|
005c46  49cf              LDR      r1,|L1.24452|
005c48  8809              LDRH     r1,[r1,#0]            ;8820  ; VZ_CH_VENT_BLOK
005c4a  b901              CBNZ     r1,|L1.23630|
                  |L1.23628|
005c4c  4610              MOV      r0,r2
                  |L1.23630|
;;;8823   		}
;;;8824   	u_necc=(unsigned int)temp_SL;
005c4e  8020              STRH     r0,[r4,#0]
                  |L1.23632|
;;;8825   	///u_necc=3456;
;;;8826   	}  
;;;8827   
;;;8828   //u_necc=2355;
;;;8829   
;;;8830   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005c50  48cd              LDR      r0,|L1.24456|
005c52  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005c54  b918              CBNZ     r0,|L1.23646|
005c56  48cd              LDR      r0,|L1.24460|
005c58  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005c5a  2802              CMP      r0,#2
005c5c  d102              BNE      |L1.23652|
                  |L1.23646|
;;;8831   	{
;;;8832   	u_necc=speedChrgVolt;
005c5e  48cc              LDR      r0,|L1.24464|
005c60  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005c62  8020              STRH     r0,[r4,#0]
                  |L1.23652|
;;;8833   	}
;;;8834   if(hv_vz_stat==hvsWRK)
005c64  48cb              LDR      r0,|L1.24468|
005c66  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005c68  2805              CMP      r0,#5
005c6a  d100              BNE      |L1.23662|
;;;8835   	{
;;;8836   	u_necc=UVZ;
005c6c  8022              STRH     r2,[r4,#0]
                  |L1.23662|
;;;8837   	}
;;;8838   if(vz1_stat==vz1sWRK)
005c6e  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005c70  280a              CMP      r0,#0xa
005c72  d102              BNE      |L1.23674|
;;;8839   	{
;;;8840   	u_necc=UZ_U;
005c74  48c8              LDR      r0,|L1.24472|
005c76  8800              LDRH     r0,[r0,#0]  ; UZ_U
005c78  8020              STRH     r0,[r4,#0]
                  |L1.23674|
;;;8841   	}
;;;8842   if(vz2_stat==vz2sWRK1)
005c7a  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005c7c  280a              CMP      r0,#0xa
005c7e  d102              BNE      |L1.23686|
;;;8843   	{
;;;8844   	u_necc=FZ_U1;
005c80  49c6              LDR      r1,|L1.24476|
005c82  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005c84  8021              STRH     r1,[r4,#0]
                  |L1.23686|
;;;8845   	}
;;;8846   if(vz2_stat==vz2sWRK2)
005c86  280b              CMP      r0,#0xb
005c88  d102              BNE      |L1.23696|
;;;8847   	{
;;;8848   	u_necc=FZ_U2;
005c8a  48c5              LDR      r0,|L1.24480|
005c8c  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005c8e  8020              STRH     r0,[r4,#0]
                  |L1.23696|
;;;8849   	}
;;;8850   
;;;8851   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005c90  48c4              LDR      r0,|L1.24484|
005c92  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005c94  2801              CMP      r0,#1
005c96  d001              BEQ      |L1.23708|
005c98  2802              CMP      r0,#2
005c9a  d102              BNE      |L1.23714|
                  |L1.23708|
;;;8852   	{
;;;8853   	u_necc=U_AVT;
005c9c  48c2              LDR      r0,|L1.24488|
005c9e  8800              LDRH     r0,[r0,#0]  ; U_AVT
005ca0  8020              STRH     r0,[r4,#0]
                  |L1.23714|
;;;8854   	}
;;;8855   
;;;8856   if(mess_find_unvol(MESS2UNECC_HNDL))
005ca2  20be              MOVS     r0,#0xbe
005ca4  f7fffffe          BL       mess_find_unvol
005ca8  b128              CBZ      r0,|L1.23734|
;;;8857   	{		
;;;8858   	if(mess_data[0]==PARAM_UNECC_SET)
005caa  48a9              LDR      r0,|L1.24400|
005cac  6801              LDR      r1,[r0,#0]  ; mess_data
005cae  29bf              CMP      r1,#0xbf
005cb0  d101              BNE      |L1.23734|
;;;8859   		{
;;;8860   		u_necc=mess_data[1];
005cb2  6840              LDR      r0,[r0,#4]  ; mess_data
005cb4  8020              STRH     r0,[r4,#0]
                  |L1.23734|
;;;8861   		}		
;;;8862   	} 
;;;8863   
;;;8864   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8865   #endif
;;;8866   
;;;8867   
;;;8868   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8869   
;;;8870   #ifndef UKU_TELECORE2015
;;;8871   #ifndef UKU_TELECORE2017
;;;8872   if(unh_cnt0<10)
;;;8873   	{
;;;8874   	unh_cnt0++;
;;;8875   	if(unh_cnt0>=10)
;;;8876   		{
;;;8877   		unh_cnt0=0;
;;;8878   		b1Hz_unh=1;
;;;8879   		}
;;;8880   	}
;;;8881   
;;;8882   if(unh_cnt1<5)
;;;8883   	{
;;;8884   	unh_cnt1++;
;;;8885   	if(unh_cnt1==5)
;;;8886   		{
;;;8887   		unh_cnt1=0;
;;;8888   //		b2Hz_unh=1;
;;;8889   		}
;;;8890   	} 
;;;8891   
;;;8892   
;;;8893   
;;;8894   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8895   	{		
;;;8896   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8897   		{
;;;8898   		u_necc=mess_data[1];
;;;8899   		}		
;;;8900   	}
;;;8901   
;;;8902   
;;;8903   else if(b1Hz_unh)
;;;8904   	{
;;;8905   	
;;;8906   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8907   		{
;;;8908   		
;;;8909   		u_necc=U0B;
;;;8910   		#ifdef IPS_SGEP_GAZPROM
;;;8911   		u_necc=UB0;
;;;8912   		#endif
;;;8913   		}
;;;8914   	else 
;;;8915   		{
;;;8916   		if(BAT_TYPE==0) //если батарея обычная
;;;8917   			{
;;;8918   			for(i=0;i<2;i++)
;;;8919   				{
;;;8920   				if(BAT_IS_ON[i]==bisON)
;;;8921   					{
;;;8922   					if(bat[i]._nd)t[i]=20;
;;;8923   					else t[i]=bat[i]._Tb;
;;;8924   					}
;;;8925   				else
;;;8926   					{
;;;8927   					t[i]=-20;
;;;8928   					}
;;;8929   				}
;;;8930   			if(t[0]>t[1])mat_temper=t[0];
;;;8931   			else mat_temper=t[1];
;;;8932   			
;;;8933   		
;;;8934   			if(mat_temper<0)temp_SL=UB0; 
;;;8935   			else 
;;;8936   				{
;;;8937   				if(mat_temper>40)mat_temper=40; 
;;;8938   				temp_SL=(UB20-UB0)*10;
;;;8939   				temp_SL*=mat_temper;
;;;8940   				temp_SL/=200;
;;;8941   				temp_SL+=UB0;
;;;8942   				}
;;;8943   			if((spc_stat==spcVZ)
;;;8944   #ifndef UKU_6U			
;;;8945   			&&(sk_stat[0]==1)
;;;8946   #endif //UKU_6U
;;;8947   			)
;;;8948   				{
;;;8949   				temp_SL=UVZ;
;;;8950   				}
;;;8951   			u_necc=(unsigned int)temp_SL;
;;;8952   			}
;;;8953   		else if(BAT_TYPE==1) //если батарея китайская
;;;8954   			{
;;;8955   			u_necc=U0B;
;;;8956   					
;;;8957   			u_necc=bat[0]._Ub+10;
;;;8958   
;;;8959   			
;;;8960   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8961   				{
;;;8962   				u_necc=UVZ;
;;;8963   				}
;;;8964   			if(u_necc>=UB0) u_necc=UB0;
;;;8965   			if(u_necc>=UB20) u_necc=UB20;
;;;8966   			}
;;;8967   		}  
;;;8968   	}
;;;8969   #endif
;;;8970   #endif
;;;8971   
;;;8972   #ifdef UKU_TELECORE2015
;;;8973   
;;;8974   if(unh_cnt0<10)
;;;8975   	{
;;;8976   	unh_cnt0++;
;;;8977   	if(unh_cnt0>=10)
;;;8978   		{
;;;8979   		unh_cnt0=0;
;;;8980   		b1Hz_unh=1;
;;;8981   		}
;;;8982   	}
;;;8983   
;;;8984   if(unh_cnt1<5)
;;;8985   	{
;;;8986   	unh_cnt1++;
;;;8987   	if(unh_cnt1==5)
;;;8988   		{
;;;8989   		unh_cnt1=0;
;;;8990   //		b2Hz_unh=1;
;;;8991   		}
;;;8992   	} 
;;;8993   
;;;8994   
;;;8995   
;;;8996   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8997   	{		
;;;8998   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8999   		{
;;;9000   		u_necc=mess_data[1];
;;;9001   		}		
;;;9002   	}
;;;9003   
;;;9004   
;;;9005   else if(b1Hz_unh)
;;;9006   	{
;;;9007   	b1Hz_unh=0;
;;;9008   
;;;9009   	if(BAT_TYPE==0)
;;;9010   		{
;;;9011   		if(bat[0]._nd)mat_temper=20;
;;;9012   		else mat_temper=bat[0]._Tb;
;;;9013   
;;;9014   			
;;;9015   		if(mat_temper<0)temp_SL=UB0; 
;;;9016   		else 
;;;9017   			{
;;;9018   			if(mat_temper>40)mat_temper=40; 
;;;9019   			temp_SL=(UB20-UB0)*10;
;;;9020   			temp_SL*=mat_temper;
;;;9021   			temp_SL/=200;
;;;9022   			temp_SL+=UB0;
;;;9023   			}
;;;9024   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9025   			{
;;;9026   			temp_SL=UVZ;
;;;9027   			}
;;;9028   		u_necc=(unsigned int)temp_SL;
;;;9029   	///u_necc=3456;
;;;9030   		}
;;;9031   	else if(BAT_TYPE==1)
;;;9032   		{
;;;9033   		
;;;9034   		gran(&DU_LI_BAT,1,30);
;;;9035   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9036   		gran(&u_necc,0,UB0);
;;;9037   		gran(&u_necc,0,UB20);
;;;9038   		gran(&u_necc,0,540);		
;;;9039   
;;;9040   
;;;9041   		if(li_bat._batStat!=bsOK)
;;;9042   			{
;;;9043   			u_necc=U0B;
;;;9044   			}
;;;9045   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9046   			{
;;;9047   			u_necc=UVZ;
;;;9048   			}
;;;9049   		/* 
;;;9050   		u_necc=U0B;
;;;9051   		
;;;9052   
;;;9053   	
;;;9054   		u_necc=UB0;
;;;9055   		u_necc=li_bat._Ub+10;
;;;9056   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;9057   			{
;;;9058   			lakb_error_cnt++;
;;;9059   			if(lakb_error_cnt>=30)
;;;9060   				{
;;;9061   				lakb_error_cnt=30;
;;;9062   				u_necc=U0B;
;;;9063   				}
;;;9064   			}
;;;9065   		else lakb_error_cnt=0;*/
;;;9066   		}
;;;9067   	else if(BAT_TYPE==2)
;;;9068   		{
;;;9069   		u_necc=U0B;
;;;9070   		
;;;9071   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9072   			{
;;;9073   			u_necc=UVZ;
;;;9074   			}
;;;9075   	
;;;9076   		u_necc=UB0;
;;;9077   		}
;;;9078   
;;;9079   	else if(BAT_TYPE==3)
;;;9080   		{
;;;9081   		u_necc=U0B;
;;;9082   		
;;;9083   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9084   			{
;;;9085   			u_necc=UVZ;
;;;9086   			}
;;;9087   
;;;9088   		gran(&DU_LI_BAT,1,30);
;;;9089   
;;;9090   
;;;9091   		if(lakbNotErrorNum==0)
;;;9092   			{
;;;9093   			u_necc=U0B;
;;;9094   			}
;;;9095   		else 
;;;9096   			{
;;;9097   			signed short i;
;;;9098   			//signed short u_necc_max;
;;;9099   			//u_necc_max=0;
;;;9100   			char soc_flag=0;
;;;9101   
;;;9102   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9103   				{
;;;9104   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9105   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9106   				}
;;;9107   
;;;9108   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9109   			}
;;;9110   		gran(&u_necc,0,UB0);
;;;9111   		//gran(&u_necc,0,UB20);
;;;9112   		gran(&u_necc,0,540);
;;;9113   		}
;;;9114   	}
;;;9115   
;;;9116   #endif 
;;;9117   
;;;9118   #ifdef UKU_TELECORE2017
;;;9119   
;;;9120   if(unh_cnt0<10)
;;;9121   	{
;;;9122   	unh_cnt0++;
;;;9123   	if(unh_cnt0>=10)
;;;9124   		{
;;;9125   		unh_cnt0=0;
;;;9126   		b1Hz_unh=1;
;;;9127   		}
;;;9128   	}
;;;9129   
;;;9130   if(unh_cnt1<5)
;;;9131   	{
;;;9132   	unh_cnt1++;
;;;9133   	if(unh_cnt1==5)
;;;9134   		{
;;;9135   		unh_cnt1=0;
;;;9136   //		b2Hz_unh=1;
;;;9137   		}
;;;9138   	} 
;;;9139   
;;;9140   
;;;9141   
;;;9142   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9143   	{		
;;;9144   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9145   		{
;;;9146   		u_necc=mess_data[1];
;;;9147   		}		
;;;9148   	}
;;;9149   
;;;9150   
;;;9151   else if(b1Hz_unh)
;;;9152   	{
;;;9153   	b1Hz_unh=0;
;;;9154   
;;;9155   	if(BAT_TYPE==0)
;;;9156   		{
;;;9157   		if(bat[0]._nd)mat_temper=20;
;;;9158   		else mat_temper=bat[0]._Tb;
;;;9159   
;;;9160   			
;;;9161   		if(mat_temper<0)temp_SL=UB0; 
;;;9162   		else 
;;;9163   			{
;;;9164   			if(mat_temper>40)mat_temper=40; 
;;;9165   			temp_SL=(UB20-UB0)*10;
;;;9166   			temp_SL*=mat_temper;
;;;9167   			temp_SL/=200;
;;;9168   			temp_SL+=UB0;
;;;9169   			}
;;;9170   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9171   			{
;;;9172   			temp_SL=UVZ;
;;;9173   			}
;;;9174   		u_necc=(unsigned int)temp_SL;
;;;9175   	///u_necc=3456;
;;;9176   		}
;;;9177   	else if(BAT_TYPE==1)
;;;9178   		{
;;;9179   		
;;;9180   		gran(&DU_LI_BAT,1,30);
;;;9181   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9182   		gran(&u_necc,0,UB0);
;;;9183   		gran(&u_necc,0,UB20);
;;;9184   		gran(&u_necc,0,540);		
;;;9185   
;;;9186   
;;;9187   		if(li_bat._batStat!=bsOK)
;;;9188   			{
;;;9189   			u_necc=U0B;
;;;9190   			}
;;;9191   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9192   			{
;;;9193   			u_necc=UVZ;
;;;9194   			}
;;;9195   		}
;;;9196   	else if(BAT_TYPE==2)
;;;9197   		{
;;;9198   		u_necc=U0B;
;;;9199   		
;;;9200   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9201   			{
;;;9202   			u_necc=UVZ;
;;;9203   			}
;;;9204   	
;;;9205   		u_necc=UB0;
;;;9206   		}
;;;9207   
;;;9208   	else if(BAT_TYPE==3)
;;;9209   		{
;;;9210   		u_necc=U0B;
;;;9211   		
;;;9212   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9213   			{
;;;9214   			u_necc=UVZ;
;;;9215   			}
;;;9216   
;;;9217   		gran(&DU_LI_BAT,1,30);
;;;9218   
;;;9219   
;;;9220   		if(lakbNotErrorNum==0)
;;;9221   			{
;;;9222   			u_necc=U0B;
;;;9223   			}
;;;9224   		else 
;;;9225   			{
;;;9226   			signed short i;
;;;9227   			//signed short u_necc_max;
;;;9228   			//u_necc_max=0;
;;;9229   			char soc_flag=0;
;;;9230   
;;;9231   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9232   				{
;;;9233   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9234   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9235   				}
;;;9236   
;;;9237   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9238   			}
;;;9239   		gran(&u_necc,0,UB0);
;;;9240   		//gran(&u_necc,0,UB20);
;;;9241   		gran(&u_necc,0,540);
;;;9242   		}
;;;9243   	}
;;;9244   
;;;9245   #endif 
;;;9246   //u_necc=2356;
;;;9247   
;;;9248   #ifdef UKU_FSO
;;;9249   
;;;9250   if(unh_cnt0<10)
;;;9251   	{
;;;9252   	unh_cnt0++;
;;;9253   	if(unh_cnt0>=10)
;;;9254   		{
;;;9255   		unh_cnt0=0;
;;;9256   		b1Hz_unh=1;
;;;9257   		}
;;;9258   	}
;;;9259   
;;;9260   if(unh_cnt1<5)
;;;9261   	{
;;;9262   	unh_cnt1++;
;;;9263   	if(unh_cnt1==5)
;;;9264   		{
;;;9265   		unh_cnt1=0;
;;;9266   //		b2Hz_unh=1;
;;;9267   		}
;;;9268   	} 
;;;9269   
;;;9270   
;;;9271   
;;;9272   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9273   	{		
;;;9274   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9275   		{
;;;9276   		u_necc=mess_data[1];
;;;9277   		}		
;;;9278   	}
;;;9279   
;;;9280   
;;;9281   else if(b1Hz_unh)
;;;9282   	{
;;;9283   	b1Hz_unh=0;
;;;9284   
;;;9285   	if(BAT_TYPE==4)
;;;9286   		{
;;;9287   		u_necc=U0B;
;;;9288   		
;;;9289   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9290   			{
;;;9291   			u_necc=UVZ;
;;;9292   			}
;;;9293   
;;;9294   		gran(&DU_LI_BAT,1,30);
;;;9295   
;;;9296   
;;;9297   		if(lakbNotErrorNum==0)
;;;9298   			{
;;;9299   			u_necc=U0B;
;;;9300   			}
;;;9301   		else 
;;;9302   			{
;;;9303   			signed short i;
;;;9304   			//signed short u_necc_max;
;;;9305   			//u_necc_max=0;
;;;9306   			char soc_flag=0;
;;;9307   
;;;9308   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9309   				{
;;;9310   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9311   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9312   				}
;;;9313   
;;;9314   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9315   			}
;;;9316   
;;;9317   		u_necc=512;
;;;9318   		gran(&u_necc,0,UB0);
;;;9319   		//gran(&u_necc,0,UB20);
;;;9320   		gran(&u_necc,0,540);
;;;9321   		}
;;;9322   	}
;;;9323   
;;;9324   #endif //UKU_FSO
;;;9325   
;;;9326   
;;;9327   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9328   	{
;;;9329   	u_necc=speedChrgVolt;
;;;9330   	}
;;;9331   #endif//gran(&u_necc,400,UMAX);
;;;9332   
;;;9333   
;;;9334   
;;;9335   temp_L=(signed long) u_necc;
005cb6  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9336   temp_L*=98L;
005cba  f04f0162          MOV      r1,#0x62
005cbe  fb00f101          MUL      r1,r0,r1
;;;9337   temp_L/=100L;
005cc2  f04f0264          MOV      r2,#0x64
005cc6  fb91f1f2          SDIV     r1,r1,r2
;;;9338   u_necc_dn=(signed short)temp_L;
005cca  4bb8              LDR      r3,|L1.24492|
005ccc  8019              STRH     r1,[r3,#0]
;;;9339   
;;;9340   temp_L=(signed long) u_necc;
;;;9341   temp_L*=102L;
005cce  f04f0166          MOV      r1,#0x66
005cd2  fb00f001          MUL      r0,r0,r1
;;;9342   temp_L/=100L;
005cd6  fb90f0f2          SDIV     r0,r0,r2
;;;9343   u_necc_up=(signed short)temp_L;
005cda  49b5              LDR      r1,|L1.24496|
005cdc  8008              STRH     r0,[r1,#0]
;;;9344   /*
;;;9345   #ifdef IPS_SGEP_GAZPROM
;;;9346   u_necc=248;
;;;9347   #endif */
;;;9348   }
005cde  bdf8              POP      {r3-r7,pc}
;;;9349   
                          ENDP

                  num_necc_hndl PROC
;;;9351   //-----------------------------------------------
;;;9352   void num_necc_hndl(void)
005ce0  e92d41f0          PUSH     {r4-r8,lr}
;;;9353   {
;;;9354   
;;;9355   static short num_necc_block_cnt;
;;;9356   if(num_necc_block_cnt) num_necc_block_cnt--;
005ce4  4ca0              LDR      r4,|L1.24424|
005ce6  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005cea  b110              CBZ      r0,|L1.23794|
005cec  f1a00001          SUB      r0,r0,#1
005cf0  8720              STRH     r0,[r4,#0x38]
                  |L1.23794|
;;;9357   
;;;9358   Isumm_=Isumm;
005cf2  48b0              LDR      r0,|L1.24500|
005cf4  4db0              LDR      r5,|L1.24504|
005cf6  8800              LDRH     r0,[r0,#0]  ; Isumm
005cf8  8028              STRH     r0,[r5,#0]
;;;9359   
;;;9360   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005cfa  4eb0              LDR      r6,|L1.24508|
005cfc  270a              MOVS     r7,#0xa
005cfe  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005d02  2800              CMP      r0,#0
005d04  da06              BGE      |L1.23828|
005d06  f7fffffe          BL       abs
005d0a  fb90f0f7          SDIV     r0,r0,r7
005d0e  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d10  4408              ADD      r0,r0,r1
005d12  8028              STRH     r0,[r5,#0]
                  |L1.23828|
;;;9361   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005d14  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005d18  2800              CMP      r0,#0
005d1a  da06              BGE      |L1.23850|
005d1c  f7fffffe          BL       abs
005d20  fb90f0f7          SDIV     r0,r0,r7
005d24  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d26  4408              ADD      r0,r0,r1
005d28  8028              STRH     r0,[r5,#0]
                  |L1.23850|
;;;9362   
;;;9363   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005d2a  49a5              LDR      r1,|L1.24512|
005d2c  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005d30  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005d34  fb90f1f1          SDIV     r1,r0,r1
005d38  f1010101          ADD      r1,r1,#1
005d3c  b2c9              UXTB     r1,r1
005d3e  77e1              STRB     r1,[r4,#0x1f]
;;;9364   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9365   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9366   
;;;9367   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005d40  4aa0              LDR      r2,|L1.24516|
005d42  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005d46  fb90f0f2          SDIV     r0,r0,r2
005d4a  f1000001          ADD      r0,r0,#1
005d4e  b2c2              UXTB     r2,r0
005d50  f8842020          STRB     r2,[r4,#0x20]
;;;9368   
;;;9369   if(num_necc_up>num_necc)
005d54  489c              LDR      r0,|L1.24520|
;;;9370   	{
;;;9371   	num_necc=num_necc_up;
;;;9372   	num_necc_block_cnt=60;
005d56  f04f053c          MOV      r5,#0x3c
005d5a  f9b03000          LDRSH    r3,[r0,#0]            ;9369  ; num_necc
005d5e  4299              CMP      r1,r3                 ;9369
005d60  dd02              BLE      |L1.23912|
005d62  8001              STRH     r1,[r0,#0]            ;9371
005d64  8725              STRH     r5,[r4,#0x38]
005d66  e005              B        |L1.23924|
                  |L1.23912|
;;;9373   	}
;;;9374   else if(num_necc_down<num_necc)
005d68  429a              CMP      r2,r3
005d6a  da03              BGE      |L1.23924|
;;;9375   	{
;;;9376   	if(!num_necc_block_cnt)
005d6c  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005d6e  b909              CBNZ     r1,|L1.23924|
;;;9377   		{
;;;9378   		num_necc=num_necc_down;
005d70  8002              STRH     r2,[r0,#0]
;;;9379   		num_necc_block_cnt=60;
005d72  8725              STRH     r5,[r4,#0x38]
                  |L1.23924|
;;;9380   		}
;;;9381   	}
;;;9382   
;;;9383   if(PAR) num_necc=NUMIST;
005d74  4995              LDR      r1,|L1.24524|
005d76  880a              LDRH     r2,[r1,#0]  ; PAR
005d78  4974              LDR      r1,|L1.24396|
005d7a  b10a              CBZ      r2,|L1.23936|
005d7c  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d7e  8002              STRH     r2,[r0,#0]
                  |L1.23936|
;;;9384   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9385   if(bPARALLEL) num_necc=NUMIST;
005d80  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005d84  b10a              CBZ      r2,|L1.23946|
005d86  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d88  8002              STRH     r2,[r0,#0]
                  |L1.23946|
;;;9386   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d8a  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005d8c  2a0a              CMP      r2,#0xa
005d8e  d101              BNE      |L1.23956|
005d90  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d92  8002              STRH     r2,[r0,#0]
                  |L1.23956|
;;;9387   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d94  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005d96  2a0a              CMP      r2,#0xa
005d98  d001              BEQ      |L1.23966|
005d9a  2a0b              CMP      r2,#0xb
005d9c  d101              BNE      |L1.23970|
                  |L1.23966|
005d9e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005da0  8002              STRH     r2,[r0,#0]
                  |L1.23970|
;;;9388   #endif
;;;9389   
;;;9390   gran(&num_necc,1,NUMIST);
005da2  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005da6  e8bd41f0          POP      {r4-r8,lr}
005daa  2101              MOVS     r1,#1
005dac  4886              LDR      r0,|L1.24520|
005dae  f7ffbffe          B.W      gran
;;;9391   
;;;9392   }
;;;9393   
                          ENDP

                  ext_drv PROC
;;;10522  //-----------------------------------------------
;;;10523  void ext_drv(void)
005db2  e92d5ff0          PUSH     {r4-r12,lr}
;;;10524  {
;;;10525  char i;
;;;10526  
;;;10527  #ifdef UKU_FSO
;;;10528  NUMSK=3;
;;;10529  #endif
;;;10530  
;;;10531  for(i=0;i<NUMSK;i++)
005db6  f04f0000          MOV      r0,#0
005dba  4a86              LDR      r2,|L1.24532|
;;;10532  	{
;;;10533  	#ifdef UKU_MGTS
;;;10534  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10535  	#endif
;;;10536  	#ifdef UKU_RSTKM
;;;10537  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10538  	#endif
;;;10539  	#ifdef UKU_3U
;;;10540  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10541  	#endif
;;;10542  	#ifdef UKU_GLONASS
;;;10543  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10544  	#endif
;;;10545  	#ifdef UKU_KONTUR
;;;10546  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10547  	#endif
;;;10548  	#ifdef UKU_6U
;;;10549  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10550  	#endif
;;;10551  	#ifdef UKU_220
;;;10552  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10553  	#endif
;;;10554  	#ifdef UKU_220_V2
;;;10555  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10556  	#endif
;;;10557  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10558  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10559  	#endif
;;;10560  	#ifdef UKU_TELECORE2015	
;;;10561  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10562  	#endif
;;;10563  	#ifdef UKU_TELECORE2017
;;;10564  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10565  	#endif
;;;10566  	#ifdef IPS_SGEP_GAZPROM
;;;10567  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10568  	#endif		
;;;10569   	#ifdef UKU_FSO
;;;10570  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10571  	#endif	
;;;10572  		{
;;;10573  		if(sk_cnt[i]<10)
005dbc  4b84              LDR      r3,|L1.24528|
;;;10574  			{
;;;10575  			sk_cnt[i]++;
;;;10576  			if(sk_cnt[i]>=10)
;;;10577  				{
;;;10578  				sk_stat[i]=ssON;
005dbe  4d70              LDR      r5,|L1.24448|
005dc0  f04f0a01          MOV      r10,#1
;;;10579  				}
;;;10580  			}
;;;10581  		else 
;;;10582  			{
;;;10583  			sk_cnt[i]=10;
005dc4  f04f0b0a          MOV      r11,#0xa
005dc8  4606              MOV      r6,r0                 ;10531
005dca  f9b24000          LDRSH    r4,[r2,#0]            ;10531
005dce  e025              B        |L1.24092|
                  |L1.24016|
005dd0  4981              LDR      r1,|L1.24536|
005dd2  4f82              LDR      r7,|L1.24540|
005dd4  5c09              LDRB     r1,[r1,r0]            ;10558
005dd6  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10558
005dda  f5b16ffa          CMP      r1,#0x7d0             ;10558
005dde  da0e              BGE      |L1.24062|
005de0  5619              LDRSB    r1,[r3,r0]            ;10573
005de2  290a              CMP      r1,#0xa               ;10573
005de4  da08              BGE      |L1.24056|
005de6  f1010101          ADD      r1,r1,#1              ;10575
005dea  b249              SXTB     r1,r1                 ;10575
005dec  5419              STRB     r1,[r3,r0]            ;10575
005dee  290a              CMP      r1,#0xa               ;10576
005df0  db11              BLT      |L1.24086|
005df2  f805a000          STRB     r10,[r5,r0]           ;10578
005df6  e00e              B        |L1.24086|
                  |L1.24056|
005df8  f803b000          STRB     r11,[r3,r0]
005dfc  e00b              B        |L1.24086|
                  |L1.24062|
;;;10584  			}
;;;10585                 
;;;10586  		}
;;;10587  	else
;;;10588  		{
;;;10589  		if(sk_cnt[i]>0)
005dfe  5619              LDRSB    r1,[r3,r0]
005e00  2900              CMP      r1,#0
005e02  dd07              BLE      |L1.24084|
;;;10590  			{
;;;10591  			sk_cnt[i]--;
005e04  f1a10101          SUB      r1,r1,#1
005e08  b249              SXTB     r1,r1
005e0a  5419              STRB     r1,[r3,r0]
;;;10592  			if(sk_cnt[i]<=0)
005e0c  2900              CMP      r1,#0
005e0e  dc02              BGT      |L1.24086|
;;;10593  				{
;;;10594  				sk_stat[i]=ssOFF;
005e10  542e              STRB     r6,[r5,r0]
005e12  e000              B        |L1.24086|
                  |L1.24084|
;;;10595  				}
;;;10596  			}
;;;10597  		else 
;;;10598  			{
;;;10599  			sk_cnt[i]=0;
005e14  541e              STRB     r6,[r3,r0]
                  |L1.24086|
005e16  f1000001          ADD      r0,r0,#1              ;10531
005e1a  b2c0              UXTB     r0,r0                 ;10531
                  |L1.24092|
005e1c  42a0              CMP      r0,r4                 ;10531
005e1e  dbd7              BLT      |L1.24016|
;;;10600  			}
;;;10601  		}
;;;10602  	}
;;;10603  
;;;10604  for(i=0;i<NUMSK;i++)
005e20  f04f0400          MOV      r4,#0
;;;10605  	{
;;;10606  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10607  		{
;;;10608  		if(sk_av_cnt[i]<10)
005e24  f8df91b8          LDR      r9,|L1.24544|
;;;10609  			{
;;;10610  			sk_av_cnt[i]++;
;;;10611  			if(sk_av_cnt[i]>=10)
;;;10612  				{
;;;10613  				sk_av_stat[i]=sasON;
005e28  4f6e              LDR      r7,|L1.24548|
;;;10614  				}
;;;10615  			}
;;;10616  		else 
;;;10617  			{
;;;10618  			sk_av_cnt[i]=10;
;;;10619  			}
;;;10620  		}
;;;10621  	else
;;;10622  		{
;;;10623  		if(sk_av_cnt[i]>=0)
;;;10624  			{
;;;10625  			sk_av_cnt[i]--;
;;;10626  			if(sk_av_cnt[i]<=0)
;;;10627  				{
;;;10628  				sk_av_stat[i]=sasOFF;
;;;10629  				}
;;;10630  			}
;;;10631  		else 
;;;10632  			{
;;;10633  			sk_av_cnt[i]=0;
;;;10634  			}
;;;10635  		}
;;;10636  
;;;10637  #ifndef UKU_KONTUR
;;;10638  	if(sk_av_stat_old[i]!=sk_av_stat[i])
005e2a  f8df81bc          LDR      r8,|L1.24552|
005e2e  e083              B        |L1.24376|
                  |L1.24112|
005e30  486e              LDR      r0,|L1.24556|
005e32  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10606
005e36  b910              CBNZ     r0,|L1.24126|
005e38  5d29              LDRB     r1,[r5,r4]            ;10606
005e3a  2901              CMP      r1,#1                 ;10606
005e3c  d00f              BEQ      |L1.24158|
                  |L1.24126|
005e3e  b108              CBZ      r0,|L1.24132|
005e40  5d28              LDRB     r0,[r5,r4]            ;10606
005e42  b160              CBZ      r0,|L1.24158|
                  |L1.24132|
005e44  f9190004          LDRSB    r0,[r9,r4]            ;10623
005e48  2800              CMP      r0,#0                 ;10623
005e4a  db19              BLT      |L1.24192|
005e4c  f1a00001          SUB      r0,r0,#1              ;10625
005e50  b240              SXTB     r0,r0                 ;10625
005e52  f8090004          STRB     r0,[r9,r4]            ;10625
005e56  2800              CMP      r0,#0                 ;10626
005e58  dc14              BGT      |L1.24196|
005e5a  553e              STRB     r6,[r7,r4]            ;10628
005e5c  e012              B        |L1.24196|
                  |L1.24158|
005e5e  f9190004          LDRSB    r0,[r9,r4]            ;10608
005e62  280a              CMP      r0,#0xa               ;10608
005e64  da09              BGE      |L1.24186|
005e66  f1000001          ADD      r0,r0,#1              ;10610
005e6a  b240              SXTB     r0,r0                 ;10610
005e6c  f8090004          STRB     r0,[r9,r4]            ;10610
005e70  280a              CMP      r0,#0xa               ;10611
005e72  db07              BLT      |L1.24196|
005e74  f807a004          STRB     r10,[r7,r4]           ;10613
005e78  e004              B        |L1.24196|
                  |L1.24186|
005e7a  f809b004          STRB     r11,[r9,r4]           ;10618
005e7e  e001              B        |L1.24196|
                  |L1.24192|
005e80  f8096004          STRB     r6,[r9,r4]            ;10633
                  |L1.24196|
005e84  f8181004          LDRB     r1,[r8,r4]
005e88  5d38              LDRB     r0,[r7,r4]
005e8a  4281              CMP      r1,r0
005e8c  d04e              BEQ      |L1.24364|
;;;10639  		{
;;;10640  		plazma_sk++;
005e8e  4a36              LDR      r2,|L1.24424|
005e90  3246              ADDS     r2,r2,#0x46
005e92  8811              LDRH     r1,[r2,#0]  ; plazma_sk
005e94  f1010101          ADD      r1,r1,#1
005e98  8011              STRH     r1,[r2,#0]
;;;10641  		if(sk_av_stat[i]==sasON)
005e9a  2801              CMP      r0,#1
005e9c  d007              BEQ      |L1.24238|
;;;10642  			{
;;;10643  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10644  			else if(i==1)
;;;10645  				{
;;;10646  				#ifndef UKU_TELEKORE2017
;;;10647  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10648  				#endif
;;;10649  				#ifdef UKU_TELEKORE2017
;;;10650  				snmp_trap_send("Door open",15,2,1);
;;;10651  				#endif
;;;10652  				}
;;;10653  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10654  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10655  			}
;;;10656  		else 
;;;10657  			{
;;;10658  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005e9e  b354              CBZ      r4,|L1.24310|
;;;10659  			else if(i==1)
005ea0  2c01              CMP      r4,#1
005ea2  d02f              BEQ      |L1.24324|
;;;10660  				{
;;;10661  				#ifndef UKU_TELEKORE2017
;;;10662  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10663  				#endif
;;;10664  				#ifdef UKU_TELEKORE2017
;;;10665  				snmp_trap_send("Door open clear",15,2,0);
;;;10666  				#endif
;;;10667  				}
;;;10668  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
005ea4  2c02              CMP      r4,#2
005ea6  d034              BEQ      |L1.24338|
;;;10669  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005ea8  2c03              CMP      r4,#3
005eaa  d039              BEQ      |L1.24352|
005eac  e03e              B        |L1.24364|
                  |L1.24238|
005eae  b134              CBZ      r4,|L1.24254|
005eb0  2c01              CMP      r4,#1                 ;10644
005eb2  d00b              BEQ      |L1.24268|
005eb4  2c02              CMP      r4,#2                 ;10653
005eb6  d010              BEQ      |L1.24282|
005eb8  2c03              CMP      r4,#3                 ;10654
005eba  d015              BEQ      |L1.24296|
005ebc  e036              B        |L1.24364|
                  |L1.24254|
005ebe  2301              MOVS     r3,#1                 ;10643
005ec0  461a              MOV      r2,r3                 ;10643
005ec2  210f              MOVS     r1,#0xf               ;10643
005ec4  a04a              ADR      r0,|L1.24560|
005ec6  f7fffffe          BL       snmp_trap_send
005eca  e02f              B        |L1.24364|
                  |L1.24268|
005ecc  2301              MOVS     r3,#1                 ;10647
005ece  2202              MOVS     r2,#2                 ;10647
005ed0  210f              MOVS     r1,#0xf               ;10647
005ed2  a04a              ADR      r0,|L1.24572|
005ed4  f7fffffe          BL       snmp_trap_send
005ed8  e028              B        |L1.24364|
                  |L1.24282|
005eda  2301              MOVS     r3,#1                 ;10653
005edc  2203              MOVS     r2,#3                 ;10653
005ede  210f              MOVS     r1,#0xf               ;10653
005ee0  a049              ADR      r0,|L1.24584|
005ee2  f7fffffe          BL       snmp_trap_send
005ee6  e021              B        |L1.24364|
                  |L1.24296|
005ee8  2301              MOVS     r3,#1                 ;10654
005eea  2204              MOVS     r2,#4                 ;10654
005eec  210f              MOVS     r1,#0xf               ;10654
005eee  a049              ADR      r0,|L1.24596|
005ef0  f7fffffe          BL       snmp_trap_send
005ef4  e01a              B        |L1.24364|
                  |L1.24310|
005ef6  2300              MOVS     r3,#0                 ;10658
005ef8  2201              MOVS     r2,#1                 ;10658
005efa  210f              MOVS     r1,#0xf               ;10658
005efc  a048              ADR      r0,|L1.24608|
005efe  f7fffffe          BL       snmp_trap_send
005f02  e013              B        |L1.24364|
                  |L1.24324|
005f04  2300              MOVS     r3,#0                 ;10662
005f06  2202              MOVS     r2,#2                 ;10662
005f08  210f              MOVS     r1,#0xf               ;10662
005f0a  a04a              ADR      r0,|L1.24628|
005f0c  f7fffffe          BL       snmp_trap_send
005f10  e00c              B        |L1.24364|
                  |L1.24338|
005f12  2300              MOVS     r3,#0                 ;10668
005f14  2203              MOVS     r2,#3                 ;10668
005f16  210f              MOVS     r1,#0xf               ;10668
005f18  a04b              ADR      r0,|L1.24648|
005f1a  f7fffffe          BL       snmp_trap_send
005f1e  e005              B        |L1.24364|
                  |L1.24352|
005f20  2300              MOVS     r3,#0
005f22  2204              MOVS     r2,#4
005f24  210f              MOVS     r1,#0xf
005f26  a04d              ADR      r0,|L1.24668|
005f28  f7fffffe          BL       snmp_trap_send
                  |L1.24364|
;;;10670  			}
;;;10671  	 	}
;;;10672  #endif
;;;10673  
;;;10674  #ifdef UKU_KONTUR
;;;10675  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10676  		{
;;;10677  		plazma_sk++;
;;;10678  		if(sk_av_stat[i]==sasON)
;;;10679  			{
;;;10680  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10681  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10682  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10683  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10684  			}
;;;10685  		else 
;;;10686  			{
;;;10687  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10688  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10689  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10690  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10691  			}
;;;10692  	 	}
;;;10693  #endif
;;;10694  	sk_av_stat_old[i]=sk_av_stat[i];
005f2c  5d38              LDRB     r0,[r7,r4]
005f2e  f8080004          STRB     r0,[r8,r4]
005f32  f1040401          ADD      r4,r4,#1              ;10604
005f36  b2e4              UXTB     r4,r4                 ;10604
                  |L1.24376|
005f38  4826              LDR      r0,|L1.24532|
005f3a  f9b00000          LDRSH    r0,[r0,#0]            ;10604  ; NUMSK
005f3e  4284              CMP      r4,r0                 ;10604
005f40  f6ffaf76          BLT      |L1.24112|
                  |L1.24388|
;;;10695  	}
;;;10696  }
005f44  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.24392|
                          DCD      bps
                  |L1.24396|
                          DCD      NUMIST
                  |L1.24400|
                          DCD      mess_data
                  |L1.24404|
                          DCD      uavt_set_result_stat
                  |L1.24408|
                          DCD      avt_plazma
                  |L1.24412|
                          DCD      TERMOKOMPENS
                  |L1.24416|
                          DCD      UB20
                  |L1.24420|
                          DCD      UVZ
                  |L1.24424|
                          DCD      ||area_number.26||
                  |L1.24428|
                          DCD      u_necc
                  |L1.24432|
                          DCD      ND_EXT
                  |L1.24436|
                          DCD      t_ext
                  |L1.24440|
                          DCD      mat_temper
                  |L1.24444|
                          DCD      UB0
                  |L1.24448|
                          DCD      sk_stat
                  |L1.24452|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24456|
                          DCD      speedChIsOn
                  |L1.24460|
                          DCD      sp_ch_stat
                  |L1.24464|
                          DCD      speedChrgVolt
                  |L1.24468|
                          DCD      hv_vz_stat
                  |L1.24472|
                          DCD      UZ_U
                  |L1.24476|
                          DCD      FZ_U1
                  |L1.24480|
                          DCD      FZ_U2
                  |L1.24484|
                          DCD      uavt_set_stat
                  |L1.24488|
                          DCD      U_AVT
                  |L1.24492|
                          DCD      u_necc_dn
                  |L1.24496|
                          DCD      u_necc_up
                  |L1.24500|
                          DCD      Isumm
                  |L1.24504|
                          DCD      Isumm_
                  |L1.24508|
                          DCD      bat
                  |L1.24512|
                          DCD      IMAX
                  |L1.24516|
                          DCD      IMIN
                  |L1.24520|
                          DCD      num_necc
                  |L1.24524|
                          DCD      PAR
                  |L1.24528|
                          DCD      sk_cnt
                  |L1.24532|
                          DCD      NUMSK
                  |L1.24536|
                          DCD      ||area_number.20||
                  |L1.24540|
                          DCD      ||.bss||+0x40c
                  |L1.24544|
                          DCD      sk_av_cnt
                  |L1.24548|
                          DCD      sk_av_stat
                  |L1.24552|
                          DCD      sk_av_stat_old
                  |L1.24556|
                          DCD      SK_SIGN
                  |L1.24560|
005ff0  534b2023          DCB      "SK #1 Alarm",0
005ff4  3120416c
005ff8  61726d00
                  |L1.24572|
005ffc  534b2023          DCB      "SK #2 Alarm",0
006000  3220416c
006004  61726d00
                  |L1.24584|
006008  534b2023          DCB      "SK #3 Alarm",0
00600c  3320416c
006010  61726d00
                  |L1.24596|
006014  534b2023          DCB      "SK #4 Alarm",0
006018  3420416c
00601c  61726d00
                  |L1.24608|
006020  534b2023          DCB      "SK #1 Alarm is off",0
006024  3120416c
006028  61726d20
00602c  6973206f
006030  666600  
006033  00                DCB      0
                  |L1.24628|
006034  534b2023          DCB      "SK #2 Alarm is off",0
006038  3220416c
00603c  61726d20
006040  6973206f
006044  666600  
006047  00                DCB      0
                  |L1.24648|
006048  534b2023          DCB      "SK #3 Alarm is off",0
00604c  3320416c
006050  61726d20
006054  6973206f
006058  666600  
00605b  00                DCB      0
                  |L1.24668|
00605c  534b2023          DCB      "SK #4 Alarm is off",0
006060  3420416c
006064  61726d20
006068  6973206f
00606c  666600  
00606f  00                DCB      0
                          ENDP

                  zar_superviser_start PROC
;;;10734  //-----------------------------------------------
;;;10735  void zar_superviser_start(void)
006070  f04f0001          MOV      r0,#1
;;;10736  {
;;;10737  sign_U[0]=1;
006074  4aff              LDR      r2,|L1.25716|
006076  7010              STRB     r0,[r2,#0]
;;;10738  sign_I[0]=1;
006078  49ff              LDR      r1,|L1.25720|
00607a  7008              STRB     r0,[r1,#0]
;;;10739  sign_U[1]=1;
00607c  7050              STRB     r0,[r2,#1]
;;;10740  sign_I[1]=1;
00607e  7048              STRB     r0,[r1,#1]
;;;10741  
;;;10742  }
006080  4770              BX       lr
;;;10743  
                          ENDP

                  zar_superviser_drv PROC
;;;10699  //-----------------------------------------------
;;;10700  void zar_superviser_drv(void)
006082  e92d5ff0          PUSH     {r4-r12,lr}
;;;10701  {
;;;10702  
;;;10703  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006086  48fe              LDR      r0,|L1.25728|
006088  f8df93f8          LDR      r9,|L1.25732|
00608c  f8df83ec          LDR      r8,|L1.25724|
006090  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
006094  f9b90000          LDRSH    r0,[r9,#0]
006098  4cfb              LDR      r4,|L1.25736|
00609a  ebc01100          RSB      r1,r0,r0,LSL #4
00609e  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0060a2  f06f0a1d          MVN      r10,#0x1d
0060a6  f06f0b95          MVN      r11,#0x95
0060aa  2500              MOVS     r5,#0
0060ac  4ef1              LDR      r6,|L1.25716|
0060ae  f9b40052          LDRSH    r0,[r4,#0x52]
0060b2  eb0a0281          ADD      r2,r10,r1,LSL #2
0060b6  eb0b0381          ADD      r3,r11,r1,LSL #2
0060ba  4567              CMP      r7,r12
0060bc  dc05              BGT      |L1.24778|
0060be  f8dfc3cc          LDR      r12,|L1.25740|
0060c2  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0060c6  4567              CMP      r7,r12
0060c8  da04              BGE      |L1.24788|
                  |L1.24778|
0060ca  4282              CMP      r2,r0
0060cc  dd02              BLE      |L1.24788|
0060ce  4283              CMP      r3,r0
0060d0  da00              BGE      |L1.24788|
0060d2  7035              STRB     r5,[r6,#0]
                  |L1.24788|
;;;10704  
;;;10705  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0060d4  4fee              LDR      r7,|L1.25744|
0060d6  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0060da  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0060de  4fe6              LDR      r7,|L1.25720|
0060e0  ebbc0f4e          CMP      r12,lr,LSL #1
0060e4  dc04              BGT      |L1.24816|
0060e6  f1ce0e00          RSB      lr,lr,#0
0060ea  ebbc0f4e          CMP      r12,lr,LSL #1
0060ee  da04              BGE      |L1.24826|
                  |L1.24816|
0060f0  4282              CMP      r2,r0
0060f2  dd02              BLE      |L1.24826|
0060f4  4283              CMP      r3,r0
0060f6  da00              BGE      |L1.24826|
0060f8  703d              STRB     r5,[r7,#0]
                  |L1.24826|
;;;10706  																 
;;;10707  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0060fa  f06f0209          MVN      r2,#9
0060fe  eb020181          ADD      r1,r2,r1,LSL #2
006102  4281              CMP      r1,r0
006104  d121              BNE      |L1.24906|
006106  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00610a  b9f0              CBNZ     r0,|L1.24906|
;;;10708  	{
;;;10709  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00610c  7830              LDRB     r0,[r6,#0]  ; sign_U
00610e  2801              CMP      r0,#1
006110  d11b              BNE      |L1.24906|
006112  7838              LDRB     r0,[r7,#0]  ; sign_I
006114  2801              CMP      r0,#1
006116  d118              BNE      |L1.24906|
006118  f44f70ef          MOV      r0,#0x1de
00611c  f7fffffe          BL       lc640_read_int
006120  49dc              LDR      r1,|L1.25748|
006122  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006126  4288              CMP      r0,r1
006128  d00f              BEQ      |L1.24906|
00612a  48db              LDR      r0,|L1.25752|
00612c  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00612e  b160              CBZ      r0,|L1.24906|
006130  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006134  07c0              LSLS     r0,r0,#31
006136  d108              BNE      |L1.24906|
;;;10710  		{
;;;10711  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006138  f44f70ef          MOV      r0,#0x1de
00613c  f7fffffe          BL       lc640_write_int
;;;10712  		superviser_cnt++;
006140  48d6              LDR      r0,|L1.25756|
006142  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006144  f1010101          ADD      r1,r1,#1
006148  7001              STRB     r1,[r0,#0]
                  |L1.24906|
;;;10713  		}
;;;10714  	
;;;10715  	}
;;;10716  
;;;10717  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00614a  48cd              LDR      r0,|L1.25728|
00614c  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006150  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006154  4281              CMP      r1,r0
006156  dc06              BGT      |L1.24934|
006158  48cc              LDR      r0,|L1.25740|
00615a  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00615e  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006162  4281              CMP      r1,r0
006164  da0e              BGE      |L1.24964|
                  |L1.24934|
006166  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00616a  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00616e  ebc01000          RSB      r0,r0,r0,LSL #4
006172  eb0a0280          ADD      r2,r10,r0,LSL #2
006176  428a              CMP      r2,r1
006178  dd04              BLE      |L1.24964|
00617a  eb0b0080          ADD      r0,r11,r0,LSL #2
00617e  4288              CMP      r0,r1
006180  da00              BGE      |L1.24964|
006182  7075              STRB     r5,[r6,#1]
                  |L1.24964|
;;;10718  
;;;10719  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006184  49c2              LDR      r1,|L1.25744|
006186  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00618a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00618e  ebb00f41          CMP      r0,r1,LSL #1
006192  dc03              BGT      |L1.24988|
006194  4249              RSBS     r1,r1,#0
006196  ebb00f41          CMP      r0,r1,LSL #1
00619a  da0e              BGE      |L1.25018|
                  |L1.24988|
00619c  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0061a0  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0061a4  ebc01000          RSB      r0,r0,r0,LSL #4
0061a8  eb0a0280          ADD      r2,r10,r0,LSL #2
0061ac  428a              CMP      r2,r1
0061ae  dd04              BLE      |L1.25018|
0061b0  eb0b0080          ADD      r0,r11,r0,LSL #2
0061b4  4288              CMP      r0,r1
0061b6  da00              BGE      |L1.25018|
0061b8  707d              STRB     r5,[r7,#1]
                  |L1.25018|
;;;10720  																 
;;;10721  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0061ba  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0061be  ebc01100          RSB      r1,r0,r0,LSL #4
0061c2  f06f0009          MVN      r0,#9
0061c6  eb000081          ADD      r0,r0,r1,LSL #2
0061ca  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0061ce  4288              CMP      r0,r1
0061d0  d122              BNE      |L1.25112|
0061d2  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0061d6  b9f8              CBNZ     r0,|L1.25112|
;;;10722  	{
;;;10723  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0061d8  7870              LDRB     r0,[r6,#1]  ; sign_U
0061da  2801              CMP      r0,#1
0061dc  d11c              BNE      |L1.25112|
0061de  7878              LDRB     r0,[r7,#1]  ; sign_I
0061e0  2801              CMP      r0,#1
0061e2  d119              BNE      |L1.25112|
0061e4  f44f75fe          MOV      r5,#0x1fc
0061e8  4628              MOV      r0,r5
0061ea  f7fffffe          BL       lc640_read_int
0061ee  49a9              LDR      r1,|L1.25748|
0061f0  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0061f4  4288              CMP      r0,r1
0061f6  d00f              BEQ      |L1.25112|
0061f8  48a7              LDR      r0,|L1.25752|
0061fa  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0061fc  2802              CMP      r0,#2
0061fe  d10b              BNE      |L1.25112|
006200  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006204  07c0              LSLS     r0,r0,#31
006206  d107              BNE      |L1.25112|
;;;10724  		{
;;;10725  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006208  4628              MOV      r0,r5
00620a  f7fffffe          BL       lc640_write_int
;;;10726  		superviser_cnt++;
00620e  48a3              LDR      r0,|L1.25756|
006210  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006212  f1010101          ADD      r1,r1,#1
006216  7001              STRB     r1,[r0,#0]
                  |L1.25112|
;;;10727  		}
;;;10728  	
;;;10729  	}
;;;10730  
;;;10731  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006218  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00621c  f06f0101          MVN      r1,#1
006220  ebc01000          RSB      r0,r0,r0,LSL #4
006224  eb010080          ADD      r0,r1,r0,LSL #2
006228  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00622c  4288              CMP      r0,r1
00622e  d102              BNE      |L1.25142|
006230  e8bd5ff0          POP      {r4-r12,lr}
006234  e7fe              B        zar_superviser_start
                  |L1.25142|
;;;10732  }
006236  e685              B        |L1.24388|
;;;10733  
                          ENDP

                  npn_hndl PROC
;;;10744  //-----------------------------------------------
;;;10745  void npn_hndl(void)
006238  e92d03f0          PUSH     {r4-r9}
;;;10746  {
;;;10747  if(NPN_OUT!=npnoOFF)
00623c  4898              LDR      r0,|L1.25760|
;;;10748  	{
;;;10749  /*	if(NPN_SIGN==npnsAVNET)
;;;10750  		{
;;;10751  		if(net_av==1)
;;;10752  			{
;;;10753  			if(npn_tz_cnt<TZNPN)
;;;10754  				{
;;;10755  				npn_tz_cnt++;
;;;10756  				if(npn_tz_cnt==TZNPN)
;;;10757  					{
;;;10758  					npn_stat=npnsOFF;
;;;10759  					}
;;;10760  				}
;;;10761  			}
;;;10762  		else
;;;10763  			{
;;;10764  			if(npn_tz_cnt)
;;;10765  				{
;;;10766  				npn_tz_cnt--;
;;;10767  				if(npn_tz_cnt==0)
;;;10768  					{
;;;10769  					npn_stat=npnsON;
;;;10770  					}
;;;10771  				}
;;;10772  			}
;;;10773  		}*/
;;;10774  /*	if(NPN_SIGN==npnsULOAD)
;;;10775  		{
;;;10776  		if(load_U<UONPN)
;;;10777  			{
;;;10778  			if(npn_tz_cnt<TZNPN)
;;;10779  				{
;;;10780  				npn_tz_cnt++;
;;;10781  				if(npn_tz_cnt==TZNPN)
;;;10782  					{
;;;10783  					npn_stat=npnsOFF;
;;;10784  					}
;;;10785  				}
;;;10786  			}
;;;10787  		else if(load_U>UVNPN)
;;;10788  			{
;;;10789  			if(npn_tz_cnt)
;;;10790  				{
;;;10791  				npn_tz_cnt--;
;;;10792  				if(npn_tz_cnt==0)
;;;10793  					{
;;;10794  					npn_stat=npnsON;
;;;10795  					}
;;;10796  				}
;;;10797  			}
;;;10798  		}*/
;;;10799  
;;;10800  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10801  		{
;;;10802  		if(npn_tz_cnt<TZNPN)
00623e  4f99              LDR      r7,|L1.25764|
;;;10803  			{
;;;10804  			npn_tz_cnt++;
;;;10805  			if(npn_tz_cnt==TZNPN)
;;;10806  				{
;;;10807  				npn_stat=npnsOFF;
006240  4e99              LDR      r6,|L1.25768|
006242  7800              LDRB     r0,[r0,#0]            ;10747  ; NPN_OUT
006244  f04f0c00          MOV      r12,#0                ;10747
;;;10808  				}
;;;10809  			}
;;;10810  		}
;;;10811  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10812  		{
;;;10813  		if(npn_tz_cnt)
;;;10814  			{
;;;10815  			npn_tz_cnt--;
;;;10816  			if(npn_tz_cnt==0)
;;;10817  				{
;;;10818  				npn_stat=npnsON;
006248  f04f0801          MOV      r8,#1
00624c  b3e8              CBZ      r0,|L1.25290|
00624e  4897              LDR      r0,|L1.25772|
006250  4639              MOV      r1,r7                 ;10802
006252  f9b05000          LDRSH    r5,[r0,#0]            ;10800  ; load_U
006256  4896              LDR      r0,|L1.25776|
006258  f9b11000          LDRSH    r1,[r1,#0]            ;10802
00625c  f9b09000          LDRSH    r9,[r0,#0]            ;10800  ; UONPN
006260  4894              LDR      r0,|L1.25780|
006262  454d              CMP      r5,r9                 ;10800
006264  f9b02000          LDRSH    r2,[r0,#0]            ;10800
006268  4893              LDR      r0,|L1.25784|
00626a  f9b03000          LDRSH    r3,[r0,#0]            ;10800
00626e  4893              LDR      r0,|L1.25788|
006270  f9b04000          LDRSH    r4,[r0,#0]            ;10800
006274  4892              LDR      r0,|L1.25792|
006276  f9b00000          LDRSH    r0,[r0,#0]            ;10800
00627a  da13              BGE      |L1.25252|
00627c  4282              CMP      r2,r0                 ;10800
00627e  db03              BLT      |L1.25224|
006280  4283              CMP      r3,r0                 ;10800
006282  db01              BLT      |L1.25224|
006284  4284              CMP      r4,r0                 ;10800
006286  da0d              BGE      |L1.25252|
                  |L1.25224|
006288  488e              LDR      r0,|L1.25796|
00628a  f9b02000          LDRSH    r2,[r0,#0]            ;10802  ; TZNPN
00628e  4291              CMP      r1,r2                 ;10802
006290  da23              BGE      |L1.25306|
006292  f1010101          ADD      r1,r1,#1              ;10804
006296  b208              SXTH     r0,r1                 ;10804
006298  8038              STRH     r0,[r7,#0]            ;10804
00629a  4290              CMP      r0,r2                 ;10805
00629c  d11d              BNE      |L1.25306|
00629e  f886c000          STRB     r12,[r6,#0]           ;10807
0062a2  e01a              B        |L1.25306|
                  |L1.25252|
0062a4  f8dfc220          LDR      r12,|L1.25800|
0062a8  f9bcc000          LDRSH    r12,[r12,#0]          ;10811  ; UVNPN
0062ac  4565              CMP      r5,r12                ;10811
0062ae  dd14              BLE      |L1.25306|
0062b0  4282              CMP      r2,r0                 ;10811
0062b2  dd12              BLE      |L1.25306|
0062b4  4283              CMP      r3,r0                 ;10811
0062b6  dd10              BLE      |L1.25306|
0062b8  4284              CMP      r4,r0                 ;10811
0062ba  dd0e              BLE      |L1.25306|
0062bc  b169              CBZ      r1,|L1.25306|
0062be  f1a10101          SUB      r1,r1,#1              ;10815
0062c2  b208              SXTH     r0,r1                 ;10815
0062c4  8038              STRH     r0,[r7,#0]            ;10815
0062c6  b940              CBNZ     r0,|L1.25306|
0062c8  e000              B        |L1.25292|
                  |L1.25290|
0062ca  e002              B        |L1.25298|
                  |L1.25292|
0062cc  f8868000          STRB     r8,[r6,#0]
0062d0  e003              B        |L1.25306|
                  |L1.25298|
;;;10819  				}
;;;10820  			}
;;;10821  		}
;;;10822  	}
;;;10823  else
;;;10824  	{
;;;10825  	npn_tz_cnt=0;
0062d2  f8a7c000          STRH     r12,[r7,#0]
;;;10826  	npn_stat=npnsON;
0062d6  f8868000          STRB     r8,[r6,#0]
                  |L1.25306|
;;;10827  	}
;;;10828  
;;;10829  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0062da  7830              LDRB     r0,[r6,#0]  ; npn_stat
0062dc  2800              CMP      r0,#0
0062de  d107              BNE      |L1.25328|
0062e0  e8bd03f0          POP      {r4-r9}
0062e4  230f              MOVS     r3,#0xf
0062e6  2201              MOVS     r2,#1
0062e8  216e              MOVS     r1,#0x6e
0062ea  20d2              MOVS     r0,#0xd2
0062ec  f7ffbffe          B.W      mess_send
                  |L1.25328|
;;;10830  
;;;10831  
;;;10832  }
0062f0  e8bd03f0          POP      {r4-r9}
0062f4  4770              BX       lr
;;;10833  
                          ENDP

                  loadoff_hndl PROC
;;;10835  //-----------------------------------------------
;;;10836  void loadoff_hndl(void)
0062f6  b5f0              PUSH     {r4-r7,lr}
;;;10837  {
;;;10838  if((load_U>UONPN)||(load_U<UVNPN))
0062f8  486c              LDR      r0,|L1.25772|
;;;10839  	{
;;;10840  	if(load_off_cnt<TZNPN)
0062fa  4d74              LDR      r5,|L1.25804|
;;;10841  		{
;;;10842  		load_off_cnt++;
;;;10843  		if(load_off_cnt>=TZNPN)
;;;10844  			{
;;;10845  			load_off_stat=npnsOFF;
0062fc  2700              MOVS     r7,#0
0062fe  f9b01000          LDRSH    r1,[r0,#0]            ;10838  ; load_U
006302  486b              LDR      r0,|L1.25776|
006304  4e72              LDR      r6,|L1.25808|
006306  f9b02000          LDRSH    r2,[r0,#0]            ;10838  ; UONPN
00630a  f9b50000          LDRSH    r0,[r5,#0]            ;10840
00630e  4291              CMP      r1,r2                 ;10838
006310  dc04              BGT      |L1.25372|
006312  4b6d              LDR      r3,|L1.25800|
006314  f9b33000          LDRSH    r3,[r3,#0]            ;10838  ; UVNPN
006318  4299              CMP      r1,r3                 ;10838
00631a  da0d              BGE      |L1.25400|
                  |L1.25372|
00631c  4969              LDR      r1,|L1.25796|
00631e  f9b11000          LDRSH    r1,[r1,#0]            ;10840  ; TZNPN
006322  4288              CMP      r0,r1                 ;10840
006324  da1c              BGE      |L1.25440|
006326  f1000001          ADD      r0,r0,#1              ;10842
00632a  b200              SXTH     r0,r0                 ;10842
00632c  8028              STRH     r0,[r5,#0]            ;10842
00632e  4288              CMP      r0,r1                 ;10843
006330  db16              BLT      |L1.25440|
006332  7037              STRB     r7,[r6,#0]
;;;10846  			load_off_cnt=TZNPN;
006334  8029              STRH     r1,[r5,#0]
006336  e013              B        |L1.25440|
                  |L1.25400|
;;;10847  			}
;;;10848  		}
;;;10849  	}
;;;10850  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006338  4c66              LDR      r4,|L1.25812|
00633a  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
00633e  4423              ADD      r3,r3,r4
006340  428b              CMP      r3,r1
006342  da0d              BGE      |L1.25440|
006344  1b12              SUBS     r2,r2,r4
006346  428a              CMP      r2,r1
006348  dd0a              BLE      |L1.25440|
;;;10851  	{
;;;10852  	if(load_off_cnt)
00634a  b148              CBZ      r0,|L1.25440|
;;;10853  		{
;;;10854  		load_off_cnt--;
00634c  f1a00001          SUB      r0,r0,#1
006350  b200              SXTH     r0,r0
006352  8028              STRH     r0,[r5,#0]
;;;10855  		if(load_off_cnt<=0)
006354  2800              CMP      r0,#0
006356  dc03              BGT      |L1.25440|
;;;10856  			{
;;;10857  			load_off_stat=npnsON;
006358  f04f0001          MOV      r0,#1
00635c  7030              STRB     r0,[r6,#0]
;;;10858  			load_off_cnt=0;
00635e  802f              STRH     r7,[r5,#0]
                  |L1.25440|
;;;10859  			}
;;;10860  		}
;;;10861  	}
;;;10862  
;;;10863  
;;;10864  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006360  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006362  2800              CMP      r0,#0
006364  d103              BNE      |L1.25454|
006366  495c              LDR      r1,|L1.25816|
006368  f04f000a          MOV      r0,#0xa
00636c  7008              STRB     r0,[r1,#0]
                  |L1.25454|
;;;10865  
;;;10866  
;;;10867  }
00636e  bdf0              POP      {r4-r7,pc}
;;;10868  
                          ENDP

                  speedChargeStartStop PROC
;;;11056  //-----------------------------------------------
;;;11057  void speedChargeStartStop(void)
006370  b538              PUSH     {r3-r5,lr}
;;;11058  {
;;;11059  spch_plazma[1]++;
006372  4c5a              LDR      r4,|L1.25820|
006374  7860              LDRB     r0,[r4,#1]  ; spch_plazma
006376  f1000001          ADD      r0,r0,#1
00637a  7060              STRB     r0,[r4,#1]
;;;11060  /*if(speedChIsOn)
;;;11061  	{
;;;11062  	speedChIsOn=0;
;;;11063  	}
;;;11064  
;;;11065  else
;;;11066  	{
;;;11067  	if(speedChrgBlckStat==0)
;;;11068  		{
;;;11069  		speedChIsOn=1;
;;;11070  		speedChTimeCnt=0;
;;;11071  		}
;;;11072  	else
;;;11073  		{
;;;11074  		show_mess(	"     Ускоренный     ",
;;;11075  	          		"       заряд        ",
;;;11076  	          		"    заблокирован!   ",
;;;11077  	          		"                    ",2000);	 
;;;11078  		}
;;;11079  	}*/
;;;11080  
;;;11081  if(sp_ch_stat!=scsOFF)
00637c  4858              LDR      r0,|L1.25824|
00637e  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006380  b151              CBZ      r1,|L1.25496|
;;;11082  	{
;;;11083  	sp_ch_stat=scsOFF;
006382  f04f0100          MOV      r1,#0
006386  7001              STRB     r1,[r0,#0]
;;;11084  	speedz_mem_hndl(10);
006388  f04f000a          MOV      r0,#0xa
00638c  f7fffffe          BL       speedz_mem_hndl
;;;11085  	spch_plazma[1]=10;
006390  f04f000a          MOV      r0,#0xa
006394  7060              STRB     r0,[r4,#1]
;;;11086  	}
;;;11087  
;;;11088  else
;;;11089  	{
;;;11090  	spch_plazma[1]=20;
;;;11091  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;11092  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11093  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11094  		#endif
;;;11095  		)
;;;11096  		{
;;;11097  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11098  		sp_ch_stat=scsSTEP1;
;;;11099  		#else
;;;11100  		sp_ch_stat=scsWRK;
;;;11101  		#endif
;;;11102  		speedz_mem_hndl(1);
;;;11103  		}
;;;11104  	else 
;;;11105  		{
;;;11106  		show_mess(	"     Ускоренный     ",
;;;11107  	          		"       заряд        ",
;;;11108  	          		"    заблокирован!   ",
;;;11109  	          		"                    ",2000);
;;;11110  		}
;;;11111  	}
;;;11112  }
006396  bd38              POP      {r3-r5,pc}
                  |L1.25496|
006398  f04f0114          MOV      r1,#0x14              ;11090
00639c  7061              STRB     r1,[r4,#1]            ;11090
00639e  4951              LDR      r1,|L1.25828|
0063a0  f9b12000          LDRSH    r2,[r1,#0]            ;11091  ; speedChrgBlckStat
0063a4  4938              LDR      r1,|L1.25736|
0063a6  f8913023          LDRB     r3,[r1,#0x23]         ;11091  ; spc_stat
0063aa  ea420203          ORR      r2,r2,r3              ;11091
0063ae  794b              LDRB     r3,[r1,#5]            ;11091  ; vz1_stat
0063b0  79c9              LDRB     r1,[r1,#7]            ;11091  ; vz2_stat
0063b2  ea420203          ORR      r2,r2,r3              ;11091
0063b6  430a              ORRS     r2,r2,r1              ;11091
0063b8  d009              BEQ      |L1.25550|
0063ba  f44f60fa          MOV      r0,#0x7d0             ;11106
0063be  9000              STR      r0,[sp,#0]            ;11106
0063c0  4b49              LDR      r3,|L1.25832|
0063c2  a24a              ADR      r2,|L1.25836|
0063c4  a14f              ADR      r1,|L1.25860|
0063c6  a055              ADR      r0,|L1.25884|
0063c8  f7fffffe          BL       show_mess
0063cc  bd38              POP      {r3-r5,pc}
                  |L1.25550|
0063ce  f04f0101          MOV      r1,#1                 ;11098
0063d2  7001              STRB     r1,[r0,#0]            ;11098
0063d4  e8bd4038          POP      {r3-r5,lr}            ;11102
0063d8  4608              MOV      r0,r1                 ;11102
0063da  f7ffbffe          B.W      speedz_mem_hndl
;;;11113  
                          ENDP

                  speedChargeHndl PROC
;;;10869  //-----------------------------------------------
;;;10870  void speedChargeHndl(void)
0063de  e92d4ff8          PUSH     {r3-r11,lr}
;;;10871  {
;;;10872  /*
;;;10873  if(sp_ch_stat==scsOFF)
;;;10874  	{
;;;10875  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10876  	}*/
;;;10877  	 
;;;10878  if(sp_ch_stat==scsSTEP1)
0063e2  4f3f              LDR      r7,|L1.25824|
;;;10879  	{
;;;10880  	if(sp_ch_stat_old!=sp_ch_stat)
0063e4  4e55              LDR      r6,|L1.25916|
;;;10881  		{
;;;10882  		sp_ch_stat_cnt=5;
;;;10883  		if(SP_CH_VENT_BLOK==0)
0063e6  f8dfa14c          LDR      r10,|L1.25908|
0063ea  7839              LDRB     r1,[r7,#0]            ;10878  ; sp_ch_stat
;;;10884  			{
;;;10885  			sp_ch_stat_cnt=0;
;;;10886  			sp_ch_stat=scsWRK;
;;;10887  			}
;;;10888  		}
;;;10889  	if(sp_ch_stat_cnt)
;;;10890  		{
;;;10891  		sp_ch_stat_cnt--;
;;;10892  		if(sp_ch_stat_cnt==0)
;;;10893  			{
;;;10894  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10895  
;;;10896  			}
;;;10897  		}
;;;10898  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0063ec  f8df9148          LDR      r9,|L1.25912|
0063f0  7830              LDRB     r0,[r6,#0]            ;10880
0063f2  4c53              LDR      r4,|L1.25920|
0063f4  2500              MOVS     r5,#0                 ;10883
0063f6  f04f0802          MOV      r8,#2                 ;10886
0063fa  2901              CMP      r1,#1                 ;10878
0063fc  d11b              BNE      |L1.25654|
0063fe  2801              CMP      r0,#1                 ;10880
006400  d008              BEQ      |L1.25620|
006402  f04f0105          MOV      r1,#5                 ;10882
006406  8021              STRH     r1,[r4,#0]            ;10882
006408  f8ba1000          LDRH     r1,[r10,#0]           ;10883  ; SP_CH_VENT_BLOK
00640c  b911              CBNZ     r1,|L1.25620|
00640e  8025              STRH     r5,[r4,#0]            ;10885
006410  f8878000          STRB     r8,[r7,#0]            ;10886
                  |L1.25620|
006414  f9b41000          LDRSH    r1,[r4,#0]            ;10889  ; sp_ch_stat_cnt
006418  b139              CBZ      r1,|L1.25642|
00641a  f1a10101          SUB      r1,r1,#1              ;10891
00641e  b209              SXTH     r1,r1                 ;10891
006420  8021              STRH     r1,[r4,#0]            ;10891
006422  b911              CBNZ     r1,|L1.25642|
006424  f04f0103          MOV      r1,#3                 ;10894
006428  7039              STRB     r1,[r7,#0]            ;10894
                  |L1.25642|
00642a  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
00642e  2901              CMP      r1,#1
006430  d101              BNE      |L1.25654|
006432  f8878000          STRB     r8,[r7,#0]
                  |L1.25654|
;;;10899  	}
;;;10900  
;;;10901  if(sp_ch_stat==scsWRK)
006436  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006438  2902              CMP      r1,#2
00643a  d119              BNE      |L1.25712|
;;;10902  	{
;;;10903  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10904  		{
;;;10905  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
00643c  4a41              LDR      r2,|L1.25924|
;;;10906  		hv_vz_up_cnt=0;
00643e  4942              LDR      r1,|L1.25928|
006440  2802              CMP      r0,#2                 ;10903
006442  d008              BEQ      |L1.25686|
006444  4841              LDR      r0,|L1.25932|
006446  f44f6361          MOV      r3,#0xe10             ;10905
00644a  f9b00000          LDRSH    r0,[r0,#0]            ;10905  ; speedChrgTimeInHour
00644e  fb00f003          MUL      r0,r0,r3              ;10905
006452  6010              STR      r0,[r2,#0]            ;10905  ; sp_ch_wrk_cnt
006454  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.25686|
;;;10907  		}
;;;10908  	sp_ch_wrk_cnt--;
006456  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006458  f1a00001          SUB      r0,r0,#1
00645c  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10909  	hv_vz_up_cnt++;
00645e  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006460  f1020201          ADD      r2,r2,#1
006464  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10910  	if(sp_ch_wrk_cnt==0)
006466  b910              CBNZ     r0,|L1.25710|
;;;10911  		{
;;;10912  		sp_ch_stat=scsOFF;
006468  703d              STRB     r5,[r7,#0]
;;;10913  		speedz_mem_hndl(0);
00646a  2000              MOVS     r0,#0
00646c  e070              B        |L1.25936|
                  |L1.25710|
00646e  e071              B        |L1.25940|
                  |L1.25712|
006470  e07a              B        |L1.25960|
006472  0000              DCW      0x0000
                  |L1.25716|
                          DCD      sign_U
                  |L1.25720|
                          DCD      sign_I
                  |L1.25724|
                          DCD      bat
                  |L1.25728|
                          DCD      u_necc_up
                  |L1.25732|
                          DCD      TBAT
                  |L1.25736|
                          DCD      ||area_number.26||
                  |L1.25740|
                          DCD      u_necc_dn
                  |L1.25744|
                          DCD      IKB
                  |L1.25748|
                          DCD      BAT_C_REAL
                  |L1.25752|
                          DCD      NUMBAT
                  |L1.25756|
                          DCD      superviser_cnt
                  |L1.25760|
                          DCD      NPN_OUT
                  |L1.25764|
                          DCD      npn_tz_cnt
                  |L1.25768|
                          DCD      npn_stat
                  |L1.25772|
                          DCD      load_U
                  |L1.25776|
                          DCD      UONPN
                  |L1.25780|
                          DCD      net_Ua
                  |L1.25784|
                          DCD      net_Ub
                  |L1.25788|
                          DCD      net_Uc
                  |L1.25792|
                          DCD      UMN
                  |L1.25796|
                          DCD      TZNPN
                  |L1.25800|
                          DCD      UVNPN
                  |L1.25804|
                          DCD      load_off_cnt
                  |L1.25808|
                          DCD      load_off_stat
                  |L1.25812|
                          DCD      dUNPN
                  |L1.25816|
                          DCD      tloaddisable_cmnd
                  |L1.25820|
                          DCD      spch_plazma
                  |L1.25824|
                          DCD      sp_ch_stat
                  |L1.25828|
                          DCD      speedChrgBlckStat
                  |L1.25832|
                          DCD      ||.text||+0x1d64
                  |L1.25836|
0064ec  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
0064f0  e7e0e1eb
0064f4  eeeae8f0
0064f8  eee2e0ed
0064fc  21      
0064fd  20202000          DCB      "   ",0
006501  00                DCB      0
006502  00                DCB      0
006503  00                DCB      0
                  |L1.25860|
006504  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006508  202020e7
00650c  e0f0ffe4
006510  20202020
006514  20202020
006518  00      
006519  00                DCB      0
00651a  00                DCB      0
00651b  00                DCB      0
                  |L1.25884|
00651c  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006520  20d3f1ea
006524  eef0e5ed
006528  edfbe920
00652c  20202020
006530  00      
006531  00                DCB      0
006532  00                DCB      0
006533  00                DCB      0
                  |L1.25908|
                          DCD      SP_CH_VENT_BLOK
                  |L1.25912|
                          DCD      sk_stat
                  |L1.25916|
                          DCD      sp_ch_stat_old
                  |L1.25920|
                          DCD      sp_ch_stat_cnt
                  |L1.25924|
                          DCD      sp_ch_wrk_cnt
                  |L1.25928|
                          DCD      hv_vz_up_cnt
                  |L1.25932|
                          DCD      speedChrgTimeInHour
                  |L1.25936|
006550  f7fffffe          BL       speedz_mem_hndl
                  |L1.25940|
;;;10914  		}
;;;10915  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10916  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006554  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006558  b930              CBNZ     r0,|L1.25960|
00655a  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
00655e  2801              CMP      r0,#1
006560  d102              BNE      |L1.25960|
006562  f04f0004          MOV      r0,#4
006566  7038              STRB     r0,[r7,#0]
                  |L1.25960|
;;;10917  	#endif
;;;10918  	}
;;;10919  
;;;10920  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006568  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10921  	{
;;;10922  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10923  		{
;;;10924  		sp_ch_stat_cnt=10;
;;;10925  		}
;;;10926  	sp_ch_stat_cnt--;
;;;10927  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10928  		{
;;;10929  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
00656a  f2413b88          MOV      r11,#0x1388
00656e  f04f0a0a          MOV      r10,#0xa              ;10924
006572  2803              CMP      r0,#3                 ;10920
006574  d119              BNE      |L1.26026|
006576  7830              LDRB     r0,[r6,#0]            ;10922  ; sp_ch_stat_old
006578  2803              CMP      r0,#3                 ;10922
00657a  d101              BNE      |L1.25984|
00657c  8820              LDRH     r0,[r4,#0]            ;10922  ; sp_ch_stat_cnt
00657e  b908              CBNZ     r0,|L1.25988|
                  |L1.25984|
006580  f8a4a000          STRH     r10,[r4,#0]           ;10924
                  |L1.25988|
006584  8820              LDRH     r0,[r4,#0]            ;10926  ; sp_ch_stat_cnt
006586  f1a00001          SUB      r0,r0,#1              ;10926
00658a  b200              SXTH     r0,r0                 ;10926
00658c  8020              STRH     r0,[r4,#0]            ;10926
00658e  280a              CMP      r0,#0xa               ;10927
006590  d001              BEQ      |L1.26006|
006592  2809              CMP      r0,#9                 ;10927
006594  d109              BNE      |L1.26026|
                  |L1.26006|
006596  4bfd              LDR      r3,|L1.27020|
006598  a0fd              ADR      r0,|L1.27024|
00659a  f1030218          ADD      r2,r3,#0x18
00659e  f1020118          ADD      r1,r2,#0x18
0065a2  f8cdb000          STR      r11,[sp,#0]
0065a6  f7fffffe          BL       show_mess
                  |L1.26026|
;;;10930  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10931  					"      ВКЛЮЧЕН       ",
;;;10932  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10933  					5000);
;;;10934  		}
;;;10935  	}
;;;10936  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0065aa  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0065ac  2804              CMP      r0,#4
0065ae  d11f              BNE      |L1.26096|
;;;10937  	{
;;;10938  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0065b0  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0065b2  2804              CMP      r0,#4
0065b4  d101              BNE      |L1.26042|
0065b6  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0065b8  b908              CBNZ     r0,|L1.26046|
                  |L1.26042|
;;;10939  		{
;;;10940  		sp_ch_stat_cnt=10;
0065ba  f8a4a000          STRH     r10,[r4,#0]
                  |L1.26046|
;;;10941  		}
;;;10942  	sp_ch_stat_cnt--;
0065be  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0065c0  f1a00001          SUB      r0,r0,#1
0065c4  b200              SXTH     r0,r0
0065c6  8020              STRH     r0,[r4,#0]
;;;10943  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0065c8  280a              CMP      r0,#0xa
0065ca  d001              BEQ      |L1.26064|
0065cc  2809              CMP      r0,#9
0065ce  d109              BNE      |L1.26084|
                  |L1.26064|
;;;10944  		{
;;;10945  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0065d0  4bf5              LDR      r3,|L1.27048|
0065d2  a0ef              ADR      r0,|L1.27024|
0065d4  f1030218          ADD      r2,r3,#0x18
0065d8  f1020118          ADD      r1,r2,#0x18
0065dc  f8cdb000          STR      r11,[sp,#0]
0065e0  f7fffffe          BL       show_mess
                  |L1.26084|
;;;10946  					"    ЗАБЛОКИРОВАН    ",
;;;10947  					"     НЕИСПРАВНА     ",
;;;10948  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10949  					5000);
;;;10950  		}
;;;10951  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0065e4  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0065e8  2801              CMP      r0,#1
0065ea  d101              BNE      |L1.26096|
0065ec  f8878000          STRB     r8,[r7,#0]
                  |L1.26096|
;;;10952  	}
;;;10953  
;;;10954  
;;;10955  sp_ch_stat_old=sp_ch_stat;
0065f0  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0065f2  7030              STRB     r0,[r6,#0]
;;;10956  
;;;10957  
;;;10958  
;;;10959  if(speedChrgAvtEn==1)
0065f4  49ed              LDR      r1,|L1.27052|
;;;10960  	{
;;;10961  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10962  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10963  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10964  		#endif
;;;10965  		)
;;;10966  		{
;;;10967  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10968  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10969  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10970  		#endif
;;;10971  		#ifdef UKU_220_V2
;;;10972  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10973  		#endif
;;;10974  		&&(!speedChrgBlckStat))
0065f6  4cee              LDR      r4,|L1.27056|
0065f8  8809              LDRH     r1,[r1,#0]            ;10959  ; speedChrgAvtEn
0065fa  2901              CMP      r1,#1                 ;10959
0065fc  d10a              BNE      |L1.26132|
0065fe  49ed              LDR      r1,|L1.27060|
;;;10975  			{
;;;10976  			speedChargeStartCnt++;
006600  4eed              LDR      r6,|L1.27064|
006602  f8912023          LDRB     r2,[r1,#0x23]         ;10961  ; spc_stat
006606  4310              ORRS     r0,r0,r2              ;10961
006608  794a              LDRB     r2,[r1,#5]            ;10961  ; vz1_stat
00660a  79c9              LDRB     r1,[r1,#7]            ;10961  ; vz2_stat
00660c  4310              ORRS     r0,r0,r2              ;10961
00660e  4308              ORRS     r0,r0,r1              ;10961
006610  d007              BEQ      |L1.26146|
;;;10977  			if(speedChargeStartCnt>=60)
;;;10978  				{
;;;10979  				speedChargeStartStop();
;;;10980  				speedz_mem_hndl(5);
;;;10981  				}
;;;10982  			}
;;;10983  		else speedChargeStartCnt=0;
;;;10984  		}
;;;10985  	else speedChargeStartCnt=0;
006612  7035              STRB     r5,[r6,#0]
                  |L1.26132|
;;;10986  	}
;;;10987  
;;;10988  
;;;10989  
;;;10990  /*
;;;10991  if(speedChIsOn)
;;;10992  	{
;;;10993  	speedChTimeCnt++;
;;;10994  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10995  		{
;;;10996  		speedChIsOn=0;
;;;10997  		}
;;;10998  	if(speedChrgBlckStat)
;;;10999  		{
;;;11000  		speedChIsOn=0;
;;;11001  		speedChTimeCnt=0;
;;;11002  		}
;;;11003  	}
;;;11004  
;;;11005  
;;;11006  
;;;11007  if(speedChrgAvtEn)
;;;11008  	{
;;;11009  	if(!speedChIsOn)
;;;11010  		{
;;;11011  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11012  			{
;;;11013  			speedChIsOn=1;
;;;11014  			}
;;;11015  		}
;;;11016  	}
;;;11017  
;;;11018  
;;;11019  */
;;;11020  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006614  48e9              LDR      r0,|L1.27068|
006616  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006618  2802              CMP      r0,#2
00661a  d02e              BEQ      |L1.26234|
00661c  8025              STRH     r5,[r4,#0]
                  |L1.26142|
;;;11021  else
;;;11022  	{
;;;11023  	speedChrgBlckStat=0;
;;;11024  	if(speedChrgBlckSrc==1)
;;;11025  		{
;;;11026  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11027  		}
;;;11028  	else if(speedChrgBlckSrc==2)
;;;11029  		{
;;;11030  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11031  		}
;;;11032  	}
;;;11033  
;;;11034  /*
;;;11035  if(speedChrgBlckStat==1)
;;;11036  	{
;;;11037  
;;;11038  	//speedChargeStartStop();
;;;11039  
;;;11040  	speedChrgShowCnt++;
;;;11041  	if(speedChrgShowCnt>=30)	
;;;11042  		{
;;;11043  		speedChrgShowCnt=0;
;;;11044  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11045  					"       ЗАРЯД        ",
;;;11046  					"     ЗАПРЕЩЕН!!!    ",
;;;11047  					"                    ",
;;;11048  					5000);
;;;11049  		}
;;;11050  	} 
;;;11051  else speedChrgShowCnt=0;  */
;;;11052  
;;;11053  
;;;11054  }
00661e  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.26146|
006622  48e7              LDR      r0,|L1.27072|
006624  49e7              LDR      r1,|L1.27076|
006626  f9b00000          LDRSH    r0,[r0,#0]            ;10967  ; load_U
00662a  f9b11000          LDRSH    r1,[r1,#0]            ;10967  ; u_necc
00662e  4288              CMP      r0,r1                 ;10967
006630  da14              BGE      |L1.26204|
006632  1a08              SUBS     r0,r1,r0              ;10967
006634  49e4              LDR      r1,|L1.27080|
006636  f9b11000          LDRSH    r1,[r1,#0]            ;10967  ; speedChrgDU
00663a  4288              CMP      r0,r1                 ;10967
00663c  dd0e              BLE      |L1.26204|
00663e  48e3              LDR      r0,|L1.27084|
006640  49e3              LDR      r1,|L1.27088|
006642  f9b00000          LDRSH    r0,[r0,#0]            ;10969  ; Ib_ips_termokompensat
006646  8809              LDRH     r1,[r1,#0]            ;10969  ; IZMAX
006648  fb90f0fa          SDIV     r0,r0,r10             ;10969
00664c  1a40              SUBS     r0,r0,r1              ;10969
00664e  b200              SXTH     r0,r0                 ;10969
006650  f7fffffe          BL       abs
006654  2805              CMP      r0,#5                 ;10969
006656  da01              BGE      |L1.26204|
006658  8820              LDRH     r0,[r4,#0]            ;10974  ; speedChrgBlckStat
00665a  b108              CBZ      r0,|L1.26208|
                  |L1.26204|
00665c  7035              STRB     r5,[r6,#0]            ;10983
00665e  e7d9              B        |L1.26132|
                  |L1.26208|
006660  7830              LDRB     r0,[r6,#0]            ;10976  ; speedChargeStartCnt
006662  f1000001          ADD      r0,r0,#1              ;10976
006666  b2c0              UXTB     r0,r0                 ;10976
006668  7030              STRB     r0,[r6,#0]            ;10976
00666a  283c              CMP      r0,#0x3c              ;10977
00666c  d3d2              BCC      |L1.26132|
00666e  f7fffffe          BL       speedChargeStartStop
006672  2005              MOVS     r0,#5                 ;10980
006674  f7fffffe          BL       speedz_mem_hndl
006678  e7cc              B        |L1.26132|
                  |L1.26234|
00667a  8025              STRH     r5,[r4,#0]            ;11023
00667c  48d5              LDR      r0,|L1.27092|
00667e  49d6              LDR      r1,|L1.27096|
006680  f44f63fa          MOV      r3,#0x7d0             ;11026
006684  f9b00000          LDRSH    r0,[r0,#0]            ;11030  ; speedChrgBlckLog
006688  b918              CBNZ     r0,|L1.26258|
00668a  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;11030  ; adc_buff_
00668e  429a              CMP      r2,r3                 ;11030
006690  dc05              BGT      |L1.26270|
                  |L1.26258|
006692  2801              CMP      r0,#1                 ;11030
006694  d1c3              BNE      |L1.26142|
006696  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;11030  ; adc_buff_
00669a  4298              CMP      r0,r3                 ;11030
00669c  dabf              BGE      |L1.26142|
                  |L1.26270|
00669e  f04f0001          MOV      r0,#1                 ;11030
0066a2  8020              STRH     r0,[r4,#0]            ;11030
0066a4  e7bb              B        |L1.26142|
;;;11055  
                          ENDP

                  averageChargeHndl PROC
;;;11114  //-----------------------------------------------
;;;11115  void averageChargeHndl(void)
0066a6  e92d4ff8          PUSH     {r3-r11,lr}
;;;11116  {
;;;11117  /*
;;;11118  if(hv_vz_stat==hvsOFF)
;;;11119  	{
;;;11120  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11121  	} */
;;;11122  if(hv_vz_stat!=hvsOFF)
0066aa  f8dfa330          LDR      r10,|L1.27100|
0066ae  f04f0b00          MOV      r11,#0
0066b2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0066b6  b130              CBZ      r0,|L1.26310|
;;;11123  	{
;;;11124  	hv_vz_stat=hvsOFF; 	
0066b8  f88ab000          STRB     r11,[r10,#0]
;;;11125  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0066bc  2100              MOVS     r1,#0
0066be  f44f70b4          MOV      r0,#0x168
0066c2  f7fffffe          BL       lc640_write
                  |L1.26310|
;;;11126  	}
;;;11127  
;;;11128  if(hv_vz_stat==hvsSTEP1)
0066c6  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;11129  	{
;;;11130  	if(hv_vz_stat_old!=hv_vz_stat)
;;;11131  		{
;;;11132  		hv_vz_stat_cnt=5;
;;;11133  		}
;;;11134  	if(hv_vz_stat_cnt)
;;;11135  		{
;;;11136  		hv_vz_stat_cnt--;
;;;11137  		if(hv_vz_stat_cnt==0)
;;;11138  			{
;;;11139  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;11140  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;11141  			}
;;;11142  		}
;;;11143  	if(sk_stat[0]==1)
0066ca  4ec5              LDR      r6,|L1.27104|
0066cc  4dc5              LDR      r5,|L1.27108|
0066ce  4cc6              LDR      r4,|L1.27112|
0066d0  f04f0905          MOV      r9,#5                 ;11132
0066d4  2801              CMP      r0,#1                 ;11128
0066d6  d131              BNE      |L1.26428|
0066d8  7828              LDRB     r0,[r5,#0]            ;11130  ; hv_vz_stat_old
0066da  2801              CMP      r0,#1                 ;11130
0066dc  d001              BEQ      |L1.26338|
0066de  f8a49000          STRH     r9,[r4,#0]            ;11132
                  |L1.26338|
0066e2  f9b40000          LDRSH    r0,[r4,#0]            ;11134  ; hv_vz_stat_cnt
0066e6  b168              CBZ      r0,|L1.26372|
0066e8  f1a00001          SUB      r0,r0,#1              ;11136
0066ec  b200              SXTH     r0,r0                 ;11136
0066ee  8020              STRH     r0,[r4,#0]            ;11136
0066f0  b940              CBNZ     r0,|L1.26372|
0066f2  f04f0006          MOV      r0,#6                 ;11139
0066f6  f88a0000          STRB     r0,[r10,#0]           ;11139
0066fa  4601              MOV      r1,r0                 ;11140
0066fc  f44f70b4          MOV      r0,#0x168             ;11140
006700  f7fffffe          BL       lc640_write
                  |L1.26372|
006704  7830              LDRB     r0,[r6,#0]  ; sk_stat
006706  2801              CMP      r0,#1
006708  d118              BNE      |L1.26428|
;;;11144  		{
;;;11145  		hv_vz_stat=hvsSTEP2;
00670a  f04f0002          MOV      r0,#2
00670e  f88a0000          STRB     r0,[r10,#0]
;;;11146  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006712  4601              MOV      r1,r0
006714  f44f70b4          MOV      r0,#0x168
006718  f7fffffe          BL       lc640_write
;;;11147  		tree_up(iHV_STEP2_2,1,0,0);
00671c  2300              MOVS     r3,#0
00671e  461a              MOV      r2,r3
006720  2101              MOVS     r1,#1
006722  20eb              MOVS     r0,#0xeb
006724  f7fffffe          BL       tree_up
;;;11148  		tree_up(iHV_STEP2_1,0,0,0);
006728  2300              MOVS     r3,#0
00672a  461a              MOV      r2,r3
00672c  4619              MOV      r1,r3
00672e  20ea              MOVS     r0,#0xea
006730  f7fffffe          BL       tree_up
;;;11149  		ret(1200);
006734  f44f6096          MOV      r0,#0x4b0
006738  f7fffffe          BL       ||ret||
                  |L1.26428|
;;;11150  		}
;;;11151  	}
;;;11152  
;;;11153  if(hv_vz_stat==hvsSTEP2)
00673c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006740  2802              CMP      r0,#2
006742  d10b              BNE      |L1.26460|
;;;11154  	{
;;;11155  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006744  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006746  2902              CMP      r1,#2
006748  d101              BNE      |L1.26446|
00674a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
00674c  b911              CBNZ     r1,|L1.26452|
                  |L1.26446|
;;;11156  		{
;;;11157  		hv_vz_stat_cnt=15;
00674e  f04f010f          MOV      r1,#0xf
006752  8021              STRH     r1,[r4,#0]
                  |L1.26452|
;;;11158  		}
;;;11159  	hv_vz_stat_cnt--;
006754  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006756  f1a10101          SUB      r1,r1,#1
00675a  8021              STRH     r1,[r4,#0]
                  |L1.26460|
;;;11160  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;11161  	//	{
;;;11162  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;11163  	//				"  Напряжение будет  ",
;;;11164  	//				" увеличено до     @В",
;;;11165  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;11166  	//				4800,UVZ,1);
;;;11167  	//	}
;;;11168  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;11169  	//	{
;;;11170  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;11171  	//				"     НАЖАТИЕМ       ",
;;;11172  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;11173  	//				"      КНОПКИ        ",
;;;11174  	//				4800);
;;;11175  	//	} 
;;;11176  /*	if(sk_stat[1]==1)
;;;11177  		{
;;;11178  		hv_vz_stat=hvsWRK;
;;;11179  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;11180  		}*/
;;;11181  	}
;;;11182  
;;;11183  if(hv_vz_stat==hvsSTEP3)
;;;11184  	{
;;;11185  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;11186  		{
;;;11187  		hv_vz_stat_cnt=10;
00675c  270a              MOVS     r7,#0xa
;;;11188  		}
;;;11189  	hv_vz_stat_cnt--;
;;;11190  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;11191  		{
;;;11192  		show_mess(	"     ВКЛЮЧИТЕ       ",
00675e  f2413888          MOV      r8,#0x1388
006762  2803              CMP      r0,#3                 ;11183
006764  d123              BNE      |L1.26542|
006766  7828              LDRB     r0,[r5,#0]            ;11185  ; hv_vz_stat_old
006768  2803              CMP      r0,#3                 ;11185
00676a  d101              BNE      |L1.26480|
00676c  8820              LDRH     r0,[r4,#0]            ;11185  ; hv_vz_stat_cnt
00676e  b900              CBNZ     r0,|L1.26482|
                  |L1.26480|
006770  8027              STRH     r7,[r4,#0]            ;11187
                  |L1.26482|
006772  8820              LDRH     r0,[r4,#0]            ;11189  ; hv_vz_stat_cnt
006774  f1a00001          SUB      r0,r0,#1              ;11189
006778  b200              SXTH     r0,r0                 ;11189
00677a  8020              STRH     r0,[r4,#0]            ;11189
00677c  280a              CMP      r0,#0xa               ;11190
00677e  d001              BEQ      |L1.26500|
006780  2809              CMP      r0,#9                 ;11190
006782  d10a              BNE      |L1.26522|
                  |L1.26500|
006784  4b81              LDR      r3,|L1.27020|
006786  a299              ADR      r2,|L1.27116|
006788  33f0              ADDS     r3,r3,#0xf0
00678a  f5a361bf          SUB      r1,r3,#0x5f8
00678e  f1010018          ADD      r0,r1,#0x18
006792  f8cd8000          STR      r8,[sp,#0]
006796  f7fffffe          BL       show_mess
                  |L1.26522|
;;;11193  					"      ТУМБЛЕР       ",
;;;11194  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11195  					"       ЗАРЯД        ",
;;;11196  					5000);
;;;11197  		}
;;;11198  	if(sk_stat[1]==1)
00679a  7870              LDRB     r0,[r6,#1]  ; sk_stat
00679c  2801              CMP      r0,#1
00679e  d106              BNE      |L1.26542|
;;;11199  		{
;;;11200  		hv_vz_stat=hvsWRK;
0067a0  f88a9000          STRB     r9,[r10,#0]
;;;11201  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0067a4  2105              MOVS     r1,#5
0067a6  f44f70b4          MOV      r0,#0x168
0067aa  f7fffffe          BL       lc640_write
                  |L1.26542|
;;;11202  		}
;;;11203  	}
;;;11204  
;;;11205  if(hv_vz_stat==hvsWRK)
0067ae  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0067b2  2805              CMP      r0,#5
0067b4  d13a              BNE      |L1.26668|
;;;11206  	{
;;;11207  	if(hv_vz_stat_old!=hv_vz_stat)
0067b6  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;11208  		{
;;;11209  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
0067b8  4a92              LDR      r2,|L1.27140|
;;;11210  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;11211  		hv_vz_up_cnt=0L;
0067ba  4993              LDR      r1,|L1.27144|
0067bc  2805              CMP      r0,#5                 ;11207
0067be  d00d              BEQ      |L1.26588|
0067c0  4892              LDR      r0,|L1.27148|
0067c2  f44f6361          MOV      r3,#0xe10             ;11209
0067c6  f9b00000          LDRSH    r0,[r0,#0]            ;11209  ; VZ_HR
0067ca  fb00f303          MUL      r3,r0,r3              ;11209
0067ce  6013              STR      r3,[r2,#0]            ;11209  ; hv_vz_wrk_cnt
0067d0  b910              CBNZ     r0,|L1.26584|
0067d2  f44f60e1          MOV      r0,#0x708             ;11210
0067d6  6010              STR      r0,[r2,#0]            ;11210  ; hv_vz_wrk_cnt
                  |L1.26584|
0067d8  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26588|
;;;11212  		}
;;;11213  	hv_vz_wrk_cnt--;
0067dc  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
0067de  f1a00001          SUB      r0,r0,#1
0067e2  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;11214  	hv_vz_up_cnt++;
0067e4  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
0067e6  f1020201          ADD      r2,r2,#1
0067ea  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11215  
;;;11216  	if(hv_vz_wrk_cnt==0)
0067ec  b940              CBNZ     r0,|L1.26624|
;;;11217  		{
;;;11218  		hv_vz_stat=hvsERR4;
0067ee  f04f0009          MOV      r0,#9
0067f2  f88a0000          STRB     r0,[r10,#0]
;;;11219  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
0067f6  4601              MOV      r1,r0
0067f8  f44f70b4          MOV      r0,#0x168
0067fc  f7fffffe          BL       lc640_write
                  |L1.26624|
;;;11220  		}
;;;11221  	if(sk_stat[0]==0)
006800  7830              LDRB     r0,[r6,#0]  ; sk_stat
006802  b940              CBNZ     r0,|L1.26646|
;;;11222  		{
;;;11223  		hv_vz_stat=hvsERR2;
006804  f04f0007          MOV      r0,#7
006808  f88a0000          STRB     r0,[r10,#0]
;;;11224  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
00680c  4601              MOV      r1,r0
00680e  f44f70b4          MOV      r0,#0x168
006812  f7fffffe          BL       lc640_write
                  |L1.26646|
;;;11225  		}
;;;11226  	if(sk_stat[1]==0)
006816  7870              LDRB     r0,[r6,#1]  ; sk_stat
006818  b940              CBNZ     r0,|L1.26668|
;;;11227  		{
;;;11228  		hv_vz_stat=hvsERR3;
00681a  f04f0008          MOV      r0,#8
00681e  f88a0000          STRB     r0,[r10,#0]
;;;11229  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006822  4601              MOV      r1,r0
006824  f44f70b4          MOV      r0,#0x168
006828  f7fffffe          BL       lc640_write
                  |L1.26668|
;;;11230  		}
;;;11231  	}
;;;11232  
;;;11233  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
00682c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006830  2806              CMP      r0,#6
006832  d119              BNE      |L1.26728|
;;;11234  	{
;;;11235  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006834  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006836  2806              CMP      r0,#6
006838  d101              BNE      |L1.26686|
00683a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00683c  b900              CBNZ     r0,|L1.26688|
                  |L1.26686|
;;;11236  		{
;;;11237  		hv_vz_stat_cnt=10;
00683e  8027              STRH     r7,[r4,#0]
                  |L1.26688|
;;;11238  		}
;;;11239  	hv_vz_stat_cnt--;
006840  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006842  f1a00001          SUB      r0,r0,#1
006846  b200              SXTH     r0,r0
006848  8020              STRH     r0,[r4,#0]
;;;11240  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
00684a  280a              CMP      r0,#0xa
00684c  d001              BEQ      |L1.26706|
00684e  2809              CMP      r0,#9
006850  d10a              BNE      |L1.26728|
                  |L1.26706|
;;;11241  		{
;;;11242  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006852  4b4e              LDR      r3,|L1.27020|
006854  f8cd8000          STR      r8,[sp,#0]
006858  f1030218          ADD      r2,r3,#0x18
00685c  f1020118          ADD      r1,r2,#0x18
006860  f2a15084          SUB      r0,r1,#0x584
006864  f7fffffe          BL       show_mess
                  |L1.26728|
;;;11243  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11244  					"      ВКЛЮЧЕН       ",
;;;11245  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11246  					5000);
;;;11247  		}
;;;11248  	}
;;;11249  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006868  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00686c  2807              CMP      r0,#7
00686e  d123              BNE      |L1.26808|
;;;11250  	{
;;;11251  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006870  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006872  2807              CMP      r0,#7
006874  d101              BNE      |L1.26746|
006876  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006878  b900              CBNZ     r0,|L1.26748|
                  |L1.26746|
;;;11252  		{
;;;11253  		hv_vz_stat_cnt=10;
00687a  8027              STRH     r7,[r4,#0]
                  |L1.26748|
;;;11254  		}
;;;11255  	hv_vz_stat_cnt--;
00687c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00687e  f1a00001          SUB      r0,r0,#1
006882  b200              SXTH     r0,r0
006884  8020              STRH     r0,[r4,#0]
;;;11256  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006886  280a              CMP      r0,#0xa
006888  d001              BEQ      |L1.26766|
00688a  2809              CMP      r0,#9
00688c  d10a              BNE      |L1.26788|
                  |L1.26766|
;;;11257  		{
;;;11258  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00688e  4b46              LDR      r3,|L1.27048|
006890  f8cd8000          STR      r8,[sp,#0]
006894  f1030218          ADD      r2,r3,#0x18
006898  f1020118          ADD      r1,r2,#0x18
00689c  f1010018          ADD      r0,r1,#0x18
0068a0  f7fffffe          BL       show_mess
                  |L1.26788|
;;;11259  					"    ЗАБЛОКИРОВАН    ",
;;;11260  					"     НЕИСПРАВНА     ",
;;;11261  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11262  					5000);
;;;11263  		}
;;;11264  	if(sk_stat[0]==1)
0068a4  7830              LDRB     r0,[r6,#0]  ; sk_stat
0068a6  2801              CMP      r0,#1
0068a8  d106              BNE      |L1.26808|
;;;11265  		{
;;;11266  		hv_vz_stat=hvsWRK;
0068aa  f88a9000          STRB     r9,[r10,#0]
;;;11267  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0068ae  2105              MOVS     r1,#5
0068b0  f44f70b4          MOV      r0,#0x168
0068b4  f7fffffe          BL       lc640_write
                  |L1.26808|
;;;11268  		}
;;;11269  	}
;;;11270  
;;;11271  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
0068b8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0068bc  2808              CMP      r0,#8
0068be  d123              BNE      |L1.26888|
;;;11272  	{
;;;11273  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0068c0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0068c2  2808              CMP      r0,#8
0068c4  d101              BNE      |L1.26826|
0068c6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068c8  b900              CBNZ     r0,|L1.26828|
                  |L1.26826|
;;;11274  		{
;;;11275  		hv_vz_stat_cnt=10;
0068ca  8027              STRH     r7,[r4,#0]
                  |L1.26828|
;;;11276  		}
;;;11277  	hv_vz_stat_cnt--;
0068cc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068ce  f1a00001          SUB      r0,r0,#1
0068d2  b200              SXTH     r0,r0
0068d4  8020              STRH     r0,[r4,#0]
;;;11278  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
0068d6  280a              CMP      r0,#0xa
0068d8  d001              BEQ      |L1.26846|
0068da  2809              CMP      r0,#9
0068dc  d10a              BNE      |L1.26868|
                  |L1.26846|
;;;11279  		{
;;;11280  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0068de  4b4c              LDR      r3,|L1.27152|
0068e0  f8cd8000          STR      r8,[sp,#0]
0068e4  f2a35254          SUB      r2,r3,#0x554
0068e8  f1020118          ADD      r1,r2,#0x18
0068ec  f2a150e4          SUB      r0,r1,#0x5e4
0068f0  f7fffffe          BL       show_mess
                  |L1.26868|
;;;11281  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;11282  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;11283  					"    ТУМБЛЕРА!!!     ",
;;;11284  					5000);
;;;11285  		}
;;;11286  	if(sk_stat[1]==1)
0068f4  7870              LDRB     r0,[r6,#1]  ; sk_stat
0068f6  2801              CMP      r0,#1
0068f8  d106              BNE      |L1.26888|
;;;11287  		{
;;;11288  		hv_vz_stat=hvsWRK;
0068fa  f88a9000          STRB     r9,[r10,#0]
;;;11289  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0068fe  2105              MOVS     r1,#5
006900  f44f70b4          MOV      r0,#0x168
006904  f7fffffe          BL       lc640_write
                  |L1.26888|
;;;11290  		}
;;;11291  	}
;;;11292  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006908  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00690c  2809              CMP      r0,#9
00690e  d124              BNE      |L1.26970|
;;;11293  	{
;;;11294  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006910  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006912  2809              CMP      r0,#9
006914  d101              BNE      |L1.26906|
006916  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006918  b900              CBNZ     r0,|L1.26908|
                  |L1.26906|
;;;11295  		{
;;;11296  		hv_vz_stat_cnt=10;
00691a  8027              STRH     r7,[r4,#0]
                  |L1.26908|
;;;11297  		}
;;;11298  	hv_vz_stat_cnt--;
00691c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00691e  f1a00001          SUB      r0,r0,#1
006922  b200              SXTH     r0,r0
006924  8020              STRH     r0,[r4,#0]
;;;11299  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006926  280a              CMP      r0,#0xa
006928  d001              BEQ      |L1.26926|
00692a  2809              CMP      r0,#9
00692c  d10a              BNE      |L1.26948|
                  |L1.26926|
;;;11300  		{
;;;11301  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00692e  4b17              LDR      r3,|L1.27020|
006930  a22e              ADR      r2,|L1.27116|
006932  33f0              ADDS     r3,r3,#0xf0
006934  f5a361bf          SUB      r1,r3,#0x5f8
006938  f50160c5          ADD      r0,r1,#0x628
00693c  f8cd8000          STR      r8,[sp,#0]
006940  f7fffffe          BL       show_mess
                  |L1.26948|
;;;11302  					"      ТУМБЛЕР       ",
;;;11303  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11304  					"       ЗАРЯД        ",
;;;11305  					5000);
;;;11306  		}
;;;11307  	if(sk_stat[1]==0)
006944  7870              LDRB     r0,[r6,#1]  ; sk_stat
006946  b940              CBNZ     r0,|L1.26970|
;;;11308  		{
;;;11309  		hv_vz_stat=hvsOFF;
006948  f88ab000          STRB     r11,[r10,#0]
;;;11310  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
00694c  2100              MOVS     r1,#0
00694e  f44f70b4          MOV      r0,#0x168
006952  f7fffffe          BL       lc640_write
;;;11311  		vz_stop();
006956  f7fffffe          BL       vz_stop
                  |L1.26970|
;;;11312  
;;;11313  		}
;;;11314  	}
;;;11315  hv_vz_stat_old=hv_vz_stat;
00695a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00695e  7028              STRB     r0,[r5,#0]
;;;11316  /*
;;;11317  if(speedChIsOn)
;;;11318  	{
;;;11319  	speedChTimeCnt++;
;;;11320  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11321  		{
;;;11322  		speedChIsOn=0;
;;;11323  		}
;;;11324  	if(speedChrgBlckStat)
;;;11325  		{
;;;11326  		speedChIsOn=0;
;;;11327  		speedChTimeCnt=0;
;;;11328  		}
;;;11329  	}
;;;11330  
;;;11331  
;;;11332  
;;;11333  if(speedChrgAvtEn)
;;;11334  	{
;;;11335  	if(!speedChIsOn)
;;;11336  		{
;;;11337  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11338  			{
;;;11339  			speedChIsOn=1;
;;;11340  			}
;;;11341  		}
;;;11342  	}
;;;11343  
;;;11344  
;;;11345  
;;;11346  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;11347  else
;;;11348  	{
;;;11349  	speedChrgBlckStat=0;
;;;11350  	if(speedChrgBlckSrc==1)
;;;11351  		{
;;;11352  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11353  		}
;;;11354  	else if(speedChrgBlckSrc==2)
;;;11355  		{
;;;11356  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11357  		}
;;;11358  	}
;;;11359  
;;;11360  
;;;11361  if(speedChrgBlckStat==1)
;;;11362  	{
;;;11363  
;;;11364  	//speedChargeStartStop();
;;;11365  
;;;11366  	speedChrgShowCnt++;
;;;11367  	if(speedChrgShowCnt>=30)	
;;;11368  		{
;;;11369  		speedChrgShowCnt=0;
;;;11370  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11371  					"       ЗАРЯД        ",
;;;11372  					"     ЗАПРЕЩЕН!!!    ",
;;;11373  					"                    ",
;;;11374  					5000);
;;;11375  		}
;;;11376  	}
;;;11377  else speedChrgShowCnt=0;
;;;11378  
;;;11379  */
;;;11380  }
006960  e65d              B        |L1.26142|
;;;11381  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;11398  //-----------------------------------------------
;;;11399  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006962  e92d41f0          PUSH     {r4-r8,lr}
;;;11400  {
;;;11401  
;;;11402  numOfForvardBps_old=numOfForvardBps;
006966  4c13              LDR      r4,|L1.27060|
006968  3428              ADDS     r4,r4,#0x28
00696a  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
00696c  7060              STRB     r0,[r4,#1]
;;;11403  
;;;11404  numOfForvardBps=0;
00696e  f04f0500          MOV      r5,#0
006972  f8045928          STRB     r5,[r4],#-0x28
;;;11405  
;;;11406  //FORVARDBPSCHHOUR=10;
;;;11407  
;;;11408  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006976  4e27              LDR      r6,|L1.27156|
006978  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
00697c  2800              CMP      r0,#0
00697e  dd02              BLE      |L1.27014|
006980  f5b07ffa          CMP      r0,#0x1f4
006984  dd48              BLE      |L1.27160|
                  |L1.27014|
;;;11409  	{
;;;11410  	FORVARDBPSCHHOUR=0;
006986  8035              STRH     r5,[r6,#0]
                  |L1.27016|
;;;11411  	return;
;;;11412  	}
;;;11413  
;;;11414  numOfForvardBps_minCnt++;
;;;11415  
;;;11416  
;;;11417  if(numOfForvardBps_minCnt>=60)
;;;11418  	{
;;;11419  	numOfForvardBps_minCnt=0;
;;;11420  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;11421  	numOfForvardBps_hourCnt++;
;;;11422  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;11423  		{
;;;11424  		numOfForvardBps_hourCnt=0;
;;;11425  		}
;;;11426  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;11427  	}
;;;11428  
;;;11429  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;11430  
;;;11431  //if(numOfForvardBps)
;;;11432  //numOfForvardBps_old=numOfForvardBps; 
;;;11433  }
006988  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27020|
                          DCD      ||.text||+0x1c2c
                  |L1.27024|
006990  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006994  caced0c5
006998  cdcddbc9
00699c  20c7c0  
00699f  d0dfc420          DCB      208,223,196,"  ",0
0069a3  2000    
0069a5  00                DCB      0
0069a6  00                DCB      0
0069a7  00                DCB      0
                  |L1.27048|
                          DCD      ||.text||+0x1690
                  |L1.27052|
                          DCD      speedChrgAvtEn
                  |L1.27056|
                          DCD      speedChrgBlckStat
                  |L1.27060|
                          DCD      ||area_number.26||
                  |L1.27064|
                          DCD      speedChargeStartCnt
                  |L1.27068|
                          DCD      speedChrgBlckSrc
                  |L1.27072|
                          DCD      load_U
                  |L1.27076|
                          DCD      u_necc
                  |L1.27080|
                          DCD      speedChrgDU
                  |L1.27084|
                          DCD      Ib_ips_termokompensat
                  |L1.27088|
                          DCD      IZMAX
                  |L1.27092|
                          DCD      speedChrgBlckLog
                  |L1.27096|
                          DCD      ||.bss||+0x40c
                  |L1.27100|
                          DCD      hv_vz_stat
                  |L1.27104|
                          DCD      sk_stat
                  |L1.27108|
                          DCD      hv_vz_stat_old
                  |L1.27112|
                          DCD      hv_vz_stat_cnt
                  |L1.27116|
0069ec  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
0069f0  dbd0c0c2
0069f4  cdc8c2c0
0069f8  ded9c8c9
0069fc  20202020          DCB      "    ",0
006a00  00      
006a01  00                DCB      0
006a02  00                DCB      0
006a03  00                DCB      0
                  |L1.27140|
                          DCD      hv_vz_wrk_cnt
                  |L1.27144|
                          DCD      hv_vz_up_cnt
                  |L1.27148|
                          DCD      VZ_HR
                  |L1.27152|
                          DCD      ||.text||+0x21f8
                  |L1.27156|
                          DCD      FORVARDBPSCHHOUR
                  |L1.27160|
006a18  f894002a          LDRB     r0,[r4,#0x2a]         ;11414  ; numOfForvardBps_minCnt
006a1c  f1000001          ADD      r0,r0,#1              ;11414
006a20  b2c0              UXTB     r0,r0                 ;11414
006a22  f884002a          STRB     r0,[r4,#0x2a]         ;11414
006a26  283c              CMP      r0,#0x3c              ;11417
006a28  d31b              BCC      |L1.27234|
006a2a  f884502a          STRB     r5,[r4,#0x2a]         ;11419
006a2e  f44f7794          MOV      r7,#0x128             ;11420
006a32  4638              MOV      r0,r7                 ;11420
006a34  f7fffffe          BL       lc640_read_int
006a38  f1000001          ADD      r0,r0,#1              ;11421
006a3c  b200              SXTH     r0,r0                 ;11421
006a3e  f8a40074          STRH     r0,[r4,#0x74]         ;11421
006a42  f9b61000          LDRSH    r1,[r6,#0]            ;11422  ; FORVARDBPSCHHOUR
006a46  4aff              LDR      r2,|L1.28228|
006a48  f9b22000          LDRSH    r2,[r2,#0]            ;11422  ; NUMIST
006a4c  fb01f102          MUL      r1,r1,r2              ;11422
006a50  4281              CMP      r1,r0                 ;11422
006a52  dc01              BGT      |L1.27224|
006a54  f8a45074          STRH     r5,[r4,#0x74]         ;11424
                  |L1.27224|
006a58  f9b41074          LDRSH    r1,[r4,#0x74]         ;11426  ; numOfForvardBps_hourCnt
006a5c  4638              MOV      r0,r7                 ;11426
006a5e  f7fffffe          BL       lc640_write_int
                  |L1.27234|
006a62  f9b40074          LDRSH    r0,[r4,#0x74]         ;11429  ; numOfForvardBps_hourCnt
006a66  f9b61000          LDRSH    r1,[r6,#0]            ;11429  ; FORVARDBPSCHHOUR
006a6a  fb90f0f1          SDIV     r0,r0,r1              ;11429
006a6e  f8840028          STRB     r0,[r4,#0x28]         ;11429
006a72  e789              B        |L1.27016|
;;;11434  
                          ENDP

                  numOfForvardBps_init PROC
;;;11435  //-----------------------------------------------
;;;11436  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006a74  b510              PUSH     {r4,lr}
;;;11437  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;11438  lc640_write_int(EE_FORVBPSHOURCNT,0);
006a76  2100              MOVS     r1,#0
006a78  f44f7094          MOV      r0,#0x128
006a7c  f7fffffe          BL       lc640_write_int
;;;11439  numOfForvardBps_minCnt=58;
006a80  49f1              LDR      r1,|L1.28232|
006a82  f04f003a          MOV      r0,#0x3a
006a86  f881002a          STRB     r0,[r1,#0x2a]
;;;11440  }
006a8a  bd10              POP      {r4,pc}
;;;11441  
                          ENDP

                  outVoltContrHndl PROC
;;;11442  //-----------------------------------------------
;;;11443  void outVoltContrHndl(void)
006a8c  b570              PUSH     {r4-r6,lr}
;;;11444  { 
;;;11445  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006a8e  4cef              LDR      r4,|L1.28236|
006a90  48ef              LDR      r0,|L1.28240|
;;;11446  	{
;;;11447  	outVoltContrHndlCnt_=0;
;;;11448  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006a92  4af0              LDR      r2,|L1.28244|
006a94  f9b41000          LDRSH    r1,[r4,#0]            ;11445  ; load_U
006a98  f9b06000          LDRSH    r6,[r0,#0]            ;11445  ; U_OUT_KONTR_MAX
006a9c  2500              MOVS     r5,#0                 ;11447
006a9e  f9b20000          LDRSH    r0,[r2,#0]
006aa2  4bed              LDR      r3,|L1.28248|
006aa4  42b1              CMP      r1,r6                 ;11445
006aa6  dc04              BGT      |L1.27314|
006aa8  4eec              LDR      r6,|L1.28252|
006aaa  f9b66000          LDRSH    r6,[r6,#0]            ;11445  ; U_OUT_KONTR_MIN
006aae  42b1              CMP      r1,r6                 ;11445
006ab0  da0f              BGE      |L1.27346|
                  |L1.27314|
006ab2  801d              STRH     r5,[r3,#0]            ;11447
006ab4  49ea              LDR      r1,|L1.28256|
006ab6  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006aba  4288              CMP      r0,r1
006abc  da1b              BGE      |L1.27382|
;;;11449  		{
;;;11450  		outVoltContrHndlCnt++;
006abe  f1000001          ADD      r0,r0,#1
006ac2  b200              SXTH     r0,r0
006ac4  8010              STRH     r0,[r2,#0]
;;;11451  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006ac6  4288              CMP      r0,r1
006ac8  d115              BNE      |L1.27382|
;;;11452  			{
;;;11453  			avar_uout_hndl(1);
006aca  2001              MOVS     r0,#1
006acc  f7fffffe          BL       avar_uout_hndl
006ad0  e011              B        |L1.27382|
                  |L1.27346|
;;;11454  			}
;;;11455  		}
;;;11456  	}
;;;11457  else
;;;11458  	{
;;;11459  	if(outVoltContrHndlCnt)
006ad2  b180              CBZ      r0,|L1.27382|
;;;11460  		{
;;;11461  		if(outVoltContrHndlCnt_<5)
006ad4  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006ad8  2805              CMP      r0,#5
006ada  da0c              BGE      |L1.27382|
;;;11462  			{
;;;11463  			outVoltContrHndlCnt_++;
006adc  f1000001          ADD      r0,r0,#1
006ae0  b200              SXTH     r0,r0
006ae2  8018              STRH     r0,[r3,#0]
;;;11464  			if(outVoltContrHndlCnt_>=5)
006ae4  2805              CMP      r0,#5
006ae6  db06              BLT      |L1.27382|
;;;11465  				{
;;;11466  				outVoltContrHndlCnt=0;
006ae8  8015              STRH     r5,[r2,#0]
;;;11467  				if(uout_av)avar_uout_hndl(0);
006aea  48de              LDR      r0,|L1.28260|
006aec  7800              LDRB     r0,[r0,#0]  ; uout_av
006aee  b110              CBZ      r0,|L1.27382|
006af0  2000              MOVS     r0,#0
006af2  f7fffffe          BL       avar_uout_hndl
                  |L1.27382|
;;;11468  				}
;;;11469  			}
;;;11470  		}
;;;11471  	}
;;;11472  
;;;11473  if (load_U<(USIGN*10)) 
006af6  48dc              LDR      r0,|L1.28264|
006af8  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006afc  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006b00  eb000080          ADD      r0,r0,r0,LSL #2
006b04  ebb10f40          CMP      r1,r0,LSL #1
006b08  da0b              BGE      |L1.27426|
;;;11474  	{
;;;11475  	if(!bSILENT)
006b0a  48d8              LDR      r0,|L1.28268|
006b0c  6800              LDR      r0,[r0,#0]  ; bSILENT
006b0e  2800              CMP      r0,#0
006b10  d107              BNE      |L1.27426|
;;;11476  		{
;;;11477  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006b12  e8bd4070          POP      {r4-r6,lr}
006b16  2314              MOVS     r3,#0x14
006b18  2201              MOVS     r2,#1
006b1a  2172              MOVS     r1,#0x72
006b1c  20d2              MOVS     r0,#0xd2
006b1e  f7ffbffe          B.W      mess_send
                  |L1.27426|
;;;11478  		}
;;;11479  
;;;11480  	//bU_BAT2REL_AV_BAT=1;
;;;11481  	}
;;;11482  
;;;11483  
;;;11484  }
006b22  bd70              POP      {r4-r6,pc}
;;;11485  
                          ENDP

                  vent_resurs_hndl PROC
;;;11486  //-----------------------------------------------
;;;11487  void vent_resurs_hndl(void)
006b24  e92d47f0          PUSH     {r4-r10,lr}
;;;11488  {
;;;11489  char i;
;;;11490  char crc_in,crc_eval;
;;;11491  
;;;11492  for(i=0;i<NUMIST;i++)
006b28  f04f0200          MOV      r2,#0
;;;11493  	{
;;;11494  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11495  		{
;;;11496  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11497  		}
;;;11498  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11499  		{
;;;11500  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11501  		}
;;;11502  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11503  		{
;;;11504  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11505  		}
;;;11506  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11507  		{
;;;11508  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11509  		}
;;;11510  	crc_in=0;
;;;11511  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11512  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11513  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11514  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11515  
;;;11516  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11517  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11518  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11519  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11520  
;;;11521  	if(crc_eval==crc_in)
;;;11522  		{
;;;11523  		unsigned short temp_US;
;;;11524  		temp_US=0;
;;;11525  
;;;11526  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11527  		temp_US<<=4;
;;;11528  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11529  		temp_US<<=4;
;;;11530  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11531  		temp_US<<=4;
;;;11532  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11533  
;;;11534  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11535  		}
;;;11536  
;;;11537  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006b2c  48d0              LDR      r0,|L1.28272|
006b2e  f8dfc344          LDR      r12,|L1.28276|
006b32  f9b06000          LDRSH    r6,[r0,#0]
006b36  48c3              LDR      r0,|L1.28228|
006b38  f9b07000          LDRSH    r7,[r0,#0]            ;11492
006b3c  e06e              B        |L1.27676|
                  |L1.27454|
006b3e  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11494
006b42  eb001002          ADD      r0,r0,r2,LSL #4       ;11494
006b46  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11494
006b4a  7b41              LDRB     r1,[r0,#0xd]          ;11494
006b4c  098b              LSRS     r3,r1,#6              ;11494
006b4e  d006              BEQ      |L1.27486|
006b50  2301              MOVS     r3,#1                 ;11498
006b52  ebb31f91          CMP      r3,r1,LSR #6          ;11498
006b56  d105              BNE      |L1.27492|
006b58  f8801059          STRB     r1,[r0,#0x59]         ;11500
006b5c  e00f              B        |L1.27518|
                  |L1.27486|
006b5e  f8801058          STRB     r1,[r0,#0x58]         ;11496
006b62  e00c              B        |L1.27518|
                  |L1.27492|
006b64  2302              MOVS     r3,#2                 ;11502
006b66  ebb31f91          CMP      r3,r1,LSR #6          ;11502
006b6a  d102              BNE      |L1.27506|
006b6c  f880105a          STRB     r1,[r0,#0x5a]         ;11504
006b70  e005              B        |L1.27518|
                  |L1.27506|
006b72  2303              MOVS     r3,#3                 ;11506
006b74  ebb31f91          CMP      r3,r1,LSR #6          ;11506
006b78  d101              BNE      |L1.27518|
006b7a  f880105b          STRB     r1,[r0,#0x5b]         ;11508
                  |L1.27518|
006b7e  f8101f58          LDRB     r1,[r0,#0x58]!        ;11511
006b82  f3c11401          UBFX     r4,r1,#4,#2           ;11511
006b86  7843              LDRB     r3,[r0,#1]            ;11512
006b88  f0030530          AND      r5,r3,#0x30           ;11512
006b8c  ea440495          ORR      r4,r4,r5,LSR #2       ;11512
006b90  f8909002          LDRB     r9,[r0,#2]            ;11513
006b94  f0090830          AND      r8,r9,#0x30           ;11513
006b98  ea480804          ORR      r8,r8,r4              ;11513
006b9c  78c5              LDRB     r5,[r0,#3]            ;11514
006b9e  f1a00058          SUB      r0,r0,#0x58           ;11514
006ba2  f0050430          AND      r4,r5,#0x30           ;11514
006ba6  ea480884          ORR      r8,r8,r4,LSL #2       ;11514
006baa  f001010f          AND      r1,r1,#0xf            ;11516
006bae  f003040f          AND      r4,r3,#0xf            ;11517
006bb2  ea840a01          EOR      r10,r4,r1             ;11517
006bb6  f009030f          AND      r3,r9,#0xf            ;11518
006bba  ea83090a          EOR      r9,r3,r10             ;11518
006bbe  f005050f          AND      r5,r5,#0xf            ;11519
006bc2  ea850909          EOR      r9,r5,r9              ;11519
006bc6  45c1              CMP      r9,r8                 ;11521
006bc8  d113              BNE      |L1.27634|
006bca  ea4f1505          LSL      r5,r5,#4              ;11527
006bce  ea430305          ORR      r3,r3,r5              ;11528
006bd2  ea4f1303          LSL      r3,r3,#4              ;11529
006bd6  ea440403          ORR      r4,r4,r3              ;11530
006bda  ea4f5304          LSL      r3,r4,#20             ;11531
006bde  ea4f4313          LSR      r3,r3,#16             ;11531
006be2  ea410103          ORR      r1,r1,r3              ;11532
006be6  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11534
006bea  428b              CMP      r3,r1                 ;11534
006bec  d001              BEQ      |L1.27634|
006bee  f8a0105c          STRH     r1,[r0,#0x5c]         ;11534
                  |L1.27634|
006bf2  f8b0105c          LDRH     r1,[r0,#0x5c]
006bf6  eb060386          ADD      r3,r6,r6,LSL #2
006bfa  ebb10f43          CMP      r1,r3,LSL #1
006bfe  dd06              BLE      |L1.27662|
006c00  2e00              CMP      r6,#0
006c02  dd04              BLE      |L1.27662|
;;;11538  		{
;;;11539  		bps[i]._av|=(1<<4);
006c04  7841              LDRB     r1,[r0,#1]
006c06  f0410110          ORR      r1,r1,#0x10
006c0a  7041              STRB     r1,[r0,#1]
006c0c  e003              B        |L1.27670|
                  |L1.27662|
;;;11540  		}
;;;11541  	else bps[i]._av&=~(1<<4);
006c0e  7841              LDRB     r1,[r0,#1]
006c10  f0210110          BIC      r1,r1,#0x10
006c14  7041              STRB     r1,[r0,#1]
                  |L1.27670|
006c16  f1020201          ADD      r2,r2,#1              ;11492
006c1a  b2d2              UXTB     r2,r2                 ;11492
                  |L1.27676|
006c1c  42ba              CMP      r2,r7                 ;11492
006c1e  db8e              BLT      |L1.27454|
;;;11542  	}
;;;11543  }
006c20  e8bd87f0          POP      {r4-r10,pc}
;;;11544  
                          ENDP

                  vent_hndl PROC
;;;11545  //-----------------------------------------------
;;;11546  void vent_hndl(void)
006c24  e92d4ff0          PUSH     {r4-r11,lr}
;;;11547  {
006c28  b087              SUB      sp,sp,#0x1c
;;;11548  if(RELEVENTSIGN==rvsAKB)
006c2a  4893              LDR      r0,|L1.28280|
;;;11549  	{
;;;11550  	if(vent_stat==0)
006c2c  4c86              LDR      r4,|L1.28232|
;;;11551  		{
;;;11552  		if	(
;;;11553  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006c2e  4993              LDR      r1,|L1.28284|
;;;11554  			||
;;;11555  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11556  			)
;;;11557  			{
;;;11558  			vent_stat=1;
;;;11559  			}
;;;11560  		}
;;;11561  	else if(vent_stat==1)
;;;11562  		{
;;;11563  		if	(
;;;11564  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006c30  4a93              LDR      r2,|L1.28288|
006c32  7800              LDRB     r0,[r0,#0]            ;11548  ; RELEVENTSIGN
006c34  f9943000          LDRSB    r3,[r4,#0]            ;11550
006c38  f9b11000          LDRSH    r1,[r1,#0]            ;11553
006c3c  f9b22000          LDRSH    r2,[r2,#0]
006c40  b148              CBZ      r0,|L1.27734|
;;;11565  			&&
;;;11566  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11567  			)
;;;11568  			{
;;;11569  			vent_stat=0;
;;;11570  			}
;;;11571  		}
;;;11572  	}
;;;11573  else if(RELEVENTSIGN==rvsBPS)
006c42  2802              CMP      r0,#2
006c44  d03c              BEQ      |L1.27840|
;;;11574  	{
;;;11575  /*	if	(
;;;11576  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11577  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11578  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11579  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11580  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11581  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11582  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11583  		)
;;;11584  		{
;;;11585  		vent_stat=1;
;;;11586  		}
;;;11587  	else vent_stat=0;
;;;11588  	*/
;;;11589  
;;;11590  	if	(
;;;11591  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11592  		||
;;;11593  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11594  		||
;;;11595  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11596  		||
;;;11597  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11598  		||
;;;11599  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11600  		||
;;;11601  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11602  		||
;;;11603  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11604  		||
;;;11605  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11606  		)
;;;11607  		{
;;;11608  		vent_stat=1;
;;;11609  		}
;;;11610  	else if(vent_stat==1)
;;;11611  		{
;;;11612  		if	(
;;;11613  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11614  			&&
;;;11615  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11616  			&&
;;;11617  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11618  			&&
;;;11619  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11620  			&&
;;;11621  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11622  			&&
;;;11623  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11624  			&&
;;;11625  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11626  			&&
;;;11627  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11628  			)
;;;11629  			{
;;;11630  			vent_stat=0;
;;;11631  			}
;;;11632  		}
;;;11633  	}
;;;11634  else if(RELEVENTSIGN==rvsEXT)
006c46  2801              CMP      r0,#1
006c48  d07e              BEQ      |L1.27976|
;;;11635  	{
;;;11636  	if	(
;;;11637  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11638  		||
;;;11639  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11640  		||
;;;11641  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11642  		)
;;;11643  		{
;;;11644  		vent_stat=1;
;;;11645  		}
;;;11646  	else if(vent_stat==1)
;;;11647  		{
;;;11648  		if	(
;;;11649  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11650  			&&
;;;11651  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11652  			&&
;;;11653  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11654  			)
;;;11655  			{
;;;11656  			vent_stat=0;
;;;11657  			}
;;;11658  		}
;;;11659  	}
;;;11660  else vent_stat=1;
006c4a  f04f0001          MOV      r0,#1
006c4e  7020              STRB     r0,[r4,#0]
                  |L1.27728|
;;;11661  }
006c50  b007              ADD      sp,sp,#0x1c
006c52  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.27734|
006c56  4f8b              LDR      r7,|L1.28292|
006c58  f8df822c          LDR      r8,|L1.28296|
006c5c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11553
006c60  7b3d              LDRB     r5,[r7,#0xc]          ;11553
006c62  f9b76056          LDRSH    r6,[r7,#0x56]         ;11555
006c66  f898c000          LDRB     r12,[r8,#0]           ;11552
006c6a  f8977058          LDRB     r7,[r7,#0x58]         ;11555
006c6e  f8988001          LDRB     r8,[r8,#1]            ;11555
006c72  b12b              CBZ      r3,|L1.27776|
006c74  2b01              CMP      r3,#1                 ;11561
006c76  d1eb              BNE      |L1.27728|
006c78  f1bc0f55          CMP      r12,#0x55             ;11563
006c7c  d115              BNE      |L1.27818|
006c7e  e010              B        |L1.27810|
                  |L1.27776|
006c80  f1bc0f55          CMP      r12,#0x55             ;11552
006c84  d102              BNE      |L1.27788|
006c86  4288              CMP      r0,r1                 ;11553
006c88  dc07              BGT      |L1.27802|
006c8a  b935              CBNZ     r5,|L1.27802|
                  |L1.27788|
006c8c  f1b80f55          CMP      r8,#0x55              ;11555
006c90  d1de              BNE      |L1.27728|
006c92  428e              CMP      r6,r1                 ;11555
006c94  dc01              BGT      |L1.27802|
006c96  2f00              CMP      r7,#0                 ;11555
006c98  d0da              BEQ      |L1.27728|
                  |L1.27802|
006c9a  f04f0001          MOV      r0,#1                 ;11558
006c9e  7020              STRB     r0,[r4,#0]            ;11558
006ca0  e7d6              B        |L1.27728|
                  |L1.27810|
006ca2  4290              CMP      r0,r2                 ;11564
006ca4  dad4              BGE      |L1.27728|
006ca6  2d00              CMP      r5,#0                 ;11564
006ca8  d1d2              BNE      |L1.27728|
                  |L1.27818|
006caa  f1b80f55          CMP      r8,#0x55              ;11566
006cae  d103              BNE      |L1.27832|
006cb0  4296              CMP      r6,r2                 ;11566
006cb2  dacd              BGE      |L1.27728|
006cb4  2f00              CMP      r7,#0                 ;11566
006cb6  d1cb              BNE      |L1.27728|
                  |L1.27832|
006cb8  f04f0000          MOV      r0,#0                 ;11569
006cbc  7020              STRB     r0,[r4,#0]            ;11569
006cbe  e7c7              B        |L1.27728|
                  |L1.27840|
006cc0  4e6c              LDR      r6,|L1.28276|
006cc2  4860              LDR      r0,|L1.28228|
006cc4  6ab5              LDR      r5,[r6,#0x28]         ;11591
006cc6  f9b00000          LDRSH    r0,[r0,#0]            ;11590  ; NUMIST
006cca  78f6              LDRB     r6,[r6,#3]            ;11591
006ccc  b118              CBZ      r0,|L1.27862|
006cce  428d              CMP      r5,r1                 ;11591
006cd0  dc7a              BGT      |L1.28104|
006cd2  2e1e              CMP      r6,#0x1e              ;11591
006cd4  d278              BCS      |L1.28104|
                  |L1.27862|
006cd6  f8dfc19c          LDR      r12,|L1.28276|
006cda  2801              CMP      r0,#1                 ;11593
006cdc  f8dc708c          LDR      r7,[r12,#0x8c]        ;11593
006ce0  f89cc067          LDRB     r12,[r12,#0x67]       ;11593
006ce4  f8cdc018          STR      r12,[sp,#0x18]        ;11593
006ce8  dd06              BLE      |L1.27896|
006cea  428f              CMP      r7,r1                 ;11593
006cec  dc6c              BGT      |L1.28104|
006cee  f8ddc018          LDR      r12,[sp,#0x18]        ;11593
006cf2  f1bc0f1e          CMP      r12,#0x1e             ;11593
006cf6  d267              BCS      |L1.28104|
                  |L1.27896|
006cf8  f8dfc178          LDR      r12,|L1.28276|
006cfc  2802              CMP      r0,#2                 ;11595
006cfe  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11595
006d02  f8cd8014          STR      r8,[sp,#0x14]         ;11595
006d06  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11595
006d0a  f8cdc010          STR      r12,[sp,#0x10]        ;11595
006d0e  dd08              BLE      |L1.27938|
006d10  f8ddc014          LDR      r12,[sp,#0x14]        ;11595
006d14  458c              CMP      r12,r1                ;11595
006d16  dc57              BGT      |L1.28104|
006d18  f8ddc010          LDR      r12,[sp,#0x10]        ;11595
006d1c  f1bc0f1e          CMP      r12,#0x1e             ;11595
006d20  d252              BCS      |L1.28104|
                  |L1.27938|
006d22  f8dfc150          LDR      r12,|L1.28276|
006d26  2803              CMP      r0,#3                 ;11597
006d28  f8dc8154          LDR      r8,[r12,#0x154]       ;11597
006d2c  f8cd800c          STR      r8,[sp,#0xc]          ;11597
006d30  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11597
006d34  f8cdc008          STR      r12,[sp,#8]           ;11597
006d38  dd0a              BLE      |L1.27984|
006d3a  f8ddc00c          LDR      r12,[sp,#0xc]         ;11597
006d3e  458c              CMP      r12,r1                ;11597
006d40  dc42              BGT      |L1.28104|
006d42  f8ddc008          LDR      r12,[sp,#8]           ;11597
006d46  e000              B        |L1.27978|
                  |L1.27976|
006d48  e0a5              B        |L1.28310|
                  |L1.27978|
006d4a  f1bc0f1e          CMP      r12,#0x1e             ;11597
006d4e  d23b              BCS      |L1.28104|
                  |L1.27984|
006d50  f8df8120          LDR      r8,|L1.28276|
006d54  2804              CMP      r0,#4                 ;11599
006d56  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11599
006d5a  f8988193          LDRB     r8,[r8,#0x193]        ;11599
006d5e  f8cd8004          STR      r8,[sp,#4]            ;11599
006d62  dd06              BLE      |L1.28018|
006d64  458c              CMP      r12,r1                ;11599
006d66  dc2f              BGT      |L1.28104|
006d68  f8dd8004          LDR      r8,[sp,#4]            ;11599
006d6c  f1b80f1e          CMP      r8,#0x1e              ;11599
006d70  d22a              BCS      |L1.28104|
                  |L1.28018|
006d72  f8df9100          LDR      r9,|L1.28276|
006d76  2805              CMP      r0,#5                 ;11601
006d78  f8d9821c          LDR      r8,[r9,#0x21c]        ;11601
006d7c  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11601
006d80  f8cd9000          STR      r9,[sp,#0]            ;11601
006d84  dd06              BLE      |L1.28052|
006d86  4588              CMP      r8,r1                 ;11601
006d88  dc1e              BGT      |L1.28104|
006d8a  f8dd9000          LDR      r9,[sp,#0]            ;11601
006d8e  f1b90f1e          CMP      r9,#0x1e              ;11601
006d92  d219              BCS      |L1.28104|
                  |L1.28052|
006d94  f8dfa0dc          LDR      r10,|L1.28276|
006d98  2806              CMP      r0,#6                 ;11603
006d9a  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11603
006d9e  f8da9280          LDR      r9,[r10,#0x280]       ;11603
006da2  dd04              BLE      |L1.28078|
006da4  4589              CMP      r9,r1                 ;11603
006da6  dc0f              BGT      |L1.28104|
006da8  f1be0f1e          CMP      lr,#0x1e              ;11603
006dac  d20c              BCS      |L1.28104|
                  |L1.28078|
006dae  f8dfb0c4          LDR      r11,|L1.28276|
006db2  2807              CMP      r0,#7                 ;11605
006db4  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11605
006db8  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11605
006dbc  dd08              BLE      |L1.28112|
006dbe  458a              CMP      r10,r1                ;11605
006dc0  dc02              BGT      |L1.28104|
006dc2  f1bb0f1e          CMP      r11,#0x1e             ;11605
006dc6  d303              BCC      |L1.28112|
                  |L1.28104|
006dc8  f04f0001          MOV      r0,#1                 ;11608
006dcc  7020              STRB     r0,[r4,#0]            ;11608
                  |L1.28110|
006dce  e73f              B        |L1.27728|
                  |L1.28112|
006dd0  2b01              CMP      r3,#1                 ;11610
006dd2  d1fc              BNE      |L1.28110|
006dd4  b118              CBZ      r0,|L1.28126|
006dd6  4295              CMP      r5,r2                 ;11613
006dd8  daf9              BGE      |L1.28110|
006dda  2e0a              CMP      r6,#0xa               ;11613
006ddc  d2f7              BCS      |L1.28110|
                  |L1.28126|
006dde  2802              CMP      r0,#2                 ;11615
006de0  db04              BLT      |L1.28140|
006de2  4297              CMP      r7,r2                 ;11615
006de4  daf3              BGE      |L1.28110|
006de6  9906              LDR      r1,[sp,#0x18]         ;11615
006de8  290a              CMP      r1,#0xa               ;11615
006dea  d2f0              BCS      |L1.28110|
                  |L1.28140|
006dec  2803              CMP      r0,#3                 ;11617
006dee  db05              BLT      |L1.28156|
006df0  9905              LDR      r1,[sp,#0x14]         ;11617
006df2  4291              CMP      r1,r2                 ;11617
006df4  daeb              BGE      |L1.28110|
006df6  9904              LDR      r1,[sp,#0x10]         ;11617
006df8  290a              CMP      r1,#0xa               ;11617
006dfa  d2e8              BCS      |L1.28110|
                  |L1.28156|
006dfc  2804              CMP      r0,#4                 ;11619
006dfe  db05              BLT      |L1.28172|
006e00  9903              LDR      r1,[sp,#0xc]          ;11619
006e02  4291              CMP      r1,r2                 ;11619
006e04  dae3              BGE      |L1.28110|
006e06  9902              LDR      r1,[sp,#8]            ;11619
006e08  290a              CMP      r1,#0xa               ;11619
006e0a  d2e0              BCS      |L1.28110|
                  |L1.28172|
006e0c  2805              CMP      r0,#5                 ;11621
006e0e  db04              BLT      |L1.28186|
006e10  4594              CMP      r12,r2                ;11621
006e12  dadc              BGE      |L1.28110|
006e14  9901              LDR      r1,[sp,#4]            ;11621
006e16  290a              CMP      r1,#0xa               ;11621
006e18  d2d9              BCS      |L1.28110|
                  |L1.28186|
006e1a  2806              CMP      r0,#6                 ;11623
006e1c  db04              BLT      |L1.28200|
006e1e  4590              CMP      r8,r2                 ;11623
006e20  dad5              BGE      |L1.28110|
006e22  9900              LDR      r1,[sp,#0]            ;11623
006e24  290a              CMP      r1,#0xa               ;11623
006e26  d2d2              BCS      |L1.28110|
                  |L1.28200|
006e28  2807              CMP      r0,#7                 ;11625
006e2a  db04              BLT      |L1.28214|
006e2c  4591              CMP      r9,r2                 ;11625
006e2e  dace              BGE      |L1.28110|
006e30  f1be0f0a          CMP      lr,#0xa               ;11625
006e34  d2cb              BCS      |L1.28110|
                  |L1.28214|
006e36  2808              CMP      r0,#8                 ;11627
006e38  db29              BLT      |L1.28302|
006e3a  4592              CMP      r10,r2                ;11627
006e3c  dac7              BGE      |L1.28110|
006e3e  f1bb0f0a          CMP      r11,#0xa              ;11627
006e42  e023              B        |L1.28300|
                  |L1.28228|
                          DCD      NUMIST
                  |L1.28232|
                          DCD      ||area_number.26||
                  |L1.28236|
                          DCD      load_U
                  |L1.28240|
                          DCD      U_OUT_KONTR_MAX
                  |L1.28244|
                          DCD      outVoltContrHndlCnt
                  |L1.28248|
                          DCD      outVoltContrHndlCnt_
                  |L1.28252|
                          DCD      U_OUT_KONTR_MIN
                  |L1.28256|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.28260|
                          DCD      uout_av
                  |L1.28264|
                          DCD      USIGN
                  |L1.28268|
                          DCD      bSILENT
                  |L1.28272|
                          DCD      TVENTMAX
                  |L1.28276|
                          DCD      bps
                  |L1.28280|
                          DCD      RELEVENTSIGN
                  |L1.28284|
                          DCD      TVENTON
                  |L1.28288|
                          DCD      TVENTOFF
                  |L1.28292|
                          DCD      bat
                  |L1.28296|
                          DCD      BAT_IS_ON
                  |L1.28300|
006e8c  d29f              BCS      |L1.28110|
                  |L1.28302|
006e8e  f04f0000          MOV      r0,#0                 ;11630
006e92  7020              STRB     r0,[r4,#0]            ;11630
                  |L1.28308|
006e94  e6dc              B        |L1.27728|
                  |L1.28310|
006e96  4823              LDR      r0,|L1.28452|
006e98  4d23              LDR      r5,|L1.28456|
006e9a  4e24              LDR      r6,|L1.28460|
006e9c  f9b00000          LDRSH    r0,[r0,#0]            ;11636  ; NUMDT
006ea0  f9b55000          LDRSH    r5,[r5,#0]            ;11637
006ea4  7836              LDRB     r6,[r6,#0]            ;11637
006ea6  b110              CBZ      r0,|L1.28334|
006ea8  428d              CMP      r5,r1                 ;11637
006eaa  dc1d              BGT      |L1.28392|
006eac  b9e6              CBNZ     r6,|L1.28392|
                  |L1.28334|
006eae  4f1e              LDR      r7,|L1.28456|
006eb0  f8dfc078          LDR      r12,|L1.28460|
006eb4  2801              CMP      r0,#1                 ;11639
006eb6  f9b77002          LDRSH    r7,[r7,#2]            ;11639
006eba  f89cc001          LDRB     r12,[r12,#1]          ;11639
006ebe  dd04              BLE      |L1.28362|
006ec0  428f              CMP      r7,r1                 ;11639
006ec2  dc11              BGT      |L1.28392|
006ec4  f1bc0f00          CMP      r12,#0                ;11639
006ec8  d10e              BNE      |L1.28392|
                  |L1.28362|
006eca  f8df805c          LDR      r8,|L1.28456|
006ece  f8df905c          LDR      r9,|L1.28460|
006ed2  2802              CMP      r0,#2                 ;11641
006ed4  f9b88004          LDRSH    r8,[r8,#4]            ;11641
006ed8  f8999002          LDRB     r9,[r9,#2]            ;11641
006edc  dd08              BLE      |L1.28400|
006ede  4588              CMP      r8,r1                 ;11641
006ee0  dc02              BGT      |L1.28392|
006ee2  f1b90f00          CMP      r9,#0                 ;11641
006ee6  d003              BEQ      |L1.28400|
                  |L1.28392|
006ee8  f04f0001          MOV      r0,#1                 ;11644
006eec  7020              STRB     r0,[r4,#0]            ;11644
006eee  e6af              B        |L1.27728|
                  |L1.28400|
006ef0  2b01              CMP      r3,#1                 ;11646
006ef2  d1cf              BNE      |L1.28308|
006ef4  b118              CBZ      r0,|L1.28414|
006ef6  4295              CMP      r5,r2                 ;11649
006ef8  dacc              BGE      |L1.28308|
006efa  2e00              CMP      r6,#0                 ;11649
006efc  d1ca              BNE      |L1.28308|
                  |L1.28414|
006efe  2802              CMP      r0,#2                 ;11651
006f00  db04              BLT      |L1.28428|
006f02  4297              CMP      r7,r2                 ;11651
006f04  dac6              BGE      |L1.28308|
006f06  f1bc0f00          CMP      r12,#0                ;11651
006f0a  d1c3              BNE      |L1.28308|
                  |L1.28428|
006f0c  2803              CMP      r0,#3                 ;11653
006f0e  db04              BLT      |L1.28442|
006f10  4590              CMP      r8,r2                 ;11653
006f12  dabf              BGE      |L1.28308|
006f14  f1b90f00          CMP      r9,#0                 ;11653
006f18  d1bc              BNE      |L1.28308|
                  |L1.28442|
006f1a  f04f0000          MOV      r0,#0                 ;11656
006f1e  7020              STRB     r0,[r4,#0]            ;11656
006f20  e696              B        |L1.27728|
;;;11662  
                          ENDP

006f22  0000              DCW      0x0000
                  |L1.28452|
                          DCD      NUMDT
                  |L1.28456|
                          DCD      t_ext
                  |L1.28460|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;328    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;329
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.26||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;330    	{
;;;331    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;329  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;329
00000c  b200              SXTH     r0,r0                 ;329
00000e  f7fffffe          BL       abs_pal
;;;332    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;333    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;334    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;337  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;337  ; adc_self_ch_buff
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;337
000032  f44f7196          MOV      r1,#0x12c             ;337
000036  f1a406f2          SUB      r6,r4,#0xf2           ;337
00003a  4288              CMP      r0,r1                 ;337
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]            ;339  ; adc_self_ch_buff
000040  87b0              STRH     r0,[r6,#0x3c]         ;339
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]            ;339  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;339
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;341  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;339
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;341  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;342
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;342  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;339
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;341  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;341
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;342  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;344  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;344  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;344
000074  6004              STR      r4,[r0,#0]            ;345  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;345  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;345
00007c  6044              STR      r4,[r0,#4]            ;345  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;350  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;350
000084  6084              STR      r4,[r0,#8]            ;351  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;351  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;353
00008c  60c1              STR      r1,[r0,#0xc]          ;353  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;353  ; adc_result
000092  2964              CMP      r1,#0x64              ;353
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;354  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;354
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;358
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;360
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;360  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;361
0000b0  428c              CMP      r4,r1                 ;361
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;364
0000b8  6002              STR      r2,[r0,#0]            ;364  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;364  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;369  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;369  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;369
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;369  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;370
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;373  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;373
0000d2  b209              SXTH     r1,r1                 ;377
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;377
0000d6  f5b17f00          CMP      r1,#0x200             ;379
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;379
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;380  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;383
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;383
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;388
0000f2  ea4f2424          ASR      r4,r4,#8              ;388
0000f6  8774              STRH     r4,[r6,#0x3a]         ;389
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;389
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;389  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;392
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f
00010a  2827              CMP      r0,#0x27
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1
000116  7530              STRB     r0,[r6,#0x14]
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]  ; adc_ch
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7cf3              LDRB     r3,[r6,#0x13]  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  0798              LSLS     r0,r3,#30
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]
000136  4461              ADD      r1,r1,r12
000138  f1000001          ADD      r0,r0,#1
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  b2c0              UXTB     r0,r0
00013e  2810              CMP      r0,#0x10
000140  d3f7              BCC      |L3.306|
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  ea4f1021          ASR      r0,r1,#4
000146  4933              LDR      r1,|L3.532|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1a10120          SUB      r1,r1,#0x20
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1
000152  b2e8              UXTB     r0,r5
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  74b0              STRB     r0,[r6,#0x12]
000156  2810              CMP      r0,#0x10
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f1030301          ADD      r3,r3,#1
000160  b2d8              UXTB     r0,r3
000162  74f0              STRB     r0,[r6,#0x13]
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  2810              CMP      r0,#0x10
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f1070701          ADD      r7,r7,#1
000170  f0070001          AND      r0,r7,#1
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000174  7470              STRB     r0,[r6,#0x11]
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]
00017c  f02000ff          BIC      r0,r0,#0xff
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
000180  f1000004          ADD      r0,r0,#4
000184  6010              STR      r0,[r2,#0]
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]  ; adc_ch
00018a  0708              LSLS     r0,r1,#28
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]
000190  f02000ff          BIC      r0,r0,#0xff
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  f1000001          ADD      r0,r0,#1
000198  6010              STR      r0,[r2,#0]
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]
00019e  f02000ff          BIC      r0,r0,#0xff
0001a2  f1000002          ADD      r0,r0,#2
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  6010              STR      r0,[r2,#0]
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]
0001ac  f0435380          ORR      r3,r3,#0x10000000
0001b0  6003              STR      r3,[r0,#0]            ;401
0001b2  6a03              LDR      r3,[r0,#0x20]         ;401
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;401
0001b8  6203              STR      r3,[r0,#0x20]         ;402
0001ba  6e03              LDR      r3,[r0,#0x60]         ;402
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;402
0001c0  6603              STR      r3,[r0,#0x60]         ;404
0001c2  07cb              LSLS     r3,r1,#31             ;404
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;404
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;404
0001cc  6143              STR      r3,[r0,#0x14]         ;405
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;405
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;405
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;420
0001d8  6343              STR      r3,[r0,#0x34]         ;420
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;421
0001de  f0235380          BIC      r3,r3,#0x10000000     ;421
0001e2  6143              STR      r3,[r0,#0x14]         ;423
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;423
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;423
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;424
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;424
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;424
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  6741              STR      r1,[r0,#0x74]
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]
0001fe  f0416180          ORR      r1,r1,#0x4000000
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000202  6741              STR      r1,[r0,#0x74]
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  f0407080          ORR      r0,r0,#0x1000000
00020a  6010              STR      r0,[r2,#0]
00020c  e8bd81f0          POP      {r4-r8,pc}
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.26||+0xf2
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;330    	{
;;;331    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;329
00000c  7820              LDRB     r0,[r4,#0]            ;329  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;329
000010  b2c0              UXTB     r0,r0
;;;332    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;333    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;334    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;342  ; bps_I
000032  8008              STRH     r0,[r1,#0]            ;337
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12                ;337
00003c  4637              MOV      r7,r6                 ;337
00003e  f9b11000          LDRSH    r1,[r1,#0]            ;339  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]            ;339
000044  f9b83000          LDRSH    r3,[r8,#0]            ;339
000048  f9b77000          LDRSH    r7,[r7,#0]            ;339
00004c  4288              CMP      r0,r1                 ;341
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;339
000054  f1b90f0a          CMP      r9,#0xa               ;341
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;342
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;341
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;341
000064  280a              CMP      r0,#0xa               ;342
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;344
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;344
000072  f88c2001          STRB     r2,[r12,#1]           ;344
000076  f1a30301          SUB      r3,r3,#1              ;345
00007a  f8a83000          STRH     r3,[r8,#0]            ;345
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;350
000084  f88c2001          STRB     r2,[r12,#1]           ;351
000088  f1030301          ADD      r3,r3,#1              ;353
00008c  f8a83000          STRH     r3,[r8,#0]            ;353
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;353
000092  4251              RSBS     r1,r2,#0              ;353
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;354  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;358
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;360  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;360
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;361  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;361
0000b4  f04f0004          MOV      r0,#4                 ;364
0000b8  f88d0001          STRB     r0,[sp,#1]            ;364
0000bc  f88d5002          STRB     r5,[sp,#2]            ;369
0000c0  f04f0002          MOV      r0,#2                 ;369
0000c4  f88d0003          STRB     r0,[sp,#3]            ;370
0000c8  f88d5004          STRB     r5,[sp,#4]            ;370
0000cc  f04f0001          MOV      r0,#1                 ;373
0000d0  f88d0005          STRB     r0,[sp,#5]            ;373
0000d4  f04f0106          MOV      r1,#6                 ;377
0000d8  4668              MOV      r0,sp                 ;379
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;380
0000e2  ea4f2020          ASR      r0,r0,#8              ;380
0000e6  f88d0007          STRB     r0,[sp,#7]            ;383
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;383  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;388
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;388
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;389  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;389
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;392
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]  ; main_kb_cnt
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000144  f04f0106          MOV      r1,#6
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000188  f7fffffe          BL       putchar_sc16is700
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.26||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {  
000002  4604              MOV      r4,r0
;;;329    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;330    	{
;;;331    	vz_error=0;
;;;332    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;333    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;341
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;342
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]            ;337
                  |L5.54|
000036  ea000301          AND      r3,r0,r1              ;337
00003a  07db              LSLS     r3,r3,#31             ;337
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]            ;339  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1              ;339
000044  70d0              STRB     r0,[r2,#3]            ;339
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;339
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;341
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;339
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;342
000058  461a              MOV      r2,r3                 ;342
00005a  210e              MOVS     r1,#0xe               ;342
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;342
000066  2202              MOVS     r2,#2                 ;342
000068  210e              MOVS     r1,#0xe               ;344
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;344
000074  2203              MOVS     r2,#3                 ;345
000076  210e              MOVS     r1,#0xe               ;345
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;350
000082  2204              MOVS     r2,#4                 ;350
000084  210e              MOVS     r1,#0xe               ;351
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;353
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;353
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;354  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;354
00009c  70d0              STRB     r0,[r2,#3]            ;358
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;358
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;360
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;360
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;361
0000b0  2201              MOVS     r2,#1                 ;361
0000b2  210e              MOVS     r1,#0xe               ;361
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;369
0000be  461a              MOV      r2,r3                 ;369
0000c0  210e              MOVS     r1,#0xe               ;369
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;370
0000cc  2203              MOVS     r2,#3                 ;373
0000ce  210e              MOVS     r1,#0xe               ;373
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;379
0000da  2204              MOVS     r2,#4                 ;379
0000dc  210e              MOVS     r1,#0xe               ;379
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;383
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;383
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;388  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;388
0000f4  70d0              STRB     r0,[r2,#3]            ;388
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;389
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;389
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;392
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;401
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;401
0001b8  2201              MOVS     r2,#1                 ;402
0001ba  210e              MOVS     r1,#0xe               ;402
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;404
0001c6  2202              MOVS     r2,#2                 ;404
0001c8  210e              MOVS     r1,#0xe               ;404
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;405
0001d4  2203              MOVS     r2,#3                 ;420
0001d6  210e              MOVS     r1,#0xe               ;420
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;421
0001e2  2204              MOVS     r2,#4                 ;423
0001e4  210e              MOVS     r1,#0xe               ;423
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;424
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;424
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;424  ; plazma_inv
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;458
000272  2202              MOVS     r2,#2                 ;458
000274  210e              MOVS     r1,#0xe               ;459
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;461
000280  2203              MOVS     r2,#3                 ;461
000282  210e              MOVS     r1,#0xe               ;461
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;462
00028e  2204              MOVS     r2,#4                 ;462
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  bd70              POP      {r4-r6,pc}
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.26||+0xbc
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;330    	{
;;;331    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;329  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;329  ; TBOXMAX
;;;332    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;341
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]            ;337  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1                 ;337
00003c  2805              CMP      r0,#5                 ;337
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]            ;339
                  |L6.66|
000042  2400              MOVS     r4,#0                 ;339
000044  2801              CMP      r0,#1                 ;339
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;339
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;341  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;341  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;342
00005a  4298              CMP      r0,r3                 ;342
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;341  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;341
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;342
00006a  b249              SXTB     r1,r1                 ;344
00006c  7011              STRB     r1,[r2,#0]            ;344
00006e  291e              CMP      r1,#0x1e              ;344
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;344  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;345
000078  8039              STRH     r1,[r7,#0]            ;345
00007a  7014              STRB     r4,[r2,#0]            ;345
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;350
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;350  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;351
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;353
00008e  b249              SXTB     r1,r1                 ;353
000090  7011              STRB     r1,[r2,#0]            ;353
000092  291e              CMP      r1,#0x1e              ;353
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;354  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;354
00009c  8039              STRH     r1,[r7,#0]            ;358
00009e  7014              STRB     r4,[r2,#0]            ;358
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;358
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;360  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;360
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;361
0000b0  2100              MOVS     r1,#0                 ;361
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;369
0000be  8800              LDRH     r0,[r0,#0]            ;369  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;369
0000c2  b202              SXTH     r2,r0                 ;369
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;370
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;377  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;379
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;379  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;379
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;380  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;380
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;383
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;383
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;388  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;389
0000fc  2928              CMP      r1,#0x28              ;389
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;392  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;330    	{
;;;331    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;329
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;329
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;332    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;341
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0                 ;339
000042  2b01              CMP      r3,#1                 ;339
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;339
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;341
00004e  f8a81000          STRH     r1,[r8,#0]            ;339
000052  2801              CMP      r0,#1                 ;341
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;342
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;342
00005a  2200              MOVS     r2,#0                 ;342
00005c  21e6              MOVS     r1,#0xe6              ;339
00005e  20e1              MOVS     r0,#0xe1              ;341
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;342
000068  f04f0000          MOV      r0,#0                 ;344
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;344
000070  f9b85000          LDRSH    r5,[r8,#0]            ;344
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;345
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;345
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;350
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;350
000086  69c9              LDR      r1,[r1,#0x1c]         ;351
000088  4299              CMP      r1,r3                 ;353
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;353
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;353
000094  b2c0              UXTB     r0,r0                 ;354
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;354
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;354
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;358
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;360
0000aa  7020              STRB     r0,[r4,#0]            ;360
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;361
0000b0  f8a81000          STRH     r1,[r8,#0]            ;361
0000b4  2802              CMP      r0,#2                 ;364
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;364
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;364
0000bc  2200              MOVS     r2,#0                 ;369
0000be  21e6              MOVS     r1,#0xe6              ;369
0000c0  20e1              MOVS     r0,#0xe1              ;369
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;370
0000ca  f04f0000          MOV      r0,#0                 ;370
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;373
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;377
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;379
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;379
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;380
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;380
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;383
0000ea  4299              CMP      r1,r3                 ;383
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;388
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;388
0000f6  b2c0              UXTB     r0,r0                 ;389
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;389
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;389
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;392
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  cntrl_hndl PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  48fd              LDR      r0,|L8.1020|
;;;330    	{
;;;331    	vz_error=0;
000006  4cfe              LDR      r4,|L8.1024|
000008  8800              LDRH     r0,[r0,#0]            ;329  ; IZMAX
00000a  f8a4004c          STRH     r0,[r4,#0x4c]         ;329
00000e  48fd              LDR      r0,|L8.1028|
000010  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
;;;332    	sp_ch_error=0;
000012  b918              CBNZ     r0,|L8.28|
;;;333    	vz1_error=0;
000014  48fc              LDR      r0,|L8.1032|
;;;334    	vz2_error=0;
000016  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  2802              CMP      r0,#2
00001a  d103              BNE      |L8.36|
                  |L8.28|
00001c  48fb              LDR      r0,|L8.1036|
00001e  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L8.36|
000024  7960              LDRB     r0,[r4,#5]            ;337  ; vz1_stat
000026  280a              CMP      r0,#0xa               ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  d103              BNE      |L8.50|
00002a  48f9              LDR      r0,|L8.1040|
00002c  8800              LDRH     r0,[r0,#0]            ;341  ; UZ_IMAX
00002e  f8a4004c          STRH     r0,[r4,#0x4c]         ;342
                  |L8.50|
000032  79e0              LDRB     r0,[r4,#7]            ;337  ; vz2_stat
000034  280a              CMP      r0,#0xa               ;337
000036  d103              BNE      |L8.64|
000038  49f6              LDR      r1,|L8.1044|
00003a  8809              LDRH     r1,[r1,#0]            ;337  ; FZ_IMAX1
00003c  f8a4104c          STRH     r1,[r4,#0x4c]         ;337
                  |L8.64|
000040  280b              CMP      r0,#0xb               ;339
000042  d103              BNE      |L8.76|
000044  48f4              LDR      r0,|L8.1048|
000046  8800              LDRH     r0,[r0,#0]            ;339  ; FZ_IMAX2
000048  f8a4004c          STRH     r0,[r4,#0x4c]         ;339
                  |L8.76|
00004c  f9b40070          LDRSH    r0,[r4,#0x70]         ;341  ; cntrl_stat_blok_cnt
000050  b118              CBZ      r0,|L8.90|
000052  f1a00001          SUB      r0,r0,#1              ;341
000056  f8a40070          STRH     r0,[r4,#0x70]         ;342
                  |L8.90|
00005a  f9b40072          LDRSH    r0,[r4,#0x72]         ;342  ; cntrl_stat_blok_cnt_
00005e  b118              CBZ      r0,|L8.104|
000060  f1a00001          SUB      r0,r0,#1              ;341
000064  f8a40072          STRH     r0,[r4,#0x72]         ;342
                  |L8.104|
000068  48ec              LDR      r0,|L8.1052|
00006a  f04f080a          MOV      r8,#0xa               ;344
00006e  f890103f          LDRB     r1,[r0,#0x3f]         ;344  ; bat
000072  0789              LSLS     r1,r1,#30             ;344
000074  d103              BNE      |L8.126|
000076  f890008b          LDRB     r0,[r0,#0x8b]         ;345  ; bat
00007a  0780              LSLS     r0,r0,#30             ;345
00007c  d005              BEQ      |L8.138|
                  |L8.126|
00007e  f8b4004c          LDRH     r0,[r4,#0x4c]         ;350  ; IZMAX_
000082  fbb0f0f8          UDIV     r0,r0,r8              ;350
000086  f8a4004c          STRH     r0,[r4,#0x4c]         ;351
                  |L8.138|
00008a  48e5              LDR      r0,|L8.1056|
00008c  2601              MOVS     r6,#1                 ;353
00008e  f9b01000          LDRSH    r1,[r0,#0]            ;353  ; REG_SPEED
000092  1e49              SUBS     r1,r1,#1              ;353
000094  2905              CMP      r1,#5                 ;354
000096  d300              BCC      |L8.154|
000098  8006              STRH     r6,[r0,#0]            ;354
                  |L8.154|
00009a  f9b00000          LDRSH    r0,[r0,#0]            ;354  ; REG_SPEED
00009e  2500              MOVS     r5,#0                 ;358
0000a0  eb000180          ADD      r1,r0,r0,LSL #2       ;358
0000a4  7d60              LDRB     r0,[r4,#0x15]         ;360  ; ch_cnt0
0000a6  ebb00f41          CMP      r0,r1,LSL #1          ;360
0000aa  da08              BGE      |L8.190|
0000ac  f1000001          ADD      r0,r0,#1              ;361
0000b0  b2c0              UXTB     r0,r0                 ;361
0000b2  7560              STRB     r0,[r4,#0x15]         ;361
0000b4  ebb00f41          CMP      r0,r1,LSL #1          ;364
0000b8  db01              BLT      |L8.190|
0000ba  7565              STRB     r5,[r4,#0x15]         ;364
0000bc  75a6              STRB     r6,[r4,#0x16]         ;369
                  |L8.190|
0000be  20e1              MOVS     r0,#0xe1              ;369
0000c0  f7fffffe          BL       mess_find_unvol
0000c4  f8dfc35c          LDR      r12,|L8.1060|
0000c8  4ad7              LDR      r2,|L8.1064|
0000ca  f8df9360          LDR      r9,|L8.1068|
0000ce  4fd8              LDR      r7,|L8.1072|
0000d0  b398              CBZ      r0,|L8.314|
0000d2  49d8              LDR      r1,|L8.1076|
0000d4  6808              LDR      r0,[r1,#0]            ;377  ; mess_data
0000d6  2864              CMP      r0,#0x64              ;379
0000d8  d008              BEQ      |L8.236|
0000da  2869              CMP      r0,#0x69              ;379
0000dc  d00b              BEQ      |L8.246|
0000de  286e              CMP      r0,#0x6e              ;380
0000e0  d00f              BEQ      |L8.258|
0000e2  28e5              CMP      r0,#0xe5              ;380
0000e4  d02c              BEQ      |L8.320|
0000e6  28e6              CMP      r0,#0xe6              ;383
0000e8  d02d              BEQ      |L8.326|
                  |L8.234|
0000ea  e1fe              B        |L8.1258|
                  |L8.236|
0000ec  6848              LDR      r0,[r1,#4]            ;383  ; mess_data
0000ee  8ea1              LDRH     r1,[r4,#0x34]         ;388  ; cntrl_stat_old
0000f0  4408              ADD      r0,r0,r1              ;388
0000f2  8660              STRH     r0,[r4,#0x32]         ;388
0000f4  e1f9              B        |L8.1258|
                  |L8.246|
0000f6  6848              LDR      r0,[r1,#4]            ;389  ; mess_data
0000f8  8ea1              LDRH     r1,[r4,#0x34]         ;389  ; cntrl_stat_old
0000fa  eba10000          SUB      r0,r1,r0              ;389
0000fe  8660              STRH     r0,[r4,#0x32]         ;392
000100  e1f3              B        |L8.1258|
                  |L8.258|
000102  8e60              LDRH     r0,[r4,#0x32]         ;392  ; cntrl_stat
000104  f1a00001          SUB      r0,r0,#1
000108  b200              SXTH     r0,r0
00010a  8660              STRH     r0,[r4,#0x32]
00010c  281e              CMP      r0,#0x1e
00010e  dd07              BLE      |L8.288|
000110  48c9              LDR      r0,|L8.1080|
000112  49ca              LDR      r1,|L8.1084|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; load_U
000118  f9b11000          LDRSH    r1,[r1,#0]  ; USIGN
00011c  4288              CMP      r0,r1
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  da0d              BGE      |L8.316|
                  |L8.288|
000120  7be0              LDRB     r0,[r4,#0xf]  ; cntrlStatIsDownCnt
000122  1c40              ADDS     r0,r0,#1
000124  b2c0              UXTB     r0,r0
000126  73e0              STRB     r0,[r4,#0xf]
000128  28fa              CMP      r0,#0xfa
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  d1de              BNE      |L8.234|
00012c  230a              MOVS     r3,#0xa
00012e  2200              MOVS     r2,#0
000130  21e7              MOVS     r1,#0xe7
000132  20e6              MOVS     r0,#0xe6
000134  f7fffffe          BL       mess_send
000138  e1d7              B        |L8.1258|
                  |L8.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  e044              B        |L8.454|
                  |L8.316|
00013c  73e5              STRB     r5,[r4,#0xf]
00013e  e1d4              B        |L8.1258|
                  |L8.320|
000140  6848              LDR      r0,[r1,#4]  ; mess_data
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8660              STRH     r0,[r4,#0x32]
000144  e1d1              B        |L8.1258|
                  |L8.326|
000146  f9bc0000          LDRSH    r0,[r12,#0]  ; bps_U
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
00014a  f9b21000          LDRSH    r1,[r2,#0]  ; u_necc
00014e  4288              CMP      r0,r1
000150  dd1a              BLE      |L8.392|
000152  f04f020b          MOV      r2,#0xb
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f884202e          STRB     r2,[r4,#0x2e]
00015a  eba00001          SUB      r0,r0,r1
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015e  2828              CMP      r0,#0x28
000160  dd07              BLE      |L8.370|
000162  f9b40032          LDRSH    r0,[r4,#0x32]  ; cntrl_stat
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000166  2800              CMP      r0,#0
000168  dd03              BLE      |L8.370|
00016a  f1a00005          SUB      r0,r0,#5
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016e  8660              STRH     r0,[r4,#0x32]
000170  e1bb              B        |L8.1258|
                  |L8.370|
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  f9b40032          LDRSH    r0,[r4,#0x32]  ; cntrl_stat
000176  2800              CMP      r0,#0
000178  d0b7              BEQ      |L8.234|
00017a  7da1              LDRB     r1,[r4,#0x16]  ; b1Hz_ch
00017c  2900              CMP      r1,#0
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  d0b4              BEQ      |L8.234|
000180  f1a00001          SUB      r0,r0,#1
000184  8660              STRH     r0,[r4,#0x32]
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e1b0              B        |L8.1258|
                  |L8.392|
000188  daaf              BGE      |L8.234|
00018a  f04f020c          MOV      r2,#0xc
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018e  f884202e          STRB     r2,[r4,#0x2e]
000192  eba10000          SUB      r0,r1,r0
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000196  2828              CMP      r0,#0x28
000198  dd09              BLE      |L8.430|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  f9b40032          LDRSH    r0,[r4,#0x32]  ; cntrl_stat
00019e  f24031f7          MOV      r1,#0x3f7
0001a2  4288              CMP      r0,r1
0001a4  da03              BGE      |L8.430|
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  f1000005          ADD      r0,r0,#5
0001aa  8660              STRH     r0,[r4,#0x32]
0001ac  e19d              B        |L8.1258|
                  |L8.430|
0001ae  f9b40032          LDRSH    r0,[r4,#0x32]  ; cntrl_stat
0001b2  f5b07f7f          CMP      r0,#0x3fc             ;401
0001b6  da98              BGE      |L8.234|
0001b8  7da1              LDRB     r1,[r4,#0x16]         ;402  ; b1Hz_ch
0001ba  2900              CMP      r1,#0                 ;402
0001bc  d095              BEQ      |L8.234|
0001be  f1000001          ADD      r0,r0,#1              ;404
0001c2  8660              STRH     r0,[r4,#0x32]         ;404
0001c4  e191              B        |L8.1258|
                  |L8.454|
0001c6  7da0              LDRB     r0,[r4,#0x16]         ;404  ; b1Hz_ch
0001c8  2800              CMP      r0,#0                 ;404
0001ca  d08e              BEQ      |L8.234|
0001cc  489c              LDR      r0,|L8.1088|
0001ce  8800              LDRH     r0,[r0,#0]            ;405  ; bIBAT_SMKLBR
0001d0  b118              CBZ      r0,|L8.474|
0001d2  f8990323          LDRB     r0,[r9,#0x323]        ;405  ; bps
0001d6  2828              CMP      r0,#0x28              ;420
0001d8  d987              BLS      |L8.234|
                  |L8.474|
0001da  f104042e          ADD      r4,r4,#0x2e           ;420
0001de  f9b40006          LDRSH    r0,[r4,#6]            ;421  ; cntrl_stat_old
0001e2  8360              STRH     r0,[r4,#0x1a]         ;423
0001e4  f04f0113          MOV      r1,#0x13              ;423
0001e8  7021              STRB     r1,[r4,#0]            ;423
0001ea  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;423  ; Ibmax
0001ee  8be3              LDRH     r3,[r4,#0x1e]         ;424  ; IZMAX_
0001f0  fb91f8f8          SDIV     r8,r1,r8              ;424
0001f4  f1a4042e          SUB      r4,r4,#0x2e           ;424
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  ebb80f43          CMP      r8,r3,LSL #1
0001fc  dd10              BLE      |L8.544|
0001fe  f04f0114          MOV      r1,#0x14
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000202  f884102e          STRB     r1,[r4,#0x2e]
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
00020a  b121              CBZ      r1,|L8.534|
00020c  f1a00001          SUB      r0,r0,#1
000210  f8a40048          STRH     r0,[r4,#0x48]
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000214  e12d              B        |L8.1138|
                  |L8.534|
000216  f1a0000a          SUB      r0,r0,#0xa
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  f8a40048          STRH     r0,[r4,#0x48]
00021e  e128              B        |L8.1138|
                  |L8.544|
000220  da14              BGE      |L8.588|
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  ebc31a03          RSB      r10,r3,r3,LSL #4
000226  458a              CMP      r10,r1
000228  da10              BGE      |L8.588|
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  f04f0115          MOV      r1,#0x15
00022e  f884102e          STRB     r1,[r4,#0x2e]
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000232  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
000236  b121              CBZ      r1,|L8.578|
000238  f1a00001          SUB      r0,r0,#1
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  f8a40048          STRH     r0,[r4,#0x48]
000240  e117              B        |L8.1138|
                  |L8.578|
000242  f1a00003          SUB      r0,r0,#3
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000246  f8a40048          STRH     r0,[r4,#0x48]
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
00024a  e112              B        |L8.1138|
                  |L8.588|
00024c  ebc31a03          RSB      r10,r3,r3,LSL #4
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  458a              CMP      r10,r1
000252  dd0a              BLE      |L8.618|
000254  4598              CMP      r8,r3
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  dd08              BLE      |L8.618|
000258  f04f0116          MOV      r1,#0x16
00025c  f884102e          STRB     r1,[r4,#0x2e]
000260  f1a00001          SUB      r0,r0,#1
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000264  f8a40048          STRH     r0,[r4,#0x48]
000268  e103              B        |L8.1138|
                  |L8.618|
00026a  f9bcc000          LDRSH    r12,[r12,#0]  ; bps_U
00026e  f9b22000          LDRSH    r2,[r2,#0]            ;458  ; u_necc
000272  f8df81d0          LDR      r8,|L8.1092|
000276  f8dfb1d0          LDR      r11,|L8.1096|
00027a  4594              CMP      r12,r2                ;461
00027c  da72              BGE      |L8.868|
00027e  f04f0a17          MOV      r10,#0x17             ;461
000282  f884a02e          STRB     r10,[r4,#0x2e]        ;461
000286  f9b88000          LDRSH    r8,[r8,#0]            ;462  ; UB0
00028a  f9bba000          LDRSH    r10,[r11,#0]          ;462  ; UB20
00028e  eba8080a          SUB      r8,r8,r10             ;462
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000292  eba20a08          SUB      r10,r2,r8
000296  45e2              CMP      r10,r12
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  dd37              BLE      |L8.778|
00029a  f04f0218          MOV      r2,#0x18
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  f884202e          STRB     r2,[r4,#0x2e]
0002a2  2900              CMP      r1,#0
0002a4  da10              BGE      |L8.712|
0002a6  f04f0119          MOV      r1,#0x19
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  f884102e          STRB     r1,[r4,#0x2e]
0002ae  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  b121              CBZ      r1,|L8.702|
0002b4  f1000001          ADD      r0,r0,#1
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
0002b8  f8a40048          STRH     r0,[r4,#0x48]
0002bc  e0d9              B        |L8.1138|
                  |L8.702|
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  f100000a          ADD      r0,r0,#0xa
0002c2  f8a40048          STRH     r0,[r4,#0x48]
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c6  e0d4              B        |L8.1138|
                  |L8.712|
0002c8  eb030283          ADD      r2,r3,r3,LSL #2
0002cc  428a              CMP      r2,r1
0002ce  dd10              BLE      |L8.754|
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  f04f011a          MOV      r1,#0x1a
0002d4  f884102e          STRB     r1,[r4,#0x2e]
0002d8  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
0002dc  b121              CBZ      r1,|L8.744|
0002de  f1000001          ADD      r0,r0,#1
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  f8a40048          STRH     r0,[r4,#0x48]
0002e6  e0c4              B        |L8.1138|
                  |L8.744|
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  f1000002          ADD      r0,r0,#2
0002ec  f8a40048          STRH     r0,[r4,#0x48]
0002f0  e0bf              B        |L8.1138|
                  |L8.754|
0002f2  ebb10f42          CMP      r1,r2,LSL #1
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
0002f6  da07              BGE      |L8.776|
0002f8  f04f011b          MOV      r1,#0x1b
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  f884102e          STRB     r1,[r4,#0x2e]
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
000300  f1000001          ADD      r0,r0,#1
000304  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.776|
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  e0b3              B        |L8.1138|
                  |L8.778|
00030a  ea4f7ae8          ASR      r10,r8,#31
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  eb08789a          ADD      r8,r8,r10,LSR #30
000312  eba208a8          SUB      r8,r2,r8,ASR #2
000316  45e0              CMP      r8,r12
000318  dd25              BLE      |L8.870|
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
00031a  f04f021c          MOV      r2,#0x1c
00031e  f884202e          STRB     r2,[r4,#0x2e]
000322  eb030283          ADD      r2,r3,r3,LSL #2
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
000326  428a              CMP      r2,r1
000328  dd10              BLE      |L8.844|
00032a  f04f011d          MOV      r1,#0x1d
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
00032e  f884102e          STRB     r1,[r4,#0x2e]
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
000336  b121              CBZ      r1,|L8.834|
000338  f1000001          ADD      r0,r0,#1
00033c  f8a40048          STRH     r0,[r4,#0x48]
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
000340  e097              B        |L8.1138|
                  |L8.834|
000342  f1000002          ADD      r0,r0,#2
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  f8a40048          STRH     r0,[r4,#0x48]
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
00034a  e092              B        |L8.1138|
                  |L8.844|
00034c  ebb10f42          CMP      r1,r2,LSL #1
000350  da07              BGE      |L8.866|
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  f04f011e          MOV      r1,#0x1e
000356  f884102e          STRB     r1,[r4,#0x2e]
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
00035a  f1000001          ADD      r0,r0,#1
00035e  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.866|
000362  e086              B        |L8.1138|
                  |L8.868|
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
000364  e014              B        |L8.912|
                  |L8.870|
000366  1e52              SUBS     r2,r2,#1
000368  4594              CMP      r12,r2
00036a  da10              BGE      |L8.910|
00036c  f04f021f          MOV      r2,#0x1f
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
000370  f884202e          STRB     r2,[r4,#0x2e]
000374  eb030283          ADD      r2,r3,r3,LSL #2
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
000378  ebb10f42          CMP      r1,r2,LSL #1
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  da79              BGE      |L8.1138|
00037e  f04f0120          MOV      r1,#0x20
000382  f884102e          STRB     r1,[r4,#0x2e]
000386  f1000001          ADD      r0,r0,#1
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
00038a  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.910|
00038e  e070              B        |L8.1138|
                  |L8.912|
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  dd6f              BLE      |L8.1138|
000392  f04f0121          MOV      r1,#0x21
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
000396  f884102e          STRB     r1,[r4,#0x2e]
00039a  f9b81000          LDRSH    r1,[r8,#0]  ; UB0
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039e  f9bb3000          LDRSH    r3,[r11,#0]  ; UB20
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  eba10103          SUB      r1,r1,r3
0003a6  eb010302          ADD      r3,r1,r2
0003aa  4563              CMP      r3,r12
0003ac  da13              BGE      |L8.982|
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  f04f0122          MOV      r1,#0x22
0003b2  f884102e          STRB     r1,[r4,#0x2e]
0003b6  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
0003ba  b939              CBNZ     r1,|L8.972|
0003bc  4923              LDR      r1,|L8.1100|
0003be  8809              LDRH     r1,[r1,#0]  ; TERMOKOMPENS
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  b121              CBZ      r1,|L8.972|
0003c2  f1a0000a          SUB      r0,r0,#0xa
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  f8a40048          STRH     r0,[r4,#0x48]
0003ca  e052              B        |L8.1138|
                  |L8.972|
0003cc  f1a00001          SUB      r0,r0,#1
0003d0  f8a40048          STRH     r0,[r4,#0x48]
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
0003d4  e04d              B        |L8.1138|
                  |L8.982|
0003d6  17cb              ASRS     r3,r1,#31
0003d8  eb017193          ADD      r1,r1,r3,LSR #30
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
0003dc  eb0201a1          ADD      r1,r2,r1,ASR #2
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  4561              CMP      r1,r12
0003e2  da3b              BGE      |L8.1116|
0003e4  f04f0123          MOV      r1,#0x23
0003e8  f884102e          STRB     r1,[r4,#0x2e]
0003ec  f8b41070          LDRH     r1,[r4,#0x70]  ; cntrl_stat_blok_cnt
0003f0  b371              CBZ      r1,|L8.1104|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
0003f2  f1a00001          SUB      r0,r0,#1
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
0003f6  f8a40048          STRH     r0,[r4,#0x48]
0003fa  e03a              B        |L8.1138|
                  |L8.1020|
                          DCD      IZMAX
                  |L8.1024|
                          DCD      ||area_number.26||
                  |L8.1028|
                          DCD      speedChIsOn
                  |L8.1032|
                          DCD      sp_ch_stat
                  |L8.1036|
                          DCD      speedChrgCurr
                  |L8.1040|
                          DCD      UZ_IMAX
                  |L8.1044|
                          DCD      FZ_IMAX1
                  |L8.1048|
                          DCD      FZ_IMAX2
                  |L8.1052|
                          DCD      bat
                  |L8.1056|
                          DCD      REG_SPEED
                  |L8.1060|
                          DCD      bps_U
                  |L8.1064|
                          DCD      u_necc
                  |L8.1068|
                          DCD      bps
                  |L8.1072|
                          DCD      ica_cntrl_hndl_cnt
                  |L8.1076|
                          DCD      mess_data
                  |L8.1080|
                          DCD      load_U
                  |L8.1084|
                          DCD      USIGN
                  |L8.1088|
                          DCD      bIBAT_SMKLBR
                  |L8.1092|
                          DCD      UB0
                  |L8.1096|
                          DCD      UB20
                  |L8.1100|
                          DCD      TERMOKOMPENS
                  |L8.1104|
000450  e7ff              B        |L8.1106|
                  |L8.1106|
000452  f1a00002          SUB      r0,r0,#2
000456  f8a40048          STRH     r0,[r4,#0x48]
00045a  e00a              B        |L8.1138|
                  |L8.1116|
00045c  1c52              ADDS     r2,r2,#1
00045e  4594              CMP      r12,r2
000460  dd07              BLE      |L8.1138|
000462  f04f0124          MOV      r1,#0x24
000466  f884102e          STRB     r1,[r4,#0x2e]
00046a  f1a00001          SUB      r0,r0,#1
00046e  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.1138|
000472  4837              LDR      r0,|L8.1360|
000474  7961              LDRB     r1,[r4,#5]  ; vz1_stat
000476  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
000478  4308              ORRS     r0,r0,r1
00047a  79e1              LDRB     r1,[r4,#7]  ; vz2_stat
00047c  4308              ORRS     r0,r0,r1
00047e  d10e              BNE      |L8.1182|
000480  4834              LDR      r0,|L8.1364|
000482  7840              LDRB     r0,[r0,#1]  ; sk_stat
000484  2801              CMP      r0,#1
000486  d10a              BNE      |L8.1182|
000488  4833              LDR      r0,|L8.1368|
00048a  7840              LDRB     r0,[r0,#1]  ; sk_stat_old
00048c  b938              CBNZ     r0,|L8.1182|
00048e  4833              LDR      r0,|L8.1372|
000490  8800              LDRH     r0,[r0,#0]  ; VZ_KIND
000492  2801              CMP      r0,#1
000494  d103              BNE      |L8.1182|
000496  f04f0032          MOV      r0,#0x32
00049a  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.1182|
00049e  f24032f2          MOV      r2,#0x3f2
0004a2  210a              MOVS     r1,#0xa
0004a4  482e              LDR      r0,|L8.1376|
0004a6  f7fffffe          BL       gran
0004aa  482e              LDR      r0,|L8.1380|
0004ac  8800              LDRH     r0,[r0,#0]  ; net_av_2min_timer
0004ae  b110              CBZ      r0,|L8.1206|
0004b0  8ea0              LDRH     r0,[r4,#0x34]  ; cntrl_stat_old
0004b2  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.1206|
0004b6  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
0004ba  86a0              STRH     r0,[r4,#0x34]
0004bc  8660              STRH     r0,[r4,#0x32]
0004be  482a              LDR      r0,|L8.1384|
0004c0  f9b00000          LDRSH    r0,[r0,#0]  ; ICA_EN
0004c4  b938              CBNZ     r0,|L8.1238|
0004c6  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0004c8  b129              CBZ      r1,|L8.1238|
0004ca  4928              LDR      r1,|L8.1388|
0004cc  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0004ce  8661              STRH     r1,[r4,#0x32]
0004d0  f8a41048          STRH     r1,[r4,#0x48]
0004d4  86a1              STRH     r1,[r4,#0x34]
                  |L8.1238|
0004d6  2801              CMP      r0,#1
0004d8  d001              BEQ      |L8.1246|
0004da  2802              CMP      r0,#2
0004dc  d105              BNE      |L8.1258|
                  |L8.1246|
0004de  4924              LDR      r1,|L8.1392|
0004e0  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
0004e4  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
0004e6  4408              ADD      r0,r0,r1
0004e8  8660              STRH     r0,[r4,#0x32]
                  |L8.1258|
0004ea  7625              STRB     r5,[r4,#0x18]
0004ec  75e5              STRB     r5,[r4,#0x17]
0004ee  4821              LDR      r0,|L8.1396|
0004f0  f9b01000          LDRSH    r1,[r0,#0]
0004f4  e00c              B        |L8.1296|
                  |L8.1270|
0004f6  eb0002c0          ADD      r2,r0,r0,LSL #3
0004fa  eb021200          ADD      r2,r2,r0,LSL #4
0004fe  eb090282          ADD      r2,r9,r2,LSL #2
000502  78d2              LDRB     r2,[r2,#3]
000504  2a1e              CMP      r2,#0x1e
000506  d200              BCS      |L8.1290|
000508  7626              STRB     r6,[r4,#0x18]
                  |L8.1290|
00050a  f1000001          ADD      r0,r0,#1
00050e  75e0              STRB     r0,[r4,#0x17]
                  |L8.1296|
000510  7de0              LDRB     r0,[r4,#0x17]  ; i
000512  4288              CMP      r0,r1
000514  dbef              BLT      |L8.1270|
000516  7e20              LDRB     r0,[r4,#0x18]  ; iiii
000518  b948              CBNZ     r0,|L8.1326|
00051a  4817              LDR      r0,|L8.1400|
00051c  8800              LDRH     r0,[r0,#0]  ; PWM_START
00051e  eb000080          ADD      r0,r0,r0,LSL #2
000522  ea4f0040          LSL      r0,r0,#1
000526  8660              STRH     r0,[r4,#0x32]
000528  86a0              STRH     r0,[r4,#0x34]
00052a  f8a40048          STRH     r0,[r4,#0x48]
                  |L8.1326|
00052e  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
000532  b110              CBZ      r0,|L8.1338|
000534  f1a00001          SUB      r0,r0,#1
000538  8038              STRH     r0,[r7,#0]
                  |L8.1338|
00053a  4809              LDR      r0,|L8.1376|
00053c  f24032fe          MOV      r2,#0x3fe
000540  210a              MOVS     r1,#0xa
000542  3816              SUBS     r0,r0,#0x16
000544  f7fffffe          BL       gran
000548  75a5              STRB     r5,[r4,#0x16]
00054a  e8bd9ff0          POP      {r4-r12,pc}
;;;938    
                          ENDP

00054e  0000              DCW      0x0000
                  |L8.1360|
                          DCD      hv_vz_stat
                  |L8.1364|
                          DCD      sk_stat
                  |L8.1368|
                          DCD      sk_stat_old
                  |L8.1372|
                          DCD      VZ_KIND
                  |L8.1376|
                          DCD      ||area_number.26||+0x48
                  |L8.1380|
                          DCD      net_av_2min_timer
                  |L8.1384|
                          DCD      ICA_EN
                  |L8.1388|
                          DCD      ica_cntrl_hndl
                  |L8.1392|
                          DCD      ica_u_necc
                  |L8.1396|
                          DCD      NUMIST
                  |L8.1400|
                          DCD      PWM_START

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  averageChargeStartStop PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4908              LDR      r1,|L9.36|
;;;328    {  
000002  f44f70b4          MOV      r0,#0x168
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L9.24|
00000a  f04f0200          MOV      r2,#0                 ;329
00000e  700a              STRB     r2,[r1,#0]            ;329
000010  f04f0100          MOV      r1,#0
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L9.24|
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f7ffbffe          B.W      lc640_write
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L9.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.23||, DATA, ALIGN=1

                          EXPORTAS ||area_number.23||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.24||, DATA, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.25||, DATA, ALIGN=1

                          EXPORTAS ||area_number.25||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.27||, DATA, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.28||, DATA, ALIGN=1

                          EXPORTAS ||area_number.28||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.35||, DATA, ALIGN=1

                          EXPORTAS ||area_number.35||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=1

                          EXPORTAS ||area_number.39||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.42||, DATA, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=1

                          EXPORTAS ||area_number.65||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.66||, DATA, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.67||, DATA, ALIGN=1

                          EXPORTAS ||area_number.67||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.69||, DATA, ALIGN=1

                          EXPORTAS ||area_number.69||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
