; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;331    	{
;;;332    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;330  ; spc_stat
00000c  2802              CMP      r0,#2                 ;330
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;333    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;334    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;335    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;338  ; snmp_bat_status
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;338
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;338  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;338
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;340  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;340  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;340
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;340
000052  f9b01000          LDRSH    r1,[r0,#0]            ;342
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;343
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;342
000062  8021              STRH     r1,[r4,#0]            ;342
000064  07c0              LSLS     r0,r0,#31             ;343
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;345
00006a  2208              MOVS     r2,#8                 ;345
00006c  2105              MOVS     r1,#5                 ;345
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;346  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;346
00007a  8028              STRH     r0,[r5,#0]            ;346
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;351
000082  8021              STRH     r1,[r4,#0]            ;351
000084  07c0              LSLS     r0,r0,#31             ;352
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;354
00008a  2208              MOVS     r2,#8                 ;354
00008c  2105              MOVS     r1,#5                 ;354
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;355  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;355
00009a  8028              STRH     r0,[r5,#0]            ;355
                  |L1.156|
00009c  f898003f          LDRB     r0,[r8,#0x3f]         ;359  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;359
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;361  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;361
0000aa  8021              STRH     r1,[r4,#0]            ;361
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;362  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;362
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;365
0000b8  8029              STRH     r1,[r5,#0]            ;365
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;370  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;370
0000c2  8021              STRH     r1,[r4,#0]            ;370
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;371  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;371
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;374
0000d0  8029              STRH     r1,[r5,#0]            ;374
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;378
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;380  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;380
0000dc  8020              STRH     r0,[r4,#0]            ;380
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;381  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;381
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;384
0000ea  8028              STRH     r0,[r5,#0]            ;384
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;389  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;389
0000f4  8020              STRH     r0,[r4,#0]            ;389
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;390  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;390
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;393
000102  8028              STRH     r0,[r5,#0]            ;393
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960024          LDRB     r0,[r6,#0x24]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;402  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;402
0001b6  8020              STRH     r0,[r4,#0]            ;402
0001b8  8828              LDRH     r0,[r5,#0]            ;403  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;403
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;405
0001c0  2208              MOVS     r2,#8                 ;405
0001c2  2105              MOVS     r1,#5                 ;405
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;406  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;406
0001d0  8028              STRH     r0,[r5,#0]            ;406
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;421  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;421
0001da  8020              STRH     r0,[r4,#0]            ;421
0001dc  8828              LDRH     r0,[r5,#0]            ;422  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;422
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;424
0001e4  461a              MOV      r2,r3                 ;424
0001e6  2105              MOVS     r1,#5                 ;424
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;425  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;425
0001f4  8028              STRH     r0,[r5,#0]            ;425
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;459  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;459
000272  8020              STRH     r0,[r4,#0]            ;459
000274  8828              LDRH     r0,[r5,#0]            ;460  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;460
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;462
00027c  2208              MOVS     r2,#8                 ;462
00027e  2105              MOVS     r1,#5                 ;462
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;463  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;463
00028c  8028              STRH     r0,[r5,#0]            ;463
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;574    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;813    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.25||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;579  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;579  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;579
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;579
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;581  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;581
0006e6  8060              STRH     r0,[r4,#2]            ;581
0006e8  8868              LDRH     r0,[r5,#2]            ;582  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;582
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;584
0006f0  2208              MOVS     r2,#8                 ;584
0006f2  2105              MOVS     r1,#5                 ;584
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;585  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;585
000700  8068              STRH     r0,[r5,#2]            ;585
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;590  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;590
00070a  8060              STRH     r0,[r4,#2]            ;590
00070c  8868              LDRH     r0,[r5,#2]            ;591  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;591
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;593
000714  2208              MOVS     r2,#8                 ;593
000716  2105              MOVS     r1,#5                 ;593
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;594  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;594
000724  8068              STRH     r0,[r5,#2]            ;594
                  |L1.1830|
000726  f898008b          LDRB     r0,[r8,#0x8b]         ;598  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;598
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;600  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;600
000734  8061              STRH     r1,[r4,#2]            ;600
000736  8829              LDRH     r1,[r5,#0]            ;601  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;601
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;604  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;604
000742  8069              STRH     r1,[r5,#2]            ;604
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;609  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;609
00074c  8061              STRH     r1,[r4,#2]            ;609
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;610  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;610
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;613
00075a  8069              STRH     r1,[r5,#2]            ;613
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;617
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;619  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;619
000766  8060              STRH     r0,[r4,#2]            ;619
000768  f9b50002          LDRSH    r0,[r5,#2]            ;620  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;620
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;623
000774  8068              STRH     r0,[r5,#2]            ;623
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;628  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;628
00077e  8060              STRH     r0,[r4,#2]            ;628
000780  f9b50002          LDRSH    r0,[r5,#2]            ;629  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;629
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;632
00078c  8068              STRH     r0,[r5,#2]            ;632
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;636  ; IKB
000792  f9b80054          LDRSH    r0,[r8,#0x54]         ;636  ; bat
000796  424a              RSBS     r2,r1,#0              ;636
000798  4290              CMP      r0,r2                 ;636
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;636
0007a2  8060              STRH     r0,[r4,#2]            ;636
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;637
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;637  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;637
0007b0  8060              STRH     r0,[r4,#2]            ;637
                  |L1.1970|
0007b2  f8960023          LDRB     r0,[r6,#0x23]         ;639  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;639
0007b8  d102              BNE      |L1.1984|
0007ba  f8960024          LDRB     r0,[r6,#0x24]         ;639  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;650  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;650
0007c6  8060              STRH     r0,[r4,#2]            ;650
0007c8  8868              LDRH     r0,[r5,#2]            ;651  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;651
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;653
0007d0  2208              MOVS     r2,#8                 ;653
0007d2  2105              MOVS     r1,#5                 ;653
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;654  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;654
0007e0  8068              STRH     r0,[r5,#2]            ;654
                  |L1.2018|
0007e2  f8960023          LDRB     r0,[r6,#0x23]         ;658  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;658
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;669  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;669
0007f0  8060              STRH     r0,[r4,#2]            ;669
0007f2  8868              LDRH     r0,[r5,#2]            ;670  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;670
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;672
0007fa  2208              MOVS     r2,#8                 ;672
0007fc  2105              MOVS     r1,#5                 ;672
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;673  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;673
00080a  8068              STRH     r0,[r5,#2]            ;673
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;677  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;679  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;679
000816  8060              STRH     r0,[r4,#2]            ;679
000818  8868              LDRH     r0,[r5,#2]            ;680  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;680
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;682
000820  2208              MOVS     r2,#8                 ;682
000822  2105              MOVS     r1,#5                 ;682
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;683  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;683
000830  8068              STRH     r0,[r5,#2]            ;683
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;641  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;641
00083c  8060              STRH     r0,[r4,#2]            ;641
00083e  8868              LDRH     r0,[r5,#2]            ;642  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;642
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;644
000846  2208              MOVS     r2,#8                 ;644
000848  2105              MOVS     r1,#5                 ;644
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;645  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;645
000856  8068              STRH     r0,[r5,#2]            ;645
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;660  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;660
000860  8060              STRH     r0,[r4,#2]            ;660
000862  8868              LDRH     r0,[r5,#2]            ;661  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;661
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;663
00086a  2208              MOVS     r2,#8                 ;663
00086c  2105              MOVS     r1,#5                 ;663
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;664  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;664
00087a  8068              STRH     r0,[r5,#2]            ;664
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;688  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;688
000886  8060              STRH     r0,[r4,#2]            ;688
000888  8868              LDRH     r0,[r5,#2]            ;689  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;689
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;691
000890  2208              MOVS     r2,#8                 ;691
000892  2105              MOVS     r1,#5                 ;691
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;692  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;692
0008a0  8068              STRH     r0,[r5,#2]            ;692
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;696  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;696
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;707  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;707
0008b0  8060              STRH     r0,[r4,#2]            ;707
0008b2  8868              LDRH     r0,[r5,#2]            ;708  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;708
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;710
0008ba  2208              MOVS     r2,#8                 ;710
0008bc  2105              MOVS     r1,#5                 ;710
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;711  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;711
0008ca  8068              STRH     r0,[r5,#2]            ;711
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;715  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;717  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;717
0008d6  8060              STRH     r0,[r4,#2]            ;717
0008d8  8868              LDRH     r0,[r5,#2]            ;718  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;718
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;720
0008e0  2208              MOVS     r2,#8                 ;720
0008e2  2105              MOVS     r1,#5                 ;720
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;721  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;721
0008f0  8068              STRH     r0,[r5,#2]            ;721
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;698  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;698
0008fa  8060              STRH     r0,[r4,#2]            ;698
0008fc  8868              LDRH     r0,[r5,#2]            ;699  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;699
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;701
000904  2208              MOVS     r2,#8                 ;701
000906  2105              MOVS     r1,#5                 ;701
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;702  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;702
000914  8068              STRH     r0,[r5,#2]            ;702
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;726  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;726
00091e  8060              STRH     r0,[r4,#2]            ;726
000920  8868              LDRH     r0,[r5,#2]            ;727  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;727
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;729
000928  2208              MOVS     r2,#8                 ;729
00092a  2105              MOVS     r1,#5                 ;729
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;730  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;730
000938  8068              STRH     r0,[r5,#2]            ;730
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;734  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;736  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;736
000944  8060              STRH     r0,[r4,#2]            ;736
000946  8868              LDRH     r0,[r5,#2]            ;737  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;737
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;739
00094e  2208              MOVS     r2,#8                 ;739
000950  2105              MOVS     r1,#5                 ;739
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;740  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;740
00095e  8068              STRH     r0,[r5,#2]            ;740
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;745  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;745
000968  8060              STRH     r0,[r4,#2]            ;745
00096a  8868              LDRH     r0,[r5,#2]            ;746  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;746
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;748
000972  2208              MOVS     r2,#8                 ;748
000974  2105              MOVS     r1,#5                 ;748
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;749  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;749
000982  8068              STRH     r0,[r5,#2]            ;749
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;753  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;755  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;755
00098e  8060              STRH     r0,[r4,#2]            ;755
000990  8868              LDRH     r0,[r5,#2]            ;756  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;756
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;758
000998  2208              MOVS     r2,#8                 ;758
00099a  2105              MOVS     r1,#5                 ;758
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;759  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;759
0009a8  8068              STRH     r0,[r5,#2]            ;759
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;764  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;764
0009b2  8060              STRH     r0,[r4,#2]            ;764
0009b4  8868              LDRH     r0,[r5,#2]            ;765  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;765
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;767
0009bc  2208              MOVS     r2,#8                 ;767
0009be  2105              MOVS     r1,#5                 ;767
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;768  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;768
0009cc  8068              STRH     r0,[r5,#2]            ;768
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;772  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;774  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;774
0009d8  8060              STRH     r0,[r4,#2]            ;774
0009da  8868              LDRH     r0,[r5,#2]            ;775  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;775
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;777
0009e2  2208              MOVS     r2,#8                 ;777
0009e4  2105              MOVS     r1,#5                 ;777
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;778  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;778
0009f2  8068              STRH     r0,[r5,#2]            ;778
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;783  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;783
0009fc  8060              STRH     r0,[r4,#2]            ;783
0009fe  8868              LDRH     r0,[r5,#2]            ;784  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;784
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;786
000a06  2208              MOVS     r2,#8                 ;786
000a08  2105              MOVS     r1,#5                 ;786
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;787  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;787
000a16  8068              STRH     r0,[r5,#2]            ;787
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;791  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;793  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;793
000a22  8060              STRH     r0,[r4,#2]            ;793
000a24  8868              LDRH     r0,[r5,#2]            ;794  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;794
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;796
000a2e  2208              MOVS     r2,#8                 ;796
000a30  2105              MOVS     r1,#5                 ;796
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;797  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;797
000a3e  8068              STRH     r0,[r5,#2]            ;797
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;802  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;802
000a48  8060              STRH     r0,[r4,#2]            ;802
000a4a  8868              LDRH     r0,[r5,#2]            ;803  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;803
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;805
000a52  2208              MOVS     r2,#8                 ;805
000a54  2105              MOVS     r1,#5                 ;805
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;806  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;806
000a62  8068              STRH     r0,[r5,#2]            ;806
000a64  e4c7              B        |L1.1014|
;;;939    
                          ENDP

                  ke_start PROC
;;;942    //-----------------------------------------------
;;;943    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;944    {          
000a6a  4606              MOV      r6,r0
;;;945    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;946    /*
;;;947    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;948    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;949    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;950    #endif
;;;951    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;952    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;953    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;954    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;955    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;957    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;958    else */
;;;959    	{
;;;960    
;;;961    	ke_start_stat=kssYES;
000a72  f105050a          ADD      r5,r5,#0xa
000a76  f04f0064          MOV      r0,#0x64
000a7a  7768              STRB     r0,[r5,#0x1d]
;;;962    
;;;963    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  766f              STRB     r7,[r5,#0x19]
;;;964    	__ee_spc_stat=spcKE;
000a82  f8a57060          STRH     r7,[r5,#0x60]
;;;965    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;966    	
;;;967    	spc_bat=0;
000a90  76ac              STRB     r4,[r5,#0x1a]
;;;968    	__ee_spc_bat=0;
000a92  f8a54062          STRH     r4,[r5,#0x62]
;;;969    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;970    
;;;971    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;972    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;973    
;;;974    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404a          STRH     r4,[r8,#0x4a]
;;;975    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;976    
;;;977    	
;;;978    	spc_phase=0;
000ac2  76ec              STRB     r4,[r5,#0x1b]
;;;979    	__ee_spc_phase=0;
000ac4  f8a54064          STRH     r4,[r5,#0x64]
;;;980    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.25||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;981    
;;;982    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;983    
;;;984    		{					
;;;985    		signed short temp_temp;
;;;986    		signed char temp;
;;;987    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060046          ADD      r0,r6,r6,LSL #1
000d98  eb001006          ADD      r0,r0,r6,LSL #4
000d9c  eb080180          ADD      r1,r8,r0,LSL #2
000da0  48ff              LDR      r0,|L1.4512|
000da2  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da4  f1000001          ADD      r0,r0,#1
000da8  f0000007          AND      r0,r0,#7
000dac  eb010040          ADD      r0,r1,r0,LSL #1
000db0  8c00              LDRH     r0,[r0,#0x20]
000db2  9001              STR      r0,[sp,#4]
;;;988    		    
;;;989    		temp=LPC_RTC->YEAR;
000db4  4efb              LDR      r6,|L1.4516|
000db6  8bb0              LDRH     r0,[r6,#0x1c]
000db8  9000              STR      r0,[sp,#0]
;;;990    		gran_char(&temp,1,99);
000dba  f04f0263          MOV      r2,#0x63
000dbe  f04f0101          MOV      r1,#1
000dc2  4668              MOV      r0,sp
000dc4  f7fffffe          BL       gran_char
;;;991    		*((char*)(&(ke_date[0])))=temp;
000dc8  4cf7              LDR      r4,|L1.4520|
000dca  f89d0000          LDRB     r0,[sp,#0]
000dce  7020              STRB     r0,[r4,#0]
;;;992    			
;;;993    		temp=LPC_RTC->MONTH;
000dd0  7e30              LDRB     r0,[r6,#0x18]
000dd2  9000              STR      r0,[sp,#0]
;;;994    		gran_char(&temp,1,12);
000dd4  220c              MOVS     r2,#0xc
000dd6  2101              MOVS     r1,#1
000dd8  4668              MOV      r0,sp
000dda  f7fffffe          BL       gran_char
;;;995    		*(((char*)(&(ke_date[0])))+1)=temp;
000dde  f89d0000          LDRB     r0,[sp,#0]
000de2  7060              STRB     r0,[r4,#1]
;;;996    		
;;;997    		temp=LPC_RTC->DOM;
000de4  7b30              LDRB     r0,[r6,#0xc]
000de6  9000              STR      r0,[sp,#0]
;;;998    		gran_char(&temp,1,31);
000de8  221f              MOVS     r2,#0x1f
000dea  2101              MOVS     r1,#1
000dec  4668              MOV      r0,sp
000dee  f7fffffe          BL       gran_char
;;;999    		*(((char*)(&(ke_date[0])))+2)=temp;			
000df2  f89d0000          LDRB     r0,[sp,#0]
000df6  70a0              STRB     r0,[r4,#2]
;;;1000   				
;;;1001   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df8  f89d0004          LDRB     r0,[sp,#4]
000dfc  70e0              STRB     r0,[r4,#3]
;;;1002   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfe  f24020a2          MOV      r0,#0x2a2
000e02  6821              LDR      r1,[r4,#0]  ; ke_date
000e04  f7fffffe          BL       lc640_write_long
;;;1003   
;;;1004   		temp=LPC_RTC->HOUR;
000e08  7a30              LDRB     r0,[r6,#8]
000e0a  9000              STR      r0,[sp,#0]
;;;1005   		gran_char(&temp,0,23);
000e0c  2217              MOVS     r2,#0x17
000e0e  2100              MOVS     r1,#0
000e10  4668              MOV      r0,sp
000e12  f7fffffe          BL       gran_char
;;;1006   		*((char*)(&(ke_date[1])))=temp;
000e16  f89d0000          LDRB     r0,[sp,#0]
000e1a  7120              STRB     r0,[r4,#4]
;;;1007                  
;;;1008   		temp=LPC_RTC->MIN;
000e1c  7930              LDRB     r0,[r6,#4]
000e1e  9000              STR      r0,[sp,#0]
;;;1009   		gran_char(&temp,0,59);
000e20  223b              MOVS     r2,#0x3b
000e22  2100              MOVS     r1,#0
000e24  4668              MOV      r0,sp
000e26  f7fffffe          BL       gran_char
;;;1010   		*(((char*)(&(ke_date[1])))+1)=temp;
000e2a  f89d0000          LDRB     r0,[sp,#0]
000e2e  7160              STRB     r0,[r4,#5]
;;;1011   	          
;;;1012   		temp=LPC_RTC->SEC;
000e30  7830              LDRB     r0,[r6,#0]
000e32  9000              STR      r0,[sp,#0]
;;;1013   		gran_char(&temp,0,59);
000e34  223b              MOVS     r2,#0x3b
000e36  2100              MOVS     r1,#0
000e38  4668              MOV      r0,sp
000e3a  f7fffffe          BL       gran_char
;;;1014   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3e  f89d0000          LDRB     r0,[sp,#0]
000e42  71a0              STRB     r0,[r4,#6]
;;;1015   			
;;;1016   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e44  f89d0005          LDRB     r0,[sp,#5]
000e48  71e0              STRB     r0,[r4,#7]
;;;1017   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e4a  f24020a6          MOV      r0,#0x2a6
000e4e  6861              LDR      r1,[r4,#4]  ; ke_date
000e50  f7fffffe          BL       lc640_write_long
;;;1018   		}
;;;1019   	bat_hndl_zvu_ke_init=1;
000e54  702f              STRB     r7,[r5,#0]
;;;1020   	}
;;;1021   }
000e56  e8bd81fc          POP      {r2-r8,pc}
;;;1022   #endif
                          ENDP

                  ke_drv PROC
;;;1104   //-----------------------------------------------
;;;1105   void ke_drv(void)
000e5a  e92d47f0          PUSH     {r4-r10,lr}
;;;1106   {
000e5e  b088              SUB      sp,sp,#0x20
;;;1107   static char ke_drv_cnt_10s;
;;;1108   static short i_bat_buff[6];
;;;1109   static char i_bat_buff_cnt;
;;;1110   short ke_drv_i_temp;
;;;1111   short ke_drv_i_avg;
;;;1112   char i;
;;;1113   short ke_drv_i_temp_temp;
;;;1114   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e60  f04f021c          MOV      r2,#0x1c
000e64  49d1              LDR      r1,|L1.4524|
000e66  a801              ADD      r0,sp,#4
000e68  f7fffffe          BL       __aeabi_memcpy4
;;;1115   
;;;1116   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e6c  4ed0              LDR      r6,|L1.4528|
;;;1117   	{
;;;1118   	
;;;1119   	i_bat_buff[0]=0;
000e6e  4bd1              LDR      r3,|L1.4532|
000e70  2500              MOVS     r5,#0
000e72  7ab0              LDRB     r0,[r6,#0xa]          ;1116  ; bat_hndl_zvu_ke_init
000e74  2801              CMP      r0,#1                 ;1116
000e76  d102              BNE      |L1.3710|
000e78  801d              STRH     r5,[r3,#0]
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff[0]=0;
;;;1125   	i_bat_buff_cnt=0;
000e7a  73b5              STRB     r5,[r6,#0xe]
;;;1126   
;;;1127   	bat_hndl_zvu_ke_init=0;
000e7c  72b5              STRB     r5,[r6,#0xa]
                  |L1.3710|
;;;1128   	}
;;;1129   
;;;1130   
;;;1131   
;;;1132   
;;;1133   if(spc_stat==spcKE)
000e7e  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e82  2801              CMP      r0,#1
000e84  d17e              BNE      |L1.3972|
;;;1134   	{
;;;1135   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e86  48cc              LDR      r0,|L1.4536|
000e88  f04f070a          MOV      r7,#0xa
000e8c  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e90  f1c00000          RSB      r0,r0,#0
000e94  fb90f0f7          SDIV     r0,r0,r7
000e98  b200              SXTH     r0,r0
;;;1136   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e9a  2800              CMP      r0,#0
000e9c  da01              BGE      |L1.3746|
000e9e  f04f0000          MOV      r0,#0
                  |L1.3746|
;;;1137   
;;;1138   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000ea2  4ac6              LDR      r2,|L1.4540|
000ea4  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000ea6  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1139   	if(++ke_drv_cnt_10s>10)
000ea8  1c49              ADDS     r1,r1,#1
;;;1140   		{
;;;1141   		ke_drv_cnt_10s=0;
;;;1142   
;;;1143   		i_bat_buff_cnt++;
;;;1144   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1145   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1146   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1147   		ke_drv_i_temp_temp=0;
;;;1148   		for(i=0;i<6;i++)
;;;1149   			{
;;;1150   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1151   			}
;;;1152   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1153   
;;;1154   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1155   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1156   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1157   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1158   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1159   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1160   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1161   		
;;;1162   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1163   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1164   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1165   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1166   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1167   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1168   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1169   
;;;1170   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1171   		bat_hndl_i_temp=ke_drv_i_avg;
000eaa  4cbf              LDR      r4,|L1.4520|
000eac  b2c9              UXTB     r1,r1                 ;1139
000eae  3c80              SUBS     r4,r4,#0x80
000eb0  7371              STRB     r1,[r6,#0xd]          ;1139
000eb2  290a              CMP      r1,#0xa               ;1139
000eb4  d967              BLS      |L1.3974|
000eb6  7375              STRB     r5,[r6,#0xd]          ;1141
000eb8  7bb1              LDRB     r1,[r6,#0xe]          ;1143  ; i_bat_buff_cnt
000eba  f1010101          ADD      r1,r1,#1              ;1143
000ebe  b2c9              UXTB     r1,r1                 ;1143
000ec0  73b1              STRB     r1,[r6,#0xe]          ;1143
000ec2  2906              CMP      r1,#6                 ;1144
000ec4  d300              BCC      |L1.3784|
000ec6  73b5              STRB     r5,[r6,#0xe]          ;1144
                  |L1.3784|
000ec8  7bb1              LDRB     r1,[r6,#0xe]          ;1145  ; i_bat_buff_cnt
000eca  6091              STR      r1,[r2,#8]            ;1145  ; bat_hndl_plazma
000ecc  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1146
000ed0  f04f0100          MOV      r1,#0                 ;1147
000ed4  4608              MOV      r0,r1                 ;1148
                  |L1.3798|
000ed6  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1150
000eda  4461              ADD      r1,r1,r12             ;1150
000edc  b209              SXTH     r1,r1                 ;1150
000ede  f1000001          ADD      r0,r0,#1              ;1148
000ee2  b2c0              UXTB     r0,r0                 ;1148
000ee4  2806              CMP      r0,#6                 ;1148
000ee6  d3f6              BCC      |L1.3798|
000ee8  f04f0006          MOV      r0,#6                 ;1152
000eec  fb91f0f0          SDIV     r0,r1,r0              ;1152
000ef0  b201              SXTH     r1,r0                 ;1152
000ef2  48b3              LDR      r0,|L1.4544|
000ef4  f8df82c4          LDR      r8,|L1.4540|
000ef8  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_6
000efa  f1a8081c          SUB      r8,r8,#0x1c           ;1154
000efe  eb000040          ADD      r0,r0,r0,LSL #1       ;1154
000f02  ea4f0040          LSL      r0,r0,#1              ;1154
000f06  f8a80000          STRH     r0,[r8,#0]            ;1154
000f0a  48ae              LDR      r0,|L1.4548|
000f0c  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1_2
000f0e  ea4f0040          LSL      r0,r0,#1              ;1155
000f12  f8a80002          STRH     r0,[r8,#2]            ;1155
000f16  48ac              LDR      r0,|L1.4552|
000f18  8800              LDRH     r0,[r0,#0]            ;1156  ; BAT_C_POINT_1
000f1a  f8a80004          STRH     r0,[r8,#4]            ;1156
000f1e  48ab              LDR      r0,|L1.4556|
000f20  f04f0303          MOV      r3,#3                 ;1157
000f24  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_3
000f28  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f2c  f8a80006          STRH     r0,[r8,#6]            ;1157
000f30  48a7              LDR      r0,|L1.4560|
000f32  f04f0305          MOV      r3,#5                 ;1158
000f36  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_5
000f3a  fb90f0f3          SDIV     r0,r0,r3              ;1158
000f3e  f8a80008          STRH     r0,[r8,#8]            ;1158
000f42  48a4              LDR      r0,|L1.4564|
000f44  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_10
000f48  fb90f0f7          SDIV     r0,r0,r7              ;1159
000f4c  f8a8000a          STRH     r0,[r8,#0xa]          ;1159
000f50  48a1              LDR      r0,|L1.4568|
000f52  f04f0314          MOV      r3,#0x14              ;1160
000f56  f9b00000          LDRSH    r0,[r0,#0]            ;1160  ; BAT_C_POINT_20
000f5a  fb90f0f3          SDIV     r0,r0,r3              ;1160
000f5e  f8a8000c          STRH     r0,[r8,#0xc]          ;1160
000f62  489e              LDR      r0,|L1.4572|
000f64  f108090e          ADD      r9,r8,#0xe            ;1162
000f68  f9b07000          LDRSH    r7,[r0,#0]            ;1162  ; BAT_U_END_1_6
000f6c  f8a97000          STRH     r7,[r9,#0]            ;1162
000f70  489b              LDR      r0,|L1.4576|
000f72  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1_2
000f74  f8a90002          STRH     r0,[r9,#2]            ;1163
000f78  489a              LDR      r0,|L1.4580|
000f7a  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_1
000f7c  f8a90004          STRH     r0,[r9,#4]            ;1164
000f80  4899              LDR      r0,|L1.4584|
000f82  e001              B        |L1.3976|
                  |L1.3972|
000f84  e0ea              B        |L1.4444|
                  |L1.3974|
000f86  e061              B        |L1.4172|
                  |L1.3976|
000f88  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_3
000f8a  f8a90006          STRH     r0,[r9,#6]            ;1165
000f8e  4897              LDR      r0,|L1.4588|
000f90  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_5
000f92  f8a90008          STRH     r0,[r9,#8]            ;1166
000f96  4896              LDR      r0,|L1.4592|
000f98  8800              LDRH     r0,[r0,#0]            ;1167  ; BAT_U_END_10
000f9a  f8a9000a          STRH     r0,[r9,#0xa]          ;1167
000f9e  4895              LDR      r0,|L1.4596|
000fa0  f9b0c000          LDRSH    r12,[r0,#0]           ;1168  ; BAT_U_END_20
000fa4  f8a9c00c          STRH     r12,[r9,#0xc]         ;1168
000fa8  6051              STR      r1,[r2,#4]            ;1170  ; bat_hndl_plazma
000faa  8121              STRH     r1,[r4,#8]
;;;1172   		
;;;1173   		for(i=0;i<7;i++)
000fac  f04f0000          MOV      r0,#0
                  |L1.4016|
;;;1174   			{
;;;1175   			if(bat_hndl_i_temp>=I_from_t_table[i])
000fb0  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000fb4  428b              CMP      r3,r1
000fb6  dd04              BLE      |L1.4034|
000fb8  f1000001          ADD      r0,r0,#1              ;1173
000fbc  b2c0              UXTB     r0,r0                 ;1173
000fbe  2807              CMP      r0,#7                 ;1173
000fc0  d3f6              BCC      |L1.4016|
                  |L1.4034|
;;;1176   				{
;;;1177   				break;
;;;1178   				}
;;;1179   			}
;;;1180   
;;;1181   		bat_hndl_plazma[0]=i;
000fc2  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fc4  f10d0a04          ADD      r10,sp,#4             ;1114
;;;1182   
;;;1183   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fc8  b1c8              CBZ      r0,|L1.4094|
;;;1184   		 else if((i>=1)&&(i<7))
000fca  1e42              SUBS     r2,r0,#1
000fcc  2a06              CMP      r2,#6
000fce  d219              BCS      |L1.4100|
;;;1185   		 	{
;;;1186   			short i1,i2;
;;;1187   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fd0  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fd4  eba30101          SUB      r1,r3,r1
000fd8  b209              SXTH     r1,r1
;;;1188   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fda  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fde  eba30308          SUB      r3,r3,r8
000fe2  b21b              SXTH     r3,r3
;;;1189   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fe4  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fe8  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fec  eba80802          SUB      r8,r8,r2
;;;1190   			bat_hndl_t_razr_ke*=(long)i1;
000ff0  fb08f801          MUL      r8,r8,r1
;;;1191   			bat_hndl_t_razr_ke/=(long)i2;
000ff4  fb98f1f3          SDIV     r1,r8,r3
;;;1192   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000ff8  4411              ADD      r1,r1,r2
000ffa  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1193   			}
000ffc  e006              B        |L1.4108|
                  |L1.4094|
000ffe  9901              LDR      r1,[sp,#4]            ;1183
001000  6561              STR      r1,[r4,#0x54]         ;1183  ; bat_hndl_t_razr_ke
001002  e003              B        |L1.4108|
                  |L1.4100|
;;;1194   		else if(i>=7)
001004  2807              CMP      r0,#7
001006  d301              BCC      |L1.4108|
;;;1195   			{
;;;1196   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
001008  9907              LDR      r1,[sp,#0x1c]
00100a  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4108|
;;;1197   			}
;;;1198   
;;;1199   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
00100c  b1c0              CBZ      r0,|L1.4160|
;;;1200   		 else if((i>=1)&&(i<7))
00100e  1e41              SUBS     r1,r0,#1
001010  2906              CMP      r1,#6
001012  d217              BCS      |L1.4164|
;;;1201   		 	{
;;;1202   			long u1,tempL;
;;;1203   
;;;1204   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
001014  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001018  f9392011          LDRSH    r2,[r9,r1,LSL #1]
00101c  eba30302          SUB      r3,r3,r2
;;;1205   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
001020  f85a1021          LDR      r1,[r10,r1,LSL #2]
001024  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
001026  eba70701          SUB      r7,r7,r1
;;;1206   			tempL*=u1;
00102a  fb03f307          MUL      r3,r3,r7
;;;1207   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00102e  f85a0020          LDR      r0,[r10,r0,LSL #2]
001032  eba00001          SUB      r0,r0,r1
;;;1208   			tempL/=u1;
001036  fb93f0f0          SDIV     r0,r3,r0
;;;1209   			tempL+=(long)U_end_from_i_table[i-1];
00103a  4410              ADD      r0,r0,r2
;;;1210   			bat_hndl_u_end=(short)tempL;
00103c  8160              STRH     r0,[r4,#0xa]
;;;1211   			}
00103e  e005              B        |L1.4172|
                  |L1.4160|
001040  8167              STRH     r7,[r4,#0xa]          ;1199
001042  e003              B        |L1.4172|
                  |L1.4164|
;;;1212   		else if(i>=7)
001044  2807              CMP      r0,#7
001046  d301              BCC      |L1.4172|
;;;1213   			{
;;;1214   			bat_hndl_u_end=U_end_from_i_table[6];
001048  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4172|
;;;1215   			}
;;;1216   
;;;1217   		}
;;;1218   
;;;1219   
;;;1220   
;;;1221   	if(spc_phase==0)
00104c  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1225   
;;;1226   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1227   	    	
;;;1228   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1229   			{
;;;1230   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1231   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001050  4f69              LDR      r7,|L1.4600|
;;;1232   			}
;;;1233   
;;;1234   		bat[0]._time_min_cnt_ke++;
;;;1235   		if(bat[0]._time_min_cnt_ke>=60)
;;;1236   			{
;;;1237   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
001052  f44f78e3          MOV      r8,#0x1c6
001056  bbe8              CBNZ     r0,|L1.4308|
001058  2314              MOVS     r3,#0x14              ;1224
00105a  f04f32ff          MOV      r2,#0xffffffff        ;1224
00105e  21ce              MOVS     r1,#0xce              ;1224
001060  20cd              MOVS     r0,#0xcd              ;1224
001062  f7fffffe          BL       mess_send
001066  f8961024          LDRB     r1,[r6,#0x24]         ;1226  ; spc_bat
00106a  f8df9190          LDR      r9,|L1.4604|
00106e  eb010041          ADD      r0,r1,r1,LSL #1       ;1226
001072  eb001001          ADD      r0,r0,r1,LSL #4       ;1226
001076  eb090080          ADD      r0,r9,r0,LSL #2       ;1226
00107a  f9b00008          LDRSH    r0,[r0,#8]            ;1226
00107e  f7fffffe          BL       abs
001082  f8d91018          LDR      r1,[r9,#0x18]         ;1226  ; bat
001086  4401              ADD      r1,r1,r0              ;1226
001088  f8c91018          STR      r1,[r9,#0x18]         ;1226  ; bat
00108c  f64840a0          MOV      r0,#0x8ca0            ;1228
001090  4281              CMP      r1,r0                 ;1228
001092  db0c              BLT      |L1.4270|
001094  eba10100          SUB      r1,r1,r0              ;1230
001098  f8c91018          STR      r1,[r9,#0x18]         ;1230  ; bat
00109c  8838              LDRH     r0,[r7,#0]            ;1231  ; ADR_EE_BAT_ZAR_CNT_KE
00109e  f7fffffe          BL       lc640_read_int
0010a2  1c40              ADDS     r0,r0,#1              ;1231
0010a4  b201              SXTH     r1,r0                 ;1231
0010a6  f9b70000          LDRSH    r0,[r7,#0]            ;1231  ; ADR_EE_BAT_ZAR_CNT_KE
0010aa  f7fffffe          BL       lc640_write_int
                  |L1.4270|
0010ae  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1234  ; bat
0010b2  f1000001          ADD      r0,r0,#1              ;1234
0010b6  b281              UXTH     r1,r0                 ;1234
0010b8  f8a9104a          STRH     r1,[r9,#0x4a]         ;1234
0010bc  293c              CMP      r1,#0x3c              ;1235
0010be  d309              BCC      |L1.4308|
0010c0  4640              MOV      r0,r8
0010c2  f7fffffe          BL       lc640_read_int
0010c6  1c40              ADDS     r0,r0,#1
0010c8  b201              SXTH     r1,r0
0010ca  4640              MOV      r0,r8
0010cc  f7fffffe          BL       lc640_write_int
;;;1238   			bat[0]._time_min_cnt_ke=0;
0010d0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4308|
;;;1239   			}
;;;1240   		}
;;;1241   
;;;1242   	else if(spc_phase==1)
;;;1243   		{
;;;1244   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1245   		}
;;;1246   
;;;1247   	if(out_U<bat_hndl_u_end)
0010d4  484a              LDR      r0,|L1.4608|
0010d6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010da  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010de  4288              CMP      r0,r1
0010e0  da3a              BGE      |L1.4440|
;;;1248   		{
;;;1249   		cnt_end_ke++;
0010e2  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010e6  f1000001          ADD      r0,r0,#1
0010ea  b200              SXTH     r0,r0
0010ec  f8a60066          STRH     r0,[r6,#0x66]
;;;1250   		if(cnt_end_ke>=30)
0010f0  281e              CMP      r0,#0x1e
0010f2  db33              BLT      |L1.4444|
;;;1251   			{
;;;1252   			
;;;1253   			if((spc_stat==spcKE)&&(spc_phase==0))
0010f4  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010f8  2801              CMP      r0,#1
0010fa  d121              BNE      |L1.4416|
0010fc  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
001100  b9f0              CBNZ     r0,|L1.4416|
;;;1254   				{
;;;1255   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
001102  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001104  f7fffffe          BL       lc640_read_int
001108  b201              SXTH     r1,r0
00110a  483e              LDR      r0,|L1.4612|
00110c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001110  f7fffffe          BL       lc640_write_int
;;;1256   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
001114  4640              MOV      r0,r8
001116  f7fffffe          BL       lc640_read_int
00111a  b284              UXTH     r4,r0
00111c  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00111e  f7fffffe          BL       lc640_read_int
001122  b281              UXTH     r1,r0
001124  4622              MOV      r2,r4
001126  2000              MOVS     r0,#0
001128  f7fffffe          BL       ke_zvu_mem_hndl
;;;1257   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
00112c  4836              LDR      r0,|L1.4616|
00112e  2100              MOVS     r1,#0
001130  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001134  f7fffffe          BL       lc640_write_int
;;;1258   				cntrl_stat=50;
001138  f04f0032          MOV      r0,#0x32
00113c  8670              STRH     r0,[r6,#0x32]
;;;1259   				cntrl_stat_old=50;
00113e  86b0              STRH     r0,[r6,#0x34]
                  |L1.4416|
;;;1260   				}
;;;1261   
;;;1262   			spc_stat=spcOFF;
001140  f8865023          STRB     r5,[r6,#0x23]
;;;1263   			__ee_spc_stat=spcOFF;
001144  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1264   			lc640_write_int(EE_SPC_STAT,spcOFF);
001148  b008              ADD      sp,sp,#0x20
00114a  2100              MOVS     r1,#0
00114c  e8bd47f0          POP      {r4-r10,lr}
001150  f240209a          MOV      r0,#0x29a
001154  f7ffbffe          B.W      lc640_write_int
                  |L1.4440|
;;;1265   
;;;1266   			}
;;;1267   		}
;;;1268   	else cnt_end_ke=0;
001158  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4444|
;;;1269   
;;;1270   	}
;;;1271   			
;;;1272   }
00115c  b008              ADD      sp,sp,#0x20
00115e  e8bd87f0          POP      {r4-r10,pc}
;;;1273   #endif
                          ENDP

                  vz_start PROC
;;;1343   //-----------------------------------------------
;;;1344   char vz_start(char hour)
001162  b570              PUSH     {r4-r6,lr}
;;;1345   {          
001164  4605              MOV      r5,r0
;;;1346   char out;
;;;1347   out=0;
001166  f04f0600          MOV      r6,#0
;;;1348   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00116a  4c11              LDR      r4,|L1.4528|
00116c  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001170  b9a8              CBNZ     r0,|L1.4510|
001172  4826              LDR      r0,|L1.4620|
001174  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001176  2801              CMP      r0,#1
001178  d06a              BEQ      |L1.4688|
;;;1349   	{
;;;1350   	spc_stat=spcVZ;
00117a  f104042c          ADD      r4,r4,#0x2c
00117e  f04f0102          MOV      r1,#2
001182  f8041c09          STRB     r1,[r4,#-9]
;;;1351   	__ee_spc_stat=spcVZ; 
001186  87e1              STRH     r1,[r4,#0x3e]
;;;1352   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001188  f240209a          MOV      r0,#0x29a
00118c  f7fffffe          BL       lc640_write_int
;;;1353   	vz_cnt_h=hour;
001190  86e5              STRH     r5,[r4,#0x36]
;;;1354   	__ee_vz_cnt=hour*60;
001192  ebc51005          RSB      r0,r5,r5,LSL #4
001196  ea4f0080          LSL      r0,r0,#2
00119a  87a0              STRH     r0,[r4,#0x3c]
00119c  e038              B        |L1.4624|
                  |L1.4510|
00119e  e057              B        |L1.4688|
                  |L1.4512|
                          DCD      bat_u_old_cnt
                  |L1.4516|
                          DCD      0x40024020
                  |L1.4520|
                          DCD      ||area_number.25||+0x100
                  |L1.4524|
                          DCD      ||area_number.19||+0x4
                  |L1.4528|
                          DCD      ||area_number.25||
                  |L1.4532|
                          DCD      ||.bss||
                  |L1.4536|
                          DCD      Ib_ips_termokompensat
                  |L1.4540|
                          DCD      ||.bss||+0x468
                  |L1.4544|
                          DCD      BAT_C_POINT_1_6
                  |L1.4548|
                          DCD      BAT_C_POINT_1_2
                  |L1.4552|
                          DCD      BAT_C_POINT_1
                  |L1.4556|
                          DCD      BAT_C_POINT_3
                  |L1.4560|
                          DCD      BAT_C_POINT_5
                  |L1.4564|
                          DCD      BAT_C_POINT_10
                  |L1.4568|
                          DCD      BAT_C_POINT_20
                  |L1.4572|
                          DCD      BAT_U_END_1_6
                  |L1.4576|
                          DCD      BAT_U_END_1_2
                  |L1.4580|
                          DCD      BAT_U_END_1
                  |L1.4584|
                          DCD      BAT_U_END_3
                  |L1.4588|
                          DCD      BAT_U_END_5
                  |L1.4592|
                          DCD      BAT_U_END_10
                  |L1.4596|
                          DCD      BAT_U_END_20
                  |L1.4600|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4604|
                          DCD      bat
                  |L1.4608|
                          DCD      out_U
                  |L1.4612|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4616|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4620|
                          DCD      speedChrgBlckStat
                  |L1.4624|
001210  f1a4042c          SUB      r4,r4,#0x2c
;;;1355   	if(hour==0)__ee_vz_cnt=30;
001214  b91d              CBNZ     r5,|L1.4638|
001216  f04f001e          MOV      r0,#0x1e
00121a  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4638|
;;;1356   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
00121e  f104045e          ADD      r4,r4,#0x5e
001222  f44f7027          MOV      r0,#0x29c
001226  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00122a  f7fffffe          BL       lc640_write_int
;;;1357   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
00122e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001232  f44f702a          MOV      r0,#0x2a8
001236  f7fffffe          BL       lc640_write_int
;;;1358   	vz_cnt_h_=0;
00123a  f04f0000          MOV      r0,#0
00123e  80e0              STRH     r0,[r4,#6]
;;;1359   	vz_cnt_s=0;
001240  8020              STRH     r0,[r4,#0]
;;;1360   	vz_cnt_s_=0;
001242  8060              STRH     r0,[r4,#2]
;;;1361   	out=1;
001244  f04f0601          MOV      r6,#1
;;;1362   	vz_mem_hndl(1);
001248  f04f0001          MOV      r0,#1
00124c  f7fffffe          BL       vz_mem_hndl
                  |L1.4688|
;;;1363   	}
;;;1364   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1365   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1366   //plazma=out;	
;;;1367   return out;
001250  4630              MOV      r0,r6
;;;1368   }
001252  bd70              POP      {r4-r6,pc}
;;;1369   
                          ENDP

                  vz_stop PROC
;;;1370   //-----------------------------------------------
;;;1371   void vz_stop(void)
001254  b510              PUSH     {r4,lr}
;;;1372   {
;;;1373   if(spc_stat==spcVZ)
001256  4cff              LDR      r4,|L1.5716|
001258  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00125c  2802              CMP      r0,#2
00125e  d113              BNE      |L1.4744|
;;;1374        {
;;;1375   vz_mem_hndl(vz_cnt_h);          
001260  f104042c          ADD      r4,r4,#0x2c
001264  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001266  f7fffffe          BL       vz_mem_hndl
;;;1376   vz_cnt_s=0;
00126a  f04f0000          MOV      r0,#0
00126e  8660              STRH     r0,[r4,#0x32]
;;;1377   vz_cnt_h=0;
001270  86e0              STRH     r0,[r4,#0x36]
;;;1378   vz_cnt_h_=0;
001272  8720              STRH     r0,[r4,#0x38]
;;;1379   spc_stat=spcOFF;
001274  f8040c09          STRB     r0,[r4,#-9]
;;;1380   
;;;1381   		__ee_spc_stat=spcOFF;
001278  87e0              STRH     r0,[r4,#0x3e]
;;;1382   		lc640_write_int(EE_SPC_STAT,spcOFF);
00127a  4601              MOV      r1,r0
00127c  e8bd4010          POP      {r4,lr}
001280  f240209a          MOV      r0,#0x29a
001284  f7ffbffe          B.W      lc640_write_int
                  |L1.4744|
;;;1383        }
;;;1384   
;;;1385   }
001288  bd10              POP      {r4,pc}
;;;1386   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1388   //-----------------------------------------------
;;;1389   void amper_chas_cnt_drv(void)
00128a  b510              PUSH     {r4,lr}
;;;1390   {
;;;1391   
;;;1392   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
00128c  4af1              LDR      r2,|L1.5716|
00128e  49f2              LDR      r1,|L1.5720|
001290  3280              ADDS     r2,r2,#0x80
001292  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
001296  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
001298  4401              ADD      r1,r1,r0
00129a  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1393   
;;;1394   if(amper_chas_cnt_drv_summ>=36000L)
00129c  f64843a0          MOV      r3,#0x8ca0
;;;1395   	{
;;;1396   	amper_chas_cnt_drv_summ-=36000L;
;;;1397   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
0012a0  f44f74e4          MOV      r4,#0x1c8
0012a4  4299              CMP      r1,r3                 ;1394
0012a6  db0c              BLT      |L1.4802|
0012a8  eba10103          SUB      r1,r1,r3              ;1396
0012ac  6651              STR      r1,[r2,#0x64]         ;1396  ; amper_chas_cnt_drv_summ
0012ae  4620              MOV      r0,r4
0012b0  f7fffffe          BL       lc640_read_int
0012b4  1c40              ADDS     r0,r0,#1
0012b6  b201              SXTH     r1,r0
0012b8  4620              MOV      r0,r4
0012ba  e8bd4010          POP      {r4,lr}
0012be  f7ffbffe          B.W      lc640_write_int
                  |L1.4802|
;;;1398   	}
;;;1399   else if(amper_chas_cnt_drv_summ<=-36000L)
0012c2  48e6              LDR      r0,|L1.5724|
0012c4  4281              CMP      r1,r0
0012c6  dc0c              BGT      |L1.4834|
;;;1400   	{
;;;1401   	amper_chas_cnt_drv_summ+=36000L;
0012c8  eb010003          ADD      r0,r1,r3
0012cc  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1402   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012ce  4620              MOV      r0,r4
0012d0  f7fffffe          BL       lc640_read_int
0012d4  1e40              SUBS     r0,r0,#1
0012d6  b201              SXTH     r1,r0
0012d8  4620              MOV      r0,r4
0012da  e8bd4010          POP      {r4,lr}
0012de  f7ffbffe          B.W      lc640_write_int
                  |L1.4834|
;;;1403   	}
;;;1404   }
0012e2  bd10              POP      {r4,pc}
;;;1405   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1407   //-----------------------------------------------
;;;1408   void avz_next_date_hndl(void)
0012e4  b570              PUSH     {r4-r6,lr}
;;;1409   {
;;;1410   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012e6  4cde              LDR      r4,|L1.5728|
0012e8  f8940038          LDRB     r0,[r4,#0x38]
0012ec  4ddd              LDR      r5,|L1.5732|
0012ee  7829              LDRB     r1,[r5,#0]  ; AVZ
0012f0  4408              ADD      r0,r0,r1
0012f2  280c              CMP      r0,#0xc
0012f4  d906              BLS      |L1.4868|
0012f6  8fa0              LDRH     r0,[r4,#0x3c]
0012f8  1c40              ADDS     r0,r0,#1
0012fa  b201              SXTH     r1,r0
0012fc  20b8              MOVS     r0,#0xb8
0012fe  f7fffffe          BL       lc640_write_int
001302  e004              B        |L1.4878|
                  |L1.4868|
;;;1411   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
001304  f9b4103c          LDRSH    r1,[r4,#0x3c]
001308  20b8              MOVS     r0,#0xb8
00130a  f7fffffe          BL       lc640_write_int
                  |L1.4878|
;;;1412   
;;;1413   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1414   
;;;1415   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00130e  f8941038          LDRB     r1,[r4,#0x38]
001312  7828              LDRB     r0,[r5,#0]  ; AVZ
001314  4401              ADD      r1,r1,r0
001316  290c              CMP      r1,#0xc
001318  d907              BLS      |L1.4906|
00131a  f8941038          LDRB     r1,[r4,#0x38]
00131e  380c              SUBS     r0,r0,#0xc
001320  4401              ADD      r1,r1,r0
001322  20b6              MOVS     r0,#0xb6
001324  f7fffffe          BL       lc640_write_int
001328  e005              B        |L1.4918|
                  |L1.4906|
;;;1416   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
00132a  f8941038          LDRB     r1,[r4,#0x38]
00132e  4401              ADD      r1,r1,r0
001330  20b6              MOVS     r0,#0xb6
001332  f7fffffe          BL       lc640_write_int
                  |L1.4918|
;;;1417   
;;;1418   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1419   
;;;1420   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
001336  f894002c          LDRB     r0,[r4,#0x2c]
00133a  281c              CMP      r0,#0x1c
00133c  d904              BLS      |L1.4936|
00133e  211c              MOVS     r1,#0x1c
001340  20b4              MOVS     r0,#0xb4
001342  f7fffffe          BL       lc640_write_int
001346  e004              B        |L1.4946|
                  |L1.4936|
;;;1421   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001348  f894102c          LDRB     r1,[r4,#0x2c]
00134c  20b4              MOVS     r0,#0xb4
00134e  f7fffffe          BL       lc640_write_int
                  |L1.4946|
;;;1422   
;;;1423   //lc640_write_int(EE_DATE_AVZ,4);
;;;1424   
;;;1425   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001352  f1040420          ADD      r4,r4,#0x20
001356  7a21              LDRB     r1,[r4,#8]
001358  f04f00ae          MOV      r0,#0xae
00135c  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001360  7921              LDRB     r1,[r4,#4]
001362  20b0              MOVS     r0,#0xb0
001364  f7fffffe          BL       lc640_write_int
;;;1427   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001368  7821              LDRB     r1,[r4,#0]
00136a  e8bd4070          POP      {r4-r6,lr}
00136e  20b2              MOVS     r0,#0xb2
001370  f7ffbffe          B.W      lc640_write_int
;;;1428   
;;;1429   }
;;;1430   
                          ENDP

                  avz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void avz_drv(void)                               
001374  b510              PUSH     {r4,lr}
;;;1433   {                
;;;1434   if(AVZ!=AVZ_OFF)
001376  48bb              LDR      r0,|L1.5732|
;;;1435   	{
;;;1436   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1437   		{
;;;1438   		bAVZ=1;
001378  4cb6              LDR      r4,|L1.5716|
00137a  7800              LDRB     r0,[r0,#0]            ;1434  ; AVZ
00137c  b338              CBZ      r0,|L1.5070|
00137e  48b8              LDR      r0,|L1.5728|
001380  8f82              LDRH     r2,[r0,#0x3c]         ;1436
001382  49b9              LDR      r1,|L1.5736|
001384  8809              LDRH     r1,[r1,#0]            ;1436  ; YEAR_AVZ
001386  428a              CMP      r2,r1                 ;1436
001388  d121              BNE      |L1.5070|
00138a  f8902038          LDRB     r2,[r0,#0x38]         ;1436
00138e  49b7              LDR      r1,|L1.5740|
001390  8809              LDRH     r1,[r1,#0]            ;1436  ; MONTH_AVZ
001392  428a              CMP      r2,r1                 ;1436
001394  d11b              BNE      |L1.5070|
001396  f890102c          LDRB     r1,[r0,#0x2c]         ;1436
00139a  4ab5              LDR      r2,|L1.5744|
00139c  8812              LDRH     r2,[r2,#0]            ;1436  ; DATE_AVZ
00139e  4291              CMP      r1,r2                 ;1436
0013a0  d115              BNE      |L1.5070|
0013a2  f8901028          LDRB     r1,[r0,#0x28]         ;1436
0013a6  4ab3              LDR      r2,|L1.5748|
0013a8  8812              LDRH     r2,[r2,#0]            ;1436  ; HOUR_AVZ
0013aa  4291              CMP      r1,r2                 ;1436
0013ac  d10f              BNE      |L1.5070|
0013ae  f8901024          LDRB     r1,[r0,#0x24]         ;1436
0013b2  4ab1              LDR      r2,|L1.5752|
0013b4  8812              LDRH     r2,[r2,#0]            ;1436  ; MIN_AVZ
0013b6  4291              CMP      r1,r2                 ;1436
0013b8  d109              BNE      |L1.5070|
0013ba  f8900020          LDRB     r0,[r0,#0x20]         ;1436
0013be  49af              LDR      r1,|L1.5756|
0013c0  8809              LDRH     r1,[r1,#0]            ;1436  ; SEC_AVZ
0013c2  4288              CMP      r0,r1                 ;1436
0013c4  d103              BNE      |L1.5070|
0013c6  f04f0001          MOV      r0,#1
0013ca  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5070|
;;;1439   		}
;;;1440   	}
;;;1441   if(bAVZ)
0013ce  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013d2  2800              CMP      r0,#0
0013d4  d00d              BEQ      |L1.5106|
;;;1442   	{
;;;1443   	if(vz_start(AVZ_TIME))
0013d6  48aa              LDR      r0,|L1.5760|
0013d8  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013da  b2c0              UXTB     r0,r0
0013dc  f7fffffe          BL       vz_start
0013e0  2800              CMP      r0,#0
0013e2  d006              BEQ      |L1.5106|
;;;1444   		{
;;;1445   		bAVZ=0;
0013e4  f04f0000          MOV      r0,#0
0013e8  f8840026          STRB     r0,[r4,#0x26]
;;;1446   		avz_next_date_hndl();
0013ec  e8bd4010          POP      {r4,lr}
0013f0  e7fe              B        avz_next_date_hndl
                  |L1.5106|
;;;1447   		}
;;;1448   	}	
;;;1449   
;;;1450   }
0013f2  bd10              POP      {r4,pc}
;;;1451   
                          ENDP

                  vz_drv PROC
;;;1452   //-----------------------------------------------
;;;1453   void vz_drv(void)
0013f4  b538              PUSH     {r3-r5,lr}
;;;1454   { 
;;;1455   if(spc_stat==spcVZ)
0013f6  4c97              LDR      r4,|L1.5716|
0013f8  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013fc  2802              CMP      r0,#2
0013fe  d11d              BNE      |L1.5180|
;;;1456   	{
;;;1457   #ifndef UKU_6U
;;;1458   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001400  48a0              LDR      r0,|L1.5764|
001402  7800              LDRB     r0,[r0,#0]  ; sk_stat
001404  2801              CMP      r0,#1
001406  d01a              BEQ      |L1.5182|
001408  489f              LDR      r0,|L1.5768|
00140a  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
00140c  2800              CMP      r0,#0
00140e  d016              BEQ      |L1.5182|
;;;1459   #endif //UKU_6U
;;;1460   		{
;;;1461   
;;;1462   		if(vz_cnt_s_<3600)
;;;1463   			{
;;;1464   			vz_cnt_s_++;
;;;1465   			if(vz_cnt_s_>=3600)
;;;1466   				{
;;;1467   				vz_cnt_s_=0;
;;;1468   				if(vz_cnt_h)
;;;1469   					{
;;;1470   					vz_cnt_h--;
;;;1471   					vz_cnt_h_++;
;;;1472   					}
;;;1473   				}
;;;1474   			}
;;;1475   	
;;;1476   	
;;;1477   		if(vz_cnt_s<60)
;;;1478   			{
;;;1479   			vz_cnt_s++;
;;;1480   			if(vz_cnt_s>=60)
;;;1481   				{
;;;1482   				vz_cnt_s=0;
;;;1483   				
;;;1484   				__ee_vz_cnt--;
;;;1485   				lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1486   				if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1487   					{
;;;1488   					spc_stat=spcOFF;
;;;1489   							__ee_spc_stat=spcOFF;
;;;1490   			lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1491   	
;;;1492   	//				hv_vz_stat=hvsOFF;
;;;1493   	//		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1494   					vz_mem_hndl(0);
;;;1495   					}
;;;1496   				}
;;;1497   			}
;;;1498   		vz_error=0; 
;;;1499   		}
;;;1500   #ifndef UKU_6U
;;;1501   	else 
;;;1502   		{
;;;1503   		vz_error=1; 
001410  f04f0001          MOV      r0,#1
001414  7060              STRB     r0,[r4,#1]
;;;1504   		if(((LPC_RTC->SEC)%10)==0)
001416  489d              LDR      r0,|L1.5772|
001418  7800              LDRB     r0,[r0,#0]
00141a  f04f010a          MOV      r1,#0xa
00141e  fbb0f2f1          UDIV     r2,r0,r1
001422  fb010012          MLS      r0,r1,r2,r0
001426  2800              CMP      r0,#0
001428  d108              BNE      |L1.5180|
;;;1505   			{
;;;1506   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00142a  f2413088          MOV      r0,#0x1388
00142e  9000              STR      r0,[sp,#0]
001430  a397              ADR      r3,|L1.5776|
001432  a29d              ADR      r2,|L1.5800|
001434  a1a2              ADR      r1,|L1.5824|
001436  a0a8              ADR      r0,|L1.5848|
001438  f7fffffe          BL       show_mess
                  |L1.5180|
;;;1507   						"    ЗАБЛОКИРОВАН    ",
;;;1508   						"     НЕИСПРАВНА     ",
;;;1509   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1510   						5000);			
;;;1511   			}
;;;1512   		}
;;;1513   #endif //UKU_6U
;;;1514   /*	if(vz_cnt_s_>=3)
;;;1515   		{
;;;1516   		if(sk_stat[0]==0)
;;;1517   		} */
;;;1518   
;;;1519   	}
;;;1520   
;;;1521   
;;;1522   } 
00143c  bd38              POP      {r3-r5,pc}
                  |L1.5182|
00143e  f8b40060          LDRH     r0,[r4,#0x60]         ;1462  ; vz_cnt_s_
001442  f44f6161          MOV      r1,#0xe10             ;1462
001446  2500              MOVS     r5,#0                 ;1458
001448  4288              CMP      r0,r1                 ;1462
00144a  d215              BCS      |L1.5240|
00144c  f1000001          ADD      r0,r0,#1              ;1464
001450  b280              UXTH     r0,r0                 ;1464
001452  f8a40060          STRH     r0,[r4,#0x60]         ;1464
001456  4288              CMP      r0,r1                 ;1465
001458  d30e              BCC      |L1.5240|
00145a  f8a45060          STRH     r5,[r4,#0x60]         ;1467
00145e  f8b40062          LDRH     r0,[r4,#0x62]         ;1468  ; vz_cnt_h
001462  b148              CBZ      r0,|L1.5240|
001464  f1a00001          SUB      r0,r0,#1              ;1470
001468  f8240f62          STRH     r0,[r4,#0x62]!        ;1470
00146c  8860              LDRH     r0,[r4,#2]            ;1471  ; vz_cnt_h_
00146e  f1000001          ADD      r0,r0,#1              ;1471
001472  8060              STRH     r0,[r4,#2]            ;1471
001474  f1a40462          SUB      r4,r4,#0x62           ;1471
                  |L1.5240|
001478  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1477  ; vz_cnt_s
00147c  283c              CMP      r0,#0x3c              ;1477
00147e  d225              BCS      |L1.5324|
001480  f1000001          ADD      r0,r0,#1              ;1479
001484  b280              UXTH     r0,r0                 ;1479
001486  f8a4005e          STRH     r0,[r4,#0x5e]         ;1479
00148a  283c              CMP      r0,#0x3c              ;1480
00148c  d31e              BCC      |L1.5324|
00148e  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1482
001492  8960              LDRH     r0,[r4,#0xa]          ;1484  ; __ee_vz_cnt
001494  f1a00001          SUB      r0,r0,#1              ;1484
001498  b201              SXTH     r1,r0                 ;1484
00149a  8161              STRH     r1,[r4,#0xa]          ;1484
00149c  f44f7027          MOV      r0,#0x29c             ;1485
0014a0  f7fffffe          BL       lc640_write_int
0014a4  8960              LDRH     r0,[r4,#0xa]          ;1486  ; __ee_vz_cnt
0014a6  f1a4045e          SUB      r4,r4,#0x5e           ;1486
0014aa  b118              CBZ      r0,|L1.5300|
0014ac  4890              LDR      r0,|L1.5872|
0014ae  8800              LDRH     r0,[r0,#0]            ;1486  ; speedChrgBlckStat
0014b0  2801              CMP      r0,#1                 ;1486
0014b2  d10b              BNE      |L1.5324|
                  |L1.5300|
0014b4  f8845023          STRB     r5,[r4,#0x23]         ;1488
0014b8  f8a4506a          STRH     r5,[r4,#0x6a]         ;1489
0014bc  2100              MOVS     r1,#0                 ;1490
0014be  f240209a          MOV      r0,#0x29a             ;1490
0014c2  f7fffffe          BL       lc640_write_int
0014c6  2000              MOVS     r0,#0                 ;1494
0014c8  f7fffffe          BL       vz_mem_hndl
                  |L1.5324|
0014cc  7065              STRB     r5,[r4,#1]            ;1498
0014ce  bd38              POP      {r3-r5,pc}
;;;1523   
                          ENDP

                  vz1_drv PROC
;;;1525   //драйвер уравнительного заряда
;;;1526   void vz1_drv(void)
0014d0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1527   {
;;;1528   if(volt_region_cnt)volt_region_cnt--;
0014d4  f8df817c          LDR      r8,|L1.5716|
0014d8  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014dc  b118              CBZ      r0,|L1.5350|
0014de  f1a00001          SUB      r0,r0,#1
0014e2  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5350|
;;;1529   if(vz1_stat==vz1sOFF)
0014e6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014ea  b928              CBNZ     r0,|L1.5368|
;;;1530   	{
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014ec  2314              MOVS     r3,#0x14
0014ee  2200              MOVS     r2,#0
0014f0  2164              MOVS     r1,#0x64
0014f2  20d2              MOVS     r0,#0xd2
0014f4  f7fffffe          BL       mess_send
                  |L1.5368|
;;;1532   	}
;;;1533   if(vz1_stat==vz1sSTEP1)
0014f8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1534   	{
;;;1535   	if(vz1_stat_old!=vz1_stat)
;;;1536   		{
;;;1537   		vz1_stat_cnt=5;
;;;1538   		}
;;;1539   	if(vz1_stat_cnt)
;;;1540   		{
;;;1541   		vz1_stat_cnt--;
;;;1542   		if(vz1_stat_cnt==0)
;;;1543   			{
;;;1544   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1545   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1546   			}
;;;1547   		}
;;;1548   	if(sk_stat[0]==1)
0014fc  4d61              LDR      r5,|L1.5764|
0014fe  f44f7bc9          MOV      r11,#0x192            ;1545
001502  2801              CMP      r0,#1                 ;1533
001504  d139              BNE      |L1.5498|
001506  f8980006          LDRB     r0,[r8,#6]            ;1535  ; vz1_stat_old
00150a  2801              CMP      r0,#1                 ;1535
00150c  d003              BEQ      |L1.5398|
00150e  f04f0005          MOV      r0,#5                 ;1537
001512  f8a80076          STRH     r0,[r8,#0x76]         ;1537
                  |L1.5398|
001516  f9b80076          LDRSH    r0,[r8,#0x76]         ;1539  ; vz1_stat_cnt
00151a  b168              CBZ      r0,|L1.5432|
00151c  f1a00001          SUB      r0,r0,#1              ;1541
001520  b200              SXTH     r0,r0                 ;1541
001522  f8a80076          STRH     r0,[r8,#0x76]         ;1541
001526  b938              CBNZ     r0,|L1.5432|
001528  f04f000b          MOV      r0,#0xb               ;1544
00152c  f8880005          STRB     r0,[r8,#5]            ;1544
001530  4601              MOV      r1,r0                 ;1545
001532  4658              MOV      r0,r11                ;1545
001534  f7fffffe          BL       lc640_write
                  |L1.5432|
001538  7828              LDRB     r0,[r5,#0]  ; sk_stat
00153a  2801              CMP      r0,#1
00153c  d117              BNE      |L1.5486|
;;;1549   		{
;;;1550   		vz1_stat=vz1sSTEP2;
00153e  f04f0002          MOV      r0,#2
001542  f8880005          STRB     r0,[r8,#5]
;;;1551   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
001546  4601              MOV      r1,r0
001548  4658              MOV      r0,r11
00154a  f7fffffe          BL       lc640_write
;;;1552   		tree_up(iVZ1_STEP2_2,1,0,0);
00154e  2300              MOVS     r3,#0
001550  461a              MOV      r2,r3
001552  2101              MOVS     r1,#1
001554  20ef              MOVS     r0,#0xef
001556  f7fffffe          BL       tree_up
;;;1553   		tree_up(iVZ1_STEP2_1,0,0,0);
00155a  2300              MOVS     r3,#0
00155c  461a              MOV      r2,r3
00155e  4619              MOV      r1,r3
001560  20ee              MOVS     r0,#0xee
001562  f7fffffe          BL       tree_up
;;;1554   		ret(1200);
001566  f44f6096          MOV      r0,#0x4b0
00156a  f7fffffe          BL       ||ret||
                  |L1.5486|
;;;1555   		}
;;;1556   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00156e  2314              MOVS     r3,#0x14
001570  2200              MOVS     r2,#0
001572  2164              MOVS     r1,#0x64
001574  20d2              MOVS     r0,#0xd2
001576  f7fffffe          BL       mess_send
                  |L1.5498|
;;;1557   	}
;;;1558   
;;;1559   if(vz1_stat==vz1sSTEP2)
00157a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1560   	{
;;;1561   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1562   		{
;;;1563   		vz1_stat_cnt=15;
00157e  f04f090f          MOV      r9,#0xf
001582  2802              CMP      r0,#2                 ;1559
001584  d118              BNE      |L1.5560|
001586  f8980006          LDRB     r0,[r8,#6]            ;1561  ; vz1_stat_old
00158a  2802              CMP      r0,#2                 ;1561
00158c  d102              BNE      |L1.5524|
00158e  f8b80076          LDRH     r0,[r8,#0x76]         ;1561  ; vz1_stat_cnt
001592  b908              CBNZ     r0,|L1.5528|
                  |L1.5524|
001594  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5528|
;;;1564   		}
;;;1565   	vz1_stat_cnt--;
001598  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00159c  f1a00001          SUB      r0,r0,#1
0015a0  f8a80076          STRH     r0,[r8,#0x76]
;;;1566   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015a4  f04f0314          MOV      r3,#0x14
0015a8  f04f0200          MOV      r2,#0
0015ac  f04f0164          MOV      r1,#0x64
0015b0  f04f00d2          MOV      r0,#0xd2
0015b4  f7fffffe          BL       mess_send
                  |L1.5560|
;;;1567   	}
;;;1568   
;;;1569   if(vz1_stat==vz1sSTEP3)
0015b8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1570   	{
;;;1571   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1572   		{
;;;1573   		vz1_stat_cnt=10;
0015bc  240a              MOVS     r4,#0xa
0015be  2600              MOVS     r6,#0                 ;1528
0015c0  f04f0a01          MOV      r10,#1                ;1529
;;;1574   
;;;1575   		}
;;;1576   	vz1_stat_cnt--;
;;;1577   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1578   		{
;;;1579   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015c4  f2413788          MOV      r7,#0x1388
0015c8  2803              CMP      r0,#3                 ;1569
0015ca  d131              BNE      |L1.5680|
0015cc  f8980006          LDRB     r0,[r8,#6]            ;1571  ; vz1_stat_old
0015d0  2803              CMP      r0,#3                 ;1571
0015d2  d102              BNE      |L1.5594|
0015d4  f8b80076          LDRH     r0,[r8,#0x76]         ;1571  ; vz1_stat_cnt
0015d8  b908              CBNZ     r0,|L1.5598|
                  |L1.5594|
0015da  f8a84076          STRH     r4,[r8,#0x76]         ;1573
                  |L1.5598|
0015de  f8b80076          LDRH     r0,[r8,#0x76]         ;1576  ; vz1_stat_cnt
0015e2  f1a00001          SUB      r0,r0,#1              ;1576
0015e6  b200              SXTH     r0,r0                 ;1576
0015e8  f8a80076          STRH     r0,[r8,#0x76]         ;1576
0015ec  280a              CMP      r0,#0xa               ;1577
0015ee  d001              BEQ      |L1.5620|
0015f0  2809              CMP      r0,#9                 ;1577
0015f2  d106              BNE      |L1.5634|
                  |L1.5620|
0015f4  a33f              ADR      r3,|L1.5876|
0015f6  a245              ADR      r2,|L1.5900|
0015f8  a14a              ADR      r1,|L1.5924|
0015fa  a050              ADR      r0,|L1.5948|
0015fc  9700              STR      r7,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1580   					"      ТУМБЛЕР       ",
;;;1581   					"     ВЫСОКОГО       ",
;;;1582   					"    НАПРЯЖЕНИЯ      ",
;;;1583   					5000);
;;;1584   		}
;;;1585   	if(sk_stat[1]==1)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  2801              CMP      r0,#1
001606  d10d              BNE      |L1.5668|
;;;1586   		{
;;;1587   		vz1_stat=vz1sWRK;
001608  f8884005          STRB     r4,[r8,#5]
;;;1588   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00160c  210a              MOVS     r1,#0xa
00160e  4658              MOV      r0,r11
001610  f7fffffe          BL       lc640_write
;;;1589   		volt_region=1;
001614  f888a02f          STRB     r10,[r8,#0x2f]
;;;1590   		cntrl_stat=0;
001618  f8a86032          STRH     r6,[r8,#0x32]
;;;1591   		cntrl_stat_new=0;
00161c  f8a86048          STRH     r6,[r8,#0x48]
;;;1592   		cntrl_stat_old=0;
001620  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5668|
;;;1593   		}
;;;1594   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001624  2314              MOVS     r3,#0x14
001626  2200              MOVS     r2,#0
001628  2164              MOVS     r1,#0x64
00162a  20d2              MOVS     r0,#0xd2
00162c  f7fffffe          BL       mess_send
                  |L1.5680|
;;;1595   	}
;;;1596   
;;;1597   if(vz1_stat==vz1sWRK)
001630  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001634  280a              CMP      r0,#0xa
001636  d10b              BNE      |L1.5712|
;;;1598   	{
;;;1599   	if(vz1_stat_old!=vz1_stat)
;;;1600   		{
;;;1601   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001638  4906              LDR      r1,|L1.5716|
00163a  f8980006          LDRB     r0,[r8,#6]            ;1599  ; vz1_stat_old
00163e  3180              ADDS     r1,r1,#0x80
001640  280a              CMP      r0,#0xa               ;1599
001642  d006              BEQ      |L1.5714|
001644  4843              LDR      r0,|L1.5972|
001646  f44f6261          MOV      r2,#0xe10
00164a  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00164e  e083              B        |L1.5976|
                  |L1.5712|
001650  e0f6              B        |L1.6208|
                  |L1.5714|
001652  e085              B        |L1.5984|
                  |L1.5716|
                          DCD      ||area_number.25||
                  |L1.5720|
                          DCD      Ib_ips_termokompensat
                  |L1.5724|
                          DCD      0xffff7360
                  |L1.5728|
                          DCD      0x40024000
                  |L1.5732|
                          DCD      AVZ
                  |L1.5736|
                          DCD      YEAR_AVZ
                  |L1.5740|
                          DCD      MONTH_AVZ
                  |L1.5744|
                          DCD      DATE_AVZ
                  |L1.5748|
                          DCD      HOUR_AVZ
                  |L1.5752|
                          DCD      MIN_AVZ
                  |L1.5756|
                          DCD      SEC_AVZ
                  |L1.5760|
                          DCD      AVZ_TIME
                  |L1.5764|
                          DCD      sk_stat
                  |L1.5768|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5772|
                          DCD      0x40024020
                  |L1.5776|
001690  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001694  c2c5cdd2
001698  c8cbdfd6
00169c  c8df2121
0016a0  21202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016ac  20cdc5c8
0016b0  d1cfd0c0
0016b4  c2cdc020
0016b8  20202020
0016bc  00      
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016c4  c7c0c1cb
0016c8  cecac8d0
0016cc  cec2c0cd
0016d0  20      
0016d1  20202000          DCB      "   ",0
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
0016d8  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016dc  c2cdc8c2
0016e0  c0ded9c8
0016e4  c920c7  
0016e7  c0d0dfc4          DCB      192,208,223,196," ",0
0016eb  2000    
0016ed  00                DCB      0
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
                          DCD      speedChrgBlckStat
                  |L1.5876|
0016f4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016f8  cdc0cfd0
0016fc  dfc6c5cd
001700  c8df2020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001710  20c2dbd1
001714  cecacec3
001718  ce202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001728  2020d2d3
00172c  ccc1cbc5
001730  d0202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
00173c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001740  20c2cacb
001744  ded7c8d2
001748  c5202020
00174c  20202020
001750  00      
001751  00                DCB      0
001752  00                DCB      0
001753  00                DCB      0
                  |L1.5972|
                          DCD      UZ_T
                  |L1.5976|
001758  fb00f002          MUL      r0,r0,r2
00175c  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1602   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1603   		vz1_up_cnt=0L;
00175e  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5984|
;;;1604   
;;;1605   		}
;;;1606   	vz1_wrk_cnt--;
001760  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
001762  f1a00001          SUB      r0,r0,#1
001766  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1607   	vz1_up_cnt++;
001768  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
00176a  f1020201          ADD      r2,r2,#1
00176e  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1608   
;;;1609   	if(vz1_wrk_cnt==0)
001770  b940              CBNZ     r0,|L1.6020|
;;;1610   		{
;;;1611   		vz1_stat=vz1sFINE;
001772  f8889005          STRB     r9,[r8,#5]
;;;1612   		lc640_write(EE_VZ1_STAT,vz1sFINE);
001776  210f              MOVS     r1,#0xf
001778  4658              MOV      r0,r11
00177a  f7fffffe          BL       lc640_write
;;;1613   		uz_mem_hndl(0);
00177e  2000              MOVS     r0,#0
001780  f7fffffe          BL       uz_mem_hndl
                  |L1.6020|
;;;1614   		}
;;;1615   	if(sk_stat[0]==0)
001784  7828              LDRB     r0,[r5,#0]  ; sk_stat
001786  b938              CBNZ     r0,|L1.6040|
;;;1616   		{
;;;1617   		vz1_stat=vz1sERR2;
001788  f04f000c          MOV      r0,#0xc
00178c  f8880005          STRB     r0,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001790  4601              MOV      r1,r0
001792  4658              MOV      r0,r11
001794  f7fffffe          BL       lc640_write
                  |L1.6040|
;;;1619   		}
;;;1620   	if(sk_stat[1]==0)
001798  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179a  b938              CBNZ     r0,|L1.6060|
;;;1621   		{
;;;1622   		vz1_stat=vz1sERR3;
00179c  f04f000d          MOV      r0,#0xd
0017a0  f8880005          STRB     r0,[r8,#5]
;;;1623   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0017a4  4601              MOV      r1,r0
0017a6  4658              MOV      r0,r11
0017a8  f7fffffe          BL       lc640_write
                  |L1.6060|
;;;1624   		}
;;;1625   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017ac  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0017b0  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0017b4  fb90f0f4          SDIV     r0,r0,r4
;;;1626   		{
;;;1627   		volt_region=0;
;;;1628   		cntrl_stat=1000;
0017b8  f44f727a          MOV      r2,#0x3e8
0017bc  4288              CMP      r0,r1                 ;1625
0017be  dd16              BLE      |L1.6126|
0017c0  f9b83032          LDRSH    r3,[r8,#0x32]         ;1625  ; cntrl_stat
0017c4  2b14              CMP      r3,#0x14              ;1625
0017c6  dc12              BGT      |L1.6126|
0017c8  f898302f          LDRB     r3,[r8,#0x2f]         ;1625  ; volt_region
0017cc  2b01              CMP      r3,#1                 ;1625
0017ce  d10e              BNE      |L1.6126|
0017d0  f8b83078          LDRH     r3,[r8,#0x78]         ;1625  ; volt_region_cnt
0017d4  b95b              CBNZ     r3,|L1.6126|
0017d6  f888602f          STRB     r6,[r8,#0x2f]         ;1627
0017da  f8a82032          STRH     r2,[r8,#0x32]
;;;1629   		cntrl_stat_new=1000;
0017de  f8a82048          STRH     r2,[r8,#0x48]
;;;1630   		cntrl_stat_old=1000;
0017e2  f8a82034          STRH     r2,[r8,#0x34]
;;;1631   		volt_region_cnt=110;
0017e6  f04f036e          MOV      r3,#0x6e
0017ea  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6126|
;;;1632   		}
;;;1633   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017ee  4288              CMP      r0,r1
0017f0  da13              BGE      |L1.6170|
0017f2  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017f6  4290              CMP      r0,r2
0017f8  db0f              BLT      |L1.6170|
0017fa  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017fe  b960              CBNZ     r0,|L1.6170|
001800  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
001804  b948              CBNZ     r0,|L1.6170|
;;;1634   		{
;;;1635   		volt_region=1;
001806  f888a02f          STRB     r10,[r8,#0x2f]
;;;1636   		cntrl_stat=10;
00180a  f8a84032          STRH     r4,[r8,#0x32]
;;;1637   		cntrl_stat_new=10;
00180e  f8a84048          STRH     r4,[r8,#0x48]
;;;1638   		cntrl_stat_old=10;
001812  f8a84034          STRH     r4,[r8,#0x34]
;;;1639   		volt_region_cnt=10;
001816  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6170|
;;;1640   		}
;;;1641   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00181a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00181e  b110              CBZ      r0,|L1.6182|
;;;1642   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001820  2801              CMP      r0,#1
001822  d007              BEQ      |L1.6196|
001824  e00c              B        |L1.6208|
                  |L1.6182|
001826  2314              MOVS     r3,#0x14              ;1641
001828  2200              MOVS     r2,#0                 ;1641
00182a  2164              MOVS     r1,#0x64              ;1641
00182c  20d2              MOVS     r0,#0xd2              ;1641
00182e  f7fffffe          BL       mess_send
001832  e005              B        |L1.6208|
                  |L1.6196|
001834  2314              MOVS     r3,#0x14
001836  2201              MOVS     r2,#1
001838  2164              MOVS     r1,#0x64
00183a  20d2              MOVS     r0,#0xd2
00183c  f7fffffe          BL       mess_send
                  |L1.6208|
;;;1643   	}
;;;1644   
;;;1645   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001840  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001844  280b              CMP      r0,#0xb
001846  d120              BNE      |L1.6282|
;;;1646   	{
;;;1647   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001848  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00184c  280b              CMP      r0,#0xb
00184e  d102              BNE      |L1.6230|
001850  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001854  b908              CBNZ     r0,|L1.6234|
                  |L1.6230|
;;;1648   		{
;;;1649   		vz1_stat_cnt=10;
001856  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6234|
;;;1650   		}
;;;1651   	vz1_stat_cnt--;
00185a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00185e  f1a00001          SUB      r0,r0,#1
001862  b200              SXTH     r0,r0
001864  f8a80076          STRH     r0,[r8,#0x76]
;;;1652   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001868  280a              CMP      r0,#0xa
00186a  d001              BEQ      |L1.6256|
00186c  2809              CMP      r0,#9
00186e  d106              BNE      |L1.6270|
                  |L1.6256|
;;;1653   		{
;;;1654   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001870  a3ee              ADR      r3,|L1.7212|
001872  a2f4              ADR      r2,|L1.7236|
001874  a1f9              ADR      r1,|L1.7260|
001876  a0ff              ADR      r0,|L1.7284|
001878  9700              STR      r7,[sp,#0]
00187a  f7fffffe          BL       show_mess
                  |L1.6270|
;;;1655   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1656   					"      ВКЛЮЧЕН       ",
;;;1657   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1658   					5000);
;;;1659   		}
;;;1660   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00187e  2314              MOVS     r3,#0x14
001880  2200              MOVS     r2,#0
001882  2164              MOVS     r1,#0x64
001884  20d2              MOVS     r0,#0xd2
001886  f7fffffe          BL       mess_send
                  |L1.6282|
;;;1661   	}
;;;1662   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00188a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00188e  280c              CMP      r0,#0xc
001890  d12c              BNE      |L1.6380|
;;;1663   	{
;;;1664   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001892  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001896  280c              CMP      r0,#0xc
001898  d102              BNE      |L1.6304|
00189a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00189e  b908              CBNZ     r0,|L1.6308|
                  |L1.6304|
;;;1665   		{
;;;1666   		vz1_stat_cnt=10;
0018a0  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6308|
;;;1667   		}
;;;1668   	vz1_stat_cnt--;
0018a4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018a8  f1a00001          SUB      r0,r0,#1
0018ac  b200              SXTH     r0,r0
0018ae  f8a80076          STRH     r0,[r8,#0x76]
;;;1669   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018b2  280a              CMP      r0,#0xa
0018b4  d001              BEQ      |L1.6330|
0018b6  2809              CMP      r0,#9
0018b8  d109              BNE      |L1.6350|
                  |L1.6330|
;;;1670   		{
;;;1671   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018ba  f2af232c          ADR      r3,|L1.5776|
0018be  f2af2218          ADR      r2,|L1.5800|
0018c2  f2af2104          ADR      r1,|L1.5824|
0018c6  a0eb              ADR      r0,|L1.7284|
0018c8  9700              STR      r7,[sp,#0]
0018ca  f7fffffe          BL       show_mess
                  |L1.6350|
;;;1672   					"    ЗАБЛОКИРОВАН    ",
;;;1673   					"     НЕИСПРАВНА     ",
;;;1674   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1675   					5000);
;;;1676   		}
;;;1677   	if(sk_stat[0]==1)
0018ce  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018d0  2801              CMP      r0,#1
0018d2  d105              BNE      |L1.6368|
;;;1678   		{
;;;1679   		vz1_stat=vz1sWRK;
0018d4  f8884005          STRB     r4,[r8,#5]
;;;1680   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018d8  210a              MOVS     r1,#0xa
0018da  4658              MOV      r0,r11
0018dc  f7fffffe          BL       lc640_write
                  |L1.6368|
;;;1681   		}
;;;1682   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018e0  2314              MOVS     r3,#0x14
0018e2  2200              MOVS     r2,#0
0018e4  2164              MOVS     r1,#0x64
0018e6  20d2              MOVS     r0,#0xd2
0018e8  f7fffffe          BL       mess_send
                  |L1.6380|
;;;1683   	}
;;;1684   
;;;1685   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018ec  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018f0  280d              CMP      r0,#0xd
0018f2  d129              BNE      |L1.6472|
;;;1686   	{
;;;1687   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018f4  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018f8  280d              CMP      r0,#0xd
0018fa  d102              BNE      |L1.6402|
0018fc  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001900  b908              CBNZ     r0,|L1.6406|
                  |L1.6402|
;;;1688   		{
;;;1689   		vz1_stat_cnt=10;
001902  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6406|
;;;1690   		}
;;;1691   	vz1_stat_cnt--;
001906  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00190a  f1a00001          SUB      r0,r0,#1
00190e  b200              SXTH     r0,r0
001910  f8a80076          STRH     r0,[r8,#0x76]
;;;1692   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001914  280a              CMP      r0,#0xa
001916  d001              BEQ      |L1.6428|
001918  2809              CMP      r0,#9
00191a  d106              BNE      |L1.6442|
                  |L1.6428|
;;;1693   		{
;;;1694   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
00191c  a3db              ADR      r3,|L1.7308|
00191e  a2e1              ADR      r2,|L1.7332|
001920  a1e6              ADR      r1,|L1.7356|
001922  a0d4              ADR      r0,|L1.7284|
001924  9700              STR      r7,[sp,#0]
001926  f7fffffe          BL       show_mess
                  |L1.6442|
;;;1695   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1696   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1697   					"*   ТУМБЛЕРА!!!     ",
;;;1698   					5000);
;;;1699   		}
;;;1700   	if(sk_stat[1]==1)
00192a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00192c  2801              CMP      r0,#1
00192e  d105              BNE      |L1.6460|
;;;1701   		{
;;;1702   		vz1_stat=vz1sWRK;
001930  f8884005          STRB     r4,[r8,#5]
;;;1703   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001934  210a              MOVS     r1,#0xa
001936  4658              MOV      r0,r11
001938  f7fffffe          BL       lc640_write
                  |L1.6460|
;;;1704   		}
;;;1705   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00193c  2314              MOVS     r3,#0x14
00193e  2200              MOVS     r2,#0
001940  2164              MOVS     r1,#0x64
001942  20d2              MOVS     r0,#0xd2
001944  f7fffffe          BL       mess_send
                  |L1.6472|
;;;1706   	}
;;;1707   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001948  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00194c  280e              CMP      r0,#0xe
00194e  d12d              BNE      |L1.6572|
;;;1708   	{
;;;1709   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001950  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001954  280e              CMP      r0,#0xe
001956  d102              BNE      |L1.6494|
001958  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00195c  b908              CBNZ     r0,|L1.6498|
                  |L1.6494|
;;;1710   		{
;;;1711   		vz1_stat_cnt=10;
00195e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6498|
;;;1712   		}
;;;1713   	vz1_stat_cnt--;
001962  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001966  f1a00001          SUB      r0,r0,#1
00196a  b200              SXTH     r0,r0
00196c  f8a80076          STRH     r0,[r8,#0x76]
;;;1714   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001970  280a              CMP      r0,#0xa
001972  d001              BEQ      |L1.6520|
001974  2809              CMP      r0,#9
001976  d109              BNE      |L1.6540|
                  |L1.6520|
;;;1715   		{
;;;1716   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001978  f2af2388          ADR      r3,|L1.5876|
00197c  f2af2274          ADR      r2,|L1.5900|
001980  f2af2160          ADR      r1,|L1.5924|
001984  a0d3              ADR      r0,|L1.7380|
001986  9700              STR      r7,[sp,#0]
001988  f7fffffe          BL       show_mess
                  |L1.6540|
;;;1717   					"      ТУМБЛЕР       ",
;;;1718   					"     ВЫСОКОГО       ",
;;;1719   					"    НАПРЯЖЕНИЯ      ",
;;;1720   					5000);
;;;1721   		}
;;;1722   	if(sk_stat[1]==0)
00198c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00198e  b938              CBNZ     r0,|L1.6560|
;;;1723   		{
;;;1724   		vz1_stat=vz1sOFF;
001990  f8886005          STRB     r6,[r8,#5]
;;;1725   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001994  2100              MOVS     r1,#0
001996  4658              MOV      r0,r11
001998  f7fffffe          BL       lc640_write
;;;1726   		vz_stop();
00199c  f7fffffe          BL       vz_stop
                  |L1.6560|
;;;1727   
;;;1728   		}
;;;1729   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0019a0  2314              MOVS     r3,#0x14
0019a2  2201              MOVS     r2,#1
0019a4  2164              MOVS     r1,#0x64
0019a6  20d2              MOVS     r0,#0xd2
0019a8  f7fffffe          BL       mess_send
                  |L1.6572|
;;;1730   	}
;;;1731   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019ac  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1732   	{
;;;1733   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1734   		{
;;;1735   		vz1_stat_cnt=10;
;;;1736   		}
;;;1737   	vz1_stat_cnt--;
;;;1738   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1739   		{
;;;1740   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019b0  f64037b8          MOV      r7,#0xbb8
0019b4  280f              CMP      r0,#0xf               ;1731
0019b6  d138              BNE      |L1.6698|
0019b8  f8980006          LDRB     r0,[r8,#6]            ;1733  ; vz1_stat_old
0019bc  280f              CMP      r0,#0xf               ;1733
0019be  d102              BNE      |L1.6598|
0019c0  f8b80076          LDRH     r0,[r8,#0x76]         ;1733  ; vz1_stat_cnt
0019c4  b908              CBNZ     r0,|L1.6602|
                  |L1.6598|
0019c6  f8a84076          STRH     r4,[r8,#0x76]         ;1735
                  |L1.6602|
0019ca  f8b80076          LDRH     r0,[r8,#0x76]         ;1737  ; vz1_stat_cnt
0019ce  f1a00001          SUB      r0,r0,#1              ;1737
0019d2  b200              SXTH     r0,r0                 ;1737
0019d4  f8a80076          STRH     r0,[r8,#0x76]         ;1737
0019d8  280a              CMP      r0,#0xa               ;1738
0019da  d001              BEQ      |L1.6624|
0019dc  2809              CMP      r0,#9                 ;1738
0019de  d106              BNE      |L1.6638|
                  |L1.6624|
0019e0  a3c2              ADR      r3,|L1.7404|
0019e2  a2c8              ADR      r2,|L1.7428|
0019e4  a1cd              ADR      r1,|L1.7452|
0019e6  a0d3              ADR      r0,|L1.7476|
0019e8  9700              STR      r7,[sp,#0]
0019ea  f7fffffe          BL       show_mess
                  |L1.6638|
;;;1741   					"       ЗАРЯД        ",
;;;1742   					"      УСПЕШНО       ",
;;;1743   					"     ЗАВЕРШЕН       ",
;;;1744   					3000);
;;;1745   		}
;;;1746   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019ee  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019f2  2806              CMP      r0,#6
0019f4  d001              BEQ      |L1.6650|
0019f6  2805              CMP      r0,#5
0019f8  d109              BNE      |L1.6670|
                  |L1.6650|
;;;1747   		{
;;;1748   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019fa  f2af3308          ADR      r3,|L1.5876|
0019fe  f2af22f4          ADR      r2,|L1.5900|
001a02  f2af21e0          ADR      r1,|L1.5924|
001a06  a0d1              ADR      r0,|L1.7500|
001a08  9700              STR      r7,[sp,#0]
001a0a  f7fffffe          BL       show_mess
                  |L1.6670|
;;;1749   					"      ТУМБЛЕР       ",
;;;1750   					"     ВЫСОКОГО       ",
;;;1751   					"    НАПРЯЖЕНИЯ      ",
;;;1752   					3000);
;;;1753   		}
;;;1754   	if(sk_stat[1]==0)
001a0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a10  b928              CBNZ     r0,|L1.6686|
;;;1755   		{
;;;1756   		vz1_stat=vz1sOFF;
001a12  f8886005          STRB     r6,[r8,#5]
;;;1757   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a16  2100              MOVS     r1,#0
001a18  4658              MOV      r0,r11
001a1a  f7fffffe          BL       lc640_write
                  |L1.6686|
;;;1758   		}
;;;1759   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a1e  2314              MOVS     r3,#0x14
001a20  2200              MOVS     r2,#0
001a22  2164              MOVS     r1,#0x64
001a24  20d2              MOVS     r0,#0xd2
001a26  f7fffffe          BL       mess_send
                  |L1.6698|
;;;1760   	}
;;;1761   
;;;1762   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a2a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a2e  2810              CMP      r0,#0x10
001a30  d138              BNE      |L1.6820|
;;;1763   	{
;;;1764   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a32  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a36  2810              CMP      r0,#0x10
001a38  d102              BNE      |L1.6720|
001a3a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a3e  b908              CBNZ     r0,|L1.6724|
                  |L1.6720|
;;;1765   		{
;;;1766   		vz1_stat_cnt=10;
001a40  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6724|
;;;1767   		}
;;;1768   	vz1_stat_cnt--;
001a44  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a48  f1a00001          SUB      r0,r0,#1
001a4c  b200              SXTH     r0,r0
001a4e  f8a80076          STRH     r0,[r8,#0x76]
;;;1769   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a52  280a              CMP      r0,#0xa
001a54  d001              BEQ      |L1.6746|
001a56  2809              CMP      r0,#9
001a58  d106              BNE      |L1.6760|
                  |L1.6746|
;;;1770   		{
;;;1771   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a5a  a3c2              ADR      r3,|L1.7524|
001a5c  a2c7              ADR      r2,|L1.7548|
001a5e  a1af              ADR      r1,|L1.7452|
001a60  a0b4              ADR      r0,|L1.7476|
001a62  9700              STR      r7,[sp,#0]
001a64  f7fffffe          BL       show_mess
                  |L1.6760|
;;;1772   					"       ЗАРЯД        ",
;;;1773   					"     ПРЕКРАЩЕН      ",
;;;1774   					"                    ",
;;;1775   					3000);
;;;1776   		}
;;;1777   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a68  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a6c  2806              CMP      r0,#6
001a6e  d001              BEQ      |L1.6772|
001a70  2805              CMP      r0,#5
001a72  d109              BNE      |L1.6792|
                  |L1.6772|
;;;1778   		{
;;;1779   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a74  f2af3384          ADR      r3,|L1.5876|
001a78  f2af3270          ADR      r2,|L1.5900|
001a7c  f2af315c          ADR      r1,|L1.5924|
001a80  a0b2              ADR      r0,|L1.7500|
001a82  9700              STR      r7,[sp,#0]
001a84  f7fffffe          BL       show_mess
                  |L1.6792|
;;;1780   					"      ТУМБЛЕР       ",
;;;1781   					"     ВЫСОКОГО       ",
;;;1782   					"    НАПРЯЖЕНИЯ      ",
;;;1783   					3000);
;;;1784   		}
;;;1785   	if(sk_stat[1]==0)
001a88  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a8a  b928              CBNZ     r0,|L1.6808|
;;;1786   		{
;;;1787   		vz1_stat=vz1sOFF;
001a8c  f8886005          STRB     r6,[r8,#5]
;;;1788   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a90  2100              MOVS     r1,#0
001a92  4658              MOV      r0,r11
001a94  f7fffffe          BL       lc640_write
                  |L1.6808|
;;;1789   		}
;;;1790   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a98  2314              MOVS     r3,#0x14
001a9a  2200              MOVS     r2,#0
001a9c  2164              MOVS     r1,#0x64
001a9e  20d2              MOVS     r0,#0xd2
001aa0  f7fffffe          BL       mess_send
                  |L1.6820|
;;;1791   	}
;;;1792   
;;;1793   vz1_stat_old=vz1_stat;
001aa4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001aa8  f8880006          STRB     r0,[r8,#6]
;;;1794   
;;;1795   
;;;1796   
;;;1797   }
001aac  e8bd8ff8          POP      {r3-r11,pc}
;;;1798   
                          ENDP

                  vz1_start PROC
;;;1800   //старт уравнительног заряда
;;;1801   char vz1_start(char hour)
001ab0  b510              PUSH     {r4,lr}
;;;1802   {          
;;;1803   char out;
;;;1804   out=0;
001ab2  f04f0000          MOV      r0,#0
;;;1805   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001ab6  49b7              LDR      r1,|L1.7572|
001ab8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001abc  2a00              CMP      r2,#0
001abe  d110              BNE      |L1.6882|
001ac0  4ab5              LDR      r2,|L1.7576|
001ac2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001ac4  2a01              CMP      r2,#1
001ac6  d00c              BEQ      |L1.6882|
001ac8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001aca  2a00              CMP      r2,#0
001acc  d109              BNE      |L1.6882|
;;;1806   	{
;;;1807   	if(vz1_stat==vz1sOFF)
;;;1808   		{
;;;1809   		vz1_stat=vz1sSTEP1;
001ace  f04f0001          MOV      r0,#1
001ad2  7148              STRB     r0,[r1,#5]
;;;1810   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001ad4  4601              MOV      r1,r0
001ad6  f44f70c9          MOV      r0,#0x192
001ada  f7fffffe          BL       lc640_write
;;;1811   		out=1;
001ade  f04f0001          MOV      r0,#1
                  |L1.6882|
;;;1812   		
;;;1813   		}
;;;1814   /*	spc_stat=spcVZ;
;;;1815   	__ee_spc_stat=spcVZ; 
;;;1816   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1817   	vz_cnt_h=hour;
;;;1818   	__ee_vz_cnt=hour*60;
;;;1819   	if(hour==0)__ee_vz_cnt=30;
;;;1820   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1821   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1822   	vz_cnt_h_=0;
;;;1823   	vz_cnt_s=0;
;;;1824   	vz_cnt_s_=0;
;;;1825   	
;;;1826   		*/
;;;1827   	}
;;;1828   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1829   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1830   //plazma=out;	
;;;1831   return out;
;;;1832   }
001ae2  bd10              POP      {r4,pc}
;;;1833   
                          ENDP

                  vz1_stop PROC
;;;1835   //стоп уравнительног заряда
;;;1836   void vz1_stop(void)
001ae4  48ab              LDR      r0,|L1.7572|
;;;1837   {
;;;1838   if(vz1_stat!=vz1sOFF)
001ae6  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ae8  2900              CMP      r1,#0
001aea  d006              BEQ      |L1.6906|
;;;1839   	{
;;;1840   	vz1_stat=vz1sSTOP;
001aec  f04f0110          MOV      r1,#0x10
001af0  7141              STRB     r1,[r0,#5]
;;;1841   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001af2  f44f70c9          MOV      r0,#0x192
001af6  f7ffbffe          B.W      lc640_write
                  |L1.6906|
;;;1842   	}
;;;1843   }
001afa  4770              BX       lr
;;;1844   
                          ENDP

                  vz2_drv PROC
;;;1846   //драйвер формовочного заряда
;;;1847   void vz2_drv(void)
001afc  e92d4ff8          PUSH     {r3-r11,lr}
;;;1848   {
;;;1849   
;;;1850   if(vz2_stat==vz2sSTEP1)
001b00  4ea4              LDR      r6,|L1.7572|
;;;1851   	{
;;;1852   	if(vz2_stat_old!=vz2_stat)
;;;1853   		{
;;;1854   		vz2_stat_cnt=5;
;;;1855   		}
;;;1856   	if(vz2_stat_cnt)
;;;1857   		{
;;;1858   		vz2_stat_cnt--;
;;;1859   		if(vz2_stat_cnt==0)
;;;1860   			{
;;;1861   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1862   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1863   			}
;;;1864   		}
;;;1865   	if(sk_stat[0]==1)
001b02  4da6              LDR      r5,|L1.7580|
001b04  79f0              LDRB     r0,[r6,#7]            ;1850  ; vz2_stat
001b06  2801              CMP      r0,#1                 ;1850
001b08  d138              BNE      |L1.7036|
001b0a  7a30              LDRB     r0,[r6,#8]            ;1852  ; vz2_stat_old
001b0c  2801              CMP      r0,#1                 ;1852
001b0e  d003              BEQ      |L1.6936|
001b10  f04f0005          MOV      r0,#5                 ;1854
001b14  f8a6007a          STRH     r0,[r6,#0x7a]         ;1854
                  |L1.6936|
001b18  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1856  ; vz2_stat_cnt
001b1c  b168              CBZ      r0,|L1.6970|
001b1e  f1a00001          SUB      r0,r0,#1              ;1858
001b22  b200              SXTH     r0,r0                 ;1858
001b24  f8a6007a          STRH     r0,[r6,#0x7a]         ;1858
001b28  b938              CBNZ     r0,|L1.6970|
001b2a  f04f000c          MOV      r0,#0xc               ;1861
001b2e  71f0              STRB     r0,[r6,#7]            ;1861
001b30  4601              MOV      r1,r0                 ;1862
001b32  f44f70ca          MOV      r0,#0x194             ;1862
001b36  f7fffffe          BL       lc640_write
                  |L1.6970|
001b3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b3c  2801              CMP      r0,#1
001b3e  d117              BNE      |L1.7024|
;;;1866   		{
;;;1867   		vz2_stat=vz2sSTEP2;
001b40  f04f0002          MOV      r0,#2
001b44  71f0              STRB     r0,[r6,#7]
;;;1868   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b46  4601              MOV      r1,r0
001b48  f44f70ca          MOV      r0,#0x194
001b4c  f7fffffe          BL       lc640_write
;;;1869   		tree_up(iVZ2_STEP2_2,1,0,0);
001b50  2300              MOVS     r3,#0
001b52  461a              MOV      r2,r3
001b54  2101              MOVS     r1,#1
001b56  20f1              MOVS     r0,#0xf1
001b58  f7fffffe          BL       tree_up
;;;1870   		tree_up(iVZ2_STEP2_1,0,0,0);
001b5c  2300              MOVS     r3,#0
001b5e  461a              MOV      r2,r3
001b60  4619              MOV      r1,r3
001b62  20f0              MOVS     r0,#0xf0
001b64  f7fffffe          BL       tree_up
;;;1871   		ret(1200);
001b68  f44f6096          MOV      r0,#0x4b0
001b6c  f7fffffe          BL       ||ret||
                  |L1.7024|
;;;1872   		}
;;;1873   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b70  2314              MOVS     r3,#0x14
001b72  2200              MOVS     r2,#0
001b74  2164              MOVS     r1,#0x64
001b76  20d2              MOVS     r0,#0xd2
001b78  f7fffffe          BL       mess_send
                  |L1.7036|
;;;1874   	}
;;;1875   
;;;1876   if(vz2_stat==vz2sSTEP2)
001b7c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b7e  2802              CMP      r0,#2
001b80  d119              BNE      |L1.7094|
;;;1877   	{
;;;1878   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b82  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b84  2802              CMP      r0,#2
001b86  d102              BNE      |L1.7054|
001b88  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b8c  b918              CBNZ     r0,|L1.7062|
                  |L1.7054|
;;;1879   		{
;;;1880   		vz2_stat_cnt=15;
001b8e  f04f000f          MOV      r0,#0xf
001b92  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7062|
;;;1881   		}
;;;1882   	vz2_stat_cnt--;
001b96  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b9a  f1a00001          SUB      r0,r0,#1
001b9e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1883   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ba2  f04f0314          MOV      r3,#0x14
001ba6  f04f0200          MOV      r2,#0
001baa  f04f0164          MOV      r1,#0x64
001bae  f04f00d2          MOV      r0,#0xd2
001bb2  f7fffffe          BL       mess_send
                  |L1.7094|
;;;1884   	}
;;;1885   
;;;1886   if(vz2_stat==vz2sSTEP3)
001bb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1887   	{
;;;1888   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1889   		{
;;;1890   		vz2_stat_cnt=10;
001bb8  240a              MOVS     r4,#0xa
001bba  2700              MOVS     r7,#0
;;;1891   		cntrl_stat=0;
;;;1892   		cntrl_stat_new=0;
;;;1893   		cntrl_stat_old=0;
;;;1894   		}
;;;1895   	vz2_stat_cnt--;
;;;1896   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1897   		{
;;;1898   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bbc  f2413888          MOV      r8,#0x1388
001bc0  2803              CMP      r0,#3                 ;1886
001bc2  d131              BNE      |L1.7208|
001bc4  7a30              LDRB     r0,[r6,#8]            ;1888  ; vz2_stat_old
001bc6  2803              CMP      r0,#3                 ;1888
001bc8  d102              BNE      |L1.7120|
001bca  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1888  ; vz2_stat_cnt
001bce  b928              CBNZ     r0,|L1.7132|
                  |L1.7120|
001bd0  f8a6407a          STRH     r4,[r6,#0x7a]         ;1890
001bd4  8677              STRH     r7,[r6,#0x32]         ;1891
001bd6  f8a67048          STRH     r7,[r6,#0x48]         ;1892
001bda  86b7              STRH     r7,[r6,#0x34]         ;1893
                  |L1.7132|
001bdc  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1895  ; vz2_stat_cnt
001be0  f1a00001          SUB      r0,r0,#1              ;1895
001be4  b200              SXTH     r0,r0                 ;1895
001be6  f8a6007a          STRH     r0,[r6,#0x7a]         ;1895
001bea  280a              CMP      r0,#0xa               ;1896
001bec  d001              BEQ      |L1.7154|
001bee  2809              CMP      r0,#9                 ;1896
001bf0  d10b              BNE      |L1.7178|
                  |L1.7154|
001bf2  f2af5300          ADR      r3,|L1.5876|
001bf6  f2af42ec          ADR      r2,|L1.5900|
001bfa  f2af41d8          ADR      r1,|L1.5924|
001bfe  f2af40c4          ADR      r0,|L1.5948|
001c02  f8cd8000          STR      r8,[sp,#0]
001c06  f7fffffe          BL       show_mess
                  |L1.7178|
;;;1899   					"      ТУМБЛЕР       ",
;;;1900   					"     ВЫСОКОГО       ",
;;;1901   					"    НАПРЯЖЕНИЯ      ",
;;;1902   					5000);
;;;1903   		}
;;;1904   	if(sk_stat[1]==1)
001c0a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c0c  2801              CMP      r0,#1
001c0e  d10c              BNE      |L1.7210|
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK1;
001c10  71f4              STRB     r4,[r6,#7]
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001c12  210a              MOVS     r1,#0xa
001c14  f44f70ca          MOV      r0,#0x194
001c18  f7fffffe          BL       lc640_write
;;;1908   		volt_region=1;
001c1c  f04f0001          MOV      r0,#1
001c20  f886002f          STRB     r0,[r6,#0x2f]
;;;1909   		cntrl_stat=0;
001c24  8677              STRH     r7,[r6,#0x32]
;;;1910   		cntrl_stat_new=0;
001c26  e0bb              B        |L1.7584|
                  |L1.7208|
001c28  e0c3              B        |L1.7602|
                  |L1.7210|
001c2a  e0bc              B        |L1.7590|
                  |L1.7212|
001c2c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c30  c720c2c5
001c34  cdd2c8cb
001c38  dfd6c8  
001c3b  c8212120          DCB      200,"!!  ",0
001c3f  2000    
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c48  2020c2ca
001c4c  cbded7c5
001c50  cd202020
001c54  20202020
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c60  c520ccce
001c64  c6c5d220
001c68  c1dbd2dc
001c6c  20202020          DCB      "    ",0
001c70  00      
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c78  cdc8d2c5
001c7c  cbdccddb
001c80  c920c7  
001c83  c0d0dfc4          DCB      192,208,223,196," ",0
001c87  2000    
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c90  d2d3ccc1
001c94  cbc5d0c0
001c98  21212120
001c9c  20202020
001ca0  00      
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001ca8  d1cbc520
001cac  c2cacbde
001cb0  d7c5cd  
001cb3  c8df2020          DCB      200,223,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001cc0  c4c5d220
001cc4  cfd0cec4
001cc8  cecbc6  
001ccb  c5cd2020          DCB      197,205,"   ",0
001ccf  2000    
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cd8  20c2dbca
001cdc  cbded7c8
001ce0  d2c52020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cf0  20c7c0c2
001cf4  c5d0d8c5
001cf8  cd202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d08  2020d3d1
001d0c  cfc5d8cd
001d10  ce202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d20  202020c7
001d24  c0d0dfc4
001d28  20202020
001d2c  20202020
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d38  d0c0c2cd
001d3c  c8d2c5cb
001d40  dccddbc9
001d44  20202020          DCB      "    ",0
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d50  20c2dbca
001d54  cbded7c8
001d58  d2c52020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "                    ",0
001d68  20202020
001d6c  20202020
001d70  20202020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
001d7c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d80  20cfd0c5
001d84  cad0c0d9
001d88  c5cd2020
001d8c  20202020
001d90  00      
001d91  00                DCB      0
001d92  00                DCB      0
001d93  00                DCB      0
                  |L1.7572|
                          DCD      ||area_number.25||
                  |L1.7576|
                          DCD      speedChrgBlckStat
                  |L1.7580|
                          DCD      sk_stat
                  |L1.7584|
001da0  f8a67048          STRH     r7,[r6,#0x48]
;;;1911   		cntrl_stat_old=0;
001da4  86b7              STRH     r7,[r6,#0x34]
                  |L1.7590|
;;;1912   		}
;;;1913   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001da6  2314              MOVS     r3,#0x14
001da8  2200              MOVS     r2,#0
001daa  2164              MOVS     r1,#0x64
001dac  20d2              MOVS     r0,#0xd2
001dae  f7fffffe          BL       mess_send
                  |L1.7602|
;;;1914   	}
;;;1915   
;;;1916   if(vz2_stat==vz2sWRK1)
001db2  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1917   	{
;;;1918   
;;;1919   	if(vz2_stat_old!=vz2_stat)
;;;1920   		{
;;;1921   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001db4  f8df940c          LDR      r9,|L1.8644|
;;;1922   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1923   		vz2_up_cnt=0L;
;;;1924   
;;;1925   		}
;;;1926   	vz2_wrk_cnt--;
;;;1927   	vz2_up_cnt++;
;;;1928   
;;;1929   	if(vz2_wrk_cnt==0)
;;;1930   		{
;;;1931   		vz2_stat=vz2sWRK2;
;;;1932   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1933   		}
;;;1934   	if(sk_stat[0]==0)
;;;1935   		{
;;;1936   		vz2_stat=vz2sERR2;
;;;1937   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1938   		}
;;;1939   	if(sk_stat[1]==0)
;;;1940   		{
;;;1941   		vz2_stat=vz2sERR3;
;;;1942   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1943   		}
;;;1944   	//if(abs(out_U-FZ_U1)<10)
;;;1945   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1946   		{
;;;1947   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1948   			{
;;;1949   			if(vz2_stat_ph2_cnt)
;;;1950   				{
;;;1951   				vz2_stat_ph2_cnt--;
;;;1952   				if(vz2_stat_ph2_cnt==0)
;;;1953   					{
;;;1954   					vz2_stat=vz2sWRK2;
;;;1955   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1956   					}
;;;1957   				}
;;;1958   			}
;;;1959   		else
;;;1960   			{
;;;1961   			vz2_stat_ph2_cnt=60;
;;;1962   			}
;;;1963   		}
;;;1964   	else
;;;1965   		{
;;;1966   		vz2_stat_ph2_cnt=60;
;;;1967   		}
;;;1968   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1969   		{
;;;1970   		volt_region=0;
;;;1971   		cntrl_stat=1000;
001db8  f44f7b7a          MOV      r11,#0x3e8
001dbc  f04f0a0b          MOV      r10,#0xb              ;1931
001dc0  280a              CMP      r0,#0xa               ;1916
001dc2  d17d              BNE      |L1.7872|
001dc4  7a30              LDRB     r0,[r6,#8]            ;1919  ; vz2_stat_old
001dc6  280a              CMP      r0,#0xa               ;1919
001dc8  d00a              BEQ      |L1.7648|
001dca  48ff              LDR      r0,|L1.8648|
001dcc  f44f6161          MOV      r1,#0xe10             ;1921
001dd0  f9b00000          LDRSH    r0,[r0,#0]            ;1921  ; FZ_T1
001dd4  fb00f001          MUL      r0,r0,r1              ;1921
001dd8  f8c90048          STR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001ddc  f8c9704c          STR      r7,[r9,#0x4c]         ;1923  ; vz2_up_cnt
                  |L1.7648|
001de0  f8d90048          LDR      r0,[r9,#0x48]         ;1926  ; vz2_wrk_cnt
001de4  f1a00001          SUB      r0,r0,#1              ;1926
001de8  f8c90048          STR      r0,[r9,#0x48]         ;1926  ; vz2_wrk_cnt
001dec  f8d9104c          LDR      r1,[r9,#0x4c]         ;1927  ; vz2_up_cnt
001df0  f1010101          ADD      r1,r1,#1              ;1927
001df4  f8c9104c          STR      r1,[r9,#0x4c]         ;1927  ; vz2_up_cnt
001df8  b930              CBNZ     r0,|L1.7688|
001dfa  f886a007          STRB     r10,[r6,#7]           ;1931
001dfe  210b              MOVS     r1,#0xb               ;1932
001e00  f44f70ca          MOV      r0,#0x194             ;1932
001e04  f7fffffe          BL       lc640_write
                  |L1.7688|
001e08  7828              LDRB     r0,[r5,#0]            ;1934  ; sk_stat
001e0a  b938              CBNZ     r0,|L1.7708|
001e0c  f04f000d          MOV      r0,#0xd               ;1936
001e10  71f0              STRB     r0,[r6,#7]            ;1936
001e12  4601              MOV      r1,r0                 ;1937
001e14  f44f70ca          MOV      r0,#0x194             ;1937
001e18  f7fffffe          BL       lc640_write
                  |L1.7708|
001e1c  7868              LDRB     r0,[r5,#1]            ;1939  ; sk_stat
001e1e  b938              CBNZ     r0,|L1.7728|
001e20  f04f000e          MOV      r0,#0xe               ;1941
001e24  71f0              STRB     r0,[r6,#7]            ;1941
001e26  4601              MOV      r1,r0                 ;1942
001e28  f44f70ca          MOV      r0,#0x194             ;1942
001e2c  f7fffffe          BL       lc640_write
                  |L1.7728|
001e30  48e6              LDR      r0,|L1.8652|
001e32  223c              MOVS     r2,#0x3c              ;1961
001e34  f9b01000          LDRSH    r1,[r0,#0]            ;1945  ; out_U
001e38  48e5              LDR      r0,|L1.8656|
001e3a  f9b00000          LDRSH    r0,[r0,#0]            ;1945  ; FZ_U1
001e3e  f100031e          ADD      r3,r0,#0x1e           ;1945
001e42  4299              CMP      r1,r3                 ;1945
001e44  da20              BGE      |L1.7816|
001e46  380a              SUBS     r0,r0,#0xa            ;1945
001e48  4281              CMP      r1,r0                 ;1945
001e4a  dd1d              BLE      |L1.7816|
001e4c  48e1              LDR      r0,|L1.8660|
001e4e  49e2              LDR      r1,|L1.8664|
001e50  f9b00000          LDRSH    r0,[r0,#0]            ;1947  ; Ib_ips_termokompensat
001e54  f9b11000          LDRSH    r1,[r1,#0]            ;1947  ; FZ_ISW12
001e58  fb90f0f4          SDIV     r0,r0,r4              ;1947
001e5c  4288              CMP      r0,r1                 ;1947
001e5e  da10              BGE      |L1.7810|
001e60  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1949  ; vz2_stat_ph2_cnt
001e64  b190              CBZ      r0,|L1.7820|
001e66  f1a00001          SUB      r0,r0,#1              ;1951
001e6a  b200              SXTH     r0,r0                 ;1951
001e6c  f8a6007c          STRH     r0,[r6,#0x7c]         ;1951
001e70  b960              CBNZ     r0,|L1.7820|
001e72  f886a007          STRB     r10,[r6,#7]           ;1954
001e76  210b              MOVS     r1,#0xb               ;1955
001e78  f44f70ca          MOV      r0,#0x194             ;1955
001e7c  f7fffffe          BL       lc640_write
001e80  e004              B        |L1.7820|
                  |L1.7810|
001e82  f8a6207c          STRH     r2,[r6,#0x7c]         ;1961
001e86  e001              B        |L1.7820|
                  |L1.7816|
001e88  f8a6207c          STRH     r2,[r6,#0x7c]         ;1966
                  |L1.7820|
001e8c  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1968  ; Ibmax
001e90  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1968  ; IZMAX_
001e94  fb90f0f4          SDIV     r0,r0,r4              ;1968
001e98  4288              CMP      r0,r1                 ;1968
001e9a  dd18              BLE      |L1.7886|
001e9c  f9b62032          LDRSH    r2,[r6,#0x32]         ;1968  ; cntrl_stat
001ea0  2a14              CMP      r2,#0x14              ;1968
001ea2  dc14              BGT      |L1.7886|
001ea4  f896202f          LDRB     r2,[r6,#0x2f]         ;1968  ; volt_region
001ea8  2a01              CMP      r2,#1                 ;1968
001eaa  d110              BNE      |L1.7886|
001eac  f8b62078          LDRH     r2,[r6,#0x78]         ;1968  ; volt_region_cnt
001eb0  b96a              CBNZ     r2,|L1.7886|
001eb2  f886702f          STRB     r7,[r6,#0x2f]         ;1970
001eb6  f8a6b032          STRH     r11,[r6,#0x32]
;;;1972   		cntrl_stat_new=1000;
001eba  f8a6b048          STRH     r11,[r6,#0x48]
;;;1973   		cntrl_stat_old=1000;
001ebe  e000              B        |L1.7874|
                  |L1.7872|
001ec0  e02e              B        |L1.7968|
                  |L1.7874|
001ec2  f8a6b034          STRH     r11,[r6,#0x34]
;;;1974   		volt_region_cnt=110;
001ec6  f04f026e          MOV      r2,#0x6e
001eca  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7886|
;;;1975   		}
;;;1976   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001ece  4288              CMP      r0,r1
001ed0  da13              BGE      |L1.7930|
001ed2  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ed6  4558              CMP      r0,r11
001ed8  db0f              BLT      |L1.7930|
001eda  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ede  b960              CBNZ     r0,|L1.7930|
001ee0  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001ee4  b948              CBNZ     r0,|L1.7930|
;;;1977   		{
;;;1978   		volt_region=1;
001ee6  f04f0001          MOV      r0,#1
001eea  f886002f          STRB     r0,[r6,#0x2f]
;;;1979   		cntrl_stat=10;
001eee  8674              STRH     r4,[r6,#0x32]
;;;1980   		cntrl_stat_new=10;
001ef0  f8a64048          STRH     r4,[r6,#0x48]
;;;1981   		cntrl_stat_old=10;
001ef4  86b4              STRH     r4,[r6,#0x34]
;;;1982   		volt_region_cnt=10;
001ef6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7930|
;;;1983   		}
;;;1984   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001efa  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001efe  b110              CBZ      r0,|L1.7942|
;;;1985   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f00  2801              CMP      r0,#1
001f02  d007              BEQ      |L1.7956|
001f04  e00c              B        |L1.7968|
                  |L1.7942|
001f06  2314              MOVS     r3,#0x14              ;1984
001f08  2200              MOVS     r2,#0                 ;1984
001f0a  2164              MOVS     r1,#0x64              ;1984
001f0c  20d2              MOVS     r0,#0xd2              ;1984
001f0e  f7fffffe          BL       mess_send
001f12  e005              B        |L1.7968|
                  |L1.7956|
001f14  2314              MOVS     r3,#0x14
001f16  2201              MOVS     r2,#1
001f18  2164              MOVS     r1,#0x64
001f1a  20d2              MOVS     r0,#0xd2
001f1c  f7fffffe          BL       mess_send
                  |L1.7968|
;;;1986   	}
;;;1987   
;;;1988   if(vz2_stat==vz2sWRK2)
001f20  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f22  280b              CMP      r0,#0xb
001f24  d17f              BNE      |L1.8230|
;;;1989   	{
;;;1990   	if(vz2_stat_old!=vz2_stat)
001f26  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f28  280b              CMP      r0,#0xb
001f2a  d008              BEQ      |L1.7998|
;;;1991   		{
;;;1992   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f2c  48ab              LDR      r0,|L1.8668|
001f2e  f44f6161          MOV      r1,#0xe10
001f32  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f36  fb00f001          MUL      r0,r0,r1
001f3a  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7998|
;;;1993   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1994   		//vz2_up_cnt=0L;
;;;1995   		}
;;;1996   	vz2_wrk_cnt--;
001f3e  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f42  f1a00001          SUB      r0,r0,#1
001f46  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1997   	vz2_up_cnt++;
001f4a  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f4e  f1010101          ADD      r1,r1,#1
001f52  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1998   
;;;1999   	if(vz2_wrk_cnt==0)
001f56  b950              CBNZ     r0,|L1.8046|
;;;2000   		{
;;;2001   		vz2_stat=vz2sFINE;
001f58  f04f0012          MOV      r0,#0x12
001f5c  71f0              STRB     r0,[r6,#7]
;;;2002   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f5e  4601              MOV      r1,r0
001f60  f44f70ca          MOV      r0,#0x194
001f64  f7fffffe          BL       lc640_write
;;;2003   		fz_mem_hndl(0);
001f68  2000              MOVS     r0,#0
001f6a  f7fffffe          BL       fz_mem_hndl
                  |L1.8046|
;;;2004   		}
;;;2005   	if(sk_stat[0]==0)
001f6e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f70  b938              CBNZ     r0,|L1.8066|
;;;2006   		{
;;;2007   		vz2_stat=vz2sERR5;
001f72  f04f0010          MOV      r0,#0x10
001f76  71f0              STRB     r0,[r6,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f78  4601              MOV      r1,r0
001f7a  f44f70ca          MOV      r0,#0x194
001f7e  f7fffffe          BL       lc640_write
                  |L1.8066|
;;;2009   		}
;;;2010   	if(sk_stat[1]==0)
001f82  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f84  b938              CBNZ     r0,|L1.8086|
;;;2011   		{
;;;2012   		vz2_stat=vz2sERR6;
001f86  f04f0011          MOV      r0,#0x11
001f8a  71f0              STRB     r0,[r6,#7]
;;;2013   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f8c  4601              MOV      r1,r0
001f8e  f44f70ca          MOV      r0,#0x194
001f92  f7fffffe          BL       lc640_write
                  |L1.8086|
;;;2014   		}
;;;2015   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f96  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f9a  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f9e  fb90f0f4          SDIV     r0,r0,r4
001fa2  4288              CMP      r0,r1
001fa4  dd16              BLE      |L1.8148|
001fa6  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001faa  2a14              CMP      r2,#0x14
001fac  dc12              BGT      |L1.8148|
001fae  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001fb2  2a01              CMP      r2,#1
001fb4  d10e              BNE      |L1.8148|
001fb6  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fba  b95a              CBNZ     r2,|L1.8148|
;;;2016   		{
;;;2017   		volt_region=0;
001fbc  f886702f          STRB     r7,[r6,#0x2f]
;;;2018   		cntrl_stat=1000;
001fc0  f8a6b032          STRH     r11,[r6,#0x32]
;;;2019   		cntrl_stat_new=1000;
001fc4  f8a6b048          STRH     r11,[r6,#0x48]
;;;2020   		cntrl_stat_old=1000;
001fc8  f8a6b034          STRH     r11,[r6,#0x34]
;;;2021   		volt_region_cnt=110;
001fcc  f04f026e          MOV      r2,#0x6e
001fd0  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8148|
;;;2022   		}
;;;2023   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fd4  4288              CMP      r0,r1
001fd6  da13              BGE      |L1.8192|
001fd8  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fdc  4558              CMP      r0,r11
001fde  db0f              BLT      |L1.8192|
001fe0  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fe4  b960              CBNZ     r0,|L1.8192|
001fe6  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fea  b948              CBNZ     r0,|L1.8192|
;;;2024   		{
;;;2025   		volt_region=1;
001fec  f04f0001          MOV      r0,#1
001ff0  f886002f          STRB     r0,[r6,#0x2f]
;;;2026   		cntrl_stat=10;
001ff4  8674              STRH     r4,[r6,#0x32]
;;;2027   		cntrl_stat_new=10;
001ff6  f8a64048          STRH     r4,[r6,#0x48]
;;;2028   		cntrl_stat_old=10;
001ffa  86b4              STRH     r4,[r6,#0x34]
;;;2029   		volt_region_cnt=10;
001ffc  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8192|
;;;2030   		}
;;;2031   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002000  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
002004  b110              CBZ      r0,|L1.8204|
;;;2032   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002006  2801              CMP      r0,#1
002008  d007              BEQ      |L1.8218|
00200a  e00c              B        |L1.8230|
                  |L1.8204|
00200c  2314              MOVS     r3,#0x14              ;2031
00200e  2200              MOVS     r2,#0                 ;2031
002010  2164              MOVS     r1,#0x64              ;2031
002012  20d2              MOVS     r0,#0xd2              ;2031
002014  f7fffffe          BL       mess_send
002018  e005              B        |L1.8230|
                  |L1.8218|
00201a  2314              MOVS     r3,#0x14
00201c  2201              MOVS     r2,#1
00201e  2164              MOVS     r1,#0x64
002020  20d2              MOVS     r0,#0xd2
002022  f7fffffe          BL       mess_send
                  |L1.8230|
;;;2033   	}
;;;2034   
;;;2035   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002026  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002028  280c              CMP      r0,#0xc
00202a  d123              BNE      |L1.8308|
;;;2036   	{
;;;2037   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00202c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00202e  280c              CMP      r0,#0xc
002030  d102              BNE      |L1.8248|
002032  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002036  b908              CBNZ     r0,|L1.8252|
                  |L1.8248|
;;;2038   		{
;;;2039   		vz2_stat_cnt=10;
002038  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8252|
;;;2040   		}
;;;2041   	vz2_stat_cnt--;
00203c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002040  f1a00001          SUB      r0,r0,#1
002044  b200              SXTH     r0,r0
002046  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2042   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00204a  280a              CMP      r0,#0xa
00204c  d001              BEQ      |L1.8274|
00204e  2809              CMP      r0,#9
002050  d10a              BNE      |L1.8296|
                  |L1.8274|
;;;2043   		{
;;;2044   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002052  f2af4328          ADR      r3,|L1.7212|
002056  f2af4214          ADR      r2,|L1.7236|
00205a  f2af4100          ADR      r1,|L1.7260|
00205e  a060              ADR      r0,|L1.8672|
002060  f8cd8000          STR      r8,[sp,#0]
002064  f7fffffe          BL       show_mess
                  |L1.8296|
;;;2045   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2046   					"      ВКЛЮЧЕН       ",
;;;2047   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2048   					5000);
;;;2049   		}
;;;2050   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002068  2314              MOVS     r3,#0x14
00206a  2200              MOVS     r2,#0
00206c  2164              MOVS     r1,#0x64
00206e  20d2              MOVS     r0,#0xd2
002070  f7fffffe          BL       mess_send
                  |L1.8308|
;;;2051   	}
;;;2052   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002074  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002076  280d              CMP      r0,#0xd
002078  d12c              BNE      |L1.8404|
;;;2053   	{
;;;2054   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00207c  280d              CMP      r0,#0xd
00207e  d102              BNE      |L1.8326|
002080  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002084  b908              CBNZ     r0,|L1.8330|
                  |L1.8326|
;;;2055   		{
;;;2056   		vz2_stat_cnt=10;
002086  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8330|
;;;2057   		}
;;;2058   	vz2_stat_cnt--;
00208a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00208e  f1a00001          SUB      r0,r0,#1
002092  b200              SXTH     r0,r0
002094  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2059   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002098  280a              CMP      r0,#0xa
00209a  d001              BEQ      |L1.8352|
00209c  2809              CMP      r0,#9
00209e  d10a              BNE      |L1.8374|
                  |L1.8352|
;;;2060   		{
;;;2061   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020a0  f6af2314          ADR      r3,|L1.5776|
0020a4  f6af2200          ADR      r2,|L1.5800|
0020a8  f6af11ec          ADR      r1,|L1.5824|
0020ac  a04c              ADR      r0,|L1.8672|
0020ae  f8cd8000          STR      r8,[sp,#0]
0020b2  f7fffffe          BL       show_mess
                  |L1.8374|
;;;2062   					"    ЗАБЛОКИРОВАН    ",
;;;2063   					"     НЕИСПРАВНА     ",
;;;2064   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2065   					5000);
;;;2066   		}
;;;2067   	if(sk_stat[0]==1)
0020b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020b8  2801              CMP      r0,#1
0020ba  d105              BNE      |L1.8392|
;;;2068   		{
;;;2069   		vz2_stat=vz2sWRK1;
0020bc  71f4              STRB     r4,[r6,#7]
;;;2070   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020be  210a              MOVS     r1,#0xa
0020c0  f44f70ca          MOV      r0,#0x194
0020c4  f7fffffe          BL       lc640_write
                  |L1.8392|
;;;2071   		}
;;;2072   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020c8  2314              MOVS     r3,#0x14
0020ca  2200              MOVS     r2,#0
0020cc  2164              MOVS     r1,#0x64
0020ce  20d2              MOVS     r0,#0xd2
0020d0  f7fffffe          BL       mess_send
                  |L1.8404|
;;;2073   	}
;;;2074   
;;;2075   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020d4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020d6  280e              CMP      r0,#0xe
0020d8  d12b              BNE      |L1.8498|
;;;2076   	{
;;;2077   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020da  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020dc  280e              CMP      r0,#0xe
0020de  d102              BNE      |L1.8422|
0020e0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020e4  b908              CBNZ     r0,|L1.8426|
                  |L1.8422|
;;;2078   		{
;;;2079   		vz2_stat_cnt=10;
0020e6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8426|
;;;2080   		}
;;;2081   	vz2_stat_cnt--;
0020ea  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020ee  f1a00001          SUB      r0,r0,#1
0020f2  b200              SXTH     r0,r0
0020f4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2082   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020f8  280a              CMP      r0,#0xa
0020fa  d001              BEQ      |L1.8448|
0020fc  2809              CMP      r0,#9
0020fe  d109              BNE      |L1.8468|
                  |L1.8448|
;;;2083   		{
;;;2084   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002100  a33d              ADR      r3,|L1.8696|
002102  f2af4260          ADR      r2,|L1.7332|
002106  f2af414c          ADR      r1,|L1.7356|
00210a  a035              ADR      r0,|L1.8672|
00210c  f8cd8000          STR      r8,[sp,#0]
002110  f7fffffe          BL       show_mess
                  |L1.8468|
;;;2085   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2086   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2087   					"    ТУМБЛЕРА!!!     ",
;;;2088   					5000);
;;;2089   		}
;;;2090   	if(sk_stat[1]==1)
002114  7868              LDRB     r0,[r5,#1]  ; sk_stat
002116  2801              CMP      r0,#1
002118  d105              BNE      |L1.8486|
;;;2091   		{
;;;2092   		vz2_stat=vz2sWRK1;
00211a  71f4              STRB     r4,[r6,#7]
;;;2093   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00211c  210a              MOVS     r1,#0xa
00211e  f44f70ca          MOV      r0,#0x194
002122  f7fffffe          BL       lc640_write
                  |L1.8486|
;;;2094   		}
;;;2095   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002126  2314              MOVS     r3,#0x14
002128  2200              MOVS     r2,#0
00212a  2164              MOVS     r1,#0x64
00212c  20d2              MOVS     r0,#0xd2
00212e  f7fffffe          BL       mess_send
                  |L1.8498|
;;;2096   	}
;;;2097   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
002132  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002134  2810              CMP      r0,#0x10
002136  d12d              BNE      |L1.8596|
;;;2098   	{
;;;2099   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002138  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00213a  2810              CMP      r0,#0x10
00213c  d102              BNE      |L1.8516|
00213e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002142  b908              CBNZ     r0,|L1.8520|
                  |L1.8516|
;;;2100   		{
;;;2101   		vz2_stat_cnt=10;
002144  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8520|
;;;2102   		}
;;;2103   	vz2_stat_cnt--;
002148  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00214c  f1a00001          SUB      r0,r0,#1
002150  b200              SXTH     r0,r0
002152  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2104   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002156  280a              CMP      r0,#0xa
002158  d001              BEQ      |L1.8542|
00215a  2809              CMP      r0,#9
00215c  d10a              BNE      |L1.8564|
                  |L1.8542|
;;;2105   		{
;;;2106   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00215e  f6af23d0          ADR      r3,|L1.5776|
002162  f6af22bc          ADR      r2,|L1.5800|
002166  f6af21a8          ADR      r1,|L1.5824|
00216a  a01d              ADR      r0,|L1.8672|
00216c  f8cd8000          STR      r8,[sp,#0]
002170  f7fffffe          BL       show_mess
                  |L1.8564|
;;;2107   					"    ЗАБЛОКИРОВАН    ",
;;;2108   					"     НЕИСПРАВНА     ",
;;;2109   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2110   					5000);
;;;2111   		}
;;;2112   	if(sk_stat[0]==1)
002174  7828              LDRB     r0,[r5,#0]  ; sk_stat
002176  2801              CMP      r0,#1
002178  d106              BNE      |L1.8584|
;;;2113   		{
;;;2114   		vz2_stat=vz2sWRK2;
00217a  f886a007          STRB     r10,[r6,#7]
;;;2115   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00217e  210b              MOVS     r1,#0xb
002180  f44f70ca          MOV      r0,#0x194
002184  f7fffffe          BL       lc640_write
                  |L1.8584|
;;;2116   		}
;;;2117   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002188  2314              MOVS     r3,#0x14
00218a  2200              MOVS     r2,#0
00218c  2164              MOVS     r1,#0x64
00218e  20d2              MOVS     r0,#0xd2
002190  f7fffffe          BL       mess_send
                  |L1.8596|
;;;2118   	}
;;;2119   
;;;2120   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002194  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002196  2811              CMP      r0,#0x11
002198  d154              BNE      |L1.8772|
;;;2121   	{
;;;2122   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00219a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00219c  2811              CMP      r0,#0x11
00219e  d102              BNE      |L1.8614|
0021a0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021a4  b908              CBNZ     r0,|L1.8618|
                  |L1.8614|
;;;2123   		{
;;;2124   		vz2_stat_cnt=10;
0021a6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8618|
;;;2125   		}
;;;2126   	vz2_stat_cnt--;
0021aa  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021ae  f1a00001          SUB      r0,r0,#1
0021b2  b200              SXTH     r0,r0
0021b4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2127   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021b8  280a              CMP      r0,#0xa
0021ba  d001              BEQ      |L1.8640|
0021bc  2809              CMP      r0,#9
0021be  d131              BNE      |L1.8740|
                  |L1.8640|
;;;2128   		{
;;;2129   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021c0  a30d              ADR      r3,|L1.8696|
0021c2  e025              B        |L1.8720|
                  |L1.8644|
                          DCD      ||area_number.25||+0x80
                  |L1.8648|
                          DCD      FZ_T1
                  |L1.8652|
                          DCD      out_U
                  |L1.8656|
                          DCD      FZ_U1
                  |L1.8660|
                          DCD      Ib_ips_termokompensat
                  |L1.8664|
                          DCD      FZ_ISW12
                  |L1.8668|
                          DCD      FZ_T2
                  |L1.8672|
0021e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021e4  cccec2ce
0021e8  d7cddbc9
0021ec  20c7c0  
0021ef  d0dfc420          DCB      208,223,196,"  ",0
0021f3  2000    
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021fc  d2d3ccc1
002200  cbc5d0c0
002204  21212120
002208  20202020
00220c  00      
00220d  00                DCB      0
00220e  00                DCB      0
00220f  00                DCB      0
                  |L1.8720|
002210  f2af5270          ADR      r2,|L1.7332|
002214  f2af515c          ADR      r1,|L1.7356|
002218  f2af003c          ADR      r0,|L1.8672|
00221c  f8cd8000          STR      r8,[sp,#0]
002220  f7fffffe          BL       show_mess
                  |L1.8740|
;;;2130   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2131   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2132   					"    ТУМБЛЕРА!!!     ",
;;;2133   					5000);
;;;2134   		}
;;;2135   	if(sk_stat[1]==1)
002224  7868              LDRB     r0,[r5,#1]  ; sk_stat
002226  2801              CMP      r0,#1
002228  d106              BNE      |L1.8760|
;;;2136   		{
;;;2137   		vz2_stat=vz2sWRK2;
00222a  f886a007          STRB     r10,[r6,#7]
;;;2138   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00222e  210b              MOVS     r1,#0xb
002230  f44f70ca          MOV      r0,#0x194
002234  f7fffffe          BL       lc640_write
                  |L1.8760|
;;;2139   		}
;;;2140   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002238  2314              MOVS     r3,#0x14
00223a  2200              MOVS     r2,#0
00223c  2164              MOVS     r1,#0x64
00223e  20d2              MOVS     r0,#0xd2
002240  f7fffffe          BL       mess_send
                  |L1.8772|
;;;2141   	}
;;;2142   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002244  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002246  280f              CMP      r0,#0xf
002248  d12e              BNE      |L1.8872|
;;;2143   	{
;;;2144   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00224a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00224c  280f              CMP      r0,#0xf
00224e  d102              BNE      |L1.8790|
002250  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002254  b908              CBNZ     r0,|L1.8794|
                  |L1.8790|
;;;2145   		{
;;;2146   		vz2_stat_cnt=10;
002256  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8794|
;;;2147   		}
;;;2148   	vz2_stat_cnt--;
00225a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00225e  f1a00001          SUB      r0,r0,#1
002262  b200              SXTH     r0,r0
002264  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2149   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002268  280a              CMP      r0,#0xa
00226a  d001              BEQ      |L1.8816|
00226c  2809              CMP      r0,#9
00226e  d10b              BNE      |L1.8840|
                  |L1.8816|
;;;2150   		{
;;;2151   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002270  f6af3380          ADR      r3,|L1.5876|
002274  f6af326c          ADR      r2,|L1.5900|
002278  f6af3158          ADR      r1,|L1.5924|
00227c  f2af5034          ADR      r0,|L1.7500|
002280  f8cd8000          STR      r8,[sp,#0]
002284  f7fffffe          BL       show_mess
                  |L1.8840|
;;;2152   					"      ТУМБЛЕР       ",
;;;2153   					"     ВЫСОКОГО       ",
;;;2154   					"    НАПРЯЖЕНИЯ      ",
;;;2155   					5000);
;;;2156   		}
;;;2157   	if(sk_stat[1]==0)
002288  7868              LDRB     r0,[r5,#1]  ; sk_stat
00228a  b938              CBNZ     r0,|L1.8860|
;;;2158   		{
;;;2159   		vz2_stat=vz2sOFF;
00228c  71f7              STRB     r7,[r6,#7]
;;;2160   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00228e  2100              MOVS     r1,#0
002290  f44f70ca          MOV      r0,#0x194
002294  f7fffffe          BL       lc640_write
;;;2161   		vz_stop();
002298  f7fffffe          BL       vz_stop
                  |L1.8860|
;;;2162   
;;;2163   		}
;;;2164   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00229c  2314              MOVS     r3,#0x14
00229e  2200              MOVS     r2,#0
0022a0  2164              MOVS     r1,#0x64
0022a2  20d2              MOVS     r0,#0xd2
0022a4  f7fffffe          BL       mess_send
                  |L1.8872|
;;;2165   	}
;;;2166   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022a8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2167   	{
;;;2168   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2169   		{
;;;2170   		vz2_stat_cnt=10;
;;;2171   		}
;;;2172   	vz2_stat_cnt--;
;;;2173   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2174   		{
;;;2175   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022aa  f64038b8          MOV      r8,#0xbb8
0022ae  2812              CMP      r0,#0x12              ;2166
0022b0  d13d              BNE      |L1.9006|
0022b2  7a30              LDRB     r0,[r6,#8]            ;2168  ; vz2_stat_old
0022b4  2812              CMP      r0,#0x12              ;2168
0022b6  d102              BNE      |L1.8894|
0022b8  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2168  ; vz2_stat_cnt
0022bc  b908              CBNZ     r0,|L1.8898|
                  |L1.8894|
0022be  f8a6407a          STRH     r4,[r6,#0x7a]         ;2170
                  |L1.8898|
0022c2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2172  ; vz2_stat_cnt
0022c6  f1a00001          SUB      r0,r0,#1              ;2172
0022ca  b200              SXTH     r0,r0                 ;2172
0022cc  f8a6007a          STRH     r0,[r6,#0x7a]         ;2172
0022d0  280a              CMP      r0,#0xa               ;2173
0022d2  d001              BEQ      |L1.8920|
0022d4  2809              CMP      r0,#9                 ;2173
0022d6  d10a              BNE      |L1.8942|
                  |L1.8920|
0022d8  f2af53f0          ADR      r3,|L1.7404|
0022dc  f2af52dc          ADR      r2,|L1.7428|
0022e0  f2af51c8          ADR      r1,|L1.7452|
0022e4  a0ff              ADR      r0,|L1.9956|
0022e6  f8cd8000          STR      r8,[sp,#0]
0022ea  f7fffffe          BL       show_mess
                  |L1.8942|
;;;2176   					"       ЗАРЯД        ",
;;;2177   					"      УСПЕШНО       ",
;;;2178   					"     ЗАВЕРШЕН       ",
;;;2179   					3000);
;;;2180   		}
;;;2181   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022ee  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022f2  2806              CMP      r0,#6
0022f4  d001              BEQ      |L1.8954|
0022f6  2805              CMP      r0,#5
0022f8  d10b              BNE      |L1.8978|
                  |L1.8954|
;;;2182   		{
;;;2183   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022fa  f6af4308          ADR      r3,|L1.5876|
0022fe  f6af32f4          ADR      r2,|L1.5900|
002302  f6af31e0          ADR      r1,|L1.5924|
002306  f2af50bc          ADR      r0,|L1.7500|
00230a  f8cd8000          STR      r8,[sp,#0]
00230e  f7fffffe          BL       show_mess
                  |L1.8978|
;;;2184   					"      ТУМБЛЕР       ",
;;;2185   					"     ВЫСОКОГО       ",
;;;2186   					"    НАПРЯЖЕНИЯ      ",
;;;2187   					3000);
;;;2188   		}
;;;2189   	if(sk_stat[1]==0)
002312  7868              LDRB     r0,[r5,#1]  ; sk_stat
002314  b928              CBNZ     r0,|L1.8994|
;;;2190   		{
;;;2191   		vz2_stat=vz2sOFF;
002316  71f7              STRB     r7,[r6,#7]
;;;2192   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002318  2100              MOVS     r1,#0
00231a  f44f70ca          MOV      r0,#0x194
00231e  f7fffffe          BL       lc640_write
                  |L1.8994|
;;;2193   		}
;;;2194   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002322  2314              MOVS     r3,#0x14
002324  2200              MOVS     r2,#0
002326  2164              MOVS     r1,#0x64
002328  20d2              MOVS     r0,#0xd2
00232a  f7fffffe          BL       mess_send
                  |L1.9006|
;;;2195   	}
;;;2196   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00232e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002330  2813              CMP      r0,#0x13
002332  d13d              BNE      |L1.9136|
;;;2197   	{
;;;2198   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002334  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002336  2813              CMP      r0,#0x13
002338  d102              BNE      |L1.9024|
00233a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00233e  b908              CBNZ     r0,|L1.9028|
                  |L1.9024|
;;;2199   		{
;;;2200   		vz2_stat_cnt=10;
002340  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9028|
;;;2201   		}
;;;2202   	vz2_stat_cnt--;
002344  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002348  f1a00001          SUB      r0,r0,#1
00234c  b200              SXTH     r0,r0
00234e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2203   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002352  280a              CMP      r0,#0xa
002354  d001              BEQ      |L1.9050|
002356  2809              CMP      r0,#9
002358  d10a              BNE      |L1.9072|
                  |L1.9050|
;;;2204   		{
;;;2205   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00235a  f2af53f8          ADR      r3,|L1.7524|
00235e  f2af52e4          ADR      r2,|L1.7548|
002362  f2af6148          ADR      r1,|L1.7452|
002366  a0df              ADR      r0,|L1.9956|
002368  f8cd8000          STR      r8,[sp,#0]
00236c  f7fffffe          BL       show_mess
                  |L1.9072|
;;;2206   					"       ЗАРЯД        ",
;;;2207   					"     ПРЕКРАЩЕН      ",
;;;2208   					"                    ",
;;;2209   					3000);
;;;2210   		}
;;;2211   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002370  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
002374  2806              CMP      r0,#6
002376  d001              BEQ      |L1.9084|
002378  2805              CMP      r0,#5
00237a  d10b              BNE      |L1.9108|
                  |L1.9084|
;;;2212   		{
;;;2213   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00237c  f6af438c          ADR      r3,|L1.5876|
002380  f6af4278          ADR      r2,|L1.5900|
002384  f6af4164          ADR      r1,|L1.5924|
002388  f2af6040          ADR      r0,|L1.7500|
00238c  f8cd8000          STR      r8,[sp,#0]
002390  f7fffffe          BL       show_mess
                  |L1.9108|
;;;2214   					"      ТУМБЛЕР       ",
;;;2215   					"     ВЫСОКОГО       ",
;;;2216   					"    НАПРЯЖЕНИЯ      ",
;;;2217   					3000);
;;;2218   		}
;;;2219   	if(sk_stat[1]==0)
002394  7868              LDRB     r0,[r5,#1]  ; sk_stat
002396  b928              CBNZ     r0,|L1.9124|
;;;2220   		{
;;;2221   		vz2_stat=vz2sOFF;
002398  71f7              STRB     r7,[r6,#7]
;;;2222   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00239a  2100              MOVS     r1,#0
00239c  f44f70ca          MOV      r0,#0x194
0023a0  f7fffffe          BL       lc640_write
                  |L1.9124|
;;;2223   		}
;;;2224   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023a4  2314              MOVS     r3,#0x14
0023a6  2200              MOVS     r2,#0
0023a8  2164              MOVS     r1,#0x64
0023aa  20d2              MOVS     r0,#0xd2
0023ac  f7fffffe          BL       mess_send
                  |L1.9136|
;;;2225   	}
;;;2226   vz2_stat_old=vz2_stat;
0023b0  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0023b2  7230              STRB     r0,[r6,#8]
;;;2227   
;;;2228   }
0023b4  e8bd8ff8          POP      {r3-r11,pc}
;;;2229   
                          ENDP

                  vz2_start PROC
;;;2231   //старт уравнительног заряда
;;;2232   char vz2_start(char hour)
0023b8  b510              PUSH     {r4,lr}
;;;2233   {          
;;;2234   char out;
;;;2235   out=0;
0023ba  f04f0000          MOV      r0,#0
;;;2236   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023be  49cf              LDR      r1,|L1.9980|
0023c0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023c4  2a00              CMP      r2,#0
0023c6  d110              BNE      |L1.9194|
0023c8  4acd              LDR      r2,|L1.9984|
0023ca  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023cc  2a01              CMP      r2,#1
0023ce  d00c              BEQ      |L1.9194|
0023d0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023d2  2a00              CMP      r2,#0
0023d4  d109              BNE      |L1.9194|
;;;2237   	{
;;;2238   	if(vz1_stat==vz1sOFF)
;;;2239   		{
;;;2240   		vz2_stat=vz2sSTEP1;
0023d6  f04f0001          MOV      r0,#1
0023da  71c8              STRB     r0,[r1,#7]
;;;2241   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023dc  4601              MOV      r1,r0
0023de  f44f70ca          MOV      r0,#0x194
0023e2  f7fffffe          BL       lc640_write
;;;2242   		out=1;
0023e6  f04f0001          MOV      r0,#1
                  |L1.9194|
;;;2243   		
;;;2244   		}
;;;2245   /*	spc_stat=spcVZ;
;;;2246   	__ee_spc_stat=spcVZ; 
;;;2247   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2248   	vz_cnt_h=hour;
;;;2249   	__ee_vz_cnt=hour*60;
;;;2250   	if(hour==0)__ee_vz_cnt=30;
;;;2251   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2252   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2253   	vz_cnt_h_=0;
;;;2254   	vz_cnt_s=0;
;;;2255   	vz_cnt_s_=0;
;;;2256   	
;;;2257   		*/
;;;2258   	}
;;;2259   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2260   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2261   //plazma=out;	
;;;2262   return out;
;;;2263   }
0023ea  bd10              POP      {r4,pc}
;;;2264   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2265   //стоп формовочного заряда
;;;2266   void vz2_stop(void)
0023ec  48c3              LDR      r0,|L1.9980|
;;;2267   {
;;;2268   if(vz2_stat!=vz2sOFF)
0023ee  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023f0  2900              CMP      r1,#0
0023f2  d006              BEQ      |L1.9218|
;;;2269   	{
;;;2270   	vz2_stat=vz2sSTOP;
0023f4  f04f0113          MOV      r1,#0x13
0023f8  71c1              STRB     r1,[r0,#7]
;;;2271   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023fa  f44f70ca          MOV      r0,#0x194
0023fe  f7ffbffe          B.W      lc640_write
                  |L1.9218|
;;;2272   	}
;;;2273   }
002402  4770              BX       lr
;;;2274   
                          ENDP

                  kb_init PROC
;;;2275   //-----------------------------------------------
;;;2276   void kb_init(void)
002404  48bf              LDR      r0,|L1.9988|
;;;2277   {
;;;2278   main_kb_cnt=(TBAT*60)-60/*120*/;
002406  f06f013b          MVN      r1,#0x3b
00240a  8800              LDRH     r0,[r0,#0]  ; TBAT
00240c  ebc01000          RSB      r0,r0,r0,LSL #4
002410  eb010080          ADD      r0,r1,r0,LSL #2
002414  49b9              LDR      r1,|L1.9980|
002416  f8a10052          STRH     r0,[r1,#0x52]
;;;2279   }
00241a  4770              BX       lr
;;;2280   
                          ENDP

                  kb_hndl PROC
;;;2281   //-----------------------------------------------
;;;2282   void kb_hndl(void)
00241c  e92d5ff0          PUSH     {r4-r12,lr}
;;;2283   {
;;;2284   
;;;2285   static signed short ibat[2],ibat_[2];
;;;2286   #ifdef UKU_TELECORE2015
;;;2287   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2288   #else 
;;;2289   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002420  f8df82d8          LDR      r8,|L1.9980|
;;;2290   #endif
;;;2291   	{
;;;2292   	main_kb_cnt=0;
;;;2293   	
;;;2294   	kb_start[0]=0;
;;;2295   	kb_start[1]=0;
;;;2296   	kb_start_ips=0;
;;;2297   
;;;2298   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2299   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2300   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2301   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002424  f8dfa2e0          LDR      r10,|L1.9992|
002428  2500              MOVS     r5,#0                 ;2289
00242a  f8b80052          LDRH     r0,[r8,#0x52]         ;2289  ; main_kb_cnt
00242e  4eb7              LDR      r6,|L1.9996|
002430  1c40              ADDS     r0,r0,#1              ;2289
002432  b201              SXTH     r1,r0                 ;2289
002434  48b3              LDR      r0,|L1.9988|
002436  f8a81052          STRH     r1,[r8,#0x52]         ;2289
00243a  f8df92d4          LDR      r9,|L1.10000|
00243e  f9b00000          LDRSH    r0,[r0,#0]            ;2289  ; TBAT
;;;2302   #endif	
;;;2303   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2304   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2305   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2306   #endif
;;;2307   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2308    
;;;2309   		{
;;;2310   		kb_start[0]=0;
;;;2311   		kb_start[1]=0;
;;;2312   		kb_start_ips=0;
;;;2313   		}
;;;2314   
;;;2315   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2316   		{
;;;2317   		kb_cnt_1lev=10;
002442  270a              MOVS     r7,#0xa
002444  ebc01200          RSB      r2,r0,r0,LSL #4       ;2289
002448  f04f0b01          MOV      r11,#1                ;2298
00244c  f1080458          ADD      r4,r8,#0x58           ;2294
002450  ebb10f82          CMP      r1,r2,LSL #2          ;2289
002454  db6c              BLT      |L1.9520|
002456  2800              CMP      r0,#0                 ;2289
002458  d06a              BEQ      |L1.9520|
00245a  f8a85052          STRH     r5,[r8,#0x52]         ;2292
00245e  7025              STRB     r5,[r4,#0]            ;2294
002460  7065              STRB     r5,[r4,#1]            ;2295
002462  f888501d          STRB     r5,[r8,#0x1d]         ;2296
002466  48ab              LDR      r0,|L1.10004|
002468  7800              LDRB     r0,[r0,#0]            ;2298  ; BAT_IS_ON
00246a  2855              CMP      r0,#0x55              ;2298
00246c  d111              BNE      |L1.9362|
00246e  f9b60002          LDRSH    r0,[r6,#2]            ;2298  ; bat
002472  2850              CMP      r0,#0x50              ;2298
002474  dd0d              BLE      |L1.9362|
002476  f9b60008          LDRSH    r0,[r6,#8]            ;2298  ; bat
00247a  f7fffffe          BL       abs
00247e  f9b91000          LDRSH    r1,[r9,#0]            ;2298  ; IKB
002482  4288              CMP      r0,r1                 ;2298
002484  db03              BLT      |L1.9358|
002486  f896003d          LDRB     r0,[r6,#0x3d]         ;2298  ; bat
00248a  07c0              LSLS     r0,r0,#31             ;2298
00248c  d001              BEQ      |L1.9362|
                  |L1.9358|
00248e  f884b000          STRB     r11,[r4,#0]           ;2298
                  |L1.9362|
002492  48a0              LDR      r0,|L1.10004|
002494  7840              LDRB     r0,[r0,#1]            ;2299  ; BAT_IS_ON
002496  2855              CMP      r0,#0x55              ;2299
002498  d111              BNE      |L1.9406|
00249a  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2299  ; bat
00249e  2850              CMP      r0,#0x50              ;2299
0024a0  dd0d              BLE      |L1.9406|
0024a2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2299  ; bat
0024a6  f7fffffe          BL       abs
0024aa  f9b91000          LDRSH    r1,[r9,#0]            ;2299  ; IKB
0024ae  4288              CMP      r0,r1                 ;2299
0024b0  db03              BLT      |L1.9402|
0024b2  f8960089          LDRB     r0,[r6,#0x89]         ;2299  ; bat
0024b6  07c0              LSLS     r0,r0,#31             ;2299
0024b8  d001              BEQ      |L1.9406|
                  |L1.9402|
0024ba  f884b001          STRB     r11,[r4,#1]           ;2299
                  |L1.9406|
0024be  4896              LDR      r0,|L1.10008|
0024c0  7800              LDRB     r0,[r0,#0]            ;2301  ; ips_bat_av_vzvod
0024c2  b970              CBNZ     r0,|L1.9442|
0024c4  f9ba0000          LDRSH    r0,[r10,#0]           ;2301  ; Ib_ips_termokompensat
0024c8  f7fffffe          BL       abs
0024cc  f9b91000          LDRSH    r1,[r9,#0]            ;2301  ; IKB
0024d0  4288              CMP      r0,r1                 ;2301
0024d2  db04              BLT      |L1.9438|
0024d4  4891              LDR      r0,|L1.10012|
0024d6  f890003d          LDRB     r0,[r0,#0x3d]         ;2301  ; bat_ips
0024da  07c0              LSLS     r0,r0,#31             ;2301
0024dc  d001              BEQ      |L1.9442|
                  |L1.9438|
0024de  f888b01d          STRB     r11,[r8,#0x1d]        ;2301
                  |L1.9442|
0024e2  488f              LDR      r0,|L1.10016|
0024e4  7800              LDRB     r0,[r0,#0]            ;2303  ; net_av
0024e6  b998              CBNZ     r0,|L1.9488|
0024e8  f898001e          LDRB     r0,[r8,#0x1e]         ;2303  ; num_of_wrks_bps
0024ec  b180              CBZ      r0,|L1.9488|
0024ee  f8980023          LDRB     r0,[r8,#0x23]         ;2303  ; spc_stat
0024f2  b108              CBZ      r0,|L1.9464|
0024f4  2802              CMP      r0,#2                 ;2303
0024f6  d10b              BNE      |L1.9488|
                  |L1.9464|
0024f8  f8980005          LDRB     r0,[r8,#5]            ;2305  ; vz1_stat
0024fc  f8981007          LDRB     r1,[r8,#7]            ;2305  ; vz2_stat
002500  4308              ORRS     r0,r0,r1              ;2305
002502  d002              BEQ      |L1.9482|
002504  4887              LDR      r0,|L1.10020|
002506  8800              LDRH     r0,[r0,#0]            ;2305  ; SMART_SPC
002508  b910              CBNZ     r0,|L1.9488|
                  |L1.9482|
00250a  4887              LDR      r0,|L1.10024|
00250c  7800              LDRB     r0,[r0,#0]            ;2307  ; sp_ch_stat
00250e  b118              CBZ      r0,|L1.9496|
                  |L1.9488|
002510  7025              STRB     r5,[r4,#0]            ;2310
002512  7065              STRB     r5,[r4,#1]            ;2311
002514  f888501d          STRB     r5,[r8,#0x1d]         ;2312
                  |L1.9496|
002518  7820              LDRB     r0,[r4,#0]            ;2315  ; kb_start
00251a  2801              CMP      r0,#1                 ;2315
00251c  d020              BEQ      |L1.9568|
00251e  7860              LDRB     r0,[r4,#1]            ;2315  ; kb_start
002520  2801              CMP      r0,#1                 ;2315
002522  d01d              BEQ      |L1.9568|
002524  f898001d          LDRB     r0,[r8,#0x1d]         ;2315  ; kb_start_ips
002528  2801              CMP      r0,#1                 ;2315
00252a  d019              BEQ      |L1.9568|
;;;2318   		}
;;;2319   	else kb_cnt_1lev=0;
00252c  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9520|
;;;2320   	}
;;;2321   
;;;2322   if(kb_cnt_1lev)
002530  4641              MOV      r1,r8
002532  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2323   	{
;;;2324   	kb_cnt_1lev--;
;;;2325   
;;;2326   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2327   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2328   
;;;2329   
;;;2330   	if(kb_cnt_1lev==5)
;;;2331   		{
;;;2332   		ibat[0]=abs(bat[0]._Ib);
002536  f8df81c4          LDR      r8,|L1.9980|
00253a  2800              CMP      r0,#0                 ;2322
00253c  f1080890          ADD      r8,r8,#0x90
002540  d07e              BEQ      |L1.9792|
002542  f1a00001          SUB      r0,r0,#1              ;2324
002546  b200              SXTH     r0,r0                 ;2324
002548  468b              MOV      r11,r1                ;2324
00254a  f8a10054          STRH     r0,[r1,#0x54]         ;2324
00254e  2805              CMP      r0,#5                 ;2326
002550  dd09              BLE      |L1.9574|
002552  230f              MOVS     r3,#0xf               ;2326
002554  221e              MOVS     r2,#0x1e              ;2326
002556  2164              MOVS     r1,#0x64              ;2326
002558  20e1              MOVS     r0,#0xe1              ;2326
00255a  f7fffffe          BL       mess_send
00255e  e00a              B        |L1.9590|
                  |L1.9568|
002560  f8a87054          STRH     r7,[r8,#0x54]         ;2317
002564  e7e4              B        |L1.9520|
                  |L1.9574|
002566  2800              CMP      r0,#0                 ;2327
002568  dd05              BLE      |L1.9590|
00256a  230f              MOVS     r3,#0xf               ;2327
00256c  221e              MOVS     r2,#0x1e              ;2327
00256e  2169              MOVS     r1,#0x69              ;2327
002570  20e1              MOVS     r0,#0xe1              ;2327
002572  f7fffffe          BL       mess_send
                  |L1.9590|
002576  f8bb0054          LDRH     r0,[r11,#0x54]        ;2330  ; kb_cnt_1lev
00257a  2805              CMP      r0,#5                 ;2330
00257c  d111              BNE      |L1.9634|
00257e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002582  f7fffffe          BL       abs
002586  f8a80000          STRH     r0,[r8,#0]
;;;2333   		ibat[1]=abs(bat[1]._Ib);
00258a  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00258e  f7fffffe          BL       abs
002592  f8a80002          STRH     r0,[r8,#2]
;;;2334   		ibat_ips=abs(Ib_ips_termokompensat);
002596  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00259a  f7fffffe          BL       abs
00259e  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9634|
;;;2335   		}
;;;2336   	
;;;2337   	if(kb_cnt_1lev==0)
0025a2  4856              LDR      r0,|L1.9980|
0025a4  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025a8  2800              CMP      r0,#0
0025aa  d158              BNE      |L1.9822|
;;;2338   		{
;;;2339   		ibat_[0]=abs(bat[0]._Ib);
0025ac  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025b0  f7fffffe          BL       abs
0025b4  f8dfb144          LDR      r11,|L1.9980|
0025b8  f10b0b94          ADD      r11,r11,#0x94
0025bc  f8ab0000          STRH     r0,[r11,#0]
;;;2340   		ibat_[1]=abs(bat[1]._Ib);
0025c0  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025c4  f7fffffe          BL       abs
0025c8  f8ab0002          STRH     r0,[r11,#2]
;;;2341   		ibat_ips_=abs(Ib_ips_termokompensat);
0025cc  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025d0  f7fffffe          BL       abs
0025d4  f8dfa124          LDR      r10,|L1.9980|
0025d8  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2342   
;;;2343   		kb_cnt_2lev=0;
0025dc  f8aa5056          STRH     r5,[r10,#0x56]
;;;2344   
;;;2345   
;;;2346   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025e0  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025e4  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025e8  4408              ADD      r0,r0,r1
0025ea  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025ee  4288              CMP      r0,r1
0025f0  da02              BGE      |L1.9720|
0025f2  7820              LDRB     r0,[r4,#0]  ; kb_start
0025f4  2801              CMP      r0,#1
0025f6  d034              BEQ      |L1.9826|
                  |L1.9720|
;;;2347   			{
;;;2348   			kb_cnt_2lev=10;  
;;;2349   			}
;;;2350   		else if(bat[0]._Ub>200)
0025f8  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025fc  28c8              CMP      r0,#0xc8
0025fe  dd04              BLE      |L1.9738|
;;;2351   			{
;;;2352   			kb_start[0]=0;
002600  7025              STRB     r5,[r4,#0]
;;;2353   			avar_bat_hndl(0,0);
002602  2100              MOVS     r1,#0
002604  4608              MOV      r0,r1
002606  f7fffffe          BL       avar_bat_hndl
                  |L1.9738|
;;;2354   			}
;;;2355   		
;;;2356   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
00260a  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
00260e  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
002612  4408              ADD      r0,r0,r1
002614  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002618  4288              CMP      r0,r1
00261a  da02              BGE      |L1.9762|
00261c  7860              LDRB     r0,[r4,#1]  ; kb_start
00261e  2801              CMP      r0,#1
002620  d022              BEQ      |L1.9832|
                  |L1.9762|
;;;2357   			{
;;;2358   			kb_cnt_2lev=10;     
;;;2359   			}
;;;2360   		else  if(bat[1]._Ub>200)
002622  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002626  28c8              CMP      r0,#0xc8
002628  dd04              BLE      |L1.9780|
;;;2361   			{
;;;2362   			kb_start[1]=0;
00262a  7065              STRB     r5,[r4,#1]
;;;2363   			avar_bat_hndl(1,0);
00262c  2100              MOVS     r1,#0
00262e  2001              MOVS     r0,#1
002630  f7fffffe          BL       avar_bat_hndl
                  |L1.9780|
;;;2364   			}
;;;2365   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2366   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002634  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002638  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
00263c  4408              ADD      r0,r0,r1
00263e  e000              B        |L1.9794|
                  |L1.9792|
002640  e01b              B        |L1.9850|
                  |L1.9794|
002642  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002646  4288              CMP      r0,r1
002648  da09              BGE      |L1.9822|
00264a  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00264e  2801              CMP      r0,#1
002650  d105              BNE      |L1.9822|
;;;2367   			{
;;;2368   			if(KB_ALGORITM==1)
002652  4836              LDR      r0,|L1.10028|
002654  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002656  2801              CMP      r0,#1
002658  d009              BEQ      |L1.9838|
;;;2369   				{
;;;2370   				avar_bat_ips_hndl(1);
;;;2371   				kb_start_ips=0;
;;;2372   				}
;;;2373   			else
;;;2374   				{
;;;2375   				kb_cnt_2lev=10;     
00265a  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9822|
;;;2376   				}
;;;2377   			}
;;;2378   #endif
;;;2379   		}	
;;;2380   
;;;2381   
;;;2382   	}
;;;2383   else if(kb_cnt_2lev)
;;;2384   	{
;;;2385   	kb_cnt_2lev--;
;;;2386   
;;;2387   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2388   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2389   
;;;2390   
;;;2391   	if(kb_cnt_2lev==5)
;;;2392   		{
;;;2393   		ibat[0]=abs(bat[0]._Ib);
;;;2394   		ibat[1]=abs(bat[1]._Ib);
;;;2395   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2396   		}
;;;2397   	
;;;2398   	if(kb_cnt_2lev==0)
;;;2399   		{
;;;2400   		ibat_[0]=abs(bat[0]._Ib);
;;;2401   		ibat_[1]=abs(bat[1]._Ib);
;;;2402   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2403   
;;;2404   		kb_full_ver=0;
;;;2405   
;;;2406   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2407   			{
;;;2408   			kb_full_ver=1;  
;;;2409   			}
;;;2410   		else if(bat[0]._Ub>200)			
;;;2411   			{
;;;2412   			kb_start[0]=0;
;;;2413   			avar_bat_hndl(0,0);
;;;2414   			}
;;;2415   
;;;2416   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2417   			{
;;;2418   			kb_full_ver=1;     
;;;2419   			}
;;;2420   		else	if(bat[1]._Ub>200)		
;;;2421   			{
;;;2422   			kb_start[1]=0;
;;;2423   			avar_bat_hndl(1,0);
;;;2424   			}
;;;2425   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2426   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2427   			{
;;;2428   			if(KB_ALGORITM==2)
;;;2429   				{
;;;2430   				avar_bat_ips_hndl(1);
;;;2431   				kb_start_ips=0;
;;;2432   				}
;;;2433   			else
;;;2434   				{
;;;2435   				kb_full_ver=1;     
;;;2436   				}
;;;2437   			}
;;;2438   #endif
;;;2439   		}	
;;;2440   	}
;;;2441   
;;;2442   else if(kb_full_ver)
;;;2443   	{
;;;2444   	
;;;2445   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2446   
;;;2447   	if( abs(bat[0]._Ib) > IKB ) 
;;;2448   		{
;;;2449   		if(kb_start[0]==1)
;;;2450   			{
;;;2451   			kb_start[0]=0;
;;;2452   			avar_bat_hndl(0,0);
;;;2453   			}
;;;2454   		}
;;;2455   
;;;2456   	if( abs(bat[1]._Ib) > IKB ) 
;;;2457   		{
;;;2458   		if(kb_start[1]==1)
;;;2459   			{
;;;2460   			kb_start[1]=0;
;;;2461   			avar_bat_hndl(1,0);
;;;2462   			}
;;;2463   		}
;;;2464   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2465   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2466   		{
;;;2467   		if(kb_start_ips==1)
;;;2468   			{
;;;2469   			kb_start_ips=0;
;;;2470   			avar_bat_ips_hndl(0);
;;;2471   			}
;;;2472   		}
;;;2473   #endif
;;;2474   
;;;2475   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2476   		{
;;;2477   		kb_full_ver=0;
;;;2478   		}
;;;2479   
;;;2480   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2481   		{
;;;2482   		kb_full_ver=0;
;;;2483   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2484   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2485   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2486   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2487   #endif
;;;2488   		}
;;;2489   	}
;;;2490   
;;;2491   }
00265e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9826|
002662  f8aa7056          STRH     r7,[r10,#0x56]        ;2348
002666  e7d0              B        |L1.9738|
                  |L1.9832|
002668  f8aa7056          STRH     r7,[r10,#0x56]        ;2358
00266c  e7e2              B        |L1.9780|
                  |L1.9838|
00266e  2001              MOVS     r0,#1                 ;2370
002670  f7fffffe          BL       avar_bat_ips_hndl
002674  f88a501d          STRB     r5,[r10,#0x1d]        ;2371
                  |L1.9848|
002678  e7f1              B        |L1.9822|
                  |L1.9850|
00267a  f9b10056          LDRSH    r0,[r1,#0x56]         ;2383  ; kb_cnt_2lev
00267e  b380              CBZ      r0,|L1.9954|
002680  f1a00001          SUB      r0,r0,#1              ;2385
002684  b200              SXTH     r0,r0                 ;2385
002686  460f              MOV      r7,r1                 ;2385
002688  f8a10056          STRH     r0,[r1,#0x56]         ;2385
00268c  2805              CMP      r0,#5                 ;2387
00268e  dd06              BLE      |L1.9886|
002690  230f              MOVS     r3,#0xf               ;2387
002692  22c8              MOVS     r2,#0xc8              ;2387
002694  2164              MOVS     r1,#0x64              ;2387
002696  20e1              MOVS     r0,#0xe1              ;2387
002698  f7fffffe          BL       mess_send
00269c  e007              B        |L1.9902|
                  |L1.9886|
00269e  2800              CMP      r0,#0                 ;2388
0026a0  dd05              BLE      |L1.9902|
0026a2  230f              MOVS     r3,#0xf               ;2388
0026a4  22c8              MOVS     r2,#0xc8              ;2388
0026a6  2169              MOVS     r1,#0x69              ;2388
0026a8  20e1              MOVS     r0,#0xe1              ;2388
0026aa  f7fffffe          BL       mess_send
                  |L1.9902|
0026ae  f8b70056          LDRH     r0,[r7,#0x56]         ;2391  ; kb_cnt_2lev
0026b2  2805              CMP      r0,#5                 ;2391
0026b4  d111              BNE      |L1.9946|
0026b6  f9b60008          LDRSH    r0,[r6,#8]            ;2393  ; bat
0026ba  f7fffffe          BL       abs
0026be  f8a80000          STRH     r0,[r8,#0]            ;2393
0026c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2394  ; bat
0026c6  f7fffffe          BL       abs
0026ca  f8a80002          STRH     r0,[r8,#2]            ;2394
0026ce  f9ba0000          LDRSH    r0,[r10,#0]           ;2395  ; Ib_ips_termokompensat
0026d2  f7fffffe          BL       abs
0026d6  f8a7005a          STRH     r0,[r7,#0x5a]         ;2395
                  |L1.9946|
0026da  4808              LDR      r0,|L1.9980|
0026dc  f8b00056          LDRH     r0,[r0,#0x56]         ;2398  ; kb_cnt_2lev
0026e0  e026              B        |L1.10032|
                  |L1.9954|
0026e2  e087              B        |L1.10228|
                  |L1.9956|
0026e4  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026e8  d4ced0cc
0026ec  cec2ced7
0026f0  cddbc920
0026f4  202020  
0026f7  2000              DCB      " ",0
0026f9  00                DCB      0
0026fa  00                DCB      0
0026fb  00                DCB      0
                  |L1.9980|
                          DCD      ||area_number.25||
                  |L1.9984|
                          DCD      speedChrgBlckStat
                  |L1.9988|
                          DCD      TBAT
                  |L1.9992|
                          DCD      Ib_ips_termokompensat
                  |L1.9996|
                          DCD      bat
                  |L1.10000|
                          DCD      IKB
                  |L1.10004|
                          DCD      BAT_IS_ON
                  |L1.10008|
                          DCD      ips_bat_av_vzvod
                  |L1.10012|
                          DCD      bat_ips
                  |L1.10016|
                          DCD      net_av
                  |L1.10020|
                          DCD      SMART_SPC
                  |L1.10024|
                          DCD      sp_ch_stat
                  |L1.10028|
                          DCD      KB_ALGORITM
                  |L1.10032|
002730  2800              CMP      r0,#0                 ;2398
                  |L1.10034|
002732  d194              BNE      |L1.9822|
002734  f9b60008          LDRSH    r0,[r6,#8]            ;2400  ; bat
002738  f7fffffe          BL       abs
00273c  4fff              LDR      r7,|L1.11068|
00273e  8038              STRH     r0,[r7,#0]            ;2400
002740  f9b60054          LDRSH    r0,[r6,#0x54]         ;2401  ; bat
002744  f7fffffe          BL       abs
002748  8078              STRH     r0,[r7,#2]            ;2401
00274a  f9ba0000          LDRSH    r0,[r10,#0]           ;2402  ; Ib_ips_termokompensat
00274e  f7fffffe          BL       abs
002752  f1a70a94          SUB      r10,r7,#0x94          ;2402
002756  f8aa005c          STRH     r0,[r10,#0x5c]        ;2402
00275a  f88a501c          STRB     r5,[r10,#0x1c]        ;2404
00275e  f9b80000          LDRSH    r0,[r8,#0]            ;2406  ; ibat
002762  f9b71000          LDRSH    r1,[r7,#0]            ;2406  ; ibat_
002766  4408              ADD      r0,r0,r1              ;2406
002768  f9b91000          LDRSH    r1,[r9,#0]            ;2406  ; IKB
00276c  4288              CMP      r0,r1                 ;2406
00276e  da02              BGE      |L1.10102|
002770  7820              LDRB     r0,[r4,#0]            ;2406  ; kb_start
002772  2801              CMP      r0,#1                 ;2406
002774  d032              BEQ      |L1.10204|
                  |L1.10102|
002776  f9b60002          LDRSH    r0,[r6,#2]            ;2410  ; bat
00277a  28c8              CMP      r0,#0xc8              ;2410
00277c  dd04              BLE      |L1.10120|
00277e  7025              STRB     r5,[r4,#0]            ;2412
002780  2100              MOVS     r1,#0                 ;2413
002782  4608              MOV      r0,r1                 ;2413
002784  f7fffffe          BL       avar_bat_hndl
                  |L1.10120|
002788  f9b80002          LDRSH    r0,[r8,#2]            ;2416  ; ibat
00278c  f9b71002          LDRSH    r1,[r7,#2]            ;2416  ; ibat_
002790  4408              ADD      r0,r0,r1              ;2416
002792  f9b91000          LDRSH    r1,[r9,#0]            ;2416  ; IKB
002796  4288              CMP      r0,r1                 ;2416
002798  da02              BGE      |L1.10144|
00279a  7860              LDRB     r0,[r4,#1]            ;2416  ; kb_start
00279c  2801              CMP      r0,#1                 ;2416
00279e  d020              BEQ      |L1.10210|
                  |L1.10144|
0027a0  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2420  ; bat
0027a4  28c8              CMP      r0,#0xc8              ;2420
0027a6  dd04              BLE      |L1.10162|
0027a8  7065              STRB     r5,[r4,#1]            ;2422
0027aa  2100              MOVS     r1,#0                 ;2423
0027ac  2001              MOVS     r0,#1                 ;2423
0027ae  f7fffffe          BL       avar_bat_hndl
                  |L1.10162|
0027b2  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2426  ; ibat_ips
0027b6  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2426  ; ibat_ips_
0027ba  4408              ADD      r0,r0,r1              ;2426
0027bc  f9b91000          LDRSH    r1,[r9,#0]            ;2426  ; IKB
0027c0  4288              CMP      r0,r1                 ;2426
0027c2  f6bfaf59          BGE      |L1.9848|
0027c6  f89a001d          LDRB     r0,[r10,#0x1d]        ;2426  ; kb_start_ips
0027ca  2801              CMP      r0,#1                 ;2426
0027cc  d1b1              BNE      |L1.10034|
0027ce  48dc              LDR      r0,|L1.11072|
0027d0  8800              LDRH     r0,[r0,#0]            ;2428  ; KB_ALGORITM
0027d2  2802              CMP      r0,#2                 ;2428
0027d4  d008              BEQ      |L1.10216|
0027d6  f88ab01c          STRB     r11,[r10,#0x1c]       ;2435
                  |L1.10202|
0027da  e740              B        |L1.9822|
                  |L1.10204|
0027dc  f88ab01c          STRB     r11,[r10,#0x1c]       ;2408
0027e0  e7d2              B        |L1.10120|
                  |L1.10210|
0027e2  f88ab01c          STRB     r11,[r10,#0x1c]       ;2418
0027e6  e7e4              B        |L1.10162|
                  |L1.10216|
0027e8  2001              MOVS     r0,#1                 ;2430
0027ea  f7fffffe          BL       avar_bat_ips_hndl
0027ee  f88a501d          STRB     r5,[r10,#0x1d]        ;2431
0027f2  e734              B        |L1.9822|
                  |L1.10228|
0027f4  7f08              LDRB     r0,[r1,#0x1c]         ;2442  ; kb_full_ver
0027f6  4688              MOV      r8,r1                 ;2442
0027f8  2800              CMP      r0,#0                 ;2442
0027fa  d0ee              BEQ      |L1.10202|
0027fc  230f              MOVS     r3,#0xf               ;2445
0027fe  2200              MOVS     r2,#0                 ;2445
002800  216e              MOVS     r1,#0x6e              ;2445
002802  20e1              MOVS     r0,#0xe1              ;2445
002804  f7fffffe          BL       mess_send
002808  f9b60008          LDRSH    r0,[r6,#8]            ;2447  ; bat
00280c  f7fffffe          BL       abs
002810  f9b91000          LDRSH    r1,[r9,#0]            ;2447  ; IKB
002814  4288              CMP      r0,r1                 ;2447
002816  dd07              BLE      |L1.10280|
002818  7820              LDRB     r0,[r4,#0]            ;2449  ; kb_start
00281a  2801              CMP      r0,#1                 ;2449
00281c  d104              BNE      |L1.10280|
00281e  7025              STRB     r5,[r4,#0]            ;2451
002820  2100              MOVS     r1,#0                 ;2452
002822  4608              MOV      r0,r1                 ;2452
002824  f7fffffe          BL       avar_bat_hndl
                  |L1.10280|
002828  f9b60054          LDRSH    r0,[r6,#0x54]         ;2456  ; bat
00282c  f7fffffe          BL       abs
002830  f9b91000          LDRSH    r1,[r9,#0]            ;2456  ; IKB
002834  4288              CMP      r0,r1                 ;2456
002836  dd06              BLE      |L1.10310|
002838  7860              LDRB     r0,[r4,#1]            ;2458  ; kb_start
00283a  2801              CMP      r0,#1                 ;2458
00283c  d103              BNE      |L1.10310|
00283e  7065              STRB     r5,[r4,#1]            ;2460
002840  2100              MOVS     r1,#0                 ;2461
002842  f7fffffe          BL       avar_bat_hndl
                  |L1.10310|
002846  f9ba0000          LDRSH    r0,[r10,#0]           ;2465  ; Ib_ips_termokompensat
00284a  f7fffffe          BL       abs
00284e  f9b91000          LDRSH    r1,[r9,#0]            ;2465  ; IKB
002852  4288              CMP      r0,r1                 ;2465
002854  dd08              BLE      |L1.10344|
002856  f898001d          LDRB     r0,[r8,#0x1d]         ;2467  ; kb_start_ips
00285a  2801              CMP      r0,#1                 ;2467
00285c  d104              BNE      |L1.10344|
00285e  f888501d          STRB     r5,[r8,#0x1d]         ;2469
002862  2000              MOVS     r0,#0                 ;2470
002864  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10344|
002868  7820              LDRB     r0,[r4,#0]            ;2475  ; kb_start
00286a  b930              CBNZ     r0,|L1.10362|
00286c  7860              LDRB     r0,[r4,#1]            ;2475  ; kb_start
00286e  b920              CBNZ     r0,|L1.10362|
002870  f898001d          LDRB     r0,[r8,#0x1d]         ;2475  ; kb_start_ips
002874  b908              CBNZ     r0,|L1.10362|
002876  f888501c          STRB     r5,[r8,#0x1c]         ;2477
                  |L1.10362|
00287a  20e6              MOVS     r0,#0xe6              ;2480
00287c  f7fffffe          BL       mess_find
002880  b118              CBZ      r0,|L1.10378|
002882  48b0              LDR      r0,|L1.11076|
002884  6800              LDR      r0,[r0,#0]            ;2480  ; mess_data
002886  28e7              CMP      r0,#0xe7              ;2480
002888  d00a              BEQ      |L1.10400|
                  |L1.10378|
00288a  48af              LDR      r0,|L1.11080|
00288c  49af              LDR      r1,|L1.11084|
00288e  f9b00000          LDRSH    r0,[r0,#0]            ;2480  ; USIGN
002892  f9b11000          LDRSH    r1,[r1,#0]            ;2480  ; load_U
002896  eb000080          ADD      r0,r0,r0,LSL #2       ;2480
00289a  ebb10f40          CMP      r1,r0,LSL #1          ;2480
                  |L1.10398|
00289e  da9c              BGE      |L1.10202|
                  |L1.10400|
0028a0  f888501c          STRB     r5,[r8,#0x1c]         ;2482
0028a4  7820              LDRB     r0,[r4,#0]            ;2483  ; kb_start
0028a6  4daa              LDR      r5,|L1.11088|
0028a8  2801              CMP      r0,#1                 ;2483
0028aa  d10f              BNE      |L1.10444|
0028ac  f9b90000          LDRSH    r0,[r9,#0]            ;2483  ; IKB
0028b0  f9b51000          LDRSH    r1,[r5,#0]            ;2483  ; load_I
0028b4  0040              LSLS     r0,r0,#1              ;2483
0028b6  fb90f0f7          SDIV     r0,r0,r7              ;2483
0028ba  4288              CMP      r0,r1                 ;2483
0028bc  da06              BGE      |L1.10444|
0028be  f896003d          LDRB     r0,[r6,#0x3d]         ;2483  ; bat
0028c2  07c0              LSLS     r0,r0,#31             ;2483
0028c4  d102              BNE      |L1.10444|
0028c6  2101              MOVS     r1,#1                 ;2483
0028c8  f7fffffe          BL       avar_bat_hndl
                  |L1.10444|
0028cc  7860              LDRB     r0,[r4,#1]            ;2484  ; kb_start
0028ce  2801              CMP      r0,#1                 ;2484
0028d0  d110              BNE      |L1.10484|
0028d2  f9b90000          LDRSH    r0,[r9,#0]            ;2484  ; IKB
0028d6  f9b51000          LDRSH    r1,[r5,#0]            ;2484  ; load_I
0028da  0040              LSLS     r0,r0,#1              ;2484
0028dc  fb90f0f7          SDIV     r0,r0,r7              ;2484
0028e0  4288              CMP      r0,r1                 ;2484
0028e2  da07              BGE      |L1.10484|
0028e4  f8960089          LDRB     r0,[r6,#0x89]         ;2484  ; bat
0028e8  07c0              LSLS     r0,r0,#31             ;2484
0028ea  d103              BNE      |L1.10484|
0028ec  2101              MOVS     r1,#1                 ;2484
0028ee  4608              MOV      r0,r1                 ;2484
0028f0  f7fffffe          BL       avar_bat_hndl
                  |L1.10484|
0028f4  f898001d          LDRB     r0,[r8,#0x1d]         ;2486  ; kb_start_ips
0028f8  2801              CMP      r0,#1                 ;2486
                  |L1.10490|
0028fa  f47faebd          BNE      |L1.9848|
0028fe  f9b90000          LDRSH    r0,[r9,#0]            ;2486  ; IKB
002902  f9b51000          LDRSH    r1,[r5,#0]            ;2486  ; load_I
002906  0040              LSLS     r0,r0,#1              ;2486
002908  fb90f0f7          SDIV     r0,r0,r7              ;2486
00290c  4288              CMP      r0,r1                 ;2486
00290e  dac6              BGE      |L1.10398|
002910  4890              LDR      r0,|L1.11092|
002912  f890003d          LDRB     r0,[r0,#0x3d]         ;2486  ; bat_ips
002916  07c0              LSLS     r0,r0,#31             ;2486
002918  d1ef              BNE      |L1.10490|
00291a  e8bd5ff0          POP      {r4-r12,lr}           ;2486
00291e  2001              MOVS     r0,#1                 ;2486
002920  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2492   
                          ENDP

                  samokalibr_hndl PROC
;;;2501   //-----------------------------------------------
;;;2502   void samokalibr_hndl(void)
002924  4770              BX       lr
;;;2503   {
;;;2504   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2505   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2506   
;;;2507   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2508   	{
;;;2509   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2510   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2511   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2512   	} 
;;;2513   
;;;2514   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2515   	{
;;;2516   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2517   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2518   	
;;;2519   	}
;;;2520   #endif	 	
;;;2521   }
;;;2522   
                          ENDP

                  ubat_old_drv PROC
;;;2525   //-----------------------------------------------
;;;2526   void ubat_old_drv(void)
002926  b510              PUSH     {r4,lr}
;;;2527   {        
;;;2528   bat_u_old_cnt++;
002928  4c8b              LDR      r4,|L1.11096|
00292a  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
00292c  f1000001          ADD      r0,r0,#1
002930  8020              STRH     r0,[r4,#0]
;;;2529   gran_ring(&bat_u_old_cnt,0,8);
002932  f04f0208          MOV      r2,#8
002936  f04f0100          MOV      r1,#0
00293a  4620              MOV      r0,r4
00293c  f7fffffe          BL       gran_ring
;;;2530   
;;;2531   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002940  4986              LDR      r1,|L1.11100|
002942  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002946  eb010040          ADD      r0,r1,r0,LSL #1
00294a  884a              LDRH     r2,[r1,#2]  ; bat
00294c  8402              STRH     r2,[r0,#0x20]
;;;2532   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
00294e  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002952  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2533   }
002956  bd10              POP      {r4,pc}
;;;2534   
                          ENDP

                  unet_drv PROC
;;;2535   //-----------------------------------------------
;;;2536   void unet_drv(void)
002958  e92d41f0          PUSH     {r4-r8,lr}
;;;2537   {
;;;2538   if(net_av_2min_timer)net_av_2min_timer--;
00295c  4980              LDR      r1,|L1.11104|
00295e  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002962  b110              CBZ      r0,|L1.10602|
002964  f1a00001          SUB      r0,r0,#1
002968  8008              STRH     r0,[r1,#0]
                  |L1.10602|
;;;2539   
;;;2540   if(net_U<UMN)
00296a  f8df81f8          LDR      r8,|L1.11108|
00296e  487e              LDR      r0,|L1.11112|
;;;2541   	{
;;;2542   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002970  4a7f              LDR      r2,|L1.11120|
;;;2543   		{
;;;2544   		unet_drv_cnt++;
;;;2545   		if(unet_drv_cnt>=10)
;;;2546   			{
;;;2547   			net_Ustore=net_U;
;;;2548   		 	avar_unet_hndl(1);
;;;2549   			
;;;2550   			}
;;;2551   		}
;;;2552   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2553   
;;;2554   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2555   	}
;;;2556   
;;;2557   else if(net_U>UMN)
;;;2558   	{                 
;;;2559   	if(unet_drv_cnt)
;;;2560   		{
;;;2561   		unet_drv_cnt--;
;;;2562   		if(unet_drv_cnt<=0)
;;;2563   			{
;;;2564   			avar_unet_hndl(0);
;;;2565   			avar_bps_reset_cnt=10;
002972  4c72              LDR      r4,|L1.11068|
002974  f9b81000          LDRSH    r1,[r8,#0]            ;2540  ; net_U
002978  f9b03000          LDRSH    r3,[r0,#0]            ;2540  ; UMN
00297c  4e7b              LDR      r6,|L1.11116|
00297e  f9920000          LDRSB    r0,[r2,#0]            ;2542
002982  250a              MOVS     r5,#0xa               ;2552
002984  3c94              SUBS     r4,r4,#0x94
002986  4299              CMP      r1,r3                 ;2540
002988  da1c              BGE      |L1.10692|
00298a  4f7a              LDR      r7,|L1.11124|
00298c  280a              CMP      r0,#0xa               ;2542
00298e  da0e              BGE      |L1.10670|
002990  f9b63000          LDRSH    r3,[r6,#0]            ;2542  ; main_1Hz_cnt
002994  2b0f              CMP      r3,#0xf               ;2542
002996  dd0a              BLE      |L1.10670|
002998  f1000001          ADD      r0,r0,#1              ;2544
00299c  b240              SXTB     r0,r0                 ;2544
00299e  7010              STRB     r0,[r2,#0]            ;2544
0029a0  280a              CMP      r0,#0xa               ;2545
0029a2  db07              BLT      |L1.10676|
0029a4  8039              STRH     r1,[r7,#0]            ;2547
0029a6  2001              MOVS     r0,#1                 ;2548
0029a8  f7fffffe          BL       avar_unet_hndl
0029ac  e002              B        |L1.10676|
                  |L1.10670|
0029ae  280a              CMP      r0,#0xa               ;2552
0029b0  db00              BLT      |L1.10676|
0029b2  7015              STRB     r5,[r2,#0]            ;2552
                  |L1.10676|
0029b4  f9b80000          LDRSH    r0,[r8,#0]            ;2554  ; net_U
0029b8  f9b71000          LDRSH    r1,[r7,#0]            ;2554  ; net_Ustore
0029bc  4288              CMP      r0,r1                 ;2554
0029be  da0e              BGE      |L1.10718|
0029c0  8038              STRH     r0,[r7,#0]            ;2554
0029c2  e00c              B        |L1.10718|
                  |L1.10692|
0029c4  dd0b              BLE      |L1.10718|
0029c6  b150              CBZ      r0,|L1.10718|
0029c8  f1a00001          SUB      r0,r0,#1              ;2561
0029cc  b240              SXTB     r0,r0                 ;2561
0029ce  7010              STRB     r0,[r2,#0]            ;2561
0029d0  2800              CMP      r0,#0                 ;2562
0029d2  dc04              BGT      |L1.10718|
0029d4  2000              MOVS     r0,#0                 ;2564
0029d6  f7fffffe          BL       avar_unet_hndl
0029da  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10718|
;;;2566   			}
;;;2567   		}
;;;2568   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2569   	
;;;2570   	}
;;;2571   //#ifdef UKU_6U || UKU_ZVU
;;;2572   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2573   if(net_Umax>UMAXN) //o_11
0029de  f8df8198          LDR      r8,|L1.11128|
0029e2  4866              LDR      r0,|L1.11132|
;;;2574   	{
;;;2575   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
0029e4  4a66              LDR      r2,|L1.11136|
0029e6  f9b81000          LDRSH    r1,[r8,#0]            ;2573  ; net_Umax
0029ea  f9b00000          LDRSH    r0,[r0,#0]            ;2573  ; UMAXN
0029ee  4281              CMP      r1,r0                 ;2573
0029f0  dd1e              BLE      |L1.10800|
0029f2  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
;;;2576   		{
;;;2577   		unet_max_drv_cnt++;
;;;2578   		if(unet_max_drv_cnt>=10)
;;;2579   			{
;;;2580   			net_Ustore_max=net_Umax; //o_11
0029f6  4f63              LDR      r7,|L1.11140|
0029f8  280a              CMP      r0,#0xa               ;2575
0029fa  da0e              BGE      |L1.10778|
0029fc  f9b63000          LDRSH    r3,[r6,#0]            ;2575  ; main_1Hz_cnt
002a00  2b0f              CMP      r3,#0xf               ;2575
002a02  dd0a              BLE      |L1.10778|
002a04  f1000001          ADD      r0,r0,#1              ;2577
002a08  b240              SXTB     r0,r0                 ;2577
002a0a  7010              STRB     r0,[r2,#0]            ;2577
002a0c  280a              CMP      r0,#0xa               ;2578
002a0e  db07              BLT      |L1.10784|
002a10  8039              STRH     r1,[r7,#0]
;;;2581   		 	avar_unet_hndl(2);
002a12  2002              MOVS     r0,#2
002a14  f7fffffe          BL       avar_unet_hndl
002a18  e002              B        |L1.10784|
                  |L1.10778|
;;;2582   			
;;;2583   			}
;;;2584   		}
;;;2585   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002a1a  280a              CMP      r0,#0xa
002a1c  db00              BLT      |L1.10784|
002a1e  7015              STRB     r5,[r2,#0]
                  |L1.10784|
;;;2586   
;;;2587   	if(net_Umax>net_Ustore_max) net_Ustore_max=net_Umax; //o_11	
002a20  f9b80000          LDRSH    r0,[r8,#0]  ; net_Umax
002a24  f9b71000          LDRSH    r1,[r7,#0]  ; net_Ustore_max
002a28  4288              CMP      r0,r1
002a2a  dd10              BLE      |L1.10830|
002a2c  8038              STRH     r0,[r7,#0]
002a2e  e00e              B        |L1.10830|
                  |L1.10800|
;;;2588   	}
;;;2589   
;;;2590   else if(net_Umax<UMAXN) //o_11
002a30  da0d              BGE      |L1.10830|
;;;2591   	{                 
;;;2592   	if(unet_max_drv_cnt)
002a32  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002a36  b150              CBZ      r0,|L1.10830|
;;;2593   		{
;;;2594   		unet_max_drv_cnt--;
002a38  f1a00001          SUB      r0,r0,#1
002a3c  b240              SXTB     r0,r0
002a3e  7010              STRB     r0,[r2,#0]
;;;2595   		if(unet_max_drv_cnt<=0)
002a40  2800              CMP      r0,#0
002a42  dc04              BGT      |L1.10830|
;;;2596   			{
;;;2597   			avar_unet_hndl(4); //o_11
002a44  2004              MOVS     r0,#4
002a46  f7fffffe          BL       avar_unet_hndl
;;;2598   			avar_bps_reset_cnt=10;
002a4a  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10830|
;;;2599   			}
;;;2600   		}
;;;2601   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2602   	
;;;2603   	}
;;;2604   #endif /*UKU_6U*/
;;;2605   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a4e  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002a52  2800              CMP      r0,#0
002a54  d003              BEQ      |L1.10846|
002a56  f1a00001          SUB      r0,r0,#1
002a5a  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10846|
;;;2606   }
002a5e  e8bd81f0          POP      {r4-r8,pc}
;;;2607   
                          ENDP

                  matemat PROC
;;;2609   //-----------------------------------------------
;;;2610   void matemat(void)
002a62  e92d5fff          PUSH     {r0-r12,lr}
;;;2611   {
;;;2612   //signed short temp_SS;
;;;2613   signed long temp_SL/*,temp_SL_*/;
;;;2614   char /*temp,*/i;
;;;2615   //signed short temp_SS;
;;;2616   
;;;2617   #ifdef UKU_MGTS
;;;2618   //напряжение сети
;;;2619   temp_SL=(signed long)net_buff_;
;;;2620   temp_SL*=Kunet;
;;;2621   temp_SL/=110000L;
;;;2622   net_U=(signed short)temp_SL;
;;;2623   #endif
;;;2624   
;;;2625   #ifdef UKU_RSTKM
;;;2626   //напряжение сети
;;;2627   temp_SL=(signed long)net_buff_;
;;;2628   temp_SL*=Kunet;
;;;2629   temp_SL/=110000L;
;;;2630   net_U=(signed short)temp_SL;
;;;2631   #endif
;;;2632   
;;;2633   #ifdef UKU_3U
;;;2634   //напряжение сети
;;;2635   temp_SL=(signed long)net_buff_;
;;;2636   temp_SL*=Kunet;
;;;2637   temp_SL/=36000L;
;;;2638   net_U=(signed short)temp_SL;
;;;2639   #endif
;;;2640   
;;;2641   #ifdef UKU_6U
;;;2642   //напряжение сети
;;;2643   
;;;2644   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2645   	{
;;;2646   
;;;2647   	if(bps[11]._device==dNET_METR)
;;;2648   		{
;;;2649   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2650   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2651   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2652   
;;;2653   		temp_SL=(signed long)net_metr_buff_[0];
;;;2654   		temp_SL*=KunetA;
;;;2655   		temp_SL/=6000L;
;;;2656   		net_Ua=(signed short)temp_SL;
;;;2657   	
;;;2658   		temp_SL=(signed long)net_metr_buff_[1];
;;;2659   		temp_SL*=KunetB;
;;;2660   		temp_SL/=6000L;
;;;2661   		net_Ub=(signed short)temp_SL;
;;;2662   	
;;;2663   		temp_SL=(signed long)net_metr_buff_[2];
;;;2664   		temp_SL*=KunetC;
;;;2665   		temp_SL/=6000L;
;;;2666   		net_Uc=(signed short)temp_SL;
;;;2667   		}
;;;2668   	else
;;;2669   		{
;;;2670   		temp_SL=(signed long)net_buff_;
;;;2671   		temp_SL*=KunetA;
;;;2672   		temp_SL/=110000L;
;;;2673   		net_Ua=(signed short)temp_SL;
;;;2674   	
;;;2675   		temp_SL=(signed long)adc_buff_[3];
;;;2676   		temp_SL*=KunetB;
;;;2677   		temp_SL/=6000L;
;;;2678   		net_Ub=(signed short)temp_SL;
;;;2679   	
;;;2680   		temp_SL=(signed long)adc_buff_[10];
;;;2681   		temp_SL*=KunetC;
;;;2682   		temp_SL/=6000L;
;;;2683   		net_Uc=(signed short)temp_SL;
;;;2684   		}
;;;2685   
;;;2686   	net_U=net_Ua;
;;;2687   	if(net_Ub<net_U)net_U=net_Ub;
;;;2688   	if(net_Uc<net_U)net_U=net_Uc;
;;;2689   	//o_10_s
;;;2690   	net_Umax=net_Ua;
;;;2691   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2692   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2693   	//o_10_e
;;;2694   	}
;;;2695   else 
;;;2696   	{
;;;2697   	temp_SL=(signed long)net_buff_;
;;;2698   	temp_SL*=Kunet;
;;;2699   	temp_SL/=110000L;
;;;2700   	net_U=(signed short)temp_SL;
;;;2701   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2702   	}
;;;2703   
;;;2704   
;;;2705   
;;;2706   
;;;2707   #endif
;;;2708   
;;;2709   #ifdef UKU_GLONASS
;;;2710   //напряжение сети
;;;2711   temp_SL=(signed long)net_buff_;
;;;2712   temp_SL*=Kunet;
;;;2713   temp_SL/=110000L;
;;;2714   net_U=(signed short)temp_SL;
;;;2715   #endif
;;;2716   
;;;2717   #ifdef UKU_KONTUR
;;;2718   //напряжение сети
;;;2719   temp_SL=(signed long)net_buff_;
;;;2720   temp_SL*=Kunet;
;;;2721   temp_SL/=110000L;
;;;2722   net_U=(signed short)temp_SL;
;;;2723   #endif
;;;2724   
;;;2725   #ifdef IPS_SGEP_GAZPROM
;;;2726   //напряжение сети
;;;2727   temp_SL=(signed long)net_buff_;
;;;2728   temp_SL*=Kunet;
;;;2729   temp_SL/=110000L;
;;;2730   net_U=(signed short)temp_SL;
;;;2731   #endif
;;;2732   
;;;2733   #ifdef UKU_220_V2
;;;2734   //напряжение сети
;;;2735   
;;;2736   if(AUSW_MAIN==22033)
;;;2737   	{
;;;2738   	temp_SL=(signed long)net_buff_;
;;;2739   	temp_SL*=KunetA;
;;;2740   	temp_SL/=6000L;
;;;2741   	net_Ua=(signed short)temp_SL;
;;;2742   
;;;2743   	temp_SL=(signed long)adc_buff_[3];
;;;2744   	temp_SL*=KunetB;
;;;2745   	temp_SL/=6000L;
;;;2746   	net_Ub=(signed short)temp_SL;
;;;2747   
;;;2748   	temp_SL=(signed long)adc_buff_[10];
;;;2749   	temp_SL*=KunetC;
;;;2750   	temp_SL/=6000L;
;;;2751   	net_Uc=(signed short)temp_SL;
;;;2752   
;;;2753   	net_U=net_Ua;
;;;2754   	if(net_Ub<net_U)net_U=net_Ub;
;;;2755   	if(net_Uc<net_U)net_U=net_Uc;
;;;2756   	}
;;;2757   else
;;;2758   	{
;;;2759   	temp_SL=(signed long)net_buff_;
;;;2760   	temp_SL*=Kunet;
;;;2761   	temp_SL/=5000L;
;;;2762   	net_U=(signed short)temp_SL;
;;;2763   	}
;;;2764   #endif
;;;2765   
;;;2766   
;;;2767   #ifdef UKU_220
;;;2768   //напряжение сети
;;;2769   
;;;2770   if(AUSW_MAIN==22035)
;;;2771   	{
;;;2772   	temp_SL=(signed long)net_buff_;
;;;2773   	temp_SL*=KunetA;
;;;2774   	temp_SL/=6000L;
;;;2775   	net_Ua=(signed short)temp_SL;
;;;2776   
;;;2777   	temp_SL=(signed long)adc_buff_[3];
;;;2778   	temp_SL*=KunetB;
;;;2779   	temp_SL/=6000L;
;;;2780   	net_Ub=(signed short)temp_SL;
;;;2781   
;;;2782   	temp_SL=(signed long)adc_buff_[10];
;;;2783   	temp_SL*=KunetC;
;;;2784   	temp_SL/=6000L;
;;;2785   	net_Uc=(signed short)temp_SL;
;;;2786   
;;;2787   	net_U=net_Ua;
;;;2788   	if(net_Ub<net_U)net_U=net_Ub;
;;;2789   	if(net_Uc<net_U)net_U=net_Uc;
;;;2790   	}
;;;2791   else
;;;2792   	{
;;;2793   	temp_SL=(signed long)net_buff_;
;;;2794   	temp_SL*=Kunet;
;;;2795   	#ifdef _ACDC_
;;;2796   	temp_SL/=500L;
;;;2797   	#else
;;;2798   	temp_SL/=5000L;
;;;2799   	#endif
;;;2800   	net_U=(signed short)temp_SL;
;;;2801   	
;;;2802   	}
;;;2803   #endif
;;;2804   
;;;2805   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2806   //напряжение сети
;;;2807   
;;;2808   
;;;2809   	if(bps[11]._device==dNET_METR)
002a66  4848              LDR      r0,|L1.11144|
;;;2810   		{
;;;2811   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2812   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2813   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2814   
;;;2815   		temp_SL=(signed long)net_metr_buff_[2];
;;;2816   		temp_SL*=KunetA;
002a68  4a48              LDR      r2,|L1.11148|
;;;2817   		temp_SL/=6000L;
;;;2818   		net_Ua=(signed short)temp_SL;
;;;2819   	
;;;2820   		temp_SL=(signed long)net_metr_buff_[1];
;;;2821   		temp_SL*=KunetB;
;;;2822   		temp_SL/=6000L;
;;;2823   		net_Ub=(signed short)temp_SL;
;;;2824   	
;;;2825   		temp_SL=(signed long)net_metr_buff_[0];
;;;2826   		temp_SL*=KunetC;
002a6a  4b4a              LDR      r3,|L1.11156|
002a6c  f890044c          LDRB     r0,[r0,#0x44c]        ;2809  ; bps
002a70  9003              STR      r0,[sp,#0xc]          ;2816
002a72  4947              LDR      r1,|L1.11152|
;;;2827   		temp_SL/=6000L;
;;;2828   		net_Uc=(signed short)temp_SL;
;;;2829   
;;;2830   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2831   
;;;2832   		net_U=net_Ua;
;;;2833   		if(net_Ub<net_U)net_U=net_Ub;
;;;2834   		if(net_Uc<net_U)net_U=net_Uc;
;;;2835   		//o_10_s
;;;2836   		net_Umax=net_Ua;
;;;2837   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2838   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2839   		//o_10_e
;;;2840   		}
;;;2841   	  else if(AUSW_MAIN==22033)
;;;2842   	{
;;;2843   	temp_SL=(signed long)net_buff_;
002a74  4e31              LDR      r6,|L1.11068|
002a76  f9b28000          LDRSH    r8,[r2,#0]            ;2816
002a7a  f9b39000          LDRSH    r9,[r3,#0]            ;2826
002a7e  f9b12000          LDRSH    r2,[r1,#0]            ;2821
002a82  f8dfc114          LDR      r12,|L1.11160|
002a86  4d45              LDR      r5,|L1.11164|
002a88  4c45              LDR      r4,|L1.11168|
002a8a  4b3b              LDR      r3,|L1.11128|
002a8c  3e94              SUBS     r6,r6,#0x94
002a8e  2807              CMP      r0,#7                 ;2809
002a90  d040              BEQ      |L1.11028|
002a92  4631              MOV      r1,r6
;;;2844   	temp_SL*=KunetA;
;;;2845   	temp_SL/=4000L;
;;;2846   	net_Ua=(signed short)temp_SL;
;;;2847   
;;;2848   	temp_SL=(signed long)adc_buff_[3];
002a94  f8dfa110          LDR      r10,|L1.11176|
002a98  8f4f              LDRH     r7,[r1,#0x3a]         ;2843
002a9a  493c              LDR      r1,|L1.11148|
002a9c  4a3c              LDR      r2,|L1.11152|
002a9e  f2417970          MOV      r9,#0x1770            ;2817
002aa2  f9b11000          LDRSH    r1,[r1,#0]            ;2816
002aa6  f9b22000          LDRSH    r2,[r2,#0]            ;2821
002aaa  434f              MULS     r7,r1,r7              ;2844
002aac  f9ba1006          LDRSH    r1,[r10,#6]
002ab0  483c              LDR      r0,|L1.11172|
;;;2849   	temp_SL*=KunetB;
002ab2  4351              MULS     r1,r2,r1
;;;2850   	temp_SL/=6000L;
002ab4  fb91f1f9          SDIV     r1,r1,r9
;;;2851   	net_Ub=(signed short)temp_SL;
002ab8  b20a              SXTH     r2,r1
;;;2852   
;;;2853   	temp_SL=(signed long)adc_buff_[10];
002aba  f9ba1014          LDRSH    r1,[r10,#0x14]
002abe  f8dfa0d4          LDR      r10,|L1.11156|
002ac2  8800              LDRH     r0,[r0,#0]            ;2841  ; AUSW_MAIN
002ac4  f2456811          MOV      r8,#0x5611            ;2841
002ac8  f9baa000          LDRSH    r10,[r10,#0]          ;2826
002acc  4540              CMP      r0,r8                 ;2841
;;;2854   	temp_SL*=KunetC;
002ace  fb01f10a          MUL      r1,r1,r10
;;;2855   	temp_SL/=6000L;
002ad2  fb91f1f9          SDIV     r1,r1,r9
;;;2856   	net_Uc=(signed short)temp_SL;
002ad6  b209              SXTH     r1,r1
002ad8  d12f              BNE      |L1.11066|
002ada  f44f607a          MOV      r0,#0xfa0             ;2845
002ade  fb97f0f0          SDIV     r0,r7,r0              ;2845
002ae2  b200              SXTH     r0,r0                 ;2846
002ae4  f8ac0000          STRH     r0,[r12,#0]           ;2846
002ae8  802a              STRH     r2,[r5,#0]            ;2851
002aea  8021              STRH     r1,[r4,#0]
;;;2857   
;;;2858   	net_U=net_Ua;
002aec  4c1d              LDR      r4,|L1.11108|
002aee  8020              STRH     r0,[r4,#0]
;;;2859   	if(net_Ub<net_U)net_U=net_Ub;
002af0  4282              CMP      r2,r0
002af2  da00              BGE      |L1.10998|
002af4  8022              STRH     r2,[r4,#0]
                  |L1.10998|
;;;2860   	if(net_Uc<net_U)net_U=net_Uc;
002af6  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002afa  42a9              CMP      r1,r5
002afc  da00              BGE      |L1.11008|
002afe  8021              STRH     r1,[r4,#0]
                  |L1.11008|
;;;2861   	//o_10_s
;;;2862   	net_Umax=net_Ua;
002b00  8018              STRH     r0,[r3,#0]
;;;2863   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002b02  4282              CMP      r2,r0
002b04  dd00              BLE      |L1.11016|
002b06  801a              STRH     r2,[r3,#0]
                  |L1.11016|
;;;2864   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002b08  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002b0c  4281              CMP      r1,r0
002b0e  dd00              BLE      |L1.11026|
002b10  8019              STRH     r1,[r3,#0]
                  |L1.11026|
002b12  e0d1              B        |L1.11448|
                  |L1.11028|
002b14  4925              LDR      r1,|L1.11180|
002b16  7808              LDRB     r0,[r1,#0]            ;2811  ; bps
002b18  784f              LDRB     r7,[r1,#1]            ;2811  ; bps
002b1a  eb002007          ADD      r0,r0,r7,LSL #8       ;2811
002b1e  4f07              LDR      r7,|L1.11068|
002b20  b280              UXTH     r0,r0                 ;2811
002b22  f1070758          ADD      r7,r7,#0x58           ;2811
002b26  8038              STRH     r0,[r7,#0]            ;2811
002b28  f891a002          LDRB     r10,[r1,#2]           ;2812  ; bps
002b2c  f891b003          LDRB     r11,[r1,#3]           ;2812  ; bps
002b30  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2812
002b34  fa1ffa8a          UXTH     r10,r10               ;2812
002b38  e03a              B        |L1.11184|
                  |L1.11066|
002b3a  e074              B        |L1.11302|
                  |L1.11068|
                          DCD      ||area_number.25||+0x94
                  |L1.11072|
                          DCD      KB_ALGORITM
                  |L1.11076|
                          DCD      mess_data
                  |L1.11080|
                          DCD      USIGN
                  |L1.11084|
                          DCD      load_U
                  |L1.11088|
                          DCD      load_I
                  |L1.11092|
                          DCD      bat_ips
                  |L1.11096|
                          DCD      bat_u_old_cnt
                  |L1.11100|
                          DCD      bat
                  |L1.11104|
                          DCD      net_av_2min_timer
                  |L1.11108|
                          DCD      net_U
                  |L1.11112|
                          DCD      UMN
                  |L1.11116|
                          DCD      main_1Hz_cnt
                  |L1.11120|
                          DCD      unet_drv_cnt
                  |L1.11124|
                          DCD      net_Ustore
                  |L1.11128|
                          DCD      net_Umax
                  |L1.11132|
                          DCD      UMAXN
                  |L1.11136|
                          DCD      unet_max_drv_cnt
                  |L1.11140|
                          DCD      net_Ustore_max
                  |L1.11144|
                          DCD      bps
                  |L1.11148|
                          DCD      KunetA
                  |L1.11152|
                          DCD      KunetB
                  |L1.11156|
                          DCD      KunetC
                  |L1.11160|
                          DCD      net_Ua
                  |L1.11164|
                          DCD      net_Ub
                  |L1.11168|
                          DCD      net_Uc
                  |L1.11172|
                          DCD      AUSW_MAIN
                  |L1.11176|
                          DCD      ||.bss||+0x40c
                  |L1.11180|
                          DCD      bps+0x452
                  |L1.11184|
002bb0  f8a7a002          STRH     r10,[r7,#2]           ;2812
002bb4  f891b004          LDRB     r11,[r1,#4]           ;2813  ; bps
002bb8  f891e005          LDRB     lr,[r1,#5]            ;2813  ; bps
002bbc  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2813
002bc0  fa1ffb8b          UXTH     r11,r11               ;2813
002bc4  f8a7b004          STRH     r11,[r7,#4]           ;2813
002bc8  fb0bfb08          MUL      r11,r11,r8            ;2816
002bcc  f2417870          MOV      r8,#0x1770            ;2817
002bd0  fb9bf7f8          SDIV     r7,r11,r8             ;2817
002bd4  b23f              SXTH     r7,r7                 ;2818
002bd6  f8ac7000          STRH     r7,[r12,#0]           ;2818
002bda  fb0afa02          MUL      r10,r10,r2            ;2821
002bde  fb9af2f8          SDIV     r2,r10,r8             ;2822
002be2  b212              SXTH     r2,r2                 ;2823
002be4  802a              STRH     r2,[r5,#0]            ;2823
002be6  fb00f009          MUL      r0,r0,r9              ;2826
002bea  fb90f0f8          SDIV     r0,r0,r8              ;2827
002bee  b200              SXTH     r0,r0                 ;2828
002bf0  8020              STRH     r0,[r4,#0]            ;2828
002bf2  798c              LDRB     r4,[r1,#6]            ;2830  ; bps
002bf4  79c9              LDRB     r1,[r1,#7]            ;2830  ; bps
002bf6  eb042401          ADD      r4,r4,r1,LSL #8       ;2830
002bfa  49ff              LDR      r1,|L1.12280|
002bfc  800c              STRH     r4,[r1,#0]            ;2830
002bfe  49ff              LDR      r1,|L1.12284|
002c00  800f              STRH     r7,[r1,#0]            ;2832
002c02  42ba              CMP      r2,r7                 ;2833
002c04  da00              BGE      |L1.11272|
002c06  800a              STRH     r2,[r1,#0]            ;2833
                  |L1.11272|
002c08  f9b14000          LDRSH    r4,[r1,#0]            ;2834  ; net_U
002c0c  42a0              CMP      r0,r4                 ;2834
002c0e  da00              BGE      |L1.11282|
002c10  8008              STRH     r0,[r1,#0]            ;2834
                  |L1.11282|
002c12  801f              STRH     r7,[r3,#0]            ;2836
002c14  42ba              CMP      r2,r7                 ;2837
002c16  dd00              BLE      |L1.11290|
002c18  801a              STRH     r2,[r3,#0]            ;2837
                  |L1.11290|
002c1a  f9b31000          LDRSH    r1,[r3,#0]            ;2838  ; net_Umax
002c1e  4288              CMP      r0,r1                 ;2838
002c20  dd4a              BLE      |L1.11448|
002c22  8018              STRH     r0,[r3,#0]            ;2838
002c24  e048              B        |L1.11448|
                  |L1.11302|
;;;2865   	//o_10_e
;;;2866   	}
;;;2867   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002c26  f5a048ac          SUB      r8,r0,#0x5600
002c2a  f1b8082f          SUBS     r8,r8,#0x2f
002c2e  d00b              BEQ      |L1.11336|
002c30  f1180828          ADDS     r8,r8,#0x28
002c34  d008              BEQ      |L1.11336|
002c36  f1b80814          SUBS     r8,r8,#0x14
002c3a  d005              BEQ      |L1.11336|
002c3c  f1b80801          SUBS     r8,r8,#1
002c40  d002              BEQ      |L1.11336|
002c42  f118081a          ADDS     r8,r8,#0x1a
002c46  d11c              BNE      |L1.11394|
                  |L1.11336|
;;;2868   	{
;;;2869   	temp_SL=(signed long)net_buff_;
;;;2870   	temp_SL*=KunetA;
;;;2871   	temp_SL/=40000L;
002c48  f6494040          MOV      r0,#0x9c40
002c4c  fb97f0f0          SDIV     r0,r7,r0
;;;2872   	net_Ua=(signed short)temp_SL;
002c50  b200              SXTH     r0,r0
002c52  f8ac0000          STRH     r0,[r12,#0]
;;;2873   
;;;2874   	temp_SL=(signed long)adc_buff_[3];
;;;2875   	temp_SL*=KunetB;
;;;2876   	temp_SL/=6000L;
;;;2877   	net_Ub=(signed short)temp_SL;
002c56  802a              STRH     r2,[r5,#0]
;;;2878   
;;;2879   	temp_SL=(signed long)adc_buff_[10];
;;;2880   	temp_SL*=KunetC;
;;;2881   	temp_SL/=6000L;
;;;2882   	net_Uc=(signed short)temp_SL;
002c58  8021              STRH     r1,[r4,#0]
;;;2883   
;;;2884   	net_U=net_Ua;
002c5a  4ce8              LDR      r4,|L1.12284|
002c5c  8020              STRH     r0,[r4,#0]
;;;2885   	if(net_Ub<net_U)net_U=net_Ub;
002c5e  4282              CMP      r2,r0
002c60  da00              BGE      |L1.11364|
002c62  8022              STRH     r2,[r4,#0]
                  |L1.11364|
;;;2886   	if(net_Uc<net_U)net_U=net_Uc;
002c64  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002c68  42a9              CMP      r1,r5
002c6a  da00              BGE      |L1.11374|
002c6c  8021              STRH     r1,[r4,#0]
                  |L1.11374|
;;;2887   	//o_10_s
;;;2888   	net_Umax=net_Ua;
002c6e  8018              STRH     r0,[r3,#0]
;;;2889   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002c70  4282              CMP      r2,r0
002c72  dd00              BLE      |L1.11382|
002c74  801a              STRH     r2,[r3,#0]
                  |L1.11382|
;;;2890   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002c76  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002c7a  4281              CMP      r1,r0
002c7c  dd1c              BLE      |L1.11448|
002c7e  8019              STRH     r1,[r3,#0]
002c80  e01a              B        |L1.11448|
                  |L1.11394|
;;;2891   	//o_10_e
;;;2892   	}
;;;2893   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2894   	{
;;;2895   	temp_SL=(signed long)net_buff_;
;;;2896   	temp_SL*=Kunet;
002c82  49df              LDR      r1,|L1.12288|
002c84  f5a044aa          SUB      r4,r0,#0x5500         ;2893
002c88  f9b12000          LDRSH    r2,[r1,#0]
002c8c  49dd              LDR      r1,|L1.12292|
002c8e  8f49              LDRH     r1,[r1,#0x3a]         ;2843
002c90  4351              MULS     r1,r2,r1
002c92  3cfa              SUBS     r4,r4,#0xfa           ;2893
002c94  d001              BEQ      |L1.11418|
002c96  1e62              SUBS     r2,r4,#1              ;2893
002c98  d107              BNE      |L1.11434|
                  |L1.11418|
;;;2897   	temp_SL/=35000L;
002c9a  f64800b8          MOV      r0,#0x88b8
002c9e  fb91f0f0          SDIV     r0,r1,r0
;;;2898   	net_U=(signed short)temp_SL;
002ca2  49d6              LDR      r1,|L1.12284|
002ca4  8008              STRH     r0,[r1,#0]
;;;2899   	net_Umax=net_U; //o_10
002ca6  8018              STRH     r0,[r3,#0]
002ca8  e006              B        |L1.11448|
                  |L1.11434|
;;;2900   	}
;;;2901   else
;;;2902   	{
;;;2903   	temp_SL=(signed long)net_buff_;
;;;2904   	temp_SL*=Kunet;
;;;2905   	#ifdef _ACDC_
;;;2906   	temp_SL/=500L;
002caa  f44f70fa          MOV      r0,#0x1f4
002cae  fb91f0f0          SDIV     r0,r1,r0
;;;2907   	#else
;;;2908   	temp_SL/=5000L;
;;;2909   	#endif
;;;2910   	net_U=(signed short)temp_SL;
002cb2  49d2              LDR      r1,|L1.12284|
002cb4  8008              STRH     r0,[r1,#0]
;;;2911   	net_Umax=net_U; //o_10
002cb6  8018              STRH     r0,[r3,#0]
                  |L1.11448|
;;;2912   	
;;;2913   	}
;;;2914   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002cb8  9803              LDR      r0,[sp,#0xc]
002cba  2807              CMP      r0,#7
002cbc  d003              BEQ      |L1.11462|
002cbe  48d2              LDR      r0,|L1.12296|
002cc0  8801              LDRH     r1,[r0,#0]  ; net_F
002cc2  48cd              LDR      r0,|L1.12280|
002cc4  8001              STRH     r1,[r0,#0]
                  |L1.11462|
;;;2915   #endif
;;;2916   
;;;2917   #ifdef UKU_TELECORE2015
;;;2918   //напряжение сети
;;;2919   temp_SL=(signed long)net_buff_;
;;;2920   temp_SL*=Kunet;
;;;2921   temp_SL/=110000L;
;;;2922   net_U=(signed short)temp_SL;
;;;2923   #endif
;;;2924   
;;;2925   #ifdef UKU_TELECORE2017
;;;2926   //напряжение сети
;;;2927   temp_SL=(signed long)net_buff_;
;;;2928   temp_SL*=Kunet;
;;;2929   temp_SL/=110000L;
;;;2930   net_U=(signed short)temp_SL;
;;;2931   #endif
;;;2932   
;;;2933   
;;;2934   #ifdef UKU_FSO
;;;2935   //напряжение сети
;;;2936   if(NUMPHASE==1)
;;;2937   	{
;;;2938   	temp_SL=(signed long)net_buff_;
;;;2939   	temp_SL*=Kunet;
;;;2940   	temp_SL/=110000L;
;;;2941   	net_U=(signed short)temp_SL;
;;;2942   	net_Umax=net_U;
;;;2943   	}
;;;2944   else
;;;2945   	{
;;;2946   	temp_SL=(signed long)net_buff_;
;;;2947   	temp_SL*=KunetA;
;;;2948   	temp_SL/=40000L;
;;;2949   	net_Ua=(signed short)temp_SL;
;;;2950   
;;;2951   	temp_SL=(signed long)adc_buff_[3];
;;;2952   	temp_SL*=KunetB;
;;;2953   	temp_SL/=6000L;
;;;2954   	net_Ub=(signed short)temp_SL;
;;;2955   
;;;2956   	temp_SL=(signed long)adc_buff_[10];
;;;2957   	temp_SL*=KunetC;
;;;2958   	temp_SL/=6000L;
;;;2959   	net_Uc=(signed short)temp_SL;
;;;2960   
;;;2961   	net_U=net_Ua;
;;;2962   	if(net_Ub<net_U)net_U=net_Ub;
;;;2963   	if(net_Uc<net_U)net_U=net_Uc;
;;;2964   	//o_10_s
;;;2965   	net_Umax=net_Ua;
;;;2966   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2967   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2968   	}
;;;2969   #endif	//UKU_FSO
;;;2970   
;;;2971   //Напряжения батарей
;;;2972   temp_SL=(signed long)adc_buff_[0];
002cc6  4cd1              LDR      r4,|L1.12300|
002cc8  f9b41000          LDRSH    r1,[r4,#0]  ; adc_buff_
;;;2973   temp_SL*=Kubat[0];
002ccc  4ad0              LDR      r2,|L1.12304|
002cce  f9b20000          LDRSH    r0,[r2,#0]  ; Kubat
002cd2  4348              MULS     r0,r1,r0
;;;2974   temp_SL/=2000L;
002cd4  f44f68fa          MOV      r8,#0x7d0
002cd8  fb90f0f8          SDIV     r0,r0,r8
;;;2975   bat[0]._Ub=(signed short)temp_SL;
002cdc  4dcd              LDR      r5,|L1.12308|
002cde  8068              STRH     r0,[r5,#2]
;;;2976   
;;;2977   #ifdef UKU_220
;;;2978   //Напряжения батарей
;;;2979   temp_SL=(signed long)adc_buff_[0];
;;;2980   temp_SL*=Kubat[0];
;;;2981   temp_SL/=400L;
;;;2982   bat[0]._Ub=(signed short)temp_SL;
;;;2983   #endif
;;;2984   
;;;2985   #ifdef UKU_220_V2
;;;2986   //Напряжения батарей
;;;2987   temp_SL=(signed long)adc_buff_[0];
;;;2988   temp_SL*=Kubat[0];
;;;2989   temp_SL/=400L;
;;;2990   bat[0]._Ub=(signed short)temp_SL;
;;;2991   #endif
;;;2992   
;;;2993   //adc_buff_[4]=300;
;;;2994   
;;;2995   temp_SL=(signed long)adc_buff_[4];
002ce0  f9b40008          LDRSH    r0,[r4,#8]  ; adc_buff_
;;;2996   temp_SL*=Kubatm[0];
002ce4  4bcc              LDR      r3,|L1.12312|
002ce6  f9b31000          LDRSH    r1,[r3,#0]  ; Kubatm
002cea  fb01f100          MUL      r1,r1,r0
;;;2997   temp_SL/=700L;
002cee  f44f772f          MOV      r7,#0x2bc
002cf2  fb91f0f7          SDIV     r0,r1,r7
;;;2998   bat[0]._Ubm=(signed short)temp_SL;
002cf6  80a8              STRH     r0,[r5,#4]
;;;2999   
;;;3000   #ifdef UKU_KONTUR
;;;3001   temp_SL=(signed long)adc_buff_[4];
;;;3002   temp_SL*=Kubatm[0];
;;;3003   temp_SL/=2000L;
;;;3004   bat[0]._Ubm=(signed short)temp_SL;
;;;3005   #endif
;;;3006   
;;;3007   #ifdef UKU_6U
;;;3008   temp_SL=(signed long)adc_buff_[4];
;;;3009   temp_SL*=Kubatm[0];
;;;3010   temp_SL/=2000L;
;;;3011   bat[0]._Ubm=(signed short)temp_SL;
;;;3012   #endif
;;;3013   
;;;3014   temp_SL=(signed long)adc_buff_[12];
002cf8  f9b40018          LDRSH    r0,[r4,#0x18]  ; adc_buff_
;;;3015   temp_SL*=Kubat[1];
002cfc  f9b21002          LDRSH    r1,[r2,#2]  ; Kubat
002d00  fb01f100          MUL      r1,r1,r0
;;;3016   temp_SL/=2000L;
002d04  fb91f0f8          SDIV     r0,r1,r8
;;;3017   bat[1]._Ub=(signed short)temp_SL;
002d08  f8a5004e          STRH     r0,[r5,#0x4e]
;;;3018   
;;;3019   #ifdef UKU_220
;;;3020   temp_SL=(signed long)adc_buff_[12];
;;;3021   temp_SL*=Kubat[1];
;;;3022   temp_SL/=400L;
;;;3023   bat[1]._Ub=(signed short)temp_SL;
;;;3024   #endif
;;;3025   
;;;3026   #ifdef UKU_220_V2
;;;3027   temp_SL=(signed long)adc_buff_[12];
;;;3028   temp_SL*=Kubat[1];
;;;3029   temp_SL/=400L;
;;;3030   bat[1]._Ub=(signed short)temp_SL;
;;;3031   #endif
;;;3032   
;;;3033   //adc_buff_[1]=300;
;;;3034   
;;;3035   temp_SL=(signed long)adc_buff_[1];
002d0c  f9b41002          LDRSH    r1,[r4,#2]  ; adc_buff_
;;;3036   temp_SL*=Kubatm[1];
002d10  f9b30002          LDRSH    r0,[r3,#2]  ; Kubatm
002d14  fb00f001          MUL      r0,r0,r1
;;;3037   temp_SL/=700L;
002d18  fb90f0f7          SDIV     r0,r0,r7
;;;3038   bat[1]._Ubm=(signed short)temp_SL;
002d1c  f8a50050          STRH     r0,[r5,#0x50]
;;;3039   #ifdef UKU_KONTUR
;;;3040   temp_SL=(signed long)adc_buff_[1];
;;;3041   temp_SL*=Kubatm[1];
;;;3042   temp_SL/=2000L;
;;;3043   bat[1]._Ubm=(signed short)temp_SL;
;;;3044   #endif
;;;3045   #ifdef UKU_6U
;;;3046   temp_SL=(signed long)adc_buff_[1];
;;;3047   temp_SL*=Kubatm[1];
;;;3048   temp_SL/=2000L;
;;;3049   bat[1]._Ubm=(signed short)temp_SL;
;;;3050   #endif
;;;3051   
;;;3052   #ifdef UKU_TELECORE2015
;;;3053   temp_SL=(signed long)adc_buff_[2];
;;;3054   temp_SL*=Kubat[0];
;;;3055   temp_SL/=2000L;
;;;3056   bat[0]._Ub=(signed short)temp_SL;
;;;3057   #endif
;;;3058   
;;;3059   /*
;;;3060   //Токи батарей
;;;3061   if(!mess_find_unvol(MESS2MATEMAT))
;;;3062   	{
;;;3063   	temp_SL=(signed long)ad7705_buff_[0];
;;;3064   	temp_SL-=(signed long)Kibat0[0];
;;;3065   	temp_SL*=(signed long)Kibat1[0];
;;;3066   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3067   	else temp_SL/=1000L;
;;;3068   	bat[0]._Ib=(signed short)temp_SL;
;;;3069   
;;;3070   	temp_SL=(signed long)ad7705_buff_[1];
;;;3071   	temp_SL-=(signed long)Kibat0[1];
;;;3072   	temp_SL*=(signed long)Kibat1[1];
;;;3073   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3074   	else temp_SL/=1000L;
;;;3075   	bat[1]._Ib=(signed short)temp_SL;
;;;3076   	}
;;;3077   */
;;;3078   
;;;3079   
;;;3080   //Токи батарей
;;;3081   if(!mess_find_unvol(MESS2MATEMAT))
002d20  f04f00dc          MOV      r0,#0xdc
002d24  f7fffffe          BL       mess_find_unvol
;;;3082   	{
;;;3083   	temp_SL=(signed long)ad7705_buff_[0];
;;;3084   	temp_SL-=(signed long)Kibat0[0];
;;;3085   	temp_SL*=(signed long)Kibat1[0];
;;;3086   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3087   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d28  f2456913          MOV      r9,#0x5613
002d2c  bbf0              CBNZ     r0,|L1.11692|
002d2e  f8dfa2ec          LDR      r10,|L1.12316|
002d32  f8ba0000          LDRH     r0,[r10,#0]           ;3083  ; ad7705_buff_
002d36  f8dfb2e8          LDR      r11,|L1.12320|
002d3a  f8bb1000          LDRH     r1,[r11,#0]           ;3084  ; Kibat0
002d3e  eba00001          SUB      r0,r0,r1              ;3084
002d42  4ab8              LDR      r2,|L1.12324|
002d44  f9b21000          LDRSH    r1,[r2,#0]            ;3085  ; Kibat1
002d48  fb01f100          MUL      r1,r1,r0              ;3085
002d4c  48b6              LDR      r0,|L1.12328|
002d4e  f6456338          MOV      r3,#0x5e38            ;3086
002d52  f6456792          MOV      r7,#0x5e92            ;3086
002d56  8800              LDRH     r0,[r0,#0]            ;3086  ; AUSW_MAIN
002d58  f44f7c96          MOV      r12,#0x12c            ;3086
002d5c  4298              CMP      r0,r3                 ;3086
002d5e  d001              BEQ      |L1.11620|
002d60  42b8              CMP      r0,r7                 ;3086
002d62  d102              BNE      |L1.11626|
                  |L1.11620|
002d64  fb91f1fc          SDIV     r1,r1,r12             ;3086
002d68  e010              B        |L1.11660|
                  |L1.11626|
002d6a  f5a04ea8          SUB      lr,r0,#0x5400
002d6e  f5be7efd          SUBS     lr,lr,#0x1fa
002d72  d004              BEQ      |L1.11646|
002d74  4548              CMP      r0,r9
002d76  d002              BEQ      |L1.11646|
002d78  f1be0e17          SUBS     lr,lr,#0x17
002d7c  d102              BNE      |L1.11652|
                  |L1.11646|
002d7e  fb91f1f8          SDIV     r1,r1,r8
002d82  e003              B        |L1.11660|
                  |L1.11652|
;;;3088   	else temp_SL/=1000L;
002d84  f44f7e7a          MOV      lr,#0x3e8
002d88  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11660|
;;;3089   	#ifdef UKU_TELECORE2015
;;;3090   	temp_SL/=2L;
;;;3091   	//temp_SL=-temp_SL;
;;;3092   	#endif
;;;3093   	//#ifdef UKU_TELECORE2017
;;;3094   	//temp_SL/=-2L;
;;;3095   	//temp_SL=-temp_SL;
;;;3096   	//#endif
;;;3097   	bat[0]._Ib=(signed short)temp_SL;
002d8c  8129              STRH     r1,[r5,#8]
;;;3098   
;;;3099   	temp_SL=(signed long)ad7705_buff_[1];
002d8e  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3100   	temp_SL-=(signed long)Kibat0[1];
002d92  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002d96  eba10a0a          SUB      r10,r1,r10
;;;3101   	temp_SL*=(signed long)Kibat1[1];
002d9a  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002d9e  fb01f10a          MUL      r1,r1,r10
;;;3102   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002da2  4298              CMP      r0,r3
002da4  d001              BEQ      |L1.11690|
002da6  42b8              CMP      r0,r7
002da8  d104              BNE      |L1.11700|
                  |L1.11690|
002daa  e000              B        |L1.11694|
                  |L1.11692|
002dac  e013              B        |L1.11734|
                  |L1.11694|
002dae  fb91f0fc          SDIV     r0,r1,r12
002db2  e00e              B        |L1.11730|
                  |L1.11700|
;;;3103   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002db4  f5a042aa          SUB      r2,r0,#0x5500
002db8  3afa              SUBS     r2,r2,#0xfa
002dba  d003              BEQ      |L1.11716|
002dbc  4548              CMP      r0,r9
002dbe  d001              BEQ      |L1.11716|
002dc0  3a17              SUBS     r2,r2,#0x17
002dc2  d102              BNE      |L1.11722|
                  |L1.11716|
002dc4  fb91f0f8          SDIV     r0,r1,r8
002dc8  e003              B        |L1.11730|
                  |L1.11722|
;;;3104   	else temp_SL/=1000L;
002dca  f44f707a          MOV      r0,#0x3e8
002dce  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11730|
;;;3105   	bat[1]._Ib=(signed short)temp_SL;
002dd2  f8a50054          STRH     r0,[r5,#0x54]
                  |L1.11734|
;;;3106   	}
;;;3107   
;;;3108   
;;;3109   
;;;3110   
;;;3111   
;;;3112   //Температуры батарей
;;;3113   
;;;3114   #ifdef UKU_KONTUR
;;;3115   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3116   else bat[0]._nd=1;
;;;3117   temp_SL=(signed long)adc_buff_[6];
;;;3118   temp_SL*=Ktbat[0];
;;;3119   temp_SL/=20000L;
;;;3120   temp_SL-=273L;
;;;3121   bat[0]._Tb=(signed short)temp_SL;
;;;3122   #else
;;;3123   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002dd6  f9b4000c          LDRSH    r0,[r4,#0xc]  ; adc_buff_
002dda  f64031b7          MOV      r1,#0xbb7
002dde  4684              MOV      r12,r0
002de0  f2a03021          SUB      r0,r0,#0x321
;;;3124   else bat[0]._nd=1;
002de4  2701              MOVS     r7,#1
002de6  2300              MOVS     r3,#0                 ;3123
002de8  9002              STR      r0,[sp,#8]            ;3123
002dea  4288              CMP      r0,r1                 ;3123
002dec  d201              BCS      |L1.11762|
002dee  732b              STRB     r3,[r5,#0xc]          ;3123
002df0  e000              B        |L1.11764|
                  |L1.11762|
002df2  732f              STRB     r7,[r5,#0xc]
                  |L1.11764|
;;;3125   temp_SL=(signed long)adc_buff_[6];
;;;3126   temp_SL*=Ktbat[0];
002df4  4a8d              LDR      r2,|L1.12332|
002df6  f9b20000          LDRSH    r0,[r2,#0]  ; Ktbat
002dfa  fb00f00c          MUL      r0,r0,r12
;;;3127   temp_SL/=20000L;
002dfe  f6446a20          MOV      r10,#0x4e20
002e02  fb90f0fa          SDIV     r0,r0,r10
;;;3128   temp_SL-=273L;
002e06  f2a01011          SUB      r0,r0,#0x111
;;;3129   bat[0]._Tb=(signed short)temp_SL;
002e0a  8168              STRH     r0,[r5,#0xa]
;;;3130   #endif
;;;3131   
;;;3132   #ifdef UKU_KONTUR
;;;3133   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3134   else bat[1]._nd=1;
;;;3135   temp_SL=(signed long)adc_buff_[7];
;;;3136   temp_SL*=Ktbat[1];
;;;3137   temp_SL/=20000L;
;;;3138   temp_SL-=273L;
;;;3139   bat[1]._Tb=(signed short)temp_SL;
;;;3140   #else
;;;3141   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002e0c  f9b4000e          LDRSH    r0,[r4,#0xe]  ; adc_buff_
002e10  f64031b7          MOV      r1,#0xbb7
002e14  f2a03b21          SUB      r11,r0,#0x321
002e18  458b              CMP      r11,r1
002e1a  d202              BCS      |L1.11810|
002e1c  f8853058          STRB     r3,[r5,#0x58]
002e20  e001              B        |L1.11814|
                  |L1.11810|
;;;3142   else bat[1]._nd=1;
002e22  f8857058          STRB     r7,[r5,#0x58]
                  |L1.11814|
;;;3143   temp_SL=(signed long)adc_buff_[7];
;;;3144   temp_SL*=Ktbat[1];
002e26  f9b21002          LDRSH    r1,[r2,#2]  ; Ktbat
002e2a  4341              MULS     r1,r0,r1
;;;3145   temp_SL/=20000L;
002e2c  f6446020          MOV      r0,#0x4e20
002e30  fb91f0f0          SDIV     r0,r1,r0
;;;3146   temp_SL-=273L;
002e34  f2a01011          SUB      r0,r0,#0x111
;;;3147   bat[1]._Tb=(signed short)temp_SL;
002e38  4976              LDR      r1,|L1.12308|
002e3a  f8a10056          STRH     r0,[r1,#0x56]
;;;3148   #endif
;;;3149   
;;;3150   #ifdef UKU_6U
;;;3151   
;;;3152   if(NUMMAKB==2)
;;;3153   	{
;;;3154   	if(makb[0]._cnt<5)
;;;3155   		{
;;;3156   		if(makb[0]._T_nd[0]==0)
;;;3157   			{
;;;3158   			bat[0]._Tb=makb[0]._T[0];
;;;3159   			bat[0]._nd=0;
;;;3160   			}
;;;3161   		}
;;;3162   
;;;3163   	if(makb[1]._cnt<5)
;;;3164   		{
;;;3165   		if(makb[1]._T_nd[0]==0)
;;;3166   			{
;;;3167   			bat[1]._Tb=makb[1]._T[0];
;;;3168   			bat[1]._nd=0;
;;;3169   			}
;;;3170   		}
;;;3171   
;;;3172   	}
;;;3173   else if(NUMMAKB==4)
;;;3174   	{
;;;3175   	signed short temp_t;
;;;3176   	temp_t=-20;
;;;3177   	if(makb[0]._cnt<5)
;;;3178   		{
;;;3179   		if(makb[0]._T_nd[0]==0)
;;;3180   			{
;;;3181   			temp_t=makb[0]._T[0];
;;;3182   			bat[0]._nd=0;
;;;3183   			}
;;;3184   		}
;;;3185   	if(makb[1]._cnt<5)
;;;3186   		{
;;;3187   		if(makb[1]._T_nd[0]==0)
;;;3188   			{
;;;3189   			if(temp_t<makb[1]._T[0])
;;;3190   				{
;;;3191   				bat[0]._nd=0;
;;;3192   				temp_t=makb[1]._T[0];
;;;3193   				}
;;;3194   			}
;;;3195   		}
;;;3196   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3197   
;;;3198    	temp_t=-20;
;;;3199   	if(makb[2]._cnt<5)
;;;3200   		{
;;;3201   		if(makb[2]._T_nd[0]==0)
;;;3202   			{
;;;3203   			temp_t=makb[2]._T[0];
;;;3204   			bat[1]._nd=0;
;;;3205   			}
;;;3206   		}
;;;3207   	if(makb[3]._cnt<5)
;;;3208   		{
;;;3209   		if(makb[3]._T_nd[0]==0)
;;;3210   			{
;;;3211   			if(temp_t<makb[3]._T[0])
;;;3212   				{
;;;3213   				bat[1]._nd=0;
;;;3214   				temp_t=makb[3]._T[0];
;;;3215   				}
;;;3216   			}
;;;3217   		}
;;;3218   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3219   	}
;;;3220   
;;;3221   #endif
;;;3222   
;;;3223   
;;;3224   //Напряжение нагрузки
;;;3225   temp_SL=(signed long)adc_buff_[2];
002e3e  f9b41004          LDRSH    r1,[r4,#4]  ; adc_buff_
;;;3226   temp_SL*=Kuload;
002e42  487b              LDR      r0,|L1.12336|
002e44  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002e48  fb01f000          MUL      r0,r1,r0
;;;3227   temp_SL/=2000L;
002e4c  f44f62fa          MOV      r2,#0x7d0
002e50  fb90f0f2          SDIV     r0,r0,r2
;;;3228   load_U=(signed short)temp_SL;
002e54  f8dfb1dc          LDR      r11,|L1.12340|
002e58  f8ab0000          STRH     r0,[r11,#0]
;;;3229   
;;;3230   #ifdef UKU_220 
;;;3231   //Напряжение нагрузки
;;;3232   temp_SL=(signed long)adc_buff_[2];
;;;3233   temp_SL*=Kuload;
;;;3234   temp_SL/=350L;
;;;3235   load_U=(signed short)temp_SL;
;;;3236   #endif
;;;3237   
;;;3238   #ifdef UKU_220_V2 
;;;3239   //Напряжение нагрузки
;;;3240   temp_SL=(signed long)adc_buff_[2];
;;;3241   temp_SL*=Kuload;
;;;3242   temp_SL/=350L;
;;;3243   load_U=(signed short)temp_SL;
;;;3244   #endif
;;;3245   
;;;3246   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3247   //Напряжение шины
;;;3248   temp_SL=(signed long)adc_buff_[1];
002e5c  f9b42002          LDRSH    r2,[r4,#2]  ; adc_buff_
;;;3249   temp_SL*=Kuout;
002e60  4875              LDR      r0,|L1.12344|
002e62  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002e66  fb02f200          MUL      r2,r2,r0
;;;3250   if(AUSW_MAIN==22010)temp_SL/=400L;
002e6a  486f              LDR      r0,|L1.12328|
002e6c  f24555fa          MOV      r5,#0x55fa
002e70  f44f78c8          MOV      r8,#0x190
002e74  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002e76  42a8              CMP      r0,r5
002e78  d102              BNE      |L1.11904|
002e7a  fb92f2f8          SDIV     r2,r2,r8
002e7e  e003              B        |L1.11912|
                  |L1.11904|
;;;3251   else temp_SL/=500L;
002e80  f44f7afa          MOV      r10,#0x1f4
002e84  fb92f2fa          SDIV     r2,r2,r10
                  |L1.11912|
;;;3252   out_U=(signed short)temp_SL;
002e88  fa0ffa82          SXTH     r10,r2
002e8c  4a6b              LDR      r2,|L1.12348|
002e8e  f8a2a000          STRH     r10,[r2,#0]
;;;3253   load_U=out_U;
002e92  f8aba000          STRH     r10,[r11,#0]
;;;3254   
;;;3255   //Напряжение выпрямителей
;;;3256   temp_SL=(signed long)adc_buff_[2];
;;;3257   temp_SL*=Kubps;
002e96  4a6a              LDR      r2,|L1.12352|
002e98  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002e9c  fb01f102          MUL      r1,r1,r2
;;;3258   if(AUSW_MAIN==22010)temp_SL/=400L;
002ea0  d102              BNE      |L1.11944|
002ea2  fb91f1f8          SDIV     r1,r1,r8
002ea6  e003              B        |L1.11952|
                  |L1.11944|
;;;3259   else temp_SL/=500L;
002ea8  f44f72fa          MOV      r2,#0x1f4
002eac  fb91f1f2          SDIV     r1,r1,r2
                  |L1.11952|
;;;3260   bps_U=(signed short)temp_SL;
002eb0  4d64              LDR      r5,|L1.12356|
002eb2  b209              SXTH     r1,r1
002eb4  8029              STRH     r1,[r5,#0]
;;;3261   
;;;3262   if(bps_U<100)
;;;3263   	{
;;;3264   	char i;
;;;3265   	for(i=0;i<NUMIST;i++)
002eb6  f8dfe190          LDR      lr,|L1.12360|
002eba  2964              CMP      r1,#0x64              ;3262
002ebc  da17              BGE      |L1.12014|
002ebe  f04f0100          MOV      r1,#0
002ec2  f9be8000          LDRSH    r8,[lr,#0]
002ec6  f8dfb184          LDR      r11,|L1.12364|
002eca  e00e              B        |L1.12010|
                  |L1.11980|
;;;3266   		{
;;;3267   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002ecc  eb0102c1          ADD      r2,r1,r1,LSL #3
002ed0  eb021201          ADD      r2,r2,r1,LSL #4
002ed4  eb0b0282          ADD      r2,r11,r2,LSL #2
002ed8  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002edc  6a12              LDR      r2,[r2,#0x20]
002ede  42a2              CMP      r2,r4
002ee0  dd00              BLE      |L1.12004|
002ee2  802a              STRH     r2,[r5,#0]
                  |L1.12004|
002ee4  f1010101          ADD      r1,r1,#1              ;3265
002ee8  b2c9              UXTB     r1,r1                 ;3265
                  |L1.12010|
002eea  4541              CMP      r1,r8                 ;3265
002eec  dbee              BLT      |L1.11980|
                  |L1.12014|
;;;3268   		}
;;;3269   	}
;;;3270   
;;;3271   //Суммарный ток выпрямителей
;;;3272   temp_SL=0;
002eee  f04f0500          MOV      r5,#0
;;;3273   for (i=0;i<NUMIST;i++)
002ef2  4629              MOV      r1,r5
002ef4  f9be2000          LDRSH    r2,[lr,#0]            ;3265
002ef8  4c54              LDR      r4,|L1.12364|
002efa  e00b              B        |L1.12052|
                  |L1.12028|
;;;3274   	{
;;;3275   	temp_SL+=((signed long)bps[i]._Ii);
002efc  eb0108c1          ADD      r8,r1,r1,LSL #3
002f00  eb081801          ADD      r8,r8,r1,LSL #4
002f04  eb040888          ADD      r8,r4,r8,LSL #2
002f08  f8d88024          LDR      r8,[r8,#0x24]
002f0c  4445              ADD      r5,r5,r8
002f0e  f1010101          ADD      r1,r1,#1              ;3273
002f12  b2c9              UXTB     r1,r1                 ;3273
                  |L1.12052|
002f14  4291              CMP      r1,r2                 ;3273
002f16  dbf1              BLT      |L1.12028|
;;;3276   	}
;;;3277   bps_I=(signed short)temp_SL;
002f18  494d              LDR      r1,|L1.12368|
002f1a  800d              STRH     r5,[r1,#0]
;;;3278   
;;;3279   
;;;3280   #endif
;;;3281   
;;;3282   
;;;3283   #ifdef UKU_KONTUR
;;;3284   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3285   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3286   else ND_EXT[0]=1;
;;;3287   temp_SL=(signed long)adc_buff_[5];
;;;3288   temp_SL*=Ktext[0];
;;;3289   temp_SL/=20000L;
;;;3290   temp_SL-=273L;
;;;3291   t_ext[0]=(signed short)temp_SL;
;;;3292   #else 
;;;3293   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3294   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002f1c  493b              LDR      r1,|L1.12300|
002f1e  f6403bb7          MOV      r11,#0xbb7
002f22  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
002f26  494b              LDR      r1,|L1.12372|
002f28  f2a53821          SUB      r8,r5,#0x321
002f2c  f8cd8004          STR      r8,[sp,#4]
002f30  45d8              CMP      r8,r11
002f32  d201              BCS      |L1.12088|
002f34  700b              STRB     r3,[r1,#0]
002f36  e000              B        |L1.12090|
                  |L1.12088|
;;;3295   else ND_EXT[0]=1;
002f38  700f              STRB     r7,[r1,#0]
                  |L1.12090|
;;;3296   temp_SL=(signed long)adc_buff_[5];
;;;3297   temp_SL*=Ktext[0];
002f3a  f8df811c          LDR      r8,|L1.12376|
002f3e  f9b88000          LDRSH    r8,[r8,#0]  ; Ktext
002f42  fb08fb05          MUL      r11,r8,r5
;;;3298   temp_SL/=20000L;
002f46  f6446e20          MOV      lr,#0x4e20
002f4a  fb9bfbfe          SDIV     r11,r11,lr
;;;3299   temp_SL-=273L;
002f4e  f2ab1b11          SUB      r11,r11,#0x111
;;;3300   t_ext[0]=(signed short)temp_SL;
002f52  f8dfe108          LDR      lr,|L1.12380|
002f56  f8aeb000          STRH     r11,[lr,#0]
;;;3301   /*
;;;3302   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3303   else ND_EXT[1]=1;
;;;3304   temp_SL=(signed long)adc_buff_[6];
;;;3305   temp_SL*=Ktext[1];
;;;3306   temp_SL/=20000L;
;;;3307   temp_SL-=273L;
;;;3308   t_ext[1]=(signed short)temp_SL;	*/
;;;3309   #endif
;;;3310   
;;;3311   #ifdef UKU_220
;;;3312   
;;;3313   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3314   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3315   else ND_EXT[1]=1;
;;;3316   temp_SL=(signed long)adc_buff_[3];
;;;3317   temp_SL*=Ktext[1];
;;;3318   temp_SL/=20000L;
;;;3319   temp_SL-=273L;
;;;3320   t_ext[1]=(signed short)temp_SL;
;;;3321   
;;;3322   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3323   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3324   else ND_EXT[2]=1;
;;;3325   temp_SL=(signed long)adc_buff_[10];
;;;3326   temp_SL*=Ktext[2];
;;;3327   temp_SL/=20000L;
;;;3328   temp_SL-=273L;
;;;3329   t_ext[2]=(signed short)temp_SL;
;;;3330   
;;;3331   #else
;;;3332   
;;;3333   
;;;3334   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3335   
;;;3336   //Внешний датчик температуры 
;;;3337   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002f5a  f8dde008          LDR      lr,[sp,#8]
002f5e  f6403bb7          MOV      r11,#0xbb7
002f62  45de              CMP      lr,r11
002f64  d201              BCS      |L1.12138|
002f66  700b              STRB     r3,[r1,#0]
002f68  e000              B        |L1.12140|
                  |L1.12138|
;;;3338   else ND_EXT[0]=1;
002f6a  700f              STRB     r7,[r1,#0]
                  |L1.12140|
;;;3339   temp_SL=(signed long)adc_buff_[6];
;;;3340   temp_SL*=Ktext[0];
002f6c  fb08f80c          MUL      r8,r8,r12
;;;3341   temp_SL/=20000L;
002f70  f6446e20          MOV      lr,#0x4e20
002f74  fb98f8fe          SDIV     r8,r8,lr
;;;3342   temp_SL-=273L;
002f78  f2a81811          SUB      r8,r8,#0x111
;;;3343   t_ext[0]=(signed short)temp_SL;
002f7c  f8dfc0dc          LDR      r12,|L1.12380|
002f80  f8ac8000          STRH     r8,[r12,#0]
;;;3344   
;;;3345   //Внешний датчик температуры №2
;;;3346   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002f84  f8dd8004          LDR      r8,[sp,#4]
002f88  45d8              CMP      r8,r11
002f8a  d201              BCS      |L1.12176|
002f8c  704b              STRB     r3,[r1,#1]
002f8e  e000              B        |L1.12178|
                  |L1.12176|
;;;3347   else ND_EXT[1]=1;
002f90  704f              STRB     r7,[r1,#1]
                  |L1.12178|
;;;3348   temp_SL=(signed long)adc_buff_[5];
;;;3349   temp_SL*=Ktext[1];
002f92  4f31              LDR      r7,|L1.12376|
002f94  f9b77002          LDRSH    r7,[r7,#2]  ; Ktext
002f98  436f              MULS     r7,r5,r7
;;;3350   temp_SL/=20000L;
002f9a  fb97f5fe          SDIV     r5,r7,lr
;;;3351   temp_SL-=273L;
002f9e  f2a51511          SUB      r5,r5,#0x111
;;;3352   t_ext[1]=(signed short)temp_SL;
002fa2  4f2e              LDR      r7,|L1.12380|
002fa4  b22d              SXTH     r5,r5
002fa6  807d              STRH     r5,[r7,#2]
002fa8  9500              STR      r5,[sp,#0]
;;;3353   #else
;;;3354   
;;;3355   
;;;3356   
;;;3357   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3358   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3359   else ND_EXT[1]=1;
;;;3360   temp_SL=(signed long)adc_buff_[6];
;;;3361   temp_SL*=Ktext[1];
;;;3362   temp_SL/=20000L;
;;;3363   temp_SL-=273L;
;;;3364   t_ext[1]=(signed short)temp_SL;
;;;3365   
;;;3366   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3367   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3368   else ND_EXT[2]=1;
;;;3369   temp_SL=(signed long)adc_buff_[3];
;;;3370   temp_SL*=Ktext[2];
;;;3371   temp_SL/=20000L;
;;;3372   temp_SL-=273L;
;;;3373   t_ext[2]=(signed short)temp_SL;
;;;3374   
;;;3375   #endif
;;;3376   #endif
;;;3377   
;;;3378   #ifdef UKU_220_V2
;;;3379   
;;;3380   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3381   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3382   else ND_EXT[1]=1;
;;;3383   temp_SL=(signed long)adc_buff_[3];
;;;3384   temp_SL*=Ktext[1];
;;;3385   temp_SL/=20000L;
;;;3386   temp_SL-=273L;
;;;3387   t_ext[1]=(signed short)temp_SL;
;;;3388   
;;;3389   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3390   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3391   else ND_EXT[2]=1;
;;;3392   temp_SL=(signed long)adc_buff_[10];
;;;3393   temp_SL*=Ktext[2];
;;;3394   temp_SL/=20000L;
;;;3395   temp_SL-=273L;
;;;3396   t_ext[2]=(signed short)temp_SL;
;;;3397   
;;;3398   #else
;;;3399   
;;;3400   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3401   //Ток батареи
;;;3402   if(bps[8]._device==dIBAT_METR)
002faa  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3403   	{
;;;3404   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3405   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3406   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3407   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3408   	if(!bIBAT_SMKLBR)
;;;3409   		{
;;;3410   		signed long temp_SL;
;;;3411   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3412   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3413   		temp_SL*=(signed long)Kibat1[0];
;;;3414   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3415   	
;;;3416   		Ib_ips_termokompensat =(signed short)temp_SL;
002fae  f8dfc0b0          LDR      r12,|L1.12384|
002fb2  2d09              CMP      r5,#9                 ;3402
002fb4  d17e              BNE      |L1.12468|
002fb6  f8945326          LDRB     r5,[r4,#0x326]        ;3404  ; bps
002fba  f8947327          LDRB     r7,[r4,#0x327]        ;3404  ; bps
002fbe  f8df80a4          LDR      r8,|L1.12388|
002fc2  eb052507          ADD      r5,r5,r7,LSL #8       ;3404
002fc6  f8c85000          STR      r5,[r8,#0]            ;3404  ; ibat_metr_buff_
002fca  f8947328          LDRB     r7,[r4,#0x328]        ;3405  ; bps
002fce  f894b329          LDRB     r11,[r4,#0x329]       ;3405  ; bps
002fd2  eb07270b          ADD      r7,r7,r11,LSL #8      ;3405
002fd6  f8c87004          STR      r7,[r8,#4]            ;3405  ; ibat_metr_buff_
002fda  f894832a          LDRB     r8,[r4,#0x32a]        ;3406  ; bps
002fde  f894b32b          LDRB     r11,[r4,#0x32b]       ;3406  ; bps
002fe2  eb08280b          ADD      r8,r8,r11,LSL #8      ;3406
002fe6  fa0ffb88          SXTH     r11,r8                ;3406
002fea  f8df807c          LDR      r8,|L1.12392|
002fee  f8a8b000          STRH     r11,[r8,#0]           ;3406
002ff2  f8df8078          LDR      r8,|L1.12396|
002ff6  e03b              B        |L1.12400|
                  |L1.12280|
                          DCD      net_F3
                  |L1.12284|
                          DCD      net_U
                  |L1.12288|
                          DCD      Kunet
                  |L1.12292|
                          DCD      ||area_number.25||
                  |L1.12296|
                          DCD      net_F
                  |L1.12300|
                          DCD      ||.bss||+0x40c
                  |L1.12304|
                          DCD      Kubat
                  |L1.12308|
                          DCD      bat
                  |L1.12312|
                          DCD      Kubatm
                  |L1.12316|
                          DCD      ad7705_buff_
                  |L1.12320|
                          DCD      Kibat0
                  |L1.12324|
                          DCD      Kibat1
                  |L1.12328|
                          DCD      AUSW_MAIN
                  |L1.12332|
                          DCD      Ktbat
                  |L1.12336|
                          DCD      Kuload
                  |L1.12340|
                          DCD      load_U
                  |L1.12344|
                          DCD      Kuout
                  |L1.12348|
                          DCD      out_U
                  |L1.12352|
                          DCD      Kubps
                  |L1.12356|
                          DCD      bps_U
                  |L1.12360|
                          DCD      NUMIST
                  |L1.12364|
                          DCD      bps
                  |L1.12368|
                          DCD      bps_I
                  |L1.12372|
                          DCD      ND_EXT
                  |L1.12376|
                          DCD      Ktext
                  |L1.12380|
                          DCD      t_ext
                  |L1.12384|
                          DCD      Ib_ips_termokompensat
                  |L1.12388|
                          DCD      ibat_metr_buff_
                  |L1.12392|
                          DCD      bIBAT_SMKLBR
                  |L1.12396|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12400|
003070  f1bb0f00          CMP      r11,#0                ;3407
003074  d003              BEQ      |L1.12414|
003076  f04f0b32          MOV      r11,#0x32             ;3407
00307a  f8a8b000          STRH     r11,[r8,#0]           ;3407
                  |L1.12414|
00307e  d131              BNE      |L1.12516|
003080  eba50707          SUB      r7,r5,r7              ;3412
003084  4dff              LDR      r5,|L1.13444|
003086  f9b55000          LDRSH    r5,[r5,#0]            ;3413  ; Kibat1
00308a  fb05f507          MUL      r5,r5,r7              ;3413
00308e  f5a047aa          SUB      r7,r0,#0x5500         ;3414
003092  3ffa              SUBS     r7,r7,#0xfa           ;3414
003094  d00d              BEQ      |L1.12466|
003096  1e7f              SUBS     r7,r7,#1              ;3414
003098  d00b              BEQ      |L1.12466|
00309a  4548              CMP      r0,r9                 ;3414
00309c  d009              BEQ      |L1.12466|
00309e  3f16              SUBS     r7,r7,#0x16           ;3414
0030a0  d007              BEQ      |L1.12466|
0030a2  3f1e              SUBS     r7,r7,#0x1e           ;3414
0030a4  d005              BEQ      |L1.12466|
0030a6  3728              ADDS     r7,r7,#0x28           ;3414
0030a8  d003              BEQ      |L1.12466|
0030aa  3f14              SUBS     r7,r7,#0x14           ;3414
0030ac  d001              BEQ      |L1.12466|
0030ae  1e7f              SUBS     r7,r7,#1              ;3414
0030b0  d105              BNE      |L1.12478|
                  |L1.12466|
0030b2  e000              B        |L1.12470|
                  |L1.12468|
0030b4  e016              B        |L1.12516|
                  |L1.12470|
0030b6  f44f67fa          MOV      r7,#0x7d0             ;3414
0030ba  fb95f5f7          SDIV     r5,r5,r7              ;3414
                  |L1.12478|
0030be  b22f              SXTH     r7,r5
0030c0  f8ac7000          STRH     r7,[r12,#0]
;;;3417   		if(bIBAT_SMKLBR_cnt)
0030c4  f9b85000          LDRSH    r5,[r8,#0]  ; bIBAT_SMKLBR_cnt
;;;3418   			{
;;;3419   			bIBAT_SMKLBR_cnt--;
;;;3420   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0030c8  f8df93bc          LDR      r9,|L1.13448|
0030cc  b145              CBZ      r5,|L1.12512|
0030ce  f1a50501          SUB      r5,r5,#1              ;3419
0030d2  f8a85000          STRH     r5,[r8,#0]            ;3419
0030d6  f8b95000          LDRH     r5,[r9,#0]  ; Ib_ips_termokompensat_temp
0030da  f8ac5000          STRH     r5,[r12,#0]
0030de  e001              B        |L1.12516|
                  |L1.12512|
;;;3421   			}
;;;3422   		else 
;;;3423   			{
;;;3424   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0030e0  f8a97000          STRH     r7,[r9,#0]
                  |L1.12516|
;;;3425   			}
;;;3426   		}
;;;3427   	}
;;;3428   
;;;3429   bat[0]._Ub=load_U;
0030e4  4de9              LDR      r5,|L1.13452|
0030e6  f8a5a002          STRH     r10,[r5,#2]
;;;3430   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0030ea  f5a047ac          SUB      r7,r0,#0x5600
0030ee  3f02              SUBS     r7,#2
0030f0  d103              BNE      |L1.12538|
0030f2  8928              LDRH     r0,[r5,#8]  ; bat
0030f4  f8ac0000          STRH     r0,[r12,#0]
0030f8  e002              B        |L1.12544|
                  |L1.12538|
;;;3431   else bat[0]._Ib=Ib_ips_termokompensat;
0030fa  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0030fe  8128              STRH     r0,[r5,#8]
                  |L1.12544|
;;;3432   
;;;3433   #endif
;;;3434   #endif
;;;3435   
;;;3436   
;;;3437   #ifdef UKU_TELECORE2015
;;;3438   
;;;3439   //Внешний датчик температуры №1
;;;3440   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3441   else ND_EXT[0]=1;
;;;3442   temp_SL=(signed long)adc_buff_[7];
;;;3443   temp_SL*=Ktext[0];
;;;3444   temp_SL/=20000L;
;;;3445   temp_SL-=273L;
;;;3446   t_ext[0]=(signed short)temp_SL;
;;;3447   
;;;3448   
;;;3449   //Внешний датчик температуры №2
;;;3450   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3451   else ND_EXT[1]=1;
;;;3452   temp_SL=(signed long)adc_buff_[6];
;;;3453   temp_SL*=Ktext[1];
;;;3454   temp_SL/=20000L;
;;;3455   temp_SL-=273L;
;;;3456   t_ext[1]=(signed short)temp_SL;
;;;3457   
;;;3458   #endif
;;;3459   
;;;3460   #ifdef UKU_TELECORE2017
;;;3461   
;;;3462   //Внешний датчик температуры №1
;;;3463   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3464   else ND_EXT[0]=1;
;;;3465   temp_SL=(signed long)adc_buff_[7];
;;;3466   temp_SL*=Ktext[0];
;;;3467   temp_SL/=20000L;
;;;3468   temp_SL-=273L;
;;;3469   t_ext[0]=(signed short)temp_SL;
;;;3470   
;;;3471   
;;;3472   //Внешний датчик температуры №2
;;;3473   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3474   else ND_EXT[1]=1;
;;;3475   temp_SL=(signed long)adc_buff_[6];
;;;3476   temp_SL*=Ktext[1];
;;;3477   temp_SL/=20000L;
;;;3478   temp_SL-=273L;
;;;3479   t_ext[1]=(signed short)temp_SL;
;;;3480   
;;;3481   #endif
;;;3482   
;;;3483   //напряжение ввода
;;;3484   temp_SL=(signed long)adc_buff_ext_[0];
003100  f8df838c          LDR      r8,|L1.13456|
003104  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3485   temp_SL*=Kunet_ext[0];
003108  f8df9388          LDR      r9,|L1.13460|
00310c  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
003110  4378              MULS     r0,r7,r0
;;;3486   temp_SL/=4000L;
003112  f44f6b7a          MOV      r11,#0xfa0
003116  fb90f0fb          SDIV     r0,r0,r11
;;;3487   Uvv[0]=(signed short)temp_SL;
00311a  4fdf              LDR      r7,|L1.13464|
00311c  b280              UXTH     r0,r0
00311e  8038              STRH     r0,[r7,#0]
;;;3488   if(Uvv[0]<100) Uvv0=Uvv[0];
003120  f8dfe378          LDR      lr,|L1.13468|
003124  2864              CMP      r0,#0x64
003126  d202              BCS      |L1.12590|
003128  f8ae0000          STRH     r0,[lr,#0]
00312c  e003              B        |L1.12598|
                  |L1.12590|
;;;3489   else Uvv0=net_U;
00312e  48dc              LDR      r0,|L1.13472|
003130  8800              LDRH     r0,[r0,#0]  ; net_U
003132  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12598|
;;;3490   
;;;3491   //напряжение пэс
;;;3492   temp_SL=(signed long)adc_buff_ext_[1];
003136  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3493   temp_SL*=Kunet_ext[1];
00313a  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
00313e  fb00f008          MUL      r0,r0,r8
;;;3494   temp_SL/=4000L;
003142  fb90f0fb          SDIV     r0,r0,r11
;;;3495   Uvv[1]=(signed short)temp_SL;
003146  8078              STRH     r0,[r7,#2]
;;;3496   
;;;3497   
;;;3498   //напряжение ввода трехфазное
;;;3499   temp_SL=(signed long)eb2_data_short[0];
003148  4fd6              LDR      r7,|L1.13476|
00314a  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3500   temp_SL*=Kvv_eb2[0];
00314e  f8df8358          LDR      r8,|L1.13480|
003152  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
003156  fb09f900          MUL      r9,r9,r0
;;;3501   temp_SL/=6000L;
00315a  f2417070          MOV      r0,#0x1770
00315e  fb99fbf0          SDIV     r11,r9,r0
;;;3502   Uvv_eb2[0]=(signed short)temp_SL;
003162  f8df9348          LDR      r9,|L1.13484|
003166  f8a9b000          STRH     r11,[r9,#0]
;;;3503   
;;;3504   temp_SL=(signed long)eb2_data_short[1];
00316a  f9b7e002          LDRSH    lr,[r7,#2]  ; eb2_data_short
;;;3505   temp_SL*=Kvv_eb2[1];
00316e  f9b8b002          LDRSH    r11,[r8,#2]  ; Kvv_eb2
003172  fb0bfb0e          MUL      r11,r11,lr
;;;3506   temp_SL/=6000L;
003176  fb9bfbf0          SDIV     r11,r11,r0
;;;3507   Uvv_eb2[1]=(signed short)temp_SL;
00317a  f8a9b002          STRH     r11,[r9,#2]
;;;3508   
;;;3509   temp_SL=(signed long)eb2_data_short[2];
00317e  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3510   temp_SL*=Kvv_eb2[2];
003182  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
003186  fb08f80b          MUL      r8,r8,r11
;;;3511   temp_SL/=6000L;
00318a  fb98f8f0          SDIV     r8,r8,r0
;;;3512   Uvv_eb2[2]=(signed short)temp_SL;
00318e  f8a98004          STRH     r8,[r9,#4]
;;;3513   
;;;3514   //напряжение пэс трехфазное
;;;3515   temp_SL=(signed long)eb2_data_short[3];
003192  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3516   temp_SL*=Kpes_eb2[0];
003196  f8df8318          LDR      r8,|L1.13488|
00319a  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
00319e  fb09f90b          MUL      r9,r9,r11
;;;3517   temp_SL/=6000L;
0031a2  fb99fbf0          SDIV     r11,r9,r0
;;;3518   Upes_eb2[0]=(signed short)temp_SL;
0031a6  f8df930c          LDR      r9,|L1.13492|
0031aa  f8a9b000          STRH     r11,[r9,#0]
;;;3519   
;;;3520   temp_SL=(signed long)eb2_data_short[4];
0031ae  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3521   temp_SL*=Kpes_eb2[1];
0031b2  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
0031b6  fb0bfb0e          MUL      r11,r11,lr
;;;3522   temp_SL/=6000L;
0031ba  fb9bfbf0          SDIV     r11,r11,r0
;;;3523   Upes_eb2[1]=(signed short)temp_SL;
0031be  f8a9b002          STRH     r11,[r9,#2]
;;;3524   
;;;3525   temp_SL=(signed long)eb2_data_short[5];
0031c2  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3526   temp_SL*=Kpes_eb2[2];
0031c6  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
0031ca  fb07f70b          MUL      r7,r7,r11
;;;3527   temp_SL/=6000L;
0031ce  fb97f0f0          SDIV     r0,r7,r0
;;;3528   Upes_eb2[2]=(signed short)temp_SL;
0031d2  f8a90004          STRH     r0,[r9,#4]
;;;3529   
;;;3530   //Вычисление температуры шкафа
;;;3531   
;;;3532   ibt._T[0]=t_ext[1]+273;
0031d6  9f00              LDR      r7,[sp,#0]
0031d8  f8dfb2e0          LDR      r11,|L1.13500|
0031dc  f2071711          ADD      r7,r7,#0x111
0031e0  48b5              LDR      r0,|L1.13496|
0031e2  fa0ff887          SXTH     r8,r7
0031e6  f8ab8000          STRH     r8,[r11,#0]
;;;3533   ibt._T[1]=t_ext[2]+273;
0031ea  8880              LDRH     r0,[r0,#4]  ; t_ext
0031ec  f2001011          ADD      r0,r0,#0x111
0031f0  fa0ff980          SXTH     r9,r0
0031f4  f8ab9002          STRH     r9,[r11,#2]
;;;3534   
;;;3535   ibt._nd[0]=ND_EXT[1];
0031f8  784f              LDRB     r7,[r1,#1]  ; ND_EXT
0031fa  f88b7008          STRB     r7,[r11,#8]
;;;3536   ibt._nd[1]=ND_EXT[2];
0031fe  7888              LDRB     r0,[r1,#2]  ; ND_EXT
003200  f88b0009          STRB     r0,[r11,#9]
;;;3537   
;;;3538   #ifndef UKU_TELECORE2015
;;;3539   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3540   	{
;;;3541   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003204  49ae              LDR      r1,|L1.13504|
003206  b907              CBNZ     r7,|L1.12810|
003208  b110              CBZ      r0,|L1.12816|
                  |L1.12810|
;;;3542   	}
;;;3543   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00320a  2f01              CMP      r7,#1
00320c  d00a              BEQ      |L1.12836|
00320e  e00a              B        |L1.12838|
                  |L1.12816|
003210  eb080009          ADD      r0,r8,r9              ;3541
003214  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3541
003218  f46f7788          MVN      r7,#0x110             ;3541
00321c  eb070060          ADD      r0,r7,r0,ASR #1       ;3541
003220  8008              STRH     r0,[r1,#0]            ;3541
003222  e01e              B        |L1.12898|
                  |L1.12836|
003224  b108              CBZ      r0,|L1.12842|
                  |L1.12838|
;;;3544   	{
;;;3545   	t_box=ibt._T[1]-273;
;;;3546   	}
;;;3547   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003226  b12f              CBZ      r7,|L1.12852|
003228  e006              B        |L1.12856|
                  |L1.12842|
00322a  f2a91911          SUB      r9,r9,#0x111          ;3545
00322e  f8a19000          STRH     r9,[r1,#0]            ;3545
003232  e016              B        |L1.12898|
                  |L1.12852|
003234  2801              CMP      r0,#1
003236  d002              BEQ      |L1.12862|
                  |L1.12856|
;;;3548   	{
;;;3549   	t_box=ibt._T[0]-273;
;;;3550   	}
;;;3551   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003238  2f01              CMP      r7,#1
00323a  d005              BEQ      |L1.12872|
00323c  e011              B        |L1.12898|
                  |L1.12862|
00323e  f2a81811          SUB      r8,r8,#0x111          ;3549
003242  f8a18000          STRH     r8,[r1,#0]            ;3549
003246  e00c              B        |L1.12898|
                  |L1.12872|
003248  2801              CMP      r0,#1
00324a  d10a              BNE      |L1.12898|
;;;3552   	{
;;;3553   	if(t_ext_can_nd<5)t_box= t_ext_can;
00324c  489d              LDR      r0,|L1.13508|
00324e  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
003250  2805              CMP      r0,#5
003252  d203              BCS      |L1.12892|
003254  489c              LDR      r0,|L1.13512|
003256  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003258  8008              STRH     r0,[r1,#0]
00325a  e002              B        |L1.12898|
                  |L1.12892|
;;;3554   	else t_box=20;
00325c  f04f0014          MOV      r0,#0x14
003260  8008              STRH     r0,[r1,#0]
                  |L1.12898|
;;;3555   	}
;;;3556   #endif
;;;3557   /*
;;;3558   //Вычисление температуры шкафа
;;;3559   
;;;3560   ibt._T[0]=bat[0]._Tb+273;
;;;3561   ibt._T[1]=bat[1]._Tb+273;
;;;3562   ibt._T[2]=t_ext[1]+273;
;;;3563   ibt._T[3]=t_ext[2]+273;
;;;3564   
;;;3565   ibt._nd[0]=bat[0]._nd;
;;;3566   ibt._nd[1]=bat[1]._nd;
;;;3567   ibt._nd[2]=ND_EXT[1];
;;;3568   ibt._nd[3]=ND_EXT[2];
;;;3569   
;;;3570   ibt._avg1=0;
;;;3571   ibt._avg_cnt=4;
;;;3572   
;;;3573   if(ibt._nd[0]==0)
;;;3574   	{
;;;3575   	ibt._avg1+=ibt._T[0];
;;;3576   	}
;;;3577   else 
;;;3578   	{
;;;3579   	ibt._avg_cnt--;
;;;3580   	}
;;;3581   
;;;3582   if(ibt._nd[1]==0)
;;;3583   	{
;;;3584   	ibt._avg1+=ibt._T[1];
;;;3585   	}
;;;3586   else 
;;;3587   	{
;;;3588   	ibt._avg_cnt--;
;;;3589   	}
;;;3590   
;;;3591   if(ibt._nd[2]==0)
;;;3592   	{
;;;3593   	ibt._avg1+=ibt._T[2];
;;;3594   	}
;;;3595   else 
;;;3596   	{
;;;3597   	ibt._avg_cnt--;
;;;3598   	}
;;;3599   
;;;3600   if(ibt._nd[3]==0)
;;;3601   	{
;;;3602   	ibt._avg1+=ibt._T[3];
;;;3603   	}
;;;3604   else 
;;;3605   	{
;;;3606   	ibt._avg_cnt--;
;;;3607   	}
;;;3608   
;;;3609   if(ibt._avg_cnt==0)
;;;3610   	{
;;;3611   	}
;;;3612   else
;;;3613   	{
;;;3614   	ibt._avg1/=ibt._avg_cnt;
;;;3615   	}
;;;3616   
;;;3617   
;;;3618   if(ibt._nd[0]!=0)
;;;3619   	{
;;;3620   	ibt._T_dispers[0]=0;
;;;3621   	}
;;;3622   else 
;;;3623   	{
;;;3624   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3625   	}
;;;3626   
;;;3627   if(ibt._nd[1]!=0)
;;;3628   	{
;;;3629   	ibt._T_dispers[1]=0;
;;;3630   	}
;;;3631   else 
;;;3632   	{
;;;3633   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3634   	}
;;;3635   
;;;3636   if(ibt._nd[2]!=0)
;;;3637   	{
;;;3638   	ibt._T_dispers[2]=0;
;;;3639   	}
;;;3640   else 
;;;3641   	{
;;;3642   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3643   	}
;;;3644   
;;;3645   if(ibt._nd[3]!=0)
;;;3646   	{
;;;3647   	ibt._T_dispers[3]=0;
;;;3648   	}
;;;3649   else 
;;;3650   	{
;;;3651   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3652   	}
;;;3653   
;;;3654   if(	ibt._nd[0]&&
;;;3655   	ibt._nd[1]&&
;;;3656   	ibt._nd[2]&&
;;;3657   	ibt._nd[3]
;;;3658   	)
;;;3659   	{
;;;3660   	t_box=(bps[0]._Ti);
;;;3661   	}
;;;3662   
;;;3663   else if(	ibt._nd[0]||
;;;3664   	ibt._nd[1]||
;;;3665   	ibt._nd[2]||
;;;3666   	ibt._nd[3]
;;;3667   	)
;;;3668   	{
;;;3669   	t_box=(ibt._avg1-273);
;;;3670   	}
;;;3671   else 
;;;3672   	{
;;;3673   	ibt._max_dispers_num=0;
;;;3674   	ibt._max_dispers=ibt._T_dispers[0];
;;;3675   
;;;3676   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3677   		{
;;;3678   		ibt._max_dispers_num=1;
;;;3679   		ibt._max_dispers=ibt._T_dispers[1];
;;;3680   		}
;;;3681   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3682   		{
;;;3683   		ibt._max_dispers_num=2;
;;;3684   		ibt._max_dispers=ibt._T_dispers[2];
;;;3685   		}
;;;3686   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3687   		{
;;;3688   		ibt._max_dispers_num=3;
;;;3689   		ibt._max_dispers=ibt._T_dispers[3];
;;;3690   		}
;;;3691   
;;;3692   	ibt._avg2=0;
;;;3693   
;;;3694   	if(ibt._max_dispers_num!=0)
;;;3695   		{
;;;3696   		ibt._avg2+=ibt._T[0];
;;;3697   		}
;;;3698   	if(ibt._max_dispers_num!=1)
;;;3699   		{
;;;3700   		ibt._avg2+=ibt._T[1];
;;;3701   		}
;;;3702   	if(ibt._max_dispers_num!=2)
;;;3703   		{
;;;3704   		ibt._avg2+=ibt._T[2];
;;;3705   		}
;;;3706   	if(ibt._max_dispers_num!=3)
;;;3707   		{
;;;3708   		ibt._avg2+=ibt._T[3];
;;;3709   		}
;;;3710   
;;;3711   	t_box=(ibt._avg2/3)-273;
;;;3712   
;;;3713   	}*/
;;;3714   
;;;3715   
;;;3716   //*********************************************
;;;3717   
;;;3718   #ifndef TELECORE
;;;3719   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
003262  489a              LDR      r0,|L1.13516|
003264  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
003266  2955              CMP      r1,#0x55
003268  d105              BNE      |L1.12918|
00326a  f1ba0fc8          CMP      r10,#0xc8
00326e  dd02              BLE      |L1.12918|
003270  8929              LDRH     r1,[r5,#8]  ; bat
003272  f8a6104a          STRH     r1,[r6,#0x4a]
                  |L1.12918|
;;;3720   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003276  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
003278  2855              CMP      r0,#0x55
00327a  d10b              BNE      |L1.12948|
00327c  f9b5004e          LDRSH    r0,[r5,#0x4e]  ; bat
003280  28c8              CMP      r0,#0xc8
003282  dd07              BLE      |L1.12948|
003284  f9b50054          LDRSH    r0,[r5,#0x54]  ; bat
003288  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00328c  4288              CMP      r0,r1
00328e  dd01              BLE      |L1.12948|
003290  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12948|
;;;3721   #endif
;;;3722   
;;;3723   #ifdef TELECORE
;;;3724   Ibmax=0;
;;;3725   /*
;;;3726   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3727   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3728   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3729   */
;;;3730   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3731   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3732   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3733   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3734   #endif
;;;3735   
;;;3736   #ifdef UKU_FSO
;;;3737   Ibmax=0;
;;;3738   if((NUMBAT_FSO>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3739   if((NUMBAT_FSO>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3740   #endif
;;;3741   
;;;3742   #ifdef UKU_TELECORE2017
;;;3743   Ibmax=0;
;;;3744   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3745   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3746   #endif
;;;3747   
;;;3748   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3749   Ibmax=Ib_ips_termokompensat;
003294  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
003298  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3750   #endif
;;;3751   for(i=0;i<NUMIST;i++)
00329c  f04f0100          MOV      r1,#0
0032a0  e02f              B        |L1.13058|
                  |L1.12962|
;;;3752   	{
;;;3753   	if(bps[i]._cnt<25)
0032a2  eb0100c1          ADD      r0,r1,r1,LSL #3
0032a6  eb001001          ADD      r0,r0,r1,LSL #4
0032aa  eb040080          ADD      r0,r4,r0,LSL #2
0032ae  78c6              LDRB     r6,[r0,#3]
0032b0  2e19              CMP      r6,#0x19
0032b2  d21c              BCS      |L1.13038|
;;;3754        	{
;;;3755        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0032b4  7986              LDRB     r6,[r0,#6]
0032b6  79c7              LDRB     r7,[r0,#7]
0032b8  eb062607          ADD      r6,r6,r7,LSL #8
0032bc  6246              STR      r6,[r0,#0x24]
;;;3756        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0032be  7a06              LDRB     r6,[r0,#8]
0032c0  7a47              LDRB     r7,[r0,#9]
0032c2  eb062607          ADD      r6,r6,r7,LSL #8
0032c6  6206              STR      r6,[r0,#0x20]
;;;3757        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0032c8  7a86              LDRB     r6,[r0,#0xa]
0032ca  7ac7              LDRB     r7,[r0,#0xb]
0032cc  eb062607          ADD      r6,r6,r7,LSL #8
0032d0  61c6              STR      r6,[r0,#0x1c]
;;;3758        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0032d2  7b06              LDRB     r6,[r0,#0xc]
0032d4  6286              STR      r6,[r0,#0x28]
;;;3759        	bps[i]._adr_ee=bps[i]._buff[7];
0032d6  7b46              LDRB     r6,[r0,#0xd]
0032d8  f8806056          STRB     r6,[r0,#0x56]
;;;3760        	bps[i]._flags_tm=bps[i]._buff[8];
0032dc  7b86              LDRB     r6,[r0,#0xe]
0032de  f8806042          STRB     r6,[r0,#0x42]
;;;3761   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0032e2  7c06              LDRB     r6,[r0,#0x10]
0032e4  7c47              LDRB     r7,[r0,#0x11]
0032e6  eb062607          ADD      r6,r6,r7,LSL #8
0032ea  6506              STR      r6,[r0,#0x50]
0032ec  e006              B        |L1.13052|
                  |L1.13038|
;;;3762        	} 
;;;3763   	else 
;;;3764        	{
;;;3765        	bps[i]._Uii=0; 
0032ee  61c3              STR      r3,[r0,#0x1c]
;;;3766        	bps[i]._Ii=0;
0032f0  6243              STR      r3,[r0,#0x24]
;;;3767        	bps[i]._Uin=0;
0032f2  6203              STR      r3,[r0,#0x20]
;;;3768        	bps[i]._Ti=0;
0032f4  6283              STR      r3,[r0,#0x28]
;;;3769        	bps[i]._flags_tm=0; 
0032f6  f8803042          STRB     r3,[r0,#0x42]
;;;3770   	     bps[i]._rotor=0;    
0032fa  6503              STR      r3,[r0,#0x50]
                  |L1.13052|
0032fc  f1010101          ADD      r1,r1,#1              ;3751
003300  b2c9              UXTB     r1,r1                 ;3751
                  |L1.13058|
003302  4291              CMP      r1,r2                 ;3751
003304  dbcd              BLT      |L1.12962|
;;;3771        	}
;;;3772        
;;;3773        }
;;;3774   
;;;3775   load_I=0;
003306  4e72              LDR      r6,|L1.13520|
;;;3776   #ifdef TELECORE
;;;3777   
;;;3778   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3779   	{
;;;3780   	load_I-=lakb[i]._ch_curr/10;
;;;3781   	}*/
;;;3782   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3783   #elif UKU_TELECORE2017
;;;3784   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3785   #else
;;;3786   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003308  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00330c  f04f000a          MOV      r0,#0xa
003310  fb91f1f0          SDIV     r1,r1,r0
003314  f9b55054          LDRSH    r5,[r5,#0x54]  ; bat
003318  fb95f0f0          SDIV     r0,r5,r0
00331c  4408              ADD      r0,r0,r1
00331e  f1c00000          RSB      r0,r0,#0
003322  b207              SXTH     r7,r0
003324  8037              STRH     r7,[r6,#0]
;;;3787   #endif
;;;3788   Isumm=0;
003326  4d6b              LDR      r5,|L1.13524|
003328  802b              STRH     r3,[r5,#0]
;;;3789   
;;;3790   for(i=0;i<NUMIST;i++)
00332a  f04f0000          MOV      r0,#0
00332e  e012              B        |L1.13142|
                  |L1.13104|
;;;3791        {
;;;3792        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003330  eb0001c0          ADD      r1,r0,r0,LSL #3
003334  eb011100          ADD      r1,r1,r0,LSL #4
003338  eb040181          ADD      r1,r4,r1,LSL #2
00333c  f891c003          LDRB     r12,[r1,#3]
003340  f1bc0f05          CMP      r12,#5
003344  d204              BCS      |L1.13136|
003346  6a49              LDR      r1,[r1,#0x24]
003348  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
00334c  4461              ADD      r1,r1,r12
00334e  8029              STRH     r1,[r5,#0]
                  |L1.13136|
003350  f1000001          ADD      r0,r0,#1              ;3790
003354  b2c0              UXTB     r0,r0                 ;3790
                  |L1.13142|
003356  4290              CMP      r0,r2                 ;3790
003358  dbea              BLT      |L1.13104|
;;;3793        }  
;;;3794        
;;;3795   load_I=load_I+Isumm;
00335a  8828              LDRH     r0,[r5,#0]  ; Isumm
00335c  4438              ADD      r0,r0,r7
00335e  b200              SXTH     r0,r0
003360  8030              STRH     r0,[r6,#0]
;;;3796   if(load_I<0)load_I=0;
003362  2800              CMP      r0,#0
003364  da00              BGE      |L1.13160|
003366  8033              STRH     r3,[r6,#0]
                  |L1.13160|
;;;3797   
;;;3798   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3799   load_I=0;
003368  8033              STRH     r3,[r6,#0]
;;;3800   
;;;3801   Isumm=0;
00336a  802b              STRH     r3,[r5,#0]
;;;3802   
;;;3803   for(i=0;i<NUMIST;i++)
00336c  f04f0000          MOV      r0,#0
003370  e00f              B        |L1.13202|
                  |L1.13170|
;;;3804        {
;;;3805        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003372  eb0001c0          ADD      r1,r0,r0,LSL #3
003376  eb011100          ADD      r1,r1,r0,LSL #4
00337a  eb040181          ADD      r1,r4,r1,LSL #2
00337e  78cf              LDRB     r7,[r1,#3]
003380  2f05              CMP      r7,#5
003382  d203              BCS      |L1.13196|
003384  6a49              LDR      r1,[r1,#0x24]
003386  882f              LDRH     r7,[r5,#0]  ; Isumm
003388  4439              ADD      r1,r1,r7
00338a  8029              STRH     r1,[r5,#0]
                  |L1.13196|
00338c  f1000001          ADD      r0,r0,#1              ;3803
003390  b2c0              UXTB     r0,r0                 ;3803
                  |L1.13202|
003392  4290              CMP      r0,r2                 ;3803
003394  dbed              BLT      |L1.13170|
;;;3806        }  
;;;3807        
;;;3808   load_I=load_I+Isumm;
003396  8829              LDRH     r1,[r5,#0]  ; Isumm
003398  eb030001          ADD      r0,r3,r1
00339c  b200              SXTH     r0,r0
00339e  8030              STRH     r0,[r6,#0]
;;;3809   if(load_I<0)load_I=0;
0033a0  2800              CMP      r0,#0
0033a2  da00              BGE      |L1.13222|
0033a4  8033              STRH     r3,[r6,#0]
                  |L1.13222|
;;;3810   
;;;3811   #endif
;;;3812   #ifdef IPS_SGEP_GAZPROM
;;;3813   load_I=Isumm;
;;;3814   #endif
;;;3815   
;;;3816   
;;;3817   #ifdef UKU_GLONASS
;;;3818   inv[0]._Uio=6;
;;;3819   if (NUMINV)
;;;3820   	{
;;;3821   	for(i=0;i<NUMINV;i++)
;;;3822   		{
;;;3823   		if(bps[i+first_inv_slot]._cnt<25)
;;;3824        		{
;;;3825        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3826        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3827        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3828        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3829        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3830   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3831   			inv[i]._cnt=0;    
;;;3832        		} 
;;;3833   		else 
;;;3834        		{
;;;3835        		inv[i]._Uio=0; 
;;;3836        		inv[i]._Ii=0;
;;;3837        		inv[i]._Uin=0;
;;;3838        		inv[i]._Ti=0;
;;;3839        		inv[i]._flags_tm=0; 
;;;3840   //	     	inv[i]._rotor0;
;;;3841   			inv[i]._cnt=25;    
;;;3842        		}
;;;3843        	}
;;;3844      	}
;;;3845   #endif
;;;3846   
;;;3847   #ifndef UKU_GLONASS
;;;3848   if (NUMINV)
0033a6  484c              LDR      r0,|L1.13528|
0033a8  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0033ac  2d00              CMP      r5,#0
0033ae  d066              BEQ      |L1.13438|
;;;3849   	{
;;;3850   	for(i=0;i<NUMINV;i++)
0033b0  f04f0200          MOV      r2,#0
;;;3851   		{
;;;3852   		if(bps[i+20]._cnt<25)
;;;3853        		{
;;;3854        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0033b4  4e49              LDR      r6,|L1.13532|
0033b6  e060              B        |L1.13434|
                  |L1.13240|
0033b8  f1020014          ADD      r0,r2,#0x14           ;3852
0033bc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3852
0033c0  eb011000          ADD      r0,r1,r0,LSL #4       ;3852
0033c4  eb040080          ADD      r0,r4,r0,LSL #2       ;3852
0033c8  78c1              LDRB     r1,[r0,#3]            ;3852
0033ca  2919              CMP      r1,#0x19              ;3852
0033cc  d239              BCS      |L1.13378|
0033ce  7981              LDRB     r1,[r0,#6]
0033d0  79c7              LDRB     r7,[r0,#7]
0033d2  eb012707          ADD      r7,r1,r7,LSL #8
0033d6  eb020142          ADD      r1,r2,r2,LSL #1
0033da  eb061141          ADD      r1,r6,r1,LSL #5
0033de  61cf              STR      r7,[r1,#0x1c]
;;;3855        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0033e0  7a07              LDRB     r7,[r0,#8]
0033e2  f890c009          LDRB     r12,[r0,#9]
0033e6  eb07270c          ADD      r7,r7,r12,LSL #8
0033ea  62cf              STR      r7,[r1,#0x2c]
;;;3856        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0033ec  7a87              LDRB     r7,[r0,#0xa]
0033ee  f890c00b          LDRB     r12,[r0,#0xb]
0033f2  eb07270c          ADD      r7,r7,r12,LSL #8
0033f6  618f              STR      r7,[r1,#0x18]
;;;3857        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0033f8  7b07              LDRB     r7,[r0,#0xc]
0033fa  620f              STR      r7,[r1,#0x20]
;;;3858        		inv[i]._flags_tm=bps[i+20]._buff[7];
0033fc  7b47              LDRB     r7,[r0,#0xd]
0033fe  f8817046          STRB     r7,[r1,#0x46]
;;;3859        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003402  7b87              LDRB     r7,[r0,#0xe]
003404  f890c00f          LDRB     r12,[r0,#0xf]
003408  eb07270c          ADD      r7,r7,r12,LSL #8
00340c  628f              STR      r7,[r1,#0x28]
;;;3860        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00340e  7c07              LDRB     r7,[r0,#0x10]
003410  f890c011          LDRB     r12,[r0,#0x11]
003414  eb07270c          ADD      r7,r7,r12,LSL #8
003418  624f              STR      r7,[r1,#0x24]
;;;3861   			inv[i]._cnt=0;
00341a  708b              STRB     r3,[r1,#2]
;;;3862   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00341c  7c87              LDRB     r7,[r0,#0x12]
00341e  f8817059          STRB     r7,[r1,#0x59]
;;;3863   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003422  7cc7              LDRB     r7,[r0,#0x13]
003424  f881705a          STRB     r7,[r1,#0x5a]
;;;3864   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003428  7d07              LDRB     r7,[r0,#0x14]
00342a  f8817058          STRB     r7,[r1,#0x58]
;;;3865   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00342e  7d47              LDRB     r7,[r0,#0x15]
003430  f881705b          STRB     r7,[r1,#0x5b]
;;;3866   			inv[i]._pwm_en=bps[i+20]._buff[16];  
003434  7d87              LDRB     r7,[r0,#0x16]
003436  f881705c          STRB     r7,[r1,#0x5c]
;;;3867   			inv[i]._phase_mode=bps[i+20]._buff[17];  
00343a  7dc0              LDRB     r0,[r0,#0x17]
00343c  f881005d          STRB     r0,[r1,#0x5d]
003440  e018              B        |L1.13428|
                  |L1.13378|
;;;3868        		} 
;;;3869   		else 
;;;3870        		{
;;;3871         		inv[i]._Ii=0;
003442  eb020042          ADD      r0,r2,r2,LSL #1
003446  eb061040          ADD      r0,r6,r0,LSL #5
00344a  61c3              STR      r3,[r0,#0x1c]
;;;3872   			inv[i]._Pio=0;
00344c  62c3              STR      r3,[r0,#0x2c]
;;;3873   			inv[i]._Uio=0;
00344e  6183              STR      r3,[r0,#0x18]
;;;3874        		inv[i]._Ti=0;
003450  6203              STR      r3,[r0,#0x20]
;;;3875        		inv[i]._flags_tm=0; 
003452  f8803046          STRB     r3,[r0,#0x46]
;;;3876        		inv[i]._Uil=0;
003456  6243              STR      r3,[r0,#0x24]
;;;3877        		inv[i]._Uin=0;
003458  6283              STR      r3,[r0,#0x28]
;;;3878   			inv[i]._cnt=25; 
00345a  f04f0119          MOV      r1,#0x19
00345e  7081              STRB     r1,[r0,#2]
;;;3879   			inv[i]._Uoutmin=0; 
003460  f8803059          STRB     r3,[r0,#0x59]
;;;3880   			inv[i]._Uoutmax=0; 
003464  f880305a          STRB     r3,[r0,#0x5a]
;;;3881   			inv[i]._Pnom=0; 
003468  f8803058          STRB     r3,[r0,#0x58]
;;;3882   			inv[i]._net_contr_en=0;
00346c  f880305b          STRB     r3,[r0,#0x5b]
;;;3883   			inv[i]._pwm_en=0;   
003470  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13428|
003474  f1020201          ADD      r2,r2,#1              ;3850
003478  b2d2              UXTB     r2,r2                 ;3850
                  |L1.13434|
00347a  42aa              CMP      r2,r5                 ;3850
00347c  db9c              BLT      |L1.13240|
                  |L1.13438|
;;;3884   			   
;;;3885        		}
;;;3886        	}
;;;3887      	}
;;;3888   #endif
;;;3889   
;;;3890   #ifdef GLADKOV
;;;3891   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3892   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3893   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3894   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3895   inv[0]._flags_tm=bps[4]._buff[7];
;;;3896   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3897   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3898   inv[0]._cnt=0;    
;;;3899   
;;;3900   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3901   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3902   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3903   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3904   inv[1]._flags_tm=bps[21]._buff[7];
;;;3905   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3906   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3907   inv[1]._cnt=0;    
;;;3908   #endif
;;;3909   
;;;3910   /*
;;;3911   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3912   	{
;;;3913   	lakb[0]._battCommState=0;
;;;3914   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3915   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3916   	
;;;3917   	if(lakb[0]._battCommState==0)
;;;3918   		{	
;;;3919   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3920   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3921   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3922   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3923   		}
;;;3924   	}
;;;3925   */
;;;3926   
;;;3927   #ifdef UKU_FSO
;;;3928   
;;;3929   	//if(BAT_TYPE==2)
;;;3930   		//{
;;;3931   		lakb[numOfPacks_]._ch_curr=((ascii2halFhex(liBatteryInBuff[105]))<<12)+
;;;3932   					 		((ascii2halFhex(liBatteryInBuff[106]))<<8)+
;;;3933   							((ascii2halFhex(liBatteryInBuff[107]))<<4)+
;;;3934   							((ascii2halFhex(liBatteryInBuff[108])));
;;;3935   		
;;;3936   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3937   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3938   	
;;;3939   		lakb[numOfPacks_]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[109]))<<12)+
;;;3940   							((ascii2halFhex(liBatteryInBuff[110]))<<8)+
;;;3941   							((ascii2halFhex(liBatteryInBuff[111]))<<4)+
;;;3942   							((ascii2halFhex(liBatteryInBuff[112]))))/10;
;;;3943   
;;;3944   
;;;3945   		lakb[numOfPacks_]._cell_temp_1= (signed char)((((ascii2halFhex(liBatteryInBuff[81]))<<12)+
;;;3946   							((ascii2halFhex(liBatteryInBuff[82]))<<8)+
;;;3947   							((ascii2halFhex(liBatteryInBuff[83]))<<4)+
;;;3948   							((ascii2halFhex(liBatteryInBuff[84]))))/100);
;;;3949   		lakb[numOfPacks_]._cell_temp_2= (signed char)((((ascii2halFhex(liBatteryInBuff[85]))<<12)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[86]))<<8)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[87]))<<4)+
;;;3952   							((ascii2halFhex(liBatteryInBuff[88]))))/100);
;;;3953   		lakb[numOfPacks_]._cell_temp_3= (signed char)((((ascii2halFhex(liBatteryInBuff[89]))<<12)+
;;;3954   							((ascii2halFhex(liBatteryInBuff[90]))<<8)+
;;;3955   							((ascii2halFhex(liBatteryInBuff[91]))<<4)+
;;;3956   							((ascii2halFhex(liBatteryInBuff[92]))))/100);
;;;3957   		lakb[numOfPacks_]._cell_temp_4= (signed char)((((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3959   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3960   							((ascii2halFhex(liBatteryInBuff[96]))))/100);
;;;3961   		lakb[numOfPacks_]._cell_temp_ambient= (signed char)((((ascii2halFhex(liBatteryInBuff[97]))<<12)+
;;;3962   							((ascii2halFhex(liBatteryInBuff[98]))<<8)+
;;;3963   							((ascii2halFhex(liBatteryInBuff[99]))<<4)+
;;;3964   							((ascii2halFhex(liBatteryInBuff[100]))))/100);
;;;3965   		lakb[numOfPacks_]._cell_temp_power= (signed char)((((ascii2halFhex(liBatteryInBuff[101]))<<12)+
;;;3966   							((ascii2halFhex(liBatteryInBuff[102]))<<8)+
;;;3967   							((ascii2halFhex(liBatteryInBuff[103]))<<4)+
;;;3968   							((ascii2halFhex(liBatteryInBuff[104]))))/100);
;;;3969   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_ambient,'[',0);
;;;3970   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_power,']',0);
;;;3971   	
;;;3972   /*		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3975   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;	*/
;;;3976   	
;;;3977   		lakb[numOfPacks_]._s_o_c=		(unsigned short)((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3978   							((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3980   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3981   	
;;;3982   		lakb[numOfPacks_]._s_o_h=		(unsigned short)((ascii2halFhex(liBatteryInBuff[119]))<<12)+
;;;3983   							((ascii2halFhex(liBatteryInBuff[120]))<<8)+
;;;3984   							((ascii2halFhex(liBatteryInBuff[121]))<<4)+
;;;3985   							((ascii2halFhex(liBatteryInBuff[122])));
;;;3986   
;;;3987   		if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;3988   
;;;3989   		temp_SL=((signed long)lakb[numOfPacks_]._s_o_c)*100L;
;;;3990   		temp_SL/=(signed long)lakb[numOfPacks_]._s_o_h;
;;;3991   		lakb[numOfPacks_]._s_o_c_percent=(signed short)temp_SL;
;;;3992   			
;;;3993   
;;;3994   		lakb[numOfPacks_]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3995   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3996   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3997   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3998   	
;;;3999   		//lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4000   
;;;4001   		if(sTARKSilentCnt[numOfPacks_]==10)
;;;4002   			{
;;;4003   		lakb[numOfPacks_]._ch_curr=0;
;;;4004   		lakb[numOfPacks_]._tot_bat_volt=0;
;;;4005   		lakb[numOfPacks_]._cell_temp_1=0;
;;;4006   		lakb[numOfPacks_]._cell_temp_2=0;
;;;4007   		lakb[numOfPacks_]._cell_temp_3=0;
;;;4008   		lakb[numOfPacks_]._cell_temp_4=0;
;;;4009   		lakb[numOfPacks_]._cell_temp_ambient=0;
;;;4010   		lakb[numOfPacks_]._cell_temp_power=0;
;;;4011   		lakb[numOfPacks_]._s_o_c=0;
;;;4012   		lakb[numOfPacks_]._s_o_h=0;
;;;4013   		if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;4014   		lakb[numOfPacks_]._s_o_c_percent=0;
;;;4015   		lakb[numOfPacks_]._rat_cap=0;
;;;4016   			}
;;;4017   
;;;4018   
;;;4019   //Внешний датчик температуры 
;;;4020   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
;;;4021   else ND_EXT[0]=1;
;;;4022   temp_SL=(signed long)adc_buff_[6];
;;;4023   temp_SL*=Ktext[0];
;;;4024   temp_SL/=20000L;
;;;4025   temp_SL-=273L;
;;;4026   t_ext[0]=(signed short)temp_SL;
;;;4027   
;;;4028   
;;;4029   	
;;;4030   #endif //UKU_FSO	
;;;4031   
;;;4032   
;;;4033   
;;;4034   #ifdef UKU_TELECORE2015
;;;4035   
;;;4036   	if(BAT_TYPE==2)
;;;4037   		{
;;;4038   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4039   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4040   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4041   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4042   		
;;;4043   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;4044   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;4045   	
;;;4046   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;4047   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;4048   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;4049   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;4050   	
;;;4051   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;4052   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;4053   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;4054   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;4055   	
;;;4056   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;4057   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;4058   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;4059   							((ascii2halFhex(liBatteryInBuff[124])));
;;;4060   	
;;;4061   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4062   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4063   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4064   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4065   	
;;;4066   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4067   	
;;;4068   	
;;;4069   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4070   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4071   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4072   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;4073   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;4074   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4075   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;4076   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4077   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;4078   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;4079   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4080   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;4081   	
;;;4082   		if(lakb[i]._rat_cap==0)
;;;4083   			{
;;;4084   			if(lakb[i]._isOnCnt)
;;;4085   				{
;;;4086   				lakb[i]._isOnCnt--;
;;;4087   				if(lakb[i]._isOnCnt==0)
;;;4088   					{
;;;4089   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4090   					}
;;;4091   				}
;;;4092   			}
;;;4093   		else 
;;;4094   			{
;;;4095   			if(lakb[i]._isOnCnt<50)
;;;4096   				{
;;;4097   				lakb[i]._isOnCnt++;
;;;4098   				if(lakb[i]._isOnCnt==50)
;;;4099   					{
;;;4100   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4101   					}
;;;4102   				}
;;;4103   			}
;;;4104   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;4105   		}
;;;4106   	else if(BAT_TYPE==3)
;;;4107   		{
;;;4108   		//short numOfPacks;
;;;4109   		//short numOfCells, numOfTemperCells, baseOfData;
;;;4110   		
;;;4111   		#ifndef UKU_TELECORE2016
;;;4112   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;4113   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;4114   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;4115   		if(numOfPacks)numOfPacks-=1;
;;;4116   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;4117   		plazma_numOfCells=numOfCells;
;;;4118   		plazma_numOfTemperCells=numOfTemperCells;
;;;4119   		plazma_numOfPacks=numOfPacks;
;;;4120   
;;;4121   
;;;4122   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;4123   
;;;4124   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;4125   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;4126   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;4127   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;4128   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;4129   							);	  
;;;4130   
;;;4131   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;4132   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;4133   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;4134   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;4135   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;4136   							)/10;
;;;4137   
;;;4138   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;4139   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;4140   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;4141   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;4142   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;4143   							)-2730;
;;;4144   
;;;4145   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;4146   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;4147   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;4148   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;4149   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;4150   							)/10;
;;;4151   
;;;4152   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;4153   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4154   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4155   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4156   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4157   							)/10;
;;;4158   		#endif
;;;4159   		
;;;4160   		#ifdef UKU_TELECORE2016
;;;4161   		{
;;;4162   		char i;
;;;4163   		
;;;4164   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4165   			{
;;;4166   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4167   			}
;;;4168   		}
;;;4169   		#endif
;;;4170   		
;;;4171   										  
;;;4172   		}
;;;4173   	
;;;4174   if(sacredSunSilentCnt<3) 
;;;4175   	{
;;;4176       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4177       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4178      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4179   	}
;;;4180   else 
;;;4181   	{
;;;4182       	//bat[0]._Ub=0;
;;;4183       	//bat[0]._Tb=0;
;;;4184      	//bat[0]._Ib=0;
;;;4185   	}
;;;4186   
;;;4187   if(BAT_TYPE==1)
;;;4188   	{
;;;4189   	char i;
;;;4190   	for(i=0;i<1;i++)
;;;4191   		{
;;;4192   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4193   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4194   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4195   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4196   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4197   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4198   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4199   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4200   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4201   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4202   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4203   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4204   		lakb[i]._flags1= lakb_damp[i][34];
;;;4205   		lakb[i]._flags2= lakb_damp[i][35];
;;;4206   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4207   
;;;4208   /*		if(lakb[i]._rat_cap==0)
;;;4209   			{
;;;4210   			if(lakb[i]._isOnCnt)
;;;4211   				{
;;;4212   				lakb[i]._isOnCnt--;
;;;4213   				if(lakb[i]._isOnCnt==0)
;;;4214   					{
;;;4215   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4216   					}
;;;4217   				}
;;;4218   			}
;;;4219   		else 
;;;4220   			{
;;;4221   			if(lakb[i]._isOnCnt<50)
;;;4222   				{
;;;4223   				lakb[i]._isOnCnt++;
;;;4224   				if(lakb[i]._isOnCnt==50)
;;;4225   					{
;;;4226   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4227   					}
;;;4228   				}
;;;4229   			} */
;;;4230   		gran(&lakb[i]._isOnCnt,0,50);
;;;4231   	 	}
;;;4232   
;;;4233   	if(lakb_damp[0][41]==100)
;;;4234   		{
;;;4235   		li_bat._485Error=1;
;;;4236   		}
;;;4237   	if(lakb_damp[0][41]==0)
;;;4238   		{
;;;4239   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4240   		li_bat._485Error=0;
;;;4241   		}
;;;4242   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4243   
;;;4244   
;;;4245   	}
;;;4246   
;;;4247   
;;;4248   #endif
;;;4249   
;;;4250   		#ifdef UKU_TELECORE2017
;;;4251   		{
;;;4252   		char i;
;;;4253   		
;;;4254   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4255   			{
;;;4256   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4257   			}
;;;4258   		}
;;;4259   		#endif
;;;4260   #ifdef UKU_TELECORE2015
;;;4261   //вычисление параметров работы батареи
;;;4262   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4263   li_bat._batStat=bsOK;
;;;4264   if(BAT_TYPE==1) //COSLIGHT
;;;4265   	{
;;;4266   	if(li_bat._batStat==bsOK)
;;;4267   		{
;;;4268   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4269   
;;;4270   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4271   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4272   	
;;;4273   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4274   		li_bat._soc=lakb[0]._s_o_c;
;;;4275   		li_bat._soh=lakb[0]._s_o_h;
;;;4276   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4277   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4278   		li_bat._rbt=lakb[0]._r_b_t;
;;;4279   		}
;;;4280   	else 
;;;4281   		{
;;;4282   		li_bat._Ub=bat[0]._Ub;
;;;4283   		li_bat._Ib=bat[0]._Ib/10;
;;;4284   		li_bat._Tb=bat[0]._Tb;
;;;4285   		}
;;;4286   
;;;4287   	if((li_bat._485Error)||(li_bat._canError))
;;;4288   		{
;;;4289   		li_bat._batStat=bsOFF;
;;;4290   		}
;;;4291   	else li_bat._batStat=bsOK;
;;;4292   	}
;;;4293   else if(BAT_TYPE==2) //SACRED SUN
;;;4294   	{
;;;4295   	}
;;;4296   else if(BAT_TYPE==3) //ZTT
;;;4297   	{
;;;4298   	if(li_bat._batStat==bsOK)
;;;4299   		{
;;;4300   
;;;4301   		}
;;;4302   	}
;;;4303   #endif
;;;4304   
;;;4305   
;;;4306   /*
;;;4307   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4308   	{
;;;4309   
;;;4310   
;;;4311   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4312   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4313   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4314   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4315   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4316   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4317   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4318   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4319   
;;;4320   	tempSS=0;
;;;4321   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4322   
;;;4323   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4324   
;;;4325   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4326   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4327   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4328   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4329   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4330   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4331   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4332   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4333   
;;;4334   	tempSS=0;
;;;4335   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4336   
;;;4337   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4338   
;;;4339   
;;;4340   	}*/
;;;4341   }
00347e  e8bd9fff          POP      {r0-r12,pc}
003482  0000              DCW      0x0000
                  |L1.13444|
                          DCD      Kibat1
                  |L1.13448|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13452|
                          DCD      bat
                  |L1.13456|
                          DCD      adc_buff_ext_
                  |L1.13460|
                          DCD      Kunet_ext
                  |L1.13464|
                          DCD      Uvv
                  |L1.13468|
                          DCD      Uvv0
                  |L1.13472|
                          DCD      net_U
                  |L1.13476|
                          DCD      eb2_data_short
                  |L1.13480|
                          DCD      Kvv_eb2
                  |L1.13484|
                          DCD      Uvv_eb2
                  |L1.13488|
                          DCD      Kpes_eb2
                  |L1.13492|
                          DCD      Upes_eb2
                  |L1.13496|
                          DCD      t_ext
                  |L1.13500|
                          DCD      ibt
                  |L1.13504|
                          DCD      t_box
                  |L1.13508|
                          DCD      t_ext_can_nd
                  |L1.13512|
                          DCD      t_ext_can
                  |L1.13516|
                          DCD      BAT_IS_ON
                  |L1.13520|
                          DCD      load_I
                  |L1.13524|
                          DCD      Isumm
                  |L1.13528|
                          DCD      NUMINV
                  |L1.13532|
                          DCD      inv
                          ENDP

                  mnemo_hndl PROC
;;;4402   //-----------------------------------------------
;;;4403   void mnemo_hndl(void)
0034e0  4afb              LDR      r2,|L1.14544|
;;;4404   {
;;;4405   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4406   	{
;;;4407   	if(mnemo_cnt)mnemo_cnt--;
0034e2  49fc              LDR      r1,|L1.14548|
0034e4  7810              LDRB     r0,[r2,#0]            ;4405  ; a_ind
0034e6  2804              CMP      r0,#4                 ;4405
0034e8  d001              BEQ      |L1.13550|
0034ea  2801              CMP      r0,#1                 ;4405
0034ec  d105              BNE      |L1.13562|
                  |L1.13550|
0034ee  7850              LDRB     r0,[r2,#1]            ;4405  ; a_ind
0034f0  b918              CBNZ     r0,|L1.13562|
0034f2  48f9              LDR      r0,|L1.14552|
0034f4  7800              LDRB     r0,[r0,#0]            ;4405  ; MNEMO_ON
0034f6  2855              CMP      r0,#0x55              ;4405
0034f8  d003              BEQ      |L1.13570|
                  |L1.13562|
;;;4408   	}
;;;4409   else mnemo_cnt=MNEMO_TIME;
0034fa  48f8              LDR      r0,|L1.14556|
0034fc  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0034fe  7008              STRB     r0,[r1,#0]
                  |L1.13568|
;;;4410   }
003500  4770              BX       lr
                  |L1.13570|
003502  7808              LDRB     r0,[r1,#0]            ;4407  ; mnemo_cnt
003504  2800              CMP      r0,#0                 ;4407
003506  d0fb              BEQ      |L1.13568|
003508  f1a00001          SUB      r0,r0,#1              ;4407
00350c  7008              STRB     r0,[r1,#0]            ;4407
00350e  4770              BX       lr
;;;4411   
                          ENDP

                  apv_start PROC
;;;4412   //-----------------------------------------------
;;;4413   void apv_start(char in)
003510  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4414   {
;;;4415   if(	(bps[in]._apv_timer_1_lev==0)&&
003514  eb011100          ADD      r1,r1,r0,LSL #4
003518  48f1              LDR      r0,|L1.14560|
00351a  eb000081          ADD      r0,r0,r1,LSL #2
00351e  f890105e          LDRB     r1,[r0,#0x5e]
003522  2900              CMP      r1,#0
003524  d115              BNE      |L1.13650|
;;;4416   	(bps[in]._apv_cnt_1_lev==0)&&
003526  f890105f          LDRB     r1,[r0,#0x5f]
00352a  2900              CMP      r1,#0
00352c  d111              BNE      |L1.13650|
;;;4417   	(bps[in]._apv_timer_2_lev==0) )
00352e  f8b01060          LDRH     r1,[r0,#0x60]
003532  2900              CMP      r1,#0
003534  d10d              BNE      |L1.13650|
;;;4418   		{
;;;4419    		bps[in]._apv_timer_1_lev=60;
003536  f04f013c          MOV      r1,#0x3c
00353a  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4420   		bps[in]._apv_cnt_1_lev=3;
00353e  f04f0103          MOV      r1,#3
003542  7041              STRB     r1,[r0,#1]
;;;4421   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003544  49e7              LDR      r1,|L1.14564|
003546  f44f6261          MOV      r2,#0xe10
00354a  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
00354c  fb01f102          MUL      r1,r1,r2
003550  8041              STRH     r1,[r0,#2]
                  |L1.13650|
;;;4422   		}
;;;4423   }
003552  4770              BX       lr
;;;4424   
                          ENDP

                  apv_stop PROC
;;;4425   //-----------------------------------------------
;;;4426   void apv_stop(char in)
003554  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4427   {
;;;4428   bps[in]._apv_timer_1_lev=0;
003558  eb021200          ADD      r2,r2,r0,LSL #4
00355c  48e0              LDR      r0,|L1.14560|
00355e  f04f0100          MOV      r1,#0
003562  eb000082          ADD      r0,r0,r2,LSL #2
003566  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4429   bps[in]._apv_cnt_1_lev=0;
00356a  7041              STRB     r1,[r0,#1]
;;;4430   bps[in]._apv_timer_2_lev=0;
00356c  8041              STRH     r1,[r0,#2]
;;;4431   }
00356e  4770              BX       lr
;;;4432   
                          ENDP

                  apv_drv PROC
;;;4433   //-----------------------------------------------
;;;4434   void apv_drv(void)		//1 Гц
003570  e92d43f0          PUSH     {r4-r9,lr}
;;;4435   {
;;;4436   for(i=0;i<NUMIST;i++)
003574  4edc              LDR      r6,|L1.14568|
003576  f04f0300          MOV      r3,#0
00357a  75f3              STRB     r3,[r6,#0x17]
;;;4437   	{
;;;4438   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4439   		{
;;;4440   		bps[i]._apv_timer_1_lev=0;
;;;4441   		bps[i]._apv_cnt_1_lev=0;
;;;4442   		bps[i]._apv_timer_2_lev=0;
;;;4443   		}
;;;4444   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
00357c  4cdb              LDR      r4,|L1.14572|
;;;4445   		{
;;;4446   		bps[i]._apv_timer_2_lev=0;
;;;4447   		}
;;;4448   
;;;4449   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4450   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4451   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4452   			{
;;;4453   			if(bps[i]._state==bsWRK)
;;;4454   				{
;;;4455   				if(bps[i]._apv_succes_timer<60)
;;;4456   					{
;;;4457   					bps[i]._apv_succes_timer++;
;;;4458   					if(bps[i]._apv_succes_timer>=60)
;;;4459   						{
;;;4460   						apv_stop(i);
;;;4461   						}
;;;4462   					}
;;;4463   				}
;;;4464   			else bps[i]._apv_succes_timer=0;
;;;4465   			}
;;;4466   
;;;4467   	if(bps[i]._apv_timer_1_lev)
;;;4468   		{
;;;4469   		bps[i]._apv_timer_2_lev=0;
;;;4470   		bps[i]._apv_timer_1_lev--;
;;;4471   		if(bps[i]._apv_timer_1_lev==0)
;;;4472   			{
;;;4473   			if(bps[i]._apv_cnt_1_lev)
;;;4474   				{
;;;4475   				bps[i]._apv_cnt_1_lev--;
;;;4476   				bps[i]._apv_timer_1_lev=60;
00357e  f04f073c          MOV      r7,#0x3c
;;;4477   				bps[i]._apv_reset_av_timer=2;
003582  f04f0802          MOV      r8,#2
003586  4dd6              LDR      r5,|L1.14560|
003588  f8df9364          LDR      r9,|L1.14576|
00358c  e079              B        |L1.13954|
                  |L1.13710|
00358e  49d9              LDR      r1,|L1.14580|
003590  7809              LDRB     r1,[r1,#0]            ;4438  ; APV_ON1
003592  b949              CBNZ     r1,|L1.13736|
003594  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4440
003598  eb011100          ADD      r1,r1,r0,LSL #4       ;4440
00359c  eb050181          ADD      r1,r5,r1,LSL #2       ;4440
0035a0  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4440
0035a4  704b              STRB     r3,[r1,#1]            ;4441
0035a6  804b              STRH     r3,[r1,#2]            ;4442
                  |L1.13736|
0035a8  7821              LDRB     r1,[r4,#0]            ;4444  ; APV_ON2
0035aa  b939              CBNZ     r1,|L1.13756|
0035ac  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4446
0035b0  eb011100          ADD      r1,r1,r0,LSL #4       ;4446
0035b4  eb050181          ADD      r1,r5,r1,LSL #2       ;4446
0035b8  f8a13060          STRH     r3,[r1,#0x60]         ;4446
                  |L1.13756|
0035bc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4449
0035c0  eb011100          ADD      r1,r1,r0,LSL #4       ;4449
0035c4  eb050181          ADD      r1,r5,r1,LSL #2       ;4449
0035c8  f891205e          LDRB     r2,[r1,#0x5e]         ;4449
0035cc  b92a              CBNZ     r2,|L1.13786|
0035ce  f891205f          LDRB     r2,[r1,#0x5f]         ;4450
0035d2  b912              CBNZ     r2,|L1.13786|
0035d4  f8b12060          LDRH     r2,[r1,#0x60]         ;4451
0035d8  b122              CBZ      r2,|L1.13796|
                  |L1.13786|
0035da  788a              LDRB     r2,[r1,#2]            ;4453
0035dc  2a01              CMP      r2,#1                 ;4453
0035de  d014              BEQ      |L1.13834|
0035e0  f8813063          STRB     r3,[r1,#0x63]         ;4464
                  |L1.13796|
0035e4  7df1              LDRB     r1,[r6,#0x17]         ;4467  ; i
0035e6  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4467
0035ea  eb001001          ADD      r0,r0,r1,LSL #4       ;4467
0035ee  eb050080          ADD      r0,r5,r0,LSL #2       ;4467
0035f2  f890205e          LDRB     r2,[r0,#0x5e]         ;4467
0035f6  b30a              CBZ      r2,|L1.13884|
0035f8  f8a03060          STRH     r3,[r0,#0x60]         ;4469
0035fc  f1a20201          SUB      r2,r2,#1              ;4470
003600  b2d2              UXTB     r2,r2                 ;4470
003602  f880205e          STRB     r2,[r0,#0x5e]         ;4470
003606  b172              CBZ      r2,|L1.13862|
003608  e024              B        |L1.13908|
                  |L1.13834|
00360a  f8912063          LDRB     r2,[r1,#0x63]         ;4455
00360e  2a3c              CMP      r2,#0x3c              ;4455
003610  d2e8              BCS      |L1.13796|
003612  f1020201          ADD      r2,r2,#1              ;4457
003616  b2d2              UXTB     r2,r2                 ;4457
003618  f8812063          STRB     r2,[r1,#0x63]         ;4457
00361c  2a3c              CMP      r2,#0x3c              ;4458
00361e  d3e1              BCC      |L1.13796|
003620  f7fffffe          BL       apv_stop
003624  e7de              B        |L1.13796|
                  |L1.13862|
003626  f890205f          LDRB     r2,[r0,#0x5f]         ;4473
00362a  b142              CBZ      r2,|L1.13886|
00362c  f1a20201          SUB      r2,r2,#1              ;4475
003630  f880205f          STRB     r2,[r0,#0x5f]         ;4475
003634  f880705e          STRB     r7,[r0,#0x5e]         ;4476
003638  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13884|
00363c  e00a              B        |L1.13908|
                  |L1.13886|
;;;4478   				}
;;;4479   			else
;;;4480   				{
;;;4481   				if(APV_ON2==apvON)
00363e  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003640  2a01              CMP      r2,#1
003642  d107              BNE      |L1.13908|
;;;4482   					{
;;;4483   					bps[i]._apv_timer_1_lev=0;
;;;4484   					bps[i]._apv_cnt_1_lev=0;
;;;4485   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003644  4aa7              LDR      r2,|L1.14564|
003646  f44f6c61          MOV      r12,#0xe10
00364a  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
00364c  fb02f20c          MUL      r2,r2,r12
003650  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13908|
;;;4486   					}
;;;4487   				}
;;;4488   			
;;;4489   			}
;;;4490   		}
;;;4491   	if(bps[i]._apv_timer_2_lev)
003654  f8b02060          LDRH     r2,[r0,#0x60]
003658  b14a              CBZ      r2,|L1.13934|
;;;4492   		{
;;;4493   		bps[i]._apv_timer_2_lev--;
00365a  f1a20201          SUB      r2,r2,#1
00365e  b292              UXTH     r2,r2
003660  f8a02060          STRH     r2,[r0,#0x60]
;;;4494   		if(bps[i]._apv_timer_2_lev==0)
003664  b91a              CBNZ     r2,|L1.13934|
;;;4495   			{
;;;4496   			bps[i]._apv_cnt_1_lev=2;
003666  f880805f          STRB     r8,[r0,#0x5f]
;;;4497   			bps[i]._apv_timer_1_lev=60;
00366a  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13934|
;;;4498   			}
;;;4499   		}
;;;4500   
;;;4501   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
00366e  f8902062          LDRB     r2,[r0,#0x62]
003672  b11a              CBZ      r2,|L1.13948|
003674  f1a20201          SUB      r2,r2,#1
003678  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13948|
00367c  f1010101          ADD      r1,r1,#1              ;4436
003680  75f1              STRB     r1,[r6,#0x17]         ;4436
                  |L1.13954|
003682  7df0              LDRB     r0,[r6,#0x17]         ;4436  ; i
003684  f9b91000          LDRSH    r1,[r9,#0]            ;4436  ; NUMIST
003688  4288              CMP      r0,r1                 ;4436
00368a  db80              BLT      |L1.13710|
;;;4502   	} 
;;;4503   /*char i;
;;;4504   for(i=0;i<2;i++) 
;;;4505   	{
;;;4506   	if(apv_cnt_sec[i])
;;;4507   		{
;;;4508   		apv_cnt_sec[i]--;
;;;4509   		if(apv_cnt_sec[i]==0)
;;;4510   			{
;;;4511   			cnt_av_umax[i]=0;
;;;4512   			cnt_av_umin[i]=0;
;;;4513   			reset_apv_cnt[i]=600;
;;;4514   			}
;;;4515   		}
;;;4516   	
;;;4517   	if(reset_apv_cnt[i])
;;;4518   		{
;;;4519   		reset_apv_cnt[i]--;
;;;4520   		if(reset_apv_cnt[i]==0)
;;;4521   			{
;;;4522   			apv_cnt[i]=0;
;;;4523   			}
;;;4524   		}	
;;;4525   		
;;;4526   	if(hour_apv_cnt[i])
;;;4527   		{
;;;4528   		hour_apv_cnt[i]--;
;;;4529   		if(hour_apv_cnt[i]==0)
;;;4530   			{
;;;4531   			apv_cnt[i]=0;
;;;4532   			avar_src_reset(i);
;;;4533   			}
;;;4534   		}			
;;;4535   	}
;;;4536   
;;;4537   
;;;4538   
;;;4539   
;;;4540   if(apv_cnt_1)
;;;4541   	{
;;;4542   	apv_cnt_1--;
;;;4543   	if(!apv_cnt_1) 
;;;4544   		{
;;;4545   		avar_src_reset(0);
;;;4546   		avar_src_reset(1);
;;;4547   		//cntrl_stat=0;
;;;4548   		}
;;;4549   	}*/		
;;;4550   }
00368c  e8bd83f0          POP      {r4-r9,pc}
;;;4551   
                          ENDP

                  adc_init PROC
;;;4552   //-----------------------------------------------
;;;4553   void adc_init(void)
003690  4899              LDR      r0,|L1.14584|
;;;4554   {
;;;4555   
;;;4556   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
003692  6841              LDR      r1,[r0,#4]
003694  f4212140          BIC      r1,r1,#0xc0000
003698  f4412180          ORR      r1,r1,#0x40000
00369c  6041              STR      r1,[r0,#4]
;;;4557   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00369e  6841              LDR      r1,[r0,#4]
0036a0  f4213140          BIC      r1,r1,#0x30000
0036a4  f4413180          ORR      r1,r1,#0x10000
0036a8  6041              STR      r1,[r0,#4]
;;;4558   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0036aa  6841              LDR      r1,[r0,#4]
0036ac  f4214140          BIC      r1,r1,#0xc000
0036b0  f4414180          ORR      r1,r1,#0x4000
0036b4  6041              STR      r1,[r0,#4]
;;;4559   
;;;4560   
;;;4561   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0036b6  6c41              LDR      r1,[r0,#0x44]
0036b8  f4212140          BIC      r1,r1,#0xc0000
0036bc  f4412100          ORR      r1,r1,#0x80000
0036c0  6441              STR      r1,[r0,#0x44]
;;;4562   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0036c2  6c41              LDR      r1,[r0,#0x44]
0036c4  f4213140          BIC      r1,r1,#0x30000
0036c8  f4413100          ORR      r1,r1,#0x20000
0036cc  6441              STR      r1,[r0,#0x44]
;;;4563   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0036ce  6c41              LDR      r1,[r0,#0x44]
0036d0  f4214140          BIC      r1,r1,#0xc000
0036d4  f4414100          ORR      r1,r1,#0x8000
0036d8  6441              STR      r1,[r0,#0x44]
;;;4564   
;;;4565   SET_REG(LPC_ADC->ADCR,0,24,3);
0036da  4888              LDR      r0,|L1.14588|
0036dc  6801              LDR      r1,[r0,#0]
0036de  f02161e0          BIC      r1,r1,#0x7000000
0036e2  6001              STR      r1,[r0,#0]
;;;4566   
;;;4567   SET_REG(LPC_ADC->ADCR,1,21,1);
0036e4  6801              LDR      r1,[r0,#0]
0036e6  f4411100          ORR      r1,r1,#0x200000
0036ea  6001              STR      r1,[r0,#0]
;;;4568   SET_REG(LPC_ADC->ADCR,0,16,1);
0036ec  6801              LDR      r1,[r0,#0]
0036ee  f4213180          BIC      r1,r1,#0x10000
0036f2  6001              STR      r1,[r0,#0]
;;;4569   SET_REG(LPC_ADC->ADCR,1,8,8);
0036f4  6801              LDR      r1,[r0,#0]
0036f6  f421417f          BIC      r1,r1,#0xff00
0036fa  f4417180          ORR      r1,r1,#0x100
0036fe  6001              STR      r1,[r0,#0]
;;;4570   
;;;4571   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4572   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4573   	
;;;4574   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4575        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4576        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4577   
;;;4578   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003700  f44f7180          MOV      r1,#0x100
003704  60c1              STR      r1,[r0,#0xc]
003706  487e              LDR      r0,|L1.14592|
003708  f44f0180          MOV      r1,#0x400000
00370c  6001              STR      r1,[r0,#0]
;;;4579   
;;;4580   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4581   
;;;4582   
;;;4583   }
00370e  4770              BX       lr
;;;4584   
                          ENDP

                  adc_drv7 PROC
;;;4585   //-----------------------------------------------
;;;4586   void adc_drv7(void) //(Uсети - постоянка)
003710  e92d41f0          PUSH     {r4-r8,lr}
;;;4587   {
;;;4588   //int temp_S;
;;;4589   //char i;
;;;4590   //signed short temp_SS;
;;;4591   
;;;4592   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
003714  4c74              LDR      r4,|L1.14568|
003716  34f2              ADDS     r4,r4,#0xf2
003718  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00371a  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00371c  1a40              SUBS     r0,r0,r1
00371e  b200              SXTH     r0,r0
003720  f7fffffe          BL       abs_pal
003724  1da6              ADDS     r6,r4,#6
003726  8030              STRH     r0,[r6,#0]
;;;4593   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003728  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00372a  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00372c  1a40              SUBS     r0,r0,r1
00372e  b200              SXTH     r0,r0
003730  f7fffffe          BL       abs_pal
003734  8070              STRH     r0,[r6,#2]
;;;4594   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
003736  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003738  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00373a  1a40              SUBS     r0,r0,r1
00373c  b200              SXTH     r0,r0
00373e  f7fffffe          BL       abs_pal
003742  80b0              STRH     r0,[r6,#4]
;;;4595   
;;;4596   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4597   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4598   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4599   
;;;4600   
;;;4601   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003744  f44f7196          MOV      r1,#0x12c
;;;4602   	{
;;;4603   	adc_result=adc_self_ch_buff[2];
003748  4d67              LDR      r5,|L1.14568|
00374a  4288              CMP      r0,r1                 ;4601
00374c  da02              BGE      |L1.14164|
00374e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003750  87a8              STRH     r0,[r5,#0x3c]
003752  e00c              B        |L1.14190|
                  |L1.14164|
;;;4604   	} 
;;;4605   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003754  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003758  4288              CMP      r0,r1
00375a  da02              BGE      |L1.14178|
;;;4606   	{
;;;4607   	adc_result=adc_self_ch_buff[1];
00375c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00375e  87a8              STRH     r0,[r5,#0x3c]
003760  e005              B        |L1.14190|
                  |L1.14178|
;;;4608   	}
;;;4609   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003762  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003766  4288              CMP      r0,r1
003768  da01              BGE      |L1.14190|
;;;4610   	{
;;;4611   	adc_result=adc_self_ch_buff[0];
00376a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00376c  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14190|
;;;4612   	}
;;;4613       //adc_result=92;
;;;4614   
;;;4615   if(adc_ch_net)
00376e  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003770  2600              MOVS     r6,#0
003772  b347              CBZ      r7,|L1.14278|
;;;4616   	{
;;;4617   
;;;4618   	main_power_buffer[0]+=(long)(adc_result);
003774  4863              LDR      r0,|L1.14596|
003776  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
00377a  6802              LDR      r2,[r0,#0]  ; main_power_buffer
00377c  440a              ADD      r2,r2,r1
00377e  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4619   	main_power_buffer[1]+=(long)(adc_result);
003780  6842              LDR      r2,[r0,#4]  ; main_power_buffer
003782  440a              ADD      r2,r2,r1
003784  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4620   	main_power_buffer[2]+=(long)(adc_result);
003786  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003788  440a              ADD      r2,r2,r1
00378a  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4621   	main_power_buffer[3]+=(long)(adc_result);
00378c  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00378e  4411              ADD      r1,r1,r2
003790  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4622   
;;;4623   	adc_net_buff_cnt++;
003792  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
003796  f1010101          ADD      r1,r1,#1
00379a  b209              SXTH     r1,r1
00379c  f8a51044          STRH     r1,[r5,#0x44]
;;;4624   	if(adc_net_buff_cnt>=0x1000)
0037a0  f5b15f80          CMP      r1,#0x1000
0037a4  db01              BLT      |L1.14250|
;;;4625   		{
;;;4626   		adc_net_buff_cnt=0;
0037a6  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14250|
;;;4627   		}
;;;4628   	if((adc_net_buff_cnt&0x03ff)==0)
0037aa  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0037ae  058a              LSLS     r2,r1,#22
0037b0  d131              BNE      |L1.14358|
;;;4629   		{
;;;4630   		#ifdef UKU_220
;;;4631   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4632   		#else
;;;4633   		#ifdef UKU_220_V2
;;;4634   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4635   		#else
;;;4636   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0037b2  ea4f21a1          ASR      r1,r1,#10
0037b6  f8502021          LDR      r2,[r0,r1,LSL #2]
0037ba  ea4f2222          ASR      r2,r2,#8
0037be  876a              STRH     r2,[r5,#0x3a]
;;;4637   		#endif
;;;4638   		#endif
;;;4639   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0037c0  f8406021          STR      r6,[r0,r1,LSL #2]
0037c4  e027              B        |L1.14358|
                  |L1.14278|
;;;4640   		}
;;;4641   
;;;4642   
;;;4643   	} 
;;;4644   else if(!adc_ch_net)
;;;4645   	{
;;;4646   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0037c6  4850              LDR      r0,|L1.14600|
0037c8  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0037ca  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0037cc  eb001384          ADD      r3,r0,r4,LSL #6
0037d0  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0037d4  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4647   	
;;;4648   	if((adc_ch_cnt&0x03)==0)
0037d8  0790              LSLS     r0,r2,#30
0037da  d10f              BNE      |L1.14332|
;;;4649   		{
;;;4650   		long temp_L;
;;;4651   		char i;
;;;4652   		temp_L=0;
0037dc  4601              MOV      r1,r0
                  |L1.14302|
;;;4653   		for(i=0;i<16;i++)
;;;4654   			{
;;;4655   			temp_L+=adc_buff[adc_ch][i];
0037de  f853c020          LDR      r12,[r3,r0,LSL #2]
0037e2  4461              ADD      r1,r1,r12
0037e4  f1000001          ADD      r0,r0,#1              ;4653
0037e8  b2c0              UXTB     r0,r0                 ;4653
0037ea  2810              CMP      r0,#0x10              ;4653
0037ec  d3f7              BCC      |L1.14302|
;;;4656   			}
;;;4657   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0037ee  ea4f1021          ASR      r0,r1,#4
0037f2  4944              LDR      r1,|L1.14596|
0037f4  f1a10120          SUB      r1,r1,#0x20
0037f8  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14332|
;;;4658   
;;;4659   		//adc_buff_[3]=346;
;;;4660   		}
;;;4661   	if(++adc_ch>=16) 
0037fc  1c64              ADDS     r4,r4,#1
0037fe  b2e0              UXTB     r0,r4
003800  74a8              STRB     r0,[r5,#0x12]
003802  2810              CMP      r0,#0x10
003804  d307              BCC      |L1.14358|
;;;4662   		{
;;;4663   		adc_ch=0;
003806  74ae              STRB     r6,[r5,#0x12]
;;;4664   		adc_ch_cnt++;
003808  f1020201          ADD      r2,r2,#1
00380c  b2d0              UXTB     r0,r2
00380e  74e8              STRB     r0,[r5,#0x13]
;;;4665   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003810  2810              CMP      r0,#0x10
003812  d300              BCC      |L1.14358|
003814  74ee              STRB     r6,[r5,#0x13]
                  |L1.14358|
;;;4666   		}
;;;4667   	}
;;;4668   
;;;4669   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4670   
;;;4671   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4672   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4673   /*
;;;4674   	{
;;;4675   	if((adc_cnt1&0x03)==0)
;;;4676   		{
;;;4677   		temp_S=0;
;;;4678   		for(i=0;i<16;i++)
;;;4679   			{
;;;4680   			temp_S+=adc_buff[adc_ch][i];
;;;4681   			} 
;;;4682            	adc_buff_[adc_ch]=temp_S>>4;
;;;4683             }
;;;4684   	}*/
;;;4685   
;;;4686   
;;;4687   		  
;;;4688   
;;;4689   adc_self_ch_cnt=0;
003816  742e              STRB     r6,[r5,#0x10]
;;;4690   
;;;4691   adc_ch_net++;
003818  f1070701          ADD      r7,r7,#1
;;;4692   adc_ch_net&=1;
00381c  f0070001          AND      r0,r7,#1
003820  7468              STRB     r0,[r5,#0x11]
;;;4693   
;;;4694   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4695   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4696   
;;;4697   if(adc_ch_net)
;;;4698   	{
;;;4699   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4700   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4701   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003822  4a36              LDR      r2,|L1.14588|
003824  b130              CBZ      r0,|L1.14388|
003826  6810              LDR      r0,[r2,#0]
003828  f02000ff          BIC      r0,r0,#0xff
00382c  f1000004          ADD      r0,r0,#4
003830  6010              STR      r0,[r2,#0]
003832  e03d              B        |L1.14512|
                  |L1.14388|
;;;4702   	}
;;;4703   else
;;;4704   	{
;;;4705   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4706   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4707   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003834  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003836  0708              LSLS     r0,r1,#28
003838  d406              BMI      |L1.14408|
00383a  6810              LDR      r0,[r2,#0]
00383c  f02000ff          BIC      r0,r0,#0xff
003840  f1000001          ADD      r0,r0,#1
003844  6010              STR      r0,[r2,#0]
003846  e005              B        |L1.14420|
                  |L1.14408|
;;;4708   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003848  6810              LDR      r0,[r2,#0]
00384a  f02000ff          BIC      r0,r0,#0xff
00384e  f1000002          ADD      r0,r0,#2
003852  6010              STR      r0,[r2,#0]
                  |L1.14420|
;;;4709   
;;;4710   
;;;4711   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003854  482d              LDR      r0,|L1.14604|
003856  6803              LDR      r3,[r0,#0]
003858  f0435380          ORR      r3,r3,#0x10000000
00385c  6003              STR      r3,[r0,#0]
;;;4712   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00385e  6a03              LDR      r3,[r0,#0x20]
003860  f0434380          ORR      r3,r3,#0x40000000
003864  6203              STR      r3,[r0,#0x20]
;;;4713   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003866  6e03              LDR      r3,[r0,#0x60]
003868  f0436380          ORR      r3,r3,#0x4000000
00386c  6603              STR      r3,[r0,#0x60]
;;;4714   
;;;4715   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
00386e  07cb              LSLS     r3,r1,#31
003870  d00a              BEQ      |L1.14472|
;;;4716   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003872  6943              LDR      r3,[r0,#0x14]
003874  f0435380          ORR      r3,r3,#0x10000000
003878  6143              STR      r3,[r0,#0x14]
                  |L1.14458|
;;;4717   
;;;4718   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
00387a  078b              LSLS     r3,r1,#30
00387c  d409              BMI      |L1.14482|
00387e  6b43              LDR      r3,[r0,#0x34]
003880  f0234380          BIC      r3,r3,#0x40000000
003884  6343              STR      r3,[r0,#0x34]
003886  e008              B        |L1.14490|
                  |L1.14472|
003888  6943              LDR      r3,[r0,#0x14]         ;4715
00388a  f0235380          BIC      r3,r3,#0x10000000     ;4715
00388e  6143              STR      r3,[r0,#0x14]         ;4715
003890  e7f3              B        |L1.14458|
                  |L1.14482|
;;;4719   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003892  6b43              LDR      r3,[r0,#0x34]
003894  f0434380          ORR      r3,r3,#0x40000000
003898  6343              STR      r3,[r0,#0x34]
                  |L1.14490|
;;;4720   
;;;4721   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
00389a  0749              LSLS     r1,r1,#29
00389c  d404              BMI      |L1.14504|
00389e  6f41              LDR      r1,[r0,#0x74]
0038a0  f0216180          BIC      r1,r1,#0x4000000
0038a4  6741              STR      r1,[r0,#0x74]
0038a6  e003              B        |L1.14512|
                  |L1.14504|
;;;4722   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0038a8  6f41              LDR      r1,[r0,#0x74]
0038aa  f0416180          ORR      r1,r1,#0x4000000
0038ae  6741              STR      r1,[r0,#0x74]
                  |L1.14512|
;;;4723   	}
;;;4724   	
;;;4725   
;;;4726   
;;;4727   
;;;4728   LPC_ADC->ADCR |=  (1<<24);
0038b0  6810              LDR      r0,[r2,#0]
0038b2  f0407080          ORR      r0,r0,#0x1000000
0038b6  6010              STR      r0,[r2,#0]
                  |L1.14520|
;;;4729   
;;;4730   }
0038b8  e8bd81f0          POP      {r4-r8,pc}
;;;4731   
                          ENDP

                  avg_hndl PROC
;;;4988   //-----------------------------------------------
;;;4989   void avg_hndl(void)
0038bc  e92d41f0          PUSH     {r4-r8,lr}
;;;4990   { 
;;;4991   char i;
;;;4992   
;;;4993   //#define AVGCNTMAX	5
;;;4994   if(avg_main_cnt)
0038c0  4d09              LDR      r5,|L1.14568|
0038c2  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
0038c6  b318              CBZ      r0,|L1.14608|
;;;4995   	{
;;;4996   	avg_main_cnt--;
0038c8  f1a00001          SUB      r0,r0,#1
0038cc  86e8              STRH     r0,[r5,#0x36]
;;;4997   	//goto avg_hndl_end;
;;;4998   	return;
;;;4999   	}                 
;;;5000   
;;;5001   avg_main_cnt=5;
;;;5002   avg_num=0;
;;;5003   
;;;5004   for(i=0;i<NUMIST;i++)
;;;5005   	{
;;;5006   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;5007   	}
;;;5008   
;;;5009   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;5010   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;5011   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;5012   
;;;5013   if(avg_vektor) avg_vektor=0;
;;;5014   else avg_vektor=1;
;;;5015   	
;;;5016   if(avg_num<2)
;;;5017   	{
;;;5018   	//goto avg_hndl_end;
;;;5019   	return;
;;;5020   	}
;;;5021   	
;;;5022   else
;;;5023   	{
;;;5024   	i_avg_min=5000;
;;;5025   	i_avg_max=0;
;;;5026   	i_avg_summ=0;
;;;5027   	for(i=0;i<NUMIST;i++)
;;;5028   		{
;;;5029   		if(bps[i]._state==bsWRK)
;;;5030   			{
;;;5031   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;5032   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;5033   			
;;;5034   			i_avg_summ+=bps[i]._Ii;
;;;5035   			}
;;;5036   		}
;;;5037   	i_avg=i_avg_summ/avg_num;	
;;;5038   	
;;;5039   	if(i_avg_min==0)i_avg_min=1;
;;;5040   
;;;5041   	avg=i_avg_max;
;;;5042   	avg*=100;
;;;5043   	avg/=i_avg_min;
;;;5044   
;;;5045   	if(avg>130) bAVG=1;
;;;5046   	if(avg<110) bAVG=0;
;;;5047   
;;;5048   	if(bAVG==1)
;;;5049   		{
;;;5050   		for(i=0;i<NUMIST;i++)
;;;5051   			{
;;;5052   			if(bps[i]._state==bsWRK)
;;;5053   				{
;;;5054   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;5055   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;5056   			
;;;5057   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;5058   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;5059   				}
;;;5060   			}		
;;;5061   		}			
;;;5062   	}   	 
;;;5063   
;;;5064   
;;;5065   avg_hndl_end:
;;;5066   __nop();  
;;;5067   }
0038ce  e7f3              B        |L1.14520|
                  |L1.14544|
                          DCD      a_ind
                  |L1.14548|
                          DCD      mnemo_cnt
                  |L1.14552|
                          DCD      MNEMO_ON
                  |L1.14556|
                          DCD      MNEMO_TIME
                  |L1.14560|
                          DCD      bps
                  |L1.14564|
                          DCD      APV_ON2_TIME
                  |L1.14568|
                          DCD      ||area_number.25||
                  |L1.14572|
                          DCD      APV_ON2
                  |L1.14576|
                          DCD      NUMIST
                  |L1.14580|
                          DCD      APV_ON1
                  |L1.14584|
                          DCD      0x4002c000
                  |L1.14588|
                          DCD      0x40034000
                  |L1.14592|
                          DCD      0xe000e100
                  |L1.14596|
                          DCD      ||.bss||+0x42c
                  |L1.14600|
                          DCD      ||.bss||+0xc
                  |L1.14604|
                          DCD      0x2009c000
                  |L1.14608|
003910  f04f0005          MOV      r0,#5                 ;5001
003914  86e8              STRH     r0,[r5,#0x36]         ;5001
003916  f04f0700          MOV      r7,#0                 ;5002
00391a  76af              STRB     r7,[r5,#0x1a]         ;5002
00391c  f04f0000          MOV      r0,#0                 ;5004
003920  49f8              LDR      r1,|L1.15620|
003922  4cf7              LDR      r4,|L1.15616|
003924  f9b12000          LDRSH    r2,[r1,#0]            ;5004
003928  e012              B        |L1.14672|
                  |L1.14634|
00392a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;5006
00392e  eb011100          ADD      r1,r1,r0,LSL #4       ;5006
003932  eb040181          ADD      r1,r4,r1,LSL #2       ;5006
003936  788b              LDRB     r3,[r1,#2]            ;5006
003938  2b01              CMP      r3,#1                 ;5006
00393a  d106              BNE      |L1.14666|
00393c  78c9              LDRB     r1,[r1,#3]            ;5006
00393e  2914              CMP      r1,#0x14              ;5006
003940  d203              BCS      |L1.14666|
003942  7ea9              LDRB     r1,[r5,#0x1a]         ;5006  ; avg_num
003944  f1010101          ADD      r1,r1,#1              ;5006
003948  76a9              STRB     r1,[r5,#0x1a]         ;5006
                  |L1.14666|
00394a  f1000001          ADD      r0,r0,#1              ;5004
00394e  b2c0              UXTB     r0,r0                 ;5004
                  |L1.14672|
003950  4290              CMP      r0,r2                 ;5004
003952  dbea              BLT      |L1.14634|
003954  7ee8              LDRB     r0,[r5,#0x1b]         ;5013  ; avg_vektor
003956  f04f0c01          MOV      r12,#1                ;5006
00395a  b108              CBZ      r0,|L1.14688|
00395c  76ef              STRB     r7,[r5,#0x1b]         ;5013
00395e  e001              B        |L1.14692|
                  |L1.14688|
003960  f885c01b          STRB     r12,[r5,#0x1b]        ;5014
                  |L1.14692|
003964  7eae              LDRB     r6,[r5,#0x1a]         ;5016  ; avg_num
003966  2e02              CMP      r6,#2                 ;5016
003968  d3a6              BCC      |L1.14520|
00396a  4be7              LDR      r3,|L1.15624|
00396c  f2413088          MOV      r0,#0x1388            ;5024
003970  61d8              STR      r0,[r3,#0x1c]         ;5024  ; i_avg_min
003972  619f              STR      r7,[r3,#0x18]         ;5025  ; i_avg_max
003974  621f              STR      r7,[r3,#0x20]         ;5026  ; i_avg_summ
003976  f04f0100          MOV      r1,#0                 ;5027
00397a  e01c              B        |L1.14774|
                  |L1.14716|
00397c  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5029
003980  eb001001          ADD      r0,r0,r1,LSL #4       ;5029
003984  eb040080          ADD      r0,r4,r0,LSL #2       ;5029
003988  f8908002          LDRB     r8,[r0,#2]            ;5029
00398c  f1b80f01          CMP      r8,#1                 ;5029
003990  d10e              BNE      |L1.14768|
003992  6a40              LDR      r0,[r0,#0x24]         ;5031
003994  f8d38018          LDR      r8,[r3,#0x18]         ;5031  ; i_avg_max
003998  4540              CMP      r0,r8                 ;5031
00399a  dd00              BLE      |L1.14750|
00399c  6198              STR      r0,[r3,#0x18]         ;5031  ; i_avg_max
                  |L1.14750|
00399e  f8d3801c          LDR      r8,[r3,#0x1c]         ;5032  ; i_avg_min
0039a2  4540              CMP      r0,r8                 ;5032
0039a4  da00              BGE      |L1.14760|
0039a6  61d8              STR      r0,[r3,#0x1c]         ;5032  ; i_avg_min
                  |L1.14760|
0039a8  f8d38020          LDR      r8,[r3,#0x20]         ;5034  ; i_avg_summ
0039ac  4440              ADD      r0,r0,r8              ;5034
0039ae  6218              STR      r0,[r3,#0x20]         ;5034  ; i_avg_summ
                  |L1.14768|
0039b0  f1010101          ADD      r1,r1,#1              ;5027
0039b4  b2c9              UXTB     r1,r1                 ;5027
                  |L1.14774|
0039b6  4291              CMP      r1,r2                 ;5027
0039b8  dbe0              BLT      |L1.14716|
0039ba  6a18              LDR      r0,[r3,#0x20]         ;5037  ; i_avg_summ
0039bc  fb90f6f6          SDIV     r6,r0,r6              ;5037
0039c0  625e              STR      r6,[r3,#0x24]         ;5037  ; i_avg
0039c2  69d8              LDR      r0,[r3,#0x1c]         ;5039  ; i_avg_min
0039c4  b908              CBNZ     r0,|L1.14794|
0039c6  f8c3c01c          STR      r12,[r3,#0x1c]        ;5039  ; i_avg_min
                  |L1.14794|
0039ca  6998              LDR      r0,[r3,#0x18]         ;5041  ; i_avg_max
0039cc  f04f0164          MOV      r1,#0x64              ;5042
0039d0  fb00f001          MUL      r0,r0,r1              ;5042
0039d4  69d9              LDR      r1,[r3,#0x1c]         ;5043  ; i_avg_min
0039d6  fb90f0f1          SDIV     r0,r0,r1              ;5043
0039da  6298              STR      r0,[r3,#0x28]         ;5043  ; avg
0039dc  2882              CMP      r0,#0x82              ;5045
0039de  dd01              BLE      |L1.14820|
0039e0  f885c019          STRB     r12,[r5,#0x19]        ;5045
                  |L1.14820|
0039e4  286e              CMP      r0,#0x6e              ;5046
0039e6  da00              BGE      |L1.14826|
0039e8  766f              STRB     r7,[r5,#0x19]         ;5046
                  |L1.14826|
0039ea  7e68              LDRB     r0,[r5,#0x19]         ;5048  ; bAVG
0039ec  2801              CMP      r0,#1                 ;5048
0039ee  d138              BNE      |L1.14946|
0039f0  f04f0100          MOV      r1,#0                 ;5050
0039f4  f06f0731          MVN      r7,#0x31              ;5057
0039f8  e031              B        |L1.14942|
                  |L1.14842|
0039fa  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5052
0039fe  eb001001          ADD      r0,r0,r1,LSL #4       ;5052
003a02  eb040080          ADD      r0,r4,r0,LSL #2       ;5052
003a06  7883              LDRB     r3,[r0,#2]            ;5052
003a08  2b01              CMP      r3,#1                 ;5052
003a0a  d125              BNE      |L1.14936|
003a0c  6a43              LDR      r3,[r0,#0x24]         ;5054
003a0e  42b3              CMP      r3,r6                 ;5054
003a10  dd0a              BLE      |L1.14888|
003a12  f895c01b          LDRB     r12,[r5,#0x1b]        ;5054  ; avg_vektor
003a16  f1bc0f00          CMP      r12,#0                ;5054
003a1a  d105              BNE      |L1.14888|
003a1c  f8b0c054          LDRH     r12,[r0,#0x54]        ;5054
003a20  f1ac0c01          SUB      r12,r12,#1            ;5054
003a24  f8a0c054          STRH     r12,[r0,#0x54]        ;5054
                  |L1.14888|
003a28  42b3              CMP      r3,r6                 ;5055
003a2a  da07              BGE      |L1.14908|
003a2c  7eeb              LDRB     r3,[r5,#0x1b]         ;5055  ; avg_vektor
003a2e  b12b              CBZ      r3,|L1.14908|
003a30  f8b03054          LDRH     r3,[r0,#0x54]         ;5055
003a34  f1030301          ADD      r3,r3,#1              ;5055
003a38  f8a03054          STRH     r3,[r0,#0x54]         ;5055
                  |L1.14908|
003a3c  f9b03054          LDRSH    r3,[r0,#0x54]         ;5057
003a40  42bb              CMP      r3,r7                 ;5057
003a42  da01              BGE      |L1.14920|
003a44  f8a07054          STRH     r7,[r0,#0x54]         ;5057
                  |L1.14920|
003a48  f9b03054          LDRSH    r3,[r0,#0x54]         ;5058
003a4c  2b32              CMP      r3,#0x32              ;5058
003a4e  dd03              BLE      |L1.14936|
003a50  f04f0332          MOV      r3,#0x32              ;5058
003a54  f8a03054          STRH     r3,[r0,#0x54]         ;5058
                  |L1.14936|
003a58  f1010101          ADD      r1,r1,#1              ;5050
003a5c  b2c9              UXTB     r1,r1                 ;5050
                  |L1.14942|
003a5e  4291              CMP      r1,r2                 ;5050
003a60  dbcb              BLT      |L1.14842|
                  |L1.14946|
003a62  bf00              NOP                            ;5066
003a64  e728              B        |L1.14520|
;;;5068   
                          ENDP

                  rele_hndl PROC
;;;5081   //*************-----------------------------------------------
;;;5082   void rele_hndl(void)
003a66  e92d5ff0          PUSH     {r4-r12,lr}
;;;5083   {
;;;5084   //static char cnt_rel_sam;
;;;5085   //char temp;
;;;5086   
;;;5087   //temp=0;
;;;5088   
;;;5089   
;;;5090   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003a6a  48a8              LDR      r0,|L1.15628|
003a6c  6801              LDR      r1,[r0,#0]
003a6e  4aa8              LDR      r2,|L1.15632|
003a70  ea010102          AND      r1,r1,r2
003a74  6001              STR      r1,[r0,#0]
;;;5091   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003a76  4ca7              LDR      r4,|L1.15636|
003a78  6821              LDR      r1,[r4,#0]
003a7a  f441717c          ORR      r1,r1,#0x3f0
003a7e  6021              STR      r1,[r4,#0]
;;;5092   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003a80  69c1              LDR      r1,[r0,#0x1c]
003a82  f4212140          BIC      r1,r1,#0xc0000
003a86  61c1              STR      r1,[r0,#0x1c]
;;;5093   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003a88  6e21              LDR      r1,[r4,#0x60]
003a8a  f0417100          ORR      r1,r1,#0x2000000
003a8e  6621              STR      r1,[r4,#0x60]
;;;5094   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003a90  6841              LDR      r1,[r0,#4]
003a92  f0216140          BIC      r1,r1,#0xc000000
003a96  6041              STR      r1,[r0,#4]
;;;5095   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003a98  6820              LDR      r0,[r4,#0]
003a9a  f0405000          ORR      r0,r0,#0x20000000
003a9e  6020              STR      r0,[r4,#0]
;;;5096   
;;;5097   
;;;5098   
;;;5099   
;;;5100   
;;;5101   
;;;5102   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003aa0  489e              LDR      r0,|L1.15644|
003aa2  4d9d              LDR      r5,|L1.15640|
003aa4  499f              LDR      r1,|L1.15652|
003aa6  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003aa8  489d              LDR      r0,|L1.15648|
003aaa  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003aae  f9b11000          LDRSH    r1,[r1,#0]
003ab2  7800              LDRB     r0,[r0,#0]
003ab4  4313              ORRS     r3,r3,r2
003ab6  d007              BEQ      |L1.15048|
003ab8  b130              CBZ      r0,|L1.15048|
003aba  2905              CMP      r1,#5
003abc  dd04              BLE      |L1.15048|
;;;5103   	{
;;;5104   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003abe  69a3              LDR      r3,[r4,#0x18]
003ac0  f4437380          ORR      r3,r3,#0x100
003ac4  61a3              STR      r3,[r4,#0x18]
003ac6  e003              B        |L1.15056|
                  |L1.15048|
;;;5105   	}
;;;5106   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003ac8  69e3              LDR      r3,[r4,#0x1c]
003aca  f4437380          ORR      r3,r3,#0x100
003ace  61e3              STR      r3,[r4,#0x1c]
                  |L1.15056|
;;;5107   
;;;5108   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003ad0  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003ad4  4313              ORRS     r3,r3,r2
003ad6  d007              BEQ      |L1.15080|
003ad8  b130              CBZ      r0,|L1.15080|
003ada  2905              CMP      r1,#5
003adc  dd04              BLE      |L1.15080|
;;;5109   	{
;;;5110   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003ade  69a0              LDR      r0,[r4,#0x18]
003ae0  f0400040          ORR      r0,r0,#0x40
003ae4  61a0              STR      r0,[r4,#0x18]
003ae6  e003              B        |L1.15088|
                  |L1.15080|
;;;5111   	}
;;;5112   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003ae8  69e0              LDR      r0,[r4,#0x1c]
003aea  f0400040          ORR      r0,r0,#0x40
003aee  61e0              STR      r0,[r4,#0x1c]
                  |L1.15088|
;;;5113   
;;;5114   
;;;5115   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003af0  20d2              MOVS     r0,#0xd2
003af2  f7fffffe          BL       mess_find_unvol
003af6  4d8c              LDR      r5,|L1.15656|
003af8  b110              CBZ      r0,|L1.15104|
003afa  6828              LDR      r0,[r5,#0]  ; mess_data
003afc  2864              CMP      r0,#0x64
003afe  d048              BEQ      |L1.15250|
                  |L1.15104|
;;;5116   	{
;;;5117   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;5118   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;5119   	}
;;;5120   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003b00  69e0              LDR      r0,[r4,#0x1c]
003b02  f0405000          ORR      r0,r0,#0x20000000
003b06  61e0              STR      r0,[r4,#0x1c]
                  |L1.15112|
;;;5121   
;;;5122   
;;;5123   #ifndef UKU2071x
;;;5124   //Реле аварии сети
;;;5125   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5126   	{
;;;5127   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5128   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5129   	}
;;;5130   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5131   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5132   #endif
;;;5133   #ifdef UKU2071x
;;;5134   //Реле аварии сети
;;;5135   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b08  20d2              MOVS     r0,#0xd2
003b0a  f7fffffe          BL       mess_find_unvol
;;;5136   	{
;;;5137   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;5138   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5139   	}
;;;5140   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003b0e  4e87              LDR      r6,|L1.15660|
003b10  b110              CBZ      r0,|L1.15128|
003b12  6828              LDR      r0,[r5,#0]            ;5135  ; mess_data
003b14  2866              CMP      r0,#0x66              ;5135
003b16  d04b              BEQ      |L1.15280|
                  |L1.15128|
003b18  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b1a  07c0              LSLS     r0,r0,#31
003b1c  d054              BEQ      |L1.15304|
;;;5141   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b1e  6fa0              LDR      r0,[r4,#0x78]
003b20  f0407000          ORR      r0,r0,#0x2000000
003b24  67a0              STR      r0,[r4,#0x78]
                  |L1.15142|
;;;5142   #endif
;;;5143   
;;;5144   #ifdef UKU_3U
;;;5145   //Реле аварий батарей
;;;5146   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5147   	{
;;;5148   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5149   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5150        }
;;;5151   else 
;;;5152   	{
;;;5153   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5154        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5155   	} 
;;;5156   
;;;5157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5158   	{
;;;5159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5161        }
;;;5162   else 
;;;5163   	{
;;;5164   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5165        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5166   	} 
;;;5167   
;;;5168   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5169   	{
;;;5170   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5171   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5172        }
;;;5173   else 
;;;5174   	{
;;;5175   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5176        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5177   	} 
;;;5178   
;;;5179   #endif
;;;5180   
;;;5181   
;;;5182   #ifdef UKU_GLONASS
;;;5183   //Реле аварий батарей
;;;5184   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5185   	{
;;;5186   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5187   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5188        }
;;;5189   else 
;;;5190   	{
;;;5191   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5192        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5193   	} 
;;;5194   
;;;5195   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5196   	{
;;;5197   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5198   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5199        }
;;;5200   else 
;;;5201   	{
;;;5202   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5203        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5204   	} 
;;;5205   
;;;5206   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5207   	{
;;;5208   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5209   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5210        }
;;;5211   else 
;;;5212   	{
;;;5213   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5214        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5215   	} 
;;;5216   
;;;5217   #endif
;;;5218   
;;;5219   #ifdef U 
;;;5220   
;;;5221   #endif
;;;5222   
;;;5223   #ifdef UKU_RSTKM
;;;5224   
;;;5225   //Реле общей аварии
;;;5226   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5227   	{
;;;5228   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5229   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5230   	}
;;;5231   else 
;;;5232   	{
;;;5233        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5234             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5235             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5236             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5237             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5238        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5239   	}
;;;5240   	
;;;5241   
;;;5242   //Реле освещения
;;;5243   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5244   	{
;;;5245   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5246   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5247        }
;;;5248   else 
;;;5249   	{
;;;5250   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5251        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5252   	}
;;;5253   
;;;5254   
;;;5255   //Реле выключения нагрузки
;;;5256   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5257   	{
;;;5258   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5259   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5260        }
;;;5261   else if(tloaddisable_cmnd==0)
;;;5262   	{
;;;5263   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5264   	}
;;;5265   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5266   	{
;;;5267   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5268   	}
;;;5269   
;;;5270   else 
;;;5271   	{
;;;5272   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5273        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5274   	} 
;;;5275   
;;;5276   //Реле осевого вентилятора
;;;5277   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5278   	{
;;;5279   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5280   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5281   	}
;;;5282   else 
;;;5283   	{
;;;5284   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5285        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5286   	} 
;;;5287   
;;;5288   #endif
;;;5289   
;;;5290   #ifdef UKU_KONTUR
;;;5291   
;;;5292   //Реле общей аварии
;;;5293   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5294   	{
;;;5295   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5296   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5297   	}
;;;5298   else 
;;;5299   	{
;;;5300        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5301             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5302             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5303             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5304             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5305        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5306   	}
;;;5307   
;;;5308   	
;;;5309   //rel_warm_plazma=0;
;;;5310   //Реле освещения   
;;;5311   /*
;;;5312   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5313   	{
;;;5314   	if(mess_data[1]==0)
;;;5315   		{
;;;5316   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5317   		rel_warm_plazma=1;
;;;5318   		}
;;;5319   	else if(mess_data[1]==1) 
;;;5320   		{
;;;5321   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5322   		rel_warm_plazma=2;
;;;5323   		}
;;;5324        }
;;;5325   else 
;;;5326   	{
;;;5327   	if(warm_stat_k==wsOFF) 
;;;5328   		{
;;;5329   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5330   		rel_warm_plazma=3;
;;;5331   		}
;;;5332        else 
;;;5333   		{
;;;5334   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5335   		rel_warm_plazma=4;
;;;5336   		}
;;;5337   	}
;;;5338   */
;;;5339   //Реле освещения
;;;5340   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5341   	{
;;;5342   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5343   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5344        }
;;;5345   else 
;;;5346   	{
;;;5347   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5348        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5349   	}
;;;5350   
;;;5351   
;;;5352   
;;;5353   //Реле выключения нагрузки
;;;5354   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5355   	{
;;;5356   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5357   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5358        }
;;;5359   else if(tloaddisable_cmnd==0)
;;;5360   	{
;;;5361   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5362   	}
;;;5363   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5364   	{
;;;5365   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5366   	}
;;;5367   
;;;5368   else 
;;;5369   	{
;;;5370   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5371        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5372   	} 
;;;5373   
;;;5374   //Реле осевого вентилятора или отопителя
;;;5375   if(RELE_LOG)
;;;5376   	{
;;;5377   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5378   		{
;;;5379   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5380   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5381   		}
;;;5382   	else 
;;;5383   		{
;;;5384   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5385   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5386   		} 
;;;5387   
;;;5388   	}
;;;5389   else 
;;;5390   	{
;;;5391   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5392   		{
;;;5393   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5394   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5395   		}
;;;5396   	else 
;;;5397   		{
;;;5398   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5399   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5400   		} 
;;;5401   	}
;;;5402   #endif
;;;5403   
;;;5404   #ifdef UKU_6U
;;;5405   //Реле аварий батарей
;;;5406   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5407   	{
;;;5408   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5409   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5410        }
;;;5411   else 
;;;5412   	{
;;;5413   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5414        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5415   	} 
;;;5416   
;;;5417   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5418   	{
;;;5419   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5420   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5421       }
;;;5422   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5423   	{
;;;5424   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5425   		{
;;;5426   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5427   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5428        	}
;;;5429   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5430   	}
;;;5431   else 
;;;5432   	{
;;;5433   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5434       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5435   	} 
;;;5436   
;;;5437   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5438   	{
;;;5439   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5440   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5441        }
;;;5442   else 
;;;5443   	{
;;;5444   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5445        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5446   	} 
;;;5447   
;;;5448   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5449   	{
;;;5450   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5451   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5452   	}
;;;5453   else if((NPN_OUT==npnoRELEVENT))
;;;5454   	{
;;;5455   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5456   		{
;;;5457   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5458   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5459       	}
;;;5460   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5461   	}
;;;5462   else 
;;;5463   	{
;;;5464   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5465   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5466   	}
;;;5467   
;;;5468   #endif
;;;5469   
;;;5470   #ifdef UKU_220
;;;5471   //Реле аварий батарей
;;;5472   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5473   	{
;;;5474   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5475   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5476        }
;;;5477   else 
;;;5478   	{
;;;5479   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5480        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5481   	} 
;;;5482   
;;;5483   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5484   	{
;;;5485   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5486   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5487        }
;;;5488   else 
;;;5489   	{
;;;5490   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5491        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5492   	} 
;;;5493   
;;;5494   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5495   	{
;;;5496   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5497   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5498   	}
;;;5499   else 
;;;5500   	{
;;;5501   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5502   		{
;;;5503   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5504   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5505   		}
;;;5506   	else 
;;;5507   		{
;;;5508   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5509        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5510   		}
;;;5511   	}
;;;5512   
;;;5513   #endif
;;;5514   
;;;5515   #ifdef UKU_220_V2
;;;5516   //Реле аварий батарей
;;;5517   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5518   	{
;;;5519   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5520   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5521        }
;;;5522   else 
;;;5523   	{
;;;5524   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5525        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5526   	} 
;;;5527   
;;;5528   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5529   	{
;;;5530   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5531   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5532        }
;;;5533   else 
;;;5534   	{
;;;5535   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5536        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5537   	} 
;;;5538   
;;;5539   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5540   	{
;;;5541   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5542   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5543   	}
;;;5544   else 
;;;5545   	{
;;;5546   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5547   		{
;;;5548   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5549   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5550   		}
;;;5551   	else 
;;;5552   		{
;;;5553   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5554        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5555   		}
;;;5556   	}
;;;5557   
;;;5558   #endif
;;;5559   
;;;5560   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5561   
;;;5562   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003b26  4882              LDR      r0,|L1.15664|
;;;5563   	{
;;;5564   	#ifndef UKU2071x
;;;5565   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5566   		{
;;;5567   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5568   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5569   		}
;;;5570   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5571   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5572   	#endif
;;;5573   
;;;5574   	#ifdef UKU2071x
;;;5575   		#ifndef APSENERGIA
;;;5576   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5577   			{
;;;5578   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5579   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5580   			}
;;;5581   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5582   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5583   		#endif
;;;5584   
;;;5585   		#ifdef APSENERGIA
;;;5586   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5587   			{
;;;5588   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5589   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5590   			}
;;;5591   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5592   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5593   		#endif
;;;5594   
;;;5595   	#endif
;;;5596   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5597   		{
;;;5598   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5599   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5600   	     }
;;;5601   	else 
;;;5602   		{
;;;5603   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5604   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5605   		} 
;;;5606   
;;;5607   	//Реле аварий батарей
;;;5608   	#ifndef APSENERGIA
;;;5609   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5610   		{
;;;5611   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5612   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5613        	}
;;;5614   	else 
;;;5615   		{
;;;5616   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b28  f8df8208          LDR      r8,|L1.15668|
003b2c  4f82              LDR      r7,|L1.15672|
003b2e  8800              LDRH     r0,[r0,#0]            ;5562  ; AUSW_MAIN
003b30  f5a041aa          SUB      r1,r0,#0x5500         ;5562
003b34  39fa              SUBS     r1,r1,#0xfa           ;5562
003b36  d001              BEQ      |L1.15164|
003b38  1e49              SUBS     r1,r1,#1              ;5562
003b3a  d16f              BNE      |L1.15388|
                  |L1.15164|
003b3c  20d2              MOVS     r0,#0xd2              ;5576
003b3e  f7fffffe          BL       mess_find_unvol
003b42  b110              CBZ      r0,|L1.15178|
003b44  6828              LDR      r0,[r5,#0]            ;5576  ; mess_data
003b46  2866              CMP      r0,#0x66              ;5576
003b48  d043              BEQ      |L1.15314|
                  |L1.15178|
003b4a  6830              LDR      r0,[r6,#0]            ;5581  ; avar_ind_stat
003b4c  07c0              LSLS     r0,r0,#31             ;5581
003b4e  d04d              BEQ      |L1.15340|
003b50  6fa0              LDR      r0,[r4,#0x78]         ;5582
003b52  f0407000          ORR      r0,r0,#0x2000000      ;5582
003b56  67a0              STR      r0,[r4,#0x78]         ;5582
                  |L1.15192|
003b58  20d2              MOVS     r0,#0xd2              ;5596
003b5a  f7fffffe          BL       mess_find_unvol
003b5e  b110              CBZ      r0,|L1.15206|
003b60  6828              LDR      r0,[r5,#0]            ;5596  ; mess_data
003b62  286a              CMP      r0,#0x6a              ;5596
003b64  d047              BEQ      |L1.15350|
                  |L1.15206|
003b66  6830              LDR      r0,[r6,#0]            ;5603  ; avar_ind_stat
003b68  4238              TST      r0,r7                 ;5603
003b6a  d052              BEQ      |L1.15378|
003b6c  69a0              LDR      r0,[r4,#0x18]         ;5604
003b6e  f0400080          ORR      r0,r0,#0x80           ;5604
003b72  61a0              STR      r0,[r4,#0x18]         ;5604
                  |L1.15220|
003b74  20d2              MOVS     r0,#0xd2              ;5609
003b76  f7fffffe          BL       mess_find_unvol
003b7a  b110              CBZ      r0,|L1.15234|
003b7c  6828              LDR      r0,[r5,#0]            ;5609  ; mess_data
003b7e  2867              CMP      r0,#0x67              ;5609
003b80  d04d              BEQ      |L1.15390|
                  |L1.15234|
003b82  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b86  b380              CBZ      r0,|L1.15338|
;;;5617        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b88  69a0              LDR      r0,[r4,#0x18]
003b8a  f0400010          ORR      r0,r0,#0x10
003b8e  61a0              STR      r0,[r4,#0x18]
003b90  e1f1              B        |L1.16246|
                  |L1.15250|
003b92  6868              LDR      r0,[r5,#4]            ;5117  ; mess_data
003b94  2801              CMP      r0,#1                 ;5117
003b96  d006              BEQ      |L1.15270|
003b98  2800              CMP      r0,#0                 ;5118
003b9a  d1b5              BNE      |L1.15112|
003b9c  69e0              LDR      r0,[r4,#0x1c]         ;5118
003b9e  f0405000          ORR      r0,r0,#0x20000000     ;5118
003ba2  61e0              STR      r0,[r4,#0x1c]         ;5118
003ba4  e7b0              B        |L1.15112|
                  |L1.15270|
003ba6  69a0              LDR      r0,[r4,#0x18]         ;5117
003ba8  f0405000          ORR      r0,r0,#0x20000000     ;5117
003bac  61a0              STR      r0,[r4,#0x18]         ;5117
003bae  e7ab              B        |L1.15112|
                  |L1.15280|
003bb0  6868              LDR      r0,[r5,#4]            ;5137  ; mess_data
003bb2  b120              CBZ      r0,|L1.15294|
003bb4  6fa0              LDR      r0,[r4,#0x78]         ;5138
003bb6  f0407000          ORR      r0,r0,#0x2000000      ;5138
003bba  67a0              STR      r0,[r4,#0x78]         ;5138
003bbc  e7b3              B        |L1.15142|
                  |L1.15294|
003bbe  6fe0              LDR      r0,[r4,#0x7c]         ;5137
003bc0  f0407000          ORR      r0,r0,#0x2000000      ;5137
003bc4  67e0              STR      r0,[r4,#0x7c]         ;5137
003bc6  e7ae              B        |L1.15142|
                  |L1.15304|
003bc8  6fe0              LDR      r0,[r4,#0x7c]         ;5140
003bca  f0407000          ORR      r0,r0,#0x2000000      ;5140
003bce  67e0              STR      r0,[r4,#0x7c]         ;5140
003bd0  e7a9              B        |L1.15142|
                  |L1.15314|
003bd2  6868              LDR      r0,[r5,#4]            ;5578  ; mess_data
003bd4  b120              CBZ      r0,|L1.15328|
003bd6  6fa0              LDR      r0,[r4,#0x78]         ;5579
003bd8  f0407000          ORR      r0,r0,#0x2000000      ;5579
003bdc  67a0              STR      r0,[r4,#0x78]         ;5579
003bde  e7bb              B        |L1.15192|
                  |L1.15328|
003be0  6fe0              LDR      r0,[r4,#0x7c]         ;5578
003be2  f0407000          ORR      r0,r0,#0x2000000      ;5578
003be6  67e0              STR      r0,[r4,#0x7c]         ;5578
003be8  e7b6              B        |L1.15192|
                  |L1.15338|
003bea  e027              B        |L1.15420|
                  |L1.15340|
003bec  6fe0              LDR      r0,[r4,#0x7c]         ;5581
003bee  f0407000          ORR      r0,r0,#0x2000000      ;5581
003bf2  67e0              STR      r0,[r4,#0x7c]         ;5581
003bf4  e7b0              B        |L1.15192|
                  |L1.15350|
003bf6  6868              LDR      r0,[r5,#4]            ;5598  ; mess_data
003bf8  b130              CBZ      r0,|L1.15368|
003bfa  2801              CMP      r0,#1                 ;5599
003bfc  d1ba              BNE      |L1.15220|
003bfe  69a0              LDR      r0,[r4,#0x18]         ;5599
003c00  f0400080          ORR      r0,r0,#0x80           ;5599
003c04  61a0              STR      r0,[r4,#0x18]         ;5599
003c06  e7b5              B        |L1.15220|
                  |L1.15368|
003c08  69e0              LDR      r0,[r4,#0x1c]         ;5598
003c0a  f0400080          ORR      r0,r0,#0x80           ;5598
003c0e  61e0              STR      r0,[r4,#0x1c]         ;5598
003c10  e7b0              B        |L1.15220|
                  |L1.15378|
003c12  69e0              LDR      r0,[r4,#0x1c]         ;5603
003c14  f0400080          ORR      r0,r0,#0x80           ;5603
003c18  61e0              STR      r0,[r4,#0x1c]         ;5603
003c1a  e7ab              B        |L1.15220|
                  |L1.15388|
003c1c  e013              B        |L1.15430|
                  |L1.15390|
003c1e  6868              LDR      r0,[r5,#4]            ;5611  ; mess_data
003c20  b110              CBZ      r0,|L1.15400|
003c22  2801              CMP      r0,#1                 ;5612
003c24  d005              BEQ      |L1.15410|
003c26  e1a6              B        |L1.16246|
                  |L1.15400|
003c28  69e0              LDR      r0,[r4,#0x1c]         ;5611
003c2a  f0400010          ORR      r0,r0,#0x10           ;5611
003c2e  61e0              STR      r0,[r4,#0x1c]         ;5611
003c30  e1a1              B        |L1.16246|
                  |L1.15410|
003c32  69a0              LDR      r0,[r4,#0x18]         ;5612
003c34  f0400010          ORR      r0,r0,#0x10           ;5612
003c38  61a0              STR      r0,[r4,#0x18]         ;5612
003c3a  e19c              B        |L1.16246|
                  |L1.15420|
003c3c  69e0              LDR      r0,[r4,#0x1c]         ;5616
003c3e  f0400010          ORR      r0,r0,#0x10           ;5616
003c42  61e0              STR      r0,[r4,#0x1c]         ;5616
003c44  e197              B        |L1.16246|
                  |L1.15430|
;;;5618   		}
;;;5619   	#endif
;;;5620   	#ifdef APSENERGIA
;;;5621   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5622   		{
;;;5623   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5624   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5625        	}
;;;5626   	else 
;;;5627   		{
;;;5628   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5629   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5630   		}
;;;5631   	#endif
;;;5632   	}
;;;5633   
;;;5634   else	if(AUSW_MAIN==22023)
003c46  f5a041ac          SUB      r1,r0,#0x5600
003c4a  3907              SUBS     r1,#7
003c4c  d176              BNE      |L1.15676|
;;;5635   	{
;;;5636   
;;;5637   	//Реле аварий батарей
;;;5638   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003c4e  20d2              MOVS     r0,#0xd2
003c50  f7fffffe          BL       mess_find_unvol
003c54  b110              CBZ      r0,|L1.15452|
003c56  6828              LDR      r0,[r5,#0]  ; mess_data
003c58  2867              CMP      r0,#0x67
003c5a  d023              BEQ      |L1.15524|
                  |L1.15452|
;;;5639   		{
;;;5640   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5641   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5642        	}
;;;5643   	else 
;;;5644   		{
;;;5645   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c5c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c60  b370              CBZ      r0,|L1.15552|
;;;5646        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c62  69a0              LDR      r0,[r4,#0x18]
003c64  f0400010          ORR      r0,r0,#0x10
003c68  61a0              STR      r0,[r4,#0x18]
                  |L1.15466|
;;;5647   		} 
;;;5648   
;;;5649   
;;;5650   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5651   	#ifndef UKU2071x
;;;5652   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5653   		{
;;;5654   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5655   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5656   		}
;;;5657   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5658   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5659   	#endif
;;;5660   	#ifdef UKU2071x
;;;5661   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c6a  20d2              MOVS     r0,#0xd2
003c6c  f7fffffe          BL       mess_find_unvol
003c70  b110              CBZ      r0,|L1.15480|
003c72  6828              LDR      r0,[r5,#0]  ; mess_data
003c74  2866              CMP      r0,#0x66
003c76  d028              BEQ      |L1.15562|
                  |L1.15480|
;;;5662   		{
;;;5663   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5664   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5665   		}
;;;5666   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003c78  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c7a  07c0              LSLS     r0,r0,#31
003c7c  d031              BEQ      |L1.15586|
;;;5667   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c7e  6fa0              LDR      r0,[r4,#0x78]
003c80  f0407000          ORR      r0,r0,#0x2000000
003c84  67a0              STR      r0,[r4,#0x78]
                  |L1.15494|
;;;5668   	#endif
;;;5669   
;;;5670   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003c86  20d2              MOVS     r0,#0xd2
003c88  f7fffffe          BL       mess_find_unvol
003c8c  b110              CBZ      r0,|L1.15508|
003c8e  6828              LDR      r0,[r5,#0]  ; mess_data
003c90  286a              CMP      r0,#0x6a
003c92  d02b              BEQ      |L1.15596|
                  |L1.15508|
;;;5671   		{
;;;5672   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5673   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5674   	     }
;;;5675   	else 
;;;5676   		{
;;;5677   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003c94  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c96  4238              TST      r0,r7
003c98  d056              BEQ      |L1.15688|
;;;5678   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003c9a  69a0              LDR      r0,[r4,#0x18]
003c9c  f0400080          ORR      r0,r0,#0x80
003ca0  61a0              STR      r0,[r4,#0x18]
003ca2  e168              B        |L1.16246|
                  |L1.15524|
003ca4  6868              LDR      r0,[r5,#4]            ;5640  ; mess_data
003ca6  b130              CBZ      r0,|L1.15542|
003ca8  2801              CMP      r0,#1                 ;5641
003caa  d1de              BNE      |L1.15466|
003cac  69a0              LDR      r0,[r4,#0x18]         ;5641
003cae  f0400010          ORR      r0,r0,#0x10           ;5641
003cb2  61a0              STR      r0,[r4,#0x18]         ;5641
003cb4  e7d9              B        |L1.15466|
                  |L1.15542|
003cb6  69e0              LDR      r0,[r4,#0x1c]         ;5640
003cb8  f0400010          ORR      r0,r0,#0x10           ;5640
003cbc  61e0              STR      r0,[r4,#0x1c]         ;5640
003cbe  e7d4              B        |L1.15466|
                  |L1.15552|
003cc0  69e0              LDR      r0,[r4,#0x1c]         ;5645
003cc2  f0400010          ORR      r0,r0,#0x10           ;5645
003cc6  61e0              STR      r0,[r4,#0x1c]         ;5645
003cc8  e7cf              B        |L1.15466|
                  |L1.15562|
003cca  6868              LDR      r0,[r5,#4]            ;5663  ; mess_data
003ccc  b120              CBZ      r0,|L1.15576|
003cce  69e0              LDR      r0,[r4,#0x1c]         ;5664
003cd0  f0407000          ORR      r0,r0,#0x2000000      ;5664
003cd4  61e0              STR      r0,[r4,#0x1c]         ;5664
003cd6  e7d6              B        |L1.15494|
                  |L1.15576|
003cd8  69a0              LDR      r0,[r4,#0x18]         ;5663
003cda  f0407000          ORR      r0,r0,#0x2000000      ;5663
003cde  61a0              STR      r0,[r4,#0x18]         ;5663
003ce0  e7d1              B        |L1.15494|
                  |L1.15586|
003ce2  6ba0              LDR      r0,[r4,#0x38]         ;5666
003ce4  f0407000          ORR      r0,r0,#0x2000000      ;5666
003ce8  63a0              STR      r0,[r4,#0x38]         ;5666
003cea  e7cc              B        |L1.15494|
                  |L1.15596|
003cec  6868              LDR      r0,[r5,#4]            ;5672  ; mess_data
003cee  b110              CBZ      r0,|L1.15606|
003cf0  2801              CMP      r0,#1                 ;5673
003cf2  d024              BEQ      |L1.15678|
003cf4  e13f              B        |L1.16246|
                  |L1.15606|
003cf6  69e0              LDR      r0,[r4,#0x1c]         ;5672
003cf8  f0400080          ORR      r0,r0,#0x80           ;5672
003cfc  61e0              STR      r0,[r4,#0x1c]         ;5672
003cfe  e13a              B        |L1.16246|
                  |L1.15616|
                          DCD      bps
                  |L1.15620|
                          DCD      NUMIST
                  |L1.15624|
                          DCD      ||area_number.25||+0x80
                  |L1.15628|
                          DCD      0x4002c000
                  |L1.15632|
                          DCD      0xfff000ff
                  |L1.15636|
                          DCD      0x2009c000
                  |L1.15640|
                          DCD      bat
                  |L1.15644|
                          DCD      tbatdisable_stat
                  |L1.15648|
                          DCD      tbatdisable_cmnd
                  |L1.15652|
                          DCD      main_1Hz_cnt
                  |L1.15656|
                          DCD      mess_data
                  |L1.15660|
                          DCD      avar_ind_stat
                  |L1.15664|
                          DCD      AUSW_MAIN
                  |L1.15668|
                          DCD      ips_bat_av_stat
                  |L1.15672|
                          DCD      0x100007f8
                  |L1.15676|
003d3c  e009              B        |L1.15698|
                  |L1.15678|
003d3e  69a0              LDR      r0,[r4,#0x18]         ;5673
003d40  f0400080          ORR      r0,r0,#0x80           ;5673
003d44  61a0              STR      r0,[r4,#0x18]         ;5673
003d46  e116              B        |L1.16246|
                  |L1.15688|
003d48  69e0              LDR      r0,[r4,#0x1c]         ;5677
003d4a  f0400080          ORR      r0,r0,#0x80           ;5677
003d4e  61e0              STR      r0,[r4,#0x1c]         ;5677
003d50  e111              B        |L1.16246|
                  |L1.15698|
;;;5679   		} 
;;;5680   	}
;;;5681   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003d52  f5a041ac          SUB      r1,r0,#0x5600
003d56  391b              SUBS     r1,r1,#0x1b
003d58  d001              BEQ      |L1.15710|
003d5a  1e49              SUBS     r1,r1,#1
003d5c  d170              BNE      |L1.15936|
                  |L1.15710|
;;;5682   	{
;;;5683   	//Реле аварий батарей
;;;5684   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003d5e  20d2              MOVS     r0,#0xd2
003d60  f7fffffe          BL       mess_find_unvol
003d64  b110              CBZ      r0,|L1.15724|
003d66  6828              LDR      r0,[r5,#0]  ; mess_data
003d68  2867              CMP      r0,#0x67
003d6a  d031              BEQ      |L1.15824|
                  |L1.15724|
;;;5685   		{
;;;5686   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5687   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5688        	}
;;;5689   	else 
;;;5690   		{
;;;5691   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003d6c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003d70  b3b8              CBZ      r0,|L1.15842|
;;;5692        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003d72  69a0              LDR      r0,[r4,#0x18]
003d74  f0400010          ORR      r0,r0,#0x10
003d78  61a0              STR      r0,[r4,#0x18]
                  |L1.15738|
;;;5693   		} 
;;;5694   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5695   	#ifndef UKU2071x 
;;;5696   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5697   		{
;;;5698   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5699   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5700   		}
;;;5701   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5702   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5703   	#endif
;;;5704   	#ifdef UKU2071x 
;;;5705   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d7a  20d2              MOVS     r0,#0xd2
003d7c  f7fffffe          BL       mess_find_unvol
003d80  b110              CBZ      r0,|L1.15752|
003d82  6828              LDR      r0,[r5,#0]  ; mess_data
003d84  2866              CMP      r0,#0x66
003d86  d037              BEQ      |L1.15864|
                  |L1.15752|
;;;5706   		{
;;;5707   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5708   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5709   		}
;;;5710   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d88  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d8a  07c0              LSLS     r0,r0,#31
003d8c  d040              BEQ      |L1.15888|
;;;5711   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d8e  6fa0              LDR      r0,[r4,#0x78]
003d90  f0407000          ORR      r0,r0,#0x2000000
003d94  67a0              STR      r0,[r4,#0x78]
                  |L1.15766|
;;;5712   	#endif
;;;5713   
;;;5714   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d96  20d2              MOVS     r0,#0xd2
003d98  f7fffffe          BL       mess_find_unvol
003d9c  b110              CBZ      r0,|L1.15780|
003d9e  6828              LDR      r0,[r5,#0]  ; mess_data
003da0  286a              CMP      r0,#0x6a
003da2  d03a              BEQ      |L1.15898|
                  |L1.15780|
;;;5715   		{
;;;5716   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5717   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5718   	     }
;;;5719   	else 
;;;5720   		{
;;;5721   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003da4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003da6  4238              TST      r0,r7
003da8  d045              BEQ      |L1.15926|
;;;5722   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003daa  69a0              LDR      r0,[r4,#0x18]
003dac  f0400080          ORR      r0,r0,#0x80
003db0  61a0              STR      r0,[r4,#0x18]
                  |L1.15794|
;;;5723   		}
;;;5724   	//Реле аварии БПС
;;;5725   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003db2  20d2              MOVS     r0,#0xd2
003db4  f7fffffe          BL       mess_find_unvol
003db8  b110              CBZ      r0,|L1.15808|
003dba  6828              LDR      r0,[r5,#0]  ; mess_data
003dbc  286a              CMP      r0,#0x6a
003dbe  d040              BEQ      |L1.15938|
                  |L1.15808|
;;;5726   		{
;;;5727   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5728   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5729        	}
;;;5730   	else 
;;;5731   		{
;;;5732   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003dc0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003dc2  4238              TST      r0,r7
003dc4  d04c              BEQ      |L1.15968|
;;;5733        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003dc6  69a0              LDR      r0,[r4,#0x18]
003dc8  f0400020          ORR      r0,r0,#0x20
003dcc  61a0              STR      r0,[r4,#0x18]
003dce  e0d2              B        |L1.16246|
                  |L1.15824|
003dd0  6868              LDR      r0,[r5,#4]            ;5686  ; mess_data
003dd2  b138              CBZ      r0,|L1.15844|
003dd4  2801              CMP      r0,#1                 ;5687
003dd6  d1d0              BNE      |L1.15738|
003dd8  69a0              LDR      r0,[r4,#0x18]         ;5687
003dda  f0400010          ORR      r0,r0,#0x10           ;5687
003dde  61a0              STR      r0,[r4,#0x18]         ;5687
003de0  e7cb              B        |L1.15738|
                  |L1.15842|
003de2  e004              B        |L1.15854|
                  |L1.15844|
003de4  69e0              LDR      r0,[r4,#0x1c]         ;5686
003de6  f0400010          ORR      r0,r0,#0x10           ;5686
003dea  61e0              STR      r0,[r4,#0x1c]         ;5686
003dec  e7c5              B        |L1.15738|
                  |L1.15854|
003dee  69e0              LDR      r0,[r4,#0x1c]         ;5691
003df0  f0400010          ORR      r0,r0,#0x10           ;5691
003df4  61e0              STR      r0,[r4,#0x1c]         ;5691
003df6  e7c0              B        |L1.15738|
                  |L1.15864|
003df8  6868              LDR      r0,[r5,#4]            ;5707  ; mess_data
003dfa  b120              CBZ      r0,|L1.15878|
003dfc  69e0              LDR      r0,[r4,#0x1c]         ;5708
003dfe  f0407000          ORR      r0,r0,#0x2000000      ;5708
003e02  61e0              STR      r0,[r4,#0x1c]         ;5708
003e04  e7c7              B        |L1.15766|
                  |L1.15878|
003e06  69a0              LDR      r0,[r4,#0x18]         ;5707
003e08  f0407000          ORR      r0,r0,#0x2000000      ;5707
003e0c  61a0              STR      r0,[r4,#0x18]         ;5707
003e0e  e7c2              B        |L1.15766|
                  |L1.15888|
003e10  6ba0              LDR      r0,[r4,#0x38]         ;5710
003e12  f0407000          ORR      r0,r0,#0x2000000      ;5710
003e16  63a0              STR      r0,[r4,#0x38]         ;5710
003e18  e7bd              B        |L1.15766|
                  |L1.15898|
003e1a  6868              LDR      r0,[r5,#4]            ;5716  ; mess_data
003e1c  b130              CBZ      r0,|L1.15916|
003e1e  2801              CMP      r0,#1                 ;5717
003e20  d1c7              BNE      |L1.15794|
003e22  69a0              LDR      r0,[r4,#0x18]         ;5717
003e24  f0400080          ORR      r0,r0,#0x80           ;5717
003e28  61a0              STR      r0,[r4,#0x18]         ;5717
003e2a  e7c2              B        |L1.15794|
                  |L1.15916|
003e2c  69e0              LDR      r0,[r4,#0x1c]         ;5716
003e2e  f0400080          ORR      r0,r0,#0x80           ;5716
003e32  61e0              STR      r0,[r4,#0x1c]         ;5716
003e34  e7bd              B        |L1.15794|
                  |L1.15926|
003e36  69e0              LDR      r0,[r4,#0x1c]         ;5721
003e38  f0400080          ORR      r0,r0,#0x80           ;5721
003e3c  61e0              STR      r0,[r4,#0x1c]         ;5721
003e3e  e7b8              B        |L1.15794|
                  |L1.15936|
003e40  e013              B        |L1.15978|
                  |L1.15938|
003e42  6868              LDR      r0,[r5,#4]            ;5727  ; mess_data
003e44  b110              CBZ      r0,|L1.15948|
003e46  2801              CMP      r0,#1                 ;5728
003e48  d005              BEQ      |L1.15958|
003e4a  e094              B        |L1.16246|
                  |L1.15948|
003e4c  69e0              LDR      r0,[r4,#0x1c]         ;5727
003e4e  f0400020          ORR      r0,r0,#0x20           ;5727
003e52  61e0              STR      r0,[r4,#0x1c]         ;5727
003e54  e08f              B        |L1.16246|
                  |L1.15958|
003e56  69a0              LDR      r0,[r4,#0x18]         ;5728
003e58  f0400020          ORR      r0,r0,#0x20           ;5728
003e5c  61a0              STR      r0,[r4,#0x18]         ;5728
003e5e  e08a              B        |L1.16246|
                  |L1.15968|
003e60  69e0              LDR      r0,[r4,#0x1c]         ;5732
003e62  f0400020          ORR      r0,r0,#0x20           ;5732
003e66  61e0              STR      r0,[r4,#0x1c]         ;5732
003e68  e085              B        |L1.16246|
                  |L1.15978|
;;;5734   		} 
;;;5735   	}
;;;5736   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003e6a  f5a041ac          SUB      r1,r0,#0x5600
003e6e  3911              SUBS     r1,r1,#0x11
003e70  d001              BEQ      |L1.15990|
003e72  310f              ADDS     r1,r1,#0xf
003e74  d163              BNE      |L1.16190|
                  |L1.15990|
;;;5737   	{
;;;5738   	#ifndef UKU2071x 
;;;5739   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5740   		{
;;;5741   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5742   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5743   		}
;;;5744   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5745   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5746   	#endif
;;;5747   	#ifdef UKU2071x 
;;;5748   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e76  20d2              MOVS     r0,#0xd2
003e78  f7fffffe          BL       mess_find_unvol
003e7c  b110              CBZ      r0,|L1.16004|
003e7e  6828              LDR      r0,[r5,#0]  ; mess_data
003e80  2866              CMP      r0,#0x66
003e82  d023              BEQ      |L1.16076|
                  |L1.16004|
;;;5749   		{
;;;5750   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5751   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5752   		}
;;;5753   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003e84  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e86  07c0              LSLS     r0,r0,#31
003e88  d02c              BEQ      |L1.16100|
;;;5754   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003e8a  6fa0              LDR      r0,[r4,#0x78]
003e8c  f0407000          ORR      r0,r0,#0x2000000
003e90  67a0              STR      r0,[r4,#0x78]
                  |L1.16018|
;;;5755   	#endif
;;;5756   	
;;;5757   	
;;;5758   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e92  20d2              MOVS     r0,#0xd2
003e94  f7fffffe          BL       mess_find_unvol
003e98  b110              CBZ      r0,|L1.16032|
003e9a  6828              LDR      r0,[r5,#0]  ; mess_data
003e9c  286a              CMP      r0,#0x6a
003e9e  d026              BEQ      |L1.16110|
                  |L1.16032|
;;;5759   		{
;;;5760   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5761   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5762   	     }
;;;5763   	else 
;;;5764   		{
;;;5765   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003ea0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ea2  4238              TST      r0,r7
003ea4  d031              BEQ      |L1.16138|
;;;5766   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003ea6  69a0              LDR      r0,[r4,#0x18]
003ea8  f0400080          ORR      r0,r0,#0x80
003eac  61a0              STR      r0,[r4,#0x18]
                  |L1.16046|
;;;5767   		} 
;;;5768   
;;;5769   	//Реле аварий батарей
;;;5770   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003eae  20d2              MOVS     r0,#0xd2
003eb0  f7fffffe          BL       mess_find_unvol
003eb4  b110              CBZ      r0,|L1.16060|
003eb6  6828              LDR      r0,[r5,#0]  ; mess_data
003eb8  2867              CMP      r0,#0x67
003eba  d02b              BEQ      |L1.16148|
                  |L1.16060|
;;;5771   		{
;;;5772   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5773   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5774        	}
;;;5775   	else 
;;;5776   		{
;;;5777   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003ebc  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ec0  b390              CBZ      r0,|L1.16168|
;;;5778        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ec2  69a0              LDR      r0,[r4,#0x18]
003ec4  f0400010          ORR      r0,r0,#0x10
003ec8  61a0              STR      r0,[r4,#0x18]
003eca  e054              B        |L1.16246|
                  |L1.16076|
003ecc  6868              LDR      r0,[r5,#4]            ;5750  ; mess_data
003ece  b120              CBZ      r0,|L1.16090|
003ed0  6fa0              LDR      r0,[r4,#0x78]         ;5751
003ed2  f0407000          ORR      r0,r0,#0x2000000      ;5751
003ed6  67a0              STR      r0,[r4,#0x78]         ;5751
003ed8  e7db              B        |L1.16018|
                  |L1.16090|
003eda  6fe0              LDR      r0,[r4,#0x7c]         ;5750
003edc  f0407000          ORR      r0,r0,#0x2000000      ;5750
003ee0  67e0              STR      r0,[r4,#0x7c]         ;5750
003ee2  e7d6              B        |L1.16018|
                  |L1.16100|
003ee4  6fe0              LDR      r0,[r4,#0x7c]         ;5753
003ee6  f0407000          ORR      r0,r0,#0x2000000      ;5753
003eea  67e0              STR      r0,[r4,#0x7c]         ;5753
003eec  e7d1              B        |L1.16018|
                  |L1.16110|
003eee  6868              LDR      r0,[r5,#4]            ;5760  ; mess_data
003ef0  b130              CBZ      r0,|L1.16128|
003ef2  2801              CMP      r0,#1                 ;5761
003ef4  d1db              BNE      |L1.16046|
003ef6  69a0              LDR      r0,[r4,#0x18]         ;5761
003ef8  f0400080          ORR      r0,r0,#0x80           ;5761
003efc  61a0              STR      r0,[r4,#0x18]         ;5761
003efe  e7d6              B        |L1.16046|
                  |L1.16128|
003f00  69e0              LDR      r0,[r4,#0x1c]         ;5760
003f02  f0400080          ORR      r0,r0,#0x80           ;5760
003f06  61e0              STR      r0,[r4,#0x1c]         ;5760
003f08  e7d1              B        |L1.16046|
                  |L1.16138|
003f0a  69e0              LDR      r0,[r4,#0x1c]         ;5765
003f0c  f0400080          ORR      r0,r0,#0x80           ;5765
003f10  61e0              STR      r0,[r4,#0x1c]         ;5765
003f12  e7cc              B        |L1.16046|
                  |L1.16148|
003f14  6868              LDR      r0,[r5,#4]            ;5772  ; mess_data
003f16  b110              CBZ      r0,|L1.16158|
003f18  2801              CMP      r0,#1                 ;5773
003f1a  d006              BEQ      |L1.16170|
003f1c  e02b              B        |L1.16246|
                  |L1.16158|
003f1e  69e0              LDR      r0,[r4,#0x1c]         ;5772
003f20  f0400010          ORR      r0,r0,#0x10           ;5772
003f24  61e0              STR      r0,[r4,#0x1c]         ;5772
003f26  e026              B        |L1.16246|
                  |L1.16168|
003f28  e004              B        |L1.16180|
                  |L1.16170|
003f2a  69a0              LDR      r0,[r4,#0x18]         ;5773
003f2c  f0400010          ORR      r0,r0,#0x10           ;5773
003f30  61a0              STR      r0,[r4,#0x18]         ;5773
003f32  e020              B        |L1.16246|
                  |L1.16180|
003f34  69e0              LDR      r0,[r4,#0x1c]         ;5777
003f36  f0400010          ORR      r0,r0,#0x10           ;5777
003f3a  61e0              STR      r0,[r4,#0x1c]         ;5777
003f3c  e01b              B        |L1.16246|
                  |L1.16190|
;;;5779   		} 
;;;5780   	} 	 
;;;5781   else	
;;;5782   	{
;;;5783   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5784   	#ifndef UKU2071x 
;;;5785   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5786   		{
;;;5787   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5788   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5789   		}
;;;5790   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5791   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5792   	#endif
;;;5793   	#ifdef UKU2071x 
;;;5794   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003f3e  20d2              MOVS     r0,#0xd2
003f40  f7fffffe          BL       mess_find_unvol
003f44  b110              CBZ      r0,|L1.16204|
003f46  6828              LDR      r0,[r5,#0]  ; mess_data
003f48  2866              CMP      r0,#0x66
003f4a  d026              BEQ      |L1.16282|
                  |L1.16204|
;;;5795   		{
;;;5796   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5797   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5798   		}
;;;5799   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003f4c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f4e  07c0              LSLS     r0,r0,#31
003f50  d02f              BEQ      |L1.16306|
;;;5800   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003f52  6fa0              LDR      r0,[r4,#0x78]
003f54  f0407000          ORR      r0,r0,#0x2000000
003f58  67a0              STR      r0,[r4,#0x78]
                  |L1.16218|
;;;5801   	#endif
;;;5802   
;;;5803   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f5a  20d2              MOVS     r0,#0xd2
003f5c  f7fffffe          BL       mess_find_unvol
003f60  b110              CBZ      r0,|L1.16232|
003f62  6828              LDR      r0,[r5,#0]  ; mess_data
003f64  286a              CMP      r0,#0x6a
003f66  d029              BEQ      |L1.16316|
                  |L1.16232|
;;;5804   		{
;;;5805   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5806   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5807        	}
;;;5808   	else 
;;;5809   		{
;;;5810   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003f68  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f6a  4238              TST      r0,r7
003f6c  d034              BEQ      |L1.16344|
;;;5811        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003f6e  69a0              LDR      r0,[r4,#0x18]
003f70  f0400020          ORR      r0,r0,#0x20
003f74  61a0              STR      r0,[r4,#0x18]
                  |L1.16246|
;;;5812   		}
;;;5813   	}
;;;5814   //Дополнительное реле УКУ 
;;;5815   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003f76  20d2              MOVS     r0,#0xd2
003f78  f7fffffe          BL       mess_find_unvol
;;;5816   	{
;;;5817   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5818   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5819   	}
;;;5820   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5821   	{
;;;5822   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003f7c  f8df83f8          LDR      r8,|L1.17272|
003f80  4ffe              LDR      r7,|L1.17276|
003f82  4eff              LDR      r6,|L1.17280|
003f84  b110              CBZ      r0,|L1.16268|
003f86  6828              LDR      r0,[r5,#0]            ;5815  ; mess_data
003f88  2871              CMP      r0,#0x71              ;5815
003f8a  d02a              BEQ      |L1.16354|
                  |L1.16268|
003f8c  48fd              LDR      r0,|L1.17284|
003f8e  f9b00000          LDRSH    r0,[r0,#0]            ;5820  ; DOP_RELE_FUNC
003f92  b380              CBZ      r0,|L1.16374|
;;;5823   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5824   	}
;;;5825   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003f94  2801              CMP      r0,#1
003f96  d066              BEQ      |L1.16486|
003f98  e070              B        |L1.16508|
                  |L1.16282|
003f9a  6868              LDR      r0,[r5,#4]            ;5796  ; mess_data
003f9c  b120              CBZ      r0,|L1.16296|
003f9e  69e0              LDR      r0,[r4,#0x1c]         ;5797
003fa0  f0407000          ORR      r0,r0,#0x2000000      ;5797
003fa4  61e0              STR      r0,[r4,#0x1c]         ;5797
003fa6  e7d8              B        |L1.16218|
                  |L1.16296|
003fa8  69a0              LDR      r0,[r4,#0x18]         ;5796
003faa  f0407000          ORR      r0,r0,#0x2000000      ;5796
003fae  61a0              STR      r0,[r4,#0x18]         ;5796
003fb0  e7d3              B        |L1.16218|
                  |L1.16306|
003fb2  6ba0              LDR      r0,[r4,#0x38]         ;5799
003fb4  f0407000          ORR      r0,r0,#0x2000000      ;5799
003fb8  63a0              STR      r0,[r4,#0x38]         ;5799
003fba  e7ce              B        |L1.16218|
                  |L1.16316|
003fbc  6868              LDR      r0,[r5,#4]            ;5805  ; mess_data
003fbe  b130              CBZ      r0,|L1.16334|
003fc0  2801              CMP      r0,#1                 ;5806
003fc2  d1d8              BNE      |L1.16246|
003fc4  69a0              LDR      r0,[r4,#0x18]         ;5806
003fc6  f0400020          ORR      r0,r0,#0x20           ;5806
003fca  61a0              STR      r0,[r4,#0x18]         ;5806
003fcc  e7d3              B        |L1.16246|
                  |L1.16334|
003fce  69e0              LDR      r0,[r4,#0x1c]         ;5805
003fd0  f0400020          ORR      r0,r0,#0x20           ;5805
003fd4  61e0              STR      r0,[r4,#0x1c]         ;5805
003fd6  e7ce              B        |L1.16246|
                  |L1.16344|
003fd8  69e0              LDR      r0,[r4,#0x1c]         ;5810
003fda  f0400020          ORR      r0,r0,#0x20           ;5810
003fde  61e0              STR      r0,[r4,#0x1c]         ;5810
003fe0  e7c9              B        |L1.16246|
                  |L1.16354|
003fe2  6868              LDR      r0,[r5,#4]            ;5817  ; mess_data
003fe4  b110              CBZ      r0,|L1.16364|
003fe6  2801              CMP      r0,#1                 ;5818
003fe8  d006              BEQ      |L1.16376|
003fea  e047              B        |L1.16508|
                  |L1.16364|
003fec  69e0              LDR      r0,[r4,#0x1c]         ;5817
003fee  f4407000          ORR      r0,r0,#0x200          ;5817
003ff2  61e0              STR      r0,[r4,#0x1c]         ;5817
003ff4  e042              B        |L1.16508|
                  |L1.16374|
003ff6  e004              B        |L1.16386|
                  |L1.16376|
003ff8  69a0              LDR      r0,[r4,#0x18]         ;5818
003ffa  f4407000          ORR      r0,r0,#0x200          ;5818
003ffe  61a0              STR      r0,[r4,#0x18]         ;5818
004000  e03c              B        |L1.16508|
                  |L1.16386|
004002  48e1              LDR      r0,|L1.17288|
004004  49e1              LDR      r1,|L1.17292|
004006  f9b00000          LDRSH    r0,[r0,#0]            ;5822  ; speedChIsOn
00400a  b9d0              CBNZ     r0,|L1.16450|
00400c  f8962023          LDRB     r2,[r6,#0x23]         ;5822  ; spc_stat
004010  2a02              CMP      r2,#2                 ;5822
004012  d016              BEQ      |L1.16450|
004014  780a              LDRB     r2,[r1,#0]            ;5822  ; hv_vz_stat
004016  b9a2              CBNZ     r2,|L1.16450|
004018  783a              LDRB     r2,[r7,#0]            ;5822  ; sp_ch_stat
00401a  b992              CBNZ     r2,|L1.16450|
00401c  7972              LDRB     r2,[r6,#5]            ;5822  ; vz1_stat
00401e  b982              CBNZ     r2,|L1.16450|
004020  79f2              LDRB     r2,[r6,#7]            ;5822  ; vz2_stat
004022  b972              CBNZ     r2,|L1.16450|
004024  f9b82000          LDRSH    r2,[r8,#0]            ;5822  ; load_U
004028  230a              MOVS     r3,#0xa               ;5822
00402a  fb92f2f3          SDIV     r2,r2,r3              ;5822
00402e  4bd8              LDR      r3,|L1.17296|
004030  f9b33000          LDRSH    r3,[r3,#0]            ;5822  ; UVENTOFF
004034  429a              CMP      r2,r3                 ;5822
004036  da04              BGE      |L1.16450|
004038  69e0              LDR      r0,[r4,#0x1c]         ;5822
00403a  f4407000          ORR      r0,r0,#0x200          ;5822
00403e  61e0              STR      r0,[r4,#0x1c]         ;5822
004040  e01c              B        |L1.16508|
                  |L1.16450|
004042  b958              CBNZ     r0,|L1.16476|
004044  f8960023          LDRB     r0,[r6,#0x23]         ;5823  ; spc_stat
004048  2802              CMP      r0,#2                 ;5823
00404a  d007              BEQ      |L1.16476|
00404c  7808              LDRB     r0,[r1,#0]            ;5823  ; hv_vz_stat
00404e  b928              CBNZ     r0,|L1.16476|
004050  7838              LDRB     r0,[r7,#0]            ;5823  ; sp_ch_stat
004052  b918              CBNZ     r0,|L1.16476|
004054  7970              LDRB     r0,[r6,#5]            ;5823  ; vz1_stat
004056  b908              CBNZ     r0,|L1.16476|
004058  79f0              LDRB     r0,[r6,#7]            ;5823  ; vz2_stat
00405a  b178              CBZ      r0,|L1.16508|
                  |L1.16476|
00405c  69a0              LDR      r0,[r4,#0x18]         ;5823
00405e  f4407000          ORR      r0,r0,#0x200          ;5823
004062  61a0              STR      r0,[r4,#0x18]         ;5823
004064  e00a              B        |L1.16508|
                  |L1.16486|
;;;5826   	{
;;;5827   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
004066  20d2              MOVS     r0,#0xd2
004068  f7fffffe          BL       mess_find_unvol
00406c  b110              CBZ      r0,|L1.16500|
00406e  6828              LDR      r0,[r5,#0]  ; mess_data
004070  2872              CMP      r0,#0x72
004072  d017              BEQ      |L1.16548|
                  |L1.16500|
;;;5828   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
004074  69a0              LDR      r0,[r4,#0x18]
004076  f4407000          ORR      r0,r0,#0x200
00407a  61a0              STR      r0,[r4,#0x18]
                  |L1.16508|
;;;5829   	}
;;;5830   
;;;5831   #endif //o_9
;;;5832   
;;;5833   #ifdef UKU_FSO	
;;;5834   #ifndef UKU_FSO_MINI
;;;5835   //Реле аварий батарей
;;;5836   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5837   	{
;;;5838   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5839   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5840        }
;;;5841   else 
;;;5842   	{
;;;5843   	if(!(vent_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5844       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5845   	} 
;;;5846   #endif //!UKU_FSO_MINI
;;;5847   
;;;5848   #ifdef UKU_FSO_MINI
;;;5849   //Реле D1
;;;5850   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D1))
;;;5851   	{
;;;5852   	if(mess_data[1]==0)  		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5853   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5854        }
;;;5855   else 
;;;5856   	{
;;;5857   	if(uku_fso_D1_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5858       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5859   	} 
;;;5860   
;;;5861   //Реле D2
;;;5862   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D2))
;;;5863   	{
;;;5864   	if(mess_data[1]==0) 	 	SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5865   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5866        }
;;;5867   else 
;;;5868   	{
;;;5869   	if(uku_fso_D2_stat) 		SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5870       else 						SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5871   	}
;;;5872   
;;;5873   //Реле D5
;;;5874   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D5))
;;;5875   	{
;;;5876   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;5877   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;5878        }
;;;5879   else 
;;;5880   	{
;;;5881   	if(uku_fso_D5_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;5882       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;5883   	}
;;;5884   
;;;5885   //Реле SYSOK
;;;5886   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_SYSOK))
;;;5887   	{
;;;5888   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;5889   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;5890        }
;;;5891   else 
;;;5892   	{
;;;5893   	if(uku_fso_SYSOK_stat) 	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;5894       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;5895   	}/**/
;;;5896   #endif //UKU_FSO_MINI
;;;5897   #endif //UKU_FSO
;;;5898   
;;;5899   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5900   //Блок выносной реле
;;;5901   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
00407c  20d2              MOVS     r0,#0xd2
00407e  f7fffffe          BL       mess_find_unvol
;;;5902   	{
;;;5903   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
004082  f8df9310          LDR      r9,|L1.17300|
;;;5904   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5905   	}
;;;5906   else 
;;;5907   	{
;;;5908   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
004086  4cc4              LDR      r4,|L1.17304|
004088  b110              CBZ      r0,|L1.16528|
00408a  6828              LDR      r0,[r5,#0]            ;5901  ; mess_data
00408c  2875              CMP      r0,#0x75              ;5901
00408e  d00e              BEQ      |L1.16558|
                  |L1.16528|
004090  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004092  07c0              LSLS     r0,r0,#31
004094  d01e              BEQ      |L1.16596|
004096  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00409a  f0400001          ORR      r0,r0,#1
00409e  f8890000          STRB     r0,[r9,#0]
0040a2  e01d              B        |L1.16608|
                  |L1.16548|
0040a4  69e0              LDR      r0,[r4,#0x1c]         ;5827
0040a6  f4407000          ORR      r0,r0,#0x200          ;5827
0040aa  61e0              STR      r0,[r4,#0x1c]         ;5827
0040ac  e7e6              B        |L1.16508|
                  |L1.16558|
0040ae  6868              LDR      r0,[r5,#4]            ;5903  ; mess_data
0040b0  b110              CBZ      r0,|L1.16568|
0040b2  2801              CMP      r0,#1                 ;5904
0040b4  d007              BEQ      |L1.16582|
0040b6  e013              B        |L1.16608|
                  |L1.16568|
0040b8  f8990000          LDRB     r0,[r9,#0]            ;5903  ; bdr_transmit_stat
0040bc  f00000fe          AND      r0,r0,#0xfe           ;5903
0040c0  f8890000          STRB     r0,[r9,#0]            ;5903
0040c4  e00c              B        |L1.16608|
                  |L1.16582|
0040c6  f8990000          LDRB     r0,[r9,#0]            ;5904  ; bdr_transmit_stat
0040ca  f0400001          ORR      r0,r0,#1              ;5904
0040ce  f8890000          STRB     r0,[r9,#0]            ;5904
0040d2  e005              B        |L1.16608|
                  |L1.16596|
;;;5909   	else 						bdr_transmit_stat&=0xfe;
0040d4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040d8  f00000fe          AND      r0,r0,#0xfe
0040dc  f8890000          STRB     r0,[r9,#0]
                  |L1.16608|
;;;5910   	}	
;;;5911   
;;;5912   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
0040e0  20d2              MOVS     r0,#0xd2
0040e2  f7fffffe          BL       mess_find_unvol
0040e6  b110              CBZ      r0,|L1.16622|
0040e8  6828              LDR      r0,[r5,#0]  ; mess_data
0040ea  2876              CMP      r0,#0x76
0040ec  d009              BEQ      |L1.16642|
                  |L1.16622|
;;;5913   	{
;;;5914   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5915   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5916   	}
;;;5917   else 
;;;5918   	{
;;;5919   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
0040ee  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0040f0  0780              LSLS     r0,r0,#30
0040f2  d519              BPL      |L1.16680|
0040f4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040f8  f0400002          ORR      r0,r0,#2
0040fc  f8890000          STRB     r0,[r9,#0]
004100  e018              B        |L1.16692|
                  |L1.16642|
004102  6868              LDR      r0,[r5,#4]            ;5914  ; mess_data
004104  b110              CBZ      r0,|L1.16652|
004106  2801              CMP      r0,#1                 ;5915
004108  d007              BEQ      |L1.16666|
00410a  e013              B        |L1.16692|
                  |L1.16652|
00410c  f8990000          LDRB     r0,[r9,#0]            ;5914  ; bdr_transmit_stat
004110  f00000fd          AND      r0,r0,#0xfd           ;5914
004114  f8890000          STRB     r0,[r9,#0]            ;5914
004118  e00c              B        |L1.16692|
                  |L1.16666|
00411a  f8990000          LDRB     r0,[r9,#0]            ;5915  ; bdr_transmit_stat
00411e  f0400002          ORR      r0,r0,#2              ;5915
004122  f8890000          STRB     r0,[r9,#0]            ;5915
004126  e005              B        |L1.16692|
                  |L1.16680|
;;;5920   	else 						bdr_transmit_stat&=0xfd;
004128  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00412c  f00000fd          AND      r0,r0,#0xfd
004130  f8890000          STRB     r0,[r9,#0]
                  |L1.16692|
;;;5921   	}	
;;;5922   	
;;;5923   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
004134  20d2              MOVS     r0,#0xd2
004136  f7fffffe          BL       mess_find_unvol
00413a  b110              CBZ      r0,|L1.16706|
00413c  6828              LDR      r0,[r5,#0]  ; mess_data
00413e  2877              CMP      r0,#0x77
004140  d009              BEQ      |L1.16726|
                  |L1.16706|
;;;5924   	{
;;;5925   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5926   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5927   	}
;;;5928   else 
;;;5929   	{
;;;5930   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
004142  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004144  0740              LSLS     r0,r0,#29
004146  d519              BPL      |L1.16764|
004148  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00414c  f0400004          ORR      r0,r0,#4
004150  f8890000          STRB     r0,[r9,#0]
004154  e018              B        |L1.16776|
                  |L1.16726|
004156  6868              LDR      r0,[r5,#4]            ;5925  ; mess_data
004158  b110              CBZ      r0,|L1.16736|
00415a  2801              CMP      r0,#1                 ;5926
00415c  d007              BEQ      |L1.16750|
00415e  e013              B        |L1.16776|
                  |L1.16736|
004160  f8990000          LDRB     r0,[r9,#0]            ;5925  ; bdr_transmit_stat
004164  f00000fb          AND      r0,r0,#0xfb           ;5925
004168  f8890000          STRB     r0,[r9,#0]            ;5925
00416c  e00c              B        |L1.16776|
                  |L1.16750|
00416e  f8990000          LDRB     r0,[r9,#0]            ;5926  ; bdr_transmit_stat
004172  f0400004          ORR      r0,r0,#4              ;5926
004176  f8890000          STRB     r0,[r9,#0]            ;5926
00417a  e005              B        |L1.16776|
                  |L1.16764|
;;;5931   	else 						bdr_transmit_stat&=0xfb;
00417c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004180  f00000fb          AND      r0,r0,#0xfb
004184  f8890000          STRB     r0,[r9,#0]
                  |L1.16776|
;;;5932   	}	
;;;5933   	
;;;5934   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
004188  20d2              MOVS     r0,#0xd2
00418a  f7fffffe          BL       mess_find_unvol
00418e  b110              CBZ      r0,|L1.16790|
004190  6828              LDR      r0,[r5,#0]  ; mess_data
004192  2878              CMP      r0,#0x78
004194  d009              BEQ      |L1.16810|
                  |L1.16790|
;;;5935   	{
;;;5936   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5937   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5938   	}
;;;5939   else 
;;;5940   	{
;;;5941   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
004196  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004198  0700              LSLS     r0,r0,#28
00419a  d519              BPL      |L1.16848|
00419c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041a0  f0400008          ORR      r0,r0,#8
0041a4  f8890000          STRB     r0,[r9,#0]
0041a8  e018              B        |L1.16860|
                  |L1.16810|
0041aa  6868              LDR      r0,[r5,#4]            ;5936  ; mess_data
0041ac  b110              CBZ      r0,|L1.16820|
0041ae  2801              CMP      r0,#1                 ;5937
0041b0  d007              BEQ      |L1.16834|
0041b2  e013              B        |L1.16860|
                  |L1.16820|
0041b4  f8990000          LDRB     r0,[r9,#0]            ;5936  ; bdr_transmit_stat
0041b8  f00000f7          AND      r0,r0,#0xf7           ;5936
0041bc  f8890000          STRB     r0,[r9,#0]            ;5936
0041c0  e00c              B        |L1.16860|
                  |L1.16834|
0041c2  f8990000          LDRB     r0,[r9,#0]            ;5937  ; bdr_transmit_stat
0041c6  f0400008          ORR      r0,r0,#8              ;5937
0041ca  f8890000          STRB     r0,[r9,#0]            ;5937
0041ce  e005              B        |L1.16860|
                  |L1.16848|
;;;5942   	else 						bdr_transmit_stat&=0xf7;
0041d0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041d4  f00000f7          AND      r0,r0,#0xf7
0041d8  f8890000          STRB     r0,[r9,#0]
                  |L1.16860|
;;;5943   	}	
;;;5944   					 	
;;;5945   #endif
;;;5946   
;;;5947   #ifdef UKU_KONTUR
;;;5948   
;;;5949   //Реле общей аварии
;;;5950   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5951   	{
;;;5952   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5953   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5954   	}
;;;5955   else 
;;;5956   	{
;;;5957        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5958             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5959             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5960             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5961             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5962        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5963   	}
;;;5964   
;;;5965   	
;;;5966   //rel_warm_plazma=0;
;;;5967   //Реле освещения   
;;;5968   /*
;;;5969   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5970   	{
;;;5971   	if(mess_data[1]==0)
;;;5972   		{
;;;5973   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5974   		rel_warm_plazma=1;
;;;5975   		}
;;;5976   	else if(mess_data[1]==1) 
;;;5977   		{
;;;5978   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5979   		rel_warm_plazma=2;
;;;5980   		}
;;;5981        }
;;;5982   else 
;;;5983   	{
;;;5984   	if(warm_stat_k==wsOFF) 
;;;5985   		{
;;;5986   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5987   		rel_warm_plazma=3;
;;;5988   		}
;;;5989        else 
;;;5990   		{
;;;5991   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5992   		rel_warm_plazma=4;
;;;5993   		}
;;;5994   	}
;;;5995   */
;;;5996   //Реле освещения
;;;5997   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5998   	{
;;;5999   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6000   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6001        }
;;;6002   else 
;;;6003   	{
;;;6004   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6005        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6006   	}
;;;6007   
;;;6008   
;;;6009   
;;;6010   //Реле выключения нагрузки
;;;6011   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6012   	{
;;;6013   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6014   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6015        }
;;;6016   else if(tloaddisable_cmnd==0)
;;;6017   	{
;;;6018   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6019   	}
;;;6020   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6021   	{
;;;6022   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6023   	}
;;;6024   
;;;6025   else 
;;;6026   	{
;;;6027   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6028        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6029   	} 
;;;6030   
;;;6031   //Реле осевого вентилятора или отопителя
;;;6032   if(RELE_LOG)
;;;6033   	{
;;;6034   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6035   		{
;;;6036   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6037   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6038   		}
;;;6039   	else 
;;;6040   		{
;;;6041   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6042   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6043   		} 
;;;6044   
;;;6045   	}
;;;6046   else 
;;;6047   	{
;;;6048   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6049   		{
;;;6050   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6051   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6052   		}
;;;6053   	else 
;;;6054   		{
;;;6055   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6056   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6057   		} 
;;;6058   	}
;;;6059   #endif
;;;6060   
;;;6061   
;;;6062   #ifdef UKU_TELECORE2015
;;;6063   //Реле аварии сети
;;;6064   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6065   	{
;;;6066   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6067   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6068   	}
;;;6069   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6070   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6071   
;;;6072   
;;;6073   //Реле освещения
;;;6074   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6075   	{
;;;6076   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6077   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6078        }
;;;6079   else 
;;;6080   	{
;;;6081   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6082        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6083   	}
;;;6084   
;;;6085   //Реле отопителя
;;;6086   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6087   	{
;;;6088   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6089   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6090   	}
;;;6091   else 
;;;6092   	{
;;;6093   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6094        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6095   	} 
;;;6096   //Реле вентилятора
;;;6097   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6098   	{
;;;6099   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6100   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6101   	}
;;;6102   else 
;;;6103   	{
;;;6104   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6105        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6106   	} 
;;;6107   
;;;6108   //Реле внутреннего вентилятора
;;;6109   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6110   	{
;;;6111   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6112   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6113   	}
;;;6114   else 
;;;6115   	{
;;;6116   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6117        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6118   	} 
;;;6119   
;;;6120   #endif
;;;6121   
;;;6122   #ifdef UKU_TELECORE2017
;;;6123   //Реле аварии сети
;;;6124   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6125   	{
;;;6126   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6127   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6128   	}
;;;6129   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6130   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6131   
;;;6132   
;;;6133   //Реле освещения
;;;6134   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6135   	{
;;;6136   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6137   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6138        }
;;;6139   else 
;;;6140   	{
;;;6141   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6142        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6143   	}
;;;6144   
;;;6145   //Реле отопителя
;;;6146   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6147   	{
;;;6148   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6149   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6150   	}
;;;6151   else 
;;;6152   	{
;;;6153   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6154        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6155   	} 
;;;6156   //Реле вентилятора
;;;6157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6158   	{
;;;6159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6161   	}
;;;6162   else 
;;;6163   	{
;;;6164   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6165        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6166   	} 
;;;6167   
;;;6168   //Реле внутреннего вентилятора
;;;6169   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6170   	{
;;;6171   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6172   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6173   	}
;;;6174   else 
;;;6175   	{
;;;6176   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6177        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6178   	} 
;;;6179   
;;;6180   //Реле выключения нагрузки
;;;6181   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6182   	{
;;;6183   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6184   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6185        }
;;;6186   else if(tloaddisable_cmnd==0)
;;;6187   	{
;;;6188   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6189   	}
;;;6190   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6191   	{
;;;6192   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6193   	}
;;;6194   
;;;6195   else 
;;;6196   	{
;;;6197   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6198        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6199   	} 
;;;6200   
;;;6201   
;;;6202   #endif
;;;6203   
;;;6204   #ifdef IPS_SGEP_GAZPROM
;;;6205   rele_hndl_plazma[0]++;
;;;6206   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;6207   	{
;;;6208   	rele_hndl_plazma[1]++;
;;;6209   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6210   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6211        }
;;;6212   else 
;;;6213   	{
;;;6214   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6215        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6216   	} 
;;;6217   
;;;6218   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6219   	{
;;;6220   	rele_hndl_plazma[2]++;
;;;6221   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6222   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6223   	}
;;;6224   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6225   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6226   #endif
;;;6227   
;;;6228   if(NUMBDR==1)
0041dc  486f              LDR      r0,|L1.17308|
0041de  8800              LDRH     r0,[r0,#0]  ; NUMBDR
0041e0  2801              CMP      r0,#1
0041e2  d17e              BNE      |L1.17122|
;;;6229   	{
;;;6230   	char ii_;
;;;6231   	char bdr_avar_stat_temp=0;
0041e4  f04f0000          MOV      r0,#0
;;;6232   	for	(ii_=0;ii_<4;ii_++)
0041e8  4601              MOV      r1,r0
;;;6233   		{
;;;6234   	//o_9_s
;;;6235   	#ifdef UKU_6U
;;;6236   		 //АБ разряжена
;;;6237   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6238   			( (bat[0]._Ub<(USIGN*10) && (BAT_IS_ON[0]==bisON) ) || 
;;;6239   			(bat[1]._Ub<(USIGN*10) && (BAT_IS_ON[1]==bisON) ) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6240   		//Выравнивающий заряд
;;;6241   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6242   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6243   	   	//Общая авария ИБЭП
;;;6244   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6245   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6246   		//Ток АКБ<-0,5А
;;;6247   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6248   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6249   	   	//отключение НПН
;;;6250   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6251   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6252   		//контроль емкости АКБ1
;;;6253   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6254   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6255   		//контроль емкости АКБ2
;;;6256   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6257   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6258   	#else
;;;6259   	//o_9_e		//АБ разряжена
;;;6260   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6261   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6262   		//Ускоренный заряд
;;;6263   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6264   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6265   		//Выравнивающий заряд
;;;6266   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6267   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6268   		//Общая авария ЗВУ
;;;6269   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6270   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6271   		//Uвых завышено
;;;6272   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6273   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
0041ea  f8dfa1b4          LDR      r10,|L1.17312|
;;;6274   		//Uвых занижено
;;;6275   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6276   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6277   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6278   			(
;;;6279   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
0041ee  f8df91b4          LDR      r9,|L1.17316|
0041f2  4d6d              LDR      r5,|L1.17320|
0041f4  f8dfb1b4          LDR      r11,|L1.17324|
0041f8  f04f0301          MOV      r3,#1                 ;5117
                  |L1.16892|
0041fc  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6260
004200  ea5f7cc2          LSLS     r12,r2,#31            ;6260
004204  d010              BEQ      |L1.16936|
004206  f8dfc1a8          LDR      r12,|L1.17328|
00420a  f9b8e000          LDRSH    lr,[r8,#0]            ;6261  ; load_U
00420e  f9bcc000          LDRSH    r12,[r12,#0]          ;6261  ; USIGN
004212  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6261
004216  ebbe0f4c          CMP      lr,r12,LSL #1         ;6261
00421a  da05              BGE      |L1.16936|
00421c  fa03fc01          LSL      r12,r3,r1             ;6261
004220  ea4c0c00          ORR      r12,r12,r0            ;6261
004224  f00c00ff          AND      r0,r12,#0xff          ;6261
                  |L1.16936|
004228  ea5f7c82          LSLS     r12,r2,#30            ;6263
00422c  d50a              BPL      |L1.16964|
00422e  f897c000          LDRB     r12,[r7,#0]           ;6264  ; sp_ch_stat
004232  f1bc0f02          CMP      r12,#2                ;6264
004236  d105              BNE      |L1.16964|
004238  fa03fc01          LSL      r12,r3,r1             ;6264
00423c  ea4c0c00          ORR      r12,r12,r0            ;6264
004240  f00c00ff          AND      r0,r12,#0xff          ;6264
                  |L1.16964|
004244  ea5f7c42          LSLS     r12,r2,#29            ;6266
004248  d50a              BPL      |L1.16992|
00424a  f896c023          LDRB     r12,[r6,#0x23]        ;6267  ; spc_stat
00424e  f1bc0f02          CMP      r12,#2                ;6267
004252  d105              BNE      |L1.16992|
004254  fa03fc01          LSL      r12,r3,r1             ;6267
004258  ea4c0c00          ORR      r12,r12,r0            ;6267
00425c  f00c00ff          AND      r0,r12,#0xff          ;6267
                  |L1.16992|
004260  ea5f7c02          LSLS     r12,r2,#28            ;6269
004264  d50c              BPL      |L1.17024|
004266  f8dfc14c          LDR      r12,|L1.17332|
00426a  f8dcc000          LDR      r12,[r12,#0]          ;6270  ; avar_stat
00426e  f1bc0f00          CMP      r12,#0                ;6270
004272  d005              BEQ      |L1.17024|
004274  fa03fc01          LSL      r12,r3,r1             ;6270
004278  ea4c0c00          ORR      r12,r12,r0            ;6270
00427c  f00c00ff          AND      r0,r12,#0xff          ;6270
                  |L1.17024|
004280  ea5f6cc2          LSLS     r12,r2,#27            ;6272
004284  d50a              BPL      |L1.17052|
004286  f89ac000          LDRB     r12,[r10,#0]          ;6273  ; uout_av
00428a  f1bc0f01          CMP      r12,#1                ;6273
00428e  d105              BNE      |L1.17052|
004290  fa03fc01          LSL      r12,r3,r1             ;6273
004294  ea4c0c00          ORR      r12,r12,r0            ;6273
004298  f00c00ff          AND      r0,r12,#0xff          ;6273
                  |L1.17052|
00429c  ea5f6c82          LSLS     r12,r2,#26            ;6275
0042a0  d50a              BPL      |L1.17080|
0042a2  f89ac000          LDRB     r12,[r10,#0]          ;6276  ; uout_av
0042a6  f1bc0f02          CMP      r12,#2                ;6276
0042aa  d105              BNE      |L1.17080|
0042ac  fa03fc01          LSL      r12,r3,r1             ;6276
0042b0  ea4c0c00          ORR      r12,r12,r0            ;6276
0042b4  f00c00ff          AND      r0,r12,#0xff          ;6276
                  |L1.17080|
0042b8  ea5f6c42          LSLS     r12,r2,#25            ;6277
0042bc  d525              BPL      |L1.17162|
0042be  f899c001          LDRB     r12,[r9,#1]  ; bps
0042c2  ea5f6ccc          LSLS     r12,r12,#27
0042c6  d504              BPL      |L1.17106|
0042c8  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042cc  f1bc0f01          CMP      r12,#1
0042d0  da15              BGE      |L1.17150|
                  |L1.17106|
;;;6280   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0042d2  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0042d6  ea5f6ccc          LSLS     r12,r12,#27
0042da  d506              BPL      |L1.17130|
0042dc  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042e0  e000              B        |L1.17124|
                  |L1.17122|
0042e2  e047              B        |L1.17268|
                  |L1.17124|
0042e4  f1bc0f02          CMP      r12,#2
0042e8  da09              BGE      |L1.17150|
                  |L1.17130|
;;;6281   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0042ea  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0042ee  ea5f6ccc          LSLS     r12,r12,#27
0042f2  d50a              BPL      |L1.17162|
0042f4  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042f8  f1bc0f03          CMP      r12,#3
0042fc  db05              BLT      |L1.17162|
                  |L1.17150|
;;;6282   			))bdr_avar_stat_temp|=(1<<ii_);
0042fe  fa03fc01          LSL      r12,r3,r1
004302  ea4c0c00          ORR      r12,r12,r0
004306  f00c00ff          AND      r0,r12,#0xff
                  |L1.17162|
;;;6283   		if((RELE_SET_MASK[ii_]&0x80)&&
00430a  ea5f6c02          LSLS     r12,r2,#24
00430e  d523              BPL      |L1.17240|
;;;6284   			(
;;;6285   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004310  f899c001          LDRB     r12,[r9,#1]  ; bps
004314  ea5f7c0c          LSLS     r12,r12,#28
004318  d004              BEQ      |L1.17188|
00431a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00431e  f1bc0f01          CMP      r12,#1
004322  da13              BGE      |L1.17228|
                  |L1.17188|
;;;6286   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004324  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004328  ea5f7c0c          LSLS     r12,r12,#28
00432c  d004              BEQ      |L1.17208|
00432e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004332  f1bc0f02          CMP      r12,#2
004336  da09              BGE      |L1.17228|
                  |L1.17208|
;;;6287   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004338  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00433c  ea5f7c0c          LSLS     r12,r12,#28
004340  d00a              BEQ      |L1.17240|
004342  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004346  f1bc0f03          CMP      r12,#3
00434a  db05              BLT      |L1.17240|
                  |L1.17228|
;;;6288   			))bdr_avar_stat_temp|=(1<<ii_);
00434c  fa03fc01          LSL      r12,r3,r1
004350  ea4c0c00          ORR      r12,r12,r0
004354  f00c00ff          AND      r0,r12,#0xff
                  |L1.17240|
;;;6289   	  #endif											 //o_9
;;;6290   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004358  0412              LSLS     r2,r2,#16
00435a  d404              BMI      |L1.17254|
00435c  fa03f201          LSL      r2,r3,r1
004360  ea820200          EOR      r2,r2,r0
004364  b2d0              UXTB     r0,r2
                  |L1.17254|
004366  f1010101          ADD      r1,r1,#1              ;6232
00436a  b2c9              UXTB     r1,r1                 ;6232
00436c  2904              CMP      r1,#4                 ;6232
00436e  f4ffaf45          BCC      |L1.16892|
;;;6291   		}
;;;6292   	bdr_avar_stat=bdr_avar_stat_temp;
004372  7020              STRB     r0,[r4,#0]
                  |L1.17268|
;;;6293   	}
;;;6294   }
004374  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17272|
                          DCD      load_U
                  |L1.17276|
                          DCD      sp_ch_stat
                  |L1.17280|
                          DCD      ||area_number.25||
                  |L1.17284|
                          DCD      DOP_RELE_FUNC
                  |L1.17288|
                          DCD      speedChIsOn
                  |L1.17292|
                          DCD      hv_vz_stat
                  |L1.17296|
                          DCD      UVENTOFF
                  |L1.17300|
                          DCD      bdr_transmit_stat
                  |L1.17304|
                          DCD      bdr_avar_stat
                  |L1.17308|
                          DCD      NUMBDR
                  |L1.17312|
                          DCD      uout_av
                  |L1.17316|
                          DCD      bps
                  |L1.17320|
                          DCD      NUMIST
                  |L1.17324|
                          DCD      RELE_SET_MASK
                  |L1.17328|
                          DCD      USIGN
                  |L1.17332|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6297   //-----------------------------------------------
;;;6298   void bps_hndl(void)
0043b8  e92d5ff0          PUSH     {r4-r12,lr}
;;;6299   {
;;;6300   char ptr__,i;
;;;6301   unsigned short tempUS;
;;;6302   
;;;6303   if(sh_cnt0<10)
0043bc  f8dfb40c          LDR      r11,|L1.18380|
;;;6304   	{
;;;6305   	sh_cnt0++;
;;;6306   	if(sh_cnt0>=10)
;;;6307   		{
;;;6308   		sh_cnt0=0;
0043c0  2600              MOVS     r6,#0
;;;6309   		b1Hz_sh=1;
0043c2  f04f0a01          MOV      r10,#1
0043c6  f89b0021          LDRB     r0,[r11,#0x21]        ;6303  ; sh_cnt0
0043ca  280a              CMP      r0,#0xa               ;6303
0043cc  d20a              BCS      |L1.17380|
0043ce  f1000001          ADD      r0,r0,#1              ;6305
0043d2  b2c0              UXTB     r0,r0                 ;6305
0043d4  f88b0021          STRB     r0,[r11,#0x21]        ;6305
0043d8  280a              CMP      r0,#0xa               ;6306
0043da  d303              BCC      |L1.17380|
0043dc  f88b6021          STRB     r6,[r11,#0x21]        ;6308
0043e0  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17380|
;;;6310   		}
;;;6311   	}
;;;6312   
;;;6313   /*if(sh_cnt1<5)
;;;6314   	{
;;;6315   	sh_cnt1++;
;;;6316   	if(sh_cnt1==5)
;;;6317   		{
;;;6318   		sh_cnt1=0;
;;;6319   		b2Hz_sh=1;
;;;6320   		}
;;;6321   	} */
;;;6322   
;;;6323   
;;;6324   /*
;;;6325   if(mess_find(MESS_SRC_ON_OFF))
;;;6326   	{
;;;6327   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6328   		{
;;;6329   		char i;
;;;6330   		for(i=0;i<NUMIST;i++)
;;;6331   			{
;;;6332   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6333   			}
;;;6334   		
;;;6335   		}
;;;6336   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6337   		{
;;;6338   		char i;
;;;6339   		for(i=0;i<NUMIST;i++)
;;;6340   			{
;;;6341   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6342   			}
;;;6343   		
;;;6344   		}
;;;6345   	}
;;;6346   	
;;;6347   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6348   	{				
;;;6349   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6350   		{
;;;6351   		char i;
;;;6352   		for(i=0;i<NUMIST;i++)
;;;6353   			{
;;;6354   			if(mess_data[1]&(1<<i))
;;;6355   				{
;;;6356   				src[i]._ist_blok_cnt=0;
;;;6357   				src[i]._flags_tu=2;
;;;6358   				}
;;;6359   			}
;;;6360   		
;;;6361   		}				
;;;6362   	}*/
;;;6363   
;;;6364   
;;;6365   
;;;6366   /*else*/ 
;;;6367   bps_on_mask=0;
0043e4  4ff9              LDR      r7,|L1.18380|
0043e6  3780              ADDS     r7,r7,#0x80
0043e8  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6368   bps_off_mask=0;
0043ea  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6369   
;;;6370   if(mess_find_unvol(MESS2BPS_HNDL))
0043ec  20cd              MOVS     r0,#0xcd
0043ee  f7fffffe          BL       mess_find_unvol
;;;6371   	{
;;;6372   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6373   		{
;;;6374   		bps_off_mask=0xffff;
;;;6375   		}
;;;6376   
;;;6377   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6378   		{
;;;6379   		bps_off_mask=mess_data[1];
;;;6380   		}
;;;6381   
;;;6382   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6383   		{
;;;6384   		bps_on_mask=mess_data[1];
;;;6385   		}
;;;6386   
;;;6387   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6388   		{
;;;6389   		bps_on_mask=0xffff;
;;;6390   		}
;;;6391   
;;;6392   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6393   		{
;;;6394   		bps_on_mask=(unsigned)mess_data[1];
;;;6395   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6396   		}
;;;6397   
;;;6398    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6399   		{
;;;6400   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6401   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6402   		}
;;;6403   
;;;6404   	for(i=0;i<=NUMIST;i++)
;;;6405   		{
;;;6406   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
0043f2  f8df83dc          LDR      r8,|L1.18384|
0043f6  b3b8              CBZ      r0,|L1.17512|
0043f8  4af6              LDR      r2,|L1.18388|
0043fa  f64f71ff          MOV      r1,#0xffff            ;6374
0043fe  6810              LDR      r0,[r2,#0]            ;6372  ; mess_data
004400  28ce              CMP      r0,#0xce              ;6372
004402  d100              BNE      |L1.17414|
004404  6339              STR      r1,[r7,#0x30]         ;6374  ; bps_off_mask
                  |L1.17414|
004406  28cf              CMP      r0,#0xcf              ;6377
004408  d101              BNE      |L1.17422|
00440a  6853              LDR      r3,[r2,#4]            ;6379  ; mess_data
00440c  633b              STR      r3,[r7,#0x30]         ;6379  ; bps_off_mask
                  |L1.17422|
00440e  28d1              CMP      r0,#0xd1              ;6382
004410  d101              BNE      |L1.17430|
004412  6853              LDR      r3,[r2,#4]            ;6384  ; mess_data
004414  62fb              STR      r3,[r7,#0x2c]         ;6384  ; bps_on_mask
                  |L1.17430|
004416  28d2              CMP      r0,#0xd2              ;6387
004418  d100              BNE      |L1.17436|
00441a  62f9              STR      r1,[r7,#0x2c]         ;6389  ; bps_on_mask
                  |L1.17436|
00441c  28d0              CMP      r0,#0xd0              ;6392
00441e  d104              BNE      |L1.17450|
004420  6851              LDR      r1,[r2,#4]            ;6394  ; mess_data
004422  62f9              STR      r1,[r7,#0x2c]         ;6394  ; bps_on_mask
004424  ea6f0101          MVN      r1,r1                 ;6395
004428  6339              STR      r1,[r7,#0x30]         ;6395  ; bps_off_mask
                  |L1.17450|
00442a  f5b07f9a          CMP      r0,#0x134             ;6398
00442e  d106              BNE      |L1.17470|
004430  6851              LDR      r1,[r2,#4]            ;6400  ; mess_data
004432  fa0af001          LSL      r0,r10,r1             ;6400
004436  62f8              STR      r0,[r7,#0x2c]         ;6400  ; bps_on_mask
004438  ea6f0000          MVN      r0,r0                 ;6401
00443c  6338              STR      r0,[r7,#0x30]         ;6401  ; bps_off_mask
                  |L1.17470|
00443e  f04f0400          MOV      r4,#0                 ;6404
004442  e035              B        |L1.17584|
                  |L1.17476|
004444  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
004446  fa0af904          LSL      r9,r10,r4
00444a  ea190f00          TST      r9,r0
00444e  d00c              BEQ      |L1.17514|
004450  eb0400c4          ADD      r0,r4,r4,LSL #3
004454  eb001004          ADD      r0,r0,r4,LSL #4
004458  eb080080          ADD      r0,r8,r0,LSL #2
00445c  f8301f40          LDRH     r1,[r0,#0x40]!
004460  f1010101          ADD      r1,r1,#1
004464  8001              STRH     r1,[r0,#0]
004466  e008              B        |L1.17530|
                  |L1.17512|
004468  e028              B        |L1.17596|
                  |L1.17514|
;;;6407   		else bps[i]._blok_cnt=0;
00446a  eb0400c4          ADD      r0,r4,r4,LSL #3
00446e  eb001004          ADD      r0,r0,r4,LSL #4
004472  eb080080          ADD      r0,r8,r0,LSL #2
004476  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17530|
;;;6408   		gran(&bps[i]._blok_cnt,0,50);
00447a  eb0400c4          ADD      r0,r4,r4,LSL #3
00447e  eb001004          ADD      r0,r0,r4,LSL #4
004482  eb080580          ADD      r5,r8,r0,LSL #2
004486  f1050040          ADD      r0,r5,#0x40
00448a  2232              MOVS     r2,#0x32
00448c  2100              MOVS     r1,#0
00448e  f7fffffe          BL       gran
;;;6409   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
004492  f9b50040          LDRSH    r0,[r5,#0x40]
004496  2814              CMP      r0,#0x14
004498  dd01              BLE      |L1.17566|
00449a  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17566|
;;;6410   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
00449e  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
0044a0  ea190f00          TST      r9,r0
0044a4  d001              BEQ      |L1.17578|
0044a6  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17578|
0044aa  f1040401          ADD      r4,r4,#1              ;6404
0044ae  b2e4              UXTB     r4,r4                 ;6404
                  |L1.17584|
0044b0  48c9              LDR      r0,|L1.18392|
0044b2  f9b00000          LDRSH    r0,[r0,#0]            ;6404  ; NUMIST
0044b6  4284              CMP      r4,r0                 ;6404
0044b8  ddc4              BLE      |L1.17476|
0044ba  e08e              B        |L1.17882|
                  |L1.17596|
;;;6411   	     }
;;;6412   
;;;6413   	
;;;6414   /*
;;;6415   
;;;6416   	if(bps_all_off_cnt>20)
;;;6417   		{
;;;6418   		for(i=0;i<=NUMIST;i++)
;;;6419   			{
;;;6420   	     	bps[i]._flags_tu=1;
;;;6421   	     	}
;;;6422   		}
;;;6423   	else if(bps_mask_off_cnt>20)
;;;6424   		{
;;;6425   		for(i=0;i<=NUMIST;i++)
;;;6426   			{
;;;6427   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6428   	     	}
;;;6429   		}	
;;;6430   		
;;;6431   	else if(bps_mask_on_off_cnt>20)
;;;6432   		{
;;;6433   		for(i=0;i<=NUMIST;i++)
;;;6434   			{
;;;6435   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6436   			else bps[i]._flags_tu=0;
;;;6437   	     	}
;;;6438   		}
;;;6439   		
;;;6440   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6441   		{
;;;6442   		for(i=0;i<=NUMIST;i++)
;;;6443   			{
;;;6444   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6445   	     	}
;;;6446   		}
;;;6447   */										
;;;6448   	}
;;;6449   
;;;6450   
;;;6451   else if(b1Hz_sh)
0044bc  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
0044c0  b3f0              CBZ      r0,|L1.17728|
;;;6452   	{
;;;6453   	ptr__=0;
0044c2  f04f0400          MOV      r4,#0
;;;6454        for(i=0;i<=NUMIST;i++)
0044c6  4621              MOV      r1,r4
0044c8  48c3              LDR      r0,|L1.18392|
0044ca  f9b00000          LDRSH    r0,[r0,#0]            ;6404
0044ce  e00a              B        |L1.17638|
                  |L1.17616|
;;;6455   		{
;;;6456   	     bps[i]._flags_tu=1;
0044d0  eb0102c1          ADD      r2,r1,r1,LSL #3
0044d4  eb021201          ADD      r2,r2,r1,LSL #4
0044d8  eb080282          ADD      r2,r8,r2,LSL #2
0044dc  f882a02c          STRB     r10,[r2,#0x2c]
0044e0  f1010101          ADD      r1,r1,#1              ;6454
0044e4  b2c9              UXTB     r1,r1                 ;6454
                  |L1.17638|
0044e6  4281              CMP      r1,r0                 ;6454
0044e8  ddf2              BLE      |L1.17616|
;;;6457   	     }	
;;;6458     	     
;;;6459     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0044ea  f04f0100          MOV      r1,#0
0044ee  e023              B        |L1.17720|
                  |L1.17648|
;;;6460     		{
;;;6461   		char ii,iii;
;;;6462   
;;;6463   		ii=(char)NUMIST;
0044f0  b2c2              UXTB     r2,r0
;;;6464   		//if(ii<0)ii=0;
;;;6465   		if(ii>32)ii=32;
0044f2  2a20              CMP      r2,#0x20
0044f4  d901              BLS      |L1.17658|
0044f6  f04f0220          MOV      r2,#0x20
                  |L1.17658|
;;;6466   		iii=numOfForvardBps;
0044fa  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6467   		//if(iii<0)iii=0;
;;;6468   		if(iii>=NUMIST)iii=0;
0044fe  4283              CMP      r3,r0
004500  db01              BLT      |L1.17670|
004502  f04f0300          MOV      r3,#0
                  |L1.17670|
;;;6469   		iii+=i;
004506  440b              ADD      r3,r3,r1
004508  b2db              UXTB     r3,r3
;;;6470   		iii=iii%ii;
00450a  fbb3f5f2          UDIV     r5,r3,r2
00450e  fb023215          MLS      r2,r2,r5,r3
;;;6471   		
;;;6472     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004512  eb0203c2          ADD      r3,r2,r2,LSL #3
004516  eb031202          ADD      r2,r3,r2,LSL #4
00451a  eb080282          ADD      r2,r8,r2,LSL #2
00451e  7893              LDRB     r3,[r2,#2]
004520  2b02              CMP      r3,#2
004522  d001              BEQ      |L1.17704|
004524  2b01              CMP      r3,#1
004526  d104              BNE      |L1.17714|
                  |L1.17704|
;;;6473     	         	{
;;;6474     	         	bps[iii]._flags_tu=0;
004528  f882602c          STRB     r6,[r2,#0x2c]
;;;6475     	         	ptr__++;
00452c  f1040401          ADD      r4,r4,#1
004530  b2e4              UXTB     r4,r4
                  |L1.17714|
004532  f1010101          ADD      r1,r1,#1              ;6459
004536  b2c9              UXTB     r1,r1                 ;6459
                  |L1.17720|
004538  4281              CMP      r1,r0                 ;6459
00453a  da06              BGE      |L1.17738|
00453c  4aa7              LDR      r2,|L1.18396|
00453e  e000              B        |L1.17730|
                  |L1.17728|
004540  e04b              B        |L1.17882|
                  |L1.17730|
004542  f9b22000          LDRSH    r2,[r2,#0]            ;6459  ; num_necc
004546  4294              CMP      r4,r2                 ;6459
004548  dbd2              BLT      |L1.17648|
                  |L1.17738|
;;;6476     	         	}
;;;6477   			
;;;6478     	     }
;;;6479   	bps[numOfForvardBps_old]._flags_tu=0;
00454a  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
00454e  eb0102c1          ADD      r2,r1,r1,LSL #3
004552  eb021101          ADD      r1,r2,r1,LSL #4
004556  eb080181          ADD      r1,r8,r1,LSL #2
00455a  f881602c          STRB     r6,[r1,#0x2c]
;;;6480   
;;;6481   	if(main_1Hz_cnt<60)
00455e  49a0              LDR      r1,|L1.18400|
004560  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004564  293c              CMP      r1,#0x3c
004566  da0f              BGE      |L1.17800|
;;;6482   		{
;;;6483        	for(i=0;i<=NUMIST;i++)
004568  f04f0100          MOV      r1,#0
00456c  e00a              B        |L1.17796|
                  |L1.17774|
;;;6484   			{
;;;6485   	     	bps[i]._flags_tu=0;
00456e  eb0102c1          ADD      r2,r1,r1,LSL #3
004572  eb021201          ADD      r2,r2,r1,LSL #4
004576  eb080282          ADD      r2,r8,r2,LSL #2
00457a  f882602c          STRB     r6,[r2,#0x2c]
00457e  f1010101          ADD      r1,r1,#1              ;6483
004582  b2c9              UXTB     r1,r1                 ;6483
                  |L1.17796|
004584  4281              CMP      r1,r0                 ;6483
004586  ddf2              BLE      |L1.17774|
                  |L1.17800|
;;;6486   	     	}	
;;;6487   		}
;;;6488   	if(ipsBlckStat)
004588  4996              LDR      r1,|L1.18404|
00458a  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00458c  b179              CBZ      r1,|L1.17838|
;;;6489   		{
;;;6490        	for(i=0;i<=NUMIST;i++)
00458e  f04f0100          MOV      r1,#0
004592  e00a              B        |L1.17834|
                  |L1.17812|
;;;6491   			{
;;;6492   	     	bps[i]._flags_tu=1;
004594  eb0102c1          ADD      r2,r1,r1,LSL #3
004598  eb021201          ADD      r2,r2,r1,LSL #4
00459c  eb080282          ADD      r2,r8,r2,LSL #2
0045a0  f882a02c          STRB     r10,[r2,#0x2c]
0045a4  f1010101          ADD      r1,r1,#1              ;6490
0045a8  b2c9              UXTB     r1,r1                 ;6490
                  |L1.17834|
0045aa  4281              CMP      r1,r0                 ;6490
0045ac  ddf2              BLE      |L1.17812|
                  |L1.17838|
;;;6493   	     	}
;;;6494   		}
;;;6495   
;;;6496        for(i=0;i<=NUMIST;i++)
0045ae  f04f0100          MOV      r1,#0
;;;6497   		{
;;;6498   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0045b2  f06f0331          MVN      r3,#0x31
0045b6  e00e              B        |L1.17878|
                  |L1.17848|
0045b8  eb0102c1          ADD      r2,r1,r1,LSL #3
0045bc  eb021201          ADD      r2,r2,r1,LSL #4
0045c0  eb080282          ADD      r2,r8,r2,LSL #2
0045c4  f892402c          LDRB     r4,[r2,#0x2c]
0045c8  2c01              CMP      r4,#1
0045ca  d101              BNE      |L1.17872|
0045cc  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17872|
0045d0  f1010101          ADD      r1,r1,#1              ;6496
0045d4  b2c9              UXTB     r1,r1                 ;6496
                  |L1.17878|
0045d6  4281              CMP      r1,r0                 ;6496
0045d8  ddee              BLE      |L1.17848|
                  |L1.17882|
;;;6499   	   	}	
;;;6500   		 
;;;6501     	}
;;;6502   
;;;6503   
;;;6504   for(i=0;i<NUMIST;i++)
0045da  f04f0000          MOV      r0,#0
0045de  497e              LDR      r1,|L1.18392|
;;;6505        {
;;;6506        if(bps[i]._ist_blok_host_cnt!=0)
;;;6507             {
;;;6508             bps[i]._flags_tu=99;
0045e0  f04f0463          MOV      r4,#0x63
0045e4  f9b11000          LDRSH    r1,[r1,#0]            ;6404
0045e8  e00f              B        |L1.17930|
                  |L1.17898|
0045ea  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6506
0045ee  eb021200          ADD      r2,r2,r0,LSL #4       ;6506
0045f2  eb080282          ADD      r2,r8,r2,LSL #2       ;6506
0045f6  6bd3              LDR      r3,[r2,#0x3c]         ;6506
0045f8  b123              CBZ      r3,|L1.17924|
0045fa  f882402c          STRB     r4,[r2,#0x2c]
;;;6509   	     bps[i]._ist_blok_host_cnt--;
0045fe  f1a30301          SUB      r3,r3,#1
004602  63d3              STR      r3,[r2,#0x3c]
                  |L1.17924|
004604  f1000001          ADD      r0,r0,#1              ;6504
004608  b2c0              UXTB     r0,r0                 ;6504
                  |L1.17930|
00460a  4288              CMP      r0,r1                 ;6504
00460c  dbed              BLT      |L1.17898|
;;;6510             }
;;;6511        }
;;;6512   
;;;6513   
;;;6514   
;;;6515   
;;;6516   b1Hz_sh=0;
00460e  f88b6022          STRB     r6,[r11,#0x22]
;;;6517   
;;;6518   
;;;6519   num_of_wrks_bps=0;
004612  f88b601e          STRB     r6,[r11,#0x1e]
;;;6520   tempUS=0;
004616  f04f0200          MOV      r2,#0
;;;6521   for(i=0;i<NUMIST;i++)
00461a  4610              MOV      r0,r2
00461c  e015              B        |L1.17994|
                  |L1.17950|
;;;6522   	{
;;;6523   	if(bps[i]._state==bsWRK)
00461e  eb0003c0          ADD      r3,r0,r0,LSL #3
004622  eb031300          ADD      r3,r3,r0,LSL #4
004626  eb080383          ADD      r3,r8,r3,LSL #2
00462a  789c              LDRB     r4,[r3,#2]
00462c  2c01              CMP      r4,#1
00462e  d109              BNE      |L1.17988|
;;;6524   		{
;;;6525   		num_of_wrks_bps++;
004630  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
004634  f1040401          ADD      r4,r4,#1
004638  f88b401e          STRB     r4,[r11,#0x1e]
;;;6526   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00463c  69db              LDR      r3,[r3,#0x1c]
00463e  4293              CMP      r3,r2
004640  dd00              BLE      |L1.17988|
004642  b29a              UXTH     r2,r3
                  |L1.17988|
004644  f1000001          ADD      r0,r0,#1              ;6521
004648  b2c0              UXTB     r0,r0                 ;6521
                  |L1.17994|
00464a  4288              CMP      r0,r1                 ;6521
00464c  dbe7              BLT      |L1.17950|
;;;6527   		}
;;;6528   	}
;;;6529   Ubpsmax=tempUS;
00464e  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6530   
;;;6531   bPARALLEL_ENOUG=0;
004652  f88b602c          STRB     r6,[r11,#0x2c]
;;;6532   bPARALLEL_NOT_ENOUG=1;
004656  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6533   
;;;6534   for(i=0;i<NUMIST;i++)
00465a  f04f0000          MOV      r0,#0
;;;6535   	{
;;;6536   	if(bps[i]._Ti>=TSIGN)
00465e  4a62              LDR      r2,|L1.18408|
004660  f9b23000          LDRSH    r3,[r2,#0]
;;;6537   		{
;;;6538   		bPARALLEL_ENOUG=1;
;;;6539   		}
;;;6540   	if(bps[i]._Ti>=(TSIGN-5))
004664  f1a30405          SUB      r4,r3,#5
004668  e011              B        |L1.18062|
                  |L1.18026|
00466a  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6536
00466e  eb021200          ADD      r2,r2,r0,LSL #4       ;6536
004672  eb080282          ADD      r2,r8,r2,LSL #2       ;6536
004676  6a92              LDR      r2,[r2,#0x28]         ;6536
004678  429a              CMP      r2,r3                 ;6536
00467a  db01              BLT      |L1.18048|
00467c  f88ba02c          STRB     r10,[r11,#0x2c]       ;6538
                  |L1.18048|
004680  42a2              CMP      r2,r4
004682  db01              BLT      |L1.18056|
;;;6541   		{
;;;6542   		bPARALLEL_NOT_ENOUG=0;
004684  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.18056|
004688  f1000001          ADD      r0,r0,#1              ;6534
00468c  b2c0              UXTB     r0,r0                 ;6534
                  |L1.18062|
00468e  4288              CMP      r0,r1                 ;6534
004690  dbeb              BLT      |L1.18026|
;;;6543   		}
;;;6544   	}
;;;6545   
;;;6546   if(bPARALLEL_ENOUG==1)
004692  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
004696  2801              CMP      r0,#1
004698  d00a              BEQ      |L1.18096|
;;;6547   	{
;;;6548   	bPARALLEL=1;
;;;6549   	}
;;;6550   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
00469a  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
00469e  2800              CMP      r0,#0
0046a0  d005              BEQ      |L1.18094|
0046a2  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
0046a6  2800              CMP      r0,#0
0046a8  d001              BEQ      |L1.18094|
;;;6551   	{
;;;6552   	bPARALLEL=0;
0046aa  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.18094|
;;;6553   	}
;;;6554   }
0046ae  e661              B        |L1.17268|
                  |L1.18096|
0046b0  f88ba02d          STRB     r10,[r11,#0x2d]       ;6548
0046b4  e65e              B        |L1.17268|
;;;6555   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6562   //-----------------------------------------------
;;;6563   void powerAntiAliasingHndl(void)
0046b6  b570              PUSH     {r4-r6,lr}
;;;6564   {
;;;6565   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0046b8  230a              MOVS     r3,#0xa
0046ba  4c4d              LDR      r4,|L1.18416|
0046bc  484b              LDR      r0,|L1.18412|
;;;6566   	{
;;;6567   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6568   	if(powerSummaryCnt>=10)
;;;6569   		{
;;;6570   		power_summary=power_summary_tempo;
;;;6571   		}
;;;6572   	}
;;;6573   else powerSummaryCnt=0;
0046be  2500              MOVS     r5,#0
0046c0  6822              LDR      r2,[r4,#0]            ;6565  ; power_summary_tempo_old
0046c2  6800              LDR      r0,[r0,#0]            ;6565  ; power_summary_tempo
0046c4  fbb2f6f3          UDIV     r6,r2,r3              ;6565
0046c8  fbb0f1f3          UDIV     r1,r0,r3              ;6565
0046cc  4a49              LDR      r2,|L1.18420|
0046ce  42b1              CMP      r1,r6                 ;6565
0046d0  d10b              BNE      |L1.18154|
0046d2  7811              LDRB     r1,[r2,#0]            ;6567  ; powerSummaryCnt
0046d4  290f              CMP      r1,#0xf               ;6567
0046d6  d202              BCS      |L1.18142|
0046d8  f1010101          ADD      r1,r1,#1              ;6567
0046dc  7011              STRB     r1,[r2,#0]            ;6567
                  |L1.18142|
0046de  7811              LDRB     r1,[r2,#0]            ;6568  ; powerSummaryCnt
0046e0  290a              CMP      r1,#0xa               ;6568
0046e2  d303              BCC      |L1.18156|
0046e4  4944              LDR      r1,|L1.18424|
0046e6  6008              STR      r0,[r1,#0]            ;6570  ; power_summary
0046e8  e000              B        |L1.18156|
                  |L1.18154|
0046ea  7015              STRB     r5,[r2,#0]
                  |L1.18156|
;;;6574   power_summary_tempo_old=power_summary_tempo;
0046ec  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6575   
;;;6576   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0046ee  4843              LDR      r0,|L1.18428|
0046f0  4c43              LDR      r4,|L1.18432|
0046f2  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0046f6  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0046fa  fbb0f1f3          UDIV     r1,r0,r3
0046fe  fbb2f3f3          UDIV     r3,r2,r3
;;;6577   	{
;;;6578   	if(powerCurrentCnt<15)powerCurrentCnt++;
004702  4a40              LDR      r2,|L1.18436|
004704  4299              CMP      r1,r3                 ;6576
004706  d10b              BNE      |L1.18208|
004708  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00470a  290f              CMP      r1,#0xf
00470c  d202              BCS      |L1.18196|
00470e  f1010101          ADD      r1,r1,#1
004712  7011              STRB     r1,[r2,#0]
                  |L1.18196|
;;;6579   	if(powerCurrentCnt>=10)
004714  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004716  290a              CMP      r1,#0xa
004718  d303              BCC      |L1.18210|
;;;6580   		{
;;;6581   		power_current=power_current_tempo;
00471a  493b              LDR      r1,|L1.18440|
00471c  8008              STRH     r0,[r1,#0]
00471e  e000              B        |L1.18210|
                  |L1.18208|
;;;6582   		}
;;;6583   	}
;;;6584   else powerCurrentCnt=0;
004720  7015              STRB     r5,[r2,#0]
                  |L1.18210|
;;;6585   power_current_tempo_old=power_current_tempo;
004722  8020              STRH     r0,[r4,#0]
;;;6586   }
004724  bd70              POP      {r4-r6,pc}
;;;6587   
                          ENDP

                  energometr_hndl PROC
;;;6697   //-----------------------------------------------
;;;6698   void energometr_hndl(void)
004726  4770              BX       lr
;;;6699   {
;;;6700   //2F 3F 21 0D 0A 
;;;6701   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6702   //2F 3F 21 0D 0A 
;;;6703   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6704   //06 30 35 31 0D 0A 
;;;6705   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6706   
;;;6707   #ifdef CE102M_ENABLED
;;;6708   /*if
;;;6709   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6710   
;;;6711   if(read_power_cnt_main_cnt)
;;;6712   	{
;;;6713   	read_power_cnt_main_cnt--;
;;;6714   	if(read_power_cnt_main_cnt==0)
;;;6715   		{
;;;6716   		rx_read_power_cnt_phase=0;
;;;6717   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6718   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6719   		else bENERGOMETR_UIP=0;
;;;6720   		//bENERGOMETR_UIP=2;
;;;6721   		}
;;;6722   	}
;;;6723   
;;;6724   if (rx_read_power_cnt_phase==0)
;;;6725   	{
;;;6726   	char command_with_crc[20];
;;;6727   	
;;;6728      	command_with_crc[0]=0xaf;  // /
;;;6729   	command_with_crc[1]=0x3f;  // ?
;;;6730   	command_with_crc[2]=0x21;  // !
;;;6731   	command_with_crc[3]=0x8d;  // CR
;;;6732   	command_with_crc[4]=0x0a;  // LF
;;;6733   
;;;6734   	uart_out__adr1(command_with_crc,5);
;;;6735   
;;;6736   	rx_wr_index1=0;
;;;6737   	rx_read_power_cnt_phase=1;
;;;6738   
;;;6739   	read_power_cnt_main_cnt=50;
;;;6740   	}
;;;6741   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6742   	{
;;;6743   	char command_with_crc[20];
;;;6744   	
;;;6745   	command_with_crc[0]=0x06;  //  
;;;6746   	command_with_crc[1]=0x30;  // 0
;;;6747   	command_with_crc[2]=0x35;  // 5
;;;6748   	command_with_crc[3]=0xb1;  // 1
;;;6749   	command_with_crc[4]=0x8d;  // CR
;;;6750   	command_with_crc[5]=0x0a;  // LF
;;;6751   	
;;;6752   	uart_out__adr1(command_with_crc,6);
;;;6753   	
;;;6754   	rx_wr_index1=0;
;;;6755   	rx_read_power_cnt_phase=3;
;;;6756   
;;;6757   	read_power_cnt_main_cnt=50;
;;;6758   	}  
;;;6759   
;;;6760   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6761   	{
;;;6762   	char command_with_crc[20];
;;;6763   	
;;;6764   	command_with_crc[0]=0x81;  //  
;;;6765   	command_with_crc[1]=0xd2;  // 0
;;;6766   	command_with_crc[2]=0xb1;  // 5
;;;6767   	command_with_crc[3]=0x82;  // 1
;;;6768   	command_with_crc[4]=0x56;  // CR
;;;6769   	command_with_crc[5]=0xcf;  // LF
;;;6770   	command_with_crc[6]=0xcc;  // 1
;;;6771   	command_with_crc[7]=0xd4;  // CR
;;;6772   	command_with_crc[8]=0x41;  // LF
;;;6773   	command_with_crc[9]=0x28;  // 1
;;;6774   	command_with_crc[10]=0xa9;  // CR
;;;6775   	command_with_crc[11]=0x03;  // LF
;;;6776   	command_with_crc[12]=0x5f;  // LF
;;;6777   		
;;;6778   	uart_out__adr1(command_with_crc,13);
;;;6779   	
;;;6780   	rx_wr_index1=0;
;;;6781   	rx_read_power_cnt_phase=5;
;;;6782   
;;;6783   	read_power_cnt_main_cnt=50;
;;;6784   	}  
;;;6785   
;;;6786   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6787   	{
;;;6788   	char command_with_crc[20];
;;;6789   	
;;;6790   	command_with_crc[0]=0x81;  //  
;;;6791   	command_with_crc[1]=0xd2;  // 0
;;;6792   	command_with_crc[2]=0xb1;  // 5
;;;6793   	command_with_crc[3]=0x82;  // 1
;;;6794   	command_with_crc[4]=0xc3;  // CR
;;;6795   	command_with_crc[5]=0x55;  // LF
;;;6796   	command_with_crc[6]=0xd2;  // 1
;;;6797   	command_with_crc[7]=0xd2;  // CR
;;;6798   	command_with_crc[8]=0xc5;  // LF
;;;6799   	command_with_crc[9]=0x28;  // 1
;;;6800   	command_with_crc[10]=0xa9;  // CR
;;;6801   	command_with_crc[11]=0x03;  // LF
;;;6802   	command_with_crc[12]=0x5a;  // LF
;;;6803   		
;;;6804   	uart_out__adr1(command_with_crc,13);
;;;6805   	
;;;6806   	rx_wr_index1=0;
;;;6807   	rx_read_power_cnt_phase=9;
;;;6808   
;;;6809   	read_power_cnt_main_cnt=50;
;;;6810   	}  
;;;6811   
;;;6812   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6813   	{
;;;6814   	char command_with_crc[20];
;;;6815   	
;;;6816   	command_with_crc[0]=0x81;  //  		01
;;;6817   	command_with_crc[1]=0xd2;  // R		52
;;;6818   	command_with_crc[2]=0xb1;  // 1		31
;;;6819   	command_with_crc[3]=0x82;  // 		02
;;;6820   	command_with_crc[4]=0x50;  // P		50
;;;6821   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6822   	command_with_crc[6]=0xd7;  // W		57
;;;6823   	command_with_crc[7]=0xc5;  // E		45
;;;6824   	command_with_crc[8]=0x50;  // P		50
;;;6825   	command_with_crc[9]=0x28;  // (		28
;;;6826   	command_with_crc[10]=0xa9;  // )	29
;;;6827   	command_with_crc[11]=0x03;  // 		03
;;;6828   	command_with_crc[12]=0xe4;  // d	64
;;;6829   		
;;;6830   	uart_out__adr1(command_with_crc,13);
;;;6831   	
;;;6832   	rx_wr_index1=0;
;;;6833   	rx_read_power_cnt_phase=21;
;;;6834   
;;;6835   	read_power_cnt_main_cnt=50;
;;;6836   	}  
;;;6837   
;;;6838   
;;;6839   #endif
;;;6840   }
;;;6841   
                          ENDP

                  ips_current_average_hndl PROC
;;;6842   //-----------------------------------------------
;;;6843   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004728  e92d4ff0          PUSH     {r4-r11,lr}
;;;6844   {
00472c  b089              SUB      sp,sp,#0x24
;;;6845   
;;;6846   if(++ica_timer_cnt>=10) 
00472e  4e37              LDR      r6,|L1.18444|
;;;6847   	{
;;;6848   	ica_timer_cnt=0;
004730  2400              MOVS     r4,#0
004732  7830              LDRB     r0,[r6,#0]            ;6846  ; ica_timer_cnt
004734  1c40              ADDS     r0,r0,#1              ;6846
004736  b2c0              UXTB     r0,r0                 ;6846
004738  7030              STRB     r0,[r6,#0]            ;6846
00473a  280a              CMP      r0,#0xa               ;6846
00473c  d300              BCC      |L1.18240|
00473e  7034              STRB     r4,[r6,#0]
                  |L1.18240|
;;;6849   	}
;;;6850   
;;;6851   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004740  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004742  4f33              LDR      r7,|L1.18448|
;;;6852   	{
;;;6853   	
;;;6854   	ica_plazma[0]++;
;;;6855   
;;;6856   	ica_my_current=bps_I;
;;;6857   
;;;6858   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004744  f8dfb0cc          LDR      r11,|L1.18452|
004748  4d20              LDR      r5,|L1.18380|
00474a  bbe8              CBNZ     r0,|L1.18376|
00474c  7fa8              LDRB     r0,[r5,#0x1e]         ;6851  ; num_of_wrks_bps
00474e  b3d8              CBZ      r0,|L1.18376|
004750  f8950023          LDRB     r0,[r5,#0x23]         ;6851  ; spc_stat
004754  7969              LDRB     r1,[r5,#5]            ;6851  ; vz1_stat
004756  4308              ORRS     r0,r0,r1              ;6851
004758  79e9              LDRB     r1,[r5,#7]            ;6851  ; vz2_stat
00475a  4308              ORRS     r0,r0,r1              ;6851
00475c  7839              LDRB     r1,[r7,#0]            ;6851  ; sp_ch_stat
00475e  4308              ORRS     r0,r0,r1              ;6851
004760  d17f              BNE      |L1.18530|
004762  f8df90b4          LDR      r9,|L1.18456|
004766  f8990000          LDRB     r0,[r9,#0]            ;6854  ; ica_plazma
00476a  f1000001          ADD      r0,r0,#1              ;6854
00476e  f8890000          STRB     r0,[r9,#0]            ;6854
004772  482a              LDR      r0,|L1.18460|
004774  f9b01000          LDRSH    r1,[r0,#0]            ;6856  ; bps_I
004778  4829              LDR      r0,|L1.18464|
00477a  8001              STRH     r1,[r0,#0]            ;6856
00477c  4829              LDR      r0,|L1.18468|
;;;6859   		{
;;;6860   		ica_plazma[1]++;
;;;6861   		ica_u_necc--;
00477e  f8dfa0a8          LDR      r10,|L1.18472|
004782  f9b02000          LDRSH    r2,[r0,#0]            ;6858  ; ica_your_current
004786  4648              MOV      r0,r9                 ;6854
004788  f9bac000          LDRSH    r12,[r10,#0]
00478c  7843              LDRB     r3,[r0,#1]            ;6860
00478e  4827              LDR      r0,|L1.18476|
004790  4291              CMP      r1,r2                 ;6858
004792  f9b08000          LDRSH    r8,[r0,#0]            ;6858
004796  4658              MOV      r0,r11                ;6858
004798  f9b00000          LDRSH    r0,[r0,#0]            ;6858
00479c  dd48              BLE      |L1.18480|
00479e  eba10e02          SUB      lr,r1,r2              ;6858
0047a2  f1be0f05          CMP      lr,#5                 ;6858
0047a6  db43              BLT      |L1.18480|
0047a8  2801              CMP      r0,#1                 ;6858
0047aa  d004              BEQ      |L1.18358|
0047ac  2802              CMP      r0,#2                 ;6858
0047ae  d13f              BNE      |L1.18480|
0047b0  f1b80f05          CMP      r8,#5                 ;6858
0047b4  dd3c              BLE      |L1.18480|
                  |L1.18358|
0047b6  f1030301          ADD      r3,r3,#1              ;6860
0047ba  f8893001          STRB     r3,[r9,#1]            ;6860
0047be  f1ac0c01          SUB      r12,r12,#1
0047c2  f8aac000          STRH     r12,[r10,#0]
0047c6  e047              B        |L1.18520|
                  |L1.18376|
0047c8  e04b              B        |L1.18530|
0047ca  0000              DCW      0x0000
                  |L1.18380|
                          DCD      ||area_number.25||
                  |L1.18384|
                          DCD      bps
                  |L1.18388|
                          DCD      mess_data
                  |L1.18392|
                          DCD      NUMIST
                  |L1.18396|
                          DCD      num_necc
                  |L1.18400|
                          DCD      main_1Hz_cnt
                  |L1.18404|
                          DCD      ipsBlckStat
                  |L1.18408|
                          DCD      TSIGN
                  |L1.18412|
                          DCD      power_summary_tempo
                  |L1.18416|
                          DCD      power_summary_tempo_old
                  |L1.18420|
                          DCD      powerSummaryCnt
                  |L1.18424|
                          DCD      power_summary
                  |L1.18428|
                          DCD      power_current_tempo
                  |L1.18432|
                          DCD      power_current_tempo_old
                  |L1.18436|
                          DCD      powerCurrentCnt
                  |L1.18440|
                          DCD      power_current
                  |L1.18444|
                          DCD      ica_timer_cnt
                  |L1.18448|
                          DCD      sp_ch_stat
                  |L1.18452|
                          DCD      ICA_EN
                  |L1.18456|
                          DCD      ica_plazma
                  |L1.18460|
                          DCD      bps_I
                  |L1.18464|
                          DCD      ica_my_current
                  |L1.18468|
                          DCD      ica_your_current
                  |L1.18472|
                          DCD      ica_u_necc
                  |L1.18476|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18480|
;;;6862   		}
;;;6863   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004830  4291              CMP      r1,r2
004832  da11              BGE      |L1.18520|
004834  1a51              SUBS     r1,r2,r1
004836  2905              CMP      r1,#5
004838  db0e              BLT      |L1.18520|
00483a  2801              CMP      r0,#1
00483c  d004              BEQ      |L1.18504|
00483e  2802              CMP      r0,#2
004840  d10a              BNE      |L1.18520|
004842  f1b80f05          CMP      r8,#5
004846  dd07              BLE      |L1.18520|
                  |L1.18504|
;;;6864   		{
;;;6865   		ica_plazma[1]--;
004848  f1a30301          SUB      r3,r3,#1
00484c  f8893001          STRB     r3,[r9,#1]
;;;6866   		ica_u_necc++;
004850  f10c0c01          ADD      r12,r12,#1
004854  f8aac000          STRH     r12,[r10,#0]
                  |L1.18520|
;;;6867   		}
;;;6868   	gran(&ica_u_necc,-100,100);
004858  2264              MOVS     r2,#0x64
00485a  4251              RSBS     r1,r2,#0
00485c  48fc              LDR      r0,|L1.19536|
00485e  f7fffffe          BL       gran
                  |L1.18530|
;;;6869   	}
;;;6870   
;;;6871   
;;;6872   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004862  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
004866  2801              CMP      r0,#1
004868  d169              BNE      |L1.18750|
00486a  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
00486e  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004870  4308              ORRS     r0,r0,r1
004872  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004874  4308              ORRS     r0,r0,r1
004876  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004878  4308              ORRS     r0,r0,r1
00487a  d160              BNE      |L1.18750|
00487c  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
00487e  2800              CMP      r0,#0
004880  d05d              BEQ      |L1.18750|
;;;6873   	{
;;;6874   	
;;;6875   //	ica_connect_cnt++;
;;;6876   
;;;6877   	if(ica_timer_cnt==8)
004882  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6878   		{
;;;6879   		char modbus_buff[20],i;
;;;6880   		short crc_temp;
;;;6881   	
;;;6882   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004884  4bf3              LDR      r3,|L1.19540|
;;;6883   		modbus_buff[1] = 4;
;;;6884   		modbus_buff[2] = 0;
;;;6885   		modbus_buff[3] = 2;
;;;6886   		modbus_buff[4] = 0;	
;;;6887   		modbus_buff[5] = 1;
;;;6888   	
;;;6889   		crc_temp= CRC16_2(modbus_buff,6);
;;;6890   	
;;;6891   		modbus_buff[6]= (char)crc_temp;
;;;6892   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6893   	
;;;6894   		if(ICA_CH==0)
004886  4ff4              LDR      r7,|L1.19544|
004888  2808              CMP      r0,#8                 ;6877
00488a  d05b              BEQ      |L1.18756|
;;;6895   			{
;;;6896   			for (i=0;i<8;i++)
;;;6897   				{
;;;6898   				putchar_sc16is700(modbus_buff[i]);
;;;6899   				}
;;;6900   			}
;;;6901   		else if(ICA_CH==2)
;;;6902   			{
;;;6903   			uart_out1 (5,4,0,2,0,1,0);
;;;6904   			}
;;;6905   		}
;;;6906   	else
;;;6907   		{
;;;6908   		char modbus_buff[20],i;
;;;6909   		short crc_temp, tempSSSS;
;;;6910   
;;;6911   		tempSSSS=cntrl_stat_old;
00488c  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6912   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004890  48f2              LDR      r0,|L1.19548|
004892  f06f0214          MVN      r2,#0x14
004896  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
00489a  ebc01100          RSB      r1,r0,r0,LSL #4
00489e  eb020c81          ADD      r12,r2,r1,LSL #2
0048a2  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0048a6  4594              CMP      r12,r2
0048a8  d00b              BEQ      |L1.18626|
0048aa  f06f0c13          MVN      r12,#0x13
0048ae  eb0c0c81          ADD      r12,r12,r1,LSL #2
0048b2  4594              CMP      r12,r2
0048b4  d005              BEQ      |L1.18626|
0048b6  f06f0c12          MVN      r12,#0x12
0048ba  eb0c0181          ADD      r1,r12,r1,LSL #2
0048be  4291              CMP      r1,r2
0048c0  d101              BNE      |L1.18630|
                  |L1.18626|
0048c2  f4404680          ORR      r6,r0,#0x4000
                  |L1.18630|
;;;6913   
;;;6914   
;;;6915   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0048c6  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0048c8  f88d0010          STRB     r0,[sp,#0x10]
;;;6916   		modbus_buff[1] = 6;
0048cc  f04f0006          MOV      r0,#6
0048d0  f88d0011          STRB     r0,[sp,#0x11]
;;;6917   		modbus_buff[2] = 0;
0048d4  f88d4012          STRB     r4,[sp,#0x12]
;;;6918   		modbus_buff[3] = 100;
0048d8  f04f0064          MOV      r0,#0x64
0048dc  f88d0013          STRB     r0,[sp,#0x13]
;;;6919   		modbus_buff[4] = (char)(tempSSSS/256);	
0048e0  ea4f70e6          ASR      r0,r6,#31
0048e4  eb066010          ADD      r0,r6,r0,LSR #24
0048e8  ea4f2120          ASR      r1,r0,#8
0048ec  f88d1014          STRB     r1,[sp,#0x14]
;;;6920   		modbus_buff[5] = (char)(tempSSSS%256);
0048f0  4630              MOV      r0,r6
0048f2  f88d0015          STRB     r0,[sp,#0x15]
;;;6921   	
;;;6922   		crc_temp= CRC16_2(modbus_buff,6);
0048f6  f04f0106          MOV      r1,#6
0048fa  a804              ADD      r0,sp,#0x10
0048fc  f7fffffe          BL       CRC16_2
;;;6923   	
;;;6924   		modbus_buff[6]= (char)crc_temp;
004900  f88d0016          STRB     r0,[sp,#0x16]
;;;6925   		modbus_buff[7]= (char)(crc_temp>>8);
004904  ea4f2020          ASR      r0,r0,#8
004908  f88d0017          STRB     r0,[sp,#0x17]
;;;6926   	
;;;6927   		crc_temp= CRC16_2(modbus_buff,6);
00490c  f04f0106          MOV      r1,#6
004910  a804              ADD      r0,sp,#0x10
004912  f7fffffe          BL       CRC16_2
;;;6928   	
;;;6929   		plazma_ica1=tempSSSS;
004916  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6930   		if(ICA_CH==0)
00491a  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
00491e  b3f0              CBZ      r0,|L1.18846|
;;;6931   			{
;;;6932   			for (i=0;i<8;i++)
;;;6933   				{
;;;6934   				putchar_sc16is700(modbus_buff[i]);
;;;6935   				}
;;;6936   			}
;;;6937   		else if(ICA_CH==2)
004920  2802              CMP      r0,#2
004922  d10c              BNE      |L1.18750|
;;;6938   			{
;;;6939   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004924  f89d0015          LDRB     r0,[sp,#0x15]
004928  f89d1014          LDRB     r1,[sp,#0x14]
00492c  e9cd0401          STRD     r0,r4,[sp,#4]
004930  9100              STR      r1,[sp,#0]
004932  2364              MOVS     r3,#0x64
004934  2200              MOVS     r2,#0
004936  2106              MOVS     r1,#6
004938  2005              MOVS     r0,#5
00493a  f7fffffe          BL       uart_out1
                  |L1.18750|
;;;6940   			}
;;;6941   		}
;;;6942   	}
;;;6943   }
00493e  b009              ADD      sp,sp,#0x24
004940  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18756|
004944  8818              LDRH     r0,[r3,#0]            ;6882  ; ICA_MODBUS_ADDRESS
004946  f88d0010          STRB     r0,[sp,#0x10]         ;6882
00494a  f04f0004          MOV      r0,#4                 ;6883
00494e  f88d0011          STRB     r0,[sp,#0x11]         ;6883
004952  f88d4012          STRB     r4,[sp,#0x12]         ;6884
004956  f04f0002          MOV      r0,#2                 ;6885
00495a  f88d0013          STRB     r0,[sp,#0x13]         ;6885
00495e  f88d4014          STRB     r4,[sp,#0x14]         ;6886
004962  f04f0501          MOV      r5,#1                 ;6887
004966  f88d5015          STRB     r5,[sp,#0x15]         ;6887
00496a  f04f0106          MOV      r1,#6                 ;6889
00496e  a804              ADD      r0,sp,#0x10           ;6889
004970  f7fffffe          BL       CRC16_2
004974  f88d0016          STRB     r0,[sp,#0x16]         ;6891
004978  ea4f2020          ASR      r0,r0,#8              ;6892
00497c  f88d0017          STRB     r0,[sp,#0x17]         ;6892
004980  f9b70000          LDRSH    r0,[r7,#0]            ;6894  ; ICA_CH
004984  b160              CBZ      r0,|L1.18848|
004986  2802              CMP      r0,#2                 ;6901
004988  d1d9              BNE      |L1.18750|
00498a  e9cd4500          STRD     r4,r5,[sp,#0]         ;6903
00498e  2302              MOVS     r3,#2                 ;6903
004990  2200              MOVS     r2,#0                 ;6903
004992  2104              MOVS     r1,#4                 ;6903
004994  2005              MOVS     r0,#5                 ;6903
004996  9402              STR      r4,[sp,#8]            ;6903
004998  f7fffffe          BL       uart_out1
00499c  e7cf              B        |L1.18750|
                  |L1.18846|
00499e  e00b              B        |L1.18872|
                  |L1.18848|
0049a0  f04f0400          MOV      r4,#0                 ;6896
0049a4  ad04              ADD      r5,sp,#0x10           ;6879
                  |L1.18854|
0049a6  5d28              LDRB     r0,[r5,r4]            ;6898
0049a8  f7fffffe          BL       putchar_sc16is700
0049ac  f1040401          ADD      r4,r4,#1              ;6896
0049b0  b2e4              UXTB     r4,r4                 ;6896
0049b2  2c08              CMP      r4,#8                 ;6896
0049b4  d3f7              BCC      |L1.18854|
0049b6  e7c2              B        |L1.18750|
                  |L1.18872|
0049b8  f04f0400          MOV      r4,#0                 ;6932
0049bc  ad04              ADD      r5,sp,#0x10           ;6908
                  |L1.18878|
0049be  5d28              LDRB     r0,[r5,r4]            ;6934
0049c0  f7fffffe          BL       putchar_sc16is700
0049c4  f1040401          ADD      r4,r4,#1              ;6932
0049c8  b2e4              UXTB     r4,r4                 ;6932
0049ca  2c08              CMP      r4,#8                 ;6932
0049cc  d3f7              BCC      |L1.18878|
0049ce  e7b6              B        |L1.18750|
;;;6944   
                          ENDP

                  ipsBlckHndl PROC
;;;7027   //-----------------------------------------------
;;;7028   void ipsBlckHndl(char in)
0049d0  b510              PUSH     {r4,lr}
;;;7029   {
;;;7030   
;;;7031   ipsBlckStat=0;
0049d2  4ba3              LDR      r3,|L1.19552|
0049d4  f04f0000          MOV      r0,#0
0049d8  8018              STRH     r0,[r3,#0]
;;;7032   if(ipsBlckSrc==1)
0049da  48a2              LDR      r0,|L1.19556|
0049dc  f04f0401          MOV      r4,#1
;;;7033   	{
;;;7034   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0049e0  f44f62fa          MOV      r2,#0x7d0
0049e4  f9b01000          LDRSH    r1,[r0,#0]            ;7032  ; ipsBlckSrc
0049e8  489f              LDR      r0,|L1.19560|
0049ea  2901              CMP      r1,#1                 ;7032
0049ec  f9b00000          LDRSH    r0,[r0,#0]
0049f0  d006              BEQ      |L1.18944|
;;;7035   	}
;;;7036   else if(ipsBlckSrc==2)
0049f2  2902              CMP      r1,#2
0049f4  d10f              BNE      |L1.18966|
0049f6  499d              LDR      r1,|L1.19564|
;;;7037   	{
;;;7038   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0049f8  f9b1101a          LDRSH    r1,[r1,#0x1a]
0049fc  b160              CBZ      r0,|L1.18968|
0049fe  e00d              B        |L1.18972|
                  |L1.18944|
004a00  499a              LDR      r1,|L1.19564|
004a02  f9b11016          LDRSH    r1,[r1,#0x16]         ;7034
004a06  b908              CBNZ     r0,|L1.18956|
004a08  4291              CMP      r1,r2                 ;7034
004a0a  dc03              BGT      |L1.18964|
                  |L1.18956|
004a0c  2801              CMP      r0,#1                 ;7034
004a0e  d102              BNE      |L1.18966|
004a10  4291              CMP      r1,r2                 ;7034
004a12  da00              BGE      |L1.18966|
                  |L1.18964|
004a14  801c              STRH     r4,[r3,#0]            ;7034
                  |L1.18966|
;;;7039   	}
;;;7040   }
004a16  bd10              POP      {r4,pc}
                  |L1.18968|
004a18  4291              CMP      r1,r2                 ;7038
004a1a  dc03              BGT      |L1.18980|
                  |L1.18972|
004a1c  2801              CMP      r0,#1                 ;7038
004a1e  d1fa              BNE      |L1.18966|
004a20  4291              CMP      r1,r2                 ;7038
004a22  daf8              BGE      |L1.18966|
                  |L1.18980|
004a24  801c              STRH     r4,[r3,#0]            ;7038
004a26  bd10              POP      {r4,pc}
;;;7041   
                          ENDP

                  bps_drv PROC
;;;7042   //-----------------------------------------------
;;;7043   void bps_drv(char in)
004a28  e92d41f0          PUSH     {r4-r8,lr}
;;;7044   {
004a2c  4606              MOV      r6,r0
;;;7045   char temp;
;;;7046   
;;;7047   if (bps[in]._device!=dSRC) return;
004a2e  eb0600c6          ADD      r0,r6,r6,LSL #3
004a32  498f              LDR      r1,|L1.19568|
004a34  eb001006          ADD      r0,r0,r6,LSL #4
004a38  f8112020          LDRB     r2,[r1,r0,LSL #2]
004a3c  2a03              CMP      r2,#3
004a3e  d17d              BNE      |L1.19260|
;;;7048   temp=bps[in]._flags_tm;
004a40  eb010480          ADD      r4,r1,r0,LSL #2
004a44  f8945042          LDRB     r5,[r4,#0x42]
;;;7049   if(temp&(1<<AV_T))
004a48  07a8              LSLS     r0,r5,#30
004a4a  d517              BPL      |L1.19068|
;;;7050   	{
;;;7051   	if(bps[in]._temp_av_cnt<1200) 
004a4c  f9b41046          LDRSH    r1,[r4,#0x46]
004a50  f44f6296          MOV      r2,#0x4b0
004a54  4291              CMP      r1,r2
004a56  da22              BGE      |L1.19102|
;;;7052   		{
;;;7053   		bps[in]._temp_av_cnt++;
004a58  f1010101          ADD      r1,r1,#1
004a5c  b208              SXTH     r0,r1
004a5e  f8a40046          STRH     r0,[r4,#0x46]
;;;7054   		if(bps[in]._temp_av_cnt>=1200)
004a62  4290              CMP      r0,r2
004a64  db1b              BLT      |L1.19102|
;;;7055   			{
;;;7056   			bps[in]._temp_av_cnt=1200;
004a66  f8a42046          STRH     r2,[r4,#0x46]
;;;7057   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004a6a  7860              LDRB     r0,[r4,#1]
004a6c  07c0              LSLS     r0,r0,#31
004a6e  d116              BNE      |L1.19102|
004a70  2201              MOVS     r2,#1
004a72  2100              MOVS     r1,#0
004a74  4630              MOV      r0,r6
004a76  f7fffffe          BL       avar_bps_hndl
004a7a  e010              B        |L1.19102|
                  |L1.19068|
;;;7058   			}
;;;7059   		}
;;;7060   	}
;;;7061   
;;;7062   else if(!(temp&(1<<AV_T)))
;;;7063   	{
;;;7064   	if(bps[in]._temp_av_cnt) 
004a7c  f9b41046          LDRSH    r1,[r4,#0x46]
004a80  b169              CBZ      r1,|L1.19102|
;;;7065   		{
;;;7066   		bps[in]._temp_av_cnt--;
004a82  f1a10101          SUB      r1,r1,#1
004a86  b208              SXTH     r0,r1
004a88  f8a40046          STRH     r0,[r4,#0x46]
;;;7067   		if(!bps[in]._temp_av_cnt)
004a8c  b938              CBNZ     r0,|L1.19102|
;;;7068   			{
;;;7069   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004a8e  7860              LDRB     r0,[r4,#1]
004a90  07c0              LSLS     r0,r0,#31
004a92  d004              BEQ      |L1.19102|
004a94  2200              MOVS     r2,#0
004a96  4611              MOV      r1,r2
004a98  4630              MOV      r0,r6
004a9a  f7fffffe          BL       avar_bps_hndl
                  |L1.19102|
;;;7070   			}
;;;7071   		} 	
;;;7072   
;;;7073   	}
;;;7074   
;;;7075   if((temp&(1<<AVUMAX)))
004a9e  0728              LSLS     r0,r5,#28
;;;7076   	{
;;;7077   	if(bps[in]._umax_av_cnt<10) 
;;;7078   		{
;;;7079   		bps[in]._umax_av_cnt++;
;;;7080   		if(bps[in]._umax_av_cnt>=10)
;;;7081   			{ 
;;;7082   			bps[in]._umax_av_cnt=10;
004aa0  f04f080a          MOV      r8,#0xa
004aa4  f04f0700          MOV      r7,#0                 ;7057
004aa8  d518              BPL      |L1.19164|
004aaa  f9b41048          LDRSH    r1,[r4,#0x48]         ;7077
004aae  290a              CMP      r1,#0xa               ;7077
004ab0  da29              BGE      |L1.19206|
004ab2  f1010101          ADD      r1,r1,#1              ;7079
004ab6  b208              SXTH     r0,r1                 ;7079
004ab8  f8a40048          STRH     r0,[r4,#0x48]         ;7079
004abc  280a              CMP      r0,#0xa               ;7080
004abe  db22              BLT      |L1.19206|
004ac0  f8a48048          STRH     r8,[r4,#0x48]
;;;7083   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004ac4  7860              LDRB     r0,[r4,#1]
004ac6  0780              LSLS     r0,r0,#30
004ac8  d404              BMI      |L1.19156|
004aca  2201              MOVS     r2,#1
004acc  4611              MOV      r1,r2
004ace  4630              MOV      r0,r6
004ad0  f7fffffe          BL       avar_bps_hndl
                  |L1.19156|
;;;7084   			apv_start(in);
004ad4  4630              MOV      r0,r6
004ad6  f7fffffe          BL       apv_start
004ada  e014              B        |L1.19206|
                  |L1.19164|
;;;7085   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;7086   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7087   				{
;;;7088   				apv_cnt[in,0]=APV_INIT;
;;;7089   				apv_cnt[in,1]=APV_INIT;
;;;7090   				apv_cnt[in,2]=APV_INIT;
;;;7091   				apv_flags[in]=afOFF;
;;;7092   				}				*/
;;;7093   						
;;;7094   			}
;;;7095   		} 
;;;7096   	}		
;;;7097   else if(!(temp&(1<<AVUMAX)))
;;;7098   	{
;;;7099   	if(bps[in]._umax_av_cnt>0) 
004adc  f9b41048          LDRSH    r1,[r4,#0x48]
004ae0  2900              CMP      r1,#0
004ae2  dd0d              BLE      |L1.19200|
;;;7100   		{
;;;7101   		bps[in]._umax_av_cnt--;
004ae4  f1a10101          SUB      r1,r1,#1
004ae8  b208              SXTH     r0,r1
004aea  f8a40048          STRH     r0,[r4,#0x48]
;;;7102   		if(bps[in]._umax_av_cnt==0)
004aee  b950              CBNZ     r0,|L1.19206|
;;;7103   			{
;;;7104   			bps[in]._umax_av_cnt=0;
;;;7105   			avar_bps_hndl(in,1,0);
004af0  f04f0200          MOV      r2,#0
004af4  f04f0101          MOV      r1,#1
004af8  4630              MOV      r0,r6
004afa  f7fffffe          BL       avar_bps_hndl
004afe  e002              B        |L1.19206|
                  |L1.19200|
;;;7106   			//apv_stop(in);
;;;7107   	 //		apv_cnt[in,0]=0;
;;;7108   	//		apv_cnt[in,1]=0;
;;;7109   	 //		apv_cnt[in,2]=0;			
;;;7110   			}
;;;7111   		}
;;;7112   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004b00  da01              BGE      |L1.19206|
004b02  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19206|
;;;7113   	}
;;;7114   
;;;7115   if(temp&(1<<AVUMIN))
004b06  06e8              LSLS     r0,r5,#27
004b08  d519              BPL      |L1.19262|
;;;7116   	{
;;;7117   	if(bps[in]._umin_av_cnt<10) 
004b0a  f9b4104a          LDRSH    r1,[r4,#0x4a]
004b0e  290a              CMP      r1,#0xa
004b10  da23              BGE      |L1.19290|
;;;7118   		{
;;;7119   		bps[in]._umin_av_cnt++;
004b12  f1010101          ADD      r1,r1,#1
004b16  b208              SXTH     r0,r1
004b18  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7120   		if(bps[in]._umin_av_cnt>=10)
004b1c  280a              CMP      r0,#0xa
004b1e  db1c              BLT      |L1.19290|
;;;7121   			{ 
;;;7122   			bps[in]._umin_av_cnt=10;
004b20  f8a4804a          STRH     r8,[r4,#0x4a]
;;;7123   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b24  7860              LDRB     r0,[r4,#1]
004b26  0740              LSLS     r0,r0,#29
004b28  d404              BMI      |L1.19252|
004b2a  2201              MOVS     r2,#1
004b2c  2102              MOVS     r1,#2
004b2e  4630              MOV      r0,r6
004b30  f7fffffe          BL       avar_bps_hndl
                  |L1.19252|
;;;7124   			apv_start(in);
004b34  4630              MOV      r0,r6
004b36  f7fffffe          BL       apv_start
004b3a  e00e              B        |L1.19290|
                  |L1.19260|
004b3c  e0b1              B        |L1.19618|
                  |L1.19262|
;;;7125   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7126   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7127   				{
;;;7128   				apv_cnt[in,0]=APV_INIT;
;;;7129   				apv_cnt[in,1]=APV_INIT;
;;;7130   				apv_cnt[in,2]=APV_INIT;
;;;7131   				apv_flags[in]=afOFF;
;;;7132   				}*/				
;;;7133   			}
;;;7134   		} 
;;;7135   	}	
;;;7136   	
;;;7137   else if(!(temp&(1<<AVUMIN)))
;;;7138   	{
;;;7139   	if(bps[in]._umin_av_cnt) 
004b3e  f9b4004a          LDRSH    r0,[r4,#0x4a]
004b42  b150              CBZ      r0,|L1.19290|
;;;7140   		{
;;;7141   		bps[in]._umin_av_cnt--;
004b44  f1a00001          SUB      r0,r0,#1
004b48  b200              SXTH     r0,r0
004b4a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7142   		if(bps[in]._umin_av_cnt==0)
004b4e  b920              CBNZ     r0,|L1.19290|
;;;7143   			{
;;;7144   			bps[in]._umin_av_cnt=0;
;;;7145   			avar_bps_hndl(in,2,0);
004b50  2200              MOVS     r2,#0
004b52  2102              MOVS     r1,#2
004b54  4630              MOV      r0,r6
004b56  f7fffffe          BL       avar_bps_hndl
                  |L1.19290|
;;;7146   			//apv_stop(in);
;;;7147   		//	apv_cnt[in,0]=0;
;;;7148   		//	apv_cnt[in,1]=0;
;;;7149   		//	apv_cnt[in,2]=0;
;;;7150   			}
;;;7151   		}
;;;7152   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;7153   	}
;;;7154   
;;;7155   if((bps[in]._Uii<(UB20-DU)))
004b5a  4846              LDR      r0,|L1.19572|
004b5c  69e1              LDR      r1,[r4,#0x1c]
004b5e  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004b62  4845              LDR      r0,|L1.19576|
004b64  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004b68  1a10              SUBS     r0,r2,r0
004b6a  4281              CMP      r1,r0
004b6c  da1d              BGE      |L1.19370|
;;;7156   	{
;;;7157   	if(bps[in]._state==bsWRK)
004b6e  78a0              LDRB     r0,[r4,#2]
004b70  2801              CMP      r0,#1
004b72  d128              BNE      |L1.19398|
;;;7158   		{
;;;7159   		if(bps[in]._umin_av_cnt_uku<300) 
004b74  f9b4004c          LDRSH    r0,[r4,#0x4c]
004b78  f44f7196          MOV      r1,#0x12c
004b7c  4288              CMP      r0,r1
004b7e  da11              BGE      |L1.19364|
;;;7160   			{
;;;7161   			bps[in]._umin_av_cnt_uku++;
004b80  f1000001          ADD      r0,r0,#1
004b84  b200              SXTH     r0,r0
004b86  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7162   			if(bps[in]._umin_av_cnt_uku>=300)
004b8a  4288              CMP      r0,r1
004b8c  db1b              BLT      |L1.19398|
;;;7163   				{ 
;;;7164   				bps[in]._umin_av_cnt_uku=300;
004b8e  f8a4104c          STRH     r1,[r4,#0x4c]
;;;7165   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b92  7860              LDRB     r0,[r4,#1]
004b94  0740              LSLS     r0,r0,#29
004b96  d416              BMI      |L1.19398|
004b98  2201              MOVS     r2,#1
004b9a  2102              MOVS     r1,#2
004b9c  4630              MOV      r0,r6
004b9e  f7fffffe          BL       avar_bps_hndl
004ba2  e010              B        |L1.19398|
                  |L1.19364|
;;;7166   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7167   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7168   					{
;;;7169   					apv_cnt[in,0]=APV_INIT;
;;;7170   					apv_cnt[in,1]=APV_INIT;
;;;7171   					apv_cnt[in,2]=APV_INIT;
;;;7172   					apv_flags[in]=afOFF;
;;;7173   					}*/				
;;;7174   				}
;;;7175   			}
;;;7176   		else
;;;7177   			{
;;;7178   			bps[in]._umin_av_cnt_uku=0;
004ba4  f8a4704c          STRH     r7,[r4,#0x4c]
004ba8  e00d              B        |L1.19398|
                  |L1.19370|
;;;7179   			} 
;;;7180   		}
;;;7181   	}	
;;;7182   	
;;;7183   else if(bps[in]._Uii>=(UB20-DU))
;;;7184   	{
;;;7185   	if(bps[in]._umin_av_cnt_uku) 
004baa  f9b4004c          LDRSH    r0,[r4,#0x4c]
004bae  b150              CBZ      r0,|L1.19398|
;;;7186   		{
;;;7187   		bps[in]._umin_av_cnt_uku--;
004bb0  f1a00001          SUB      r0,r0,#1
004bb4  b200              SXTH     r0,r0
004bb6  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7188   		if(bps[in]._umin_av_cnt_uku==0)
004bba  b920              CBNZ     r0,|L1.19398|
;;;7189   			{
;;;7190   			bps[in]._umin_av_cnt_uku=0;
;;;7191   			avar_bps_hndl(in,2,0);
004bbc  2200              MOVS     r2,#0
004bbe  2102              MOVS     r1,#2
004bc0  4630              MOV      r0,r6
004bc2  f7fffffe          BL       avar_bps_hndl
                  |L1.19398|
;;;7192   		//	apv_cnt[in,0]=0;
;;;7193   		//	apv_cnt[in,1]=0;
;;;7194   		//	apv_cnt[in,2]=0;
;;;7195   			}
;;;7196   		}
;;;7197   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;7198   	}
;;;7199   
;;;7200   //bps[in]._state=bsOFF;
;;;7201   
;;;7202   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004bc6  7860              LDRB     r0,[r4,#1]
004bc8  0700              LSLS     r0,r0,#28
004bca  d003              BEQ      |L1.19412|
004bcc  f04f0004          MOV      r0,#4
004bd0  70a0              STRB     r0,[r4,#2]
004bd2  e017              B        |L1.19460|
                  |L1.19412|
;;;7203   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004bd4  4829              LDR      r0,|L1.19580|
004bd6  7800              LDRB     r0,[r0,#0]  ; net_av
004bd8  b130              CBZ      r0,|L1.19432|
004bda  78e0              LDRB     r0,[r4,#3]
004bdc  2814              CMP      r0,#0x14
004bde  d903              BLS      |L1.19432|
;;;7204   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004be0  f04f0005          MOV      r0,#5
004be4  70a0              STRB     r0,[r4,#2]
004be6  e00d              B        |L1.19460|
                  |L1.19432|
;;;7205   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004be8  f8940042          LDRB     r0,[r4,#0x42]
004bec  0680              LSLS     r0,r0,#26
004bee  d503              BPL      |L1.19448|
004bf0  f04f0002          MOV      r0,#2
004bf4  70a0              STRB     r0,[r4,#2]
004bf6  e005              B        |L1.19460|
                  |L1.19448|
;;;7206   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004bf8  78e0              LDRB     r0,[r4,#3]
004bfa  2814              CMP      r0,#0x14
004bfc  d202              BCS      |L1.19460|
004bfe  f04f0001          MOV      r0,#1
004c02  70a0              STRB     r0,[r4,#2]
                  |L1.19460|
;;;7207   
;;;7208   
;;;7209   
;;;7210   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;7211   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;7212   //else bps[0]._state=ssNOT;
;;;7213   
;;;7214   //bps[in]._is_ready=0;
;;;7215   //bps[in]._is_wrk=0;
;;;7216   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;7217   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;7218   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;7219   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;7220   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7221   //	{
;;;7222   //	bps[in]._flags_bp='B';// заблокирован
;;;7223   //	bps[in]._is_ready=1;
;;;7224   //	}
;;;7225   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7226   //     {
;;;7227   //     bps[in]._flags_bp='W';// работает
;;;7228   //     bps[in]._is_ready=1;
;;;7229   //     bps[in]._is_wrk=1;
;;;7230        
;;;7231   //     }
;;;7232   //else bps[in]._is_ready=1;     
;;;7233   
;;;7234   
;;;7235   
;;;7236   
;;;7237   
;;;7238   /*
;;;7239   bps[in]._flags_tu&=BIN8(11111110);
;;;7240   if(bps[in]._ist_blok_cnt)
;;;7241   	{
;;;7242   	bps[in]._ist_blok_cnt--;
;;;7243   	bps[in]._flags_tu|=BIN8(1);
;;;7244   	}
;;;7245   
;;;7246   	   */ 
;;;7247   
;;;7248   //Пересброс БПСа при потере связи
;;;7249   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004c04  78e0              LDRB     r0,[r4,#3]
004c06  280a              CMP      r0,#0xa
004c08  d306              BCC      |L1.19480|
004c0a  f894002c          LDRB     r0,[r4,#0x2c]
004c0e  f0400080          ORR      r0,r0,#0x80
004c12  f884002c          STRB     r0,[r4,#0x2c]
004c16  e005              B        |L1.19492|
                  |L1.19480|
;;;7250   else bps[in]._flags_tu&=BIN8(1111111);
004c18  f894002c          LDRB     r0,[r4,#0x2c]
004c1c  f000007f          AND      r0,r0,#0x7f
004c20  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19492|
;;;7251   
;;;7252   if(avar_bps_reset_cnt) 
004c24  4816              LDR      r0,|L1.19584|
004c26  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004c2a  b139              CBZ      r1,|L1.19516|
;;;7253   	{
;;;7254   	bps[in]._flags_tu|=BIN8(10);
004c2c  f894102c          LDRB     r1,[r4,#0x2c]
004c30  f0410102          ORR      r1,r1,#2
004c34  f884102c          STRB     r1,[r4,#0x2c]
;;;7255   	bps[in]._av=0;
004c38  7067              STRB     r7,[r4,#1]
004c3a  e029              B        |L1.19600|
                  |L1.19516|
;;;7256   	}
;;;7257   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004c3c  f8941062          LDRB     r1,[r4,#0x62]
004c40  b301              CBZ      r1,|L1.19588|
004c42  f894102c          LDRB     r1,[r4,#0x2c]
004c46  f0410102          ORR      r1,r1,#2
004c4a  f884102c          STRB     r1,[r4,#0x2c]
004c4e  e01f              B        |L1.19600|
                  |L1.19536|
                          DCD      ica_u_necc
                  |L1.19540|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19544|
                          DCD      ICA_CH
                  |L1.19548|
                          DCD      TBAT
                  |L1.19552|
                          DCD      ipsBlckStat
                  |L1.19556|
                          DCD      ipsBlckSrc
                  |L1.19560|
                          DCD      ipsBlckLog
                  |L1.19564|
                          DCD      ||.bss||+0x40c
                  |L1.19568|
                          DCD      bps
                  |L1.19572|
                          DCD      UB20
                  |L1.19576|
                          DCD      ||DU||
                  |L1.19580|
                          DCD      net_av
                  |L1.19584|
                          DCD      ||area_number.25||
                  |L1.19588|
;;;7258   else bps[in]._flags_tu&=BIN8(11111101);
004c84  f894102c          LDRB     r1,[r4,#0x2c]
004c88  f00101fd          AND      r1,r1,#0xfd
004c8c  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19600|
;;;7259   	
;;;7260   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004c90  f9b41054          LDRSH    r1,[r4,#0x54]
004c94  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004c98  4408              ADD      r0,r0,r1
004c9a  6320              STR      r0,[r4,#0x30]
;;;7261   bps[in]._vol_i=1000;
004c9c  f44f707a          MOV      r0,#0x3e8
004ca0  6360              STR      r0,[r4,#0x34]
                  |L1.19618|
;;;7262   //bps[0]._vol_u=500;
;;;7263   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7264   }
004ca2  e8bd81f0          POP      {r4-r8,pc}
;;;7265   
                          ENDP

                  avt_hndl PROC
;;;7266   //-----------------------------------------------
;;;7267   void avt_hndl(void)
004ca6  b570              PUSH     {r4-r6,lr}
;;;7268   {
;;;7269   char i;
;;;7270   for(i=0;i<12;i++)
004ca8  f04f0000          MOV      r0,#0
;;;7271   	{
;;;7272   	if(eb2_data_short[6]&(1<<i))
004cac  49ff              LDR      r1,|L1.20652|
004cae  f04f0401          MOV      r4,#1
004cb2  4603              MOV      r3,r0                 ;7270
004cb4  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;7273   		{
;;;7274   		avt_stat[i]=avtON;
004cb8  4dfd              LDR      r5,|L1.20656|
                  |L1.19642|
004cba  fa04f100          LSL      r1,r4,r0              ;7272
004cbe  420a              TST      r2,r1                 ;7272
004cc0  d001              BEQ      |L1.19654|
004cc2  542c              STRB     r4,[r5,r0]
004cc4  e000              B        |L1.19656|
                  |L1.19654|
;;;7275   		}
;;;7276   	else avt_stat[i]=avtOFF;
004cc6  542b              STRB     r3,[r5,r0]
                  |L1.19656|
004cc8  f1000001          ADD      r0,r0,#1              ;7270
004ccc  b2c0              UXTB     r0,r0                 ;7270
004cce  280c              CMP      r0,#0xc               ;7270
004cd0  d3f3              BCC      |L1.19642|
;;;7277   	}
;;;7278   
;;;7279   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004cd2  4ef8              LDR      r6,|L1.20660|
004cd4  7828              LDRB     r0,[r5,#0]  ; avt_stat
004cd6  4cf8              LDR      r4,|L1.20664|
004cd8  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004cda  4281              CMP      r1,r0
004cdc  d00b              BEQ      |L1.19702|
004cde  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ce2  2901              CMP      r1,#1
004ce4  db07              BLT      |L1.19702|
;;;7280   	{
;;;7281   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004ce6  2801              CMP      r0,#1
004ce8  d07e              BEQ      |L1.19944|
;;;7282   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004cea  2300              MOVS     r3,#0
004cec  2201              MOVS     r2,#1
004cee  210b              MOVS     r1,#0xb
004cf0  a0f2              ADR      r0,|L1.20668|
004cf2  f7fffffe          BL       snmp_trap_send
                  |L1.19702|
;;;7283   	}
;;;7284   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004cf6  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004cf8  7868              LDRB     r0,[r5,#1]  ; avt_stat
004cfa  4281              CMP      r1,r0
004cfc  d00b              BEQ      |L1.19734|
004cfe  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d02  2902              CMP      r1,#2
004d04  db07              BLT      |L1.19734|
;;;7285   	{
;;;7286   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004d06  2801              CMP      r0,#1
004d08  d06f              BEQ      |L1.19946|
;;;7287   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004d0a  2300              MOVS     r3,#0
004d0c  2202              MOVS     r2,#2
004d0e  210b              MOVS     r1,#0xb
004d10  a0ef              ADR      r0,|L1.20688|
004d12  f7fffffe          BL       snmp_trap_send
                  |L1.19734|
;;;7288   	}
;;;7289   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004d16  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004d18  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004d1a  4281              CMP      r1,r0
004d1c  d00b              BEQ      |L1.19766|
004d1e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d22  2903              CMP      r1,#3
004d24  db07              BLT      |L1.19766|
;;;7290   	{
;;;7291   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004d26  2801              CMP      r0,#1
004d28  d072              BEQ      |L1.19984|
;;;7292   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004d2a  2300              MOVS     r3,#0
004d2c  2203              MOVS     r2,#3
004d2e  210b              MOVS     r1,#0xb
004d30  a0ec              ADR      r0,|L1.20708|
004d32  f7fffffe          BL       snmp_trap_send
                  |L1.19766|
;;;7293   	}
;;;7294   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004d36  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004d38  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004d3a  4281              CMP      r1,r0
004d3c  d00b              BEQ      |L1.19798|
004d3e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d42  2904              CMP      r1,#4
004d44  db07              BLT      |L1.19798|
;;;7295   	{
;;;7296   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004d46  2801              CMP      r0,#1
004d48  d079              BEQ      |L1.20030|
;;;7297   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004d4a  2300              MOVS     r3,#0
004d4c  2204              MOVS     r2,#4
004d4e  210b              MOVS     r1,#0xb
004d50  a0e9              ADR      r0,|L1.20728|
004d52  f7fffffe          BL       snmp_trap_send
                  |L1.19798|
;;;7298   	}
;;;7299   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004d56  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004d58  7928              LDRB     r0,[r5,#4]  ; avt_stat
004d5a  4281              CMP      r1,r0
004d5c  d00b              BEQ      |L1.19830|
004d5e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d62  2905              CMP      r1,#5
004d64  db07              BLT      |L1.19830|
;;;7300   	{
;;;7301   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004d66  2801              CMP      r0,#1
004d68  d071              BEQ      |L1.20046|
;;;7302   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004d6a  2300              MOVS     r3,#0
004d6c  2205              MOVS     r2,#5
004d6e  210b              MOVS     r1,#0xb
004d70  a0e6              ADR      r0,|L1.20748|
004d72  f7fffffe          BL       snmp_trap_send
                  |L1.19830|
;;;7303   	}
;;;7304   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004d76  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004d78  7968              LDRB     r0,[r5,#5]  ; avt_stat
004d7a  4281              CMP      r1,r0
004d7c  d00b              BEQ      |L1.19862|
004d7e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d82  2906              CMP      r1,#6
004d84  db07              BLT      |L1.19862|
;;;7305   	{
;;;7306   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004d86  2801              CMP      r0,#1
004d88  d068              BEQ      |L1.20060|
;;;7307   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004d8a  2300              MOVS     r3,#0
004d8c  2206              MOVS     r2,#6
004d8e  210b              MOVS     r1,#0xb
004d90  a0e3              ADR      r0,|L1.20768|
004d92  f7fffffe          BL       snmp_trap_send
                  |L1.19862|
;;;7308   	}
;;;7309   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004d96  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004d98  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004d9a  4281              CMP      r1,r0
004d9c  d00b              BEQ      |L1.19894|
004d9e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004da2  2907              CMP      r1,#7
004da4  db07              BLT      |L1.19894|
;;;7310   	{
;;;7311   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004da6  2801              CMP      r0,#1
004da8  d05f              BEQ      |L1.20074|
;;;7312   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004daa  2300              MOVS     r3,#0
004dac  2207              MOVS     r2,#7
004dae  210b              MOVS     r1,#0xb
004db0  a0e0              ADR      r0,|L1.20788|
004db2  f7fffffe          BL       snmp_trap_send
                  |L1.19894|
;;;7313   	}
;;;7314   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004db6  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004db8  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004dba  4281              CMP      r1,r0
004dbc  d00b              BEQ      |L1.19926|
004dbe  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dc2  2908              CMP      r1,#8
004dc4  db07              BLT      |L1.19926|
;;;7315   	{
;;;7316   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004dc6  2801              CMP      r0,#1
004dc8  d056              BEQ      |L1.20088|
;;;7317   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004dca  2300              MOVS     r3,#0
004dcc  2208              MOVS     r2,#8
004dce  210b              MOVS     r1,#0xb
004dd0  a0dd              ADR      r0,|L1.20808|
004dd2  f7fffffe          BL       snmp_trap_send
                  |L1.19926|
;;;7318   	}
;;;7319   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004dd6  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004dd8  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004dda  4281              CMP      r1,r0
004ddc  d00e              BEQ      |L1.19964|
004dde  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004de2  2909              CMP      r1,#9
004de4  db0a              BLT      |L1.19964|
;;;7320   	{
;;;7321   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004de6  e001              B        |L1.19948|
                  |L1.19944|
004de8  e013              B        |L1.19986|
                  |L1.19946|
004dea  e019              B        |L1.20000|
                  |L1.19948|
004dec  2801              CMP      r0,#1
004dee  d04a              BEQ      |L1.20102|
;;;7322   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004df0  2300              MOVS     r3,#0
004df2  2209              MOVS     r2,#9
004df4  210b              MOVS     r1,#0xb
004df6  a0d9              ADR      r0,|L1.20828|
004df8  f7fffffe          BL       snmp_trap_send
                  |L1.19964|
;;;7323   	}
;;;7324   
;;;7325   for(i=0;i<12;i++)
004dfc  f04f0000          MOV      r0,#0
                  |L1.19968|
;;;7326   	{
;;;7327   	avt_stat_old[i]=avt_stat[i];
004e00  5c29              LDRB     r1,[r5,r0]
004e02  5431              STRB     r1,[r6,r0]
004e04  f1000001          ADD      r0,r0,#1              ;7325
004e08  b2c0              UXTB     r0,r0                 ;7325
004e0a  280c              CMP      r0,#0xc               ;7325
004e0c  d3f8              BCC      |L1.19968|
                  |L1.19982|
;;;7328   	}
;;;7329   }
004e0e  bd70              POP      {r4-r6,pc}
                  |L1.19984|
004e10  e00e              B        |L1.20016|
                  |L1.19986|
004e12  2301              MOVS     r3,#1                 ;7281
004e14  461a              MOV      r2,r3                 ;7281
004e16  210b              MOVS     r1,#0xb               ;7281
004e18  a0d5              ADR      r0,|L1.20848|
004e1a  f7fffffe          BL       snmp_trap_send
004e1e  e76a              B        |L1.19702|
                  |L1.20000|
004e20  2301              MOVS     r3,#1                 ;7286
004e22  2202              MOVS     r2,#2                 ;7286
004e24  210b              MOVS     r1,#0xb               ;7286
004e26  a0d7              ADR      r0,|L1.20868|
004e28  f7fffffe          BL       snmp_trap_send
004e2c  e773              B        |L1.19734|
004e2e  e006              B        |L1.20030|
                  |L1.20016|
004e30  2301              MOVS     r3,#1                 ;7291
004e32  2203              MOVS     r2,#3                 ;7291
004e34  210b              MOVS     r1,#0xb               ;7291
004e36  a0d8              ADR      r0,|L1.20888|
004e38  f7fffffe          BL       snmp_trap_send
004e3c  e77b              B        |L1.19766|
                  |L1.20030|
004e3e  2301              MOVS     r3,#1                 ;7296
004e40  2204              MOVS     r2,#4                 ;7296
004e42  210b              MOVS     r1,#0xb               ;7296
004e44  a0d9              ADR      r0,|L1.20908|
004e46  f7fffffe          BL       snmp_trap_send
004e4a  e784              B        |L1.19798|
004e4c  e7ff              B        |L1.20046|
                  |L1.20046|
004e4e  2301              MOVS     r3,#1                 ;7301
004e50  2205              MOVS     r2,#5                 ;7301
004e52  210b              MOVS     r1,#0xb               ;7301
004e54  a0da              ADR      r0,|L1.20928|
004e56  f7fffffe          BL       snmp_trap_send
004e5a  e78c              B        |L1.19830|
                  |L1.20060|
004e5c  2301              MOVS     r3,#1                 ;7306
004e5e  2206              MOVS     r2,#6                 ;7306
004e60  210b              MOVS     r1,#0xb               ;7306
004e62  a0dc              ADR      r0,|L1.20948|
004e64  f7fffffe          BL       snmp_trap_send
004e68  e795              B        |L1.19862|
                  |L1.20074|
004e6a  2301              MOVS     r3,#1                 ;7311
004e6c  2207              MOVS     r2,#7                 ;7311
004e6e  210b              MOVS     r1,#0xb               ;7311
004e70  a0dd              ADR      r0,|L1.20968|
004e72  f7fffffe          BL       snmp_trap_send
004e76  e79e              B        |L1.19894|
                  |L1.20088|
004e78  2301              MOVS     r3,#1                 ;7316
004e7a  2208              MOVS     r2,#8                 ;7316
004e7c  210b              MOVS     r1,#0xb               ;7316
004e7e  a0df              ADR      r0,|L1.20988|
004e80  f7fffffe          BL       snmp_trap_send
004e84  e7a7              B        |L1.19926|
                  |L1.20102|
004e86  2301              MOVS     r3,#1                 ;7321
004e88  2209              MOVS     r2,#9                 ;7321
004e8a  210b              MOVS     r1,#0xb               ;7321
004e8c  a0e0              ADR      r0,|L1.21008|
004e8e  f7fffffe          BL       snmp_trap_send
004e92  e7b3              B        |L1.19964|
;;;7330   
                          ENDP

                  bat_hndl PROC
;;;7331   //-----------------------------------------------
;;;7332   void bat_hndl(void)
004e94  b570              PUSH     {r4-r6,lr}
;;;7333   {
;;;7334   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7335   	{
;;;7336   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7337   		{
;;;7338   		char i;
;;;7339   		for(i=0;i<2;i++)
;;;7340   			{
;;;7341   			if(mess_data[1]&(1<<i))
;;;7342   				{
;;;7343   				bat[i]._cnt_to_block=0;
;;;7344        			bat[i]._rel_stat=0;
;;;7345        			}
;;;7346   			}
;;;7347   		}
;;;7348   	}
;;;7349   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7350   	{		
;;;7351   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7352   		{
;;;7353   		char i;
;;;7354   		for(i=0;i<2;i++)
;;;7355   			{
;;;7356   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7357   				{
;;;7358   				bat[i]._cnt_to_block=20;
;;;7359   				bat[i]._rel_stat=1;
;;;7360        			}
;;;7361   			}
;;;7362   		
;;;7363   		}		
;;;7364   	}*/
;;;7365   
;;;7366   if(mess_find_unvol(MESS2BAT_HNDL))
004e96  20c8              MOVS     r0,#0xc8
004e98  f7fffffe          BL       mess_find_unvol
;;;7367   	{ 
;;;7368   	char i;
;;;7369   	
;;;7370   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7371   		{
;;;7372   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7373   			{
;;;7374   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004e9c  49e1              LDR      r1,|L1.21028|
004e9e  2200              MOVS     r2,#0                 ;7372
004ea0  b3a8              CBZ      r0,|L1.20238|
004ea2  4be1              LDR      r3,|L1.21032|
;;;7375   			}
;;;7376   		}
;;;7377   
;;;7378   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7379   		{
;;;7380   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7381   			{
;;;7382   			if(mess_data[1]&(1<<i))
004ea4  2401              MOVS     r4,#1
004ea6  6818              LDR      r0,[r3,#0]            ;7370  ; mess_data
004ea8  28c9              CMP      r0,#0xc9              ;7370
004eaa  d01c              BEQ      |L1.20198|
004eac  28ca              CMP      r0,#0xca              ;7378
004eae  d02f              BEQ      |L1.20240|
;;;7383   				{
;;;7384   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7385   				}
;;;7386   			else bat[i]._cnt_to_block=0;
;;;7387   			}
;;;7388   		}
;;;7389   	else 
;;;7390   	 	{
;;;7391   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004eb0  4610              MOV      r0,r2
                  |L1.20146|
;;;7392   			{
;;;7393   			bat[i]._cnt_to_block=0;
004eb2  eb000340          ADD      r3,r0,r0,LSL #1
004eb6  eb031300          ADD      r3,r3,r0,LSL #4
004eba  f8012023          STRB     r2,[r1,r3,LSL #2]
004ebe  f1000001          ADD      r0,r0,#1              ;7391
004ec2  b2c0              UXTB     r0,r0                 ;7391
004ec4  2802              CMP      r0,#2                 ;7391
004ec6  d3f4              BCC      |L1.20146|
                  |L1.20168|
;;;7394   			}
;;;7395   
;;;7396   		}
;;;7397   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004ec8  f04f0000          MOV      r0,#0
                  |L1.20172|
;;;7398   		{
;;;7399   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004ecc  eb000340          ADD      r3,r0,r0,LSL #1
004ed0  eb031300          ADD      r3,r3,r0,LSL #4
004ed4  f8115023          LDRB     r5,[r1,r3,LSL #2]
004ed8  2d14              CMP      r5,#0x14
004eda  d939              BLS      |L1.20304|
004edc  eb010383          ADD      r3,r1,r3,LSL #2
004ee0  f883403c          STRB     r4,[r3,#0x3c]
004ee4  e038              B        |L1.20312|
                  |L1.20198|
004ee6  f04f0000          MOV      r0,#0                 ;7372
                  |L1.20202|
004eea  eb000340          ADD      r3,r0,r0,LSL #1       ;7374
004eee  eb031500          ADD      r5,r3,r0,LSL #4       ;7374
004ef2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7374
004ef6  2b32              CMP      r3,#0x32              ;7374
004ef8  d203              BCS      |L1.20226|
004efa  f1030301          ADD      r3,r3,#1              ;7374
004efe  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7374
                  |L1.20226|
004f02  f1000001          ADD      r0,r0,#1              ;7372
004f06  b2c0              UXTB     r0,r0                 ;7372
004f08  2802              CMP      r0,#2                 ;7372
004f0a  d3ee              BCC      |L1.20202|
004f0c  e7dc              B        |L1.20168|
                  |L1.20238|
004f0e  e029              B        |L1.20324|
                  |L1.20240|
004f10  f04f0000          MOV      r0,#0                 ;7380
004f14  685e              LDR      r6,[r3,#4]            ;7382
                  |L1.20246|
004f16  fa04f300          LSL      r3,r4,r0              ;7382
004f1a  421e              TST      r6,r3                 ;7382
004f1c  d00c              BEQ      |L1.20280|
004f1e  eb000340          ADD      r3,r0,r0,LSL #1       ;7384
004f22  eb031500          ADD      r5,r3,r0,LSL #4       ;7384
004f26  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7384
004f2a  2b32              CMP      r3,#0x32              ;7384
004f2c  d20a              BCS      |L1.20292|
004f2e  f1030301          ADD      r3,r3,#1              ;7384
004f32  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7384
004f36  e005              B        |L1.20292|
                  |L1.20280|
004f38  eb000340          ADD      r3,r0,r0,LSL #1       ;7386
004f3c  eb031300          ADD      r3,r3,r0,LSL #4       ;7386
004f40  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7386
                  |L1.20292|
004f44  f1000001          ADD      r0,r0,#1              ;7380
004f48  b2c0              UXTB     r0,r0                 ;7380
004f4a  2802              CMP      r0,#2                 ;7380
004f4c  d3e3              BCC      |L1.20246|
004f4e  e7bb              B        |L1.20168|
                  |L1.20304|
;;;7400   		else bat[i]._rel_stat=0;
004f50  eb010383          ADD      r3,r1,r3,LSL #2
004f54  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20312|
004f58  f1000001          ADD      r0,r0,#1              ;7397
004f5c  b2c0              UXTB     r0,r0                 ;7397
004f5e  2802              CMP      r0,#2                 ;7397
004f60  d3b4              BCC      |L1.20172|
;;;7401   		}
;;;7402   
;;;7403   	}
;;;7404   
;;;7405   else 
;;;7406   	{
;;;7407   	char i;
;;;7408   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7409   		{
;;;7410   		bat[i]._cnt_to_block=0;
;;;7411   		bat[i]._rel_stat=0;
;;;7412   		}
;;;7413   
;;;7414   	}
;;;7415   
;;;7416   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7417   	{
;;;7418   	if(PARAM_BAT_ON)
;;;7419   		{
;;;7420   		char i;
;;;7421   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7422   			{
;;;7423   			if(mess_data[1]&(1<<i))
;;;7424   				{
;;;7425   				bat[i]._cnt_to_block=0;
;;;7426   				bat[i]._rel_stat=0;
;;;7427   				}
;;;7428   			}
;;;7429   		}
;;;7430   	} */
;;;7431   }
004f62  e754              B        |L1.19982|
                  |L1.20324|
004f64  f04f0000          MOV      r0,#0                 ;7408
                  |L1.20328|
004f68  eb000340          ADD      r3,r0,r0,LSL #1       ;7410
004f6c  eb031300          ADD      r3,r3,r0,LSL #4       ;7410
004f70  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7410
004f74  eb010383          ADD      r3,r1,r3,LSL #2       ;7411
004f78  f883203c          STRB     r2,[r3,#0x3c]         ;7411
004f7c  f1000001          ADD      r0,r0,#1              ;7408
004f80  b2c0              UXTB     r0,r0                 ;7408
004f82  2802              CMP      r0,#2                 ;7408
004f84  d3f0              BCC      |L1.20328|
004f86  e742              B        |L1.19982|
;;;7432   
                          ENDP

                  bat_drv PROC
;;;8070   //-----------------------------------------------
;;;8071   void bat_drv(char in)
004f88  e92d5ffc          PUSH     {r2-r12,lr}
;;;8072   {
004f8c  4605              MOV      r5,r0
;;;8073   unsigned short /*tempUS,*/tempUS_;
;;;8074   unsigned long tempUL,tempUL_;
;;;8075   unsigned short b_zar;
;;;8076   //static unsigned short time_cnt[2];
;;;8077   
;;;8078   
;;;8079   
;;;8080   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004f8e  49a7              LDR      r1,|L1.21036|
004f90  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004f94  b118              CBZ      r0,|L1.20382|
004f96  f1a00001          SUB      r0,r0,#1
004f9a  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20382|
;;;8081   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004f9e  4aa3              LDR      r2,|L1.21036|
004fa0  1d12              ADDS     r2,r2,#4
004fa2  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004fa6  b118              CBZ      r0,|L1.20400|
004fa8  f1a00001          SUB      r0,r0,#1
004fac  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20400|
;;;8082   
;;;8083   
;;;8084   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004fb0  eb050045          ADD      r0,r5,r5,LSL #1
004fb4  eb001305          ADD      r3,r0,r5,LSL #4
004fb8  489a              LDR      r0,|L1.21028|
004fba  eb000483          ADD      r4,r0,r3,LSL #2
004fbe  4b9c              LDR      r3,|L1.21040|
004fc0  f9b40008          LDRSH    r0,[r4,#8]
004fc4  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004fc8  2364              MOVS     r3,#0x64
004fca  42b0              CMP      r0,r6
004fcc  dd01              BLE      |L1.20434|
004fce  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20434|
;;;8085   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004fd2  2800              CMP      r0,#0
004fd4  da01              BGE      |L1.20442|
004fd6  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20442|
;;;8086   
;;;8087   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;8088        {
;;;8089        if(!cntrl_stat_blok_cnt_)
004fda  4894              LDR      r0,|L1.21036|
004fdc  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;8087
004fe0  38b4              SUBS     r0,r0,#0xb4
004fe2  2700              MOVS     r7,#0
004fe4  b14b              CBZ      r3,|L1.20474|
004fe6  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;8087
004fea  b133              CBZ      r3,|L1.20474|
004fec  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
004ff0  b1a3              CBZ      r3,|L1.20508|
;;;8090             {
;;;8091             cntrl_stat_blok_cnt_=600; 
;;;8092             cntrl_stat_blok_cnt_plus[in]=0;
;;;8093             cntrl_stat_blok_cnt_minus[in]=0;
;;;8094             }
;;;8095        else cntrl_stat_blok_cnt=3000;
004ff2  f64031b8          MOV      r1,#0xbb8
004ff6  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.20474|
;;;8096        }
;;;8097   cntrl_stat_blok_cnt=0;
004ffa  f8a07070          STRH     r7,[r0,#0x70]
;;;8098   
;;;8099   if(++(bat[in]._time_cnt)>=10)
004ffe  f894003e          LDRB     r0,[r4,#0x3e]
005002  1c40              ADDS     r0,r0,#1
005004  b2c0              UXTB     r0,r0
005006  f884003e          STRB     r0,[r4,#0x3e]
00500a  280a              CMP      r0,#0xa
00500c  d301              BCC      |L1.20498|
;;;8100   	{
;;;8101   	bat[in]._time_cnt=0;
00500e  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20498|
;;;8102   	//bat[in]._zar_cnt++;
;;;8103   	}
;;;8104   
;;;8105   if(main_10Hz_cnt==50)
005012  4e88              LDR      r6,|L1.21044|
005014  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005016  2832              CMP      r0,#0x32
005018  d009              BEQ      |L1.20526|
00501a  e017              B        |L1.20556|
                  |L1.20508|
00501c  f44f7316          MOV      r3,#0x258             ;8091
005020  f8a03072          STRH     r3,[r0,#0x72]         ;8091
005024  f8217015          STRH     r7,[r1,r5,LSL #1]     ;8092
005028  f8227015          STRH     r7,[r2,r5,LSL #1]     ;8093
00502c  e7e5              B        |L1.20474|
                  |L1.20526|
;;;8106   	{
;;;8107   	if(!bat[in]._rel_stat)
00502e  f894003c          LDRB     r0,[r4,#0x3c]
005032  b958              CBNZ     r0,|L1.20556|
;;;8108   		{
;;;8109   		
;;;8110   		if(bat[in]._Ub<80) 
005034  f9b40002          LDRSH    r0,[r4,#2]
005038  2850              CMP      r0,#0x50
00503a  da07              BGE      |L1.20556|
;;;8111   			{
;;;8112   			
;;;8113   			if(!(bat[in]._av&1))
00503c  f894003d          LDRB     r0,[r4,#0x3d]
005040  07c0              LSLS     r0,r0,#31
005042  d103              BNE      |L1.20556|
;;;8114   				{
;;;8115   				avar_bat_hndl(in,1);
005044  2101              MOVS     r1,#1
005046  4628              MOV      r0,r5
005048  f7fffffe          BL       avar_bat_hndl
                  |L1.20556|
;;;8116   				//if(in==0)plazma_bat++;
;;;8117   				}
;;;8118   			}				
;;;8119   
;;;8120   		}
;;;8121   	}
;;;8122   
;;;8123   if(main_10Hz_cnt>200)
00504c  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;8124   	{
;;;8125   	if(abs(bat[in]._Ib)>IKB) 
005050  4e79              LDR      r6,|L1.21048|
005052  28c8              CMP      r0,#0xc8              ;8123
005054  dd0f              BLE      |L1.20598|
005056  f9b40008          LDRSH    r0,[r4,#8]
00505a  f7fffffe          BL       abs
00505e  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005062  4288              CMP      r0,r1
005064  dd07              BLE      |L1.20598|
;;;8126   		{
;;;8127   		if((bat[in]._av&1))avar_bat_hndl(in,0);
005066  f894003d          LDRB     r0,[r4,#0x3d]
00506a  07c0              LSLS     r0,r0,#31
00506c  d003              BEQ      |L1.20598|
00506e  2100              MOVS     r1,#0
005070  4628              MOV      r0,r5
005072  f7fffffe          BL       avar_bat_hndl
                  |L1.20598|
;;;8128   		}
;;;8129   	}
;;;8130   
;;;8131   #ifdef APSENERGIA
;;;8132   //if(bat[in]._Ib>(-IKB))
;;;8133   
;;;8134   
;;;8135   #endif
;;;8136   
;;;8137   if(bat[in]._Ib>(-IKB))
005076  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
00507a  f9b40008          LDRSH    r0,[r4,#8]
00507e  4249              RSBS     r1,r1,#0
005080  4288              CMP      r0,r1
005082  dd10              BLE      |L1.20646|
;;;8138   	{
;;;8139   	if(bat[in]._cnt_wrk<10)
005084  7b60              LDRB     r0,[r4,#0xd]
005086  280a              CMP      r0,#0xa
005088  d20e              BCS      |L1.20648|
;;;8140   		{
;;;8141   		bat[in]._cnt_wrk++;
00508a  f1000001          ADD      r0,r0,#1
00508e  b2c0              UXTB     r0,r0
005090  7360              STRB     r0,[r4,#0xd]
;;;8142   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
005092  280a              CMP      r0,#0xa
005094  d306              BCC      |L1.20644|
005096  7ba0              LDRB     r0,[r4,#0xe]
005098  2800              CMP      r0,#0
00509a  d003              BEQ      |L1.20644|
;;;8143   			{
;;;8144   			bat[in]._wrk=0;
00509c  73a7              STRB     r7,[r4,#0xe]
;;;8145   			//beep_init(0x7L,'O');
;;;8146   			//wrk_mem_hndl(0);
;;;8147   			wrk_mem_hndl(in);
00509e  4628              MOV      r0,r5
0050a0  f7fffffe          BL       wrk_mem_hndl
                  |L1.20644|
0050a4  e134              B        |L1.21264|
                  |L1.20646|
0050a6  e0cd              B        |L1.21060|
                  |L1.20648|
0050a8  e0c8              B        |L1.21052|
0050aa  0000              DCW      0x0000
                  |L1.20652|
                          DCD      eb2_data_short
                  |L1.20656|
                          DCD      avt_stat
                  |L1.20660|
                          DCD      avt_stat_old
                  |L1.20664|
                          DCD      NUMAVT
                  |L1.20668|
0050bc  4176746f          DCB      "Avtomat #1 is OFF",0
0050c0  6d617420
0050c4  23312069
0050c8  73204f46
0050cc  4600    
0050ce  00                DCB      0
0050cf  00                DCB      0
                  |L1.20688|
0050d0  4176746f          DCB      "Avtomat #2 is OFF",0
0050d4  6d617420
0050d8  23322069
0050dc  73204f46
0050e0  4600    
0050e2  00                DCB      0
0050e3  00                DCB      0
                  |L1.20708|
0050e4  4176746f          DCB      "Avtomat #3 is OFF",0
0050e8  6d617420
0050ec  23332069
0050f0  73204f46
0050f4  4600    
0050f6  00                DCB      0
0050f7  00                DCB      0
                  |L1.20728|
0050f8  4176746f          DCB      "Avtomat #4 is OFF",0
0050fc  6d617420
005100  23342069
005104  73204f46
005108  4600    
00510a  00                DCB      0
00510b  00                DCB      0
                  |L1.20748|
00510c  4176746f          DCB      "Avtomat #5 is OFF",0
005110  6d617420
005114  23352069
005118  73204f46
00511c  4600    
00511e  00                DCB      0
00511f  00                DCB      0
                  |L1.20768|
005120  4176746f          DCB      "Avtomat #6 is OFF",0
005124  6d617420
005128  23362069
00512c  73204f46
005130  4600    
005132  00                DCB      0
005133  00                DCB      0
                  |L1.20788|
005134  4176746f          DCB      "Avtomat #7 is OFF",0
005138  6d617420
00513c  23372069
005140  73204f46
005144  4600    
005146  00                DCB      0
005147  00                DCB      0
                  |L1.20808|
005148  4176746f          DCB      "Avtomat #8 is OFF",0
00514c  6d617420
005150  23382069
005154  73204f46
005158  4600    
00515a  00                DCB      0
00515b  00                DCB      0
                  |L1.20828|
00515c  4176746f          DCB      "Avtomat #9 is OFF",0
005160  6d617420
005164  23392069
005168  73204f46
00516c  4600    
00516e  00                DCB      0
00516f  00                DCB      0
                  |L1.20848|
005170  4176746f          DCB      "Avtomat #1 is ON ",0
005174  6d617420
005178  23312069
00517c  73204f4e
005180  2000    
005182  00                DCB      0
005183  00                DCB      0
                  |L1.20868|
005184  4176746f          DCB      "Avtomat #2 is ON ",0
005188  6d617420
00518c  23322069
005190  73204f4e
005194  2000    
005196  00                DCB      0
005197  00                DCB      0
                  |L1.20888|
005198  4176746f          DCB      "Avtomat #3 is ON ",0
00519c  6d617420
0051a0  23332069
0051a4  73204f4e
0051a8  2000    
0051aa  00                DCB      0
0051ab  00                DCB      0
                  |L1.20908|
0051ac  4176746f          DCB      "Avtomat #4 is ON ",0
0051b0  6d617420
0051b4  23342069
0051b8  73204f4e
0051bc  2000    
0051be  00                DCB      0
0051bf  00                DCB      0
                  |L1.20928|
0051c0  4176746f          DCB      "Avtomat #5 is ON ",0
0051c4  6d617420
0051c8  23352069
0051cc  73204f4e
0051d0  2000    
0051d2  00                DCB      0
0051d3  00                DCB      0
                  |L1.20948|
0051d4  4176746f          DCB      "Avtomat #6 is ON ",0
0051d8  6d617420
0051dc  23362069
0051e0  73204f4e
0051e4  2000    
0051e6  00                DCB      0
0051e7  00                DCB      0
                  |L1.20968|
0051e8  4176746f          DCB      "Avtomat #7 is ON ",0
0051ec  6d617420
0051f0  23372069
0051f4  73204f4e
0051f8  2000    
0051fa  00                DCB      0
0051fb  00                DCB      0
                  |L1.20988|
0051fc  4176746f          DCB      "Avtomat #8 is ON ",0
005200  6d617420
005204  23382069
005208  73204f4e
00520c  2000    
00520e  00                DCB      0
00520f  00                DCB      0
                  |L1.21008|
005210  4176746f          DCB      "Avtomat #9 is ON ",0
005214  6d617420
005218  23392069
00521c  73204f4e
005220  2000    
005222  00                DCB      0
005223  00                DCB      0
                  |L1.21028|
                          DCD      bat
                  |L1.21032|
                          DCD      mess_data
                  |L1.21036|
                          DCD      ||area_number.25||+0xb4
                  |L1.21040|
                          DCD      IZMAX
                  |L1.21044|
                          DCD      main_10Hz_cnt
                  |L1.21048|
                          DCD      IKB
                  |L1.21052|
;;;8148   			//plazma++;
;;;8149   			}
;;;8150   		}
;;;8151   	else bat[in]._cnt_wrk=10;	
00523c  f04f000a          MOV      r0,#0xa
005240  7360              STRB     r0,[r4,#0xd]
005242  e065              B        |L1.21264|
                  |L1.21060|
;;;8152   	}	
;;;8153   
;;;8154   else if(bat[in]._Ib<(-IKB))
005244  da64              BGE      |L1.21264|
;;;8155   	{
;;;8156   	if(bat[in]._cnt_wrk)
005246  7b60              LDRB     r0,[r4,#0xd]
005248  b3f0              CBZ      r0,|L1.21192|
;;;8157   		{
;;;8158   		bat[in]._cnt_wrk--;
00524a  f1a00001          SUB      r0,r0,#1
00524e  b2c0              UXTB     r0,r0
005250  7360              STRB     r0,[r4,#0xd]
;;;8159   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005252  bbc8              CBNZ     r0,|L1.21192|
005254  7ba0              LDRB     r0,[r4,#0xe]
005256  bbb8              CBNZ     r0,|L1.21192|
;;;8160   			{
;;;8161   			bat[in]._wrk=1;
005258  f04f0001          MOV      r0,#1
00525c  73a0              STRB     r0,[r4,#0xe]
;;;8162   
;;;8163   				{
;;;8164   				char temp;
;;;8165   				signed short temp_temp;
;;;8166   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
00525e  48ff              LDR      r0,|L1.22108|
005260  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005262  f1000001          ADD      r0,r0,#1
005266  f0000007          AND      r0,r0,#7
00526a  eb040040          ADD      r0,r4,r0,LSL #1
00526e  8c00              LDRH     r0,[r0,#0x20]
005270  9000              STR      r0,[sp,#0]
;;;8167   			 
;;;8168   				temp=LPC_RTC->YEAR;
005272  4efb              LDR      r6,|L1.22112|
005274  8bb0              LDRH     r0,[r6,#0x1c]
005276  9001              STR      r0,[sp,#4]
;;;8169   				gran_char((signed char*)&temp,1,99);
005278  f04f0263          MOV      r2,#0x63
00527c  f04f0101          MOV      r1,#1
005280  a801              ADD      r0,sp,#4
005282  f7fffffe          BL       gran_char
;;;8170   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005286  f104041c          ADD      r4,r4,#0x1c
00528a  f89d0004          LDRB     r0,[sp,#4]
00528e  7620              STRB     r0,[r4,#0x18]
;;;8171   			
;;;8172   				temp=LPC_RTC->MONTH;
005290  7e30              LDRB     r0,[r6,#0x18]
005292  9001              STR      r0,[sp,#4]
;;;8173   				gran_char((signed char*)&temp,1,12);
005294  f04f020c          MOV      r2,#0xc
005298  f04f0101          MOV      r1,#1
00529c  a801              ADD      r0,sp,#4
00529e  f7fffffe          BL       gran_char
;;;8174   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0052a2  f89d0004          LDRB     r0,[sp,#4]
0052a6  7660              STRB     r0,[r4,#0x19]
;;;8175   			
;;;8176   				temp=LPC_RTC->DOM;
0052a8  7b30              LDRB     r0,[r6,#0xc]
0052aa  9001              STR      r0,[sp,#4]
;;;8177   				gran_char((signed char*)&temp,1,31);
0052ac  221f              MOVS     r2,#0x1f
0052ae  2101              MOVS     r1,#1
0052b0  a801              ADD      r0,sp,#4
0052b2  f7fffffe          BL       gran_char
;;;8178   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0052b6  f89d0004          LDRB     r0,[sp,#4]
0052ba  76a0              STRB     r0,[r4,#0x1a]
;;;8179   				
;;;8180   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0052bc  f89d0000          LDRB     r0,[sp,#0]
0052c0  76e0              STRB     r0,[r4,#0x1b]
;;;8181   
;;;8182   				temp=LPC_RTC->HOUR;
0052c2  7a30              LDRB     r0,[r6,#8]
0052c4  9001              STR      r0,[sp,#4]
;;;8183   				gran_char((signed char*)&temp,0,23);
0052c6  e000              B        |L1.21194|
                  |L1.21192|
0052c8  e022              B        |L1.21264|
                  |L1.21194|
0052ca  2217              MOVS     r2,#0x17
0052cc  2100              MOVS     r1,#0
0052ce  a801              ADD      r0,sp,#4
0052d0  f7fffffe          BL       gran_char
;;;8184   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0052d4  f89d0004          LDRB     r0,[sp,#4]
0052d8  7720              STRB     r0,[r4,#0x1c]
;;;8185                  	
;;;8186   				temp=LPC_RTC->MIN;
0052da  7930              LDRB     r0,[r6,#4]
0052dc  9001              STR      r0,[sp,#4]
;;;8187   				gran_char((signed char*)&temp,0,59);
0052de  223b              MOVS     r2,#0x3b
0052e0  2100              MOVS     r1,#0
0052e2  a801              ADD      r0,sp,#4
0052e4  f7fffffe          BL       gran_char
;;;8188   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0052e8  f89d0004          LDRB     r0,[sp,#4]
0052ec  7760              STRB     r0,[r4,#0x1d]
;;;8189   	          
;;;8190   				temp=LPC_RTC->SEC;
0052ee  7830              LDRB     r0,[r6,#0]
0052f0  9001              STR      r0,[sp,#4]
;;;8191   				gran_char((signed char*)&temp,0,59);
0052f2  223b              MOVS     r2,#0x3b
0052f4  2100              MOVS     r1,#0
0052f6  a801              ADD      r0,sp,#4
0052f8  f7fffffe          BL       gran_char
;;;8192   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
0052fc  f89d0004          LDRB     r0,[sp,#4]
005300  77a0              STRB     r0,[r4,#0x1e]
;;;8193   			
;;;8194   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005302  f89d0001          LDRB     r0,[sp,#1]
005306  77e0              STRB     r0,[r4,#0x1f]
;;;8195   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005308  8027              STRH     r7,[r4,#0]
;;;8196   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
00530a  8067              STRH     r7,[r4,#2]
00530c  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21264|
;;;8197   				}
;;;8198   	
;;;8199   			}
;;;8200   
;;;8201   		}
;;;8202   	else bat[in]._cnt_wrk=0;	 
;;;8203   	
;;;8204   	}					
;;;8205   
;;;8206   /*
;;;8207   if(Ibat>=(-IKB))
;;;8208   	{
;;;8209   	if(cnt_wrk<10)
;;;8210   		{
;;;8211   		cnt_wrk++;
;;;8212   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;8213   			{
;;;8214   			wrk=wrkOFF;
;;;8215   			//beep_init(0x7L,'O');
;;;8216   			wrk_mem_hndl(ibat_integr);
;;;8217   			}
;;;8218   		}
;;;8219   	else cnt_wrk=10;	
;;;8220   	}	
;;;8221   
;;;8222   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8223   	{
;;;8224   	if(cnt_wrk)
;;;8225   		{
;;;8226   		cnt_wrk--;
;;;8227   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8228   			{
;;;8229   			char temp;
;;;8230   			signed short temp_temp;
;;;8231   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8232   			 
;;;8233   			wrk=wrkON;
;;;8234   			
;;;8235   			temp=_year;
;;;8236   			gran_char(&temp,1,99);
;;;8237   			*((char*)(&(wrk_date[0])))=temp;
;;;8238   			
;;;8239   			temp=_month;
;;;8240   			gran_char(&temp,1,12);
;;;8241   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8242   			
;;;8243   			temp=_date;
;;;8244   			gran_char(&temp,1,31);
;;;8245   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8246   				
;;;8247   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8248   
;;;8249   			temp=_hour;
;;;8250   			gran_char(&temp,0,23);
;;;8251   			*((char*)(&(wrk_date[1])))=temp;
;;;8252                  
;;;8253   			temp=_min;
;;;8254   			gran_char(&temp,0,59);
;;;8255   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8256   	          
;;;8257   			temp=_sec;
;;;8258   			gran_char(&temp,0,59);
;;;8259   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8260   			
;;;8261   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8262   
;;;8263   			
;;;8264   			//beep_init(0xFL,'O'); 
;;;8265   			ibat_integr=0;
;;;8266   			ibat_integr_=0;
;;;8267   			}
;;;8268   		}
;;;8269   	else cnt_wrk=0;	 
;;;8270   	
;;;8271   	}
;;;8272   if(wrk==wrkON)
;;;8273   	{
;;;8274   	ibat_integr_+=-Ibat;
;;;8275   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8276   		{
;;;8277   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8278   		ibat_integr++;
;;;8279   		}
;;;8280   	}
;;;8281   
;;;8282   */
;;;8283   
;;;8284   
;;;8285   /*if(bat[in]._cnt_to_block)
;;;8286   	{
;;;8287   	bat[in]._cnt_to_block--;
;;;8288   	if(!(bat[in]._cnt_to_block))
;;;8289   		{
;;;8290   		//bat[in]._rel_stat=1;
;;;8291   		}
;;;8292   	}
;;;8293   */
;;;8294   
;;;8295   
;;;8296   
;;;8297   
;;;8298   //unsigned int tempUI,tempUI_;
;;;8299   //unsigned int b_zar; 
;;;8300   //char i;
;;;8301   //Ibat[0]=5000;                     
;;;8302   
;;;8303   
;;;8304                               
;;;8305   if(bat[in]._time_cnt==0)
;;;8306   	{
;;;8307   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8308   	
;;;8309   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005310  f64848a0          MOV      r8,#0x8ca0
005314  f894003e          LDRB     r0,[r4,#0x3e]         ;8305
005318  bba8              CBNZ     r0,|L1.21382|
00531a  f9b41008          LDRSH    r1,[r4,#8]            ;8307
00531e  6960              LDR      r0,[r4,#0x14]         ;8307
005320  4408              ADD      r0,r0,r1              ;8307
005322  6160              STR      r0,[r4,#0x14]         ;8307
;;;8310   		{
;;;8311   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8312   		else tempUS_=BAT_C_REAL[in];
;;;8313   		
;;;8314   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005324  f8df933c          LDR      r9,|L1.22116|
005328  f8dfa33c          LDR      r10,|L1.22120|
00532c  f2455b55          MOV      r11,#0x5555           ;8311
005330  4540              CMP      r0,r8                 ;8309
005332  db29              BLT      |L1.21384|
005334  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8311
005338  4558              CMP      r0,r11                ;8311
00533a  d103              BNE      |L1.21316|
00533c  48cb              LDR      r0,|L1.22124|
00533e  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8311
005342  e001              B        |L1.21320|
                  |L1.21316|
005344  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8312
                  |L1.21320|
005348  f8390015          LDRH     r0,[r9,r5,LSL #1]
00534c  f7fffffe          BL       lc640_read_int
005350  b280              UXTH     r0,r0
;;;8315   
;;;8316   		if(b_zar<(tempUS_/**10*/))
005352  42b0              CMP      r0,r6
005354  d20e              BCS      |L1.21364|
;;;8317   			{
;;;8318   			bat[in]._zar_cnt-=AH_CONSTANT;
005356  6961              LDR      r1,[r4,#0x14]
005358  f5a14100          SUB      r1,r1,#0x8000
00535c  f5a1614a          SUB      r1,r1,#0xca0
005360  6161              STR      r1,[r4,#0x14]
;;;8319   
;;;8320   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005362  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005366  f1000001          ADD      r0,r0,#1
00536a  b201              SXTH     r1,r0
00536c  4610              MOV      r0,r2
00536e  f7fffffe          BL       lc640_write_int
005372  e032              B        |L1.21466|
                  |L1.21364|
;;;8321   			}
;;;8322   		else if(b_zar>(tempUS_/**10*/))  
005374  d931              BLS      |L1.21466|
;;;8323   			{
;;;8324   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005376  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00537a  b231              SXTH     r1,r6
00537c  f7fffffe          BL       lc640_write_int
;;;8325   			bat[in]._zar_cnt=AH_CONSTANT;
005380  f8c48014          STR      r8,[r4,#0x14]
005384  e029              B        |L1.21466|
                  |L1.21382|
005386  e055              B        |L1.21556|
                  |L1.21384|
;;;8326   
;;;8327   			}
;;;8328   
;;;8329   		}
;;;8330   
;;;8331   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005388  49b9              LDR      r1,|L1.22128|
00538a  4288              CMP      r0,r1
00538c  dc25              BGT      |L1.21466|
;;;8332   		{
;;;8333   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
00538e  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005392  4558              CMP      r0,r11
005394  d103              BNE      |L1.21406|
005396  48b5              LDR      r0,|L1.22124|
005398  f8306015          LDRH     r6,[r0,r5,LSL #1]
00539c  e001              B        |L1.21410|
                  |L1.21406|
;;;8334   		else tempUS_=BAT_C_REAL[in];
00539e  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21410|
;;;8335   		
;;;8336   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053a2  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053a6  f7fffffe          BL       lc640_read_int
0053aa  b280              UXTH     r0,r0
;;;8337   
;;;8338   		if(b_zar>tempUS_)
0053ac  42b0              CMP      r0,r6
0053ae  d905              BLS      |L1.21436|
;;;8339   			{
;;;8340   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0053b0  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0053b4  b231              SXTH     r1,r6
0053b6  f7fffffe          BL       lc640_write_int
;;;8341   			b_zar=tempUS_;
0053ba  4630              MOV      r0,r6
                  |L1.21436|
;;;8342   			}
;;;8343   		if(b_zar)
0053bc  b158              CBZ      r0,|L1.21462|
;;;8344   			{
;;;8345   			bat[in]._zar_cnt+=AH_CONSTANT;
0053be  6961              LDR      r1,[r4,#0x14]
0053c0  4441              ADD      r1,r1,r8
0053c2  6161              STR      r1,[r4,#0x14]
;;;8346   
;;;8347   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0053c4  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0053c8  f1a00001          SUB      r0,r0,#1
0053cc  b201              SXTH     r1,r0
0053ce  4610              MOV      r0,r2
0053d0  f7fffffe          BL       lc640_write_int
0053d4  e001              B        |L1.21466|
                  |L1.21462|
;;;8348   			}
;;;8349   		else 
;;;8350   			{
;;;8351   			bat[in]._zar_cnt=-AH_CONSTANT;
0053d6  48a6              LDR      r0,|L1.22128|
0053d8  6160              STR      r0,[r4,#0x14]
                  |L1.21466|
;;;8352   			}
;;;8353   
;;;8354   		}
;;;8355   
;;;8356   			
;;;8357   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053da  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053de  f7fffffe          BL       lc640_read_int
0053e2  4601              MOV      r1,r0
;;;8358   	
;;;8359   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0053e4  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0053e8  4558              CMP      r0,r11
0053ea  d102              BNE      |L1.21490|
0053ec  489f              LDR      r0,|L1.22124|
0053ee  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21490|
;;;8360   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8361   		           	
;;;8362   	tempUL*=1000L;
0053f2  f44f727a          MOV      r2,#0x3e8
0053f6  fb01f102          MUL      r1,r1,r2
;;;8363   
;;;8364   
;;;8365   	if(tempUL_==0) tempUL=0;
0053fa  b158              CBZ      r0,|L1.21524|
;;;8366   	else tempUL/=tempUL_;
0053fc  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21504|
;;;8367   
;;;8368   	tempUL/=10L;
005400  f04f010a          MOV      r1,#0xa
005404  fbb0f0f1          UDIV     r0,r0,r1
;;;8369   
;;;8370   	bat[in]._zar=(unsigned short)tempUL;
005408  8220              STRH     r0,[r4,#0x10]
;;;8371   
;;;8372   	if(BAT_TYPE==1)
00540a  489a              LDR      r0,|L1.22132|
00540c  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
00540e  2801              CMP      r0,#1
005410  d003              BEQ      |L1.21530|
005412  e009              B        |L1.21544|
                  |L1.21524|
005414  f04f0000          MOV      r0,#0                 ;8365
005418  e7f2              B        |L1.21504|
                  |L1.21530|
;;;8373   		{
;;;8374   		bat[in]._zar=lakb[in]._s_o_c;
00541a  4997              LDR      r1,|L1.22136|
00541c  eb050085          ADD      r0,r5,r5,LSL #2
005420  eb011000          ADD      r0,r1,r0,LSL #4
005424  8a40              LDRH     r0,[r0,#0x12]
005426  8220              STRH     r0,[r4,#0x10]
                  |L1.21544|
;;;8375   		}
;;;8376   	
;;;8377   	gran((signed short*)&bat[in]._zar,0,100);
005428  f1040010          ADD      r0,r4,#0x10
00542c  2264              MOVS     r2,#0x64
00542e  2100              MOVS     r1,#0
005430  f7fffffe          BL       gran
                  |L1.21556|
;;;8378        }
;;;8379   
;;;8380   
;;;8381   //Подсчет тока разряда батареи      
;;;8382   if(bat[in]._wrk==1)
005434  7ba0              LDRB     r0,[r4,#0xe]
005436  2801              CMP      r0,#1
005438  d113              BNE      |L1.21602|
;;;8383   	{
;;;8384   	if(bat[in]._Iintegr<36000)
00543a  8ba0              LDRH     r0,[r4,#0x1c]
00543c  4540              CMP      r0,r8
00543e  d20f              BCS      |L1.21600|
;;;8385   		{          
;;;8386   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005440  f9b40008          LDRSH    r0,[r4,#8]
005444  f7fffffe          BL       abs
005448  8ba1              LDRH     r1,[r4,#0x1c]
00544a  4408              ADD      r0,r0,r1
00544c  b280              UXTH     r0,r0
00544e  83a0              STRH     r0,[r4,#0x1c]
;;;8387   		if(bat[in]._Iintegr>=36000)
005450  4540              CMP      r0,r8
005452  d306              BCC      |L1.21602|
;;;8388   			{
;;;8389   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005454  83a7              STRH     r7,[r4,#0x1c]
;;;8390   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
005456  8be0              LDRH     r0,[r4,#0x1e]
005458  f1000001          ADD      r0,r0,#1
00545c  83e0              STRH     r0,[r4,#0x1e]
00545e  e000              B        |L1.21602|
                  |L1.21600|
;;;8391   			}
;;;8392   		}
;;;8393   	else 
;;;8394   		{
;;;8395   		bat[in]._Iintegr=0;
005460  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21602|
;;;8396   		}	
;;;8397   	} 
;;;8398   	    
;;;8399   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8400   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
005462  4e86              LDR      r6,|L1.22140|
005464  4986              LDR      r1,|L1.22144|
005466  f8df921c          LDR      r9,|L1.22148|
00546a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00546e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
005472  4288              CMP      r0,r1
005474  dd02              BLE      |L1.21628|
005476  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00547a  b380              CBZ      r0,|L1.21726|
                  |L1.21628|
;;;8401   	{
;;;8402   	bat[in]._sign_temper_cnt++;
;;;8403   	}
;;;8404   else 
;;;8405   	{
;;;8406   	bat[in]._sign_temper_cnt--;
00547c  f8b40040          LDRH     r0,[r4,#0x40]
005480  f1a00001          SUB      r0,r0,#1
005484  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21640|
;;;8407   	}
;;;8408   #else
;;;8409   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8410   	{
;;;8411   	bat[in]._sign_temper_cnt++;
;;;8412   	}
;;;8413   else 
;;;8414   	{
;;;8415   	bat[in]._sign_temper_cnt--;
;;;8416   	}
;;;8417   #endif
;;;8418   gran(&bat[in]._sign_temper_cnt,0,600);
005488  f44f7b16          MOV      r11,#0x258
00548c  f1040040          ADD      r0,r4,#0x40
005490  465a              MOV      r2,r11
005492  2100              MOVS     r1,#0
005494  f7fffffe          BL       gran
;;;8419   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
005498  f9b40040          LDRSH    r0,[r4,#0x40]
00549c  f2402a4e          MOV      r10,#0x24e
0054a0  4550              CMP      r0,r10
0054a2  db05              BLT      |L1.21680|
0054a4  f894103f          LDRB     r1,[r4,#0x3f]
0054a8  f0410101          ORR      r1,r1,#1
0054ac  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21680|
;;;8420   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0054b0  280a              CMP      r0,#0xa
0054b2  dc05              BGT      |L1.21696|
0054b4  f894003f          LDRB     r0,[r4,#0x3f]
0054b8  f0200001          BIC      r0,r0,#1
0054bc  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21696|
;;;8421   
;;;8422   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0054c0  f894003f          LDRB     r0,[r4,#0x3f]
0054c4  07c1              LSLS     r1,r0,#31
0054c6  d005              BEQ      |L1.21716|
0054c8  06c0              LSLS     r0,r0,#27
0054ca  d403              BMI      |L1.21716|
0054cc  2101              MOVS     r1,#1
0054ce  4628              MOV      r0,r5
0054d0  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21716|
;;;8423   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0054d4  f894003f          LDRB     r0,[r4,#0x3f]
0054d8  07c1              LSLS     r1,r0,#31
0054da  d008              BEQ      |L1.21742|
0054dc  e00d              B        |L1.21754|
                  |L1.21726|
0054de  e7ff              B        |L1.21728|
                  |L1.21728|
0054e0  f8b40040          LDRH     r0,[r4,#0x40]         ;8402
0054e4  f1000001          ADD      r0,r0,#1              ;8402
0054e8  f8a40040          STRH     r0,[r4,#0x40]         ;8402
0054ec  e7cc              B        |L1.21640|
                  |L1.21742|
0054ee  06c0              LSLS     r0,r0,#27
0054f0  d503              BPL      |L1.21754|
0054f2  2100              MOVS     r1,#0
0054f4  4628              MOV      r0,r5
0054f6  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21754|
;;;8424   
;;;8425   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
0054fa  f894003f          LDRB     r0,[r4,#0x3f]
0054fe  07c1              LSLS     r1,r0,#31
005500  d004              BEQ      |L1.21772|
005502  f0400010          ORR      r0,r0,#0x10
005506  f884003f          STRB     r0,[r4,#0x3f]
00550a  e003              B        |L1.21780|
                  |L1.21772|
;;;8426   else 								bat[in]._temper_stat&=~(1<<4);
00550c  f0200010          BIC      r0,r0,#0x10
005510  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21780|
;;;8427   
;;;8428   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8429   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005514  495c              LDR      r1,|L1.22152|
005516  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00551a  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
00551e  4288              CMP      r0,r1
005520  dd02              BLE      |L1.21800|
005522  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005526  b3d0              CBZ      r0,|L1.21918|
                  |L1.21800|
;;;8430   	{
;;;8431   	bat[in]._max_temper_cnt++;
;;;8432   	}
;;;8433   else 
;;;8434   	{
;;;8435   	bat[in]._max_temper_cnt--;
005528  f8b40042          LDRH     r0,[r4,#0x42]
00552c  f1a00001          SUB      r0,r0,#1
005530  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21812|
;;;8436   	}
;;;8437   #else
;;;8438   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8439   	{
;;;8440   	bat[in]._max_temper_cnt++;
;;;8441   	}
;;;8442   else 
;;;8443   	{
;;;8444   	bat[in]._max_temper_cnt--;
;;;8445   	}
;;;8446   #endif
;;;8447   
;;;8448   gran(&bat[in]._max_temper_cnt,0,600);
005534  f1040042          ADD      r0,r4,#0x42
005538  465a              MOV      r2,r11
00553a  2100              MOVS     r1,#0
00553c  f7fffffe          BL       gran
;;;8449   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005540  f9b40042          LDRSH    r0,[r4,#0x42]
005544  4550              CMP      r0,r10
005546  db05              BLT      |L1.21844|
005548  f894103f          LDRB     r1,[r4,#0x3f]
00554c  f0410102          ORR      r1,r1,#2
005550  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21844|
;;;8450   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005554  280a              CMP      r0,#0xa
005556  dc05              BGT      |L1.21860|
005558  f894003f          LDRB     r0,[r4,#0x3f]
00555c  f0200002          BIC      r0,r0,#2
005560  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21860|
;;;8451   
;;;8452   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005564  f894003f          LDRB     r0,[r4,#0x3f]
005568  0781              LSLS     r1,r0,#30
00556a  d505              BPL      |L1.21880|
00556c  0680              LSLS     r0,r0,#26
00556e  d403              BMI      |L1.21880|
005570  2103              MOVS     r1,#3
005572  4628              MOV      r0,r5
005574  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21880|
;;;8453   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005578  f894003f          LDRB     r0,[r4,#0x3f]
00557c  0781              LSLS     r1,r0,#30
00557e  d405              BMI      |L1.21900|
005580  0680              LSLS     r0,r0,#26
005582  d503              BPL      |L1.21900|
005584  2102              MOVS     r1,#2
005586  4628              MOV      r0,r5
005588  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21900|
;;;8454   
;;;8455   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
00558c  f894003f          LDRB     r0,[r4,#0x3f]
005590  0781              LSLS     r1,r0,#30
005592  d50c              BPL      |L1.21934|
005594  f0400020          ORR      r0,r0,#0x20
005598  f884003f          STRB     r0,[r4,#0x3f]
00559c  e00b              B        |L1.21942|
                  |L1.21918|
00559e  e7ff              B        |L1.21920|
                  |L1.21920|
0055a0  f8b40042          LDRH     r0,[r4,#0x42]         ;8431
0055a4  f1000001          ADD      r0,r0,#1              ;8431
0055a8  f8a40042          STRH     r0,[r4,#0x42]         ;8431
0055ac  e7c2              B        |L1.21812|
                  |L1.21934|
;;;8456   else 								bat[in]._temper_stat&=~(1<<5);
0055ae  f0200020          BIC      r0,r0,#0x20
0055b2  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21942|
;;;8457   
;;;8458   //Подсчет наработки батареи
;;;8459   if(bat[in]._resurs_cnt<36000)
0055b6  6c60              LDR      r0,[r4,#0x44]
0055b8  4540              CMP      r0,r8
0055ba  da12              BGE      |L1.21986|
;;;8460   	{               
;;;8461   	bat[in]._resurs_cnt++;
0055bc  f1000001          ADD      r0,r0,#1
0055c0  6460              STR      r0,[r4,#0x44]
;;;8462   	if(bat[in]._resurs_cnt>=36000)
0055c2  4540              CMP      r0,r8
0055c4  db0e              BLT      |L1.21988|
;;;8463   		{
;;;8464   		bat[in]._resurs_cnt=0;
0055c6  6467              STR      r7,[r4,#0x44]
;;;8465   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0055c8  4c30              LDR      r4,|L1.22156|
0055ca  f8340015          LDRH     r0,[r4,r5,LSL #1]
0055ce  f7fffffe          BL       lc640_read_int
0055d2  1c40              ADDS     r0,r0,#1
0055d4  b201              SXTH     r1,r0
0055d6  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0055da  e8bd5ffc          POP      {r2-r12,lr}
0055de  f7ffbffe          B.W      lc640_write_int
                  |L1.21986|
;;;8466   		}
;;;8467   	}
;;;8468   else bat[in]._resurs_cnt=0;
0055e2  6467              STR      r7,[r4,#0x44]
                  |L1.21988|
;;;8469   
;;;8470   
;;;8471   #ifndef UKU_220_V2
;;;8472   #ifndef UKU_GLONASS
;;;8473   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8474   //#ifndef UKU_6U
;;;8475   //#ifndef UKU_220
;;;8476   if(UBM_AV)
;;;8477        {
;;;8478        signed short temp_SS;
;;;8479   #ifdef UKU_220
;;;8480   temp_SS=bat[in]._Ub/2;
;;;8481   #else
;;;8482        if(U0B<600)
;;;8483             {
;;;8484   
;;;8485             temp_SS=bat[in]._Ub/4;
;;;8486             }
;;;8487        else temp_SS=bat[in]._Ub/5;
;;;8488   	
;;;8489   	temp_SS+=temp_SS;     
;;;8490   #endif
;;;8491        temp_SS-=(bat[in]._Ubm);
;;;8492   
;;;8493        temp_SS=abs(temp_SS);
;;;8494   
;;;8495        temp_SS*=10;
;;;8496   
;;;8497        temp_SS/=12;
;;;8498   
;;;8499        bat[in]._dUbm=temp_SS;
;;;8500   
;;;8501   
;;;8502        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8503   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8504   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8505   		(!(bat[in]._av & 2))  )
;;;8506   		{
;;;8507   		bat[in]._cnt_as++;
;;;8508   		if(bat[in]._cnt_as==3000)
;;;8509   			{
;;;8510   			avar_bat_as_hndl(in,1);
;;;8511   			}
;;;8512   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8513   		}
;;;8514   	else 
;;;8515   		{
;;;8516   		if(bat[in]._cnt_as)
;;;8517   			{
;;;8518   			bat[in]._cnt_as--;
;;;8519   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8520   			}
;;;8521   		}
;;;8522        
;;;8523        }
;;;8524   //#endif 
;;;8525   #endif 
;;;8526   #endif
;;;8527   #endif
;;;8528   
;;;8529   }
0055e4  e8bd9ffc          POP      {r2-r12,pc}
;;;8530   
                          ENDP

                  bat_hndl_zvu PROC
;;;8532   //-----------------------------------------------
;;;8533   void bat_hndl_zvu(void)
0055e8  e92d4ff0          PUSH     {r4-r11,lr}
;;;8534   {
0055ec  b089              SUB      sp,sp,#0x24
;;;8535   char i;
;;;8536   short bat_hndl_i_temp;
;;;8537   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0055ee  f04f021c          MOV      r2,#0x1c
0055f2  4927              LDR      r1,|L1.22160|
0055f4  4668              MOV      r0,sp
0055f6  f7fffffe          BL       __aeabi_memcpy4
;;;8538   
;;;8539   //Ib_ips_termokompensat=-17000;
;;;8540    
;;;8541   if(bat_hndl_zvu_init==0)
0055fa  4c26              LDR      r4,|L1.22164|
;;;8542   	{
;;;8543   	//Инициализация при включении системы
;;;8544   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8545   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
0055fc  2564              MOVS     r5,#0x64
;;;8546   	bat_hndl_zvu_Q*=10000L;
;;;8547   
;;;8548   	bat_hndl_zvu_init=1;
;;;8549   	}
;;;8550   else 
;;;8551   	{
;;;8552   	if(Ib_ips_termokompensat<-IKB)
;;;8553   		{
;;;8554   		bat_hndl_i_vector=0;
;;;8555   		bat_hndl_i_zar_price=0L;
;;;8556   			
;;;8557   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8558   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8559   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8560   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8561   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8562   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8563   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8564   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8565   		
;;;8566   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8567   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8568   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8569   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8570   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8571   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8572   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8573   
;;;8574   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8575   		for(i=0;i<7;i++)
;;;8576   			{
;;;8577   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8578   				{
;;;8579   				break;
;;;8580   				}
;;;8581   			}
;;;8582   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8583   		 else if((i>=1)&&(i<7))
;;;8584   		 	{
;;;8585   			short i1,i2;
;;;8586   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8587   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8588   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8589   			bat_hndl_t_razr*=(long)i1;
;;;8590   			bat_hndl_t_razr/=(long)i2;
;;;8591   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8592   			}
;;;8593   		else if(i>=7)
;;;8594   			{
;;;8595   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8596   			}
;;;8597   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
0055fe  f8df8098          LDR      r8,|L1.22168|
005602  7a60              LDRB     r0,[r4,#9]            ;8541  ; bat_hndl_zvu_init
005604  2700              MOVS     r7,#0                 ;8541
005606  f04f0901          MOV      r9,#1                 ;8548
00560a  f1040680          ADD      r6,r4,#0x80           ;8544
00560e  2800              CMP      r0,#0                 ;8541
005610  d07d              BEQ      |L1.22286|
005612  4923              LDR      r1,|L1.22176|
005614  4821              LDR      r0,|L1.22172|
005616  f9b12000          LDRSH    r2,[r1,#0]            ;8552  ; IKB
00561a  4631              MOV      r1,r6                 ;8544
00561c  f9b00000          LDRSH    r0,[r0,#0]            ;8552  ; Ib_ips_termokompensat
005620  4253              RSBS     r3,r2,#0              ;8552
005622  6d89              LDR      r1,[r1,#0x58]         ;8544
005624  4298              CMP      r0,r3                 ;8552
005626  da73              BGE      |L1.22288|
005628  72e7              STRB     r7,[r4,#0xb]          ;8554
00562a  60f7              STR      r7,[r6,#0xc]          ;8555  ; bat_hndl_i_zar_price
00562c  f1c00000          RSB      r0,r0,#0              ;8557
005630  b200              SXTH     r0,r0                 ;8557
005632  8030              STRH     r0,[r6,#0]            ;8557
005634  9008              STR      r0,[sp,#0x20]         ;8557
005636  481b              LDR      r0,|L1.22180|
005638  4a1b              LDR      r2,|L1.22184|
00563a  8800              LDRH     r0,[r0,#0]            ;8558  ; BAT_C_POINT_1_6
00563c  eb000040          ADD      r0,r0,r0,LSL #1       ;8558
005640  ea4f0040          LSL      r0,r0,#1              ;8558
005644  fa0ffb80          SXTH     r11,r0                ;8558
005648  4818              LDR      r0,|L1.22188|
00564a  8800              LDRH     r0,[r0,#0]            ;8559  ; BAT_C_POINT_1_2
00564c  ea4f0040          LSL      r0,r0,#1              ;8559
005650  b203              SXTH     r3,r0                 ;8559
005652  4817              LDR      r0,|L1.22192|
005654  f9b0c000          LDRSH    r12,[r0,#0]           ;8560  ; BAT_C_POINT_1
005658  4816              LDR      r0,|L1.22196|
00565a  e02d              B        |L1.22200|
                  |L1.22108|
                          DCD      bat_u_old_cnt
                  |L1.22112|
                          DCD      0x40024020
                  |L1.22116|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22120|
                          DCD      BAT_C_REAL
                  |L1.22124|
                          DCD      BAT_C_NOM
                  |L1.22128|
                          DCD      0xffff7360
                  |L1.22132|
                          DCD      BAT_TYPE
                  |L1.22136|
                          DCD      lakb
                  |L1.22140|
                          DCD      t_ext
                  |L1.22144|
                          DCD      TBATSIGN
                  |L1.22148|
                          DCD      ND_EXT
                  |L1.22152|
                          DCD      TBATMAX
                  |L1.22156|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22160|
                          DCD      ||area_number.19||+0x20
                  |L1.22164|
                          DCD      ||area_number.25||
                  |L1.22168|
                          DCD      0x000f4240
                  |L1.22172|
                          DCD      Ib_ips_termokompensat
                  |L1.22176|
                          DCD      IKB
                  |L1.22180|
                          DCD      BAT_C_POINT_1_6
                  |L1.22184|
                          DCD      ||.bss||+0x44c
                  |L1.22188|
                          DCD      BAT_C_POINT_1_2
                  |L1.22192|
                          DCD      BAT_C_POINT_1
                  |L1.22196|
                          DCD      BAT_C_POINT_3
                  |L1.22200|
0056b8  f9b00000          LDRSH    r0,[r0,#0]            ;8561  ; BAT_C_POINT_3
0056bc  f04f0903          MOV      r9,#3                 ;8561
0056c0  fb90f0f9          SDIV     r0,r0,r9              ;8561
0056c4  b200              SXTH     r0,r0                 ;8561
0056c6  9007              STR      r0,[sp,#0x1c]         ;8561
0056c8  48ff              LDR      r0,|L1.23240|
0056ca  f04f0905          MOV      r9,#5                 ;8562
0056ce  f9b00000          LDRSH    r0,[r0,#0]            ;8562  ; BAT_C_POINT_5
0056d2  fb90f0f9          SDIV     r0,r0,r9              ;8562
0056d6  fa0ff980          SXTH     r9,r0                 ;8562
0056da  48fc              LDR      r0,|L1.23244|
0056dc  f9b0a000          LDRSH    r10,[r0,#0]           ;8563  ; BAT_C_POINT_10
0056e0  f04f000a          MOV      r0,#0xa               ;8563
0056e4  fb9af0f0          SDIV     r0,r10,r0             ;8563
0056e8  fa0ffe80          SXTH     lr,r0                 ;8563
0056ec  48f8              LDR      r0,|L1.23248|
0056ee  f04f0a14          MOV      r10,#0x14             ;8564
0056f2  f9b00000          LDRSH    r0,[r0,#0]            ;8564  ; BAT_C_POINT_20
0056f6  fb90f0fa          SDIV     r0,r0,r10             ;8564
0056fa  fa0ffa80          SXTH     r10,r0                ;8564
0056fe  48f5              LDR      r0,|L1.23252|
005700  f9b00000          LDRSH    r0,[r0,#0]            ;8566  ; BAT_K_OLD
005704  fb0bfb00          MUL      r11,r11,r0            ;8566
005708  fb9bfbf5          SDIV     r11,r11,r5            ;8566
00570c  e001              B        |L1.22290|
                  |L1.22286|
00570e  e04e              B        |L1.22446|
                  |L1.22288|
005710  e082              B        |L1.22552|
                  |L1.22290|
005712  f8a2b000          STRH     r11,[r2,#0]           ;8566
005716  fb03f300          MUL      r3,r3,r0              ;8567
00571a  fb93f3f5          SDIV     r3,r3,r5              ;8567
00571e  8053              STRH     r3,[r2,#2]            ;8567
005720  fb0cfc00          MUL      r12,r12,r0            ;8568
005724  fb9cf3f5          SDIV     r3,r12,r5             ;8568
005728  8093              STRH     r3,[r2,#4]            ;8568
00572a  9b07              LDR      r3,[sp,#0x1c]         ;8569
00572c  fb03f300          MUL      r3,r3,r0              ;8569
005730  fb93f3f5          SDIV     r3,r3,r5              ;8569
005734  80d3              STRH     r3,[r2,#6]            ;8569
005736  fb09f900          MUL      r9,r9,r0              ;8570
00573a  fb99f3f5          SDIV     r3,r9,r5              ;8570
00573e  8113              STRH     r3,[r2,#8]            ;8570
005740  fb0efe00          MUL      lr,lr,r0              ;8571
005744  fb9ef3f5          SDIV     r3,lr,r5              ;8571
005748  8153              STRH     r3,[r2,#0xa]          ;8571
00574a  fb0afa00          MUL      r10,r10,r0            ;8572
00574e  fb9af0f5          SDIV     r0,r10,r5             ;8572
005752  8190              STRH     r0,[r2,#0xc]          ;8572
005754  9808              LDR      r0,[sp,#0x20]         ;8574
005756  f04f030a          MOV      r3,#0xa               ;8574
00575a  fb90f0f3          SDIV     r0,r0,r3              ;8574
00575e  b203              SXTH     r3,r0                 ;8574
005760  f04f0000          MOV      r0,#0                 ;8575
                  |L1.22372|
005764  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8577
005768  429d              CMP      r5,r3                 ;8577
00576a  dd04              BLE      |L1.22390|
00576c  f1000001          ADD      r0,r0,#1              ;8575
005770  b2c0              UXTB     r0,r0                 ;8575
005772  2807              CMP      r0,#7                 ;8575
005774  d3f6              BCC      |L1.22372|
                  |L1.22390|
005776  b358              CBZ      r0,|L1.22480|
005778  1e45              SUBS     r5,r0,#1              ;8583
00577a  2d06              CMP      r5,#6                 ;8583
00577c  d22b              BCS      |L1.22486|
00577e  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8586
005782  ebac0303          SUB      r3,r12,r3             ;8586
005786  b21b              SXTH     r3,r3                 ;8586
005788  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8587
00578c  ebac0202          SUB      r2,r12,r2             ;8587
005790  fa0ffc82          SXTH     r12,r2                ;8587
005794  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8588
005798  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8588
00579c  eba90200          SUB      r2,r9,r0              ;8588
0057a0  fb02f203          MUL      r2,r2,r3              ;8589
0057a4  fb92f2fc          SDIV     r2,r2,r12             ;8590
0057a8  4410              ADD      r0,r0,r2              ;8591
0057aa  6530              STR      r0,[r6,#0x50]         ;8591  ; bat_hndl_t_razr
0057ac  e017              B        |L1.22494|
                  |L1.22446|
0057ae  f44f70ef          MOV      r0,#0x1de             ;8544
0057b2  f7fffffe          BL       lc640_read_int
0057b6  65b0              STR      r0,[r6,#0x58]         ;8544  ; bat_hndl_zvu_Q
0057b8  2865              CMP      r0,#0x65              ;8545
0057ba  d300              BCC      |L1.22462|
0057bc  65b5              STR      r5,[r6,#0x58]         ;8545  ; bat_hndl_zvu_Q
                  |L1.22462|
0057be  6db0              LDR      r0,[r6,#0x58]         ;8546  ; bat_hndl_zvu_Q
0057c0  f2427110          MOV      r1,#0x2710            ;8546
0057c4  fb00f001          MUL      r0,r0,r1              ;8546
0057c8  65b0              STR      r0,[r6,#0x58]         ;8546  ; bat_hndl_zvu_Q
0057ca  f8849009          STRB     r9,[r4,#9]            ;8548
0057ce  e066              B        |L1.22686|
                  |L1.22480|
0057d0  9800              LDR      r0,[sp,#0]            ;8582
0057d2  6530              STR      r0,[r6,#0x50]         ;8582  ; bat_hndl_t_razr
0057d4  e003              B        |L1.22494|
                  |L1.22486|
0057d6  2807              CMP      r0,#7                 ;8593
0057d8  d301              BCC      |L1.22494|
0057da  9806              LDR      r0,[sp,#0x18]         ;8595
0057dc  6530              STR      r0,[r6,#0x50]         ;8595  ; bat_hndl_t_razr
                  |L1.22494|
0057de  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
0057e0  fb98f0f0          SDIV     r0,r8,r0
0057e4  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8598   
;;;8599   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0057e6  4281              CMP      r1,r0
0057e8  dd03              BLE      |L1.22514|
0057ea  eba10000          SUB      r0,r1,r0
0057ee  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057f0  e000              B        |L1.22516|
                  |L1.22514|
;;;8600   		else bat_hndl_zvu_Q=0L;
0057f2  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22516|
;;;8601   
;;;8602   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
0057f4  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
0057f6  f44f6061          MOV      r0,#0xe10
0057fa  fb91f0f0          SDIV     r0,r1,r0
0057fe  8070              STRH     r0,[r6,#2]
;;;8603   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005800  f04f003c          MOV      r0,#0x3c
005804  fb91f1f0          SDIV     r1,r1,r0
005808  b209              SXTH     r1,r1
00580a  80b1              STRH     r1,[r6,#4]
;;;8604   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
00580c  fb91f2f0          SDIV     r2,r1,r0
005810  fb001012          MLS      r0,r0,r2,r1
005814  80f0              STRH     r0,[r6,#6]
005816  e016              B        |L1.22598|
                  |L1.22552|
;;;8605   
;;;8606   		}
;;;8607   	else if(Ib_ips_termokompensat>IKB)
005818  4290              CMP      r0,r2
00581a  dd14              BLE      |L1.22598|
;;;8608   		{
;;;8609   		bat_hndl_i_vector=1;
00581c  f884900b          STRB     r9,[r4,#0xb]
;;;8610   
;;;8611   		bat_hndl_i=Ib_ips_termokompensat;
005820  8030              STRH     r0,[r6,#0]
;;;8612   		bat_hndl_i_summ+=(long)bat_hndl_i;
005822  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
005824  4410              ADD      r0,r0,r2
005826  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8613   		if(bat_hndl_i_summ>=36000L)
005828  f64842a0          MOV      r2,#0x8ca0
00582c  4290              CMP      r0,r2
00582e  db0a              BLT      |L1.22598|
;;;8614   
;;;8615   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8616   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8617   			{
;;;8618   			bat_hndl_i_summ-=36000L;
005830  eba00002          SUB      r0,r0,r2
005834  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8619   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
005836  4541              CMP      r1,r8
005838  da03              BGE      |L1.22594|
00583a  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
00583c  4408              ADD      r0,r0,r1
00583e  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005840  e001              B        |L1.22598|
                  |L1.22594|
;;;8620   			else bat_hndl_zvu_Q=1000000L; 
005842  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22598|
;;;8621   			}
;;;8622   		}
;;;8623   
;;;8624   
;;;8625   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
005846  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005848  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
00584a  4288              CMP      r0,r1
00584c  d00d              BEQ      |L1.22634|
;;;8626   		{
;;;8627   		if(bat_hndl_i_vector==1)
00584e  2801              CMP      r0,#1
005850  d10b              BNE      |L1.22634|
;;;8628   			{
;;;8629   			signed short tempSS;
;;;8630   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
005852  f44f70e4          MOV      r0,#0x1c8
005856  f7fffffe          BL       lc640_read_int
00585a  b200              SXTH     r0,r0
;;;8631   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
00585c  4a9e              LDR      r2,|L1.23256|
00585e  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
005860  4411              ADD      r1,r1,r2
005862  fb91f0f0          SDIV     r0,r1,r0
005866  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8632   			bat_hndl_i_summ=0;
005868  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.22634|
;;;8633   			}
;;;8634   		}
;;;8635   	bat_hndl_i_vector_old=bat_hndl_i_vector;
00586a  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
00586c  7320              STRB     r0,[r4,#0xc]
;;;8636   
;;;8637   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
00586e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005870  f2427a10          MOV      r10,#0x2710
005874  fb90f5fa          SDIV     r5,r0,r10
005878  f44f79ef          MOV      r9,#0x1de
00587c  4648              MOV      r0,r9
00587e  f7fffffe          BL       lc640_read_int
005882  4285              CMP      r5,r0
005884  d006              BEQ      |L1.22676|
005886  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005888  fb90f0fa          SDIV     r0,r0,r10
00588c  b201              SXTH     r1,r0
00588e  4648              MOV      r0,r9
005890  f7fffffe          BL       lc640_write_int
                  |L1.22676|
;;;8638   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
005894  e9d60116          LDRD     r0,r1,[r6,#0x58]
005898  fb90f0f1          SDIV     r0,r0,r1
00589c  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.22686|
;;;8639   	}
;;;8640   
;;;8641   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
00589e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0058a0  4540              CMP      r0,r8
0058a2  dd02              BLE      |L1.22698|
0058a4  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
0058a8  e002              B        |L1.22704|
                  |L1.22698|
;;;8642   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0058aa  2800              CMP      r0,#0
0058ac  da00              BGE      |L1.22704|
0058ae  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22704|
;;;8643   
;;;8644   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0058b0  488a              LDR      r0,|L1.23260|
0058b2  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0058b6  200a              MOVS     r0,#0xa
0058b8  fb91f0f0          SDIV     r0,r1,r0
0058bc  4988              LDR      r1,|L1.23264|
0058be  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0058c2  ebb00f41          CMP      r0,r1,LSL #1
0058c6  da30              BGE      |L1.22826|
0058c8  4249              RSBS     r1,r1,#0
0058ca  ebb00f41          CMP      r0,r1,LSL #1
0058ce  dd2c              BLE      |L1.22826|
0058d0  4884              LDR      r0,|L1.23268|
0058d2  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0058d6  07c0              LSLS     r0,r0,#31
0058d8  d127              BNE      |L1.22826|
0058da  4883              LDR      r0,|L1.23272|
0058dc  4983              LDR      r1,|L1.23276|
0058de  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0058e2  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0058e6  4288              CMP      r0,r1
0058e8  dc1f              BGT      |L1.22826|
0058ea  4981              LDR      r1,|L1.23280|
0058ec  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0058f0  4288              CMP      r0,r1
0058f2  dd1a              BLE      |L1.22826|
0058f4  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
0058f8  280a              CMP      r0,#0xa
0058fa  db16              BLT      |L1.22826|
0058fc  28c8              CMP      r0,#0xc8
0058fe  dc14              BGT      |L1.22826|
;;;8645   	{
;;;8646   	if(bat_hndl_zvu_Q_cnt<60)
005900  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005904  283c              CMP      r0,#0x3c
005906  d20d              BCS      |L1.22820|
;;;8647   		{
;;;8648   		bat_hndl_zvu_Q_cnt++;
005908  f1000001          ADD      r0,r0,#1
00590c  b2c0              UXTB     r0,r0
00590e  f8840030          STRB     r0,[r4,#0x30]
;;;8649   		if(bat_hndl_zvu_Q_cnt>=60)
005912  283c              CMP      r0,#0x3c
005914  d306              BCC      |L1.22820|
;;;8650   			{
;;;8651   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005916  2164              MOVS     r1,#0x64
005918  f44f70ef          MOV      r0,#0x1de
00591c  f7fffffe          BL       lc640_write_int
;;;8652   			bat_hndl_zvu_Q=1000000L;
005920  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22820|
;;;8653   
;;;8654   
;;;8655   			}
;;;8656   		}
;;;8657   	}
;;;8658   else 
;;;8659   	{
;;;8660   	bat_hndl_zvu_Q_cnt=0;
;;;8661   	}
;;;8662   
;;;8663   
;;;8664   
;;;8665   };
005924  b009              ADD      sp,sp,#0x24
005926  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22826|
00592a  f8847030          STRB     r7,[r4,#0x30]         ;8660
00592e  e7f9              B        |L1.22820|
;;;8666   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8670   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8671   void u_avt_set_hndl(void)
005930  e92d5fff          PUSH     {r0-r12,lr}
;;;8672   {
;;;8673   if(uavt_set_stat==uassSTEP1)
005934  4d6f              LDR      r5,|L1.23284|
;;;8674   	{
;;;8675   	char i,find_succes;
;;;8676   
;;;8677   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8678   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8679   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8680   		{
;;;8681   		uavt_set_error_cnt=60;
005936  4e70              LDR      r6,|L1.23288|
005938  f8df81c0          LDR      r8,|L1.23292|
00593c  7828              LDRB     r0,[r5,#0]            ;8673  ; uavt_set_stat
;;;8682   		}
;;;8683   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8684   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8685   	find_succes=0;
;;;8686   /*	for(i=0;i<NUMIST;i++)
;;;8687   		{
;;;8688   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8689   		else
;;;8690   			{
;;;8691   			find_succes=0;
;;;8692   			break;
;;;8693   			}
;;;8694   		}*/
;;;8695   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
00593e  f8dfa1c0          LDR      r10,|L1.23296|
005942  2400              MOVS     r4,#0                 ;8684
;;;8696   
;;;8697   	if(find_succes==1)
;;;8698   		{
;;;8699   		uavt_set_stat=uassSTEP2;
005944  f04f0902          MOV      r9,#2
;;;8700   		}
;;;8701   	if(uavt_set_error_cnt)
;;;8702   		{
;;;8703   		uavt_set_error_cnt--;
;;;8704   		if(!uavt_set_error_cnt)
;;;8705   			{
;;;8706   			uavt_set_stat=uassOFF;
;;;8707   			uavt_set_result_stat=uasrsERR;
;;;8708   			avt_error_bps=100;
005948  f04f0b64          MOV      r11,#0x64
00594c  2801              CMP      r0,#1                 ;8673
00594e  d12e              BNE      |L1.22958|
005950  f8980000          LDRB     r0,[r8,#0]            ;8679  ; uavt_set_stat_old
005954  2801              CMP      r0,#1                 ;8679
005956  d002              BEQ      |L1.22878|
005958  f04f003c          MOV      r0,#0x3c              ;8681
00595c  7030              STRB     r0,[r6,#0]            ;8681
                  |L1.22878|
00595e  230a              MOVS     r3,#0xa               ;8684
005960  2200              MOVS     r2,#0                 ;8684
005962  21e6              MOVS     r1,#0xe6              ;8684
005964  20e1              MOVS     r0,#0xe1              ;8684
005966  f7fffffe          BL       mess_send
00596a  f04f0000          MOV      r0,#0                 ;8685
00596e  4965              LDR      r1,|L1.23300|
005970  f9b12000          LDRSH    r2,[r1,#0]            ;8695  ; bps_U
005974  f9ba1000          LDRSH    r1,[r10,#0]           ;8695  ; U_AVT
005978  f1a10301          SUB      r3,r1,#1              ;8695
00597c  429a              CMP      r2,r3                 ;8695
00597e  db04              BLT      |L1.22922|
005980  1c49              ADDS     r1,r1,#1              ;8695
005982  428a              CMP      r2,r1                 ;8695
005984  dc01              BGT      |L1.22922|
005986  f04f0001          MOV      r0,#1                 ;8695
                  |L1.22922|
00598a  2801              CMP      r0,#1                 ;8697
00598c  d101              BNE      |L1.22930|
00598e  f8859000          STRB     r9,[r5,#0]            ;8699
                  |L1.22930|
005992  7830              LDRB     r0,[r6,#0]            ;8701  ; uavt_set_error_cnt
005994  b158              CBZ      r0,|L1.22958|
005996  f1a00001          SUB      r0,r0,#1              ;8703
00599a  b2c0              UXTB     r0,r0                 ;8703
00599c  7030              STRB     r0,[r6,#0]            ;8703
00599e  b930              CBNZ     r0,|L1.22958|
0059a0  702c              STRB     r4,[r5,#0]            ;8706
0059a2  4859              LDR      r0,|L1.23304|
0059a4  f8809000          STRB     r9,[r0,#0]            ;8707
0059a8  4858              LDR      r0,|L1.23308|
0059aa  f880b000          STRB     r11,[r0,#0]
                  |L1.22958|
;;;8709   			}
;;;8710   		}
;;;8711   	}
;;;8712   if(uavt_set_stat==uassSTEP2)
0059ae  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8713   	{
;;;8714   	char i,find_succes;
;;;8715   
;;;8716   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0059b0  4957              LDR      r1,|L1.23312|
;;;8717   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0059b2  4858              LDR      r0,|L1.23316|
;;;8718   
;;;8719   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8720   		{
;;;8721   		uavt_set_error_cnt=60;
;;;8722   		}
;;;8723   
;;;8724   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8725   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8726   	find_succes=1;
;;;8727   
;;;8728   	for(i=0;i<NUMIST;i++)
;;;8729   		{
;;;8730   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8731   		else
;;;8732   			{
;;;8733   			find_succes=0;
;;;8734   			avt_error_bps=i+1;
;;;8735   			break;
;;;8736   			}
;;;8737   		}
;;;8738   
;;;8739   	if(find_succes==1)
;;;8740   		{
;;;8741   		uavt_set_stat=uassSTEP3;
;;;8742   		uavt_bps_pntr=0;
0059b4  4f58              LDR      r7,|L1.23320|
0059b6  2a02              CMP      r2,#2                 ;8712
0059b8  d002              BEQ      |L1.22976|
;;;8743   		avt_plazma=0;
;;;8744   		}
;;;8745   
;;;8746   	if(uavt_set_error_cnt)
;;;8747   		{
;;;8748   		uavt_set_error_cnt--;
;;;8749   		if(!uavt_set_error_cnt)
;;;8750   			{
;;;8751   			uavt_set_stat=uassOFF;
;;;8752   			uavt_set_result_stat=uasrsERR;
;;;8753   			}
;;;8754   		}
;;;8755   	}
;;;8756   else if(uavt_set_stat==uassSTEP3)
0059ba  2a03              CMP      r2,#3
0059bc  d05e              BEQ      |L1.23164|
0059be  e0fb              B        |L1.23480|
                  |L1.22976|
0059c0  f9ba2000          LDRSH    r2,[r10,#0]           ;8716  ; U_AVT
0059c4  f04f0365          MOV      r3,#0x65              ;8716
0059c8  fb02f303          MUL      r3,r2,r3              ;8716
0059cc  fbb3f3fb          UDIV     r3,r3,r11             ;8716
0059d0  468a              MOV      r10,r1                ;8716
0059d2  800b              STRH     r3,[r1,#0]            ;8716
0059d4  eb021142          ADD      r1,r2,r2,LSL #5       ;8717
0059d8  eb010141          ADD      r1,r1,r1,LSL #1       ;8717
0059dc  fbb1f1fb          UDIV     r1,r1,r11             ;8717
0059e0  4683              MOV      r11,r0                ;8717
0059e2  8001              STRH     r1,[r0,#0]            ;8717
0059e4  f8980000          LDRB     r0,[r8,#0]            ;8719  ; uavt_set_stat_old
0059e8  2802              CMP      r0,#2                 ;8719
0059ea  d002              BEQ      |L1.23026|
0059ec  f04f003c          MOV      r0,#0x3c              ;8721
0059f0  7030              STRB     r0,[r6,#0]            ;8721
                  |L1.23026|
0059f2  230a              MOVS     r3,#0xa               ;8724
0059f4  21bf              MOVS     r1,#0xbf              ;8724
0059f6  20be              MOVS     r0,#0xbe              ;8724
0059f8  f7fffffe          BL       mess_send
0059fc  230a              MOVS     r3,#0xa               ;8725
0059fe  2200              MOVS     r2,#0                 ;8725
005a00  21e6              MOVS     r1,#0xe6              ;8725
005a02  20e1              MOVS     r0,#0xe1              ;8725
005a04  f7fffffe          BL       mess_send
005a08  f04f0201          MOV      r2,#1                 ;8726
005a0c  f04f0000          MOV      r0,#0                 ;8728
005a10  4943              LDR      r1,|L1.23328|
005a12  f9ba3000          LDRSH    r3,[r10,#0]           ;8728
005a16  f8dfe104          LDR      lr,|L1.23324|
005a1a  f9bbc000          LDRSH    r12,[r11,#0]          ;8730
005a1e  f9b1a000          LDRSH    r10,[r1,#0]           ;8728
005a22  e00d              B        |L1.23104|
                  |L1.23076|
005a24  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8730
005a28  eb011100          ADD      r1,r1,r0,LSL #4       ;8730
005a2c  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8730
005a30  69c9              LDR      r1,[r1,#0x1c]         ;8730
005a32  4299              CMP      r1,r3                 ;8730
005a34  da09              BGE      |L1.23114|
005a36  4561              CMP      r1,r12                ;8730
005a38  dd07              BLE      |L1.23114|
005a3a  f1000001          ADD      r0,r0,#1              ;8728
005a3e  b2c0              UXTB     r0,r0                 ;8728
                  |L1.23104|
005a40  4550              CMP      r0,r10                ;8728
005a42  dbef              BLT      |L1.23076|
                  |L1.23108|
005a44  2a01              CMP      r2,#1                 ;8739
005a46  d007              BEQ      |L1.23128|
005a48  e00c              B        |L1.23140|
                  |L1.23114|
005a4a  f04f0200          MOV      r2,#0                 ;8733
005a4e  492f              LDR      r1,|L1.23308|
005a50  f1000001          ADD      r0,r0,#1              ;8734
005a54  7008              STRB     r0,[r1,#0]            ;8734
005a56  e7f5              B        |L1.23108|
                  |L1.23128|
005a58  f04f0003          MOV      r0,#3                 ;8741
005a5c  7028              STRB     r0,[r5,#0]            ;8741
005a5e  703c              STRB     r4,[r7,#0]            ;8742
005a60  4830              LDR      r0,|L1.23332|
005a62  7004              STRB     r4,[r0,#0]            ;8743
                  |L1.23140|
005a64  7830              LDRB     r0,[r6,#0]            ;8746  ; uavt_set_error_cnt
005a66  b370              CBZ      r0,|L1.23238|
005a68  f1a00001          SUB      r0,r0,#1              ;8748
005a6c  b2c0              UXTB     r0,r0                 ;8748
005a6e  7030              STRB     r0,[r6,#0]            ;8748
005a70  bb48              CBNZ     r0,|L1.23238|
005a72  702c              STRB     r4,[r5,#0]            ;8751
005a74  4824              LDR      r0,|L1.23304|
005a76  f8809000          STRB     r9,[r0,#0]            ;8752
005a7a  e09d              B        |L1.23480|
                  |L1.23164|
;;;8757   	{
;;;8758   	char i,find_succes;
;;;8759   
;;;8760   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005a7c  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005a80  f04f0365          MOV      r3,#0x65
005a84  fb02f303          MUL      r3,r2,r3
005a88  fbb3f3fb          UDIV     r3,r3,r11
005a8c  468a              MOV      r10,r1
005a8e  800b              STRH     r3,[r1,#0]
;;;8761   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005a90  eb021142          ADD      r1,r2,r2,LSL #5
005a94  eb010141          ADD      r1,r1,r1,LSL #1
005a98  fbb1f1fb          UDIV     r1,r1,r11
005a9c  4683              MOV      r11,r0
005a9e  8001              STRH     r1,[r0,#0]
;;;8762   	
;;;8763   	if(uavt_set_stat_old!=uavt_set_stat)
005aa0  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005aa4  2803              CMP      r0,#3
005aa6  d000              BEQ      |L1.23210|
;;;8764   		{
;;;8765   		uavt_bps_pntr=0;
005aa8  703c              STRB     r4,[r7,#0]
                  |L1.23210|
;;;8766   		}
;;;8767   
;;;8768   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005aaa  230a              MOVS     r3,#0xa
005aac  21bf              MOVS     r1,#0xbf
005aae  20be              MOVS     r0,#0xbe
005ab0  f7fffffe          BL       mess_send
;;;8769   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005ab4  230a              MOVS     r3,#0xa
005ab6  2200              MOVS     r2,#0
005ab8  21e6              MOVS     r1,#0xe6
005aba  20e1              MOVS     r0,#0xe1
005abc  f7fffffe          BL       mess_send
;;;8770   
;;;8771   	find_succes=1;
005ac0  f04f0601          MOV      r6,#1
;;;8772   	for(i=0;i<NUMIST;i++)
005ac4  e030              B        |L1.23336|
                  |L1.23238|
005ac6  e077              B        |L1.23480|
                  |L1.23240|
                          DCD      BAT_C_POINT_5
                  |L1.23244|
                          DCD      BAT_C_POINT_10
                  |L1.23248|
                          DCD      BAT_C_POINT_20
                  |L1.23252|
                          DCD      BAT_K_OLD
                  |L1.23256|
                          DCD      0xfff0bdc0
                  |L1.23260|
                          DCD      Ib_ips_termokompensat
                  |L1.23264|
                          DCD      IKB
                  |L1.23268|
                          DCD      bat
                  |L1.23272|
                          DCD      out_U
                  |L1.23276|
                          DCD      u_necc_up
                  |L1.23280|
                          DCD      u_necc_dn
                  |L1.23284|
                          DCD      uavt_set_stat
                  |L1.23288|
                          DCD      uavt_set_error_cnt
                  |L1.23292|
                          DCD      uavt_set_stat_old
                  |L1.23296|
                          DCD      U_AVT
                  |L1.23300|
                          DCD      bps_U
                  |L1.23304|
                          DCD      uavt_set_result_stat
                  |L1.23308|
                          DCD      avt_error_bps
                  |L1.23312|
                          DCD      u_max_temp
                  |L1.23316|
                          DCD      u_min_temp
                  |L1.23320|
                          DCD      uavt_bps_pntr
                  |L1.23324|
                          DCD      bps
                  |L1.23328|
                          DCD      NUMIST
                  |L1.23332|
                          DCD      avt_plazma
                  |L1.23336|
005b28  f04f0000          MOV      r0,#0
005b2c  f8df942c          LDR      r9,|L1.24412|
005b30  f9ba2000          LDRSH    r2,[r10,#0]
005b34  f8dfc420          LDR      r12,|L1.24408|
005b38  f9bb3000          LDRSH    r3,[r11,#0]           ;8730
005b3c  f9b9a000          LDRSH    r10,[r9,#0]           ;8728
005b40  e00d              B        |L1.23390|
                  |L1.23362|
;;;8773   		{
;;;8774   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005b42  eb0001c0          ADD      r1,r0,r0,LSL #3
005b46  eb011100          ADD      r1,r1,r0,LSL #4
005b4a  eb0c0181          ADD      r1,r12,r1,LSL #2
005b4e  69c9              LDR      r1,[r1,#0x1c]
005b50  4291              CMP      r1,r2
005b52  da0f              BGE      |L1.23412|
005b54  4299              CMP      r1,r3
005b56  dd0d              BLE      |L1.23412|
005b58  f1000001          ADD      r0,r0,#1              ;8772
005b5c  b2c0              UXTB     r0,r0                 ;8772
                  |L1.23390|
005b5e  4550              CMP      r0,r10                ;8772
005b60  dbef              BLT      |L1.23362|
                  |L1.23394|
;;;8775   		else
;;;8776   			{
;;;8777   			find_succes=0;
;;;8778   			break;
;;;8779   			}
;;;8780   		}
;;;8781   
;;;8782   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005b62  20d7              MOVS     r0,#0xd7
005b64  f7fffffe          BL       mess_find
005b68  b1a0              CBZ      r0,|L1.23444|
005b6a  48fd              LDR      r0,|L1.24416|
005b6c  6800              LDR      r0,[r0,#0]  ; mess_data
005b6e  28d9              CMP      r0,#0xd9
005b70  d003              BEQ      |L1.23418|
005b72  e00f              B        |L1.23444|
                  |L1.23412|
005b74  f04f0600          MOV      r6,#0                 ;8777
005b78  e7f3              B        |L1.23394|
                  |L1.23418|
;;;8783   		{
;;;8784   		if(++uavt_bps_pntr>=NUMIST)
005b7a  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005b7c  1c40              ADDS     r0,r0,#1
005b7e  b2c0              UXTB     r0,r0
005b80  7038              STRB     r0,[r7,#0]
005b82  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005b86  4288              CMP      r0,r1
005b88  db04              BLT      |L1.23444|
;;;8785   			{
;;;8786   			uavt_set_stat=uassOFF;
005b8a  702c              STRB     r4,[r5,#0]
;;;8787   			uavt_set_result_stat=uasrsSUCCESS;
005b8c  49f5              LDR      r1,|L1.24420|
005b8e  f04f0003          MOV      r0,#3
005b92  7008              STRB     r0,[r1,#0]
                  |L1.23444|
;;;8788   			}
;;;8789   		//uavt_bps_pntr++;
;;;8790   		//if()
;;;8791   		}
;;;8792   	if(find_succes==1)
005b94  2e01              CMP      r6,#1
005b96  d10f              BNE      |L1.23480|
;;;8793   		{
;;;8794   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005b98  20ee              MOVS     r0,#0xee
005b9a  e9cd0400          STRD     r0,r4,[sp,#0]
005b9e  9402              STR      r4,[sp,#8]
005ba0  9403              STR      r4,[sp,#0xc]
005ba2  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005ba4  4603              MOV      r3,r0
005ba6  2216              MOVS     r2,#0x16
005ba8  4608              MOV      r0,r1
005baa  f7fffffe          BL       mcp2515_transmit
;;;8795   		avt_plazma++;
005bae  48ee              LDR      r0,|L1.24424|
005bb0  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005bb2  f1010101          ADD      r1,r1,#1
005bb6  7001              STRB     r1,[r0,#0]
                  |L1.23480|
;;;8796   		}
;;;8797   	}
;;;8798   
;;;8799   
;;;8800   
;;;8801   uavt_set_stat_old=uavt_set_stat;
005bb8  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005bba  f8880000          STRB     r0,[r8,#0]
;;;8802   
;;;8803   }
005bbe  e8bd9fff          POP      {r0-r12,pc}
;;;8804   
                          ENDP

                  u_necc_hndl PROC
;;;8879   //-----------------------------------------------
;;;8880   void u_necc_hndl(void)
005bc2  b5f8              PUSH     {r3-r7,lr}
;;;8881   {
;;;8882   signed long temp_L;
;;;8883   signed long temp_SL;
;;;8884   //signed short temp_SS;
;;;8885   
;;;8886   //char i;
;;;8887   
;;;8888   //temp_SS=0;
;;;8889   signed short t[2];
;;;8890   
;;;8891   
;;;8892   
;;;8893   
;;;8894   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8895   
;;;8896   if(!TERMOKOMPENS)
005bc4  48e9              LDR      r0,|L1.24428|
;;;8897   	{
;;;8898   	//u_necc=U0B;
;;;8899   	u_necc=UB20;
;;;8900   	}
;;;8901   else
;;;8902   	{
;;;8903   	if(ND_EXT[0])t[0]=20;
;;;8904   	else t[0]=t_ext[0];
;;;8905   
;;;8906   	mat_temper=t[0];
;;;8907   			
;;;8908   	if(mat_temper<0)temp_SL=UB0; 
;;;8909   	else 
;;;8910   		{
;;;8911   		if(mat_temper>40)mat_temper=40; 
;;;8912   		temp_SL=(UB20-UB0)*10;
;;;8913   		temp_SL*=mat_temper;
;;;8914   		temp_SL/=200;
;;;8915   		temp_SL+=UB0;
;;;8916   		}
;;;8917   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005bc6  4dec              LDR      r5,|L1.24440|
005bc8  4cec              LDR      r4,|L1.24444|
005bca  8801              LDRH     r1,[r0,#0]            ;8896  ; TERMOKOMPENS
005bcc  48e8              LDR      r0,|L1.24432|
005bce  f9b03000          LDRSH    r3,[r0,#0]            ;8899
;;;8918   		{
;;;8919   		temp_SL=UVZ;
005bd2  48e8              LDR      r0,|L1.24436|
005bd4  f9b02000          LDRSH    r2,[r0,#0]
005bd8  b139              CBZ      r1,|L1.23530|
005bda  48e9              LDR      r0,|L1.24448|
005bdc  7800              LDRB     r0,[r0,#0]            ;8903  ; ND_EXT
005bde  b130              CBZ      r0,|L1.23534|
005be0  f04f0014          MOV      r0,#0x14              ;8903
005be4  f8ad0000          STRH     r0,[sp,#0]            ;8903
005be8  e005              B        |L1.23542|
                  |L1.23530|
005bea  8023              STRH     r3,[r4,#0]            ;8899
005bec  e02c              B        |L1.23624|
                  |L1.23534|
005bee  48e5              LDR      r0,|L1.24452|
005bf0  8800              LDRH     r0,[r0,#0]            ;8904  ; t_ext
005bf2  f8ad0000          STRH     r0,[sp,#0]            ;8904
                  |L1.23542|
005bf6  4ee4              LDR      r6,|L1.24456|
005bf8  f9bd1000          LDRSH    r1,[sp,#0]            ;8906
005bfc  6031              STR      r1,[r6,#0]            ;8906  ; mat_temper
005bfe  48e3              LDR      r0,|L1.24460|
005c00  2900              CMP      r1,#0                 ;8908
005c02  f9b00000          LDRSH    r0,[r0,#0]            ;8908
005c06  db12              BLT      |L1.23598|
005c08  2928              CMP      r1,#0x28              ;8911
005c0a  dd02              BLE      |L1.23570|
005c0c  f04f0128          MOV      r1,#0x28              ;8911
005c10  6031              STR      r1,[r6,#0]            ;8911  ; mat_temper
                  |L1.23570|
005c12  eba30100          SUB      r1,r3,r0              ;8912
005c16  eb010181          ADD      r1,r1,r1,LSL #2       ;8912
005c1a  ea4f0141          LSL      r1,r1,#1              ;8912
005c1e  6833              LDR      r3,[r6,#0]            ;8913  ; mat_temper
005c20  fb01f103          MUL      r1,r1,r3              ;8913
005c24  f04f03c8          MOV      r3,#0xc8              ;8914
005c28  fb91f1f3          SDIV     r1,r1,r3              ;8914
005c2c  4408              ADD      r0,r0,r1              ;8915
                  |L1.23598|
005c2e  f8951023          LDRB     r1,[r5,#0x23]         ;8917  ; spc_stat
005c32  2902              CMP      r1,#2                 ;8917
005c34  d107              BNE      |L1.23622|
005c36  49d6              LDR      r1,|L1.24464|
005c38  7809              LDRB     r1,[r1,#0]            ;8917  ; sk_stat
005c3a  2901              CMP      r1,#1                 ;8917
005c3c  d002              BEQ      |L1.23620|
005c3e  49d5              LDR      r1,|L1.24468|
005c40  8809              LDRH     r1,[r1,#0]            ;8917  ; VZ_CH_VENT_BLOK
005c42  b901              CBNZ     r1,|L1.23622|
                  |L1.23620|
005c44  4610              MOV      r0,r2
                  |L1.23622|
;;;8920   		}
;;;8921   	u_necc=(unsigned int)temp_SL;
005c46  8020              STRH     r0,[r4,#0]
                  |L1.23624|
;;;8922   	///u_necc=3456;
;;;8923   	}  
;;;8924   
;;;8925   //u_necc=2355;
;;;8926   
;;;8927   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005c48  48d3              LDR      r0,|L1.24472|
005c4a  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005c4c  b918              CBNZ     r0,|L1.23638|
005c4e  48d3              LDR      r0,|L1.24476|
005c50  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005c52  2802              CMP      r0,#2
005c54  d102              BNE      |L1.23644|
                  |L1.23638|
;;;8928   	{
;;;8929   	u_necc=speedChrgVolt;
005c56  48d2              LDR      r0,|L1.24480|
005c58  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005c5a  8020              STRH     r0,[r4,#0]
                  |L1.23644|
;;;8930   	}
;;;8931   if(hv_vz_stat==hvsWRK)
005c5c  48d1              LDR      r0,|L1.24484|
005c5e  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005c60  2805              CMP      r0,#5
005c62  d100              BNE      |L1.23654|
;;;8932   	{
;;;8933   	u_necc=UVZ;
005c64  8022              STRH     r2,[r4,#0]
                  |L1.23654|
;;;8934   	}
;;;8935   if(vz1_stat==vz1sWRK)
005c66  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005c68  280a              CMP      r0,#0xa
005c6a  d102              BNE      |L1.23666|
;;;8936   	{
;;;8937   	u_necc=UZ_U;
005c6c  48ce              LDR      r0,|L1.24488|
005c6e  8800              LDRH     r0,[r0,#0]  ; UZ_U
005c70  8020              STRH     r0,[r4,#0]
                  |L1.23666|
;;;8938   	}
;;;8939   if(vz2_stat==vz2sWRK1)
005c72  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005c74  280a              CMP      r0,#0xa
005c76  d102              BNE      |L1.23678|
;;;8940   	{
;;;8941   	u_necc=FZ_U1;
005c78  49cc              LDR      r1,|L1.24492|
005c7a  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005c7c  8021              STRH     r1,[r4,#0]
                  |L1.23678|
;;;8942   	}
;;;8943   if(vz2_stat==vz2sWRK2)
005c7e  280b              CMP      r0,#0xb
005c80  d102              BNE      |L1.23688|
;;;8944   	{
;;;8945   	u_necc=FZ_U2;
005c82  48cb              LDR      r0,|L1.24496|
005c84  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005c86  8020              STRH     r0,[r4,#0]
                  |L1.23688|
;;;8946   	}
;;;8947   
;;;8948   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005c88  48ca              LDR      r0,|L1.24500|
005c8a  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005c8c  2801              CMP      r0,#1
005c8e  d001              BEQ      |L1.23700|
005c90  2802              CMP      r0,#2
005c92  d102              BNE      |L1.23706|
                  |L1.23700|
;;;8949   	{
;;;8950   	u_necc=U_AVT;
005c94  48c8              LDR      r0,|L1.24504|
005c96  8800              LDRH     r0,[r0,#0]  ; U_AVT
005c98  8020              STRH     r0,[r4,#0]
                  |L1.23706|
;;;8951   	}
;;;8952   
;;;8953   if(mess_find_unvol(MESS2UNECC_HNDL))
005c9a  20be              MOVS     r0,#0xbe
005c9c  f7fffffe          BL       mess_find_unvol
005ca0  b128              CBZ      r0,|L1.23726|
;;;8954   	{		
;;;8955   	if(mess_data[0]==PARAM_UNECC_SET)
005ca2  48af              LDR      r0,|L1.24416|
005ca4  6801              LDR      r1,[r0,#0]  ; mess_data
005ca6  29bf              CMP      r1,#0xbf
005ca8  d101              BNE      |L1.23726|
;;;8956   		{
;;;8957   		u_necc=mess_data[1];
005caa  6840              LDR      r0,[r0,#4]  ; mess_data
005cac  8020              STRH     r0,[r4,#0]
                  |L1.23726|
;;;8958   		}		
;;;8959   	} 
;;;8960   
;;;8961   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8962   #endif
;;;8963   
;;;8964   
;;;8965   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8966   
;;;8967   #ifndef UKU_TELECORE2015
;;;8968   #ifndef UKU_TELECORE2017
;;;8969   if(unh_cnt0<10)
;;;8970   	{
;;;8971   	unh_cnt0++;
;;;8972   	if(unh_cnt0>=10)
;;;8973   		{
;;;8974   		unh_cnt0=0;
;;;8975   		b1Hz_unh=1;
;;;8976   		}
;;;8977   	}
;;;8978   
;;;8979   if(unh_cnt1<5)
;;;8980   	{
;;;8981   	unh_cnt1++;
;;;8982   	if(unh_cnt1==5)
;;;8983   		{
;;;8984   		unh_cnt1=0;
;;;8985   //		b2Hz_unh=1;
;;;8986   		}
;;;8987   	} 
;;;8988   
;;;8989   
;;;8990   
;;;8991   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8992   	{		
;;;8993   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8994   		{
;;;8995   		u_necc=mess_data[1];
;;;8996   		}		
;;;8997   	}
;;;8998   
;;;8999   
;;;9000   else if(b1Hz_unh)
;;;9001   	{
;;;9002   	
;;;9003   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;9004   		{
;;;9005   		
;;;9006   		u_necc=U0B;
;;;9007   		#ifdef IPS_SGEP_GAZPROM
;;;9008   		u_necc=UB0;
;;;9009   		#endif
;;;9010   		}
;;;9011   	else 
;;;9012   		{
;;;9013   		if(BAT_TYPE==0) //если батарея обычная
;;;9014   			{
;;;9015   			for(i=0;i<2;i++)
;;;9016   				{
;;;9017   				if(BAT_IS_ON[i]==bisON)
;;;9018   					{
;;;9019   					if(bat[i]._nd)t[i]=20;
;;;9020   					else t[i]=bat[i]._Tb;
;;;9021   					}
;;;9022   				else
;;;9023   					{
;;;9024   					t[i]=-20;
;;;9025   					}
;;;9026   				}
;;;9027   			if(t[0]>t[1])mat_temper=t[0];
;;;9028   			else mat_temper=t[1];
;;;9029   			
;;;9030   		
;;;9031   			if(mat_temper<0)temp_SL=UB0; 
;;;9032   			else 
;;;9033   				{
;;;9034   				if(mat_temper>40)mat_temper=40; 
;;;9035   				temp_SL=(UB20-UB0)*10;
;;;9036   				temp_SL*=mat_temper;
;;;9037   				temp_SL/=200;
;;;9038   				temp_SL+=UB0;
;;;9039   				}
;;;9040   			if((spc_stat==spcVZ)
;;;9041   #ifndef UKU_6U			
;;;9042   			&&(sk_stat[0]==1)
;;;9043   #endif //UKU_6U
;;;9044   			)
;;;9045   				{
;;;9046   				temp_SL=UVZ;
;;;9047   				}
;;;9048   			u_necc=(unsigned int)temp_SL;
;;;9049   			}
;;;9050   		else if(BAT_TYPE==1) //если батарея китайская
;;;9051   			{
;;;9052   			u_necc=U0B;
;;;9053   					
;;;9054   			u_necc=bat[0]._Ub+10;
;;;9055   
;;;9056   			
;;;9057   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9058   				{
;;;9059   				u_necc=UVZ;
;;;9060   				}
;;;9061   			if(u_necc>=UB0) u_necc=UB0;
;;;9062   			if(u_necc>=UB20) u_necc=UB20;
;;;9063   			}
;;;9064   		}  
;;;9065   	}
;;;9066   #endif
;;;9067   #endif
;;;9068   
;;;9069   #ifdef UKU_TELECORE2015
;;;9070   
;;;9071   if(unh_cnt0<10)
;;;9072   	{
;;;9073   	unh_cnt0++;
;;;9074   	if(unh_cnt0>=10)
;;;9075   		{
;;;9076   		unh_cnt0=0;
;;;9077   		b1Hz_unh=1;
;;;9078   		}
;;;9079   	}
;;;9080   
;;;9081   if(unh_cnt1<5)
;;;9082   	{
;;;9083   	unh_cnt1++;
;;;9084   	if(unh_cnt1==5)
;;;9085   		{
;;;9086   		unh_cnt1=0;
;;;9087   //		b2Hz_unh=1;
;;;9088   		}
;;;9089   	} 
;;;9090   
;;;9091   
;;;9092   
;;;9093   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9094   	{		
;;;9095   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9096   		{
;;;9097   		u_necc=mess_data[1];
;;;9098   		}		
;;;9099   	}
;;;9100   
;;;9101   
;;;9102   else if(b1Hz_unh)
;;;9103   	{
;;;9104   	b1Hz_unh=0;
;;;9105   
;;;9106   	if(BAT_TYPE==0)
;;;9107   		{
;;;9108   		if(bat[0]._nd)mat_temper=20;
;;;9109   		else mat_temper=bat[0]._Tb;
;;;9110   
;;;9111   			
;;;9112   		if(mat_temper<0)temp_SL=UB0; 
;;;9113   		else 
;;;9114   			{
;;;9115   			if(mat_temper>40)mat_temper=40; 
;;;9116   			temp_SL=(UB20-UB0)*10;
;;;9117   			temp_SL*=mat_temper;
;;;9118   			temp_SL/=200;
;;;9119   			temp_SL+=UB0;
;;;9120   			}
;;;9121   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9122   			{
;;;9123   			temp_SL=UVZ;
;;;9124   			}
;;;9125   		u_necc=(unsigned int)temp_SL;
;;;9126   	///u_necc=3456;
;;;9127   		}
;;;9128   	else if(BAT_TYPE==1)
;;;9129   		{
;;;9130   		
;;;9131   		gran(&DU_LI_BAT,1,30);
;;;9132   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9133   		gran(&u_necc,0,UB0);
;;;9134   		gran(&u_necc,0,UB20);
;;;9135   		gran(&u_necc,0,540);		
;;;9136   
;;;9137   
;;;9138   		if(li_bat._batStat!=bsOK)
;;;9139   			{
;;;9140   			u_necc=U0B;
;;;9141   			}
;;;9142   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9143   			{
;;;9144   			u_necc=UVZ;
;;;9145   			}
;;;9146   		/* 
;;;9147   		u_necc=U0B;
;;;9148   		
;;;9149   
;;;9150   	
;;;9151   		u_necc=UB0;
;;;9152   		u_necc=li_bat._Ub+10;
;;;9153   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;9154   			{
;;;9155   			lakb_error_cnt++;
;;;9156   			if(lakb_error_cnt>=30)
;;;9157   				{
;;;9158   				lakb_error_cnt=30;
;;;9159   				u_necc=U0B;
;;;9160   				}
;;;9161   			}
;;;9162   		else lakb_error_cnt=0;*/
;;;9163   		}
;;;9164   	else if(BAT_TYPE==2)
;;;9165   		{
;;;9166   		u_necc=U0B;
;;;9167   		
;;;9168   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9169   			{
;;;9170   			u_necc=UVZ;
;;;9171   			}
;;;9172   	
;;;9173   		u_necc=UB0;
;;;9174   		}
;;;9175   
;;;9176   	else if(BAT_TYPE==3)
;;;9177   		{
;;;9178   		u_necc=U0B;
;;;9179   		
;;;9180   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9181   			{
;;;9182   			u_necc=UVZ;
;;;9183   			}
;;;9184   
;;;9185   		gran(&DU_LI_BAT,1,30);
;;;9186   
;;;9187   
;;;9188   		if(lakbNotErrorNum==0)
;;;9189   			{
;;;9190   			u_necc=U0B;
;;;9191   			}
;;;9192   		else 
;;;9193   			{
;;;9194   			signed short i;
;;;9195   			//signed short u_necc_max;
;;;9196   			//u_necc_max=0;
;;;9197   			char soc_flag=0;
;;;9198   
;;;9199   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9200   				{
;;;9201   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9202   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9203   				}
;;;9204   
;;;9205   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9206   			}
;;;9207   		gran(&u_necc,0,UB0);
;;;9208   		//gran(&u_necc,0,UB20);
;;;9209   		gran(&u_necc,0,540);
;;;9210   		}
;;;9211   	}
;;;9212   
;;;9213   #endif 
;;;9214   
;;;9215   #ifdef UKU_TELECORE2017
;;;9216   
;;;9217   if(unh_cnt0<10)
;;;9218   	{
;;;9219   	unh_cnt0++;
;;;9220   	if(unh_cnt0>=10)
;;;9221   		{
;;;9222   		unh_cnt0=0;
;;;9223   		b1Hz_unh=1;
;;;9224   		}
;;;9225   	}
;;;9226   
;;;9227   if(unh_cnt1<5)
;;;9228   	{
;;;9229   	unh_cnt1++;
;;;9230   	if(unh_cnt1==5)
;;;9231   		{
;;;9232   		unh_cnt1=0;
;;;9233   //		b2Hz_unh=1;
;;;9234   		}
;;;9235   	} 
;;;9236   
;;;9237   
;;;9238   
;;;9239   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9240   	{		
;;;9241   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9242   		{
;;;9243   		u_necc=mess_data[1];
;;;9244   		}		
;;;9245   	}
;;;9246   
;;;9247   
;;;9248   else if(b1Hz_unh)
;;;9249   	{
;;;9250   	b1Hz_unh=0;
;;;9251   
;;;9252   	if(BAT_TYPE==0)
;;;9253   		{
;;;9254   		if(bat[0]._nd)mat_temper=20;
;;;9255   		else mat_temper=bat[0]._Tb;
;;;9256   
;;;9257   			
;;;9258   		if(mat_temper<0)temp_SL=UB0; 
;;;9259   		else 
;;;9260   			{
;;;9261   			if(mat_temper>40)mat_temper=40; 
;;;9262   			temp_SL=(UB20-UB0)*10;
;;;9263   			temp_SL*=mat_temper;
;;;9264   			temp_SL/=200;
;;;9265   			temp_SL+=UB0;
;;;9266   			}
;;;9267   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9268   			{
;;;9269   			temp_SL=UVZ;
;;;9270   			}
;;;9271   		u_necc=(unsigned int)temp_SL;
;;;9272   	///u_necc=3456;
;;;9273   		}
;;;9274   	else if(BAT_TYPE==1)
;;;9275   		{
;;;9276   		
;;;9277   		gran(&DU_LI_BAT,1,30);
;;;9278   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9279   		gran(&u_necc,0,UB0);
;;;9280   		gran(&u_necc,0,UB20);
;;;9281   		gran(&u_necc,0,540);		
;;;9282   
;;;9283   
;;;9284   		if(li_bat._batStat!=bsOK)
;;;9285   			{
;;;9286   			u_necc=U0B;
;;;9287   			}
;;;9288   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9289   			{
;;;9290   			u_necc=UVZ;
;;;9291   			}
;;;9292   		}
;;;9293   	else if(BAT_TYPE==2)
;;;9294   		{
;;;9295   		u_necc=U0B;
;;;9296   		
;;;9297   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9298   			{
;;;9299   			u_necc=UVZ;
;;;9300   			}
;;;9301   	
;;;9302   		u_necc=UB0;
;;;9303   		}
;;;9304   
;;;9305   	else if(BAT_TYPE==3)
;;;9306   		{
;;;9307   		u_necc=U0B;
;;;9308   		
;;;9309   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9310   			{
;;;9311   			u_necc=UVZ;
;;;9312   			}
;;;9313   
;;;9314   		gran(&DU_LI_BAT,1,30);
;;;9315   
;;;9316   
;;;9317   		if(lakbNotErrorNum==0)
;;;9318   			{
;;;9319   			u_necc=U0B;
;;;9320   			}
;;;9321   		else 
;;;9322   			{
;;;9323   			signed short i;
;;;9324   			//signed short u_necc_max;
;;;9325   			//u_necc_max=0;
;;;9326   			char soc_flag=0;
;;;9327   
;;;9328   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9329   				{
;;;9330   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9331   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9332   				}
;;;9333   
;;;9334   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9335   			}
;;;9336   		gran(&u_necc,0,UB0);
;;;9337   		//gran(&u_necc,0,UB20);
;;;9338   		gran(&u_necc,0,540);
;;;9339   		}
;;;9340   	}
;;;9341   
;;;9342   #endif 
;;;9343   //u_necc=2356;
;;;9344   
;;;9345   #ifdef UKU_FSO
;;;9346   
;;;9347   if(unh_cnt0<10)
;;;9348   	{
;;;9349   	unh_cnt0++;
;;;9350   	if(unh_cnt0>=10)
;;;9351   		{
;;;9352   		unh_cnt0=0;
;;;9353   		b1Hz_unh=1;
;;;9354   		}
;;;9355   	}
;;;9356   
;;;9357   if(unh_cnt1<5)
;;;9358   	{
;;;9359   	unh_cnt1++;
;;;9360   	if(unh_cnt1==5)
;;;9361   		{
;;;9362   		unh_cnt1=0;
;;;9363   //		b2Hz_unh=1;
;;;9364   		}
;;;9365   	} 
;;;9366   
;;;9367   
;;;9368   
;;;9369   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9370   	{		
;;;9371   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9372   		{
;;;9373   		u_necc=mess_data[1];
;;;9374   		}		
;;;9375   	}
;;;9376   
;;;9377   
;;;9378   else if(b1Hz_unh)
;;;9379   	{
;;;9380   	b1Hz_unh=0;
;;;9381   
;;;9382   	if(BAT_TYPE==4)
;;;9383   		{
;;;9384   		u_necc=TELECORE2017_ULINECC;
;;;9385   		
;;;9386   	/**	if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9387   			{
;;;9388   			u_necc=UVZ;
;;;9389   			}*/
;;;9390   
;;;9391   		gran(&DU_LI_BAT,1,30);
;;;9392   
;;;9393   		/*
;;;9394   		if(lakbNotErrorNum==0)
;;;9395   			{
;;;9396   			u_necc=U0B;
;;;9397   			}
;;;9398   		else 
;;;9399   			{
;;;9400   			signed short i;
;;;9401   			//signed short u_necc_max;
;;;9402   			//u_necc_max=0;
;;;9403   			char soc_flag=0;
;;;9404   
;;;9405   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9406   				{
;;;9407   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9408   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9409   				}
;;;9410   
;;;9411   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9412   			}
;;;9413   		*/
;;;9414   		//u_necc=512;
;;;9415   		gran(&u_necc,0,UB0);
;;;9416   		//gran(&u_necc,0,UB20);
;;;9417   		gran(&u_necc,0,560);
;;;9418   		}
;;;9419   	}
;;;9420   
;;;9421   #endif //UKU_FSO
;;;9422   
;;;9423   
;;;9424   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9425   	{
;;;9426   	u_necc=speedChrgVolt;
;;;9427   	}
;;;9428   #endif//gran(&u_necc,400,UMAX);
;;;9429   
;;;9430   
;;;9431   
;;;9432   temp_L=(signed long) u_necc;
005cae  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9433   temp_L*=98L;
005cb2  f04f0162          MOV      r1,#0x62
005cb6  fb00f101          MUL      r1,r0,r1
;;;9434   temp_L/=100L;
005cba  f04f0264          MOV      r2,#0x64
005cbe  fb91f1f2          SDIV     r1,r1,r2
;;;9435   u_necc_dn=(signed short)temp_L;
005cc2  4bbe              LDR      r3,|L1.24508|
005cc4  8019              STRH     r1,[r3,#0]
;;;9436   
;;;9437   temp_L=(signed long) u_necc;
;;;9438   temp_L*=102L;
005cc6  f04f0166          MOV      r1,#0x66
005cca  fb00f001          MUL      r0,r0,r1
;;;9439   temp_L/=100L;
005cce  fb90f0f2          SDIV     r0,r0,r2
;;;9440   u_necc_up=(signed short)temp_L;
005cd2  49bb              LDR      r1,|L1.24512|
005cd4  8008              STRH     r0,[r1,#0]
;;;9441   /*
;;;9442   #ifdef IPS_SGEP_GAZPROM
;;;9443   u_necc=248;
;;;9444   #endif */
;;;9445   }
005cd6  bdf8              POP      {r3-r7,pc}
;;;9446   
                          ENDP

                  num_necc_hndl PROC
;;;9448   //-----------------------------------------------
;;;9449   void num_necc_hndl(void)
005cd8  e92d41f0          PUSH     {r4-r8,lr}
;;;9450   {
;;;9451   
;;;9452   static short num_necc_block_cnt;
;;;9453   if(num_necc_block_cnt) num_necc_block_cnt--;
005cdc  4ca6              LDR      r4,|L1.24440|
005cde  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005ce2  b110              CBZ      r0,|L1.23786|
005ce4  f1a00001          SUB      r0,r0,#1
005ce8  8720              STRH     r0,[r4,#0x38]
                  |L1.23786|
;;;9454   
;;;9455   Isumm_=Isumm;
005cea  48b6              LDR      r0,|L1.24516|
005cec  4db6              LDR      r5,|L1.24520|
005cee  8800              LDRH     r0,[r0,#0]  ; Isumm
005cf0  8028              STRH     r0,[r5,#0]
;;;9456   
;;;9457   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005cf2  4eb6              LDR      r6,|L1.24524|
005cf4  270a              MOVS     r7,#0xa
005cf6  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005cfa  2800              CMP      r0,#0
005cfc  da06              BGE      |L1.23820|
005cfe  f7fffffe          BL       abs
005d02  fb90f0f7          SDIV     r0,r0,r7
005d06  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d08  4408              ADD      r0,r0,r1
005d0a  8028              STRH     r0,[r5,#0]
                  |L1.23820|
;;;9458   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005d0c  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005d10  2800              CMP      r0,#0
005d12  da06              BGE      |L1.23842|
005d14  f7fffffe          BL       abs
005d18  fb90f0f7          SDIV     r0,r0,r7
005d1c  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d1e  4408              ADD      r0,r0,r1
005d20  8028              STRH     r0,[r5,#0]
                  |L1.23842|
;;;9459   
;;;9460   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005d22  49ab              LDR      r1,|L1.24528|
005d24  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005d28  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005d2c  fb90f1f1          SDIV     r1,r0,r1
005d30  f1010101          ADD      r1,r1,#1
005d34  b2c9              UXTB     r1,r1
005d36  77e1              STRB     r1,[r4,#0x1f]
;;;9461   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9462   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9463   
;;;9464   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005d38  4aa6              LDR      r2,|L1.24532|
005d3a  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005d3e  fb90f0f2          SDIV     r0,r0,r2
005d42  f1000001          ADD      r0,r0,#1
005d46  b2c2              UXTB     r2,r0
005d48  f8842020          STRB     r2,[r4,#0x20]
;;;9465   
;;;9466   if(num_necc_up>num_necc)
005d4c  48a2              LDR      r0,|L1.24536|
;;;9467   	{
;;;9468   	num_necc=num_necc_up;
;;;9469   	num_necc_block_cnt=60;
005d4e  f04f053c          MOV      r5,#0x3c
005d52  f9b03000          LDRSH    r3,[r0,#0]            ;9466  ; num_necc
005d56  4299              CMP      r1,r3                 ;9466
005d58  dd02              BLE      |L1.23904|
005d5a  8001              STRH     r1,[r0,#0]            ;9468
005d5c  8725              STRH     r5,[r4,#0x38]
005d5e  e005              B        |L1.23916|
                  |L1.23904|
;;;9470   	}
;;;9471   else if(num_necc_down<num_necc)
005d60  429a              CMP      r2,r3
005d62  da03              BGE      |L1.23916|
;;;9472   	{
;;;9473   	if(!num_necc_block_cnt)
005d64  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005d66  b909              CBNZ     r1,|L1.23916|
;;;9474   		{
;;;9475   		num_necc=num_necc_down;
005d68  8002              STRH     r2,[r0,#0]
;;;9476   		num_necc_block_cnt=60;
005d6a  8725              STRH     r5,[r4,#0x38]
                  |L1.23916|
;;;9477   		}
;;;9478   	}
;;;9479   
;;;9480   if(PAR) num_necc=NUMIST;
005d6c  499b              LDR      r1,|L1.24540|
005d6e  880a              LDRH     r2,[r1,#0]  ; PAR
005d70  497a              LDR      r1,|L1.24412|
005d72  b10a              CBZ      r2,|L1.23928|
005d74  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d76  8002              STRH     r2,[r0,#0]
                  |L1.23928|
;;;9481   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9482   if(bPARALLEL) num_necc=NUMIST;
005d78  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005d7c  b10a              CBZ      r2,|L1.23938|
005d7e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d80  8002              STRH     r2,[r0,#0]
                  |L1.23938|
;;;9483   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d82  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005d84  2a0a              CMP      r2,#0xa
005d86  d101              BNE      |L1.23948|
005d88  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d8a  8002              STRH     r2,[r0,#0]
                  |L1.23948|
;;;9484   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d8c  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005d8e  2a0a              CMP      r2,#0xa
005d90  d001              BEQ      |L1.23958|
005d92  2a0b              CMP      r2,#0xb
005d94  d101              BNE      |L1.23962|
                  |L1.23958|
005d96  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d98  8002              STRH     r2,[r0,#0]
                  |L1.23962|
;;;9485   #endif
;;;9486   
;;;9487   gran(&num_necc,1,NUMIST);
005d9a  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005d9e  e8bd41f0          POP      {r4-r8,lr}
005da2  2101              MOVS     r1,#1
005da4  488c              LDR      r0,|L1.24536|
005da6  f7ffbffe          B.W      gran
;;;9488   
;;;9489   }
;;;9490   
                          ENDP

                  cntrl_hndl PROC
;;;9493   //-----------------------------------------------
;;;9494   void cntrl_hndl(void)
005daa  e92d5ff0          PUSH     {r4-r12,lr}
;;;9495   {
;;;9496   
;;;9497   
;;;9498   
;;;9499   IZMAX_=IZMAX;
005dae  488c              LDR      r0,|L1.24544|
005db0  4c71              LDR      r4,|L1.24440|
005db2  8800              LDRH     r0,[r0,#0]  ; IZMAX
005db4  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9500   
;;;9501   //cntrl_hndl_plazma=10;
;;;9502   
;;;9503   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005db8  4877              LDR      r0,|L1.24472|
005dba  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005dbc  b918              CBNZ     r0,|L1.24006|
005dbe  4877              LDR      r0,|L1.24476|
005dc0  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005dc2  2802              CMP      r0,#2
005dc4  d103              BNE      |L1.24014|
                  |L1.24006|
005dc6  4887              LDR      r0,|L1.24548|
005dc8  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005dca  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24014|
;;;9504   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005dce  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005dd0  280a              CMP      r0,#0xa
005dd2  d103              BNE      |L1.24028|
005dd4  4884              LDR      r0,|L1.24552|
005dd6  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005dd8  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24028|
;;;9505   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005ddc  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005dde  280a              CMP      r0,#0xa
005de0  d103              BNE      |L1.24042|
005de2  4982              LDR      r1,|L1.24556|
005de4  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005de6  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.24042|
;;;9506   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005dea  280b              CMP      r0,#0xb
005dec  d103              BNE      |L1.24054|
005dee  4880              LDR      r0,|L1.24560|
005df0  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005df2  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24054|
;;;9507   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9508   
;;;9509   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005df6  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt
005dfa  b118              CBZ      r0,|L1.24068|
005dfc  f1a00001          SUB      r0,r0,#1
005e00  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.24068|
;;;9510   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005e04  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt_
005e08  b118              CBZ      r0,|L1.24082|
005e0a  f1a00001          SUB      r0,r0,#1
005e0e  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.24082|
;;;9511   
;;;9512   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005e12  486e              LDR      r0,|L1.24524|
005e14  f04f080a          MOV      r8,#0xa               ;9504
005e18  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005e1c  0789              LSLS     r1,r1,#30
005e1e  d103              BNE      |L1.24104|
005e20  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005e24  0780              LSLS     r0,r0,#30
005e26  d005              BEQ      |L1.24116|
                  |L1.24104|
005e28  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005e2c  fbb0f0f8          UDIV     r0,r0,r8
005e30  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24116|
;;;9513   
;;;9514   
;;;9515   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9516   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005e34  486f              LDR      r0,|L1.24564|
005e36  2601              MOVS     r6,#1
005e38  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005e3c  1e49              SUBS     r1,r1,#1
005e3e  2905              CMP      r1,#5
005e40  d300              BCC      |L1.24132|
005e42  8006              STRH     r6,[r0,#0]
                  |L1.24132|
;;;9517   if(ch_cnt0<(10*REG_SPEED))
005e44  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005e48  2500              MOVS     r5,#0                 ;9503
005e4a  eb000180          ADD      r1,r0,r0,LSL #2
005e4e  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005e50  ebb00f41          CMP      r0,r1,LSL #1
005e54  da08              BGE      |L1.24168|
;;;9518   	{
;;;9519   	ch_cnt0++;
005e56  f1000001          ADD      r0,r0,#1
005e5a  b2c0              UXTB     r0,r0
005e5c  7560              STRB     r0,[r4,#0x15]
;;;9520   	if(ch_cnt0>=10*REG_SPEED)
005e5e  ebb00f41          CMP      r0,r1,LSL #1
005e62  db01              BLT      |L1.24168|
;;;9521   		{
;;;9522   		ch_cnt0=0;
005e64  7565              STRB     r5,[r4,#0x15]
;;;9523   		b1Hz_ch=1;
005e66  75a6              STRB     r6,[r4,#0x16]
                  |L1.24168|
;;;9524   		}
;;;9525   	}
;;;9526   #endif
;;;9527   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9528   if(ch_cnt0<10)
;;;9529   	{
;;;9530   	ch_cnt0++;
;;;9531   	if(ch_cnt0>=10)
;;;9532   		{
;;;9533   		ch_cnt0=0;
;;;9534   		b1Hz_ch=1;
;;;9535   		}
;;;9536   	}
;;;9537   #endif
;;;9538   
;;;9539   
;;;9540   if(mess_find_unvol(MESS2CNTRL_HNDL))
005e68  20e1              MOVS     r0,#0xe1
005e6a  f7fffffe          BL       mess_find_unvol
;;;9541   	{
;;;9542   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9543   		{
;;;9544   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9545   		}
;;;9546   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9547   		{
;;;9548   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9549   		}
;;;9550   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9551   		{
;;;9552   		static char cntrlStatIsDownCnt;
;;;9553   		cntrl_stat--;
;;;9554   
;;;9555   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9556   			{
;;;9557   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9558   			}
;;;9559   		else 
;;;9560   			{
;;;9561   			cntrlStatIsDownCnt=0;
;;;9562   			}
;;;9563   
;;;9564   		}
;;;9565   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9566   		{
;;;9567   		cntrl_stat/*_new*/=mess_data[1];
;;;9568   		}
;;;9569   
;;;9570   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9571   		{
;;;9572   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9573   		if(bps_U>u_necc)
005e6e  f8dfc188          LDR      r12,|L1.24568|
005e72  4a42              LDR      r2,|L1.24444|
;;;9574   			{
;;;9575   			cntrl_hndl_plazma=11;
;;;9576   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9577   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9578   			}
;;;9579   		else if(bps_U<u_necc)
;;;9580   			{
;;;9581   			cntrl_hndl_plazma=12;	
;;;9582   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9583   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9584   			}
;;;9585   		#elif defined(UKU_220)
;;;9586   		if(load_U>u_necc)
;;;9587   			{
;;;9588   			cntrl_hndl_plazma=13;
;;;9589   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9590   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9591   			}
;;;9592   		else if(load_U<u_necc)
;;;9593   			{
;;;9594   			cntrl_hndl_plazma=14;	
;;;9595   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9596   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9597   			}
;;;9598   		#elif defined(UKU_220_V2)
;;;9599   		if(load_U>u_necc)
;;;9600   			{
;;;9601   			cntrl_hndl_plazma=15;
;;;9602   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9603   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9604   			}
;;;9605   		else if(load_U<u_necc)
;;;9606   			{
;;;9607   			cntrl_hndl_plazma=16;	
;;;9608   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9609   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9610   			}
;;;9611   		#else
;;;9612   
;;;9613   		if(load_U>u_necc)
;;;9614   			{
;;;9615   			cntrl_hndl_plazma=17;
;;;9616   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9617   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9618   			}
;;;9619   		else if(load_U<u_necc)
;;;9620   			{
;;;9621   			cntrl_hndl_plazma=18;	
;;;9622   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9623   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9624   			}
;;;9625   		#endif	
;;;9626   	 	}
;;;9627   
;;;9628   	/*gran(&cntrl_stat_new,10,1010);			
;;;9629   	cntrl_stat_old=cntrl_stat_new;
;;;9630   	cntrl_stat=cntrl_stat_new;*/
;;;9631   	}
;;;9632   
;;;9633   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9634   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005e74  f8df90e0          LDR      r9,|L1.24408|
;;;9635   	{
;;;9636   	cntrl_stat_new=cntrl_stat_old;
;;;9637   	cntrl_hndl_plazma=19;
;;;9638   	if((Ibmax/10)>(2*IZMAX_))
;;;9639   		{
;;;9640   		cntrl_hndl_plazma=20;
;;;9641             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9642   		else	cntrl_stat_new-=10;
;;;9643   		}		
;;;9644   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9645   		{
;;;9646   		cntrl_hndl_plazma=21;
;;;9647             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9648             else	cntrl_stat_new-=3;
;;;9649   		}   
;;;9650   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9651   		{
;;;9652   		cntrl_hndl_plazma=22;
;;;9653   		cntrl_stat_new--;
;;;9654   		}
;;;9655   		
;;;9656   	else if(bps_U<u_necc)
;;;9657   		{
;;;9658   		cntrl_hndl_plazma=23;
;;;9659   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9660   			{
;;;9661   			cntrl_hndl_plazma=24;
;;;9662   			if(Ibmax<0)
;;;9663   				{
;;;9664   				cntrl_hndl_plazma=25;
;;;9665                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9666   				else cntrl_stat_new+=10;
;;;9667   				}
;;;9668   			else if(Ibmax<(IZMAX_*5))
;;;9669   				{
;;;9670   				cntrl_hndl_plazma=26;
;;;9671                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9672   				else	cntrl_stat_new+=2;
;;;9673   				}
;;;9674   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9675   				{
;;;9676   				cntrl_hndl_plazma=27;
;;;9677   				cntrl_stat_new++;
;;;9678   				}					
;;;9679   			}
;;;9680   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9681   			{
;;;9682   			cntrl_hndl_plazma=28;
;;;9683   			if(Ibmax<(IZMAX_*5))
;;;9684   				{
;;;9685   				cntrl_hndl_plazma=29;
;;;9686                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9687   				else	cntrl_stat_new+=2;
;;;9688   				}
;;;9689   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9690   				{
;;;9691   				cntrl_hndl_plazma=30;
;;;9692   				cntrl_stat_new++;
;;;9693   				}					
;;;9694   			}	
;;;9695   		else if(bps_U<(u_necc-1))
;;;9696   			{
;;;9697   			cntrl_hndl_plazma=31;
;;;9698   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9699   				{
;;;9700   				cntrl_hndl_plazma=32;
;;;9701   				cntrl_stat_new++;
;;;9702   				}					
;;;9703   			}					
;;;9704   		}	
;;;9705   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9706   		{ 	
;;;9707   		cntrl_hndl_plazma=33;
;;;9708   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9709   			{
;;;9710   			cntrl_hndl_plazma=34;
;;;9711                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9712   			else	cntrl_stat_new-=10;
;;;9713   			}
;;;9714   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9715   			{
;;;9716   			cntrl_hndl_plazma=35;
;;;9717                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9718   			else cntrl_stat_new-=2;
;;;9719   			}	
;;;9720   		else if(bps_U>(u_necc+1))
;;;9721   			{
;;;9722   			cntrl_hndl_plazma=36;
;;;9723   			cntrl_stat_new--;
;;;9724   			}					
;;;9725   		}
;;;9726   
;;;9727   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9728   		{
;;;9729   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9730   		}
;;;9731   
;;;9732   	gran(&cntrl_stat_new,10,1010);
;;;9733   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9734   	cntrl_stat_old=cntrl_stat_new;
;;;9735   	cntrl_stat=cntrl_stat_new;
;;;9736   	
;;;9737   	if(ICA_EN==0)
;;;9738   		{
;;;9739   		if(ica_cntrl_hndl_cnt)
005e78  4f60              LDR      r7,|L1.24572|
005e7a  b398              CBZ      r0,|L1.24292|
005e7c  4938              LDR      r1,|L1.24416|
005e7e  6808              LDR      r0,[r1,#0]            ;9542  ; mess_data
005e80  2864              CMP      r0,#0x64              ;9542
005e82  d008              BEQ      |L1.24214|
005e84  2869              CMP      r0,#0x69              ;9546
005e86  d00b              BEQ      |L1.24224|
005e88  286e              CMP      r0,#0x6e              ;9550
005e8a  d00f              BEQ      |L1.24236|
005e8c  28e5              CMP      r0,#0xe5              ;9565
005e8e  d02c              BEQ      |L1.24298|
005e90  28e6              CMP      r0,#0xe6              ;9570
005e92  d02d              BEQ      |L1.24304|
                  |L1.24212|
005e94  e22b              B        |L1.25326|
                  |L1.24214|
005e96  6848              LDR      r0,[r1,#4]            ;9544  ; mess_data
005e98  8ea1              LDRH     r1,[r4,#0x34]         ;9544  ; cntrl_stat_old
005e9a  4408              ADD      r0,r0,r1              ;9544
005e9c  8660              STRH     r0,[r4,#0x32]         ;9544
005e9e  e226              B        |L1.25326|
                  |L1.24224|
005ea0  6848              LDR      r0,[r1,#4]            ;9548  ; mess_data
005ea2  8ea1              LDRH     r1,[r4,#0x34]         ;9548  ; cntrl_stat_old
005ea4  eba10000          SUB      r0,r1,r0              ;9548
005ea8  8660              STRH     r0,[r4,#0x32]         ;9548
005eaa  e220              B        |L1.25326|
                  |L1.24236|
005eac  8e60              LDRH     r0,[r4,#0x32]         ;9553  ; cntrl_stat
005eae  f1a00001          SUB      r0,r0,#1              ;9553
005eb2  b200              SXTH     r0,r0                 ;9553
005eb4  8660              STRH     r0,[r4,#0x32]         ;9553
005eb6  281e              CMP      r0,#0x1e              ;9555
005eb8  dd07              BLE      |L1.24266|
005eba  4851              LDR      r0,|L1.24576|
005ebc  4951              LDR      r1,|L1.24580|
005ebe  f9b00000          LDRSH    r0,[r0,#0]            ;9555  ; load_U
005ec2  f9b11000          LDRSH    r1,[r1,#0]            ;9555  ; USIGN
005ec6  4288              CMP      r0,r1                 ;9555
005ec8  da0d              BGE      |L1.24294|
                  |L1.24266|
005eca  7be0              LDRB     r0,[r4,#0xf]          ;9557  ; cntrlStatIsDownCnt
005ecc  1c40              ADDS     r0,r0,#1              ;9557
005ece  b2c0              UXTB     r0,r0                 ;9557
005ed0  73e0              STRB     r0,[r4,#0xf]          ;9557
005ed2  28fa              CMP      r0,#0xfa              ;9557
005ed4  d1de              BNE      |L1.24212|
005ed6  230a              MOVS     r3,#0xa               ;9557
005ed8  2200              MOVS     r2,#0                 ;9557
005eda  21e7              MOVS     r1,#0xe7              ;9557
005edc  20e6              MOVS     r0,#0xe6              ;9557
005ede  f7fffffe          BL       mess_send
005ee2  e204              B        |L1.25326|
                  |L1.24292|
005ee4  e09c              B        |L1.24608|
                  |L1.24294|
005ee6  73e5              STRB     r5,[r4,#0xf]          ;9561
005ee8  e201              B        |L1.25326|
                  |L1.24298|
005eea  6848              LDR      r0,[r1,#4]            ;9567  ; mess_data
005eec  8660              STRH     r0,[r4,#0x32]         ;9567
005eee  e1fe              B        |L1.25326|
                  |L1.24304|
005ef0  f9bc0000          LDRSH    r0,[r12,#0]           ;9573  ; bps_U
005ef4  f9b21000          LDRSH    r1,[r2,#0]            ;9573  ; u_necc
005ef8  4288              CMP      r0,r1                 ;9573
005efa  dd1a              BLE      |L1.24370|
005efc  f04f020b          MOV      r2,#0xb               ;9575
005f00  f884202e          STRB     r2,[r4,#0x2e]         ;9575
005f04  eba00001          SUB      r0,r0,r1              ;9576
005f08  2828              CMP      r0,#0x28              ;9576
005f0a  dd07              BLE      |L1.24348|
005f0c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9576  ; cntrl_stat
005f10  2800              CMP      r0,#0                 ;9576
005f12  dd03              BLE      |L1.24348|
005f14  f1a00005          SUB      r0,r0,#5              ;9576
005f18  8660              STRH     r0,[r4,#0x32]         ;9576
005f1a  e1e8              B        |L1.25326|
                  |L1.24348|
005f1c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9577  ; cntrl_stat
005f20  2800              CMP      r0,#0                 ;9577
005f22  d0b7              BEQ      |L1.24212|
005f24  7da1              LDRB     r1,[r4,#0x16]         ;9577  ; b1Hz_ch
005f26  2900              CMP      r1,#0                 ;9577
005f28  d0b4              BEQ      |L1.24212|
005f2a  f1a00001          SUB      r0,r0,#1              ;9577
005f2e  8660              STRH     r0,[r4,#0x32]         ;9577
                  |L1.24368|
005f30  e1dd              B        |L1.25326|
                  |L1.24370|
005f32  daaf              BGE      |L1.24212|
005f34  f04f020c          MOV      r2,#0xc               ;9581
005f38  f884202e          STRB     r2,[r4,#0x2e]         ;9581
005f3c  eba10000          SUB      r0,r1,r0              ;9582
005f40  2828              CMP      r0,#0x28              ;9582
005f42  dd61              BLE      |L1.24584|
005f44  f9b40032          LDRSH    r0,[r4,#0x32]         ;9582  ; cntrl_stat
005f48  f24031f7          MOV      r1,#0x3f7             ;9582
005f4c  4288              CMP      r0,r1                 ;9582
005f4e  da5b              BGE      |L1.24584|
005f50  f1000005          ADD      r0,r0,#5              ;9582
005f54  8660              STRH     r0,[r4,#0x32]         ;9582
                  |L1.24406|
005f56  e1ca              B        |L1.25326|
                  |L1.24408|
                          DCD      bps
                  |L1.24412|
                          DCD      NUMIST
                  |L1.24416|
                          DCD      mess_data
                  |L1.24420|
                          DCD      uavt_set_result_stat
                  |L1.24424|
                          DCD      avt_plazma
                  |L1.24428|
                          DCD      TERMOKOMPENS
                  |L1.24432|
                          DCD      UB20
                  |L1.24436|
                          DCD      UVZ
                  |L1.24440|
                          DCD      ||area_number.25||
                  |L1.24444|
                          DCD      u_necc
                  |L1.24448|
                          DCD      ND_EXT
                  |L1.24452|
                          DCD      t_ext
                  |L1.24456|
                          DCD      mat_temper
                  |L1.24460|
                          DCD      UB0
                  |L1.24464|
                          DCD      sk_stat
                  |L1.24468|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24472|
                          DCD      speedChIsOn
                  |L1.24476|
                          DCD      sp_ch_stat
                  |L1.24480|
                          DCD      speedChrgVolt
                  |L1.24484|
                          DCD      hv_vz_stat
                  |L1.24488|
                          DCD      UZ_U
                  |L1.24492|
                          DCD      FZ_U1
                  |L1.24496|
                          DCD      FZ_U2
                  |L1.24500|
                          DCD      uavt_set_stat
                  |L1.24504|
                          DCD      U_AVT
                  |L1.24508|
                          DCD      u_necc_dn
                  |L1.24512|
                          DCD      u_necc_up
                  |L1.24516|
                          DCD      Isumm
                  |L1.24520|
                          DCD      Isumm_
                  |L1.24524|
                          DCD      bat
                  |L1.24528|
                          DCD      IMAX
                  |L1.24532|
                          DCD      IMIN
                  |L1.24536|
                          DCD      num_necc
                  |L1.24540|
                          DCD      PAR
                  |L1.24544|
                          DCD      IZMAX
                  |L1.24548|
                          DCD      speedChrgCurr
                  |L1.24552|
                          DCD      UZ_IMAX
                  |L1.24556|
                          DCD      FZ_IMAX1
                  |L1.24560|
                          DCD      FZ_IMAX2
                  |L1.24564|
                          DCD      REG_SPEED
                  |L1.24568|
                          DCD      bps_U
                  |L1.24572|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24576|
                          DCD      load_U
                  |L1.24580|
                          DCD      USIGN
                  |L1.24584|
006008  f9b40032          LDRSH    r0,[r4,#0x32]         ;9583  ; cntrl_stat
00600c  f5b07f7f          CMP      r0,#0x3fc             ;9583
006010  da8e              BGE      |L1.24368|
006012  7da1              LDRB     r1,[r4,#0x16]         ;9583  ; b1Hz_ch
006014  2900              CMP      r1,#0                 ;9583
006016  d08b              BEQ      |L1.24368|
006018  f1000001          ADD      r0,r0,#1              ;9583
00601c  8660              STRH     r0,[r4,#0x32]         ;9583
00601e  e166              B        |L1.25326|
                  |L1.24608|
006020  7da0              LDRB     r0,[r4,#0x16]         ;9634  ; b1Hz_ch
006022  2800              CMP      r0,#0                 ;9634
006024  d084              BEQ      |L1.24368|
006026  48fd              LDR      r0,|L1.25628|
006028  8800              LDRH     r0,[r0,#0]            ;9634  ; bIBAT_SMKLBR
00602a  b118              CBZ      r0,|L1.24628|
00602c  f8990323          LDRB     r0,[r9,#0x323]        ;9634  ; bps
006030  2828              CMP      r0,#0x28              ;9634
006032  d990              BLS      |L1.24406|
                  |L1.24628|
006034  f104042e          ADD      r4,r4,#0x2e           ;9636
006038  f9b40006          LDRSH    r0,[r4,#6]            ;9636  ; cntrl_stat_old
00603c  8360              STRH     r0,[r4,#0x1a]         ;9636
00603e  f04f0113          MOV      r1,#0x13              ;9637
006042  7021              STRB     r1,[r4,#0]            ;9637
006044  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9638  ; Ibmax
006048  8be3              LDRH     r3,[r4,#0x1e]         ;9638  ; IZMAX_
00604a  fb91f8f8          SDIV     r8,r1,r8              ;9638
00604e  f1a4042e          SUB      r4,r4,#0x2e           ;9638
006052  ebb80f43          CMP      r8,r3,LSL #1          ;9638
006056  dd10              BLE      |L1.24698|
006058  f04f0114          MOV      r1,#0x14              ;9640
00605c  f884102e          STRB     r1,[r4,#0x2e]         ;9640
006060  f8b41070          LDRH     r1,[r4,#0x70]         ;9641  ; cntrl_stat_blok_cnt
006064  b121              CBZ      r1,|L1.24688|
006066  f1a00001          SUB      r0,r0,#1              ;9641
00606a  f8a40048          STRH     r0,[r4,#0x48]         ;9641
00606e  e102              B        |L1.25206|
                  |L1.24688|
006070  f1a0000a          SUB      r0,r0,#0xa            ;9642
006074  f8a40048          STRH     r0,[r4,#0x48]         ;9642
006078  e0fd              B        |L1.25206|
                  |L1.24698|
00607a  da14              BGE      |L1.24742|
00607c  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9644
006080  458a              CMP      r10,r1                ;9644
006082  da10              BGE      |L1.24742|
006084  f04f0115          MOV      r1,#0x15              ;9646
006088  f884102e          STRB     r1,[r4,#0x2e]         ;9646
00608c  f8b41070          LDRH     r1,[r4,#0x70]         ;9647  ; cntrl_stat_blok_cnt
006090  b121              CBZ      r1,|L1.24732|
006092  f1a00001          SUB      r0,r0,#1              ;9647
006096  f8a40048          STRH     r0,[r4,#0x48]         ;9647
00609a  e0ec              B        |L1.25206|
                  |L1.24732|
00609c  f1a00003          SUB      r0,r0,#3              ;9648
0060a0  f8a40048          STRH     r0,[r4,#0x48]         ;9648
0060a4  e0e7              B        |L1.25206|
                  |L1.24742|
0060a6  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9650
0060aa  458a              CMP      r10,r1                ;9650
0060ac  dd0a              BLE      |L1.24772|
0060ae  4598              CMP      r8,r3                 ;9650
0060b0  dd08              BLE      |L1.24772|
0060b2  f04f0116          MOV      r1,#0x16              ;9652
0060b6  f884102e          STRB     r1,[r4,#0x2e]         ;9652
0060ba  f1a00001          SUB      r0,r0,#1              ;9653
0060be  f8a40048          STRH     r0,[r4,#0x48]         ;9653
0060c2  e0d8              B        |L1.25206|
                  |L1.24772|
0060c4  f9bcc000          LDRSH    r12,[r12,#0]          ;9656  ; bps_U
0060c8  f9b22000          LDRSH    r2,[r2,#0]            ;9656  ; u_necc
0060cc  f8df8350          LDR      r8,|L1.25632|
0060d0  f8dfb350          LDR      r11,|L1.25636|
0060d4  4594              CMP      r12,r2                ;9656
0060d6  da72              BGE      |L1.25022|
0060d8  f04f0a17          MOV      r10,#0x17             ;9658
0060dc  f884a02e          STRB     r10,[r4,#0x2e]        ;9658
0060e0  f9b88000          LDRSH    r8,[r8,#0]            ;9659  ; UB0
0060e4  f9bba000          LDRSH    r10,[r11,#0]          ;9659  ; UB20
0060e8  eba8080a          SUB      r8,r8,r10             ;9659
0060ec  eba20a08          SUB      r10,r2,r8             ;9659
0060f0  45e2              CMP      r10,r12               ;9659
0060f2  dd37              BLE      |L1.24932|
0060f4  f04f0218          MOV      r2,#0x18              ;9661
0060f8  f884202e          STRB     r2,[r4,#0x2e]         ;9661
0060fc  2900              CMP      r1,#0                 ;9662
0060fe  da10              BGE      |L1.24866|
006100  f04f0119          MOV      r1,#0x19              ;9664
006104  f884102e          STRB     r1,[r4,#0x2e]         ;9664
006108  f8b41070          LDRH     r1,[r4,#0x70]         ;9665  ; cntrl_stat_blok_cnt
00610c  b121              CBZ      r1,|L1.24856|
00610e  f1000001          ADD      r0,r0,#1              ;9665
006112  f8a40048          STRH     r0,[r4,#0x48]         ;9665
006116  e0ae              B        |L1.25206|
                  |L1.24856|
006118  f100000a          ADD      r0,r0,#0xa            ;9666
00611c  f8a40048          STRH     r0,[r4,#0x48]         ;9666
006120  e0a9              B        |L1.25206|
                  |L1.24866|
006122  eb030283          ADD      r2,r3,r3,LSL #2       ;9668
006126  428a              CMP      r2,r1                 ;9668
006128  dd10              BLE      |L1.24908|
00612a  f04f011a          MOV      r1,#0x1a              ;9670
00612e  f884102e          STRB     r1,[r4,#0x2e]         ;9670
006132  f8b41070          LDRH     r1,[r4,#0x70]         ;9671  ; cntrl_stat_blok_cnt
006136  b121              CBZ      r1,|L1.24898|
006138  f1000001          ADD      r0,r0,#1              ;9671
00613c  f8a40048          STRH     r0,[r4,#0x48]         ;9671
006140  e099              B        |L1.25206|
                  |L1.24898|
006142  f1000002          ADD      r0,r0,#2              ;9672
006146  f8a40048          STRH     r0,[r4,#0x48]         ;9672
00614a  e094              B        |L1.25206|
                  |L1.24908|
00614c  ebb10f42          CMP      r1,r2,LSL #1          ;9674
006150  da07              BGE      |L1.24930|
006152  f04f011b          MOV      r1,#0x1b              ;9676
006156  f884102e          STRB     r1,[r4,#0x2e]         ;9676
00615a  f1000001          ADD      r0,r0,#1              ;9677
00615e  f8a40048          STRH     r0,[r4,#0x48]         ;9677
                  |L1.24930|
006162  e088              B        |L1.25206|
                  |L1.24932|
006164  ea4f7ae8          ASR      r10,r8,#31            ;9680
006168  eb08789a          ADD      r8,r8,r10,LSR #30     ;9680
00616c  eba208a8          SUB      r8,r2,r8,ASR #2       ;9680
006170  45e0              CMP      r8,r12                ;9680
006172  dd25              BLE      |L1.25024|
006174  f04f021c          MOV      r2,#0x1c              ;9682
006178  f884202e          STRB     r2,[r4,#0x2e]         ;9682
00617c  eb030283          ADD      r2,r3,r3,LSL #2       ;9683
006180  428a              CMP      r2,r1                 ;9683
006182  dd10              BLE      |L1.24998|
006184  f04f011d          MOV      r1,#0x1d              ;9685
006188  f884102e          STRB     r1,[r4,#0x2e]         ;9685
00618c  f8b41070          LDRH     r1,[r4,#0x70]         ;9686  ; cntrl_stat_blok_cnt
006190  b121              CBZ      r1,|L1.24988|
006192  f1000001          ADD      r0,r0,#1              ;9686
006196  f8a40048          STRH     r0,[r4,#0x48]         ;9686
00619a  e06c              B        |L1.25206|
                  |L1.24988|
00619c  f1000002          ADD      r0,r0,#2              ;9687
0061a0  f8a40048          STRH     r0,[r4,#0x48]         ;9687
0061a4  e067              B        |L1.25206|
                  |L1.24998|
0061a6  ebb10f42          CMP      r1,r2,LSL #1          ;9689
0061aa  da64              BGE      |L1.25206|
0061ac  f04f011e          MOV      r1,#0x1e              ;9691
0061b0  f884102e          STRB     r1,[r4,#0x2e]         ;9691
0061b4  f1000001          ADD      r0,r0,#1              ;9692
0061b8  f8a40048          STRH     r0,[r4,#0x48]         ;9692
0061bc  e05b              B        |L1.25206|
                  |L1.25022|
0061be  e014              B        |L1.25066|
                  |L1.25024|
0061c0  1e52              SUBS     r2,r2,#1              ;9695
0061c2  4594              CMP      r12,r2                ;9695
0061c4  da57              BGE      |L1.25206|
0061c6  f04f021f          MOV      r2,#0x1f              ;9697
0061ca  f884202e          STRB     r2,[r4,#0x2e]         ;9697
0061ce  eb030283          ADD      r2,r3,r3,LSL #2       ;9698
0061d2  ebb10f42          CMP      r1,r2,LSL #1          ;9698
0061d6  da4e              BGE      |L1.25206|
0061d8  f04f0120          MOV      r1,#0x20              ;9700
0061dc  f884102e          STRB     r1,[r4,#0x2e]         ;9700
0061e0  f1000001          ADD      r0,r0,#1              ;9701
0061e4  f8a40048          STRH     r0,[r4,#0x48]         ;9701
0061e8  e045              B        |L1.25206|
                  |L1.25066|
0061ea  dd44              BLE      |L1.25206|
0061ec  f04f0121          MOV      r1,#0x21              ;9707
0061f0  f884102e          STRB     r1,[r4,#0x2e]         ;9707
0061f4  f9b81000          LDRSH    r1,[r8,#0]            ;9708  ; UB0
0061f8  f9bb3000          LDRSH    r3,[r11,#0]           ;9708  ; UB20
0061fc  eba10103          SUB      r1,r1,r3              ;9708
006200  eb010302          ADD      r3,r1,r2              ;9708
006204  4563              CMP      r3,r12                ;9708
006206  da13              BGE      |L1.25136|
006208  f04f0122          MOV      r1,#0x22              ;9710
00620c  f884102e          STRB     r1,[r4,#0x2e]         ;9710
006210  f8b41070          LDRH     r1,[r4,#0x70]         ;9711  ; cntrl_stat_blok_cnt
006214  b939              CBNZ     r1,|L1.25126|
006216  4984              LDR      r1,|L1.25640|
006218  8809              LDRH     r1,[r1,#0]            ;9711  ; TERMOKOMPENS
00621a  b121              CBZ      r1,|L1.25126|
00621c  f1a0000a          SUB      r0,r0,#0xa            ;9712
006220  f8a40048          STRH     r0,[r4,#0x48]         ;9712
006224  e027              B        |L1.25206|
                  |L1.25126|
006226  f1a00001          SUB      r0,r0,#1              ;9711
00622a  f8a40048          STRH     r0,[r4,#0x48]         ;9711
00622e  e022              B        |L1.25206|
                  |L1.25136|
006230  17cb              ASRS     r3,r1,#31             ;9714
006232  eb017193          ADD      r1,r1,r3,LSR #30      ;9714
006236  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9714
00623a  4561              CMP      r1,r12                ;9714
00623c  da10              BGE      |L1.25184|
00623e  f04f0123          MOV      r1,#0x23              ;9716
006242  f884102e          STRB     r1,[r4,#0x2e]         ;9716
006246  f8b41070          LDRH     r1,[r4,#0x70]         ;9717  ; cntrl_stat_blok_cnt
00624a  b121              CBZ      r1,|L1.25174|
00624c  f1a00001          SUB      r0,r0,#1              ;9717
006250  f8a40048          STRH     r0,[r4,#0x48]         ;9717
006254  e00f              B        |L1.25206|
                  |L1.25174|
006256  f1a00002          SUB      r0,r0,#2              ;9718
00625a  f8a40048          STRH     r0,[r4,#0x48]         ;9718
00625e  e00a              B        |L1.25206|
                  |L1.25184|
006260  1c52              ADDS     r2,r2,#1              ;9720
006262  4594              CMP      r12,r2                ;9720
006264  dd07              BLE      |L1.25206|
006266  f04f0124          MOV      r1,#0x24              ;9722
00626a  f884102e          STRB     r1,[r4,#0x2e]         ;9722
00626e  f1a00001          SUB      r0,r0,#1              ;9723
006272  f8a40048          STRH     r0,[r4,#0x48]         ;9723
                  |L1.25206|
006276  486d              LDR      r0,|L1.25644|
006278  7961              LDRB     r1,[r4,#5]            ;9727  ; vz1_stat
00627a  7800              LDRB     r0,[r0,#0]            ;9727  ; hv_vz_stat
00627c  4308              ORRS     r0,r0,r1              ;9727
00627e  79e1              LDRB     r1,[r4,#7]            ;9727  ; vz2_stat
006280  4308              ORRS     r0,r0,r1              ;9727
006282  d10e              BNE      |L1.25250|
006284  486a              LDR      r0,|L1.25648|
006286  7840              LDRB     r0,[r0,#1]            ;9729  ; sk_stat
006288  2801              CMP      r0,#1                 ;9729
00628a  d10a              BNE      |L1.25250|
00628c  4869              LDR      r0,|L1.25652|
00628e  7840              LDRB     r0,[r0,#1]            ;9729  ; sk_stat_old
006290  b938              CBNZ     r0,|L1.25250|
006292  4869              LDR      r0,|L1.25656|
006294  8800              LDRH     r0,[r0,#0]            ;9729  ; VZ_KIND
006296  2801              CMP      r0,#1                 ;9729
006298  d103              BNE      |L1.25250|
00629a  f04f0032          MOV      r0,#0x32              ;9729
00629e  f8a40048          STRH     r0,[r4,#0x48]         ;9729
                  |L1.25250|
0062a2  f24032f2          MOV      r2,#0x3f2             ;9732
0062a6  210a              MOVS     r1,#0xa               ;9732
0062a8  4864              LDR      r0,|L1.25660|
0062aa  f7fffffe          BL       gran
0062ae  4864              LDR      r0,|L1.25664|
0062b0  8800              LDRH     r0,[r0,#0]            ;9733  ; net_av_2min_timer
0062b2  b110              CBZ      r0,|L1.25274|
0062b4  8ea0              LDRH     r0,[r4,#0x34]         ;9733  ; cntrl_stat_old
0062b6  f8a40048          STRH     r0,[r4,#0x48]         ;9733
                  |L1.25274|
0062ba  f8b40048          LDRH     r0,[r4,#0x48]         ;9734  ; cntrl_stat_new
0062be  86a0              STRH     r0,[r4,#0x34]         ;9734
0062c0  8660              STRH     r0,[r4,#0x32]         ;9735
0062c2  4860              LDR      r0,|L1.25668|
0062c4  f9b00000          LDRSH    r0,[r0,#0]            ;9737  ; ICA_EN
0062c8  b938              CBNZ     r0,|L1.25306|
0062ca  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0062cc  b129              CBZ      r1,|L1.25306|
;;;9740   			{
;;;9741   			cntrl_stat = ica_cntrl_hndl;
0062ce  495e              LDR      r1,|L1.25672|
0062d0  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0062d2  8661              STRH     r1,[r4,#0x32]
;;;9742   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0062d4  f8a41048          STRH     r1,[r4,#0x48]
;;;9743   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0062d8  86a1              STRH     r1,[r4,#0x34]
                  |L1.25306|
;;;9744   			}
;;;9745   		}
;;;9746   	
;;;9747   	if((ICA_EN==1)||(ICA_EN==2))
0062da  2801              CMP      r0,#1
0062dc  d001              BEQ      |L1.25314|
0062de  2802              CMP      r0,#2
0062e0  d105              BNE      |L1.25326|
                  |L1.25314|
;;;9748   		{
;;;9749   		cntrl_stat=cntrl_stat_new+ica_u_necc;
0062e2  495a              LDR      r1,|L1.25676|
0062e4  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
0062e8  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
0062ea  4408              ADD      r0,r0,r1
0062ec  8660              STRH     r0,[r4,#0x32]
                  |L1.25326|
;;;9750   		}			
;;;9751   	}
;;;9752   #else
;;;9753   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9754   	{
;;;9755   	cntrl_hndl_plazma=37;
;;;9756   	cntrl_stat_new=cntrl_stat_old;
;;;9757   	
;;;9758   	if((Ibmax/10)>(2*IZMAX_))
;;;9759   		{
;;;9760   		cntrl_hndl_plazma=38;
;;;9761             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9762   		else	cntrl_stat_new-=10;
;;;9763   		}		
;;;9764   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9765   		{
;;;9766   		cntrl_hndl_plazma=39;
;;;9767             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9768             else	cntrl_stat_new-=3;
;;;9769   		}   
;;;9770   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9771   		{
;;;9772   		cntrl_hndl_plazma=40;
;;;9773   		cntrl_stat_new--;
;;;9774   		}
;;;9775   		
;;;9776   	else if(load_U<u_necc)
;;;9777   		{
;;;9778   		cntrl_hndl_plazma=41;
;;;9779   		if(load_U<(u_necc-(UB0-UB20)))
;;;9780   			{
;;;9781   			cntrl_hndl_plazma=42;
;;;9782   			if(Ibmax<0)
;;;9783   				{
;;;9784   				cntrl_hndl_plazma=43;
;;;9785                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9786   				else cntrl_stat_new+=10;
;;;9787   				}
;;;9788   			else if(Ibmax<(IZMAX_*5))
;;;9789   				{
;;;9790   				cntrl_hndl_plazma=44;
;;;9791                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9792   				else	cntrl_stat_new+=2;
;;;9793   				}
;;;9794   			else if(Ibmax<((IZMAX_*95)/10))
;;;9795   				{
;;;9796   				cntrl_hndl_plazma=45;
;;;9797   				cntrl_stat_new++;
;;;9798   				}					
;;;9799   			}
;;;9800   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9801   			{
;;;9802   			cntrl_hndl_plazma=46;
;;;9803   			if(Ibmax<(IZMAX_*5))
;;;9804   				{
;;;9805   				cntrl_hndl_plazma=47;
;;;9806                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9807   				else	cntrl_stat_new+=2;
;;;9808   				}
;;;9809   			else if(Ibmax<((IZMAX_*95)/10))
;;;9810   				{
;;;9811   				cntrl_hndl_plazma=48;
;;;9812   				cntrl_stat_new++;
;;;9813   				}					
;;;9814   			}	
;;;9815   		else if(load_U<(u_necc-1))
;;;9816   			{
;;;9817   			cntrl_hndl_plazma=49;
;;;9818   			if(Ibmax<((IZMAX_*95)/10))
;;;9819   				{
;;;9820   				cntrl_hndl_plazma=50;
;;;9821   				cntrl_stat_new++;
;;;9822   				}					
;;;9823   			}					
;;;9824   		}	
;;;9825   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9826   		{
;;;9827   		cntrl_hndl_plazma=51;
;;;9828   		if(load_U>(u_necc+(UB0-UB20)))
;;;9829   			{
;;;9830   			cntrl_hndl_plazma=52;
;;;9831                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9832   			else	cntrl_stat_new-=10;
;;;9833   			}
;;;9834   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9835   			{
;;;9836   			cntrl_hndl_plazma=53;
;;;9837                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9838   			else cntrl_stat_new-=2;
;;;9839   			}	
;;;9840   		else if(load_U>(u_necc+1))
;;;9841   			{
;;;9842   			cntrl_hndl_plazma=54;
;;;9843   			cntrl_stat_new--;
;;;9844   			}					
;;;9845   		}
;;;9846   
;;;9847   	gran(&cntrl_stat_new,10,1022);
;;;9848   				
;;;9849   	cntrl_stat_old=cntrl_stat_new;
;;;9850   	cntrl_stat=cntrl_stat_new;	
;;;9851   	}
;;;9852   #endif
;;;9853   
;;;9854   iiii=0;
0062ee  7625              STRB     r5,[r4,#0x18]
;;;9855   for(i=0;i<NUMIST;i++)
0062f0  75e5              STRB     r5,[r4,#0x17]
0062f2  4857              LDR      r0,|L1.25680|
0062f4  f9b01000          LDRSH    r1,[r0,#0]
0062f8  e00c              B        |L1.25364|
                  |L1.25338|
;;;9856        {
;;;9857        if(bps[i]._cnt<30)iiii=1;
0062fa  eb0002c0          ADD      r2,r0,r0,LSL #3
0062fe  eb021200          ADD      r2,r2,r0,LSL #4
006302  eb090282          ADD      r2,r9,r2,LSL #2
006306  78d2              LDRB     r2,[r2,#3]
006308  2a1e              CMP      r2,#0x1e
00630a  d200              BCS      |L1.25358|
00630c  7626              STRB     r6,[r4,#0x18]
                  |L1.25358|
00630e  f1000001          ADD      r0,r0,#1              ;9855
006312  75e0              STRB     r0,[r4,#0x17]         ;9855
                  |L1.25364|
006314  7de0              LDRB     r0,[r4,#0x17]         ;9855  ; i
006316  4288              CMP      r0,r1                 ;9855
006318  dbef              BLT      |L1.25338|
;;;9858        }
;;;9859   
;;;9860   if(iiii==0)
00631a  7e20              LDRB     r0,[r4,#0x18]  ; iiii
00631c  b948              CBNZ     r0,|L1.25394|
;;;9861   	{
;;;9862   	cntrl_stat=620;	
;;;9863   	cntrl_stat_old=620;
;;;9864   	cntrl_stat_new=620;
;;;9865   	cntrl_stat=10*PWM_START;
00631e  484d              LDR      r0,|L1.25684|
006320  8800              LDRH     r0,[r0,#0]  ; PWM_START
006322  eb000080          ADD      r0,r0,r0,LSL #2
006326  ea4f0040          LSL      r0,r0,#1
00632a  8660              STRH     r0,[r4,#0x32]
;;;9866   	cntrl_stat_old=10*PWM_START;
00632c  86a0              STRH     r0,[r4,#0x34]
;;;9867   	cntrl_stat_new=10*PWM_START;
00632e  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25394|
;;;9868   	}
;;;9869   
;;;9870   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9871   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
006332  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
006336  b110              CBZ      r0,|L1.25406|
006338  f1a00001          SUB      r0,r0,#1
00633c  8038              STRH     r0,[r7,#0]
                  |L1.25406|
;;;9872   
;;;9873   
;;;9874   
;;;9875   #endif
;;;9876   
;;;9877   
;;;9878   gran(&cntrl_stat,10,1022); 
00633e  483f              LDR      r0,|L1.25660|
006340  f24032fe          MOV      r2,#0x3fe
006344  210a              MOVS     r1,#0xa
006346  3816              SUBS     r0,r0,#0x16
006348  f7fffffe          BL       gran
;;;9879   b1Hz_ch=0;
00634c  75a5              STRB     r5,[r4,#0x16]
                  |L1.25422|
;;;9880   }
00634e  e8bd9ff0          POP      {r4-r12,pc}
;;;9881   #endif
                          ENDP

                  ext_drv PROC
;;;10619  //-----------------------------------------------
;;;10620  void ext_drv(void)
006352  e92d5ff0          PUSH     {r4-r12,lr}
;;;10621  {
;;;10622  char i;
;;;10623  
;;;10624  #ifdef UKU_FSO
;;;10625  NUMSK=3;
;;;10626  #endif
;;;10627  
;;;10628  for(i=0;i<NUMSK;i++)
006356  f04f0000          MOV      r0,#0
00635a  4a40              LDR      r2,|L1.25692|
;;;10629  	{
;;;10630  	#ifdef UKU_MGTS
;;;10631  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10632  	#endif
;;;10633  	#ifdef UKU_RSTKM
;;;10634  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10635  	#endif
;;;10636  	#ifdef UKU_3U
;;;10637  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10638  	#endif
;;;10639  	#ifdef UKU_GLONASS
;;;10640  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10641  	#endif
;;;10642  	#ifdef UKU_KONTUR
;;;10643  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10644  	#endif
;;;10645  	#ifdef UKU_6U
;;;10646  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10647  	#endif
;;;10648  	#ifdef UKU_220
;;;10649  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10650  	#endif
;;;10651  	#ifdef UKU_220_V2
;;;10652  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10653  	#endif
;;;10654  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10655  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10656  	#endif
;;;10657  	#ifdef UKU_TELECORE2015	
;;;10658  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10659  	#endif
;;;10660  	#ifdef UKU_TELECORE2017
;;;10661  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10662  	#endif
;;;10663  	#ifdef IPS_SGEP_GAZPROM
;;;10664  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10665  	#endif		
;;;10666   	#ifdef UKU_FSO
;;;10667  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10668  	#endif	
;;;10669  		{
;;;10670  		if(sk_cnt[i]<10)
00635c  4b3e              LDR      r3,|L1.25688|
;;;10671  			{
;;;10672  			sk_cnt[i]++;
;;;10673  			if(sk_cnt[i]>=10)
;;;10674  				{
;;;10675  				sk_stat[i]=ssON;
00635e  4d34              LDR      r5,|L1.25648|
006360  f04f0a01          MOV      r10,#1
;;;10676  				}
;;;10677  			}
;;;10678  		else 
;;;10679  			{
;;;10680  			sk_cnt[i]=10;
006364  f04f0b0a          MOV      r11,#0xa
006368  4606              MOV      r6,r0                 ;10628
00636a  f9b24000          LDRSH    r4,[r2,#0]            ;10628
00636e  e025              B        |L1.25532|
                  |L1.25456|
006370  493b              LDR      r1,|L1.25696|
006372  4f3c              LDR      r7,|L1.25700|
006374  5c09              LDRB     r1,[r1,r0]            ;10655
006376  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10655
00637a  f5b16ffa          CMP      r1,#0x7d0             ;10655
00637e  da0e              BGE      |L1.25502|
006380  5619              LDRSB    r1,[r3,r0]            ;10670
006382  290a              CMP      r1,#0xa               ;10670
006384  da08              BGE      |L1.25496|
006386  f1010101          ADD      r1,r1,#1              ;10672
00638a  b249              SXTB     r1,r1                 ;10672
00638c  5419              STRB     r1,[r3,r0]            ;10672
00638e  290a              CMP      r1,#0xa               ;10673
006390  db11              BLT      |L1.25526|
006392  f805a000          STRB     r10,[r5,r0]           ;10675
006396  e00e              B        |L1.25526|
                  |L1.25496|
006398  f803b000          STRB     r11,[r3,r0]
00639c  e00b              B        |L1.25526|
                  |L1.25502|
;;;10681  			}
;;;10682                 
;;;10683  		}
;;;10684  	else
;;;10685  		{
;;;10686  		if(sk_cnt[i]>0)
00639e  5619              LDRSB    r1,[r3,r0]
0063a0  2900              CMP      r1,#0
0063a2  dd07              BLE      |L1.25524|
;;;10687  			{
;;;10688  			sk_cnt[i]--;
0063a4  f1a10101          SUB      r1,r1,#1
0063a8  b249              SXTB     r1,r1
0063aa  5419              STRB     r1,[r3,r0]
;;;10689  			if(sk_cnt[i]<=0)
0063ac  2900              CMP      r1,#0
0063ae  dc02              BGT      |L1.25526|
;;;10690  				{
;;;10691  				sk_stat[i]=ssOFF;
0063b0  542e              STRB     r6,[r5,r0]
0063b2  e000              B        |L1.25526|
                  |L1.25524|
;;;10692  				}
;;;10693  			}
;;;10694  		else 
;;;10695  			{
;;;10696  			sk_cnt[i]=0;
0063b4  541e              STRB     r6,[r3,r0]
                  |L1.25526|
0063b6  f1000001          ADD      r0,r0,#1              ;10628
0063ba  b2c0              UXTB     r0,r0                 ;10628
                  |L1.25532|
0063bc  42a0              CMP      r0,r4                 ;10628
0063be  dbd7              BLT      |L1.25456|
;;;10697  			}
;;;10698  		}
;;;10699  	}
;;;10700  
;;;10701  for(i=0;i<NUMSK;i++)
0063c0  f04f0400          MOV      r4,#0
;;;10702  	{
;;;10703  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10704  		{
;;;10705  		if(sk_av_cnt[i]<10)
0063c4  f8df90a0          LDR      r9,|L1.25704|
;;;10706  			{
;;;10707  			sk_av_cnt[i]++;
;;;10708  			if(sk_av_cnt[i]>=10)
;;;10709  				{
;;;10710  				sk_av_stat[i]=sasON;
0063c8  4f28              LDR      r7,|L1.25708|
;;;10711  				}
;;;10712  			}
;;;10713  		else 
;;;10714  			{
;;;10715  			sk_av_cnt[i]=10;
;;;10716  			}
;;;10717  		}
;;;10718  	else
;;;10719  		{
;;;10720  		if(sk_av_cnt[i]>=0)
;;;10721  			{
;;;10722  			sk_av_cnt[i]--;
;;;10723  			if(sk_av_cnt[i]<=0)
;;;10724  				{
;;;10725  				sk_av_stat[i]=sasOFF;
;;;10726  				}
;;;10727  			}
;;;10728  		else 
;;;10729  			{
;;;10730  			sk_av_cnt[i]=0;
;;;10731  			}
;;;10732  		}
;;;10733  
;;;10734  #ifndef UKU_KONTUR
;;;10735  	if(sk_av_stat_old[i]!=sk_av_stat[i])
0063ca  f8df80a4          LDR      r8,|L1.25712|
0063ce  e0b1              B        |L1.25908|
                  |L1.25552|
0063d0  4828              LDR      r0,|L1.25716|
0063d2  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10703
0063d6  b910              CBNZ     r0,|L1.25566|
0063d8  5d29              LDRB     r1,[r5,r4]            ;10703
0063da  2901              CMP      r1,#1                 ;10703
0063dc  d00f              BEQ      |L1.25598|
                  |L1.25566|
0063de  b108              CBZ      r0,|L1.25572|
0063e0  5d28              LDRB     r0,[r5,r4]            ;10703
0063e2  b160              CBZ      r0,|L1.25598|
                  |L1.25572|
0063e4  f9190004          LDRSB    r0,[r9,r4]            ;10720
0063e8  2800              CMP      r0,#0                 ;10720
0063ea  db48              BLT      |L1.25726|
0063ec  f1a00001          SUB      r0,r0,#1              ;10722
0063f0  b240              SXTB     r0,r0                 ;10722
0063f2  f8090004          STRB     r0,[r9,r4]            ;10722
0063f6  2800              CMP      r0,#0                 ;10723
0063f8  dc43              BGT      |L1.25730|
0063fa  553e              STRB     r6,[r7,r4]            ;10725
0063fc  e041              B        |L1.25730|
                  |L1.25598|
0063fe  f9190004          LDRSB    r0,[r9,r4]            ;10705
006402  280a              CMP      r0,#0xa               ;10705
006404  da38              BGE      |L1.25720|
006406  f1000001          ADD      r0,r0,#1              ;10707
00640a  b240              SXTB     r0,r0                 ;10707
00640c  f8090004          STRB     r0,[r9,r4]            ;10707
006410  280a              CMP      r0,#0xa               ;10708
006412  db36              BLT      |L1.25730|
006414  f807a004          STRB     r10,[r7,r4]           ;10710
006418  e033              B        |L1.25730|
00641a  0000              DCW      0x0000
                  |L1.25628|
                          DCD      bIBAT_SMKLBR
                  |L1.25632|
                          DCD      UB0
                  |L1.25636|
                          DCD      UB20
                  |L1.25640|
                          DCD      TERMOKOMPENS
                  |L1.25644|
                          DCD      hv_vz_stat
                  |L1.25648|
                          DCD      sk_stat
                  |L1.25652|
                          DCD      sk_stat_old
                  |L1.25656|
                          DCD      VZ_KIND
                  |L1.25660|
                          DCD      ||area_number.25||+0x48
                  |L1.25664|
                          DCD      net_av_2min_timer
                  |L1.25668|
                          DCD      ICA_EN
                  |L1.25672|
                          DCD      ica_cntrl_hndl
                  |L1.25676|
                          DCD      ica_u_necc
                  |L1.25680|
                          DCD      NUMIST
                  |L1.25684|
                          DCD      PWM_START
                  |L1.25688|
                          DCD      sk_cnt
                  |L1.25692|
                          DCD      NUMSK
                  |L1.25696|
                          DCD      ||area_number.19||
                  |L1.25700|
                          DCD      ||.bss||+0x40c
                  |L1.25704|
                          DCD      sk_av_cnt
                  |L1.25708|
                          DCD      sk_av_stat
                  |L1.25712|
                          DCD      sk_av_stat_old
                  |L1.25716|
                          DCD      SK_SIGN
                  |L1.25720|
006478  f809b004          STRB     r11,[r9,r4]           ;10715
00647c  e001              B        |L1.25730|
                  |L1.25726|
00647e  f8096004          STRB     r6,[r9,r4]            ;10730
                  |L1.25730|
006482  f8181004          LDRB     r1,[r8,r4]
006486  5d38              LDRB     r0,[r7,r4]
006488  4281              CMP      r1,r0
00648a  d04d              BEQ      |L1.25896|
;;;10736  		{
;;;10737  		plazma_sk++;
00648c  4af8              LDR      r2,|L1.26736|
00648e  8811              LDRH     r1,[r2,#0]  ; plazma_sk
006490  f1010101          ADD      r1,r1,#1
006494  8011              STRH     r1,[r2,#0]
;;;10738  		if(sk_av_stat[i]==sasON)
006496  2801              CMP      r0,#1
006498  d007              BEQ      |L1.25770|
;;;10739  			{
;;;10740  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10741  			else if(i==1)
;;;10742  				{
;;;10743  				#ifndef UKU_TELEKORE2017
;;;10744  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10745  				#endif
;;;10746  				#ifdef UKU_TELEKORE2017
;;;10747  				snmp_trap_send("Door open",15,2,1);
;;;10748  				#endif
;;;10749  				}
;;;10750  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10751  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10752  			}
;;;10753  		else 
;;;10754  			{
;;;10755  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
00649a  b354              CBZ      r4,|L1.25842|
;;;10756  			else if(i==1)
00649c  2c01              CMP      r4,#1
00649e  d02f              BEQ      |L1.25856|
;;;10757  				{
;;;10758  				#ifndef UKU_TELEKORE2017
;;;10759  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10760  				#endif
;;;10761  				#ifdef UKU_TELEKORE2017
;;;10762  				snmp_trap_send("Door open clear",15,2,0);
;;;10763  				#endif
;;;10764  				}
;;;10765  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0064a0  2c02              CMP      r4,#2
0064a2  d034              BEQ      |L1.25870|
;;;10766  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0064a4  2c03              CMP      r4,#3
0064a6  d039              BEQ      |L1.25884|
0064a8  e03e              B        |L1.25896|
                  |L1.25770|
0064aa  b134              CBZ      r4,|L1.25786|
0064ac  2c01              CMP      r4,#1                 ;10741
0064ae  d00b              BEQ      |L1.25800|
0064b0  2c02              CMP      r4,#2                 ;10750
0064b2  d010              BEQ      |L1.25814|
0064b4  2c03              CMP      r4,#3                 ;10751
0064b6  d015              BEQ      |L1.25828|
0064b8  e036              B        |L1.25896|
                  |L1.25786|
0064ba  2301              MOVS     r3,#1                 ;10740
0064bc  461a              MOV      r2,r3                 ;10740
0064be  210f              MOVS     r1,#0xf               ;10740
0064c0  a0ec              ADR      r0,|L1.26740|
0064c2  f7fffffe          BL       snmp_trap_send
0064c6  e02f              B        |L1.25896|
                  |L1.25800|
0064c8  2301              MOVS     r3,#1                 ;10744
0064ca  2202              MOVS     r2,#2                 ;10744
0064cc  210f              MOVS     r1,#0xf               ;10744
0064ce  a0ec              ADR      r0,|L1.26752|
0064d0  f7fffffe          BL       snmp_trap_send
0064d4  e028              B        |L1.25896|
                  |L1.25814|
0064d6  2301              MOVS     r3,#1                 ;10750
0064d8  2203              MOVS     r2,#3                 ;10750
0064da  210f              MOVS     r1,#0xf               ;10750
0064dc  a0eb              ADR      r0,|L1.26764|
0064de  f7fffffe          BL       snmp_trap_send
0064e2  e021              B        |L1.25896|
                  |L1.25828|
0064e4  2301              MOVS     r3,#1                 ;10751
0064e6  2204              MOVS     r2,#4                 ;10751
0064e8  210f              MOVS     r1,#0xf               ;10751
0064ea  a0eb              ADR      r0,|L1.26776|
0064ec  f7fffffe          BL       snmp_trap_send
0064f0  e01a              B        |L1.25896|
                  |L1.25842|
0064f2  2300              MOVS     r3,#0                 ;10755
0064f4  2201              MOVS     r2,#1                 ;10755
0064f6  210f              MOVS     r1,#0xf               ;10755
0064f8  a0ea              ADR      r0,|L1.26788|
0064fa  f7fffffe          BL       snmp_trap_send
0064fe  e013              B        |L1.25896|
                  |L1.25856|
006500  2300              MOVS     r3,#0                 ;10759
006502  2202              MOVS     r2,#2                 ;10759
006504  210f              MOVS     r1,#0xf               ;10759
006506  a0ec              ADR      r0,|L1.26808|
006508  f7fffffe          BL       snmp_trap_send
00650c  e00c              B        |L1.25896|
                  |L1.25870|
00650e  2300              MOVS     r3,#0                 ;10765
006510  2203              MOVS     r2,#3                 ;10765
006512  210f              MOVS     r1,#0xf               ;10765
006514  a0ed              ADR      r0,|L1.26828|
006516  f7fffffe          BL       snmp_trap_send
00651a  e005              B        |L1.25896|
                  |L1.25884|
00651c  2300              MOVS     r3,#0
00651e  2204              MOVS     r2,#4
006520  210f              MOVS     r1,#0xf
006522  a0ef              ADR      r0,|L1.26848|
006524  f7fffffe          BL       snmp_trap_send
                  |L1.25896|
;;;10767  			}
;;;10768  	 	}
;;;10769  #endif
;;;10770  
;;;10771  #ifdef UKU_KONTUR
;;;10772  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10773  		{
;;;10774  		plazma_sk++;
;;;10775  		if(sk_av_stat[i]==sasON)
;;;10776  			{
;;;10777  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10778  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10779  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10780  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10781  			}
;;;10782  		else 
;;;10783  			{
;;;10784  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10785  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10786  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10787  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10788  			}
;;;10789  	 	}
;;;10790  #endif
;;;10791  	sk_av_stat_old[i]=sk_av_stat[i];
006528  5d38              LDRB     r0,[r7,r4]
00652a  f8080004          STRB     r0,[r8,r4]
00652e  f1040401          ADD      r4,r4,#1              ;10701
006532  b2e4              UXTB     r4,r4                 ;10701
                  |L1.25908|
006534  48ef              LDR      r0,|L1.26868|
006536  f9b00000          LDRSH    r0,[r0,#0]            ;10701  ; NUMSK
00653a  4284              CMP      r4,r0                 ;10701
00653c  f6ffaf48          BLT      |L1.25552|
;;;10792  	}
;;;10793  }
006540  e705              B        |L1.25422|
;;;10794  
                          ENDP

                  zar_superviser_start PROC
;;;10831  //-----------------------------------------------
;;;10832  void zar_superviser_start(void)
006542  4aed              LDR      r2,|L1.26872|
;;;10833  {
;;;10834  sign_U[0]=1;
006544  f04f0001          MOV      r0,#1
006548  7010              STRB     r0,[r2,#0]
;;;10835  sign_I[0]=1;
00654a  49ec              LDR      r1,|L1.26876|
00654c  7008              STRB     r0,[r1,#0]
;;;10836  sign_U[1]=1;
00654e  7050              STRB     r0,[r2,#1]
;;;10837  sign_I[1]=1;
006550  7048              STRB     r0,[r1,#1]
;;;10838  
;;;10839  }
006552  4770              BX       lr
;;;10840  
                          ENDP

                  zar_superviser_drv PROC
;;;10796  //-----------------------------------------------
;;;10797  void zar_superviser_drv(void)
006554  e92d5ff0          PUSH     {r4-r12,lr}
;;;10798  {
;;;10799  
;;;10800  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006558  48ea              LDR      r0,|L1.26884|
00655a  f8df93ac          LDR      r9,|L1.26888|
00655e  f8df83a0          LDR      r8,|L1.26880|
006562  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
006566  f9b90000          LDRSH    r0,[r9,#0]
00656a  4cc1              LDR      r4,|L1.26736|
00656c  ebc01100          RSB      r1,r0,r0,LSL #4
006570  3c46              SUBS     r4,r4,#0x46
006572  f9b87002          LDRSH    r7,[r8,#2]  ; bat
006576  f06f0a1d          MVN      r10,#0x1d
00657a  f06f0b95          MVN      r11,#0x95
00657e  2500              MOVS     r5,#0
006580  4edd              LDR      r6,|L1.26872|
006582  f9b40052          LDRSH    r0,[r4,#0x52]
006586  eb0a0281          ADD      r2,r10,r1,LSL #2
00658a  eb0b0381          ADD      r3,r11,r1,LSL #2
00658e  4567              CMP      r7,r12
006590  dc05              BGT      |L1.26014|
006592  f8dfc378          LDR      r12,|L1.26892|
006596  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
00659a  4567              CMP      r7,r12
00659c  da04              BGE      |L1.26024|
                  |L1.26014|
00659e  4282              CMP      r2,r0
0065a0  dd02              BLE      |L1.26024|
0065a2  4283              CMP      r3,r0
0065a4  da00              BGE      |L1.26024|
0065a6  7035              STRB     r5,[r6,#0]
                  |L1.26024|
;;;10801  
;;;10802  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0065a8  4fd9              LDR      r7,|L1.26896|
0065aa  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0065ae  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0065b2  4fd2              LDR      r7,|L1.26876|
0065b4  ebbc0f4e          CMP      r12,lr,LSL #1
0065b8  dc04              BGT      |L1.26052|
0065ba  f1ce0e00          RSB      lr,lr,#0
0065be  ebbc0f4e          CMP      r12,lr,LSL #1
0065c2  da04              BGE      |L1.26062|
                  |L1.26052|
0065c4  4282              CMP      r2,r0
0065c6  dd02              BLE      |L1.26062|
0065c8  4283              CMP      r3,r0
0065ca  da00              BGE      |L1.26062|
0065cc  703d              STRB     r5,[r7,#0]
                  |L1.26062|
;;;10803  																 
;;;10804  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0065ce  f06f0209          MVN      r2,#9
0065d2  eb020181          ADD      r1,r2,r1,LSL #2
0065d6  4281              CMP      r1,r0
0065d8  d121              BNE      |L1.26142|
0065da  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0065de  b9f0              CBNZ     r0,|L1.26142|
;;;10805  	{
;;;10806  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
0065e0  7830              LDRB     r0,[r6,#0]  ; sign_U
0065e2  2801              CMP      r0,#1
0065e4  d11b              BNE      |L1.26142|
0065e6  7838              LDRB     r0,[r7,#0]  ; sign_I
0065e8  2801              CMP      r0,#1
0065ea  d118              BNE      |L1.26142|
0065ec  f44f70ef          MOV      r0,#0x1de
0065f0  f7fffffe          BL       lc640_read_int
0065f4  49c7              LDR      r1,|L1.26900|
0065f6  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0065fa  4288              CMP      r0,r1
0065fc  d00f              BEQ      |L1.26142|
0065fe  48c6              LDR      r0,|L1.26904|
006600  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006602  b160              CBZ      r0,|L1.26142|
006604  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006608  07c0              LSLS     r0,r0,#31
00660a  d108              BNE      |L1.26142|
;;;10807  		{
;;;10808  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
00660c  f44f70ef          MOV      r0,#0x1de
006610  f7fffffe          BL       lc640_write_int
;;;10809  		superviser_cnt++;
006614  48c1              LDR      r0,|L1.26908|
006616  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006618  f1010101          ADD      r1,r1,#1
00661c  7001              STRB     r1,[r0,#0]
                  |L1.26142|
;;;10810  		}
;;;10811  	
;;;10812  	}
;;;10813  
;;;10814  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00661e  48b9              LDR      r0,|L1.26884|
006620  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006624  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006628  4281              CMP      r1,r0
00662a  dc06              BGT      |L1.26170|
00662c  48b7              LDR      r0,|L1.26892|
00662e  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006632  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006636  4281              CMP      r1,r0
006638  da0e              BGE      |L1.26200|
                  |L1.26170|
00663a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00663e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006642  ebc01000          RSB      r0,r0,r0,LSL #4
006646  eb0a0280          ADD      r2,r10,r0,LSL #2
00664a  428a              CMP      r2,r1
00664c  dd04              BLE      |L1.26200|
00664e  eb0b0080          ADD      r0,r11,r0,LSL #2
006652  4288              CMP      r0,r1
006654  da00              BGE      |L1.26200|
006656  7075              STRB     r5,[r6,#1]
                  |L1.26200|
;;;10815  
;;;10816  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006658  49ad              LDR      r1,|L1.26896|
00665a  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00665e  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
006662  ebb00f41          CMP      r0,r1,LSL #1
006666  dc03              BGT      |L1.26224|
006668  4249              RSBS     r1,r1,#0
00666a  ebb00f41          CMP      r0,r1,LSL #1
00666e  da0e              BGE      |L1.26254|
                  |L1.26224|
006670  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006674  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006678  ebc01000          RSB      r0,r0,r0,LSL #4
00667c  eb0a0280          ADD      r2,r10,r0,LSL #2
006680  428a              CMP      r2,r1
006682  dd04              BLE      |L1.26254|
006684  eb0b0080          ADD      r0,r11,r0,LSL #2
006688  4288              CMP      r0,r1
00668a  da00              BGE      |L1.26254|
00668c  707d              STRB     r5,[r7,#1]
                  |L1.26254|
;;;10817  																 
;;;10818  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00668e  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006692  ebc01100          RSB      r1,r0,r0,LSL #4
006696  f06f0009          MVN      r0,#9
00669a  eb000081          ADD      r0,r0,r1,LSL #2
00669e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0066a2  4288              CMP      r0,r1
0066a4  d122              BNE      |L1.26348|
0066a6  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0066aa  b9f8              CBNZ     r0,|L1.26348|
;;;10819  	{
;;;10820  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0066ac  7870              LDRB     r0,[r6,#1]  ; sign_U
0066ae  2801              CMP      r0,#1
0066b0  d11c              BNE      |L1.26348|
0066b2  7878              LDRB     r0,[r7,#1]  ; sign_I
0066b4  2801              CMP      r0,#1
0066b6  d119              BNE      |L1.26348|
0066b8  f44f75fe          MOV      r5,#0x1fc
0066bc  4628              MOV      r0,r5
0066be  f7fffffe          BL       lc640_read_int
0066c2  4994              LDR      r1,|L1.26900|
0066c4  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0066c8  4288              CMP      r0,r1
0066ca  d00f              BEQ      |L1.26348|
0066cc  4892              LDR      r0,|L1.26904|
0066ce  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0066d0  2802              CMP      r0,#2
0066d2  d10b              BNE      |L1.26348|
0066d4  f8980089          LDRB     r0,[r8,#0x89]  ; bat
0066d8  07c0              LSLS     r0,r0,#31
0066da  d107              BNE      |L1.26348|
;;;10821  		{
;;;10822  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
0066dc  4628              MOV      r0,r5
0066de  f7fffffe          BL       lc640_write_int
;;;10823  		superviser_cnt++;
0066e2  488e              LDR      r0,|L1.26908|
0066e4  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0066e6  f1010101          ADD      r1,r1,#1
0066ea  7001              STRB     r1,[r0,#0]
                  |L1.26348|
;;;10824  		}
;;;10825  	
;;;10826  	}
;;;10827  
;;;10828  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
0066ec  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0066f0  f06f0101          MVN      r1,#1
0066f4  ebc01000          RSB      r0,r0,r0,LSL #4
0066f8  eb010080          ADD      r0,r1,r0,LSL #2
0066fc  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006700  4288              CMP      r0,r1
006702  d102              BNE      |L1.26378|
006704  e8bd5ff0          POP      {r4-r12,lr}
006708  e7fe              B        zar_superviser_start
                  |L1.26378|
;;;10829  }
00670a  e620              B        |L1.25422|
;;;10830  
                          ENDP

                  npn_hndl PROC
;;;10841  //-----------------------------------------------
;;;10842  void npn_hndl(void)
00670c  e92d03f0          PUSH     {r4-r9}
;;;10843  {
;;;10844  if(NPN_OUT!=npnoOFF)
006710  4883              LDR      r0,|L1.26912|
;;;10845  	{
;;;10846  /*	if(NPN_SIGN==npnsAVNET)
;;;10847  		{
;;;10848  		if(net_av==1)
;;;10849  			{
;;;10850  			if(npn_tz_cnt<TZNPN)
;;;10851  				{
;;;10852  				npn_tz_cnt++;
;;;10853  				if(npn_tz_cnt==TZNPN)
;;;10854  					{
;;;10855  					npn_stat=npnsOFF;
;;;10856  					}
;;;10857  				}
;;;10858  			}
;;;10859  		else
;;;10860  			{
;;;10861  			if(npn_tz_cnt)
;;;10862  				{
;;;10863  				npn_tz_cnt--;
;;;10864  				if(npn_tz_cnt==0)
;;;10865  					{
;;;10866  					npn_stat=npnsON;
;;;10867  					}
;;;10868  				}
;;;10869  			}
;;;10870  		}*/
;;;10871  /*	if(NPN_SIGN==npnsULOAD)
;;;10872  		{
;;;10873  		if(load_U<UONPN)
;;;10874  			{
;;;10875  			if(npn_tz_cnt<TZNPN)
;;;10876  				{
;;;10877  				npn_tz_cnt++;
;;;10878  				if(npn_tz_cnt==TZNPN)
;;;10879  					{
;;;10880  					npn_stat=npnsOFF;
;;;10881  					}
;;;10882  				}
;;;10883  			}
;;;10884  		else if(load_U>UVNPN)
;;;10885  			{
;;;10886  			if(npn_tz_cnt)
;;;10887  				{
;;;10888  				npn_tz_cnt--;
;;;10889  				if(npn_tz_cnt==0)
;;;10890  					{
;;;10891  					npn_stat=npnsON;
;;;10892  					}
;;;10893  				}
;;;10894  			}
;;;10895  		}*/
;;;10896  
;;;10897  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10898  		{
;;;10899  		if(npn_tz_cnt<TZNPN)
006712  4f84              LDR      r7,|L1.26916|
;;;10900  			{
;;;10901  			npn_tz_cnt++;
;;;10902  			if(npn_tz_cnt==TZNPN)
;;;10903  				{
;;;10904  				npn_stat=npnsOFF;
006714  4e84              LDR      r6,|L1.26920|
006716  7800              LDRB     r0,[r0,#0]            ;10844  ; NPN_OUT
006718  f04f0c00          MOV      r12,#0                ;10844
;;;10905  				}
;;;10906  			}
;;;10907  		}
;;;10908  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10909  		{
;;;10910  		if(npn_tz_cnt)
;;;10911  			{
;;;10912  			npn_tz_cnt--;
;;;10913  			if(npn_tz_cnt==0)
;;;10914  				{
;;;10915  				npn_stat=npnsON;
00671c  f04f0801          MOV      r8,#1
006720  b3e8              CBZ      r0,|L1.26526|
006722  4882              LDR      r0,|L1.26924|
006724  4639              MOV      r1,r7                 ;10899
006726  f9b05000          LDRSH    r5,[r0,#0]            ;10897  ; load_U
00672a  4881              LDR      r0,|L1.26928|
00672c  f9b11000          LDRSH    r1,[r1,#0]            ;10899
006730  f9b09000          LDRSH    r9,[r0,#0]            ;10897  ; UONPN
006734  487f              LDR      r0,|L1.26932|
006736  454d              CMP      r5,r9                 ;10897
006738  f9b02000          LDRSH    r2,[r0,#0]            ;10897
00673c  487e              LDR      r0,|L1.26936|
00673e  f9b03000          LDRSH    r3,[r0,#0]            ;10897
006742  487e              LDR      r0,|L1.26940|
006744  f9b04000          LDRSH    r4,[r0,#0]            ;10897
006748  487d              LDR      r0,|L1.26944|
00674a  f9b00000          LDRSH    r0,[r0,#0]            ;10897
00674e  da13              BGE      |L1.26488|
006750  4282              CMP      r2,r0                 ;10897
006752  db03              BLT      |L1.26460|
006754  4283              CMP      r3,r0                 ;10897
006756  db01              BLT      |L1.26460|
006758  4284              CMP      r4,r0                 ;10897
00675a  da0d              BGE      |L1.26488|
                  |L1.26460|
00675c  4879              LDR      r0,|L1.26948|
00675e  f9b02000          LDRSH    r2,[r0,#0]            ;10899  ; TZNPN
006762  4291              CMP      r1,r2                 ;10899
006764  da23              BGE      |L1.26542|
006766  f1010101          ADD      r1,r1,#1              ;10901
00676a  b208              SXTH     r0,r1                 ;10901
00676c  8038              STRH     r0,[r7,#0]            ;10901
00676e  4290              CMP      r0,r2                 ;10902
006770  d11d              BNE      |L1.26542|
006772  f886c000          STRB     r12,[r6,#0]           ;10904
006776  e01a              B        |L1.26542|
                  |L1.26488|
006778  f8dfc1cc          LDR      r12,|L1.26952|
00677c  f9bcc000          LDRSH    r12,[r12,#0]          ;10908  ; UVNPN
006780  4565              CMP      r5,r12                ;10908
006782  dd14              BLE      |L1.26542|
006784  4282              CMP      r2,r0                 ;10908
006786  dd12              BLE      |L1.26542|
006788  4283              CMP      r3,r0                 ;10908
00678a  dd10              BLE      |L1.26542|
00678c  4284              CMP      r4,r0                 ;10908
00678e  dd0e              BLE      |L1.26542|
006790  b169              CBZ      r1,|L1.26542|
006792  f1a10101          SUB      r1,r1,#1              ;10912
006796  b208              SXTH     r0,r1                 ;10912
006798  8038              STRH     r0,[r7,#0]            ;10912
00679a  b940              CBNZ     r0,|L1.26542|
00679c  e000              B        |L1.26528|
                  |L1.26526|
00679e  e002              B        |L1.26534|
                  |L1.26528|
0067a0  f8868000          STRB     r8,[r6,#0]
0067a4  e003              B        |L1.26542|
                  |L1.26534|
;;;10916  				}
;;;10917  			}
;;;10918  		}
;;;10919  	}
;;;10920  else
;;;10921  	{
;;;10922  	npn_tz_cnt=0;
0067a6  f8a7c000          STRH     r12,[r7,#0]
;;;10923  	npn_stat=npnsON;
0067aa  f8868000          STRB     r8,[r6,#0]
                  |L1.26542|
;;;10924  	}
;;;10925  
;;;10926  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0067ae  7830              LDRB     r0,[r6,#0]  ; npn_stat
0067b0  2800              CMP      r0,#0
0067b2  d107              BNE      |L1.26564|
0067b4  e8bd03f0          POP      {r4-r9}
0067b8  230f              MOVS     r3,#0xf
0067ba  2201              MOVS     r2,#1
0067bc  216e              MOVS     r1,#0x6e
0067be  20d2              MOVS     r0,#0xd2
0067c0  f7ffbffe          B.W      mess_send
                  |L1.26564|
;;;10927  
;;;10928  
;;;10929  }
0067c4  e8bd03f0          POP      {r4-r9}
0067c8  4770              BX       lr
;;;10930  
                          ENDP

                  loadoff_hndl PROC
;;;10932  //-----------------------------------------------
;;;10933  void loadoff_hndl(void)
0067ca  b5f0              PUSH     {r4-r7,lr}
;;;10934  {
;;;10935  if((load_U>UONPN)||(load_U<UVNPN))
0067cc  4857              LDR      r0,|L1.26924|
;;;10936  	{
;;;10937  	if(load_off_cnt<TZNPN)
0067ce  4d5f              LDR      r5,|L1.26956|
;;;10938  		{
;;;10939  		load_off_cnt++;
;;;10940  		if(load_off_cnt>=TZNPN)
;;;10941  			{
;;;10942  			load_off_stat=npnsOFF;
0067d0  2700              MOVS     r7,#0
0067d2  f9b01000          LDRSH    r1,[r0,#0]            ;10935  ; load_U
0067d6  4856              LDR      r0,|L1.26928|
0067d8  4e5d              LDR      r6,|L1.26960|
0067da  f9b02000          LDRSH    r2,[r0,#0]            ;10935  ; UONPN
0067de  f9b50000          LDRSH    r0,[r5,#0]            ;10937
0067e2  4291              CMP      r1,r2                 ;10935
0067e4  dc04              BGT      |L1.26608|
0067e6  4b58              LDR      r3,|L1.26952|
0067e8  f9b33000          LDRSH    r3,[r3,#0]            ;10935  ; UVNPN
0067ec  4299              CMP      r1,r3                 ;10935
0067ee  da0d              BGE      |L1.26636|
                  |L1.26608|
0067f0  4954              LDR      r1,|L1.26948|
0067f2  f9b11000          LDRSH    r1,[r1,#0]            ;10937  ; TZNPN
0067f6  4288              CMP      r0,r1                 ;10937
0067f8  da1c              BGE      |L1.26676|
0067fa  f1000001          ADD      r0,r0,#1              ;10939
0067fe  b200              SXTH     r0,r0                 ;10939
006800  8028              STRH     r0,[r5,#0]            ;10939
006802  4288              CMP      r0,r1                 ;10940
006804  db16              BLT      |L1.26676|
006806  7037              STRB     r7,[r6,#0]
;;;10943  			load_off_cnt=TZNPN;
006808  8029              STRH     r1,[r5,#0]
00680a  e013              B        |L1.26676|
                  |L1.26636|
;;;10944  			}
;;;10945  		}
;;;10946  	}
;;;10947  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
00680c  4c51              LDR      r4,|L1.26964|
00680e  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006812  4423              ADD      r3,r3,r4
006814  428b              CMP      r3,r1
006816  da0d              BGE      |L1.26676|
006818  1b12              SUBS     r2,r2,r4
00681a  428a              CMP      r2,r1
00681c  dd0a              BLE      |L1.26676|
;;;10948  	{
;;;10949  	if(load_off_cnt)
00681e  b148              CBZ      r0,|L1.26676|
;;;10950  		{
;;;10951  		load_off_cnt--;
006820  f1a00001          SUB      r0,r0,#1
006824  b200              SXTH     r0,r0
006826  8028              STRH     r0,[r5,#0]
;;;10952  		if(load_off_cnt<=0)
006828  2800              CMP      r0,#0
00682a  dc03              BGT      |L1.26676|
;;;10953  			{
;;;10954  			load_off_stat=npnsON;
00682c  f04f0001          MOV      r0,#1
006830  7030              STRB     r0,[r6,#0]
;;;10955  			load_off_cnt=0;
006832  802f              STRH     r7,[r5,#0]
                  |L1.26676|
;;;10956  			}
;;;10957  		}
;;;10958  	}
;;;10959  
;;;10960  
;;;10961  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006834  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006836  2800              CMP      r0,#0
006838  d103              BNE      |L1.26690|
00683a  4947              LDR      r1,|L1.26968|
00683c  f04f000a          MOV      r0,#0xa
006840  7008              STRB     r0,[r1,#0]
                  |L1.26690|
;;;10962  
;;;10963  
;;;10964  }
006842  bdf0              POP      {r4-r7,pc}
;;;10965  
                          ENDP

                  speedChargeStartStop PROC
;;;11153  //-----------------------------------------------
;;;11154  void speedChargeStartStop(void)
006844  b538              PUSH     {r3-r5,lr}
;;;11155  {
;;;11156  spch_plazma[1]++;
006846  4c45              LDR      r4,|L1.26972|
006848  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00684a  f1000001          ADD      r0,r0,#1
00684e  7060              STRB     r0,[r4,#1]
;;;11157  /*if(speedChIsOn)
;;;11158  	{
;;;11159  	speedChIsOn=0;
;;;11160  	}
;;;11161  
;;;11162  else
;;;11163  	{
;;;11164  	if(speedChrgBlckStat==0)
;;;11165  		{
;;;11166  		speedChIsOn=1;
;;;11167  		speedChTimeCnt=0;
;;;11168  		}
;;;11169  	else
;;;11170  		{
;;;11171  		show_mess(	"     Ускоренный     ",
;;;11172  	          		"       заряд        ",
;;;11173  	          		"    заблокирован!   ",
;;;11174  	          		"                    ",2000);	 
;;;11175  		}
;;;11176  	}*/
;;;11177  
;;;11178  if(sp_ch_stat!=scsOFF)
006850  4843              LDR      r0,|L1.26976|
006852  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006854  b151              CBZ      r1,|L1.26732|
;;;11179  	{
;;;11180  	sp_ch_stat=scsOFF;
006856  f04f0100          MOV      r1,#0
00685a  7001              STRB     r1,[r0,#0]
;;;11181  	speedz_mem_hndl(10);
00685c  f04f000a          MOV      r0,#0xa
006860  f7fffffe          BL       speedz_mem_hndl
;;;11182  	spch_plazma[1]=10;
006864  f04f000a          MOV      r0,#0xa
006868  7060              STRB     r0,[r4,#1]
                  |L1.26730|
;;;11183  	}
;;;11184  
;;;11185  else
;;;11186  	{
;;;11187  	spch_plazma[1]=20;
;;;11188  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;11189  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11190  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11191  		#endif
;;;11192  		)
;;;11193  		{
;;;11194  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11195  		sp_ch_stat=scsSTEP1;
;;;11196  		#else
;;;11197  		sp_ch_stat=scsWRK;
;;;11198  		#endif
;;;11199  		speedz_mem_hndl(1);
;;;11200  		}
;;;11201  	else 
;;;11202  		{
;;;11203  		show_mess(	"     Ускоренный     ",
;;;11204  	          		"       заряд        ",
;;;11205  	          		"    заблокирован!   ",
;;;11206  	          		"                    ",2000);
;;;11207  		}
;;;11208  	}
;;;11209  }
00686a  bd38              POP      {r3-r5,pc}
                  |L1.26732|
00686c  e07a              B        |L1.26980|
00686e  0000              DCW      0x0000
                  |L1.26736|
                          DCD      ||area_number.25||+0x46
                  |L1.26740|
006874  534b2023          DCB      "SK #1 Alarm",0
006878  3120416c
00687c  61726d00
                  |L1.26752|
006880  534b2023          DCB      "SK #2 Alarm",0
006884  3220416c
006888  61726d00
                  |L1.26764|
00688c  534b2023          DCB      "SK #3 Alarm",0
006890  3320416c
006894  61726d00
                  |L1.26776|
006898  534b2023          DCB      "SK #4 Alarm",0
00689c  3420416c
0068a0  61726d00
                  |L1.26788|
0068a4  534b2023          DCB      "SK #1 Alarm is off",0
0068a8  3120416c
0068ac  61726d20
0068b0  6973206f
0068b4  666600  
0068b7  00                DCB      0
                  |L1.26808|
0068b8  534b2023          DCB      "SK #2 Alarm is off",0
0068bc  3220416c
0068c0  61726d20
0068c4  6973206f
0068c8  666600  
0068cb  00                DCB      0
                  |L1.26828|
0068cc  534b2023          DCB      "SK #3 Alarm is off",0
0068d0  3320416c
0068d4  61726d20
0068d8  6973206f
0068dc  666600  
0068df  00                DCB      0
                  |L1.26848|
0068e0  534b2023          DCB      "SK #4 Alarm is off",0
0068e4  3420416c
0068e8  61726d20
0068ec  6973206f
0068f0  666600  
0068f3  00                DCB      0
                  |L1.26868|
                          DCD      NUMSK
                  |L1.26872|
                          DCD      sign_U
                  |L1.26876|
                          DCD      sign_I
                  |L1.26880|
                          DCD      bat
                  |L1.26884|
                          DCD      u_necc_up
                  |L1.26888|
                          DCD      TBAT
                  |L1.26892|
                          DCD      u_necc_dn
                  |L1.26896|
                          DCD      IKB
                  |L1.26900|
                          DCD      BAT_C_REAL
                  |L1.26904|
                          DCD      NUMBAT
                  |L1.26908|
                          DCD      superviser_cnt
                  |L1.26912|
                          DCD      NPN_OUT
                  |L1.26916|
                          DCD      npn_tz_cnt
                  |L1.26920|
                          DCD      npn_stat
                  |L1.26924|
                          DCD      load_U
                  |L1.26928|
                          DCD      UONPN
                  |L1.26932|
                          DCD      net_Ua
                  |L1.26936|
                          DCD      net_Ub
                  |L1.26940|
                          DCD      net_Uc
                  |L1.26944|
                          DCD      UMN
                  |L1.26948|
                          DCD      TZNPN
                  |L1.26952|
                          DCD      UVNPN
                  |L1.26956|
                          DCD      load_off_cnt
                  |L1.26960|
                          DCD      load_off_stat
                  |L1.26964|
                          DCD      dUNPN
                  |L1.26968|
                          DCD      tloaddisable_cmnd
                  |L1.26972|
                          DCD      spch_plazma
                  |L1.26976|
                          DCD      sp_ch_stat
                  |L1.26980|
006964  f04f0114          MOV      r1,#0x14              ;11187
006968  7061              STRB     r1,[r4,#1]            ;11187
00696a  49fa              LDR      r1,|L1.27988|
00696c  f9b12000          LDRSH    r2,[r1,#0]            ;11188  ; speedChrgBlckStat
006970  49f9              LDR      r1,|L1.27992|
006972  f8913023          LDRB     r3,[r1,#0x23]         ;11188  ; spc_stat
006976  ea420203          ORR      r2,r2,r3              ;11188
00697a  794b              LDRB     r3,[r1,#5]            ;11188  ; vz1_stat
00697c  79c9              LDRB     r1,[r1,#7]            ;11188  ; vz2_stat
00697e  ea420203          ORR      r2,r2,r3              ;11188
006982  430a              ORRS     r2,r2,r1              ;11188
006984  d009              BEQ      |L1.27034|
006986  f44f60fa          MOV      r0,#0x7d0             ;11203
00698a  9000              STR      r0,[sp,#0]            ;11203
00698c  4bf3              LDR      r3,|L1.27996|
00698e  a2f4              ADR      r2,|L1.28000|
006990  a1f9              ADR      r1,|L1.28024|
006992  a0ff              ADR      r0,|L1.28048|
006994  f7fffffe          BL       show_mess
006998  e767              B        |L1.26730|
                  |L1.27034|
00699a  f04f0101          MOV      r1,#1                 ;11195
00699e  7001              STRB     r1,[r0,#0]            ;11195
0069a0  e8bd4038          POP      {r3-r5,lr}            ;11199
0069a4  4608              MOV      r0,r1                 ;11199
0069a6  f7ffbffe          B.W      speedz_mem_hndl
;;;11210  
                          ENDP

                  speedChargeHndl PROC
;;;10966  //-----------------------------------------------
;;;10967  void speedChargeHndl(void)
0069aa  e92d4ff8          PUSH     {r3-r11,lr}
;;;10968  {
;;;10969  /*
;;;10970  if(sp_ch_stat==scsOFF)
;;;10971  	{
;;;10972  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10973  	}*/
;;;10974  	 
;;;10975  if(sp_ch_stat==scsSTEP1)
0069ae  4ffe              LDR      r7,|L1.28072|
;;;10976  	{
;;;10977  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10978  		{
;;;10979  		sp_ch_stat_cnt=5;
;;;10980  		if(SP_CH_VENT_BLOK==0)
0069b0  f8dfa3f8          LDR      r10,|L1.28076|
;;;10981  			{
;;;10982  			sp_ch_stat_cnt=0;
;;;10983  			sp_ch_stat=scsWRK;
;;;10984  			}
;;;10985  		}
;;;10986  	if(sp_ch_stat_cnt)
;;;10987  		{
;;;10988  		sp_ch_stat_cnt--;
;;;10989  		if(sp_ch_stat_cnt==0)
;;;10990  			{
;;;10991  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10992  
;;;10993  			}
;;;10994  		}
;;;10995  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0069b4  f8df93f8          LDR      r9,|L1.28080|
0069b8  7839              LDRB     r1,[r7,#0]            ;10975  ; sp_ch_stat
0069ba  f04f0802          MOV      r8,#2                 ;10983
0069be  4efd              LDR      r6,|L1.28084|
0069c0  4cfd              LDR      r4,|L1.28088|
0069c2  2500              MOVS     r5,#0                 ;10980
0069c4  7830              LDRB     r0,[r6,#0]            ;10977
0069c6  2901              CMP      r1,#1                 ;10975
0069c8  d11b              BNE      |L1.27138|
0069ca  2801              CMP      r0,#1                 ;10977
0069cc  d008              BEQ      |L1.27104|
0069ce  f04f0105          MOV      r1,#5                 ;10979
0069d2  8021              STRH     r1,[r4,#0]            ;10979
0069d4  f8ba1000          LDRH     r1,[r10,#0]           ;10980  ; SP_CH_VENT_BLOK
0069d8  b911              CBNZ     r1,|L1.27104|
0069da  8025              STRH     r5,[r4,#0]            ;10982
0069dc  f8878000          STRB     r8,[r7,#0]            ;10983
                  |L1.27104|
0069e0  f9b41000          LDRSH    r1,[r4,#0]            ;10986  ; sp_ch_stat_cnt
0069e4  b139              CBZ      r1,|L1.27126|
0069e6  f1a10101          SUB      r1,r1,#1              ;10988
0069ea  b209              SXTH     r1,r1                 ;10988
0069ec  8021              STRH     r1,[r4,#0]            ;10988
0069ee  b911              CBNZ     r1,|L1.27126|
0069f0  f04f0103          MOV      r1,#3                 ;10991
0069f4  7039              STRB     r1,[r7,#0]            ;10991
                  |L1.27126|
0069f6  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
0069fa  2901              CMP      r1,#1
0069fc  d101              BNE      |L1.27138|
0069fe  f8878000          STRB     r8,[r7,#0]
                  |L1.27138|
;;;10996  	}
;;;10997  
;;;10998  if(sp_ch_stat==scsWRK)
006a02  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006a04  2902              CMP      r1,#2
006a06  d123              BNE      |L1.27216|
;;;10999  	{
;;;11000  	if(sp_ch_stat_old!=sp_ch_stat)
;;;11001  		{
;;;11002  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006a08  4aec              LDR      r2,|L1.28092|
;;;11003  		hv_vz_up_cnt=0;
006a0a  49ed              LDR      r1,|L1.28096|
006a0c  2802              CMP      r0,#2                 ;11000
006a0e  d008              BEQ      |L1.27170|
006a10  48ec              LDR      r0,|L1.28100|
006a12  f44f6361          MOV      r3,#0xe10             ;11002
006a16  f9b00000          LDRSH    r0,[r0,#0]            ;11002  ; speedChrgTimeInHour
006a1a  fb00f003          MUL      r0,r0,r3              ;11002
006a1e  6010              STR      r0,[r2,#0]            ;11002  ; sp_ch_wrk_cnt
006a20  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27170|
;;;11004  		}
;;;11005  	sp_ch_wrk_cnt--;
006a22  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006a24  f1a00001          SUB      r0,r0,#1
006a28  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;11006  	hv_vz_up_cnt++;
006a2a  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006a2c  f1020201          ADD      r2,r2,#1
006a30  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11007  	if(sp_ch_wrk_cnt==0)
006a32  b918              CBNZ     r0,|L1.27196|
;;;11008  		{
;;;11009  		sp_ch_stat=scsOFF;
006a34  703d              STRB     r5,[r7,#0]
;;;11010  		speedz_mem_hndl(0);
006a36  2000              MOVS     r0,#0
006a38  f7fffffe          BL       speedz_mem_hndl
                  |L1.27196|
;;;11011  		}
;;;11012  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11013  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006a3c  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006a40  b930              CBNZ     r0,|L1.27216|
006a42  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006a46  2801              CMP      r0,#1
006a48  d102              BNE      |L1.27216|
006a4a  f04f0004          MOV      r0,#4
006a4e  7038              STRB     r0,[r7,#0]
                  |L1.27216|
;;;11014  	#endif
;;;11015  	}
;;;11016  
;;;11017  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006a50  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;11018  	{
;;;11019  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;11020  		{
;;;11021  		sp_ch_stat_cnt=10;
;;;11022  		}
;;;11023  	sp_ch_stat_cnt--;
;;;11024  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;11025  		{
;;;11026  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006a52  f2413b88          MOV      r11,#0x1388
006a56  f04f0a0a          MOV      r10,#0xa              ;11021
006a5a  2803              CMP      r0,#3                 ;11017
006a5c  d119              BNE      |L1.27282|
006a5e  7830              LDRB     r0,[r6,#0]            ;11019  ; sp_ch_stat_old
006a60  2803              CMP      r0,#3                 ;11019
006a62  d101              BNE      |L1.27240|
006a64  8820              LDRH     r0,[r4,#0]            ;11019  ; sp_ch_stat_cnt
006a66  b908              CBNZ     r0,|L1.27244|
                  |L1.27240|
006a68  f8a4a000          STRH     r10,[r4,#0]           ;11021
                  |L1.27244|
006a6c  8820              LDRH     r0,[r4,#0]            ;11023  ; sp_ch_stat_cnt
006a6e  f1a00001          SUB      r0,r0,#1              ;11023
006a72  b200              SXTH     r0,r0                 ;11023
006a74  8020              STRH     r0,[r4,#0]            ;11023
006a76  280a              CMP      r0,#0xa               ;11024
006a78  d001              BEQ      |L1.27262|
006a7a  2809              CMP      r0,#9                 ;11024
006a7c  d109              BNE      |L1.27282|
                  |L1.27262|
006a7e  4bd2              LDR      r3,|L1.28104|
006a80  a0d2              ADR      r0,|L1.28108|
006a82  f1030218          ADD      r2,r3,#0x18
006a86  f1020118          ADD      r1,r2,#0x18
006a8a  f8cdb000          STR      r11,[sp,#0]
006a8e  f7fffffe          BL       show_mess
                  |L1.27282|
;;;11027  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11028  					"      ВКЛЮЧЕН       ",
;;;11029  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11030  					5000);
;;;11031  		}
;;;11032  	}
;;;11033  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006a92  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006a94  2804              CMP      r0,#4
006a96  d11f              BNE      |L1.27352|
;;;11034  	{
;;;11035  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006a98  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006a9a  2804              CMP      r0,#4
006a9c  d101              BNE      |L1.27298|
006a9e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006aa0  b908              CBNZ     r0,|L1.27302|
                  |L1.27298|
;;;11036  		{
;;;11037  		sp_ch_stat_cnt=10;
006aa2  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27302|
;;;11038  		}
;;;11039  	sp_ch_stat_cnt--;
006aa6  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006aa8  f1a00001          SUB      r0,r0,#1
006aac  b200              SXTH     r0,r0
006aae  8020              STRH     r0,[r4,#0]
;;;11040  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006ab0  280a              CMP      r0,#0xa
006ab2  d001              BEQ      |L1.27320|
006ab4  2809              CMP      r0,#9
006ab6  d109              BNE      |L1.27340|
                  |L1.27320|
;;;11041  		{
;;;11042  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006ab8  4bca              LDR      r3,|L1.28132|
006aba  a0c4              ADR      r0,|L1.28108|
006abc  f1030218          ADD      r2,r3,#0x18
006ac0  f1020118          ADD      r1,r2,#0x18
006ac4  f8cdb000          STR      r11,[sp,#0]
006ac8  f7fffffe          BL       show_mess
                  |L1.27340|
;;;11043  					"    ЗАБЛОКИРОВАН    ",
;;;11044  					"     НЕИСПРАВНА     ",
;;;11045  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11046  					5000);
;;;11047  		}
;;;11048  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006acc  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006ad0  2801              CMP      r0,#1
006ad2  d101              BNE      |L1.27352|
006ad4  f8878000          STRB     r8,[r7,#0]
                  |L1.27352|
;;;11049  	}
;;;11050  
;;;11051  
;;;11052  sp_ch_stat_old=sp_ch_stat;
006ad8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006ada  7030              STRB     r0,[r6,#0]
;;;11053  
;;;11054  
;;;11055  
;;;11056  if(speedChrgAvtEn==1)
006adc  49c2              LDR      r1,|L1.28136|
;;;11057  	{
;;;11058  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;11059  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11060  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11061  		#endif
;;;11062  		)
;;;11063  		{
;;;11064  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;11065  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11066  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;11067  		#endif
;;;11068  		#ifdef UKU_220_V2
;;;11069  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;11070  		#endif
;;;11071  		&&(!speedChrgBlckStat))
006ade  4c9d              LDR      r4,|L1.27988|
006ae0  8809              LDRH     r1,[r1,#0]            ;11056  ; speedChrgAvtEn
006ae2  2901              CMP      r1,#1                 ;11056
006ae4  d10a              BNE      |L1.27388|
006ae6  499c              LDR      r1,|L1.27992|
;;;11072  			{
;;;11073  			speedChargeStartCnt++;
006ae8  4ec0              LDR      r6,|L1.28140|
006aea  f8912023          LDRB     r2,[r1,#0x23]         ;11058  ; spc_stat
006aee  4310              ORRS     r0,r0,r2              ;11058
006af0  794a              LDRB     r2,[r1,#5]            ;11058  ; vz1_stat
006af2  79c9              LDRB     r1,[r1,#7]            ;11058  ; vz2_stat
006af4  4310              ORRS     r0,r0,r2              ;11058
006af6  4308              ORRS     r0,r0,r1              ;11058
006af8  d007              BEQ      |L1.27402|
;;;11074  			if(speedChargeStartCnt>=60)
;;;11075  				{
;;;11076  				speedChargeStartStop();
;;;11077  				speedz_mem_hndl(5);
;;;11078  				}
;;;11079  			}
;;;11080  		else speedChargeStartCnt=0;
;;;11081  		}
;;;11082  	else speedChargeStartCnt=0;
006afa  7035              STRB     r5,[r6,#0]
                  |L1.27388|
;;;11083  	}
;;;11084  
;;;11085  
;;;11086  
;;;11087  /*
;;;11088  if(speedChIsOn)
;;;11089  	{
;;;11090  	speedChTimeCnt++;
;;;11091  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11092  		{
;;;11093  		speedChIsOn=0;
;;;11094  		}
;;;11095  	if(speedChrgBlckStat)
;;;11096  		{
;;;11097  		speedChIsOn=0;
;;;11098  		speedChTimeCnt=0;
;;;11099  		}
;;;11100  	}
;;;11101  
;;;11102  
;;;11103  
;;;11104  if(speedChrgAvtEn)
;;;11105  	{
;;;11106  	if(!speedChIsOn)
;;;11107  		{
;;;11108  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11109  			{
;;;11110  			speedChIsOn=1;
;;;11111  			}
;;;11112  		}
;;;11113  	}
;;;11114  
;;;11115  
;;;11116  */
;;;11117  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006afc  48bc              LDR      r0,|L1.28144|
006afe  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006b00  2802              CMP      r0,#2
006b02  d02e              BEQ      |L1.27490|
006b04  8025              STRH     r5,[r4,#0]
                  |L1.27398|
;;;11118  else
;;;11119  	{
;;;11120  	speedChrgBlckStat=0;
;;;11121  	if(speedChrgBlckSrc==1)
;;;11122  		{
;;;11123  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11124  		}
;;;11125  	else if(speedChrgBlckSrc==2)
;;;11126  		{
;;;11127  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11128  		}
;;;11129  	}
;;;11130  
;;;11131  /*
;;;11132  if(speedChrgBlckStat==1)
;;;11133  	{
;;;11134  
;;;11135  	//speedChargeStartStop();
;;;11136  
;;;11137  	speedChrgShowCnt++;
;;;11138  	if(speedChrgShowCnt>=30)	
;;;11139  		{
;;;11140  		speedChrgShowCnt=0;
;;;11141  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11142  					"       ЗАРЯД        ",
;;;11143  					"     ЗАПРЕЩЕН!!!    ",
;;;11144  					"                    ",
;;;11145  					5000);
;;;11146  		}
;;;11147  	} 
;;;11148  else speedChrgShowCnt=0;  */
;;;11149  
;;;11150  
;;;11151  }
006b06  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27402|
006b0a  48ba              LDR      r0,|L1.28148|
006b0c  49ba              LDR      r1,|L1.28152|
006b0e  f9b00000          LDRSH    r0,[r0,#0]            ;11064  ; load_U
006b12  f9b11000          LDRSH    r1,[r1,#0]            ;11064  ; u_necc
006b16  4288              CMP      r0,r1                 ;11064
006b18  da14              BGE      |L1.27460|
006b1a  1a08              SUBS     r0,r1,r0              ;11064
006b1c  49b7              LDR      r1,|L1.28156|
006b1e  f9b11000          LDRSH    r1,[r1,#0]            ;11064  ; speedChrgDU
006b22  4288              CMP      r0,r1                 ;11064
006b24  dd0e              BLE      |L1.27460|
006b26  48b6              LDR      r0,|L1.28160|
006b28  49b6              LDR      r1,|L1.28164|
006b2a  f9b00000          LDRSH    r0,[r0,#0]            ;11066  ; Ib_ips_termokompensat
006b2e  8809              LDRH     r1,[r1,#0]            ;11066  ; IZMAX
006b30  fb90f0fa          SDIV     r0,r0,r10             ;11066
006b34  1a40              SUBS     r0,r0,r1              ;11066
006b36  b200              SXTH     r0,r0                 ;11066
006b38  f7fffffe          BL       abs
006b3c  2805              CMP      r0,#5                 ;11066
006b3e  da01              BGE      |L1.27460|
006b40  8820              LDRH     r0,[r4,#0]            ;11071  ; speedChrgBlckStat
006b42  b108              CBZ      r0,|L1.27464|
                  |L1.27460|
006b44  7035              STRB     r5,[r6,#0]            ;11080
006b46  e7d9              B        |L1.27388|
                  |L1.27464|
006b48  7830              LDRB     r0,[r6,#0]            ;11073  ; speedChargeStartCnt
006b4a  f1000001          ADD      r0,r0,#1              ;11073
006b4e  b2c0              UXTB     r0,r0                 ;11073
006b50  7030              STRB     r0,[r6,#0]            ;11073
006b52  283c              CMP      r0,#0x3c              ;11074
006b54  d3d2              BCC      |L1.27388|
006b56  f7fffffe          BL       speedChargeStartStop
006b5a  2005              MOVS     r0,#5                 ;11077
006b5c  f7fffffe          BL       speedz_mem_hndl
006b60  e7cc              B        |L1.27388|
                  |L1.27490|
006b62  8025              STRH     r5,[r4,#0]            ;11120
006b64  48a8              LDR      r0,|L1.28168|
006b66  49a9              LDR      r1,|L1.28172|
006b68  f44f63fa          MOV      r3,#0x7d0             ;11123
006b6c  f9b00000          LDRSH    r0,[r0,#0]            ;11127  ; speedChrgBlckLog
006b70  b918              CBNZ     r0,|L1.27514|
006b72  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;11127  ; adc_buff_
006b76  429a              CMP      r2,r3                 ;11127
006b78  dc05              BGT      |L1.27526|
                  |L1.27514|
006b7a  2801              CMP      r0,#1                 ;11127
006b7c  d1c3              BNE      |L1.27398|
006b7e  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;11127  ; adc_buff_
006b82  4298              CMP      r0,r3                 ;11127
006b84  dabf              BGE      |L1.27398|
                  |L1.27526|
006b86  f04f0001          MOV      r0,#1                 ;11127
006b8a  8020              STRH     r0,[r4,#0]            ;11127
006b8c  e7bb              B        |L1.27398|
;;;11152  
                          ENDP

                  averageChargeHndl PROC
;;;11211  //-----------------------------------------------
;;;11212  void averageChargeHndl(void)
006b8e  e92d4ff8          PUSH     {r3-r11,lr}
;;;11213  {
;;;11214  /*
;;;11215  if(hv_vz_stat==hvsOFF)
;;;11216  	{
;;;11217  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11218  	} */
;;;11219  if(hv_vz_stat!=hvsOFF)
006b92  f8dfa27c          LDR      r10,|L1.28176|
006b96  f04f0b00          MOV      r11,#0
006b9a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b9e  b130              CBZ      r0,|L1.27566|
;;;11220  	{
;;;11221  	hv_vz_stat=hvsOFF; 	
006ba0  f88ab000          STRB     r11,[r10,#0]
;;;11222  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006ba4  2100              MOVS     r1,#0
006ba6  f44f70b4          MOV      r0,#0x168
006baa  f7fffffe          BL       lc640_write
                  |L1.27566|
;;;11223  	}
;;;11224  
;;;11225  if(hv_vz_stat==hvsSTEP1)
006bae  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;11226  	{
;;;11227  	if(hv_vz_stat_old!=hv_vz_stat)
;;;11228  		{
;;;11229  		hv_vz_stat_cnt=5;
;;;11230  		}
;;;11231  	if(hv_vz_stat_cnt)
;;;11232  		{
;;;11233  		hv_vz_stat_cnt--;
;;;11234  		if(hv_vz_stat_cnt==0)
;;;11235  			{
;;;11236  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;11237  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;11238  			}
;;;11239  		}
;;;11240  	if(sk_stat[0]==1)
006bb2  4e7f              LDR      r6,|L1.28080|
006bb4  4d97              LDR      r5,|L1.28180|
006bb6  4c98              LDR      r4,|L1.28184|
006bb8  f04f0905          MOV      r9,#5                 ;11229
006bbc  2801              CMP      r0,#1                 ;11225
006bbe  d131              BNE      |L1.27684|
006bc0  7828              LDRB     r0,[r5,#0]            ;11227  ; hv_vz_stat_old
006bc2  2801              CMP      r0,#1                 ;11227
006bc4  d001              BEQ      |L1.27594|
006bc6  f8a49000          STRH     r9,[r4,#0]            ;11229
                  |L1.27594|
006bca  f9b40000          LDRSH    r0,[r4,#0]            ;11231  ; hv_vz_stat_cnt
006bce  b168              CBZ      r0,|L1.27628|
006bd0  f1a00001          SUB      r0,r0,#1              ;11233
006bd4  b200              SXTH     r0,r0                 ;11233
006bd6  8020              STRH     r0,[r4,#0]            ;11233
006bd8  b940              CBNZ     r0,|L1.27628|
006bda  f04f0006          MOV      r0,#6                 ;11236
006bde  f88a0000          STRB     r0,[r10,#0]           ;11236
006be2  4601              MOV      r1,r0                 ;11237
006be4  f44f70b4          MOV      r0,#0x168             ;11237
006be8  f7fffffe          BL       lc640_write
                  |L1.27628|
006bec  7830              LDRB     r0,[r6,#0]  ; sk_stat
006bee  2801              CMP      r0,#1
006bf0  d118              BNE      |L1.27684|
;;;11241  		{
;;;11242  		hv_vz_stat=hvsSTEP2;
006bf2  f04f0002          MOV      r0,#2
006bf6  f88a0000          STRB     r0,[r10,#0]
;;;11243  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006bfa  4601              MOV      r1,r0
006bfc  f44f70b4          MOV      r0,#0x168
006c00  f7fffffe          BL       lc640_write
;;;11244  		tree_up(iHV_STEP2_2,1,0,0);
006c04  2300              MOVS     r3,#0
006c06  461a              MOV      r2,r3
006c08  2101              MOVS     r1,#1
006c0a  20ed              MOVS     r0,#0xed
006c0c  f7fffffe          BL       tree_up
;;;11245  		tree_up(iHV_STEP2_1,0,0,0);
006c10  2300              MOVS     r3,#0
006c12  461a              MOV      r2,r3
006c14  4619              MOV      r1,r3
006c16  20ec              MOVS     r0,#0xec
006c18  f7fffffe          BL       tree_up
;;;11246  		ret(1200);
006c1c  f44f6096          MOV      r0,#0x4b0
006c20  f7fffffe          BL       ||ret||
                  |L1.27684|
;;;11247  		}
;;;11248  	}
;;;11249  
;;;11250  if(hv_vz_stat==hvsSTEP2)
006c24  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c28  2802              CMP      r0,#2
006c2a  d10b              BNE      |L1.27716|
;;;11251  	{
;;;11252  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c2c  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006c2e  2902              CMP      r1,#2
006c30  d101              BNE      |L1.27702|
006c32  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006c34  b911              CBNZ     r1,|L1.27708|
                  |L1.27702|
;;;11253  		{
;;;11254  		hv_vz_stat_cnt=15;
006c36  f04f010f          MOV      r1,#0xf
006c3a  8021              STRH     r1,[r4,#0]
                  |L1.27708|
;;;11255  		}
;;;11256  	hv_vz_stat_cnt--;
006c3c  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006c3e  f1a10101          SUB      r1,r1,#1
006c42  8021              STRH     r1,[r4,#0]
                  |L1.27716|
;;;11257  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;11258  	//	{
;;;11259  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;11260  	//				"  Напряжение будет  ",
;;;11261  	//				" увеличено до     @В",
;;;11262  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;11263  	//				4800,UVZ,1);
;;;11264  	//	}
;;;11265  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;11266  	//	{
;;;11267  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;11268  	//				"     НАЖАТИЕМ       ",
;;;11269  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;11270  	//				"      КНОПКИ        ",
;;;11271  	//				4800);
;;;11272  	//	} 
;;;11273  /*	if(sk_stat[1]==1)
;;;11274  		{
;;;11275  		hv_vz_stat=hvsWRK;
;;;11276  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;11277  		}*/
;;;11278  	}
;;;11279  
;;;11280  if(hv_vz_stat==hvsSTEP3)
;;;11281  	{
;;;11282  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;11283  		{
;;;11284  		hv_vz_stat_cnt=10;
006c44  270a              MOVS     r7,#0xa
;;;11285  		}
;;;11286  	hv_vz_stat_cnt--;
;;;11287  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;11288  		{
;;;11289  		show_mess(	"     ВКЛЮЧИТЕ       ",
006c46  f2413888          MOV      r8,#0x1388
006c4a  2803              CMP      r0,#3                 ;11280
006c4c  d123              BNE      |L1.27798|
006c4e  7828              LDRB     r0,[r5,#0]            ;11282  ; hv_vz_stat_old
006c50  2803              CMP      r0,#3                 ;11282
006c52  d101              BNE      |L1.27736|
006c54  8820              LDRH     r0,[r4,#0]            ;11282  ; hv_vz_stat_cnt
006c56  b900              CBNZ     r0,|L1.27738|
                  |L1.27736|
006c58  8027              STRH     r7,[r4,#0]            ;11284
                  |L1.27738|
006c5a  8820              LDRH     r0,[r4,#0]            ;11286  ; hv_vz_stat_cnt
006c5c  f1a00001          SUB      r0,r0,#1              ;11286
006c60  b200              SXTH     r0,r0                 ;11286
006c62  8020              STRH     r0,[r4,#0]            ;11286
006c64  280a              CMP      r0,#0xa               ;11287
006c66  d001              BEQ      |L1.27756|
006c68  2809              CMP      r0,#9                 ;11287
006c6a  d10a              BNE      |L1.27778|
                  |L1.27756|
006c6c  4b3b              LDR      r3,|L1.27996|
006c6e  a26b              ADR      r2,|L1.28188|
006c70  3b48              SUBS     r3,r3,#0x48
006c72  f5a361bf          SUB      r1,r3,#0x5f8
006c76  f1010018          ADD      r0,r1,#0x18
006c7a  f8cd8000          STR      r8,[sp,#0]
006c7e  f7fffffe          BL       show_mess
                  |L1.27778|
;;;11290  					"      ТУМБЛЕР       ",
;;;11291  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11292  					"       ЗАРЯД        ",
;;;11293  					5000);
;;;11294  		}
;;;11295  	if(sk_stat[1]==1)
006c82  7870              LDRB     r0,[r6,#1]  ; sk_stat
006c84  2801              CMP      r0,#1
006c86  d106              BNE      |L1.27798|
;;;11296  		{
;;;11297  		hv_vz_stat=hvsWRK;
006c88  f88a9000          STRB     r9,[r10,#0]
;;;11298  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006c8c  2105              MOVS     r1,#5
006c8e  f44f70b4          MOV      r0,#0x168
006c92  f7fffffe          BL       lc640_write
                  |L1.27798|
;;;11299  		}
;;;11300  	}
;;;11301  
;;;11302  if(hv_vz_stat==hvsWRK)
006c96  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c9a  2805              CMP      r0,#5
006c9c  d13a              BNE      |L1.27924|
;;;11303  	{
;;;11304  	if(hv_vz_stat_old!=hv_vz_stat)
006c9e  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;11305  		{
;;;11306  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006ca0  4a64              LDR      r2,|L1.28212|
;;;11307  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;11308  		hv_vz_up_cnt=0L;
006ca2  4947              LDR      r1,|L1.28096|
006ca4  2805              CMP      r0,#5                 ;11304
006ca6  d00d              BEQ      |L1.27844|
006ca8  4863              LDR      r0,|L1.28216|
006caa  f44f6361          MOV      r3,#0xe10             ;11306
006cae  f9b00000          LDRSH    r0,[r0,#0]            ;11306  ; VZ_HR
006cb2  fb00f303          MUL      r3,r0,r3              ;11306
006cb6  6013              STR      r3,[r2,#0]            ;11306  ; hv_vz_wrk_cnt
006cb8  b910              CBNZ     r0,|L1.27840|
006cba  f44f60e1          MOV      r0,#0x708             ;11307
006cbe  6010              STR      r0,[r2,#0]            ;11307  ; hv_vz_wrk_cnt
                  |L1.27840|
006cc0  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27844|
;;;11309  		}
;;;11310  	hv_vz_wrk_cnt--;
006cc4  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006cc6  f1a00001          SUB      r0,r0,#1
006cca  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;11311  	hv_vz_up_cnt++;
006ccc  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006cce  f1020201          ADD      r2,r2,#1
006cd2  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11312  
;;;11313  	if(hv_vz_wrk_cnt==0)
006cd4  b940              CBNZ     r0,|L1.27880|
;;;11314  		{
;;;11315  		hv_vz_stat=hvsERR4;
006cd6  f04f0009          MOV      r0,#9
006cda  f88a0000          STRB     r0,[r10,#0]
;;;11316  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006cde  4601              MOV      r1,r0
006ce0  f44f70b4          MOV      r0,#0x168
006ce4  f7fffffe          BL       lc640_write
                  |L1.27880|
;;;11317  		}
;;;11318  	if(sk_stat[0]==0)
006ce8  7830              LDRB     r0,[r6,#0]  ; sk_stat
006cea  b940              CBNZ     r0,|L1.27902|
;;;11319  		{
;;;11320  		hv_vz_stat=hvsERR2;
006cec  f04f0007          MOV      r0,#7
006cf0  f88a0000          STRB     r0,[r10,#0]
;;;11321  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006cf4  4601              MOV      r1,r0
006cf6  f44f70b4          MOV      r0,#0x168
006cfa  f7fffffe          BL       lc640_write
                  |L1.27902|
;;;11322  		}
;;;11323  	if(sk_stat[1]==0)
006cfe  7870              LDRB     r0,[r6,#1]  ; sk_stat
006d00  b940              CBNZ     r0,|L1.27924|
;;;11324  		{
;;;11325  		hv_vz_stat=hvsERR3;
006d02  f04f0008          MOV      r0,#8
006d06  f88a0000          STRB     r0,[r10,#0]
;;;11326  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006d0a  4601              MOV      r1,r0
006d0c  f44f70b4          MOV      r0,#0x168
006d10  f7fffffe          BL       lc640_write
                  |L1.27924|
;;;11327  		}
;;;11328  	}
;;;11329  
;;;11330  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006d14  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d18  2806              CMP      r0,#6
006d1a  d119              BNE      |L1.27984|
;;;11331  	{
;;;11332  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006d1c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006d1e  2806              CMP      r0,#6
006d20  d101              BNE      |L1.27942|
006d22  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d24  b900              CBNZ     r0,|L1.27944|
                  |L1.27942|
;;;11333  		{
;;;11334  		hv_vz_stat_cnt=10;
006d26  8027              STRH     r7,[r4,#0]
                  |L1.27944|
;;;11335  		}
;;;11336  	hv_vz_stat_cnt--;
006d28  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d2a  f1a00001          SUB      r0,r0,#1
006d2e  b200              SXTH     r0,r0
006d30  8020              STRH     r0,[r4,#0]
;;;11337  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006d32  280a              CMP      r0,#0xa
006d34  d001              BEQ      |L1.27962|
006d36  2809              CMP      r0,#9
006d38  d10a              BNE      |L1.27984|
                  |L1.27962|
;;;11338  		{
;;;11339  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006d3a  4b23              LDR      r3,|L1.28104|
006d3c  f8cd8000          STR      r8,[sp,#0]
006d40  f1030218          ADD      r2,r3,#0x18
006d44  f1020118          ADD      r1,r2,#0x18
006d48  f2a15084          SUB      r0,r1,#0x584
006d4c  f7fffffe          BL       show_mess
                  |L1.27984|
;;;11340  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11341  					"      ВКЛЮЧЕН       ",
;;;11342  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11343  					5000);
;;;11344  		}
;;;11345  	}
;;;11346  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006d50  e074              B        |L1.28220|
006d52  0000              DCW      0x0000
                  |L1.27988|
                          DCD      speedChrgBlckStat
                  |L1.27992|
                          DCD      ||area_number.25||
                  |L1.27996|
                          DCD      ||.text||+0x1d64
                  |L1.28000|
006d60  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006d64  e7e0e1eb
006d68  eeeae8f0
006d6c  eee2e0ed
006d70  21      
006d71  20202000          DCB      "   ",0
006d75  00                DCB      0
006d76  00                DCB      0
006d77  00                DCB      0
                  |L1.28024|
006d78  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006d7c  202020e7
006d80  e0f0ffe4
006d84  20202020
006d88  20202020
006d8c  00      
006d8d  00                DCB      0
006d8e  00                DCB      0
006d8f  00                DCB      0
                  |L1.28048|
006d90  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006d94  20d3f1ea
006d98  eef0e5ed
006d9c  edfbe920
006da0  20202020
006da4  00      
006da5  00                DCB      0
006da6  00                DCB      0
006da7  00                DCB      0
                  |L1.28072|
                          DCD      sp_ch_stat
                  |L1.28076|
                          DCD      SP_CH_VENT_BLOK
                  |L1.28080|
                          DCD      sk_stat
                  |L1.28084|
                          DCD      sp_ch_stat_old
                  |L1.28088|
                          DCD      sp_ch_stat_cnt
                  |L1.28092|
                          DCD      sp_ch_wrk_cnt
                  |L1.28096|
                          DCD      hv_vz_up_cnt
                  |L1.28100|
                          DCD      speedChrgTimeInHour
                  |L1.28104|
                          DCD      ||.text||+0x1c2c
                  |L1.28108|
006dcc  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006dd0  caced0c5
006dd4  cdcddbc9
006dd8  20c7c0  
006ddb  d0dfc420          DCB      208,223,196,"  ",0
006ddf  2000    
006de1  00                DCB      0
006de2  00                DCB      0
006de3  00                DCB      0
                  |L1.28132|
                          DCD      ||.text||+0x1690
                  |L1.28136|
                          DCD      speedChrgAvtEn
                  |L1.28140|
                          DCD      speedChargeStartCnt
                  |L1.28144|
                          DCD      speedChrgBlckSrc
                  |L1.28148|
                          DCD      load_U
                  |L1.28152|
                          DCD      u_necc
                  |L1.28156|
                          DCD      speedChrgDU
                  |L1.28160|
                          DCD      Ib_ips_termokompensat
                  |L1.28164|
                          DCD      IZMAX
                  |L1.28168|
                          DCD      speedChrgBlckLog
                  |L1.28172|
                          DCD      ||.bss||+0x40c
                  |L1.28176|
                          DCD      hv_vz_stat
                  |L1.28180|
                          DCD      hv_vz_stat_old
                  |L1.28184|
                          DCD      hv_vz_stat_cnt
                  |L1.28188|
006e1c  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006e20  dbd0c0c2
006e24  cdc8c2c0
006e28  ded9c8c9
006e2c  20202020          DCB      "    ",0
006e30  00      
006e31  00                DCB      0
006e32  00                DCB      0
006e33  00                DCB      0
                  |L1.28212|
                          DCD      hv_vz_wrk_cnt
                  |L1.28216|
                          DCD      VZ_HR
                  |L1.28220|
006e3c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e40  2807              CMP      r0,#7
006e42  d123              BNE      |L1.28300|
;;;11347  	{
;;;11348  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e44  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e46  2807              CMP      r0,#7
006e48  d101              BNE      |L1.28238|
006e4a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e4c  b900              CBNZ     r0,|L1.28240|
                  |L1.28238|
;;;11349  		{
;;;11350  		hv_vz_stat_cnt=10;
006e4e  8027              STRH     r7,[r4,#0]
                  |L1.28240|
;;;11351  		}
;;;11352  	hv_vz_stat_cnt--;
006e50  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e52  f1a00001          SUB      r0,r0,#1
006e56  b200              SXTH     r0,r0
006e58  8020              STRH     r0,[r4,#0]
;;;11353  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e5a  280a              CMP      r0,#0xa
006e5c  d001              BEQ      |L1.28258|
006e5e  2809              CMP      r0,#9
006e60  d10a              BNE      |L1.28280|
                  |L1.28258|
;;;11354  		{
;;;11355  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e62  4bff              LDR      r3,|L1.29280|
006e64  f8cd8000          STR      r8,[sp,#0]
006e68  f1030218          ADD      r2,r3,#0x18
006e6c  f1020118          ADD      r1,r2,#0x18
006e70  f1010018          ADD      r0,r1,#0x18
006e74  f7fffffe          BL       show_mess
                  |L1.28280|
;;;11356  					"    ЗАБЛОКИРОВАН    ",
;;;11357  					"     НЕИСПРАВНА     ",
;;;11358  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11359  					5000);
;;;11360  		}
;;;11361  	if(sk_stat[0]==1)
006e78  7830              LDRB     r0,[r6,#0]  ; sk_stat
006e7a  2801              CMP      r0,#1
006e7c  d106              BNE      |L1.28300|
;;;11362  		{
;;;11363  		hv_vz_stat=hvsWRK;
006e7e  f88a9000          STRB     r9,[r10,#0]
;;;11364  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006e82  2105              MOVS     r1,#5
006e84  f44f70b4          MOV      r0,#0x168
006e88  f7fffffe          BL       lc640_write
                  |L1.28300|
;;;11365  		}
;;;11366  	}
;;;11367  
;;;11368  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006e8c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e90  2808              CMP      r0,#8
006e92  d123              BNE      |L1.28380|
;;;11369  	{
;;;11370  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e94  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e96  2808              CMP      r0,#8
006e98  d101              BNE      |L1.28318|
006e9a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e9c  b900              CBNZ     r0,|L1.28320|
                  |L1.28318|
;;;11371  		{
;;;11372  		hv_vz_stat_cnt=10;
006e9e  8027              STRH     r7,[r4,#0]
                  |L1.28320|
;;;11373  		}
;;;11374  	hv_vz_stat_cnt--;
006ea0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ea2  f1a00001          SUB      r0,r0,#1
006ea6  b200              SXTH     r0,r0
006ea8  8020              STRH     r0,[r4,#0]
;;;11375  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006eaa  280a              CMP      r0,#0xa
006eac  d001              BEQ      |L1.28338|
006eae  2809              CMP      r0,#9
006eb0  d10a              BNE      |L1.28360|
                  |L1.28338|
;;;11376  		{
;;;11377  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006eb2  4bec              LDR      r3,|L1.29284|
006eb4  f8cd8000          STR      r8,[sp,#0]
006eb8  f2a35254          SUB      r2,r3,#0x554
006ebc  f1020118          ADD      r1,r2,#0x18
006ec0  f2a150e4          SUB      r0,r1,#0x5e4
006ec4  f7fffffe          BL       show_mess
                  |L1.28360|
;;;11378  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;11379  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;11380  					"    ТУМБЛЕРА!!!     ",
;;;11381  					5000);
;;;11382  		}
;;;11383  	if(sk_stat[1]==1)
006ec8  7870              LDRB     r0,[r6,#1]  ; sk_stat
006eca  2801              CMP      r0,#1
006ecc  d106              BNE      |L1.28380|
;;;11384  		{
;;;11385  		hv_vz_stat=hvsWRK;
006ece  f88a9000          STRB     r9,[r10,#0]
;;;11386  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006ed2  2105              MOVS     r1,#5
006ed4  f44f70b4          MOV      r0,#0x168
006ed8  f7fffffe          BL       lc640_write
                  |L1.28380|
;;;11387  		}
;;;11388  	}
;;;11389  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006edc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ee0  2809              CMP      r0,#9
006ee2  d124              BNE      |L1.28462|
;;;11390  	{
;;;11391  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ee4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006ee6  2809              CMP      r0,#9
006ee8  d101              BNE      |L1.28398|
006eea  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006eec  b900              CBNZ     r0,|L1.28400|
                  |L1.28398|
;;;11392  		{
;;;11393  		hv_vz_stat_cnt=10;
006eee  8027              STRH     r7,[r4,#0]
                  |L1.28400|
;;;11394  		}
;;;11395  	hv_vz_stat_cnt--;
006ef0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ef2  f1a00001          SUB      r0,r0,#1
006ef6  b200              SXTH     r0,r0
006ef8  8020              STRH     r0,[r4,#0]
;;;11396  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006efa  280a              CMP      r0,#0xa
006efc  d001              BEQ      |L1.28418|
006efe  2809              CMP      r0,#9
006f00  d10a              BNE      |L1.28440|
                  |L1.28418|
;;;11397  		{
;;;11398  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006f02  4bd9              LDR      r3,|L1.29288|
006f04  f2af02ec          ADR      r2,|L1.28188|
006f08  f5a361bf          SUB      r1,r3,#0x5f8
006f0c  f50160c5          ADD      r0,r1,#0x628
006f10  f8cd8000          STR      r8,[sp,#0]
006f14  f7fffffe          BL       show_mess
                  |L1.28440|
;;;11399  					"      ТУМБЛЕР       ",
;;;11400  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11401  					"       ЗАРЯД        ",
;;;11402  					5000);
;;;11403  		}
;;;11404  	if(sk_stat[1]==0)
006f18  7870              LDRB     r0,[r6,#1]  ; sk_stat
006f1a  b940              CBNZ     r0,|L1.28462|
;;;11405  		{
;;;11406  		hv_vz_stat=hvsOFF;
006f1c  f88ab000          STRB     r11,[r10,#0]
;;;11407  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006f20  2100              MOVS     r1,#0
006f22  f44f70b4          MOV      r0,#0x168
006f26  f7fffffe          BL       lc640_write
;;;11408  		vz_stop();
006f2a  f7fffffe          BL       vz_stop
                  |L1.28462|
;;;11409  
;;;11410  		}
;;;11411  	}
;;;11412  hv_vz_stat_old=hv_vz_stat;
006f2e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006f32  7028              STRB     r0,[r5,#0]
;;;11413  /*
;;;11414  if(speedChIsOn)
;;;11415  	{
;;;11416  	speedChTimeCnt++;
;;;11417  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11418  		{
;;;11419  		speedChIsOn=0;
;;;11420  		}
;;;11421  	if(speedChrgBlckStat)
;;;11422  		{
;;;11423  		speedChIsOn=0;
;;;11424  		speedChTimeCnt=0;
;;;11425  		}
;;;11426  	}
;;;11427  
;;;11428  
;;;11429  
;;;11430  if(speedChrgAvtEn)
;;;11431  	{
;;;11432  	if(!speedChIsOn)
;;;11433  		{
;;;11434  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11435  			{
;;;11436  			speedChIsOn=1;
;;;11437  			}
;;;11438  		}
;;;11439  	}
;;;11440  
;;;11441  
;;;11442  
;;;11443  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;11444  else
;;;11445  	{
;;;11446  	speedChrgBlckStat=0;
;;;11447  	if(speedChrgBlckSrc==1)
;;;11448  		{
;;;11449  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11450  		}
;;;11451  	else if(speedChrgBlckSrc==2)
;;;11452  		{
;;;11453  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11454  		}
;;;11455  	}
;;;11456  
;;;11457  
;;;11458  if(speedChrgBlckStat==1)
;;;11459  	{
;;;11460  
;;;11461  	//speedChargeStartStop();
;;;11462  
;;;11463  	speedChrgShowCnt++;
;;;11464  	if(speedChrgShowCnt>=30)	
;;;11465  		{
;;;11466  		speedChrgShowCnt=0;
;;;11467  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11468  					"       ЗАРЯД        ",
;;;11469  					"     ЗАПРЕЩЕН!!!    ",
;;;11470  					"                    ",
;;;11471  					5000);
;;;11472  		}
;;;11473  	}
;;;11474  else speedChrgShowCnt=0;
;;;11475  
;;;11476  */
;;;11477  }
006f34  e5e7              B        |L1.27398|
;;;11478  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;11495  //-----------------------------------------------
;;;11496  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006f36  e92d41f0          PUSH     {r4-r8,lr}
;;;11497  {
;;;11498  
;;;11499  numOfForvardBps_old=numOfForvardBps;
006f3a  4ccc              LDR      r4,|L1.29292|
006f3c  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006f3e  7060              STRB     r0,[r4,#1]
;;;11500  
;;;11501  numOfForvardBps=0;
006f40  f04f0500          MOV      r5,#0
006f44  f8045928          STRB     r5,[r4],#-0x28
;;;11502  
;;;11503  //FORVARDBPSCHHOUR=10;
;;;11504  
;;;11505  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006f48  4ec9              LDR      r6,|L1.29296|
006f4a  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006f4e  2800              CMP      r0,#0
006f50  dd02              BLE      |L1.28504|
006f52  f5b07ffa          CMP      r0,#0x1f4
006f56  dd02              BLE      |L1.28510|
                  |L1.28504|
;;;11506  	{
;;;11507  	FORVARDBPSCHHOUR=0;
006f58  8035              STRH     r5,[r6,#0]
                  |L1.28506|
;;;11508  	return;
;;;11509  	}
;;;11510  
;;;11511  numOfForvardBps_minCnt++;
;;;11512  
;;;11513  
;;;11514  if(numOfForvardBps_minCnt>=60)
;;;11515  	{
;;;11516  	numOfForvardBps_minCnt=0;
;;;11517  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;11518  	numOfForvardBps_hourCnt++;
;;;11519  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;11520  		{
;;;11521  		numOfForvardBps_hourCnt=0;
;;;11522  		}
;;;11523  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;11524  	}
;;;11525  
;;;11526  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;11527  
;;;11528  //if(numOfForvardBps)
;;;11529  //numOfForvardBps_old=numOfForvardBps; 
;;;11530  }
006f5a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28510|
006f5e  f894002a          LDRB     r0,[r4,#0x2a]         ;11511  ; numOfForvardBps_minCnt
006f62  f1000001          ADD      r0,r0,#1              ;11511
006f66  b2c0              UXTB     r0,r0                 ;11511
006f68  f884002a          STRB     r0,[r4,#0x2a]         ;11511
006f6c  283c              CMP      r0,#0x3c              ;11514
006f6e  d31b              BCC      |L1.28584|
006f70  f884502a          STRB     r5,[r4,#0x2a]         ;11516
006f74  f44f7794          MOV      r7,#0x128             ;11517
006f78  4638              MOV      r0,r7                 ;11517
006f7a  f7fffffe          BL       lc640_read_int
006f7e  f1000001          ADD      r0,r0,#1              ;11518
006f82  b200              SXTH     r0,r0                 ;11518
006f84  f8a40074          STRH     r0,[r4,#0x74]         ;11518
006f88  4aba              LDR      r2,|L1.29300|
006f8a  f9b61000          LDRSH    r1,[r6,#0]            ;11519  ; FORVARDBPSCHHOUR
006f8e  f9b22000          LDRSH    r2,[r2,#0]            ;11519  ; NUMIST
006f92  fb01f102          MUL      r1,r1,r2              ;11519
006f96  4281              CMP      r1,r0                 ;11519
006f98  dc01              BGT      |L1.28574|
006f9a  f8a45074          STRH     r5,[r4,#0x74]         ;11521
                  |L1.28574|
006f9e  f9b41074          LDRSH    r1,[r4,#0x74]         ;11523  ; numOfForvardBps_hourCnt
006fa2  4638              MOV      r0,r7                 ;11523
006fa4  f7fffffe          BL       lc640_write_int
                  |L1.28584|
006fa8  f9b40074          LDRSH    r0,[r4,#0x74]         ;11526  ; numOfForvardBps_hourCnt
006fac  f9b61000          LDRSH    r1,[r6,#0]            ;11526  ; FORVARDBPSCHHOUR
006fb0  fb90f0f1          SDIV     r0,r0,r1              ;11526
006fb4  f8840028          STRB     r0,[r4,#0x28]         ;11526
006fb8  e7cf              B        |L1.28506|
;;;11531  
                          ENDP

                  numOfForvardBps_init PROC
;;;11532  //-----------------------------------------------
;;;11533  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006fba  b510              PUSH     {r4,lr}
;;;11534  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;11535  lc640_write_int(EE_FORVBPSHOURCNT,0);
006fbc  2100              MOVS     r1,#0
006fbe  f44f7094          MOV      r0,#0x128
006fc2  f7fffffe          BL       lc640_write_int
;;;11536  numOfForvardBps_minCnt=58;
006fc6  49a9              LDR      r1,|L1.29292|
006fc8  f04f003a          MOV      r0,#0x3a
006fcc  f1a10128          SUB      r1,r1,#0x28
006fd0  f881002a          STRB     r0,[r1,#0x2a]
;;;11537  }
006fd4  bd10              POP      {r4,pc}
;;;11538  
                          ENDP

                  outVoltContrHndl PROC
;;;11539  //-----------------------------------------------
;;;11540  void outVoltContrHndl(void)
006fd6  b570              PUSH     {r4-r6,lr}
;;;11541  { 
;;;11542  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006fd8  4ca7              LDR      r4,|L1.29304|
006fda  48a8              LDR      r0,|L1.29308|
;;;11543  	{
;;;11544  	outVoltContrHndlCnt_=0;
;;;11545  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006fdc  4aa8              LDR      r2,|L1.29312|
006fde  f9b41000          LDRSH    r1,[r4,#0]            ;11542  ; load_U
006fe2  f9b06000          LDRSH    r6,[r0,#0]            ;11542  ; U_OUT_KONTR_MAX
006fe6  2500              MOVS     r5,#0                 ;11544
006fe8  f9b20000          LDRSH    r0,[r2,#0]
006fec  4ba5              LDR      r3,|L1.29316|
006fee  42b1              CMP      r1,r6                 ;11542
006ff0  dc04              BGT      |L1.28668|
006ff2  4ea5              LDR      r6,|L1.29320|
006ff4  f9b66000          LDRSH    r6,[r6,#0]            ;11542  ; U_OUT_KONTR_MIN
006ff8  42b1              CMP      r1,r6                 ;11542
006ffa  da0f              BGE      |L1.28700|
                  |L1.28668|
006ffc  801d              STRH     r5,[r3,#0]            ;11544
006ffe  49a3              LDR      r1,|L1.29324|
007000  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
007004  4288              CMP      r0,r1
007006  da1b              BGE      |L1.28736|
;;;11546  		{
;;;11547  		outVoltContrHndlCnt++;
007008  f1000001          ADD      r0,r0,#1
00700c  b200              SXTH     r0,r0
00700e  8010              STRH     r0,[r2,#0]
;;;11548  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
007010  4288              CMP      r0,r1
007012  d115              BNE      |L1.28736|
;;;11549  			{
;;;11550  			avar_uout_hndl(1);
007014  2001              MOVS     r0,#1
007016  f7fffffe          BL       avar_uout_hndl
00701a  e011              B        |L1.28736|
                  |L1.28700|
;;;11551  			}
;;;11552  		}
;;;11553  	}
;;;11554  else
;;;11555  	{
;;;11556  	if(outVoltContrHndlCnt)
00701c  b180              CBZ      r0,|L1.28736|
;;;11557  		{
;;;11558  		if(outVoltContrHndlCnt_<5)
00701e  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
007022  2805              CMP      r0,#5
007024  da0c              BGE      |L1.28736|
;;;11559  			{
;;;11560  			outVoltContrHndlCnt_++;
007026  f1000001          ADD      r0,r0,#1
00702a  b200              SXTH     r0,r0
00702c  8018              STRH     r0,[r3,#0]
;;;11561  			if(outVoltContrHndlCnt_>=5)
00702e  2805              CMP      r0,#5
007030  db06              BLT      |L1.28736|
;;;11562  				{
;;;11563  				outVoltContrHndlCnt=0;
007032  8015              STRH     r5,[r2,#0]
;;;11564  				if(uout_av)avar_uout_hndl(0);
007034  4896              LDR      r0,|L1.29328|
007036  7800              LDRB     r0,[r0,#0]  ; uout_av
007038  b110              CBZ      r0,|L1.28736|
00703a  2000              MOVS     r0,#0
00703c  f7fffffe          BL       avar_uout_hndl
                  |L1.28736|
;;;11565  				}
;;;11566  			}
;;;11567  		}
;;;11568  	}
;;;11569  
;;;11570  if (load_U<(USIGN*10)) 
007040  4894              LDR      r0,|L1.29332|
007042  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
007046  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
00704a  eb000080          ADD      r0,r0,r0,LSL #2
00704e  ebb10f40          CMP      r1,r0,LSL #1
007052  da0b              BGE      |L1.28780|
;;;11571  	{
;;;11572  	if(!bSILENT)
007054  4890              LDR      r0,|L1.29336|
007056  6800              LDR      r0,[r0,#0]  ; bSILENT
007058  2800              CMP      r0,#0
00705a  d107              BNE      |L1.28780|
;;;11573  		{
;;;11574  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
00705c  e8bd4070          POP      {r4-r6,lr}
007060  2314              MOVS     r3,#0x14
007062  2201              MOVS     r2,#1
007064  2172              MOVS     r1,#0x72
007066  20d2              MOVS     r0,#0xd2
007068  f7ffbffe          B.W      mess_send
                  |L1.28780|
;;;11575  		}
;;;11576  
;;;11577  	//bU_BAT2REL_AV_BAT=1;
;;;11578  	}
;;;11579  
;;;11580  
;;;11581  }
00706c  bd70              POP      {r4-r6,pc}
;;;11582  
                          ENDP

                  vent_resurs_hndl PROC
;;;11583  //-----------------------------------------------
;;;11584  void vent_resurs_hndl(void)
00706e  e92d47f0          PUSH     {r4-r10,lr}
;;;11585  {
;;;11586  char i;
;;;11587  char crc_in,crc_eval;
;;;11588  
;;;11589  for(i=0;i<NUMIST;i++)
007072  f04f0200          MOV      r2,#0
;;;11590  	{
;;;11591  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11592  		{
;;;11593  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11594  		}
;;;11595  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11596  		{
;;;11597  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11598  		}
;;;11599  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11600  		{
;;;11601  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11602  		}
;;;11603  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11604  		{
;;;11605  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11606  		}
;;;11607  	crc_in=0;
;;;11608  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11609  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11610  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11611  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11612  
;;;11613  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11614  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11615  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11616  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11617  
;;;11618  	if(crc_eval==crc_in)
;;;11619  		{
;;;11620  		unsigned short temp_US;
;;;11621  		temp_US=0;
;;;11622  
;;;11623  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11624  		temp_US<<=4;
;;;11625  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11626  		temp_US<<=4;
;;;11627  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11628  		temp_US<<=4;
;;;11629  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11630  
;;;11631  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11632  		}
;;;11633  
;;;11634  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
007076  4889              LDR      r0,|L1.29340|
007078  f8dfc224          LDR      r12,|L1.29344|
00707c  f9b06000          LDRSH    r6,[r0,#0]
007080  487c              LDR      r0,|L1.29300|
007082  f9b07000          LDRSH    r7,[r0,#0]            ;11589
007086  e06e              B        |L1.29030|
                  |L1.28808|
007088  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11591
00708c  eb001002          ADD      r0,r0,r2,LSL #4       ;11591
007090  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11591
007094  7b41              LDRB     r1,[r0,#0xd]          ;11591
007096  098b              LSRS     r3,r1,#6              ;11591
007098  d006              BEQ      |L1.28840|
00709a  2301              MOVS     r3,#1                 ;11595
00709c  ebb31f91          CMP      r3,r1,LSR #6          ;11595
0070a0  d105              BNE      |L1.28846|
0070a2  f8801059          STRB     r1,[r0,#0x59]         ;11597
0070a6  e00f              B        |L1.28872|
                  |L1.28840|
0070a8  f8801058          STRB     r1,[r0,#0x58]         ;11593
0070ac  e00c              B        |L1.28872|
                  |L1.28846|
0070ae  2302              MOVS     r3,#2                 ;11599
0070b0  ebb31f91          CMP      r3,r1,LSR #6          ;11599
0070b4  d102              BNE      |L1.28860|
0070b6  f880105a          STRB     r1,[r0,#0x5a]         ;11601
0070ba  e005              B        |L1.28872|
                  |L1.28860|
0070bc  2303              MOVS     r3,#3                 ;11603
0070be  ebb31f91          CMP      r3,r1,LSR #6          ;11603
0070c2  d101              BNE      |L1.28872|
0070c4  f880105b          STRB     r1,[r0,#0x5b]         ;11605
                  |L1.28872|
0070c8  f8101f58          LDRB     r1,[r0,#0x58]!        ;11608
0070cc  f3c11401          UBFX     r4,r1,#4,#2           ;11608
0070d0  7843              LDRB     r3,[r0,#1]            ;11609
0070d2  f0030530          AND      r5,r3,#0x30           ;11609
0070d6  ea440495          ORR      r4,r4,r5,LSR #2       ;11609
0070da  f8909002          LDRB     r9,[r0,#2]            ;11610
0070de  f0090830          AND      r8,r9,#0x30           ;11610
0070e2  ea480804          ORR      r8,r8,r4              ;11610
0070e6  78c5              LDRB     r5,[r0,#3]            ;11611
0070e8  f1a00058          SUB      r0,r0,#0x58           ;11611
0070ec  f0050430          AND      r4,r5,#0x30           ;11611
0070f0  ea480884          ORR      r8,r8,r4,LSL #2       ;11611
0070f4  f001010f          AND      r1,r1,#0xf            ;11613
0070f8  f003040f          AND      r4,r3,#0xf            ;11614
0070fc  ea840a01          EOR      r10,r4,r1             ;11614
007100  f009030f          AND      r3,r9,#0xf            ;11615
007104  ea83090a          EOR      r9,r3,r10             ;11615
007108  f005050f          AND      r5,r5,#0xf            ;11616
00710c  ea850909          EOR      r9,r5,r9              ;11616
007110  45c1              CMP      r9,r8                 ;11618
007112  d113              BNE      |L1.28988|
007114  ea4f1505          LSL      r5,r5,#4              ;11624
007118  ea430305          ORR      r3,r3,r5              ;11625
00711c  ea4f1303          LSL      r3,r3,#4              ;11626
007120  ea440403          ORR      r4,r4,r3              ;11627
007124  ea4f5304          LSL      r3,r4,#20             ;11628
007128  ea4f4313          LSR      r3,r3,#16             ;11628
00712c  ea410103          ORR      r1,r1,r3              ;11629
007130  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11631
007134  428b              CMP      r3,r1                 ;11631
007136  d001              BEQ      |L1.28988|
007138  f8a0105c          STRH     r1,[r0,#0x5c]         ;11631
                  |L1.28988|
00713c  f8b0105c          LDRH     r1,[r0,#0x5c]
007140  eb060386          ADD      r3,r6,r6,LSL #2
007144  ebb10f43          CMP      r1,r3,LSL #1
007148  dd06              BLE      |L1.29016|
00714a  2e00              CMP      r6,#0
00714c  dd04              BLE      |L1.29016|
;;;11635  		{
;;;11636  		bps[i]._av|=(1<<4);
00714e  7841              LDRB     r1,[r0,#1]
007150  f0410110          ORR      r1,r1,#0x10
007154  7041              STRB     r1,[r0,#1]
007156  e003              B        |L1.29024|
                  |L1.29016|
;;;11637  		}
;;;11638  	else bps[i]._av&=~(1<<4);
007158  7841              LDRB     r1,[r0,#1]
00715a  f0210110          BIC      r1,r1,#0x10
00715e  7041              STRB     r1,[r0,#1]
                  |L1.29024|
007160  f1020201          ADD      r2,r2,#1              ;11589
007164  b2d2              UXTB     r2,r2                 ;11589
                  |L1.29030|
007166  42ba              CMP      r2,r7                 ;11589
007168  db8e              BLT      |L1.28808|
;;;11639  	}
;;;11640  }
00716a  e8bd87f0          POP      {r4-r10,pc}
;;;11641  
                          ENDP

                  vent_hndl PROC
;;;11643  //-----------------------------------------------
;;;11644  void vent_hndl(void)
00716e  e92d4ff0          PUSH     {r4-r11,lr}
;;;11645  {
007172  b087              SUB      sp,sp,#0x1c
;;;11646  if(RELEVENTSIGN==rvsAKB)
;;;11647  	{
;;;11648  	if(vent_stat==0)
007174  4c3d              LDR      r4,|L1.29292|
007176  484b              LDR      r0,|L1.29348|
;;;11649  		{
;;;11650  		if	(
;;;11651  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
007178  494b              LDR      r1,|L1.29352|
;;;11652  			||
;;;11653  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11654  			)
;;;11655  			{
;;;11656  			vent_stat=1;
;;;11657  			}
;;;11658  		}
;;;11659  	else if(vent_stat==1)
;;;11660  		{
;;;11661  		if	(
;;;11662  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
00717a  4a4c              LDR      r2,|L1.29356|
00717c  3c28              SUBS     r4,r4,#0x28           ;11648
00717e  7800              LDRB     r0,[r0,#0]            ;11646  ; RELEVENTSIGN
007180  f9943000          LDRSB    r3,[r4,#0]            ;11648
007184  f9b11000          LDRSH    r1,[r1,#0]            ;11651
007188  f9b22000          LDRSH    r2,[r2,#0]
00718c  b148              CBZ      r0,|L1.29090|
;;;11663  			&&
;;;11664  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11665  			)
;;;11666  			{
;;;11667  			vent_stat=0;
;;;11668  			}
;;;11669  		}
;;;11670  	}
;;;11671  else if(RELEVENTSIGN==rvsBPS)
00718e  2802              CMP      r0,#2
007190  d03c              BEQ      |L1.29196|
;;;11672  	{
;;;11673  /*	if	(
;;;11674  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11675  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11676  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11677  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11678  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11679  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11680  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11681  		)
;;;11682  		{
;;;11683  		vent_stat=1;
;;;11684  		}
;;;11685  	else vent_stat=0;
;;;11686  	*/
;;;11687  
;;;11688  	if	(
;;;11689  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11690  		||
;;;11691  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11692  		||
;;;11693  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11694  		||
;;;11695  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11696  		||
;;;11697  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11698  		||
;;;11699  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11700  		||
;;;11701  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11702  		||
;;;11703  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11704  		)
;;;11705  		{
;;;11706  		vent_stat=1;
;;;11707  		}
;;;11708  	else if(vent_stat==1)
;;;11709  		{
;;;11710  		if	(
;;;11711  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11712  			&&
;;;11713  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11714  			&&
;;;11715  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11716  			&&
;;;11717  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11718  			&&
;;;11719  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11720  			&&
;;;11721  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11722  			&&
;;;11723  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11724  			&&
;;;11725  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11726  			)
;;;11727  			{
;;;11728  			vent_stat=0;
;;;11729  			}
;;;11730  		}
;;;11731  	}
;;;11732  else if(RELEVENTSIGN==rvsEXT)
007192  2801              CMP      r0,#1
007194  d063              BEQ      |L1.29278|
;;;11733  	{
;;;11734  	if	(
;;;11735  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11736  		||
;;;11737  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11738  		||
;;;11739  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11740  		)
;;;11741  		{
;;;11742  		vent_stat=1;
;;;11743  		}
;;;11744  	else if(vent_stat==1)
;;;11745  		{
;;;11746  		if	(
;;;11747  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11748  			&&
;;;11749  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11750  			&&
;;;11751  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11752  			)
;;;11753  			{
;;;11754  			vent_stat=0;
;;;11755  			}
;;;11756  		}
;;;11757  	}
;;;11758  else vent_stat=1;
007196  f04f0001          MOV      r0,#1
00719a  7020              STRB     r0,[r4,#0]
                  |L1.29084|
;;;11759  //vent_stat=44;
;;;11760  }
00719c  b007              ADD      sp,sp,#0x1c
00719e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.29090|
0071a2  4f43              LDR      r7,|L1.29360|
0071a4  f8df810c          LDR      r8,|L1.29364|
0071a8  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11651
0071ac  7b3d              LDRB     r5,[r7,#0xc]          ;11651
0071ae  f9b76056          LDRSH    r6,[r7,#0x56]         ;11653
0071b2  f898c000          LDRB     r12,[r8,#0]           ;11650
0071b6  f8977058          LDRB     r7,[r7,#0x58]         ;11653
0071ba  f8988001          LDRB     r8,[r8,#1]            ;11653
0071be  b12b              CBZ      r3,|L1.29132|
0071c0  2b01              CMP      r3,#1                 ;11659
0071c2  d1eb              BNE      |L1.29084|
0071c4  f1bc0f55          CMP      r12,#0x55             ;11661
0071c8  d115              BNE      |L1.29174|
0071ca  e010              B        |L1.29166|
                  |L1.29132|
0071cc  f1bc0f55          CMP      r12,#0x55             ;11650
0071d0  d102              BNE      |L1.29144|
0071d2  4288              CMP      r0,r1                 ;11651
0071d4  dc07              BGT      |L1.29158|
0071d6  b935              CBNZ     r5,|L1.29158|
                  |L1.29144|
0071d8  f1b80f55          CMP      r8,#0x55              ;11653
0071dc  d1de              BNE      |L1.29084|
0071de  428e              CMP      r6,r1                 ;11653
0071e0  dc01              BGT      |L1.29158|
0071e2  2f00              CMP      r7,#0                 ;11653
0071e4  d0da              BEQ      |L1.29084|
                  |L1.29158|
0071e6  f04f0001          MOV      r0,#1                 ;11656
0071ea  7020              STRB     r0,[r4,#0]            ;11656
0071ec  e7d6              B        |L1.29084|
                  |L1.29166|
0071ee  4290              CMP      r0,r2                 ;11662
0071f0  dad4              BGE      |L1.29084|
0071f2  2d00              CMP      r5,#0                 ;11662
0071f4  d1d2              BNE      |L1.29084|
                  |L1.29174|
0071f6  f1b80f55          CMP      r8,#0x55              ;11664
0071fa  d103              BNE      |L1.29188|
0071fc  4296              CMP      r6,r2                 ;11664
0071fe  dacd              BGE      |L1.29084|
007200  2f00              CMP      r7,#0                 ;11664
007202  d1cb              BNE      |L1.29084|
                  |L1.29188|
007204  f04f0000          MOV      r0,#0                 ;11667
007208  7020              STRB     r0,[r4,#0]            ;11667
00720a  e7c7              B        |L1.29084|
                  |L1.29196|
00720c  4e24              LDR      r6,|L1.29344|
00720e  4819              LDR      r0,|L1.29300|
007210  6ab5              LDR      r5,[r6,#0x28]         ;11689
007212  f9b00000          LDRSH    r0,[r0,#0]            ;11688  ; NUMIST
007216  78f6              LDRB     r6,[r6,#3]            ;11689
007218  b118              CBZ      r0,|L1.29218|
00721a  428d              CMP      r5,r1                 ;11689
00721c  dc7e              BGT      |L1.29468|
00721e  2e1e              CMP      r6,#0x1e              ;11689
007220  d27c              BCS      |L1.29468|
                  |L1.29218|
007222  f8dfc07c          LDR      r12,|L1.29344|
007226  2801              CMP      r0,#1                 ;11691
007228  f8dc708c          LDR      r7,[r12,#0x8c]        ;11691
00722c  f89cc067          LDRB     r12,[r12,#0x67]       ;11691
007230  f8cdc018          STR      r12,[sp,#0x18]        ;11691
007234  dd06              BLE      |L1.29252|
007236  428f              CMP      r7,r1                 ;11691
007238  dc70              BGT      |L1.29468|
00723a  f8ddc018          LDR      r12,[sp,#0x18]        ;11691
00723e  f1bc0f1e          CMP      r12,#0x1e             ;11691
007242  d26b              BCS      |L1.29468|
                  |L1.29252|
007244  f8dfc058          LDR      r12,|L1.29344|
007248  2802              CMP      r0,#2                 ;11693
00724a  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11693
00724e  f8cd8014          STR      r8,[sp,#0x14]         ;11693
007252  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11693
007256  f8cdc010          STR      r12,[sp,#0x10]        ;11693
00725a  dd36              BLE      |L1.29386|
00725c  e02c              B        |L1.29368|
                  |L1.29278|
00725e  e0c9              B        |L1.29684|
                  |L1.29280|
                          DCD      ||.text||+0x1690
                  |L1.29284|
                          DCD      ||.text||+0x21f8
                  |L1.29288|
                          DCD      ||.text||+0x1d1c
                  |L1.29292|
                          DCD      ||area_number.25||+0x28
                  |L1.29296|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29300|
                          DCD      NUMIST
                  |L1.29304|
                          DCD      load_U
                  |L1.29308|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29312|
                          DCD      outVoltContrHndlCnt
                  |L1.29316|
                          DCD      outVoltContrHndlCnt_
                  |L1.29320|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29324|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29328|
                          DCD      uout_av
                  |L1.29332|
                          DCD      USIGN
                  |L1.29336|
                          DCD      bSILENT
                  |L1.29340|
                          DCD      TVENTMAX
                  |L1.29344|
                          DCD      bps
                  |L1.29348|
                          DCD      RELEVENTSIGN
                  |L1.29352|
                          DCD      TVENTON
                  |L1.29356|
                          DCD      TVENTOFF
                  |L1.29360|
                          DCD      bat
                  |L1.29364|
                          DCD      BAT_IS_ON
                  |L1.29368|
0072b8  f8ddc014          LDR      r12,[sp,#0x14]        ;11693
0072bc  458c              CMP      r12,r1                ;11693
0072be  dc57              BGT      |L1.29552|
0072c0  f8ddc010          LDR      r12,[sp,#0x10]        ;11693
0072c4  f1bc0f1e          CMP      r12,#0x1e             ;11693
0072c8  d252              BCS      |L1.29552|
                  |L1.29386|
0072ca  f8dfc1b4          LDR      r12,|L1.29824|
0072ce  2803              CMP      r0,#3                 ;11695
0072d0  f8dc8154          LDR      r8,[r12,#0x154]       ;11695
0072d4  f8cd800c          STR      r8,[sp,#0xc]          ;11695
0072d8  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11695
0072dc  f8cdc008          STR      r12,[sp,#8]           ;11695
0072e0  dd08              BLE      |L1.29428|
0072e2  f8ddc00c          LDR      r12,[sp,#0xc]         ;11695
0072e6  458c              CMP      r12,r1                ;11695
0072e8  dc42              BGT      |L1.29552|
0072ea  f8ddc008          LDR      r12,[sp,#8]           ;11695
0072ee  f1bc0f1e          CMP      r12,#0x1e             ;11695
0072f2  d23d              BCS      |L1.29552|
                  |L1.29428|
0072f4  f8df8188          LDR      r8,|L1.29824|
0072f8  2804              CMP      r0,#4                 ;11697
0072fa  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11697
0072fe  f8988193          LDRB     r8,[r8,#0x193]        ;11697
007302  f8cd8004          STR      r8,[sp,#4]            ;11697
007306  dd06              BLE      |L1.29462|
007308  458c              CMP      r12,r1                ;11697
00730a  dc31              BGT      |L1.29552|
00730c  f8dd8004          LDR      r8,[sp,#4]            ;11697
007310  f1b80f1e          CMP      r8,#0x1e              ;11697
007314  d22c              BCS      |L1.29552|
                  |L1.29462|
007316  f8df9168          LDR      r9,|L1.29824|
00731a  e000              B        |L1.29470|
                  |L1.29468|
00731c  e028              B        |L1.29552|
                  |L1.29470|
00731e  f8d9821c          LDR      r8,[r9,#0x21c]        ;11699
007322  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11699
007326  f8cd9000          STR      r9,[sp,#0]            ;11699
00732a  2805              CMP      r0,#5                 ;11699
00732c  dd06              BLE      |L1.29500|
00732e  4588              CMP      r8,r1                 ;11699
007330  dc1e              BGT      |L1.29552|
007332  f8dd9000          LDR      r9,[sp,#0]            ;11699
007336  f1b90f1e          CMP      r9,#0x1e              ;11699
00733a  d219              BCS      |L1.29552|
                  |L1.29500|
00733c  f8dfa140          LDR      r10,|L1.29824|
007340  2806              CMP      r0,#6                 ;11701
007342  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11701
007346  f8da9280          LDR      r9,[r10,#0x280]       ;11701
00734a  dd04              BLE      |L1.29526|
00734c  4589              CMP      r9,r1                 ;11701
00734e  dc0f              BGT      |L1.29552|
007350  f1be0f1e          CMP      lr,#0x1e              ;11701
007354  d20c              BCS      |L1.29552|
                  |L1.29526|
007356  f8dfb128          LDR      r11,|L1.29824|
00735a  2807              CMP      r0,#7                 ;11703
00735c  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11703
007360  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11703
007364  dd08              BLE      |L1.29560|
007366  458a              CMP      r10,r1                ;11703
007368  dc02              BGT      |L1.29552|
00736a  f1bb0f1e          CMP      r11,#0x1e             ;11703
00736e  d303              BCC      |L1.29560|
                  |L1.29552|
007370  f04f0001          MOV      r0,#1                 ;11706
007374  7020              STRB     r0,[r4,#0]            ;11706
                  |L1.29558|
007376  e711              B        |L1.29084|
                  |L1.29560|
007378  2b01              CMP      r3,#1                 ;11708
00737a  d1fc              BNE      |L1.29558|
00737c  b118              CBZ      r0,|L1.29574|
00737e  4295              CMP      r5,r2                 ;11711
007380  daf9              BGE      |L1.29558|
007382  2e0a              CMP      r6,#0xa               ;11711
007384  d2f7              BCS      |L1.29558|
                  |L1.29574|
007386  2802              CMP      r0,#2                 ;11713
007388  db04              BLT      |L1.29588|
00738a  4297              CMP      r7,r2                 ;11713
00738c  daf3              BGE      |L1.29558|
00738e  9906              LDR      r1,[sp,#0x18]         ;11713
007390  290a              CMP      r1,#0xa               ;11713
007392  d2f0              BCS      |L1.29558|
                  |L1.29588|
007394  2803              CMP      r0,#3                 ;11715
007396  db05              BLT      |L1.29604|
007398  9905              LDR      r1,[sp,#0x14]         ;11715
00739a  4291              CMP      r1,r2                 ;11715
00739c  daeb              BGE      |L1.29558|
00739e  9904              LDR      r1,[sp,#0x10]         ;11715
0073a0  290a              CMP      r1,#0xa               ;11715
0073a2  d2e8              BCS      |L1.29558|
                  |L1.29604|
0073a4  2804              CMP      r0,#4                 ;11717
0073a6  db05              BLT      |L1.29620|
0073a8  9903              LDR      r1,[sp,#0xc]          ;11717
0073aa  4291              CMP      r1,r2                 ;11717
0073ac  dae3              BGE      |L1.29558|
0073ae  9902              LDR      r1,[sp,#8]            ;11717
0073b0  290a              CMP      r1,#0xa               ;11717
0073b2  d2e0              BCS      |L1.29558|
                  |L1.29620|
0073b4  2805              CMP      r0,#5                 ;11719
0073b6  db04              BLT      |L1.29634|
0073b8  4594              CMP      r12,r2                ;11719
0073ba  dadc              BGE      |L1.29558|
0073bc  9901              LDR      r1,[sp,#4]            ;11719
0073be  290a              CMP      r1,#0xa               ;11719
0073c0  d2d9              BCS      |L1.29558|
                  |L1.29634|
0073c2  2806              CMP      r0,#6                 ;11721
0073c4  db04              BLT      |L1.29648|
0073c6  4590              CMP      r8,r2                 ;11721
0073c8  dad5              BGE      |L1.29558|
0073ca  9900              LDR      r1,[sp,#0]            ;11721
0073cc  290a              CMP      r1,#0xa               ;11721
0073ce  d2d2              BCS      |L1.29558|
                  |L1.29648|
0073d0  2807              CMP      r0,#7                 ;11723
0073d2  db04              BLT      |L1.29662|
0073d4  4591              CMP      r9,r2                 ;11723
0073d6  dace              BGE      |L1.29558|
0073d8  f1be0f0a          CMP      lr,#0xa               ;11723
0073dc  d2cb              BCS      |L1.29558|
                  |L1.29662|
0073de  2808              CMP      r0,#8                 ;11725
0073e0  db04              BLT      |L1.29676|
0073e2  4592              CMP      r10,r2                ;11725
0073e4  dac7              BGE      |L1.29558|
0073e6  f1bb0f0a          CMP      r11,#0xa              ;11725
0073ea  d2c4              BCS      |L1.29558|
                  |L1.29676|
0073ec  f04f0000          MOV      r0,#0                 ;11728
0073f0  7020              STRB     r0,[r4,#0]            ;11728
                  |L1.29682|
0073f2  e6d3              B        |L1.29084|
                  |L1.29684|
0073f4  4823              LDR      r0,|L1.29828|
0073f6  4d24              LDR      r5,|L1.29832|
0073f8  4e24              LDR      r6,|L1.29836|
0073fa  f9b00000          LDRSH    r0,[r0,#0]            ;11734  ; NUMDT
0073fe  f9b55000          LDRSH    r5,[r5,#0]            ;11735
007402  7836              LDRB     r6,[r6,#0]            ;11735
007404  b110              CBZ      r0,|L1.29708|
007406  428d              CMP      r5,r1                 ;11735
007408  dc1d              BGT      |L1.29766|
00740a  b9e6              CBNZ     r6,|L1.29766|
                  |L1.29708|
00740c  4f1e              LDR      r7,|L1.29832|
00740e  f8dfc07c          LDR      r12,|L1.29836|
007412  2801              CMP      r0,#1                 ;11737
007414  f9b77002          LDRSH    r7,[r7,#2]            ;11737
007418  f89cc001          LDRB     r12,[r12,#1]          ;11737
00741c  dd04              BLE      |L1.29736|
00741e  428f              CMP      r7,r1                 ;11737
007420  dc11              BGT      |L1.29766|
007422  f1bc0f00          CMP      r12,#0                ;11737
007426  d10e              BNE      |L1.29766|
                  |L1.29736|
007428  f8df805c          LDR      r8,|L1.29832|
00742c  f8df905c          LDR      r9,|L1.29836|
007430  2802              CMP      r0,#2                 ;11739
007432  f9b88004          LDRSH    r8,[r8,#4]            ;11739
007436  f8999002          LDRB     r9,[r9,#2]            ;11739
00743a  dd08              BLE      |L1.29774|
00743c  4588              CMP      r8,r1                 ;11739
00743e  dc02              BGT      |L1.29766|
007440  f1b90f00          CMP      r9,#0                 ;11739
007444  d003              BEQ      |L1.29774|
                  |L1.29766|
007446  f04f0001          MOV      r0,#1                 ;11742
00744a  7020              STRB     r0,[r4,#0]            ;11742
00744c  e6a6              B        |L1.29084|
                  |L1.29774|
00744e  2b01              CMP      r3,#1                 ;11744
007450  d191              BNE      |L1.29558|
007452  b118              CBZ      r0,|L1.29788|
007454  4295              CMP      r5,r2                 ;11747
007456  da8e              BGE      |L1.29558|
007458  2e00              CMP      r6,#0                 ;11747
00745a  d18c              BNE      |L1.29558|
                  |L1.29788|
00745c  2802              CMP      r0,#2                 ;11749
00745e  db04              BLT      |L1.29802|
007460  4297              CMP      r7,r2                 ;11749
007462  da88              BGE      |L1.29558|
007464  f1bc0f00          CMP      r12,#0                ;11749
007468  d185              BNE      |L1.29558|
                  |L1.29802|
00746a  2803              CMP      r0,#3                 ;11751
00746c  db04              BLT      |L1.29816|
00746e  4590              CMP      r8,r2                 ;11751
007470  dabf              BGE      |L1.29682|
007472  f1b90f00          CMP      r9,#0                 ;11751
007476  d1bc              BNE      |L1.29682|
                  |L1.29816|
007478  f04f0000          MOV      r0,#0                 ;11754
00747c  7020              STRB     r0,[r4,#0]            ;11754
00747e  e68d              B        |L1.29084|
;;;11761  #endif //UKU_FSO
                          ENDP

                  |L1.29824|
                          DCD      bps
                  |L1.29828|
                          DCD      NUMDT
                  |L1.29832|
                          DCD      t_ext
                  |L1.29836|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;329    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;330    if(spc_stat!=spcVZ) 
;;;331    	{
;;;332    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;330
;;;333    	sp_ch_error=0;
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;331    	{
;;;332    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;330  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;330
00000c  b200              SXTH     r0,r0                 ;330
00000e  f7fffffe          BL       abs_pal
;;;333    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;334    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;335    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;338  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;338  ; adc_self_ch_buff
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;338
000032  f44f7196          MOV      r1,#0x12c             ;338
000036  f1a406f2          SUB      r6,r4,#0xf2           ;338
00003a  4288              CMP      r0,r1                 ;338
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]            ;340  ; adc_self_ch_buff
000040  87b0              STRH     r0,[r6,#0x3c]         ;340
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]            ;340  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;340
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;342  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;340
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;342  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;343
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;343  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;340
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;342  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;342
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;343  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;345  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;345  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;345
000074  6004              STR      r4,[r0,#0]            ;346  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;346  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;346
00007c  6044              STR      r4,[r0,#4]            ;346  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;351  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;351
000084  6084              STR      r4,[r0,#8]            ;352  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;352  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;354
00008c  60c1              STR      r1,[r0,#0xc]          ;354  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;354  ; adc_result
000092  2964              CMP      r1,#0x64              ;354
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;355  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;355
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;359
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;361
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;361  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;362
0000b0  428c              CMP      r4,r1                 ;362
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;365
0000b8  6002              STR      r2,[r0,#0]            ;365  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;365  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;370  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;370  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;370
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;370  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;371
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;374  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;374
0000d2  b209              SXTH     r1,r1                 ;378
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;378
0000d6  f5b17f00          CMP      r1,#0x200             ;380
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;380
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;381  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;384
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;384
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;389
0000f2  ea4f2424          ASR      r4,r4,#8              ;389
0000f6  8774              STRH     r4,[r6,#0x3a]         ;390
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;390
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;390  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;393
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f
00010a  2827              CMP      r0,#0x27
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1
000116  7530              STRB     r0,[r6,#0x14]
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]  ; adc_ch
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7cf3              LDRB     r3,[r6,#0x13]  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  0798              LSLS     r0,r3,#30
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]
000136  4461              ADD      r1,r1,r12
000138  f1000001          ADD      r0,r0,#1
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  b2c0              UXTB     r0,r0
00013e  2810              CMP      r0,#0x10
000140  d3f7              BCC      |L3.306|
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  ea4f1021          ASR      r0,r1,#4
000146  4933              LDR      r1,|L3.532|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1a10120          SUB      r1,r1,#0x20
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1
000152  b2e8              UXTB     r0,r5
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  74b0              STRB     r0,[r6,#0x12]
000156  2810              CMP      r0,#0x10
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f1030301          ADD      r3,r3,#1
000160  b2d8              UXTB     r0,r3
000162  74f0              STRB     r0,[r6,#0x13]
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  2810              CMP      r0,#0x10
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f1070701          ADD      r7,r7,#1
000170  f0070001          AND      r0,r7,#1
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000174  7470              STRB     r0,[r6,#0x11]
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]
00017c  f02000ff          BIC      r0,r0,#0xff
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
000180  f1000004          ADD      r0,r0,#4
000184  6010              STR      r0,[r2,#0]
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]  ; adc_ch
00018a  0708              LSLS     r0,r1,#28
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]
000190  f02000ff          BIC      r0,r0,#0xff
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  f1000001          ADD      r0,r0,#1
000198  6010              STR      r0,[r2,#0]
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]
00019e  f02000ff          BIC      r0,r0,#0xff
0001a2  f1000002          ADD      r0,r0,#2
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  6010              STR      r0,[r2,#0]
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]
0001ac  f0435380          ORR      r3,r3,#0x10000000
0001b0  6003              STR      r3,[r0,#0]            ;402
0001b2  6a03              LDR      r3,[r0,#0x20]         ;402
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;402
0001b8  6203              STR      r3,[r0,#0x20]         ;403
0001ba  6e03              LDR      r3,[r0,#0x60]         ;403
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;403
0001c0  6603              STR      r3,[r0,#0x60]         ;405
0001c2  07cb              LSLS     r3,r1,#31             ;405
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;405
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;405
0001cc  6143              STR      r3,[r0,#0x14]         ;406
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;406
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;406
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;421
0001d8  6343              STR      r3,[r0,#0x34]         ;421
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;422
0001de  f0235380          BIC      r3,r3,#0x10000000     ;422
0001e2  6143              STR      r3,[r0,#0x14]         ;424
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;424
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;424
0001ec  6343              STR      r3,[r0,#0x34]         ;424
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;425
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;425
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;425
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  6741              STR      r1,[r0,#0x74]
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]
0001fe  f0416180          ORR      r1,r1,#0x4000000
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000202  6741              STR      r1,[r0,#0x74]
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  f0407080          ORR      r0,r0,#0x1000000
00020a  6010              STR      r0,[r2,#0]
00020c  e8bd81f0          POP      {r4-r8,pc}
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xf2
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;331    	{
;;;332    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;330
00000c  7820              LDRB     r0,[r4,#0]            ;330  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;330
000010  b2c0              UXTB     r0,r0
;;;333    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;334    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;335    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;343  ; bps_I
000032  8008              STRH     r0,[r1,#0]            ;338
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12                ;338
00003c  4637              MOV      r7,r6                 ;338
00003e  f9b11000          LDRSH    r1,[r1,#0]            ;340  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]            ;340
000044  f9b83000          LDRSH    r3,[r8,#0]            ;340
000048  f9b77000          LDRSH    r7,[r7,#0]            ;340
00004c  4288              CMP      r0,r1                 ;342
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;340
000054  f1b90f0a          CMP      r9,#0xa               ;342
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;343
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;342
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;342
000064  280a              CMP      r0,#0xa               ;343
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;345
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;345
000072  f88c2001          STRB     r2,[r12,#1]           ;345
000076  f1a30301          SUB      r3,r3,#1              ;346
00007a  f8a83000          STRH     r3,[r8,#0]            ;346
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;351
000084  f88c2001          STRB     r2,[r12,#1]           ;352
000088  f1030301          ADD      r3,r3,#1              ;354
00008c  f8a83000          STRH     r3,[r8,#0]            ;354
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;354
000092  4251              RSBS     r1,r2,#0              ;354
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;355  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;359
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;361  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;361
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;362  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;362
0000b4  f04f0004          MOV      r0,#4                 ;365
0000b8  f88d0001          STRB     r0,[sp,#1]            ;365
0000bc  f88d5002          STRB     r5,[sp,#2]            ;370
0000c0  f04f0002          MOV      r0,#2                 ;370
0000c4  f88d0003          STRB     r0,[sp,#3]            ;371
0000c8  f88d5004          STRB     r5,[sp,#4]            ;371
0000cc  f04f0001          MOV      r0,#1                 ;374
0000d0  f88d0005          STRB     r0,[sp,#5]            ;374
0000d4  f04f0106          MOV      r1,#6                 ;378
0000d8  4668              MOV      r0,sp                 ;380
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;381
0000e2  ea4f2020          ASR      r0,r0,#8              ;381
0000e6  f88d0007          STRB     r0,[sp,#7]            ;384
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;384  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;389
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;389
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;390  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;390
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;393
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]  ; main_kb_cnt
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000144  f04f0106          MOV      r1,#6
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000188  f7fffffe          BL       putchar_sc16is700
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;329    {  
000002  4604              MOV      r4,r0
;;;330    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;331    	{
;;;332    	vz_error=0;
;;;333    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;334    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;342
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;343
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]            ;338
                  |L5.54|
000036  ea000301          AND      r3,r0,r1              ;338
00003a  07db              LSLS     r3,r3,#31             ;338
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]            ;340  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1              ;340
000044  70d0              STRB     r0,[r2,#3]            ;340
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;340
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;342
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;340
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;343
000058  461a              MOV      r2,r3                 ;343
00005a  210e              MOVS     r1,#0xe               ;343
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;343
000066  2202              MOVS     r2,#2                 ;343
000068  210e              MOVS     r1,#0xe               ;345
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;345
000074  2203              MOVS     r2,#3                 ;346
000076  210e              MOVS     r1,#0xe               ;346
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;351
000082  2204              MOVS     r2,#4                 ;351
000084  210e              MOVS     r1,#0xe               ;352
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;354
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;354
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;355  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;355
00009c  70d0              STRB     r0,[r2,#3]            ;359
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;359
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;361
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;361
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;362
0000b0  2201              MOVS     r2,#1                 ;362
0000b2  210e              MOVS     r1,#0xe               ;362
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;370
0000be  461a              MOV      r2,r3                 ;370
0000c0  210e              MOVS     r1,#0xe               ;370
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;371
0000cc  2203              MOVS     r2,#3                 ;374
0000ce  210e              MOVS     r1,#0xe               ;374
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;380
0000da  2204              MOVS     r2,#4                 ;380
0000dc  210e              MOVS     r1,#0xe               ;380
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;384
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;384
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;389  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;389
0000f4  70d0              STRB     r0,[r2,#3]            ;389
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;390
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;390
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;393
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;402
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;402
0001b8  2201              MOVS     r2,#1                 ;403
0001ba  210e              MOVS     r1,#0xe               ;403
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;405
0001c6  2202              MOVS     r2,#2                 ;405
0001c8  210e              MOVS     r1,#0xe               ;405
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;406
0001d4  2203              MOVS     r2,#3                 ;421
0001d6  210e              MOVS     r1,#0xe               ;421
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;422
0001e2  2204              MOVS     r2,#4                 ;424
0001e4  210e              MOVS     r1,#0xe               ;424
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;425
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;425
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;425  ; plazma_inv
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;459
000272  2202              MOVS     r2,#2                 ;459
000274  210e              MOVS     r1,#0xe               ;460
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;462
000280  2203              MOVS     r2,#3                 ;462
000282  210e              MOVS     r1,#0xe               ;462
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;463
00028e  2204              MOVS     r2,#4                 ;463
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  bd70              POP      {r4-r6,pc}
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xbc
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;331    	{
;;;332    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;330  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;330  ; TBOXMAX
;;;333    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;342
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]            ;338  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1                 ;338
00003c  2805              CMP      r0,#5                 ;338
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]            ;340
                  |L6.66|
000042  2400              MOVS     r4,#0                 ;340
000044  2801              CMP      r0,#1                 ;340
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;340
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;342  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;342  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;343
00005a  4298              CMP      r0,r3                 ;343
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;342  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;342
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;343
00006a  b249              SXTB     r1,r1                 ;345
00006c  7011              STRB     r1,[r2,#0]            ;345
00006e  291e              CMP      r1,#0x1e              ;345
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;345  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;346
000078  8039              STRH     r1,[r7,#0]            ;346
00007a  7014              STRB     r4,[r2,#0]            ;346
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;351
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;351  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;352
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;354
00008e  b249              SXTB     r1,r1                 ;354
000090  7011              STRB     r1,[r2,#0]            ;354
000092  291e              CMP      r1,#0x1e              ;354
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;355  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;355
00009c  8039              STRH     r1,[r7,#0]            ;359
00009e  7014              STRB     r4,[r2,#0]            ;359
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;359
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;361  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;361
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;362
0000b0  2100              MOVS     r1,#0                 ;362
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;370
0000be  8800              LDRH     r0,[r0,#0]            ;370  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;370
0000c2  b202              SXTH     r2,r0                 ;370
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;371
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;378  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;380
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;380  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;380
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;381  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;381
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;384
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;384
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;389  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;390
0000fc  2928              CMP      r1,#0x28              ;390
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;393  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;331    	{
;;;332    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;330
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;330
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;333    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;342
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0                 ;340
000042  2b01              CMP      r3,#1                 ;340
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;340
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;342
00004e  f8a81000          STRH     r1,[r8,#0]            ;340
000052  2801              CMP      r0,#1                 ;342
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;343
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;343
00005a  2200              MOVS     r2,#0                 ;343
00005c  21e6              MOVS     r1,#0xe6              ;340
00005e  20e1              MOVS     r0,#0xe1              ;342
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;343
000068  f04f0000          MOV      r0,#0                 ;345
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;345
000070  f9b85000          LDRSH    r5,[r8,#0]            ;345
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;346
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;346
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;351
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;351
000086  69c9              LDR      r1,[r1,#0x1c]         ;352
000088  4299              CMP      r1,r3                 ;354
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;354
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;354
000094  b2c0              UXTB     r0,r0                 ;355
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;355
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;355
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;359
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;361
0000aa  7020              STRB     r0,[r4,#0]            ;361
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;362
0000b0  f8a81000          STRH     r1,[r8,#0]            ;362
0000b4  2802              CMP      r0,#2                 ;365
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;365
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;365
0000bc  2200              MOVS     r2,#0                 ;370
0000be  21e6              MOVS     r1,#0xe6              ;370
0000c0  20e1              MOVS     r0,#0xe1              ;370
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;371
0000ca  f04f0000          MOV      r0,#0                 ;371
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;374
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;378
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;380
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;380
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;381
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;381
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;384
0000ea  4299              CMP      r1,r3                 ;384
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;389
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;389
0000f6  b2c0              UXTB     r0,r0                 ;390
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;390
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;390
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;393
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;329    {  
000002  f44f70b4          MOV      r0,#0x168
;;;330    if(spc_stat!=spcVZ) 
;;;331    	{
;;;332    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;330
00000e  700a              STRB     r2,[r1,#0]            ;330
000010  f04f0100          MOV      r1,#0
;;;333    	sp_ch_error=0;
;;;334    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f7ffbffe          B.W      lc640_write
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0262              DCW      0x0262
                  cntrl_stat_old
000034  0262              DCW      0x0262
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
