; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;330    	{
;;;331    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;329  ; spc_stat
00000c  2802              CMP      r0,#2                 ;329
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;332    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;333    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;334    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;337  ; snmp_bat_status
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;337
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;337  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;337
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;339  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;339  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;339
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;339
000052  f9b01000          LDRSH    r1,[r0,#0]            ;341
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;342
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;341
000062  8021              STRH     r1,[r4,#0]            ;341
000064  07c0              LSLS     r0,r0,#31             ;342
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;344
00006a  2208              MOVS     r2,#8                 ;344
00006c  2105              MOVS     r1,#5                 ;344
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;345  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;345
00007a  8028              STRH     r0,[r5,#0]            ;345
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;350
000082  8021              STRH     r1,[r4,#0]            ;350
000084  07c0              LSLS     r0,r0,#31             ;351
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;353
00008a  2208              MOVS     r2,#8                 ;353
00008c  2105              MOVS     r1,#5                 ;353
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;354  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;354
00009a  8028              STRH     r0,[r5,#0]            ;354
                  |L1.156|
00009c  f898003f          LDRB     r0,[r8,#0x3f]         ;358  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;358
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;360  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;360
0000aa  8021              STRH     r1,[r4,#0]            ;360
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;361  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;361
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;364
0000b8  8029              STRH     r1,[r5,#0]            ;364
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;369  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;369
0000c2  8021              STRH     r1,[r4,#0]            ;369
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;370  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;370
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;373
0000d0  8029              STRH     r1,[r5,#0]            ;373
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;377
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;379
0000dc  8020              STRH     r0,[r4,#0]            ;379
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;380
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;383
0000ea  8028              STRH     r0,[r5,#0]            ;383
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;388
0000f4  8020              STRH     r0,[r4,#0]            ;388
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;389
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;392
000102  8028              STRH     r0,[r5,#0]            ;392
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960024          LDRB     r0,[r6,#0x24]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;401  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;401
0001b6  8020              STRH     r0,[r4,#0]            ;401
0001b8  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;402
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;404
0001c0  2208              MOVS     r2,#8                 ;404
0001c2  2105              MOVS     r1,#5                 ;404
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;405  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;405
0001d0  8028              STRH     r0,[r5,#0]            ;405
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;420  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;420
0001da  8020              STRH     r0,[r4,#0]            ;420
0001dc  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;421
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;423
0001e4  461a              MOV      r2,r3                 ;423
0001e6  2105              MOVS     r1,#5                 ;423
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;424  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;424
0001f4  8028              STRH     r0,[r5,#0]            ;424
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;458  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;458
000272  8020              STRH     r0,[r4,#0]            ;458
000274  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;459
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;461
00027c  2208              MOVS     r2,#8                 ;461
00027e  2105              MOVS     r1,#5                 ;461
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;462  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;462
00028c  8028              STRH     r0,[r5,#0]            ;462
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;573    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;812    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.18||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;578  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;578  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;578
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;578
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;580  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;580
0006e6  8060              STRH     r0,[r4,#2]            ;580
0006e8  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;581
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;583
0006f0  2208              MOVS     r2,#8                 ;583
0006f2  2105              MOVS     r1,#5                 ;583
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;584  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;584
000700  8068              STRH     r0,[r5,#2]            ;584
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;589  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;589
00070a  8060              STRH     r0,[r4,#2]            ;589
00070c  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;590
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;592
000714  2208              MOVS     r2,#8                 ;592
000716  2105              MOVS     r1,#5                 ;592
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;593  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;593
000724  8068              STRH     r0,[r5,#2]            ;593
                  |L1.1830|
000726  f898008b          LDRB     r0,[r8,#0x8b]         ;597  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;597
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;599  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;599
000734  8061              STRH     r1,[r4,#2]            ;599
000736  8829              LDRH     r1,[r5,#0]            ;600  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;600
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;603  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;603
000742  8069              STRH     r1,[r5,#2]            ;603
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;608  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;608
00074c  8061              STRH     r1,[r4,#2]            ;608
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;609  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;609
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;612
00075a  8069              STRH     r1,[r5,#2]            ;612
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;616
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;618
000766  8060              STRH     r0,[r4,#2]            ;618
000768  f9b50002          LDRSH    r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;619
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;622
000774  8068              STRH     r0,[r5,#2]            ;622
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;627
00077e  8060              STRH     r0,[r4,#2]            ;627
000780  f9b50002          LDRSH    r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;628
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;631
00078c  8068              STRH     r0,[r5,#2]            ;631
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;635  ; IKB
000792  f9b80054          LDRSH    r0,[r8,#0x54]         ;635  ; bat
000796  424a              RSBS     r2,r1,#0              ;635
000798  4290              CMP      r0,r2                 ;635
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;635  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;635
0007a2  8060              STRH     r0,[r4,#2]            ;635
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;636
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;636
0007b0  8060              STRH     r0,[r4,#2]            ;636
                  |L1.1970|
0007b2  f8960023          LDRB     r0,[r6,#0x23]         ;638  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;638
0007b8  d102              BNE      |L1.1984|
0007ba  f8960024          LDRB     r0,[r6,#0x24]         ;638  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;649  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;649
0007c6  8060              STRH     r0,[r4,#2]            ;649
0007c8  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;650
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;652
0007d0  2208              MOVS     r2,#8                 ;652
0007d2  2105              MOVS     r1,#5                 ;652
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;653  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;653
0007e0  8068              STRH     r0,[r5,#2]            ;653
                  |L1.2018|
0007e2  f8960023          LDRB     r0,[r6,#0x23]         ;657  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;657
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;668  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;668
0007f0  8060              STRH     r0,[r4,#2]            ;668
0007f2  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;669
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;671
0007fa  2208              MOVS     r2,#8                 ;671
0007fc  2105              MOVS     r1,#5                 ;671
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;672  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;672
00080a  8068              STRH     r0,[r5,#2]            ;672
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;676  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;678  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;678
000816  8060              STRH     r0,[r4,#2]            ;678
000818  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;679
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;681
000820  2208              MOVS     r2,#8                 ;681
000822  2105              MOVS     r1,#5                 ;681
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;682  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;682
000830  8068              STRH     r0,[r5,#2]            ;682
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;640  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;640
00083c  8060              STRH     r0,[r4,#2]            ;640
00083e  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;641
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;643
000846  2208              MOVS     r2,#8                 ;643
000848  2105              MOVS     r1,#5                 ;643
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;644  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;644
000856  8068              STRH     r0,[r5,#2]            ;644
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;659  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;659
000860  8060              STRH     r0,[r4,#2]            ;659
000862  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;660
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;662
00086a  2208              MOVS     r2,#8                 ;662
00086c  2105              MOVS     r1,#5                 ;662
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;663  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;663
00087a  8068              STRH     r0,[r5,#2]            ;663
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;687  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;687
000886  8060              STRH     r0,[r4,#2]            ;687
000888  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;688
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;690
000890  2208              MOVS     r2,#8                 ;690
000892  2105              MOVS     r1,#5                 ;690
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;691  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;691
0008a0  8068              STRH     r0,[r5,#2]            ;691
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;695  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;695
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;706  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;706
0008b0  8060              STRH     r0,[r4,#2]            ;706
0008b2  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;707
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;709
0008ba  2208              MOVS     r2,#8                 ;709
0008bc  2105              MOVS     r1,#5                 ;709
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;710  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;710
0008ca  8068              STRH     r0,[r5,#2]            ;710
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;714  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;716  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;716
0008d6  8060              STRH     r0,[r4,#2]            ;716
0008d8  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;717
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;719
0008e0  2208              MOVS     r2,#8                 ;719
0008e2  2105              MOVS     r1,#5                 ;719
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;720  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;720
0008f0  8068              STRH     r0,[r5,#2]            ;720
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;697  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;697
0008fa  8060              STRH     r0,[r4,#2]            ;697
0008fc  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;698
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;700
000904  2208              MOVS     r2,#8                 ;700
000906  2105              MOVS     r1,#5                 ;700
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;701  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;701
000914  8068              STRH     r0,[r5,#2]            ;701
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;725  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;725
00091e  8060              STRH     r0,[r4,#2]            ;725
000920  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;726
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;728
000928  2208              MOVS     r2,#8                 ;728
00092a  2105              MOVS     r1,#5                 ;728
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;729  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;729
000938  8068              STRH     r0,[r5,#2]            ;729
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;733  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;735  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;735
000944  8060              STRH     r0,[r4,#2]            ;735
000946  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;736
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;738
00094e  2208              MOVS     r2,#8                 ;738
000950  2105              MOVS     r1,#5                 ;738
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;739  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;739
00095e  8068              STRH     r0,[r5,#2]            ;739
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;744  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;744
000968  8060              STRH     r0,[r4,#2]            ;744
00096a  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;745
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;747
000972  2208              MOVS     r2,#8                 ;747
000974  2105              MOVS     r1,#5                 ;747
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;748  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;748
000982  8068              STRH     r0,[r5,#2]            ;748
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;752  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;754  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;754
00098e  8060              STRH     r0,[r4,#2]            ;754
000990  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;755
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;757
000998  2208              MOVS     r2,#8                 ;757
00099a  2105              MOVS     r1,#5                 ;757
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;758  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;758
0009a8  8068              STRH     r0,[r5,#2]            ;758
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;763  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;763
0009b2  8060              STRH     r0,[r4,#2]            ;763
0009b4  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;764
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;766
0009bc  2208              MOVS     r2,#8                 ;766
0009be  2105              MOVS     r1,#5                 ;766
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;767  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;767
0009cc  8068              STRH     r0,[r5,#2]            ;767
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;771  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;773  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;773
0009d8  8060              STRH     r0,[r4,#2]            ;773
0009da  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;774
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;776
0009e2  2208              MOVS     r2,#8                 ;776
0009e4  2105              MOVS     r1,#5                 ;776
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;777  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;777
0009f2  8068              STRH     r0,[r5,#2]            ;777
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;782  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;782
0009fc  8060              STRH     r0,[r4,#2]            ;782
0009fe  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;783
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;785
000a06  2208              MOVS     r2,#8                 ;785
000a08  2105              MOVS     r1,#5                 ;785
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;786  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;786
000a16  8068              STRH     r0,[r5,#2]            ;786
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;790  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;792  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;792
000a22  8060              STRH     r0,[r4,#2]            ;792
000a24  8868              LDRH     r0,[r5,#2]            ;793  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;793
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;795
000a2e  2208              MOVS     r2,#8                 ;795
000a30  2105              MOVS     r1,#5                 ;795
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;796  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;796
000a3e  8068              STRH     r0,[r5,#2]            ;796
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;801  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;801
000a48  8060              STRH     r0,[r4,#2]            ;801
000a4a  8868              LDRH     r0,[r5,#2]            ;802  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;802
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;804
000a52  2208              MOVS     r2,#8                 ;804
000a54  2105              MOVS     r1,#5                 ;804
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;805  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;805
000a62  8068              STRH     r0,[r5,#2]            ;805
000a64  e4c7              B        |L1.1014|
;;;938    
                          ENDP

                  ke_start PROC
;;;941    //-----------------------------------------------
;;;942    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;943    {          
000a6a  4606              MOV      r6,r0
;;;944    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;945    /*
;;;946    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;947    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;948    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;949    #endif
;;;950    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;951    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;952    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;953    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;954    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;955    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;957    else */
;;;958    	{
;;;959    
;;;960    	ke_start_stat=kssYES;
000a72  f105050a          ADD      r5,r5,#0xa
000a76  f04f0064          MOV      r0,#0x64
000a7a  7768              STRB     r0,[r5,#0x1d]
;;;961    
;;;962    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  766f              STRB     r7,[r5,#0x19]
;;;963    	__ee_spc_stat=spcKE;
000a82  f8a57060          STRH     r7,[r5,#0x60]
;;;964    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;965    	
;;;966    	spc_bat=0;
000a90  76ac              STRB     r4,[r5,#0x1a]
;;;967    	__ee_spc_bat=0;
000a92  f8a54062          STRH     r4,[r5,#0x62]
;;;968    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;969    
;;;970    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;971    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;972    
;;;973    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404a          STRH     r4,[r8,#0x4a]
;;;974    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;975    
;;;976    	
;;;977    	spc_phase=0;
000ac2  76ec              STRB     r4,[r5,#0x1b]
;;;978    	__ee_spc_phase=0;
000ac4  f8a54064          STRH     r4,[r5,#0x64]
;;;979    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.18||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;980    
;;;981    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;982    
;;;983    		{					
;;;984    		signed short temp_temp;
;;;985    		signed char temp;
;;;986    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060046          ADD      r0,r6,r6,LSL #1
000d98  eb001006          ADD      r0,r0,r6,LSL #4
000d9c  eb080180          ADD      r1,r8,r0,LSL #2
000da0  48ff              LDR      r0,|L1.4512|
000da2  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da4  f1000001          ADD      r0,r0,#1
000da8  f0000007          AND      r0,r0,#7
000dac  eb010040          ADD      r0,r1,r0,LSL #1
000db0  8c00              LDRH     r0,[r0,#0x20]
000db2  9001              STR      r0,[sp,#4]
;;;987    		    
;;;988    		temp=LPC_RTC->YEAR;
000db4  4efb              LDR      r6,|L1.4516|
000db6  8bb0              LDRH     r0,[r6,#0x1c]
000db8  9000              STR      r0,[sp,#0]
;;;989    		gran_char(&temp,1,99);
000dba  f04f0263          MOV      r2,#0x63
000dbe  f04f0101          MOV      r1,#1
000dc2  4668              MOV      r0,sp
000dc4  f7fffffe          BL       gran_char
;;;990    		*((char*)(&(ke_date[0])))=temp;
000dc8  4cf7              LDR      r4,|L1.4520|
000dca  f89d0000          LDRB     r0,[sp,#0]
000dce  7020              STRB     r0,[r4,#0]
;;;991    			
;;;992    		temp=LPC_RTC->MONTH;
000dd0  7e30              LDRB     r0,[r6,#0x18]
000dd2  9000              STR      r0,[sp,#0]
;;;993    		gran_char(&temp,1,12);
000dd4  220c              MOVS     r2,#0xc
000dd6  2101              MOVS     r1,#1
000dd8  4668              MOV      r0,sp
000dda  f7fffffe          BL       gran_char
;;;994    		*(((char*)(&(ke_date[0])))+1)=temp;
000dde  f89d0000          LDRB     r0,[sp,#0]
000de2  7060              STRB     r0,[r4,#1]
;;;995    		
;;;996    		temp=LPC_RTC->DOM;
000de4  7b30              LDRB     r0,[r6,#0xc]
000de6  9000              STR      r0,[sp,#0]
;;;997    		gran_char(&temp,1,31);
000de8  221f              MOVS     r2,#0x1f
000dea  2101              MOVS     r1,#1
000dec  4668              MOV      r0,sp
000dee  f7fffffe          BL       gran_char
;;;998    		*(((char*)(&(ke_date[0])))+2)=temp;			
000df2  f89d0000          LDRB     r0,[sp,#0]
000df6  70a0              STRB     r0,[r4,#2]
;;;999    				
;;;1000   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df8  f89d0004          LDRB     r0,[sp,#4]
000dfc  70e0              STRB     r0,[r4,#3]
;;;1001   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfe  f24020a2          MOV      r0,#0x2a2
000e02  6821              LDR      r1,[r4,#0]  ; ke_date
000e04  f7fffffe          BL       lc640_write_long
;;;1002   
;;;1003   		temp=LPC_RTC->HOUR;
000e08  7a30              LDRB     r0,[r6,#8]
000e0a  9000              STR      r0,[sp,#0]
;;;1004   		gran_char(&temp,0,23);
000e0c  2217              MOVS     r2,#0x17
000e0e  2100              MOVS     r1,#0
000e10  4668              MOV      r0,sp
000e12  f7fffffe          BL       gran_char
;;;1005   		*((char*)(&(ke_date[1])))=temp;
000e16  f89d0000          LDRB     r0,[sp,#0]
000e1a  7120              STRB     r0,[r4,#4]
;;;1006                  
;;;1007   		temp=LPC_RTC->MIN;
000e1c  7930              LDRB     r0,[r6,#4]
000e1e  9000              STR      r0,[sp,#0]
;;;1008   		gran_char(&temp,0,59);
000e20  223b              MOVS     r2,#0x3b
000e22  2100              MOVS     r1,#0
000e24  4668              MOV      r0,sp
000e26  f7fffffe          BL       gran_char
;;;1009   		*(((char*)(&(ke_date[1])))+1)=temp;
000e2a  f89d0000          LDRB     r0,[sp,#0]
000e2e  7160              STRB     r0,[r4,#5]
;;;1010   	          
;;;1011   		temp=LPC_RTC->SEC;
000e30  7830              LDRB     r0,[r6,#0]
000e32  9000              STR      r0,[sp,#0]
;;;1012   		gran_char(&temp,0,59);
000e34  223b              MOVS     r2,#0x3b
000e36  2100              MOVS     r1,#0
000e38  4668              MOV      r0,sp
000e3a  f7fffffe          BL       gran_char
;;;1013   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3e  f89d0000          LDRB     r0,[sp,#0]
000e42  71a0              STRB     r0,[r4,#6]
;;;1014   			
;;;1015   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e44  f89d0005          LDRB     r0,[sp,#5]
000e48  71e0              STRB     r0,[r4,#7]
;;;1016   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e4a  f24020a6          MOV      r0,#0x2a6
000e4e  6861              LDR      r1,[r4,#4]  ; ke_date
000e50  f7fffffe          BL       lc640_write_long
;;;1017   		}
;;;1018   	bat_hndl_zvu_ke_init=1;
000e54  702f              STRB     r7,[r5,#0]
;;;1019   	}
;;;1020   }
000e56  e8bd81fc          POP      {r2-r8,pc}
;;;1021   #endif
                          ENDP

                  ke_drv PROC
;;;1103   //-----------------------------------------------
;;;1104   void ke_drv(void)
000e5a  e92d47f0          PUSH     {r4-r10,lr}
;;;1105   {
000e5e  b088              SUB      sp,sp,#0x20
;;;1106   static char ke_drv_cnt_10s;
;;;1107   static short i_bat_buff[6];
;;;1108   static char i_bat_buff_cnt;
;;;1109   short ke_drv_i_temp;
;;;1110   short ke_drv_i_avg;
;;;1111   char i;
;;;1112   short ke_drv_i_temp_temp;
;;;1113   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e60  f04f021c          MOV      r2,#0x1c
000e64  49d1              LDR      r1,|L1.4524|
000e66  a801              ADD      r0,sp,#4
000e68  f7fffffe          BL       __aeabi_memcpy4
;;;1114   
;;;1115   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e6c  4ed0              LDR      r6,|L1.4528|
;;;1116   	{
;;;1117   	
;;;1118   	i_bat_buff[0]=0;
000e6e  4bd1              LDR      r3,|L1.4532|
000e70  2500              MOVS     r5,#0
000e72  7ab0              LDRB     r0,[r6,#0xa]          ;1115  ; bat_hndl_zvu_ke_init
000e74  2801              CMP      r0,#1                 ;1115
000e76  d102              BNE      |L1.3710|
000e78  801d              STRH     r5,[r3,#0]
;;;1119   	i_bat_buff[0]=0;
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff_cnt=0;
000e7a  73b5              STRB     r5,[r6,#0xe]
;;;1125   
;;;1126   	bat_hndl_zvu_ke_init=0;
000e7c  72b5              STRB     r5,[r6,#0xa]
                  |L1.3710|
;;;1127   	}
;;;1128   
;;;1129   
;;;1130   
;;;1131   
;;;1132   if(spc_stat==spcKE)
000e7e  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e82  2801              CMP      r0,#1
000e84  d17e              BNE      |L1.3972|
;;;1133   	{
;;;1134   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e86  48cc              LDR      r0,|L1.4536|
000e88  f04f070a          MOV      r7,#0xa
000e8c  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e90  f1c00000          RSB      r0,r0,#0
000e94  fb90f0f7          SDIV     r0,r0,r7
000e98  b200              SXTH     r0,r0
;;;1135   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e9a  2800              CMP      r0,#0
000e9c  da01              BGE      |L1.3746|
000e9e  f04f0000          MOV      r0,#0
                  |L1.3746|
;;;1136   
;;;1137   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000ea2  4ac6              LDR      r2,|L1.4540|
000ea4  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000ea6  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1138   	if(++ke_drv_cnt_10s>10)
000ea8  1c49              ADDS     r1,r1,#1
;;;1139   		{
;;;1140   		ke_drv_cnt_10s=0;
;;;1141   
;;;1142   		i_bat_buff_cnt++;
;;;1143   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1144   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1145   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1146   		ke_drv_i_temp_temp=0;
;;;1147   		for(i=0;i<6;i++)
;;;1148   			{
;;;1149   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1150   			}
;;;1151   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1152   
;;;1153   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1154   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1155   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1156   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1157   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1158   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1159   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1160   		
;;;1161   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1162   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1163   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1164   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1165   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1166   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1167   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1168   
;;;1169   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1170   		bat_hndl_i_temp=ke_drv_i_avg;
000eaa  4cbf              LDR      r4,|L1.4520|
000eac  b2c9              UXTB     r1,r1                 ;1138
000eae  3c80              SUBS     r4,r4,#0x80
000eb0  7371              STRB     r1,[r6,#0xd]          ;1138
000eb2  290a              CMP      r1,#0xa               ;1138
000eb4  d967              BLS      |L1.3974|
000eb6  7375              STRB     r5,[r6,#0xd]          ;1140
000eb8  7bb1              LDRB     r1,[r6,#0xe]          ;1142  ; i_bat_buff_cnt
000eba  f1010101          ADD      r1,r1,#1              ;1142
000ebe  b2c9              UXTB     r1,r1                 ;1142
000ec0  73b1              STRB     r1,[r6,#0xe]          ;1142
000ec2  2906              CMP      r1,#6                 ;1143
000ec4  d300              BCC      |L1.3784|
000ec6  73b5              STRB     r5,[r6,#0xe]          ;1143
                  |L1.3784|
000ec8  7bb1              LDRB     r1,[r6,#0xe]          ;1144  ; i_bat_buff_cnt
000eca  6091              STR      r1,[r2,#8]            ;1144  ; bat_hndl_plazma
000ecc  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1145
000ed0  f04f0100          MOV      r1,#0                 ;1146
000ed4  4608              MOV      r0,r1                 ;1147
                  |L1.3798|
000ed6  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1149
000eda  4461              ADD      r1,r1,r12             ;1149
000edc  b209              SXTH     r1,r1                 ;1149
000ede  f1000001          ADD      r0,r0,#1              ;1147
000ee2  b2c0              UXTB     r0,r0                 ;1147
000ee4  2806              CMP      r0,#6                 ;1147
000ee6  d3f6              BCC      |L1.3798|
000ee8  f04f0006          MOV      r0,#6                 ;1151
000eec  fb91f0f0          SDIV     r0,r1,r0              ;1151
000ef0  b201              SXTH     r1,r0                 ;1151
000ef2  48b3              LDR      r0,|L1.4544|
000ef4  f8df82c4          LDR      r8,|L1.4540|
000ef8  8800              LDRH     r0,[r0,#0]            ;1153  ; BAT_C_POINT_1_6
000efa  f1a8081c          SUB      r8,r8,#0x1c           ;1153
000efe  eb000040          ADD      r0,r0,r0,LSL #1       ;1153
000f02  ea4f0040          LSL      r0,r0,#1              ;1153
000f06  f8a80000          STRH     r0,[r8,#0]            ;1153
000f0a  48ae              LDR      r0,|L1.4548|
000f0c  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_2
000f0e  ea4f0040          LSL      r0,r0,#1              ;1154
000f12  f8a80002          STRH     r0,[r8,#2]            ;1154
000f16  48ac              LDR      r0,|L1.4552|
000f18  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1
000f1a  f8a80004          STRH     r0,[r8,#4]            ;1155
000f1e  48ab              LDR      r0,|L1.4556|
000f20  f04f0303          MOV      r3,#3                 ;1156
000f24  f9b00000          LDRSH    r0,[r0,#0]            ;1156  ; BAT_C_POINT_3
000f28  fb90f0f3          SDIV     r0,r0,r3              ;1156
000f2c  f8a80006          STRH     r0,[r8,#6]            ;1156
000f30  48a7              LDR      r0,|L1.4560|
000f32  f04f0305          MOV      r3,#5                 ;1157
000f36  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_5
000f3a  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f3e  f8a80008          STRH     r0,[r8,#8]            ;1157
000f42  48a4              LDR      r0,|L1.4564|
000f44  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_10
000f48  fb90f0f7          SDIV     r0,r0,r7              ;1158
000f4c  f8a8000a          STRH     r0,[r8,#0xa]          ;1158
000f50  48a1              LDR      r0,|L1.4568|
000f52  f04f0314          MOV      r3,#0x14              ;1159
000f56  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_20
000f5a  fb90f0f3          SDIV     r0,r0,r3              ;1159
000f5e  f8a8000c          STRH     r0,[r8,#0xc]          ;1159
000f62  489e              LDR      r0,|L1.4572|
000f64  f108090e          ADD      r9,r8,#0xe            ;1161
000f68  f9b07000          LDRSH    r7,[r0,#0]            ;1161  ; BAT_U_END_1_6
000f6c  f8a97000          STRH     r7,[r9,#0]            ;1161
000f70  489b              LDR      r0,|L1.4576|
000f72  8800              LDRH     r0,[r0,#0]            ;1162  ; BAT_U_END_1_2
000f74  f8a90002          STRH     r0,[r9,#2]            ;1162
000f78  489a              LDR      r0,|L1.4580|
000f7a  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1
000f7c  f8a90004          STRH     r0,[r9,#4]            ;1163
000f80  4899              LDR      r0,|L1.4584|
000f82  e001              B        |L1.3976|
                  |L1.3972|
000f84  e0ea              B        |L1.4444|
                  |L1.3974|
000f86  e061              B        |L1.4172|
                  |L1.3976|
000f88  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_3
000f8a  f8a90006          STRH     r0,[r9,#6]            ;1164
000f8e  4897              LDR      r0,|L1.4588|
000f90  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_5
000f92  f8a90008          STRH     r0,[r9,#8]            ;1165
000f96  4896              LDR      r0,|L1.4592|
000f98  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_10
000f9a  f8a9000a          STRH     r0,[r9,#0xa]          ;1166
000f9e  4895              LDR      r0,|L1.4596|
000fa0  f9b0c000          LDRSH    r12,[r0,#0]           ;1167  ; BAT_U_END_20
000fa4  f8a9c00c          STRH     r12,[r9,#0xc]         ;1167
000fa8  6051              STR      r1,[r2,#4]            ;1169  ; bat_hndl_plazma
000faa  8121              STRH     r1,[r4,#8]
;;;1171   		
;;;1172   		for(i=0;i<7;i++)
000fac  f04f0000          MOV      r0,#0
                  |L1.4016|
;;;1173   			{
;;;1174   			if(bat_hndl_i_temp>=I_from_t_table[i])
000fb0  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000fb4  428b              CMP      r3,r1
000fb6  dd04              BLE      |L1.4034|
000fb8  f1000001          ADD      r0,r0,#1              ;1172
000fbc  b2c0              UXTB     r0,r0                 ;1172
000fbe  2807              CMP      r0,#7                 ;1172
000fc0  d3f6              BCC      |L1.4016|
                  |L1.4034|
;;;1175   				{
;;;1176   				break;
;;;1177   				}
;;;1178   			}
;;;1179   
;;;1180   		bat_hndl_plazma[0]=i;
000fc2  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fc4  f10d0a04          ADD      r10,sp,#4             ;1113
;;;1181   
;;;1182   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fc8  b1c8              CBZ      r0,|L1.4094|
;;;1183   		 else if((i>=1)&&(i<7))
000fca  1e42              SUBS     r2,r0,#1
000fcc  2a06              CMP      r2,#6
000fce  d219              BCS      |L1.4100|
;;;1184   		 	{
;;;1185   			short i1,i2;
;;;1186   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fd0  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fd4  eba30101          SUB      r1,r3,r1
000fd8  b209              SXTH     r1,r1
;;;1187   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fda  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fde  eba30308          SUB      r3,r3,r8
000fe2  b21b              SXTH     r3,r3
;;;1188   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fe4  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fe8  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fec  eba80802          SUB      r8,r8,r2
;;;1189   			bat_hndl_t_razr_ke*=(long)i1;
000ff0  fb08f801          MUL      r8,r8,r1
;;;1190   			bat_hndl_t_razr_ke/=(long)i2;
000ff4  fb98f1f3          SDIV     r1,r8,r3
;;;1191   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000ff8  4411              ADD      r1,r1,r2
000ffa  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1192   			}
000ffc  e006              B        |L1.4108|
                  |L1.4094|
000ffe  9901              LDR      r1,[sp,#4]            ;1182
001000  6561              STR      r1,[r4,#0x54]         ;1182  ; bat_hndl_t_razr_ke
001002  e003              B        |L1.4108|
                  |L1.4100|
;;;1193   		else if(i>=7)
001004  2807              CMP      r0,#7
001006  d301              BCC      |L1.4108|
;;;1194   			{
;;;1195   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
001008  9907              LDR      r1,[sp,#0x1c]
00100a  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4108|
;;;1196   			}
;;;1197   
;;;1198   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
00100c  b1c0              CBZ      r0,|L1.4160|
;;;1199   		 else if((i>=1)&&(i<7))
00100e  1e41              SUBS     r1,r0,#1
001010  2906              CMP      r1,#6
001012  d217              BCS      |L1.4164|
;;;1200   		 	{
;;;1201   			long u1,tempL;
;;;1202   
;;;1203   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
001014  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001018  f9392011          LDRSH    r2,[r9,r1,LSL #1]
00101c  eba30302          SUB      r3,r3,r2
;;;1204   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
001020  f85a1021          LDR      r1,[r10,r1,LSL #2]
001024  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
001026  eba70701          SUB      r7,r7,r1
;;;1205   			tempL*=u1;
00102a  fb03f307          MUL      r3,r3,r7
;;;1206   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00102e  f85a0020          LDR      r0,[r10,r0,LSL #2]
001032  eba00001          SUB      r0,r0,r1
;;;1207   			tempL/=u1;
001036  fb93f0f0          SDIV     r0,r3,r0
;;;1208   			tempL+=(long)U_end_from_i_table[i-1];
00103a  4410              ADD      r0,r0,r2
;;;1209   			bat_hndl_u_end=(short)tempL;
00103c  8160              STRH     r0,[r4,#0xa]
;;;1210   			}
00103e  e005              B        |L1.4172|
                  |L1.4160|
001040  8167              STRH     r7,[r4,#0xa]          ;1198
001042  e003              B        |L1.4172|
                  |L1.4164|
;;;1211   		else if(i>=7)
001044  2807              CMP      r0,#7
001046  d301              BCC      |L1.4172|
;;;1212   			{
;;;1213   			bat_hndl_u_end=U_end_from_i_table[6];
001048  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4172|
;;;1214   			}
;;;1215   
;;;1216   		}
;;;1217   
;;;1218   
;;;1219   
;;;1220   	if(spc_phase==0)
00104c  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1221   		{
;;;1222   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1223   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1224   
;;;1225   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1226   	    	
;;;1227   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1228   			{
;;;1229   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1230   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001050  4f69              LDR      r7,|L1.4600|
;;;1231   			}
;;;1232   
;;;1233   		bat[0]._time_min_cnt_ke++;
;;;1234   		if(bat[0]._time_min_cnt_ke>=60)
;;;1235   			{
;;;1236   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
001052  f44f78e3          MOV      r8,#0x1c6
001056  bbe8              CBNZ     r0,|L1.4308|
001058  2314              MOVS     r3,#0x14              ;1223
00105a  f04f32ff          MOV      r2,#0xffffffff        ;1223
00105e  21ce              MOVS     r1,#0xce              ;1223
001060  20cd              MOVS     r0,#0xcd              ;1223
001062  f7fffffe          BL       mess_send
001066  f8961024          LDRB     r1,[r6,#0x24]         ;1225  ; spc_bat
00106a  f8df9190          LDR      r9,|L1.4604|
00106e  eb010041          ADD      r0,r1,r1,LSL #1       ;1225
001072  eb001001          ADD      r0,r0,r1,LSL #4       ;1225
001076  eb090080          ADD      r0,r9,r0,LSL #2       ;1225
00107a  f9b00008          LDRSH    r0,[r0,#8]            ;1225
00107e  f7fffffe          BL       abs
001082  f8d91018          LDR      r1,[r9,#0x18]         ;1225  ; bat
001086  4401              ADD      r1,r1,r0              ;1225
001088  f8c91018          STR      r1,[r9,#0x18]         ;1225  ; bat
00108c  f64840a0          MOV      r0,#0x8ca0            ;1227
001090  4281              CMP      r1,r0                 ;1227
001092  db0c              BLT      |L1.4270|
001094  eba10100          SUB      r1,r1,r0              ;1229
001098  f8c91018          STR      r1,[r9,#0x18]         ;1229  ; bat
00109c  8838              LDRH     r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
00109e  f7fffffe          BL       lc640_read_int
0010a2  1c40              ADDS     r0,r0,#1              ;1230
0010a4  b201              SXTH     r1,r0                 ;1230
0010a6  f9b70000          LDRSH    r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
0010aa  f7fffffe          BL       lc640_write_int
                  |L1.4270|
0010ae  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1233  ; bat
0010b2  f1000001          ADD      r0,r0,#1              ;1233
0010b6  b281              UXTH     r1,r0                 ;1233
0010b8  f8a9104a          STRH     r1,[r9,#0x4a]         ;1233
0010bc  293c              CMP      r1,#0x3c              ;1234
0010be  d309              BCC      |L1.4308|
0010c0  4640              MOV      r0,r8
0010c2  f7fffffe          BL       lc640_read_int
0010c6  1c40              ADDS     r0,r0,#1
0010c8  b201              SXTH     r1,r0
0010ca  4640              MOV      r0,r8
0010cc  f7fffffe          BL       lc640_write_int
;;;1237   			bat[0]._time_min_cnt_ke=0;
0010d0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4308|
;;;1238   			}
;;;1239   		}
;;;1240   
;;;1241   	else if(spc_phase==1)
;;;1242   		{
;;;1243   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1244   		}
;;;1245   
;;;1246   	if(out_U<bat_hndl_u_end)
0010d4  484a              LDR      r0,|L1.4608|
0010d6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010da  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010de  4288              CMP      r0,r1
0010e0  da3a              BGE      |L1.4440|
;;;1247   		{
;;;1248   		cnt_end_ke++;
0010e2  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010e6  f1000001          ADD      r0,r0,#1
0010ea  b200              SXTH     r0,r0
0010ec  f8a60066          STRH     r0,[r6,#0x66]
;;;1249   		if(cnt_end_ke>=30)
0010f0  281e              CMP      r0,#0x1e
0010f2  db33              BLT      |L1.4444|
;;;1250   			{
;;;1251   			
;;;1252   			if((spc_stat==spcKE)&&(spc_phase==0))
0010f4  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010f8  2801              CMP      r0,#1
0010fa  d121              BNE      |L1.4416|
0010fc  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
001100  b9f0              CBNZ     r0,|L1.4416|
;;;1253   				{
;;;1254   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
001102  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001104  f7fffffe          BL       lc640_read_int
001108  b201              SXTH     r1,r0
00110a  483e              LDR      r0,|L1.4612|
00110c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001110  f7fffffe          BL       lc640_write_int
;;;1255   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
001114  4640              MOV      r0,r8
001116  f7fffffe          BL       lc640_read_int
00111a  b284              UXTH     r4,r0
00111c  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00111e  f7fffffe          BL       lc640_read_int
001122  b281              UXTH     r1,r0
001124  4622              MOV      r2,r4
001126  2000              MOVS     r0,#0
001128  f7fffffe          BL       ke_zvu_mem_hndl
;;;1256   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
00112c  4836              LDR      r0,|L1.4616|
00112e  2100              MOVS     r1,#0
001130  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001134  f7fffffe          BL       lc640_write_int
;;;1257   				cntrl_stat=50;
001138  f04f0032          MOV      r0,#0x32
00113c  8670              STRH     r0,[r6,#0x32]
;;;1258   				cntrl_stat_old=50;
00113e  86b0              STRH     r0,[r6,#0x34]
                  |L1.4416|
;;;1259   				}
;;;1260   
;;;1261   			spc_stat=spcOFF;
001140  f8865023          STRB     r5,[r6,#0x23]
;;;1262   			__ee_spc_stat=spcOFF;
001144  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1263   			lc640_write_int(EE_SPC_STAT,spcOFF);
001148  b008              ADD      sp,sp,#0x20
00114a  2100              MOVS     r1,#0
00114c  e8bd47f0          POP      {r4-r10,lr}
001150  f240209a          MOV      r0,#0x29a
001154  f7ffbffe          B.W      lc640_write_int
                  |L1.4440|
;;;1264   
;;;1265   			}
;;;1266   		}
;;;1267   	else cnt_end_ke=0;
001158  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4444|
;;;1268   
;;;1269   	}
;;;1270   			
;;;1271   }
00115c  b008              ADD      sp,sp,#0x20
00115e  e8bd87f0          POP      {r4-r10,pc}
;;;1272   #endif
                          ENDP

                  vz_start PROC
;;;1342   //-----------------------------------------------
;;;1343   char vz_start(char hour)
001162  b570              PUSH     {r4-r6,lr}
;;;1344   {          
001164  4605              MOV      r5,r0
;;;1345   char out;
;;;1346   out=0;
001166  f04f0600          MOV      r6,#0
;;;1347   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00116a  4c11              LDR      r4,|L1.4528|
00116c  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001170  b9a8              CBNZ     r0,|L1.4510|
001172  4826              LDR      r0,|L1.4620|
001174  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001176  2801              CMP      r0,#1
001178  d06a              BEQ      |L1.4688|
;;;1348   	{
;;;1349   	spc_stat=spcVZ;
00117a  f104042c          ADD      r4,r4,#0x2c
00117e  f04f0102          MOV      r1,#2
001182  f8041c09          STRB     r1,[r4,#-9]
;;;1350   	__ee_spc_stat=spcVZ; 
001186  87e1              STRH     r1,[r4,#0x3e]
;;;1351   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001188  f240209a          MOV      r0,#0x29a
00118c  f7fffffe          BL       lc640_write_int
;;;1352   	vz_cnt_h=hour;
001190  86e5              STRH     r5,[r4,#0x36]
;;;1353   	__ee_vz_cnt=hour*60;
001192  ebc51005          RSB      r0,r5,r5,LSL #4
001196  ea4f0080          LSL      r0,r0,#2
00119a  87a0              STRH     r0,[r4,#0x3c]
00119c  e038              B        |L1.4624|
                  |L1.4510|
00119e  e057              B        |L1.4688|
                  |L1.4512|
                          DCD      bat_u_old_cnt
                  |L1.4516|
                          DCD      0x40024020
                  |L1.4520|
                          DCD      ||area_number.18||+0x100
                  |L1.4524|
                          DCD      ||area_number.12||+0x4
                  |L1.4528|
                          DCD      ||area_number.18||
                  |L1.4532|
                          DCD      ||.bss||
                  |L1.4536|
                          DCD      Ib_ips_termokompensat
                  |L1.4540|
                          DCD      ||.bss||+0x468
                  |L1.4544|
                          DCD      BAT_C_POINT_1_6
                  |L1.4548|
                          DCD      BAT_C_POINT_1_2
                  |L1.4552|
                          DCD      BAT_C_POINT_1
                  |L1.4556|
                          DCD      BAT_C_POINT_3
                  |L1.4560|
                          DCD      BAT_C_POINT_5
                  |L1.4564|
                          DCD      BAT_C_POINT_10
                  |L1.4568|
                          DCD      BAT_C_POINT_20
                  |L1.4572|
                          DCD      BAT_U_END_1_6
                  |L1.4576|
                          DCD      BAT_U_END_1_2
                  |L1.4580|
                          DCD      BAT_U_END_1
                  |L1.4584|
                          DCD      BAT_U_END_3
                  |L1.4588|
                          DCD      BAT_U_END_5
                  |L1.4592|
                          DCD      BAT_U_END_10
                  |L1.4596|
                          DCD      BAT_U_END_20
                  |L1.4600|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4604|
                          DCD      bat
                  |L1.4608|
                          DCD      out_U
                  |L1.4612|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4616|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4620|
                          DCD      speedChrgBlckStat
                  |L1.4624|
001210  f1a4042c          SUB      r4,r4,#0x2c
;;;1354   	if(hour==0)__ee_vz_cnt=30;
001214  b91d              CBNZ     r5,|L1.4638|
001216  f04f001e          MOV      r0,#0x1e
00121a  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4638|
;;;1355   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
00121e  f104045e          ADD      r4,r4,#0x5e
001222  f44f7027          MOV      r0,#0x29c
001226  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00122a  f7fffffe          BL       lc640_write_int
;;;1356   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
00122e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001232  f44f702a          MOV      r0,#0x2a8
001236  f7fffffe          BL       lc640_write_int
;;;1357   	vz_cnt_h_=0;
00123a  f04f0000          MOV      r0,#0
00123e  80e0              STRH     r0,[r4,#6]
;;;1358   	vz_cnt_s=0;
001240  8020              STRH     r0,[r4,#0]
;;;1359   	vz_cnt_s_=0;
001242  8060              STRH     r0,[r4,#2]
;;;1360   	out=1;
001244  f04f0601          MOV      r6,#1
;;;1361   	vz_mem_hndl(1);
001248  f04f0001          MOV      r0,#1
00124c  f7fffffe          BL       vz_mem_hndl
                  |L1.4688|
;;;1362   	}
;;;1363   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1364   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1365   //plazma=out;	
;;;1366   return out;
001250  4630              MOV      r0,r6
;;;1367   }
001252  bd70              POP      {r4-r6,pc}
;;;1368   
                          ENDP

                  vz_stop PROC
;;;1369   //-----------------------------------------------
;;;1370   void vz_stop(void)
001254  b510              PUSH     {r4,lr}
;;;1371   {
;;;1372   if(spc_stat==spcVZ)
001256  4cff              LDR      r4,|L1.5716|
001258  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00125c  2802              CMP      r0,#2
00125e  d113              BNE      |L1.4744|
;;;1373        {
;;;1374   vz_mem_hndl(vz_cnt_h);          
001260  f104042c          ADD      r4,r4,#0x2c
001264  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001266  f7fffffe          BL       vz_mem_hndl
;;;1375   vz_cnt_s=0;
00126a  f04f0000          MOV      r0,#0
00126e  8660              STRH     r0,[r4,#0x32]
;;;1376   vz_cnt_h=0;
001270  86e0              STRH     r0,[r4,#0x36]
;;;1377   vz_cnt_h_=0;
001272  8720              STRH     r0,[r4,#0x38]
;;;1378   spc_stat=spcOFF;
001274  f8040c09          STRB     r0,[r4,#-9]
;;;1379   
;;;1380   		__ee_spc_stat=spcOFF;
001278  87e0              STRH     r0,[r4,#0x3e]
;;;1381   		lc640_write_int(EE_SPC_STAT,spcOFF);
00127a  4601              MOV      r1,r0
00127c  e8bd4010          POP      {r4,lr}
001280  f240209a          MOV      r0,#0x29a
001284  f7ffbffe          B.W      lc640_write_int
                  |L1.4744|
;;;1382        }
;;;1383   
;;;1384   }
001288  bd10              POP      {r4,pc}
;;;1385   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1387   //-----------------------------------------------
;;;1388   void amper_chas_cnt_drv(void)
00128a  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390   
;;;1391   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
00128c  4af1              LDR      r2,|L1.5716|
00128e  49f2              LDR      r1,|L1.5720|
001290  3280              ADDS     r2,r2,#0x80
001292  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
001296  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
001298  4401              ADD      r1,r1,r0
00129a  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1392   
;;;1393   if(amper_chas_cnt_drv_summ>=36000L)
00129c  f64843a0          MOV      r3,#0x8ca0
;;;1394   	{
;;;1395   	amper_chas_cnt_drv_summ-=36000L;
;;;1396   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
0012a0  f44f74e4          MOV      r4,#0x1c8
0012a4  4299              CMP      r1,r3                 ;1393
0012a6  db0c              BLT      |L1.4802|
0012a8  eba10103          SUB      r1,r1,r3              ;1395
0012ac  6651              STR      r1,[r2,#0x64]         ;1395  ; amper_chas_cnt_drv_summ
0012ae  4620              MOV      r0,r4
0012b0  f7fffffe          BL       lc640_read_int
0012b4  1c40              ADDS     r0,r0,#1
0012b6  b201              SXTH     r1,r0
0012b8  4620              MOV      r0,r4
0012ba  e8bd4010          POP      {r4,lr}
0012be  f7ffbffe          B.W      lc640_write_int
                  |L1.4802|
;;;1397   	}
;;;1398   else if(amper_chas_cnt_drv_summ<=-36000L)
0012c2  48e6              LDR      r0,|L1.5724|
0012c4  4281              CMP      r1,r0
0012c6  dc0c              BGT      |L1.4834|
;;;1399   	{
;;;1400   	amper_chas_cnt_drv_summ+=36000L;
0012c8  eb010003          ADD      r0,r1,r3
0012cc  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1401   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012ce  4620              MOV      r0,r4
0012d0  f7fffffe          BL       lc640_read_int
0012d4  1e40              SUBS     r0,r0,#1
0012d6  b201              SXTH     r1,r0
0012d8  4620              MOV      r0,r4
0012da  e8bd4010          POP      {r4,lr}
0012de  f7ffbffe          B.W      lc640_write_int
                  |L1.4834|
;;;1402   	}
;;;1403   }
0012e2  bd10              POP      {r4,pc}
;;;1404   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1406   //-----------------------------------------------
;;;1407   void avz_next_date_hndl(void)
0012e4  b570              PUSH     {r4-r6,lr}
;;;1408   {
;;;1409   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012e6  4cde              LDR      r4,|L1.5728|
0012e8  f8940038          LDRB     r0,[r4,#0x38]
0012ec  4ddd              LDR      r5,|L1.5732|
0012ee  7829              LDRB     r1,[r5,#0]  ; AVZ
0012f0  4408              ADD      r0,r0,r1
0012f2  280c              CMP      r0,#0xc
0012f4  d906              BLS      |L1.4868|
0012f6  8fa0              LDRH     r0,[r4,#0x3c]
0012f8  1c40              ADDS     r0,r0,#1
0012fa  b201              SXTH     r1,r0
0012fc  20b8              MOVS     r0,#0xb8
0012fe  f7fffffe          BL       lc640_write_int
001302  e004              B        |L1.4878|
                  |L1.4868|
;;;1410   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
001304  f9b4103c          LDRSH    r1,[r4,#0x3c]
001308  20b8              MOVS     r0,#0xb8
00130a  f7fffffe          BL       lc640_write_int
                  |L1.4878|
;;;1411   
;;;1412   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1413   
;;;1414   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00130e  f8941038          LDRB     r1,[r4,#0x38]
001312  7828              LDRB     r0,[r5,#0]  ; AVZ
001314  4401              ADD      r1,r1,r0
001316  290c              CMP      r1,#0xc
001318  d907              BLS      |L1.4906|
00131a  f8941038          LDRB     r1,[r4,#0x38]
00131e  380c              SUBS     r0,r0,#0xc
001320  4401              ADD      r1,r1,r0
001322  20b6              MOVS     r0,#0xb6
001324  f7fffffe          BL       lc640_write_int
001328  e005              B        |L1.4918|
                  |L1.4906|
;;;1415   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
00132a  f8941038          LDRB     r1,[r4,#0x38]
00132e  4401              ADD      r1,r1,r0
001330  20b6              MOVS     r0,#0xb6
001332  f7fffffe          BL       lc640_write_int
                  |L1.4918|
;;;1416   
;;;1417   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1418   
;;;1419   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
001336  f894002c          LDRB     r0,[r4,#0x2c]
00133a  281c              CMP      r0,#0x1c
00133c  d904              BLS      |L1.4936|
00133e  211c              MOVS     r1,#0x1c
001340  20b4              MOVS     r0,#0xb4
001342  f7fffffe          BL       lc640_write_int
001346  e004              B        |L1.4946|
                  |L1.4936|
;;;1420   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001348  f894102c          LDRB     r1,[r4,#0x2c]
00134c  20b4              MOVS     r0,#0xb4
00134e  f7fffffe          BL       lc640_write_int
                  |L1.4946|
;;;1421   
;;;1422   //lc640_write_int(EE_DATE_AVZ,4);
;;;1423   
;;;1424   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001352  f1040420          ADD      r4,r4,#0x20
001356  7a21              LDRB     r1,[r4,#8]
001358  f04f00ae          MOV      r0,#0xae
00135c  f7fffffe          BL       lc640_write_int
;;;1425   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001360  7921              LDRB     r1,[r4,#4]
001362  20b0              MOVS     r0,#0xb0
001364  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001368  7821              LDRB     r1,[r4,#0]
00136a  e8bd4070          POP      {r4-r6,lr}
00136e  20b2              MOVS     r0,#0xb2
001370  f7ffbffe          B.W      lc640_write_int
;;;1427   
;;;1428   }
;;;1429   
                          ENDP

                  avz_drv PROC
;;;1430   //-----------------------------------------------
;;;1431   void avz_drv(void)                               
001374  b510              PUSH     {r4,lr}
;;;1432   {                
;;;1433   if(AVZ!=AVZ_OFF)
001376  48bb              LDR      r0,|L1.5732|
;;;1434   	{
;;;1435   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1436   		{
;;;1437   		bAVZ=1;
001378  4cb6              LDR      r4,|L1.5716|
00137a  7800              LDRB     r0,[r0,#0]            ;1433  ; AVZ
00137c  b338              CBZ      r0,|L1.5070|
00137e  48b8              LDR      r0,|L1.5728|
001380  8f82              LDRH     r2,[r0,#0x3c]         ;1435
001382  49b9              LDR      r1,|L1.5736|
001384  8809              LDRH     r1,[r1,#0]            ;1435  ; YEAR_AVZ
001386  428a              CMP      r2,r1                 ;1435
001388  d121              BNE      |L1.5070|
00138a  f8902038          LDRB     r2,[r0,#0x38]         ;1435
00138e  49b7              LDR      r1,|L1.5740|
001390  8809              LDRH     r1,[r1,#0]            ;1435  ; MONTH_AVZ
001392  428a              CMP      r2,r1                 ;1435
001394  d11b              BNE      |L1.5070|
001396  f890102c          LDRB     r1,[r0,#0x2c]         ;1435
00139a  4ab5              LDR      r2,|L1.5744|
00139c  8812              LDRH     r2,[r2,#0]            ;1435  ; DATE_AVZ
00139e  4291              CMP      r1,r2                 ;1435
0013a0  d115              BNE      |L1.5070|
0013a2  f8901028          LDRB     r1,[r0,#0x28]         ;1435
0013a6  4ab3              LDR      r2,|L1.5748|
0013a8  8812              LDRH     r2,[r2,#0]            ;1435  ; HOUR_AVZ
0013aa  4291              CMP      r1,r2                 ;1435
0013ac  d10f              BNE      |L1.5070|
0013ae  f8901024          LDRB     r1,[r0,#0x24]         ;1435
0013b2  4ab1              LDR      r2,|L1.5752|
0013b4  8812              LDRH     r2,[r2,#0]            ;1435  ; MIN_AVZ
0013b6  4291              CMP      r1,r2                 ;1435
0013b8  d109              BNE      |L1.5070|
0013ba  f8900020          LDRB     r0,[r0,#0x20]         ;1435
0013be  49af              LDR      r1,|L1.5756|
0013c0  8809              LDRH     r1,[r1,#0]            ;1435  ; SEC_AVZ
0013c2  4288              CMP      r0,r1                 ;1435
0013c4  d103              BNE      |L1.5070|
0013c6  f04f0001          MOV      r0,#1
0013ca  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5070|
;;;1438   		}
;;;1439   	}
;;;1440   if(bAVZ)
0013ce  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013d2  2800              CMP      r0,#0
0013d4  d00d              BEQ      |L1.5106|
;;;1441   	{
;;;1442   	if(vz_start(AVZ_TIME))
0013d6  48aa              LDR      r0,|L1.5760|
0013d8  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013da  b2c0              UXTB     r0,r0
0013dc  f7fffffe          BL       vz_start
0013e0  2800              CMP      r0,#0
0013e2  d006              BEQ      |L1.5106|
;;;1443   		{
;;;1444   		bAVZ=0;
0013e4  f04f0000          MOV      r0,#0
0013e8  f8840026          STRB     r0,[r4,#0x26]
;;;1445   		avz_next_date_hndl();
0013ec  e8bd4010          POP      {r4,lr}
0013f0  e7fe              B        avz_next_date_hndl
                  |L1.5106|
;;;1446   		}
;;;1447   	}	
;;;1448   
;;;1449   }
0013f2  bd10              POP      {r4,pc}
;;;1450   
                          ENDP

                  vz_drv PROC
;;;1451   //-----------------------------------------------
;;;1452   void vz_drv(void)
0013f4  b538              PUSH     {r3-r5,lr}
;;;1453   { 
;;;1454   if(spc_stat==spcVZ)
0013f6  4c97              LDR      r4,|L1.5716|
0013f8  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013fc  2802              CMP      r0,#2
0013fe  d11d              BNE      |L1.5180|
;;;1455   	{
;;;1456   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001400  48a0              LDR      r0,|L1.5764|
001402  7800              LDRB     r0,[r0,#0]  ; sk_stat
001404  2801              CMP      r0,#1
001406  d01a              BEQ      |L1.5182|
001408  489f              LDR      r0,|L1.5768|
00140a  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
00140c  2800              CMP      r0,#0
00140e  d016              BEQ      |L1.5182|
;;;1457   		{
;;;1458   
;;;1459   	if(vz_cnt_s_<3600)
;;;1460   		{
;;;1461   		vz_cnt_s_++;
;;;1462   		if(vz_cnt_s_>=3600)
;;;1463   			{
;;;1464   			vz_cnt_s_=0;
;;;1465   			if(vz_cnt_h)
;;;1466   				{
;;;1467   				vz_cnt_h--;
;;;1468   				vz_cnt_h_++;
;;;1469   				}
;;;1470   			}
;;;1471   		}
;;;1472   
;;;1473   
;;;1474   	if(vz_cnt_s<60)
;;;1475   		{
;;;1476   		vz_cnt_s++;
;;;1477   		if(vz_cnt_s>=60)
;;;1478   			{
;;;1479   			vz_cnt_s=0;
;;;1480   			
;;;1481   			__ee_vz_cnt--;
;;;1482   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1483   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1484   				{
;;;1485   				spc_stat=spcOFF;
;;;1486   						__ee_spc_stat=spcOFF;
;;;1487   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1488   
;;;1489   //				hv_vz_stat=hvsOFF;
;;;1490   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1491   				vz_mem_hndl(0);
;;;1492   				}
;;;1493   			}
;;;1494   		}
;;;1495   		vz_error=0; 
;;;1496   		}
;;;1497   	else 
;;;1498   		{
;;;1499   		vz_error=1; 
001410  f04f0001          MOV      r0,#1
001414  7060              STRB     r0,[r4,#1]
;;;1500   		if(((LPC_RTC->SEC)%10)==0)
001416  489d              LDR      r0,|L1.5772|
001418  7800              LDRB     r0,[r0,#0]
00141a  f04f010a          MOV      r1,#0xa
00141e  fbb0f2f1          UDIV     r2,r0,r1
001422  fb010012          MLS      r0,r1,r2,r0
001426  2800              CMP      r0,#0
001428  d108              BNE      |L1.5180|
;;;1501   			{
;;;1502   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00142a  f2413088          MOV      r0,#0x1388
00142e  9000              STR      r0,[sp,#0]
001430  a397              ADR      r3,|L1.5776|
001432  a29d              ADR      r2,|L1.5800|
001434  a1a2              ADR      r1,|L1.5824|
001436  a0a8              ADR      r0,|L1.5848|
001438  f7fffffe          BL       show_mess
                  |L1.5180|
;;;1503   						"    ЗАБЛОКИРОВАН    ",
;;;1504   						"     НЕИСПРАВНА     ",
;;;1505   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1506   						5000);			
;;;1507   			}
;;;1508   		}
;;;1509   /*	if(vz_cnt_s_>=3)
;;;1510   		{
;;;1511   		if(sk_stat[0]==0)
;;;1512   		} */
;;;1513   
;;;1514   	}
;;;1515   
;;;1516   
;;;1517   } 
00143c  bd38              POP      {r3-r5,pc}
                  |L1.5182|
00143e  f8b40060          LDRH     r0,[r4,#0x60]         ;1459  ; vz_cnt_s_
001442  f44f6161          MOV      r1,#0xe10             ;1459
001446  2500              MOVS     r5,#0                 ;1456
001448  4288              CMP      r0,r1                 ;1459
00144a  d215              BCS      |L1.5240|
00144c  f1000001          ADD      r0,r0,#1              ;1461
001450  b280              UXTH     r0,r0                 ;1461
001452  f8a40060          STRH     r0,[r4,#0x60]         ;1461
001456  4288              CMP      r0,r1                 ;1462
001458  d30e              BCC      |L1.5240|
00145a  f8a45060          STRH     r5,[r4,#0x60]         ;1464
00145e  f8b40062          LDRH     r0,[r4,#0x62]         ;1465  ; vz_cnt_h
001462  b148              CBZ      r0,|L1.5240|
001464  f1a00001          SUB      r0,r0,#1              ;1467
001468  f8240f62          STRH     r0,[r4,#0x62]!        ;1467
00146c  8860              LDRH     r0,[r4,#2]            ;1468  ; vz_cnt_h_
00146e  f1000001          ADD      r0,r0,#1              ;1468
001472  8060              STRH     r0,[r4,#2]            ;1468
001474  f1a40462          SUB      r4,r4,#0x62           ;1468
                  |L1.5240|
001478  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1474  ; vz_cnt_s
00147c  283c              CMP      r0,#0x3c              ;1474
00147e  d225              BCS      |L1.5324|
001480  f1000001          ADD      r0,r0,#1              ;1476
001484  b280              UXTH     r0,r0                 ;1476
001486  f8a4005e          STRH     r0,[r4,#0x5e]         ;1476
00148a  283c              CMP      r0,#0x3c              ;1477
00148c  d31e              BCC      |L1.5324|
00148e  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1479
001492  8960              LDRH     r0,[r4,#0xa]          ;1481  ; __ee_vz_cnt
001494  f1a00001          SUB      r0,r0,#1              ;1481
001498  b201              SXTH     r1,r0                 ;1481
00149a  8161              STRH     r1,[r4,#0xa]          ;1481
00149c  f44f7027          MOV      r0,#0x29c             ;1482
0014a0  f7fffffe          BL       lc640_write_int
0014a4  8960              LDRH     r0,[r4,#0xa]          ;1483  ; __ee_vz_cnt
0014a6  f1a4045e          SUB      r4,r4,#0x5e           ;1483
0014aa  b118              CBZ      r0,|L1.5300|
0014ac  4890              LDR      r0,|L1.5872|
0014ae  8800              LDRH     r0,[r0,#0]            ;1483  ; speedChrgBlckStat
0014b0  2801              CMP      r0,#1                 ;1483
0014b2  d10b              BNE      |L1.5324|
                  |L1.5300|
0014b4  f8845023          STRB     r5,[r4,#0x23]         ;1485
0014b8  f8a4506a          STRH     r5,[r4,#0x6a]         ;1486
0014bc  2100              MOVS     r1,#0                 ;1487
0014be  f240209a          MOV      r0,#0x29a             ;1487
0014c2  f7fffffe          BL       lc640_write_int
0014c6  2000              MOVS     r0,#0                 ;1491
0014c8  f7fffffe          BL       vz_mem_hndl
                  |L1.5324|
0014cc  7065              STRB     r5,[r4,#1]            ;1495
0014ce  bd38              POP      {r3-r5,pc}
;;;1518   
                          ENDP

                  vz1_drv PROC
;;;1520   //драйвер уравнительного заряда
;;;1521   void vz1_drv(void)
0014d0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1522   {
;;;1523   if(volt_region_cnt)volt_region_cnt--;
0014d4  f8df817c          LDR      r8,|L1.5716|
0014d8  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014dc  b118              CBZ      r0,|L1.5350|
0014de  f1a00001          SUB      r0,r0,#1
0014e2  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5350|
;;;1524   if(vz1_stat==vz1sOFF)
0014e6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014ea  b928              CBNZ     r0,|L1.5368|
;;;1525   	{
;;;1526   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014ec  2314              MOVS     r3,#0x14
0014ee  2200              MOVS     r2,#0
0014f0  2164              MOVS     r1,#0x64
0014f2  20d2              MOVS     r0,#0xd2
0014f4  f7fffffe          BL       mess_send
                  |L1.5368|
;;;1527   	}
;;;1528   if(vz1_stat==vz1sSTEP1)
0014f8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1529   	{
;;;1530   	if(vz1_stat_old!=vz1_stat)
;;;1531   		{
;;;1532   		vz1_stat_cnt=5;
;;;1533   		}
;;;1534   	if(vz1_stat_cnt)
;;;1535   		{
;;;1536   		vz1_stat_cnt--;
;;;1537   		if(vz1_stat_cnt==0)
;;;1538   			{
;;;1539   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1540   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1541   			}
;;;1542   		}
;;;1543   	if(sk_stat[0]==1)
0014fc  4d61              LDR      r5,|L1.5764|
0014fe  f44f7bc9          MOV      r11,#0x192            ;1540
001502  2801              CMP      r0,#1                 ;1528
001504  d139              BNE      |L1.5498|
001506  f8980006          LDRB     r0,[r8,#6]            ;1530  ; vz1_stat_old
00150a  2801              CMP      r0,#1                 ;1530
00150c  d003              BEQ      |L1.5398|
00150e  f04f0005          MOV      r0,#5                 ;1532
001512  f8a80076          STRH     r0,[r8,#0x76]         ;1532
                  |L1.5398|
001516  f9b80076          LDRSH    r0,[r8,#0x76]         ;1534  ; vz1_stat_cnt
00151a  b168              CBZ      r0,|L1.5432|
00151c  f1a00001          SUB      r0,r0,#1              ;1536
001520  b200              SXTH     r0,r0                 ;1536
001522  f8a80076          STRH     r0,[r8,#0x76]         ;1536
001526  b938              CBNZ     r0,|L1.5432|
001528  f04f000b          MOV      r0,#0xb               ;1539
00152c  f8880005          STRB     r0,[r8,#5]            ;1539
001530  4601              MOV      r1,r0                 ;1540
001532  4658              MOV      r0,r11                ;1540
001534  f7fffffe          BL       lc640_write
                  |L1.5432|
001538  7828              LDRB     r0,[r5,#0]  ; sk_stat
00153a  2801              CMP      r0,#1
00153c  d117              BNE      |L1.5486|
;;;1544   		{
;;;1545   		vz1_stat=vz1sSTEP2;
00153e  f04f0002          MOV      r0,#2
001542  f8880005          STRB     r0,[r8,#5]
;;;1546   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
001546  4601              MOV      r1,r0
001548  4658              MOV      r0,r11
00154a  f7fffffe          BL       lc640_write
;;;1547   		tree_up(iVZ1_STEP2_2,1,0,0);
00154e  2300              MOVS     r3,#0
001550  461a              MOV      r2,r3
001552  2101              MOVS     r1,#1
001554  20e1              MOVS     r0,#0xe1
001556  f7fffffe          BL       tree_up
;;;1548   		tree_up(iVZ1_STEP2_1,0,0,0);
00155a  2300              MOVS     r3,#0
00155c  461a              MOV      r2,r3
00155e  4619              MOV      r1,r3
001560  20e0              MOVS     r0,#0xe0
001562  f7fffffe          BL       tree_up
;;;1549   		ret(1200);
001566  f44f6096          MOV      r0,#0x4b0
00156a  f7fffffe          BL       ||ret||
                  |L1.5486|
;;;1550   		}
;;;1551   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00156e  2314              MOVS     r3,#0x14
001570  2200              MOVS     r2,#0
001572  2164              MOVS     r1,#0x64
001574  20d2              MOVS     r0,#0xd2
001576  f7fffffe          BL       mess_send
                  |L1.5498|
;;;1552   	}
;;;1553   
;;;1554   if(vz1_stat==vz1sSTEP2)
00157a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1555   	{
;;;1556   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1557   		{
;;;1558   		vz1_stat_cnt=15;
00157e  f04f090f          MOV      r9,#0xf
001582  2802              CMP      r0,#2                 ;1554
001584  d118              BNE      |L1.5560|
001586  f8980006          LDRB     r0,[r8,#6]            ;1556  ; vz1_stat_old
00158a  2802              CMP      r0,#2                 ;1556
00158c  d102              BNE      |L1.5524|
00158e  f8b80076          LDRH     r0,[r8,#0x76]         ;1556  ; vz1_stat_cnt
001592  b908              CBNZ     r0,|L1.5528|
                  |L1.5524|
001594  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5528|
;;;1559   		}
;;;1560   	vz1_stat_cnt--;
001598  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00159c  f1a00001          SUB      r0,r0,#1
0015a0  f8a80076          STRH     r0,[r8,#0x76]
;;;1561   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015a4  f04f0314          MOV      r3,#0x14
0015a8  f04f0200          MOV      r2,#0
0015ac  f04f0164          MOV      r1,#0x64
0015b0  f04f00d2          MOV      r0,#0xd2
0015b4  f7fffffe          BL       mess_send
                  |L1.5560|
;;;1562   	}
;;;1563   
;;;1564   if(vz1_stat==vz1sSTEP3)
0015b8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1565   	{
;;;1566   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1567   		{
;;;1568   		vz1_stat_cnt=10;
0015bc  240a              MOVS     r4,#0xa
0015be  2600              MOVS     r6,#0                 ;1523
0015c0  f04f0a01          MOV      r10,#1                ;1524
;;;1569   
;;;1570   		}
;;;1571   	vz1_stat_cnt--;
;;;1572   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1573   		{
;;;1574   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015c4  f2413788          MOV      r7,#0x1388
0015c8  2803              CMP      r0,#3                 ;1564
0015ca  d131              BNE      |L1.5680|
0015cc  f8980006          LDRB     r0,[r8,#6]            ;1566  ; vz1_stat_old
0015d0  2803              CMP      r0,#3                 ;1566
0015d2  d102              BNE      |L1.5594|
0015d4  f8b80076          LDRH     r0,[r8,#0x76]         ;1566  ; vz1_stat_cnt
0015d8  b908              CBNZ     r0,|L1.5598|
                  |L1.5594|
0015da  f8a84076          STRH     r4,[r8,#0x76]         ;1568
                  |L1.5598|
0015de  f8b80076          LDRH     r0,[r8,#0x76]         ;1571  ; vz1_stat_cnt
0015e2  f1a00001          SUB      r0,r0,#1              ;1571
0015e6  b200              SXTH     r0,r0                 ;1571
0015e8  f8a80076          STRH     r0,[r8,#0x76]         ;1571
0015ec  280a              CMP      r0,#0xa               ;1572
0015ee  d001              BEQ      |L1.5620|
0015f0  2809              CMP      r0,#9                 ;1572
0015f2  d106              BNE      |L1.5634|
                  |L1.5620|
0015f4  a33f              ADR      r3,|L1.5876|
0015f6  a245              ADR      r2,|L1.5900|
0015f8  a14a              ADR      r1,|L1.5924|
0015fa  a050              ADR      r0,|L1.5948|
0015fc  9700              STR      r7,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1575   					"      ТУМБЛЕР       ",
;;;1576   					"     ВЫСОКОГО       ",
;;;1577   					"    НАПРЯЖЕНИЯ      ",
;;;1578   					5000);
;;;1579   		}
;;;1580   	if(sk_stat[1]==1)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  2801              CMP      r0,#1
001606  d10d              BNE      |L1.5668|
;;;1581   		{
;;;1582   		vz1_stat=vz1sWRK;
001608  f8884005          STRB     r4,[r8,#5]
;;;1583   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00160c  210a              MOVS     r1,#0xa
00160e  4658              MOV      r0,r11
001610  f7fffffe          BL       lc640_write
;;;1584   		volt_region=1;
001614  f888a02f          STRB     r10,[r8,#0x2f]
;;;1585   		cntrl_stat=0;
001618  f8a86032          STRH     r6,[r8,#0x32]
;;;1586   		cntrl_stat_new=0;
00161c  f8a86048          STRH     r6,[r8,#0x48]
;;;1587   		cntrl_stat_old=0;
001620  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5668|
;;;1588   		}
;;;1589   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001624  2314              MOVS     r3,#0x14
001626  2200              MOVS     r2,#0
001628  2164              MOVS     r1,#0x64
00162a  20d2              MOVS     r0,#0xd2
00162c  f7fffffe          BL       mess_send
                  |L1.5680|
;;;1590   	}
;;;1591   
;;;1592   if(vz1_stat==vz1sWRK)
001630  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001634  280a              CMP      r0,#0xa
001636  d10b              BNE      |L1.5712|
;;;1593   	{
;;;1594   	if(vz1_stat_old!=vz1_stat)
;;;1595   		{
;;;1596   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001638  4906              LDR      r1,|L1.5716|
00163a  f8980006          LDRB     r0,[r8,#6]            ;1594  ; vz1_stat_old
00163e  3180              ADDS     r1,r1,#0x80
001640  280a              CMP      r0,#0xa               ;1594
001642  d006              BEQ      |L1.5714|
001644  4843              LDR      r0,|L1.5972|
001646  f44f6261          MOV      r2,#0xe10
00164a  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00164e  e083              B        |L1.5976|
                  |L1.5712|
001650  e0f6              B        |L1.6208|
                  |L1.5714|
001652  e085              B        |L1.5984|
                  |L1.5716|
                          DCD      ||area_number.18||
                  |L1.5720|
                          DCD      Ib_ips_termokompensat
                  |L1.5724|
                          DCD      0xffff7360
                  |L1.5728|
                          DCD      0x40024000
                  |L1.5732|
                          DCD      AVZ
                  |L1.5736|
                          DCD      YEAR_AVZ
                  |L1.5740|
                          DCD      MONTH_AVZ
                  |L1.5744|
                          DCD      DATE_AVZ
                  |L1.5748|
                          DCD      HOUR_AVZ
                  |L1.5752|
                          DCD      MIN_AVZ
                  |L1.5756|
                          DCD      SEC_AVZ
                  |L1.5760|
                          DCD      AVZ_TIME
                  |L1.5764|
                          DCD      sk_stat
                  |L1.5768|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5772|
                          DCD      0x40024020
                  |L1.5776|
001690  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001694  c2c5cdd2
001698  c8cbdfd6
00169c  c8df2121
0016a0  21202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016ac  20cdc5c8
0016b0  d1cfd0c0
0016b4  c2cdc020
0016b8  20202020
0016bc  00      
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016c4  c7c0c1cb
0016c8  cecac8d0
0016cc  cec2c0cd
0016d0  20      
0016d1  20202000          DCB      "   ",0
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
0016d8  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016dc  c2cdc8c2
0016e0  c0ded9c8
0016e4  c920c7  
0016e7  c0d0dfc4          DCB      192,208,223,196," ",0
0016eb  2000    
0016ed  00                DCB      0
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
                          DCD      speedChrgBlckStat
                  |L1.5876|
0016f4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016f8  cdc0cfd0
0016fc  dfc6c5cd
001700  c8df2020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001710  20c2dbd1
001714  cecacec3
001718  ce202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001728  2020d2d3
00172c  ccc1cbc5
001730  d0202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
00173c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001740  20c2cacb
001744  ded7c8d2
001748  c5202020
00174c  20202020
001750  00      
001751  00                DCB      0
001752  00                DCB      0
001753  00                DCB      0
                  |L1.5972|
                          DCD      UZ_T
                  |L1.5976|
001758  fb00f002          MUL      r0,r0,r2
00175c  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1597   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1598   		vz1_up_cnt=0L;
00175e  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5984|
;;;1599   
;;;1600   		}
;;;1601   	vz1_wrk_cnt--;
001760  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
001762  f1a00001          SUB      r0,r0,#1
001766  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1602   	vz1_up_cnt++;
001768  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
00176a  f1020201          ADD      r2,r2,#1
00176e  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1603   
;;;1604   	if(vz1_wrk_cnt==0)
001770  b940              CBNZ     r0,|L1.6020|
;;;1605   		{
;;;1606   		vz1_stat=vz1sFINE;
001772  f8889005          STRB     r9,[r8,#5]
;;;1607   		lc640_write(EE_VZ1_STAT,vz1sFINE);
001776  210f              MOVS     r1,#0xf
001778  4658              MOV      r0,r11
00177a  f7fffffe          BL       lc640_write
;;;1608   		uz_mem_hndl(0);
00177e  2000              MOVS     r0,#0
001780  f7fffffe          BL       uz_mem_hndl
                  |L1.6020|
;;;1609   		}
;;;1610   	if(sk_stat[0]==0)
001784  7828              LDRB     r0,[r5,#0]  ; sk_stat
001786  b938              CBNZ     r0,|L1.6040|
;;;1611   		{
;;;1612   		vz1_stat=vz1sERR2;
001788  f04f000c          MOV      r0,#0xc
00178c  f8880005          STRB     r0,[r8,#5]
;;;1613   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001790  4601              MOV      r1,r0
001792  4658              MOV      r0,r11
001794  f7fffffe          BL       lc640_write
                  |L1.6040|
;;;1614   		}
;;;1615   	if(sk_stat[1]==0)
001798  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179a  b938              CBNZ     r0,|L1.6060|
;;;1616   		{
;;;1617   		vz1_stat=vz1sERR3;
00179c  f04f000d          MOV      r0,#0xd
0017a0  f8880005          STRB     r0,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0017a4  4601              MOV      r1,r0
0017a6  4658              MOV      r0,r11
0017a8  f7fffffe          BL       lc640_write
                  |L1.6060|
;;;1619   		}
;;;1620   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017ac  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0017b0  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0017b4  fb90f0f4          SDIV     r0,r0,r4
;;;1621   		{
;;;1622   		volt_region=0;
;;;1623   		cntrl_stat=1000;
0017b8  f44f727a          MOV      r2,#0x3e8
0017bc  4288              CMP      r0,r1                 ;1620
0017be  dd16              BLE      |L1.6126|
0017c0  f9b83032          LDRSH    r3,[r8,#0x32]         ;1620  ; cntrl_stat
0017c4  2b14              CMP      r3,#0x14              ;1620
0017c6  dc12              BGT      |L1.6126|
0017c8  f898302f          LDRB     r3,[r8,#0x2f]         ;1620  ; volt_region
0017cc  2b01              CMP      r3,#1                 ;1620
0017ce  d10e              BNE      |L1.6126|
0017d0  f8b83078          LDRH     r3,[r8,#0x78]         ;1620  ; volt_region_cnt
0017d4  b95b              CBNZ     r3,|L1.6126|
0017d6  f888602f          STRB     r6,[r8,#0x2f]         ;1622
0017da  f8a82032          STRH     r2,[r8,#0x32]
;;;1624   		cntrl_stat_new=1000;
0017de  f8a82048          STRH     r2,[r8,#0x48]
;;;1625   		cntrl_stat_old=1000;
0017e2  f8a82034          STRH     r2,[r8,#0x34]
;;;1626   		volt_region_cnt=110;
0017e6  f04f036e          MOV      r3,#0x6e
0017ea  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6126|
;;;1627   		}
;;;1628   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017ee  4288              CMP      r0,r1
0017f0  da13              BGE      |L1.6170|
0017f2  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017f6  4290              CMP      r0,r2
0017f8  db0f              BLT      |L1.6170|
0017fa  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017fe  b960              CBNZ     r0,|L1.6170|
001800  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
001804  b948              CBNZ     r0,|L1.6170|
;;;1629   		{
;;;1630   		volt_region=1;
001806  f888a02f          STRB     r10,[r8,#0x2f]
;;;1631   		cntrl_stat=10;
00180a  f8a84032          STRH     r4,[r8,#0x32]
;;;1632   		cntrl_stat_new=10;
00180e  f8a84048          STRH     r4,[r8,#0x48]
;;;1633   		cntrl_stat_old=10;
001812  f8a84034          STRH     r4,[r8,#0x34]
;;;1634   		volt_region_cnt=10;
001816  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6170|
;;;1635   		}
;;;1636   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00181a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00181e  b110              CBZ      r0,|L1.6182|
;;;1637   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001820  2801              CMP      r0,#1
001822  d007              BEQ      |L1.6196|
001824  e00c              B        |L1.6208|
                  |L1.6182|
001826  2314              MOVS     r3,#0x14              ;1636
001828  2200              MOVS     r2,#0                 ;1636
00182a  2164              MOVS     r1,#0x64              ;1636
00182c  20d2              MOVS     r0,#0xd2              ;1636
00182e  f7fffffe          BL       mess_send
001832  e005              B        |L1.6208|
                  |L1.6196|
001834  2314              MOVS     r3,#0x14
001836  2201              MOVS     r2,#1
001838  2164              MOVS     r1,#0x64
00183a  20d2              MOVS     r0,#0xd2
00183c  f7fffffe          BL       mess_send
                  |L1.6208|
;;;1638   	}
;;;1639   
;;;1640   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001840  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001844  280b              CMP      r0,#0xb
001846  d120              BNE      |L1.6282|
;;;1641   	{
;;;1642   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001848  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00184c  280b              CMP      r0,#0xb
00184e  d102              BNE      |L1.6230|
001850  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001854  b908              CBNZ     r0,|L1.6234|
                  |L1.6230|
;;;1643   		{
;;;1644   		vz1_stat_cnt=10;
001856  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6234|
;;;1645   		}
;;;1646   	vz1_stat_cnt--;
00185a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00185e  f1a00001          SUB      r0,r0,#1
001862  b200              SXTH     r0,r0
001864  f8a80076          STRH     r0,[r8,#0x76]
;;;1647   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001868  280a              CMP      r0,#0xa
00186a  d001              BEQ      |L1.6256|
00186c  2809              CMP      r0,#9
00186e  d106              BNE      |L1.6270|
                  |L1.6256|
;;;1648   		{
;;;1649   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001870  a3ee              ADR      r3,|L1.7212|
001872  a2f4              ADR      r2,|L1.7236|
001874  a1f9              ADR      r1,|L1.7260|
001876  a0ff              ADR      r0,|L1.7284|
001878  9700              STR      r7,[sp,#0]
00187a  f7fffffe          BL       show_mess
                  |L1.6270|
;;;1650   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1651   					"      ВКЛЮЧЕН       ",
;;;1652   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1653   					5000);
;;;1654   		}
;;;1655   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00187e  2314              MOVS     r3,#0x14
001880  2200              MOVS     r2,#0
001882  2164              MOVS     r1,#0x64
001884  20d2              MOVS     r0,#0xd2
001886  f7fffffe          BL       mess_send
                  |L1.6282|
;;;1656   	}
;;;1657   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00188a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00188e  280c              CMP      r0,#0xc
001890  d12c              BNE      |L1.6380|
;;;1658   	{
;;;1659   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001892  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001896  280c              CMP      r0,#0xc
001898  d102              BNE      |L1.6304|
00189a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00189e  b908              CBNZ     r0,|L1.6308|
                  |L1.6304|
;;;1660   		{
;;;1661   		vz1_stat_cnt=10;
0018a0  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6308|
;;;1662   		}
;;;1663   	vz1_stat_cnt--;
0018a4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018a8  f1a00001          SUB      r0,r0,#1
0018ac  b200              SXTH     r0,r0
0018ae  f8a80076          STRH     r0,[r8,#0x76]
;;;1664   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018b2  280a              CMP      r0,#0xa
0018b4  d001              BEQ      |L1.6330|
0018b6  2809              CMP      r0,#9
0018b8  d109              BNE      |L1.6350|
                  |L1.6330|
;;;1665   		{
;;;1666   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018ba  f2af232c          ADR      r3,|L1.5776|
0018be  f2af2218          ADR      r2,|L1.5800|
0018c2  f2af2104          ADR      r1,|L1.5824|
0018c6  a0eb              ADR      r0,|L1.7284|
0018c8  9700              STR      r7,[sp,#0]
0018ca  f7fffffe          BL       show_mess
                  |L1.6350|
;;;1667   					"    ЗАБЛОКИРОВАН    ",
;;;1668   					"     НЕИСПРАВНА     ",
;;;1669   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1670   					5000);
;;;1671   		}
;;;1672   	if(sk_stat[0]==1)
0018ce  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018d0  2801              CMP      r0,#1
0018d2  d105              BNE      |L1.6368|
;;;1673   		{
;;;1674   		vz1_stat=vz1sWRK;
0018d4  f8884005          STRB     r4,[r8,#5]
;;;1675   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018d8  210a              MOVS     r1,#0xa
0018da  4658              MOV      r0,r11
0018dc  f7fffffe          BL       lc640_write
                  |L1.6368|
;;;1676   		}
;;;1677   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018e0  2314              MOVS     r3,#0x14
0018e2  2200              MOVS     r2,#0
0018e4  2164              MOVS     r1,#0x64
0018e6  20d2              MOVS     r0,#0xd2
0018e8  f7fffffe          BL       mess_send
                  |L1.6380|
;;;1678   	}
;;;1679   
;;;1680   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018ec  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018f0  280d              CMP      r0,#0xd
0018f2  d129              BNE      |L1.6472|
;;;1681   	{
;;;1682   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018f4  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018f8  280d              CMP      r0,#0xd
0018fa  d102              BNE      |L1.6402|
0018fc  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001900  b908              CBNZ     r0,|L1.6406|
                  |L1.6402|
;;;1683   		{
;;;1684   		vz1_stat_cnt=10;
001902  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6406|
;;;1685   		}
;;;1686   	vz1_stat_cnt--;
001906  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00190a  f1a00001          SUB      r0,r0,#1
00190e  b200              SXTH     r0,r0
001910  f8a80076          STRH     r0,[r8,#0x76]
;;;1687   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001914  280a              CMP      r0,#0xa
001916  d001              BEQ      |L1.6428|
001918  2809              CMP      r0,#9
00191a  d106              BNE      |L1.6442|
                  |L1.6428|
;;;1688   		{
;;;1689   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
00191c  a3db              ADR      r3,|L1.7308|
00191e  a2e1              ADR      r2,|L1.7332|
001920  a1e6              ADR      r1,|L1.7356|
001922  a0d4              ADR      r0,|L1.7284|
001924  9700              STR      r7,[sp,#0]
001926  f7fffffe          BL       show_mess
                  |L1.6442|
;;;1690   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1691   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1692   					"*   ТУМБЛЕРА!!!     ",
;;;1693   					5000);
;;;1694   		}
;;;1695   	if(sk_stat[1]==1)
00192a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00192c  2801              CMP      r0,#1
00192e  d105              BNE      |L1.6460|
;;;1696   		{
;;;1697   		vz1_stat=vz1sWRK;
001930  f8884005          STRB     r4,[r8,#5]
;;;1698   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001934  210a              MOVS     r1,#0xa
001936  4658              MOV      r0,r11
001938  f7fffffe          BL       lc640_write
                  |L1.6460|
;;;1699   		}
;;;1700   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00193c  2314              MOVS     r3,#0x14
00193e  2200              MOVS     r2,#0
001940  2164              MOVS     r1,#0x64
001942  20d2              MOVS     r0,#0xd2
001944  f7fffffe          BL       mess_send
                  |L1.6472|
;;;1701   	}
;;;1702   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001948  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00194c  280e              CMP      r0,#0xe
00194e  d12d              BNE      |L1.6572|
;;;1703   	{
;;;1704   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001950  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001954  280e              CMP      r0,#0xe
001956  d102              BNE      |L1.6494|
001958  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00195c  b908              CBNZ     r0,|L1.6498|
                  |L1.6494|
;;;1705   		{
;;;1706   		vz1_stat_cnt=10;
00195e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6498|
;;;1707   		}
;;;1708   	vz1_stat_cnt--;
001962  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001966  f1a00001          SUB      r0,r0,#1
00196a  b200              SXTH     r0,r0
00196c  f8a80076          STRH     r0,[r8,#0x76]
;;;1709   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001970  280a              CMP      r0,#0xa
001972  d001              BEQ      |L1.6520|
001974  2809              CMP      r0,#9
001976  d109              BNE      |L1.6540|
                  |L1.6520|
;;;1710   		{
;;;1711   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001978  f2af2388          ADR      r3,|L1.5876|
00197c  f2af2274          ADR      r2,|L1.5900|
001980  f2af2160          ADR      r1,|L1.5924|
001984  a0d3              ADR      r0,|L1.7380|
001986  9700              STR      r7,[sp,#0]
001988  f7fffffe          BL       show_mess
                  |L1.6540|
;;;1712   					"      ТУМБЛЕР       ",
;;;1713   					"     ВЫСОКОГО       ",
;;;1714   					"    НАПРЯЖЕНИЯ      ",
;;;1715   					5000);
;;;1716   		}
;;;1717   	if(sk_stat[1]==0)
00198c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00198e  b938              CBNZ     r0,|L1.6560|
;;;1718   		{
;;;1719   		vz1_stat=vz1sOFF;
001990  f8886005          STRB     r6,[r8,#5]
;;;1720   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001994  2100              MOVS     r1,#0
001996  4658              MOV      r0,r11
001998  f7fffffe          BL       lc640_write
;;;1721   		vz_stop();
00199c  f7fffffe          BL       vz_stop
                  |L1.6560|
;;;1722   
;;;1723   		}
;;;1724   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0019a0  2314              MOVS     r3,#0x14
0019a2  2201              MOVS     r2,#1
0019a4  2164              MOVS     r1,#0x64
0019a6  20d2              MOVS     r0,#0xd2
0019a8  f7fffffe          BL       mess_send
                  |L1.6572|
;;;1725   	}
;;;1726   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019ac  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1727   	{
;;;1728   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1729   		{
;;;1730   		vz1_stat_cnt=10;
;;;1731   		}
;;;1732   	vz1_stat_cnt--;
;;;1733   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1734   		{
;;;1735   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019b0  f64037b8          MOV      r7,#0xbb8
0019b4  280f              CMP      r0,#0xf               ;1726
0019b6  d138              BNE      |L1.6698|
0019b8  f8980006          LDRB     r0,[r8,#6]            ;1728  ; vz1_stat_old
0019bc  280f              CMP      r0,#0xf               ;1728
0019be  d102              BNE      |L1.6598|
0019c0  f8b80076          LDRH     r0,[r8,#0x76]         ;1728  ; vz1_stat_cnt
0019c4  b908              CBNZ     r0,|L1.6602|
                  |L1.6598|
0019c6  f8a84076          STRH     r4,[r8,#0x76]         ;1730
                  |L1.6602|
0019ca  f8b80076          LDRH     r0,[r8,#0x76]         ;1732  ; vz1_stat_cnt
0019ce  f1a00001          SUB      r0,r0,#1              ;1732
0019d2  b200              SXTH     r0,r0                 ;1732
0019d4  f8a80076          STRH     r0,[r8,#0x76]         ;1732
0019d8  280a              CMP      r0,#0xa               ;1733
0019da  d001              BEQ      |L1.6624|
0019dc  2809              CMP      r0,#9                 ;1733
0019de  d106              BNE      |L1.6638|
                  |L1.6624|
0019e0  a3c2              ADR      r3,|L1.7404|
0019e2  a2c8              ADR      r2,|L1.7428|
0019e4  a1cd              ADR      r1,|L1.7452|
0019e6  a0d3              ADR      r0,|L1.7476|
0019e8  9700              STR      r7,[sp,#0]
0019ea  f7fffffe          BL       show_mess
                  |L1.6638|
;;;1736   					"       ЗАРЯД        ",
;;;1737   					"      УСПЕШНО       ",
;;;1738   					"     ЗАВЕРШЕН       ",
;;;1739   					3000);
;;;1740   		}
;;;1741   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019ee  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019f2  2806              CMP      r0,#6
0019f4  d001              BEQ      |L1.6650|
0019f6  2805              CMP      r0,#5
0019f8  d109              BNE      |L1.6670|
                  |L1.6650|
;;;1742   		{
;;;1743   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019fa  f2af3308          ADR      r3,|L1.5876|
0019fe  f2af22f4          ADR      r2,|L1.5900|
001a02  f2af21e0          ADR      r1,|L1.5924|
001a06  a0d1              ADR      r0,|L1.7500|
001a08  9700              STR      r7,[sp,#0]
001a0a  f7fffffe          BL       show_mess
                  |L1.6670|
;;;1744   					"      ТУМБЛЕР       ",
;;;1745   					"     ВЫСОКОГО       ",
;;;1746   					"    НАПРЯЖЕНИЯ      ",
;;;1747   					3000);
;;;1748   		}
;;;1749   	if(sk_stat[1]==0)
001a0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a10  b928              CBNZ     r0,|L1.6686|
;;;1750   		{
;;;1751   		vz1_stat=vz1sOFF;
001a12  f8886005          STRB     r6,[r8,#5]
;;;1752   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a16  2100              MOVS     r1,#0
001a18  4658              MOV      r0,r11
001a1a  f7fffffe          BL       lc640_write
                  |L1.6686|
;;;1753   		}
;;;1754   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a1e  2314              MOVS     r3,#0x14
001a20  2200              MOVS     r2,#0
001a22  2164              MOVS     r1,#0x64
001a24  20d2              MOVS     r0,#0xd2
001a26  f7fffffe          BL       mess_send
                  |L1.6698|
;;;1755   	}
;;;1756   
;;;1757   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a2a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a2e  2810              CMP      r0,#0x10
001a30  d138              BNE      |L1.6820|
;;;1758   	{
;;;1759   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a32  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a36  2810              CMP      r0,#0x10
001a38  d102              BNE      |L1.6720|
001a3a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a3e  b908              CBNZ     r0,|L1.6724|
                  |L1.6720|
;;;1760   		{
;;;1761   		vz1_stat_cnt=10;
001a40  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6724|
;;;1762   		}
;;;1763   	vz1_stat_cnt--;
001a44  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a48  f1a00001          SUB      r0,r0,#1
001a4c  b200              SXTH     r0,r0
001a4e  f8a80076          STRH     r0,[r8,#0x76]
;;;1764   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a52  280a              CMP      r0,#0xa
001a54  d001              BEQ      |L1.6746|
001a56  2809              CMP      r0,#9
001a58  d106              BNE      |L1.6760|
                  |L1.6746|
;;;1765   		{
;;;1766   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a5a  a3c2              ADR      r3,|L1.7524|
001a5c  a2c7              ADR      r2,|L1.7548|
001a5e  a1af              ADR      r1,|L1.7452|
001a60  a0b4              ADR      r0,|L1.7476|
001a62  9700              STR      r7,[sp,#0]
001a64  f7fffffe          BL       show_mess
                  |L1.6760|
;;;1767   					"       ЗАРЯД        ",
;;;1768   					"     ПРЕКРАЩЕН      ",
;;;1769   					"                    ",
;;;1770   					3000);
;;;1771   		}
;;;1772   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a68  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a6c  2806              CMP      r0,#6
001a6e  d001              BEQ      |L1.6772|
001a70  2805              CMP      r0,#5
001a72  d109              BNE      |L1.6792|
                  |L1.6772|
;;;1773   		{
;;;1774   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a74  f2af3384          ADR      r3,|L1.5876|
001a78  f2af3270          ADR      r2,|L1.5900|
001a7c  f2af315c          ADR      r1,|L1.5924|
001a80  a0b2              ADR      r0,|L1.7500|
001a82  9700              STR      r7,[sp,#0]
001a84  f7fffffe          BL       show_mess
                  |L1.6792|
;;;1775   					"      ТУМБЛЕР       ",
;;;1776   					"     ВЫСОКОГО       ",
;;;1777   					"    НАПРЯЖЕНИЯ      ",
;;;1778   					3000);
;;;1779   		}
;;;1780   	if(sk_stat[1]==0)
001a88  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a8a  b928              CBNZ     r0,|L1.6808|
;;;1781   		{
;;;1782   		vz1_stat=vz1sOFF;
001a8c  f8886005          STRB     r6,[r8,#5]
;;;1783   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a90  2100              MOVS     r1,#0
001a92  4658              MOV      r0,r11
001a94  f7fffffe          BL       lc640_write
                  |L1.6808|
;;;1784   		}
;;;1785   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a98  2314              MOVS     r3,#0x14
001a9a  2200              MOVS     r2,#0
001a9c  2164              MOVS     r1,#0x64
001a9e  20d2              MOVS     r0,#0xd2
001aa0  f7fffffe          BL       mess_send
                  |L1.6820|
;;;1786   	}
;;;1787   
;;;1788   vz1_stat_old=vz1_stat;
001aa4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001aa8  f8880006          STRB     r0,[r8,#6]
;;;1789   
;;;1790   
;;;1791   
;;;1792   }
001aac  e8bd8ff8          POP      {r3-r11,pc}
;;;1793   
                          ENDP

                  vz1_start PROC
;;;1795   //старт уравнительног заряда
;;;1796   char vz1_start(char hour)
001ab0  b510              PUSH     {r4,lr}
;;;1797   {          
;;;1798   char out;
;;;1799   out=0;
001ab2  f04f0000          MOV      r0,#0
;;;1800   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001ab6  49b7              LDR      r1,|L1.7572|
001ab8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001abc  2a00              CMP      r2,#0
001abe  d110              BNE      |L1.6882|
001ac0  4ab5              LDR      r2,|L1.7576|
001ac2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001ac4  2a01              CMP      r2,#1
001ac6  d00c              BEQ      |L1.6882|
001ac8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001aca  2a00              CMP      r2,#0
001acc  d109              BNE      |L1.6882|
;;;1801   	{
;;;1802   	if(vz1_stat==vz1sOFF)
;;;1803   		{
;;;1804   		vz1_stat=vz1sSTEP1;
001ace  f04f0001          MOV      r0,#1
001ad2  7148              STRB     r0,[r1,#5]
;;;1805   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001ad4  4601              MOV      r1,r0
001ad6  f44f70c9          MOV      r0,#0x192
001ada  f7fffffe          BL       lc640_write
;;;1806   		out=1;
001ade  f04f0001          MOV      r0,#1
                  |L1.6882|
;;;1807   		
;;;1808   		}
;;;1809   /*	spc_stat=spcVZ;
;;;1810   	__ee_spc_stat=spcVZ; 
;;;1811   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1812   	vz_cnt_h=hour;
;;;1813   	__ee_vz_cnt=hour*60;
;;;1814   	if(hour==0)__ee_vz_cnt=30;
;;;1815   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1816   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1817   	vz_cnt_h_=0;
;;;1818   	vz_cnt_s=0;
;;;1819   	vz_cnt_s_=0;
;;;1820   	
;;;1821   		*/
;;;1822   	}
;;;1823   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1824   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1825   //plazma=out;	
;;;1826   return out;
;;;1827   }
001ae2  bd10              POP      {r4,pc}
;;;1828   
                          ENDP

                  vz1_stop PROC
;;;1830   //стоп уравнительног заряда
;;;1831   void vz1_stop(void)
001ae4  48ab              LDR      r0,|L1.7572|
;;;1832   {
;;;1833   if(vz1_stat!=vz1sOFF)
001ae6  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ae8  2900              CMP      r1,#0
001aea  d006              BEQ      |L1.6906|
;;;1834   	{
;;;1835   	vz1_stat=vz1sSTOP;
001aec  f04f0110          MOV      r1,#0x10
001af0  7141              STRB     r1,[r0,#5]
;;;1836   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001af2  f44f70c9          MOV      r0,#0x192
001af6  f7ffbffe          B.W      lc640_write
                  |L1.6906|
;;;1837   	}
;;;1838   }
001afa  4770              BX       lr
;;;1839   
                          ENDP

                  vz2_drv PROC
;;;1841   //драйвер формовочного заряда
;;;1842   void vz2_drv(void)
001afc  e92d4ff8          PUSH     {r3-r11,lr}
;;;1843   {
;;;1844   
;;;1845   if(vz2_stat==vz2sSTEP1)
001b00  4ea4              LDR      r6,|L1.7572|
;;;1846   	{
;;;1847   	if(vz2_stat_old!=vz2_stat)
;;;1848   		{
;;;1849   		vz2_stat_cnt=5;
;;;1850   		}
;;;1851   	if(vz2_stat_cnt)
;;;1852   		{
;;;1853   		vz2_stat_cnt--;
;;;1854   		if(vz2_stat_cnt==0)
;;;1855   			{
;;;1856   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1857   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1858   			}
;;;1859   		}
;;;1860   	if(sk_stat[0]==1)
001b02  4da6              LDR      r5,|L1.7580|
001b04  79f0              LDRB     r0,[r6,#7]            ;1845  ; vz2_stat
001b06  2801              CMP      r0,#1                 ;1845
001b08  d138              BNE      |L1.7036|
001b0a  7a30              LDRB     r0,[r6,#8]            ;1847  ; vz2_stat_old
001b0c  2801              CMP      r0,#1                 ;1847
001b0e  d003              BEQ      |L1.6936|
001b10  f04f0005          MOV      r0,#5                 ;1849
001b14  f8a6007a          STRH     r0,[r6,#0x7a]         ;1849
                  |L1.6936|
001b18  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1851  ; vz2_stat_cnt
001b1c  b168              CBZ      r0,|L1.6970|
001b1e  f1a00001          SUB      r0,r0,#1              ;1853
001b22  b200              SXTH     r0,r0                 ;1853
001b24  f8a6007a          STRH     r0,[r6,#0x7a]         ;1853
001b28  b938              CBNZ     r0,|L1.6970|
001b2a  f04f000c          MOV      r0,#0xc               ;1856
001b2e  71f0              STRB     r0,[r6,#7]            ;1856
001b30  4601              MOV      r1,r0                 ;1857
001b32  f44f70ca          MOV      r0,#0x194             ;1857
001b36  f7fffffe          BL       lc640_write
                  |L1.6970|
001b3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b3c  2801              CMP      r0,#1
001b3e  d117              BNE      |L1.7024|
;;;1861   		{
;;;1862   		vz2_stat=vz2sSTEP2;
001b40  f04f0002          MOV      r0,#2
001b44  71f0              STRB     r0,[r6,#7]
;;;1863   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b46  4601              MOV      r1,r0
001b48  f44f70ca          MOV      r0,#0x194
001b4c  f7fffffe          BL       lc640_write
;;;1864   		tree_up(iVZ2_STEP2_2,1,0,0);
001b50  2300              MOVS     r3,#0
001b52  461a              MOV      r2,r3
001b54  2101              MOVS     r1,#1
001b56  20e3              MOVS     r0,#0xe3
001b58  f7fffffe          BL       tree_up
;;;1865   		tree_up(iVZ2_STEP2_1,0,0,0);
001b5c  2300              MOVS     r3,#0
001b5e  461a              MOV      r2,r3
001b60  4619              MOV      r1,r3
001b62  20e2              MOVS     r0,#0xe2
001b64  f7fffffe          BL       tree_up
;;;1866   		ret(1200);
001b68  f44f6096          MOV      r0,#0x4b0
001b6c  f7fffffe          BL       ||ret||
                  |L1.7024|
;;;1867   		}
;;;1868   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b70  2314              MOVS     r3,#0x14
001b72  2200              MOVS     r2,#0
001b74  2164              MOVS     r1,#0x64
001b76  20d2              MOVS     r0,#0xd2
001b78  f7fffffe          BL       mess_send
                  |L1.7036|
;;;1869   	}
;;;1870   
;;;1871   if(vz2_stat==vz2sSTEP2)
001b7c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b7e  2802              CMP      r0,#2
001b80  d119              BNE      |L1.7094|
;;;1872   	{
;;;1873   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b82  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b84  2802              CMP      r0,#2
001b86  d102              BNE      |L1.7054|
001b88  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b8c  b918              CBNZ     r0,|L1.7062|
                  |L1.7054|
;;;1874   		{
;;;1875   		vz2_stat_cnt=15;
001b8e  f04f000f          MOV      r0,#0xf
001b92  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7062|
;;;1876   		}
;;;1877   	vz2_stat_cnt--;
001b96  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b9a  f1a00001          SUB      r0,r0,#1
001b9e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1878   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ba2  f04f0314          MOV      r3,#0x14
001ba6  f04f0200          MOV      r2,#0
001baa  f04f0164          MOV      r1,#0x64
001bae  f04f00d2          MOV      r0,#0xd2
001bb2  f7fffffe          BL       mess_send
                  |L1.7094|
;;;1879   	}
;;;1880   
;;;1881   if(vz2_stat==vz2sSTEP3)
001bb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1882   	{
;;;1883   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1884   		{
;;;1885   		vz2_stat_cnt=10;
001bb8  240a              MOVS     r4,#0xa
001bba  2700              MOVS     r7,#0
;;;1886   		cntrl_stat=0;
;;;1887   		cntrl_stat_new=0;
;;;1888   		cntrl_stat_old=0;
;;;1889   		}
;;;1890   	vz2_stat_cnt--;
;;;1891   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1892   		{
;;;1893   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bbc  f2413888          MOV      r8,#0x1388
001bc0  2803              CMP      r0,#3                 ;1881
001bc2  d131              BNE      |L1.7208|
001bc4  7a30              LDRB     r0,[r6,#8]            ;1883  ; vz2_stat_old
001bc6  2803              CMP      r0,#3                 ;1883
001bc8  d102              BNE      |L1.7120|
001bca  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1883  ; vz2_stat_cnt
001bce  b928              CBNZ     r0,|L1.7132|
                  |L1.7120|
001bd0  f8a6407a          STRH     r4,[r6,#0x7a]         ;1885
001bd4  8677              STRH     r7,[r6,#0x32]         ;1886
001bd6  f8a67048          STRH     r7,[r6,#0x48]         ;1887
001bda  86b7              STRH     r7,[r6,#0x34]         ;1888
                  |L1.7132|
001bdc  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1890  ; vz2_stat_cnt
001be0  f1a00001          SUB      r0,r0,#1              ;1890
001be4  b200              SXTH     r0,r0                 ;1890
001be6  f8a6007a          STRH     r0,[r6,#0x7a]         ;1890
001bea  280a              CMP      r0,#0xa               ;1891
001bec  d001              BEQ      |L1.7154|
001bee  2809              CMP      r0,#9                 ;1891
001bf0  d10b              BNE      |L1.7178|
                  |L1.7154|
001bf2  f2af5300          ADR      r3,|L1.5876|
001bf6  f2af42ec          ADR      r2,|L1.5900|
001bfa  f2af41d8          ADR      r1,|L1.5924|
001bfe  f2af40c4          ADR      r0,|L1.5948|
001c02  f8cd8000          STR      r8,[sp,#0]
001c06  f7fffffe          BL       show_mess
                  |L1.7178|
;;;1894   					"      ТУМБЛЕР       ",
;;;1895   					"     ВЫСОКОГО       ",
;;;1896   					"    НАПРЯЖЕНИЯ      ",
;;;1897   					5000);
;;;1898   		}
;;;1899   	if(sk_stat[1]==1)
001c0a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c0c  2801              CMP      r0,#1
001c0e  d10c              BNE      |L1.7210|
;;;1900   		{
;;;1901   		vz2_stat=vz2sWRK1;
001c10  71f4              STRB     r4,[r6,#7]
;;;1902   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001c12  210a              MOVS     r1,#0xa
001c14  f44f70ca          MOV      r0,#0x194
001c18  f7fffffe          BL       lc640_write
;;;1903   		volt_region=1;
001c1c  f04f0001          MOV      r0,#1
001c20  f886002f          STRB     r0,[r6,#0x2f]
;;;1904   		cntrl_stat=0;
001c24  8677              STRH     r7,[r6,#0x32]
;;;1905   		cntrl_stat_new=0;
001c26  e0bb              B        |L1.7584|
                  |L1.7208|
001c28  e0c3              B        |L1.7602|
                  |L1.7210|
001c2a  e0bc              B        |L1.7590|
                  |L1.7212|
001c2c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c30  c720c2c5
001c34  cdd2c8cb
001c38  dfd6c8  
001c3b  c8212120          DCB      200,"!!  ",0
001c3f  2000    
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c48  2020c2ca
001c4c  cbded7c5
001c50  cd202020
001c54  20202020
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c60  c520ccce
001c64  c6c5d220
001c68  c1dbd2dc
001c6c  20202020          DCB      "    ",0
001c70  00      
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c78  cdc8d2c5
001c7c  cbdccddb
001c80  c920c7  
001c83  c0d0dfc4          DCB      192,208,223,196," ",0
001c87  2000    
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c90  d2d3ccc1
001c94  cbc5d0c0
001c98  21212120
001c9c  20202020
001ca0  00      
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001ca8  d1cbc520
001cac  c2cacbde
001cb0  d7c5cd  
001cb3  c8df2020          DCB      200,223,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001cc0  c4c5d220
001cc4  cfd0cec4
001cc8  cecbc6  
001ccb  c5cd2020          DCB      197,205,"   ",0
001ccf  2000    
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cd8  20c2dbca
001cdc  cbded7c8
001ce0  d2c52020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cf0  20c7c0c2
001cf4  c5d0d8c5
001cf8  cd202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d08  2020d3d1
001d0c  cfc5d8cd
001d10  ce202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d20  202020c7
001d24  c0d0dfc4
001d28  20202020
001d2c  20202020
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d38  d0c0c2cd
001d3c  c8d2c5cb
001d40  dccddbc9
001d44  20202020          DCB      "    ",0
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d50  20c2dbca
001d54  cbded7c8
001d58  d2c52020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "                    ",0
001d68  20202020
001d6c  20202020
001d70  20202020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
001d7c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d80  20cfd0c5
001d84  cad0c0d9
001d88  c5cd2020
001d8c  20202020
001d90  00      
001d91  00                DCB      0
001d92  00                DCB      0
001d93  00                DCB      0
                  |L1.7572|
                          DCD      ||area_number.18||
                  |L1.7576|
                          DCD      speedChrgBlckStat
                  |L1.7580|
                          DCD      sk_stat
                  |L1.7584|
001da0  f8a67048          STRH     r7,[r6,#0x48]
;;;1906   		cntrl_stat_old=0;
001da4  86b7              STRH     r7,[r6,#0x34]
                  |L1.7590|
;;;1907   		}
;;;1908   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001da6  2314              MOVS     r3,#0x14
001da8  2200              MOVS     r2,#0
001daa  2164              MOVS     r1,#0x64
001dac  20d2              MOVS     r0,#0xd2
001dae  f7fffffe          BL       mess_send
                  |L1.7602|
;;;1909   	}
;;;1910   
;;;1911   if(vz2_stat==vz2sWRK1)
001db2  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1912   	{
;;;1913   
;;;1914   	if(vz2_stat_old!=vz2_stat)
;;;1915   		{
;;;1916   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001db4  f8df940c          LDR      r9,|L1.8644|
;;;1917   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1918   		vz2_up_cnt=0L;
;;;1919   
;;;1920   		}
;;;1921   	vz2_wrk_cnt--;
;;;1922   	vz2_up_cnt++;
;;;1923   
;;;1924   	if(vz2_wrk_cnt==0)
;;;1925   		{
;;;1926   		vz2_stat=vz2sWRK2;
;;;1927   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1928   		}
;;;1929   	if(sk_stat[0]==0)
;;;1930   		{
;;;1931   		vz2_stat=vz2sERR2;
;;;1932   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1933   		}
;;;1934   	if(sk_stat[1]==0)
;;;1935   		{
;;;1936   		vz2_stat=vz2sERR3;
;;;1937   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1938   		}
;;;1939   	//if(abs(out_U-FZ_U1)<10)
;;;1940   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1941   		{
;;;1942   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1943   			{
;;;1944   			if(vz2_stat_ph2_cnt)
;;;1945   				{
;;;1946   				vz2_stat_ph2_cnt--;
;;;1947   				if(vz2_stat_ph2_cnt==0)
;;;1948   					{
;;;1949   					vz2_stat=vz2sWRK2;
;;;1950   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1951   					}
;;;1952   				}
;;;1953   			}
;;;1954   		else
;;;1955   			{
;;;1956   			vz2_stat_ph2_cnt=60;
;;;1957   			}
;;;1958   		}
;;;1959   	else
;;;1960   		{
;;;1961   		vz2_stat_ph2_cnt=60;
;;;1962   		}
;;;1963   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1964   		{
;;;1965   		volt_region=0;
;;;1966   		cntrl_stat=1000;
001db8  f44f7b7a          MOV      r11,#0x3e8
001dbc  f04f0a0b          MOV      r10,#0xb              ;1926
001dc0  280a              CMP      r0,#0xa               ;1911
001dc2  d17d              BNE      |L1.7872|
001dc4  7a30              LDRB     r0,[r6,#8]            ;1914  ; vz2_stat_old
001dc6  280a              CMP      r0,#0xa               ;1914
001dc8  d00a              BEQ      |L1.7648|
001dca  48ff              LDR      r0,|L1.8648|
001dcc  f44f6161          MOV      r1,#0xe10             ;1916
001dd0  f9b00000          LDRSH    r0,[r0,#0]            ;1916  ; FZ_T1
001dd4  fb00f001          MUL      r0,r0,r1              ;1916
001dd8  f8c90048          STR      r0,[r9,#0x48]         ;1916  ; vz2_wrk_cnt
001ddc  f8c9704c          STR      r7,[r9,#0x4c]         ;1918  ; vz2_up_cnt
                  |L1.7648|
001de0  f8d90048          LDR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001de4  f1a00001          SUB      r0,r0,#1              ;1921
001de8  f8c90048          STR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001dec  f8d9104c          LDR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001df0  f1010101          ADD      r1,r1,#1              ;1922
001df4  f8c9104c          STR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001df8  b930              CBNZ     r0,|L1.7688|
001dfa  f886a007          STRB     r10,[r6,#7]           ;1926
001dfe  210b              MOVS     r1,#0xb               ;1927
001e00  f44f70ca          MOV      r0,#0x194             ;1927
001e04  f7fffffe          BL       lc640_write
                  |L1.7688|
001e08  7828              LDRB     r0,[r5,#0]            ;1929  ; sk_stat
001e0a  b938              CBNZ     r0,|L1.7708|
001e0c  f04f000d          MOV      r0,#0xd               ;1931
001e10  71f0              STRB     r0,[r6,#7]            ;1931
001e12  4601              MOV      r1,r0                 ;1932
001e14  f44f70ca          MOV      r0,#0x194             ;1932
001e18  f7fffffe          BL       lc640_write
                  |L1.7708|
001e1c  7868              LDRB     r0,[r5,#1]            ;1934  ; sk_stat
001e1e  b938              CBNZ     r0,|L1.7728|
001e20  f04f000e          MOV      r0,#0xe               ;1936
001e24  71f0              STRB     r0,[r6,#7]            ;1936
001e26  4601              MOV      r1,r0                 ;1937
001e28  f44f70ca          MOV      r0,#0x194             ;1937
001e2c  f7fffffe          BL       lc640_write
                  |L1.7728|
001e30  48e6              LDR      r0,|L1.8652|
001e32  223c              MOVS     r2,#0x3c              ;1956
001e34  f9b01000          LDRSH    r1,[r0,#0]            ;1940  ; out_U
001e38  48e5              LDR      r0,|L1.8656|
001e3a  f9b00000          LDRSH    r0,[r0,#0]            ;1940  ; FZ_U1
001e3e  f100031e          ADD      r3,r0,#0x1e           ;1940
001e42  4299              CMP      r1,r3                 ;1940
001e44  da20              BGE      |L1.7816|
001e46  380a              SUBS     r0,r0,#0xa            ;1940
001e48  4281              CMP      r1,r0                 ;1940
001e4a  dd1d              BLE      |L1.7816|
001e4c  48e1              LDR      r0,|L1.8660|
001e4e  49e2              LDR      r1,|L1.8664|
001e50  f9b00000          LDRSH    r0,[r0,#0]            ;1942  ; Ib_ips_termokompensat
001e54  f9b11000          LDRSH    r1,[r1,#0]            ;1942  ; FZ_ISW12
001e58  fb90f0f4          SDIV     r0,r0,r4              ;1942
001e5c  4288              CMP      r0,r1                 ;1942
001e5e  da10              BGE      |L1.7810|
001e60  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1944  ; vz2_stat_ph2_cnt
001e64  b190              CBZ      r0,|L1.7820|
001e66  f1a00001          SUB      r0,r0,#1              ;1946
001e6a  b200              SXTH     r0,r0                 ;1946
001e6c  f8a6007c          STRH     r0,[r6,#0x7c]         ;1946
001e70  b960              CBNZ     r0,|L1.7820|
001e72  f886a007          STRB     r10,[r6,#7]           ;1949
001e76  210b              MOVS     r1,#0xb               ;1950
001e78  f44f70ca          MOV      r0,#0x194             ;1950
001e7c  f7fffffe          BL       lc640_write
001e80  e004              B        |L1.7820|
                  |L1.7810|
001e82  f8a6207c          STRH     r2,[r6,#0x7c]         ;1956
001e86  e001              B        |L1.7820|
                  |L1.7816|
001e88  f8a6207c          STRH     r2,[r6,#0x7c]         ;1961
                  |L1.7820|
001e8c  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1963  ; Ibmax
001e90  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1963  ; IZMAX_
001e94  fb90f0f4          SDIV     r0,r0,r4              ;1963
001e98  4288              CMP      r0,r1                 ;1963
001e9a  dd18              BLE      |L1.7886|
001e9c  f9b62032          LDRSH    r2,[r6,#0x32]         ;1963  ; cntrl_stat
001ea0  2a14              CMP      r2,#0x14              ;1963
001ea2  dc14              BGT      |L1.7886|
001ea4  f896202f          LDRB     r2,[r6,#0x2f]         ;1963  ; volt_region
001ea8  2a01              CMP      r2,#1                 ;1963
001eaa  d110              BNE      |L1.7886|
001eac  f8b62078          LDRH     r2,[r6,#0x78]         ;1963  ; volt_region_cnt
001eb0  b96a              CBNZ     r2,|L1.7886|
001eb2  f886702f          STRB     r7,[r6,#0x2f]         ;1965
001eb6  f8a6b032          STRH     r11,[r6,#0x32]
;;;1967   		cntrl_stat_new=1000;
001eba  f8a6b048          STRH     r11,[r6,#0x48]
;;;1968   		cntrl_stat_old=1000;
001ebe  e000              B        |L1.7874|
                  |L1.7872|
001ec0  e02e              B        |L1.7968|
                  |L1.7874|
001ec2  f8a6b034          STRH     r11,[r6,#0x34]
;;;1969   		volt_region_cnt=110;
001ec6  f04f026e          MOV      r2,#0x6e
001eca  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7886|
;;;1970   		}
;;;1971   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001ece  4288              CMP      r0,r1
001ed0  da13              BGE      |L1.7930|
001ed2  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ed6  4558              CMP      r0,r11
001ed8  db0f              BLT      |L1.7930|
001eda  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ede  b960              CBNZ     r0,|L1.7930|
001ee0  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001ee4  b948              CBNZ     r0,|L1.7930|
;;;1972   		{
;;;1973   		volt_region=1;
001ee6  f04f0001          MOV      r0,#1
001eea  f886002f          STRB     r0,[r6,#0x2f]
;;;1974   		cntrl_stat=10;
001eee  8674              STRH     r4,[r6,#0x32]
;;;1975   		cntrl_stat_new=10;
001ef0  f8a64048          STRH     r4,[r6,#0x48]
;;;1976   		cntrl_stat_old=10;
001ef4  86b4              STRH     r4,[r6,#0x34]
;;;1977   		volt_region_cnt=10;
001ef6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7930|
;;;1978   		}
;;;1979   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001efa  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001efe  b110              CBZ      r0,|L1.7942|
;;;1980   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f00  2801              CMP      r0,#1
001f02  d007              BEQ      |L1.7956|
001f04  e00c              B        |L1.7968|
                  |L1.7942|
001f06  2314              MOVS     r3,#0x14              ;1979
001f08  2200              MOVS     r2,#0                 ;1979
001f0a  2164              MOVS     r1,#0x64              ;1979
001f0c  20d2              MOVS     r0,#0xd2              ;1979
001f0e  f7fffffe          BL       mess_send
001f12  e005              B        |L1.7968|
                  |L1.7956|
001f14  2314              MOVS     r3,#0x14
001f16  2201              MOVS     r2,#1
001f18  2164              MOVS     r1,#0x64
001f1a  20d2              MOVS     r0,#0xd2
001f1c  f7fffffe          BL       mess_send
                  |L1.7968|
;;;1981   	}
;;;1982   
;;;1983   if(vz2_stat==vz2sWRK2)
001f20  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f22  280b              CMP      r0,#0xb
001f24  d17f              BNE      |L1.8230|
;;;1984   	{
;;;1985   	if(vz2_stat_old!=vz2_stat)
001f26  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f28  280b              CMP      r0,#0xb
001f2a  d008              BEQ      |L1.7998|
;;;1986   		{
;;;1987   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f2c  48ab              LDR      r0,|L1.8668|
001f2e  f44f6161          MOV      r1,#0xe10
001f32  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f36  fb00f001          MUL      r0,r0,r1
001f3a  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7998|
;;;1988   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1989   		//vz2_up_cnt=0L;
;;;1990   		}
;;;1991   	vz2_wrk_cnt--;
001f3e  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f42  f1a00001          SUB      r0,r0,#1
001f46  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1992   	vz2_up_cnt++;
001f4a  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f4e  f1010101          ADD      r1,r1,#1
001f52  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1993   
;;;1994   	if(vz2_wrk_cnt==0)
001f56  b950              CBNZ     r0,|L1.8046|
;;;1995   		{
;;;1996   		vz2_stat=vz2sFINE;
001f58  f04f0012          MOV      r0,#0x12
001f5c  71f0              STRB     r0,[r6,#7]
;;;1997   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f5e  4601              MOV      r1,r0
001f60  f44f70ca          MOV      r0,#0x194
001f64  f7fffffe          BL       lc640_write
;;;1998   		fz_mem_hndl(0);
001f68  2000              MOVS     r0,#0
001f6a  f7fffffe          BL       fz_mem_hndl
                  |L1.8046|
;;;1999   		}
;;;2000   	if(sk_stat[0]==0)
001f6e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f70  b938              CBNZ     r0,|L1.8066|
;;;2001   		{
;;;2002   		vz2_stat=vz2sERR5;
001f72  f04f0010          MOV      r0,#0x10
001f76  71f0              STRB     r0,[r6,#7]
;;;2003   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f78  4601              MOV      r1,r0
001f7a  f44f70ca          MOV      r0,#0x194
001f7e  f7fffffe          BL       lc640_write
                  |L1.8066|
;;;2004   		}
;;;2005   	if(sk_stat[1]==0)
001f82  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f84  b938              CBNZ     r0,|L1.8086|
;;;2006   		{
;;;2007   		vz2_stat=vz2sERR6;
001f86  f04f0011          MOV      r0,#0x11
001f8a  71f0              STRB     r0,[r6,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f8c  4601              MOV      r1,r0
001f8e  f44f70ca          MOV      r0,#0x194
001f92  f7fffffe          BL       lc640_write
                  |L1.8086|
;;;2009   		}
;;;2010   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f96  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f9a  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f9e  fb90f0f4          SDIV     r0,r0,r4
001fa2  4288              CMP      r0,r1
001fa4  dd16              BLE      |L1.8148|
001fa6  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001faa  2a14              CMP      r2,#0x14
001fac  dc12              BGT      |L1.8148|
001fae  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001fb2  2a01              CMP      r2,#1
001fb4  d10e              BNE      |L1.8148|
001fb6  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fba  b95a              CBNZ     r2,|L1.8148|
;;;2011   		{
;;;2012   		volt_region=0;
001fbc  f886702f          STRB     r7,[r6,#0x2f]
;;;2013   		cntrl_stat=1000;
001fc0  f8a6b032          STRH     r11,[r6,#0x32]
;;;2014   		cntrl_stat_new=1000;
001fc4  f8a6b048          STRH     r11,[r6,#0x48]
;;;2015   		cntrl_stat_old=1000;
001fc8  f8a6b034          STRH     r11,[r6,#0x34]
;;;2016   		volt_region_cnt=110;
001fcc  f04f026e          MOV      r2,#0x6e
001fd0  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8148|
;;;2017   		}
;;;2018   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fd4  4288              CMP      r0,r1
001fd6  da13              BGE      |L1.8192|
001fd8  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fdc  4558              CMP      r0,r11
001fde  db0f              BLT      |L1.8192|
001fe0  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fe4  b960              CBNZ     r0,|L1.8192|
001fe6  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fea  b948              CBNZ     r0,|L1.8192|
;;;2019   		{
;;;2020   		volt_region=1;
001fec  f04f0001          MOV      r0,#1
001ff0  f886002f          STRB     r0,[r6,#0x2f]
;;;2021   		cntrl_stat=10;
001ff4  8674              STRH     r4,[r6,#0x32]
;;;2022   		cntrl_stat_new=10;
001ff6  f8a64048          STRH     r4,[r6,#0x48]
;;;2023   		cntrl_stat_old=10;
001ffa  86b4              STRH     r4,[r6,#0x34]
;;;2024   		volt_region_cnt=10;
001ffc  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8192|
;;;2025   		}
;;;2026   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002000  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
002004  b110              CBZ      r0,|L1.8204|
;;;2027   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002006  2801              CMP      r0,#1
002008  d007              BEQ      |L1.8218|
00200a  e00c              B        |L1.8230|
                  |L1.8204|
00200c  2314              MOVS     r3,#0x14              ;2026
00200e  2200              MOVS     r2,#0                 ;2026
002010  2164              MOVS     r1,#0x64              ;2026
002012  20d2              MOVS     r0,#0xd2              ;2026
002014  f7fffffe          BL       mess_send
002018  e005              B        |L1.8230|
                  |L1.8218|
00201a  2314              MOVS     r3,#0x14
00201c  2201              MOVS     r2,#1
00201e  2164              MOVS     r1,#0x64
002020  20d2              MOVS     r0,#0xd2
002022  f7fffffe          BL       mess_send
                  |L1.8230|
;;;2028   	}
;;;2029   
;;;2030   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002026  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002028  280c              CMP      r0,#0xc
00202a  d123              BNE      |L1.8308|
;;;2031   	{
;;;2032   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00202c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00202e  280c              CMP      r0,#0xc
002030  d102              BNE      |L1.8248|
002032  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002036  b908              CBNZ     r0,|L1.8252|
                  |L1.8248|
;;;2033   		{
;;;2034   		vz2_stat_cnt=10;
002038  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8252|
;;;2035   		}
;;;2036   	vz2_stat_cnt--;
00203c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002040  f1a00001          SUB      r0,r0,#1
002044  b200              SXTH     r0,r0
002046  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2037   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00204a  280a              CMP      r0,#0xa
00204c  d001              BEQ      |L1.8274|
00204e  2809              CMP      r0,#9
002050  d10a              BNE      |L1.8296|
                  |L1.8274|
;;;2038   		{
;;;2039   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002052  f2af4328          ADR      r3,|L1.7212|
002056  f2af4214          ADR      r2,|L1.7236|
00205a  f2af4100          ADR      r1,|L1.7260|
00205e  a060              ADR      r0,|L1.8672|
002060  f8cd8000          STR      r8,[sp,#0]
002064  f7fffffe          BL       show_mess
                  |L1.8296|
;;;2040   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2041   					"      ВКЛЮЧЕН       ",
;;;2042   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2043   					5000);
;;;2044   		}
;;;2045   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002068  2314              MOVS     r3,#0x14
00206a  2200              MOVS     r2,#0
00206c  2164              MOVS     r1,#0x64
00206e  20d2              MOVS     r0,#0xd2
002070  f7fffffe          BL       mess_send
                  |L1.8308|
;;;2046   	}
;;;2047   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002074  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002076  280d              CMP      r0,#0xd
002078  d12c              BNE      |L1.8404|
;;;2048   	{
;;;2049   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00207c  280d              CMP      r0,#0xd
00207e  d102              BNE      |L1.8326|
002080  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002084  b908              CBNZ     r0,|L1.8330|
                  |L1.8326|
;;;2050   		{
;;;2051   		vz2_stat_cnt=10;
002086  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8330|
;;;2052   		}
;;;2053   	vz2_stat_cnt--;
00208a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00208e  f1a00001          SUB      r0,r0,#1
002092  b200              SXTH     r0,r0
002094  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2054   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002098  280a              CMP      r0,#0xa
00209a  d001              BEQ      |L1.8352|
00209c  2809              CMP      r0,#9
00209e  d10a              BNE      |L1.8374|
                  |L1.8352|
;;;2055   		{
;;;2056   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020a0  f6af2314          ADR      r3,|L1.5776|
0020a4  f6af2200          ADR      r2,|L1.5800|
0020a8  f6af11ec          ADR      r1,|L1.5824|
0020ac  a04c              ADR      r0,|L1.8672|
0020ae  f8cd8000          STR      r8,[sp,#0]
0020b2  f7fffffe          BL       show_mess
                  |L1.8374|
;;;2057   					"    ЗАБЛОКИРОВАН    ",
;;;2058   					"     НЕИСПРАВНА     ",
;;;2059   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2060   					5000);
;;;2061   		}
;;;2062   	if(sk_stat[0]==1)
0020b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020b8  2801              CMP      r0,#1
0020ba  d105              BNE      |L1.8392|
;;;2063   		{
;;;2064   		vz2_stat=vz2sWRK1;
0020bc  71f4              STRB     r4,[r6,#7]
;;;2065   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020be  210a              MOVS     r1,#0xa
0020c0  f44f70ca          MOV      r0,#0x194
0020c4  f7fffffe          BL       lc640_write
                  |L1.8392|
;;;2066   		}
;;;2067   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020c8  2314              MOVS     r3,#0x14
0020ca  2200              MOVS     r2,#0
0020cc  2164              MOVS     r1,#0x64
0020ce  20d2              MOVS     r0,#0xd2
0020d0  f7fffffe          BL       mess_send
                  |L1.8404|
;;;2068   	}
;;;2069   
;;;2070   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020d4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020d6  280e              CMP      r0,#0xe
0020d8  d12b              BNE      |L1.8498|
;;;2071   	{
;;;2072   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020da  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020dc  280e              CMP      r0,#0xe
0020de  d102              BNE      |L1.8422|
0020e0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020e4  b908              CBNZ     r0,|L1.8426|
                  |L1.8422|
;;;2073   		{
;;;2074   		vz2_stat_cnt=10;
0020e6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8426|
;;;2075   		}
;;;2076   	vz2_stat_cnt--;
0020ea  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020ee  f1a00001          SUB      r0,r0,#1
0020f2  b200              SXTH     r0,r0
0020f4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2077   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020f8  280a              CMP      r0,#0xa
0020fa  d001              BEQ      |L1.8448|
0020fc  2809              CMP      r0,#9
0020fe  d109              BNE      |L1.8468|
                  |L1.8448|
;;;2078   		{
;;;2079   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002100  a33d              ADR      r3,|L1.8696|
002102  f2af4260          ADR      r2,|L1.7332|
002106  f2af414c          ADR      r1,|L1.7356|
00210a  a035              ADR      r0,|L1.8672|
00210c  f8cd8000          STR      r8,[sp,#0]
002110  f7fffffe          BL       show_mess
                  |L1.8468|
;;;2080   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2081   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2082   					"    ТУМБЛЕРА!!!     ",
;;;2083   					5000);
;;;2084   		}
;;;2085   	if(sk_stat[1]==1)
002114  7868              LDRB     r0,[r5,#1]  ; sk_stat
002116  2801              CMP      r0,#1
002118  d105              BNE      |L1.8486|
;;;2086   		{
;;;2087   		vz2_stat=vz2sWRK1;
00211a  71f4              STRB     r4,[r6,#7]
;;;2088   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00211c  210a              MOVS     r1,#0xa
00211e  f44f70ca          MOV      r0,#0x194
002122  f7fffffe          BL       lc640_write
                  |L1.8486|
;;;2089   		}
;;;2090   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002126  2314              MOVS     r3,#0x14
002128  2200              MOVS     r2,#0
00212a  2164              MOVS     r1,#0x64
00212c  20d2              MOVS     r0,#0xd2
00212e  f7fffffe          BL       mess_send
                  |L1.8498|
;;;2091   	}
;;;2092   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
002132  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002134  2810              CMP      r0,#0x10
002136  d12d              BNE      |L1.8596|
;;;2093   	{
;;;2094   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002138  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00213a  2810              CMP      r0,#0x10
00213c  d102              BNE      |L1.8516|
00213e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002142  b908              CBNZ     r0,|L1.8520|
                  |L1.8516|
;;;2095   		{
;;;2096   		vz2_stat_cnt=10;
002144  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8520|
;;;2097   		}
;;;2098   	vz2_stat_cnt--;
002148  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00214c  f1a00001          SUB      r0,r0,#1
002150  b200              SXTH     r0,r0
002152  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2099   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002156  280a              CMP      r0,#0xa
002158  d001              BEQ      |L1.8542|
00215a  2809              CMP      r0,#9
00215c  d10a              BNE      |L1.8564|
                  |L1.8542|
;;;2100   		{
;;;2101   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00215e  f6af23d0          ADR      r3,|L1.5776|
002162  f6af22bc          ADR      r2,|L1.5800|
002166  f6af21a8          ADR      r1,|L1.5824|
00216a  a01d              ADR      r0,|L1.8672|
00216c  f8cd8000          STR      r8,[sp,#0]
002170  f7fffffe          BL       show_mess
                  |L1.8564|
;;;2102   					"    ЗАБЛОКИРОВАН    ",
;;;2103   					"     НЕИСПРАВНА     ",
;;;2104   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2105   					5000);
;;;2106   		}
;;;2107   	if(sk_stat[0]==1)
002174  7828              LDRB     r0,[r5,#0]  ; sk_stat
002176  2801              CMP      r0,#1
002178  d106              BNE      |L1.8584|
;;;2108   		{
;;;2109   		vz2_stat=vz2sWRK2;
00217a  f886a007          STRB     r10,[r6,#7]
;;;2110   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00217e  210b              MOVS     r1,#0xb
002180  f44f70ca          MOV      r0,#0x194
002184  f7fffffe          BL       lc640_write
                  |L1.8584|
;;;2111   		}
;;;2112   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002188  2314              MOVS     r3,#0x14
00218a  2200              MOVS     r2,#0
00218c  2164              MOVS     r1,#0x64
00218e  20d2              MOVS     r0,#0xd2
002190  f7fffffe          BL       mess_send
                  |L1.8596|
;;;2113   	}
;;;2114   
;;;2115   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002194  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002196  2811              CMP      r0,#0x11
002198  d154              BNE      |L1.8772|
;;;2116   	{
;;;2117   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00219a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00219c  2811              CMP      r0,#0x11
00219e  d102              BNE      |L1.8614|
0021a0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021a4  b908              CBNZ     r0,|L1.8618|
                  |L1.8614|
;;;2118   		{
;;;2119   		vz2_stat_cnt=10;
0021a6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8618|
;;;2120   		}
;;;2121   	vz2_stat_cnt--;
0021aa  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021ae  f1a00001          SUB      r0,r0,#1
0021b2  b200              SXTH     r0,r0
0021b4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2122   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021b8  280a              CMP      r0,#0xa
0021ba  d001              BEQ      |L1.8640|
0021bc  2809              CMP      r0,#9
0021be  d131              BNE      |L1.8740|
                  |L1.8640|
;;;2123   		{
;;;2124   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021c0  a30d              ADR      r3,|L1.8696|
0021c2  e025              B        |L1.8720|
                  |L1.8644|
                          DCD      ||area_number.18||+0x80
                  |L1.8648|
                          DCD      FZ_T1
                  |L1.8652|
                          DCD      out_U
                  |L1.8656|
                          DCD      FZ_U1
                  |L1.8660|
                          DCD      Ib_ips_termokompensat
                  |L1.8664|
                          DCD      FZ_ISW12
                  |L1.8668|
                          DCD      FZ_T2
                  |L1.8672|
0021e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021e4  cccec2ce
0021e8  d7cddbc9
0021ec  20c7c0  
0021ef  d0dfc420          DCB      208,223,196,"  ",0
0021f3  2000    
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021fc  d2d3ccc1
002200  cbc5d0c0
002204  21212120
002208  20202020
00220c  00      
00220d  00                DCB      0
00220e  00                DCB      0
00220f  00                DCB      0
                  |L1.8720|
002210  f2af5270          ADR      r2,|L1.7332|
002214  f2af515c          ADR      r1,|L1.7356|
002218  f2af003c          ADR      r0,|L1.8672|
00221c  f8cd8000          STR      r8,[sp,#0]
002220  f7fffffe          BL       show_mess
                  |L1.8740|
;;;2125   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2126   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2127   					"    ТУМБЛЕРА!!!     ",
;;;2128   					5000);
;;;2129   		}
;;;2130   	if(sk_stat[1]==1)
002224  7868              LDRB     r0,[r5,#1]  ; sk_stat
002226  2801              CMP      r0,#1
002228  d106              BNE      |L1.8760|
;;;2131   		{
;;;2132   		vz2_stat=vz2sWRK2;
00222a  f886a007          STRB     r10,[r6,#7]
;;;2133   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00222e  210b              MOVS     r1,#0xb
002230  f44f70ca          MOV      r0,#0x194
002234  f7fffffe          BL       lc640_write
                  |L1.8760|
;;;2134   		}
;;;2135   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002238  2314              MOVS     r3,#0x14
00223a  2200              MOVS     r2,#0
00223c  2164              MOVS     r1,#0x64
00223e  20d2              MOVS     r0,#0xd2
002240  f7fffffe          BL       mess_send
                  |L1.8772|
;;;2136   	}
;;;2137   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002244  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002246  280f              CMP      r0,#0xf
002248  d12e              BNE      |L1.8872|
;;;2138   	{
;;;2139   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00224a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00224c  280f              CMP      r0,#0xf
00224e  d102              BNE      |L1.8790|
002250  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002254  b908              CBNZ     r0,|L1.8794|
                  |L1.8790|
;;;2140   		{
;;;2141   		vz2_stat_cnt=10;
002256  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8794|
;;;2142   		}
;;;2143   	vz2_stat_cnt--;
00225a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00225e  f1a00001          SUB      r0,r0,#1
002262  b200              SXTH     r0,r0
002264  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2144   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002268  280a              CMP      r0,#0xa
00226a  d001              BEQ      |L1.8816|
00226c  2809              CMP      r0,#9
00226e  d10b              BNE      |L1.8840|
                  |L1.8816|
;;;2145   		{
;;;2146   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002270  f6af3380          ADR      r3,|L1.5876|
002274  f6af326c          ADR      r2,|L1.5900|
002278  f6af3158          ADR      r1,|L1.5924|
00227c  f2af5034          ADR      r0,|L1.7500|
002280  f8cd8000          STR      r8,[sp,#0]
002284  f7fffffe          BL       show_mess
                  |L1.8840|
;;;2147   					"      ТУМБЛЕР       ",
;;;2148   					"     ВЫСОКОГО       ",
;;;2149   					"    НАПРЯЖЕНИЯ      ",
;;;2150   					5000);
;;;2151   		}
;;;2152   	if(sk_stat[1]==0)
002288  7868              LDRB     r0,[r5,#1]  ; sk_stat
00228a  b938              CBNZ     r0,|L1.8860|
;;;2153   		{
;;;2154   		vz2_stat=vz2sOFF;
00228c  71f7              STRB     r7,[r6,#7]
;;;2155   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00228e  2100              MOVS     r1,#0
002290  f44f70ca          MOV      r0,#0x194
002294  f7fffffe          BL       lc640_write
;;;2156   		vz_stop();
002298  f7fffffe          BL       vz_stop
                  |L1.8860|
;;;2157   
;;;2158   		}
;;;2159   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00229c  2314              MOVS     r3,#0x14
00229e  2200              MOVS     r2,#0
0022a0  2164              MOVS     r1,#0x64
0022a2  20d2              MOVS     r0,#0xd2
0022a4  f7fffffe          BL       mess_send
                  |L1.8872|
;;;2160   	}
;;;2161   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022a8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2162   	{
;;;2163   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2164   		{
;;;2165   		vz2_stat_cnt=10;
;;;2166   		}
;;;2167   	vz2_stat_cnt--;
;;;2168   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2169   		{
;;;2170   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022aa  f64038b8          MOV      r8,#0xbb8
0022ae  2812              CMP      r0,#0x12              ;2161
0022b0  d13d              BNE      |L1.9006|
0022b2  7a30              LDRB     r0,[r6,#8]            ;2163  ; vz2_stat_old
0022b4  2812              CMP      r0,#0x12              ;2163
0022b6  d102              BNE      |L1.8894|
0022b8  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2163  ; vz2_stat_cnt
0022bc  b908              CBNZ     r0,|L1.8898|
                  |L1.8894|
0022be  f8a6407a          STRH     r4,[r6,#0x7a]         ;2165
                  |L1.8898|
0022c2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2167  ; vz2_stat_cnt
0022c6  f1a00001          SUB      r0,r0,#1              ;2167
0022ca  b200              SXTH     r0,r0                 ;2167
0022cc  f8a6007a          STRH     r0,[r6,#0x7a]         ;2167
0022d0  280a              CMP      r0,#0xa               ;2168
0022d2  d001              BEQ      |L1.8920|
0022d4  2809              CMP      r0,#9                 ;2168
0022d6  d10a              BNE      |L1.8942|
                  |L1.8920|
0022d8  f2af53f0          ADR      r3,|L1.7404|
0022dc  f2af52dc          ADR      r2,|L1.7428|
0022e0  f2af51c8          ADR      r1,|L1.7452|
0022e4  a0ff              ADR      r0,|L1.9956|
0022e6  f8cd8000          STR      r8,[sp,#0]
0022ea  f7fffffe          BL       show_mess
                  |L1.8942|
;;;2171   					"       ЗАРЯД        ",
;;;2172   					"      УСПЕШНО       ",
;;;2173   					"     ЗАВЕРШЕН       ",
;;;2174   					3000);
;;;2175   		}
;;;2176   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022ee  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022f2  2806              CMP      r0,#6
0022f4  d001              BEQ      |L1.8954|
0022f6  2805              CMP      r0,#5
0022f8  d10b              BNE      |L1.8978|
                  |L1.8954|
;;;2177   		{
;;;2178   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022fa  f6af4308          ADR      r3,|L1.5876|
0022fe  f6af32f4          ADR      r2,|L1.5900|
002302  f6af31e0          ADR      r1,|L1.5924|
002306  f2af50bc          ADR      r0,|L1.7500|
00230a  f8cd8000          STR      r8,[sp,#0]
00230e  f7fffffe          BL       show_mess
                  |L1.8978|
;;;2179   					"      ТУМБЛЕР       ",
;;;2180   					"     ВЫСОКОГО       ",
;;;2181   					"    НАПРЯЖЕНИЯ      ",
;;;2182   					3000);
;;;2183   		}
;;;2184   	if(sk_stat[1]==0)
002312  7868              LDRB     r0,[r5,#1]  ; sk_stat
002314  b928              CBNZ     r0,|L1.8994|
;;;2185   		{
;;;2186   		vz2_stat=vz2sOFF;
002316  71f7              STRB     r7,[r6,#7]
;;;2187   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002318  2100              MOVS     r1,#0
00231a  f44f70ca          MOV      r0,#0x194
00231e  f7fffffe          BL       lc640_write
                  |L1.8994|
;;;2188   		}
;;;2189   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002322  2314              MOVS     r3,#0x14
002324  2200              MOVS     r2,#0
002326  2164              MOVS     r1,#0x64
002328  20d2              MOVS     r0,#0xd2
00232a  f7fffffe          BL       mess_send
                  |L1.9006|
;;;2190   	}
;;;2191   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00232e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002330  2813              CMP      r0,#0x13
002332  d13d              BNE      |L1.9136|
;;;2192   	{
;;;2193   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002334  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002336  2813              CMP      r0,#0x13
002338  d102              BNE      |L1.9024|
00233a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00233e  b908              CBNZ     r0,|L1.9028|
                  |L1.9024|
;;;2194   		{
;;;2195   		vz2_stat_cnt=10;
002340  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9028|
;;;2196   		}
;;;2197   	vz2_stat_cnt--;
002344  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002348  f1a00001          SUB      r0,r0,#1
00234c  b200              SXTH     r0,r0
00234e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2198   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002352  280a              CMP      r0,#0xa
002354  d001              BEQ      |L1.9050|
002356  2809              CMP      r0,#9
002358  d10a              BNE      |L1.9072|
                  |L1.9050|
;;;2199   		{
;;;2200   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00235a  f2af53f8          ADR      r3,|L1.7524|
00235e  f2af52e4          ADR      r2,|L1.7548|
002362  f2af6148          ADR      r1,|L1.7452|
002366  a0df              ADR      r0,|L1.9956|
002368  f8cd8000          STR      r8,[sp,#0]
00236c  f7fffffe          BL       show_mess
                  |L1.9072|
;;;2201   					"       ЗАРЯД        ",
;;;2202   					"     ПРЕКРАЩЕН      ",
;;;2203   					"                    ",
;;;2204   					3000);
;;;2205   		}
;;;2206   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002370  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
002374  2806              CMP      r0,#6
002376  d001              BEQ      |L1.9084|
002378  2805              CMP      r0,#5
00237a  d10b              BNE      |L1.9108|
                  |L1.9084|
;;;2207   		{
;;;2208   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00237c  f6af438c          ADR      r3,|L1.5876|
002380  f6af4278          ADR      r2,|L1.5900|
002384  f6af4164          ADR      r1,|L1.5924|
002388  f2af6040          ADR      r0,|L1.7500|
00238c  f8cd8000          STR      r8,[sp,#0]
002390  f7fffffe          BL       show_mess
                  |L1.9108|
;;;2209   					"      ТУМБЛЕР       ",
;;;2210   					"     ВЫСОКОГО       ",
;;;2211   					"    НАПРЯЖЕНИЯ      ",
;;;2212   					3000);
;;;2213   		}
;;;2214   	if(sk_stat[1]==0)
002394  7868              LDRB     r0,[r5,#1]  ; sk_stat
002396  b928              CBNZ     r0,|L1.9124|
;;;2215   		{
;;;2216   		vz2_stat=vz2sOFF;
002398  71f7              STRB     r7,[r6,#7]
;;;2217   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00239a  2100              MOVS     r1,#0
00239c  f44f70ca          MOV      r0,#0x194
0023a0  f7fffffe          BL       lc640_write
                  |L1.9124|
;;;2218   		}
;;;2219   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023a4  2314              MOVS     r3,#0x14
0023a6  2200              MOVS     r2,#0
0023a8  2164              MOVS     r1,#0x64
0023aa  20d2              MOVS     r0,#0xd2
0023ac  f7fffffe          BL       mess_send
                  |L1.9136|
;;;2220   	}
;;;2221   vz2_stat_old=vz2_stat;
0023b0  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0023b2  7230              STRB     r0,[r6,#8]
;;;2222   
;;;2223   }
0023b4  e8bd8ff8          POP      {r3-r11,pc}
;;;2224   
                          ENDP

                  vz2_start PROC
;;;2226   //старт уравнительног заряда
;;;2227   char vz2_start(char hour)
0023b8  b510              PUSH     {r4,lr}
;;;2228   {          
;;;2229   char out;
;;;2230   out=0;
0023ba  f04f0000          MOV      r0,#0
;;;2231   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023be  49cf              LDR      r1,|L1.9980|
0023c0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023c4  2a00              CMP      r2,#0
0023c6  d110              BNE      |L1.9194|
0023c8  4acd              LDR      r2,|L1.9984|
0023ca  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023cc  2a01              CMP      r2,#1
0023ce  d00c              BEQ      |L1.9194|
0023d0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023d2  2a00              CMP      r2,#0
0023d4  d109              BNE      |L1.9194|
;;;2232   	{
;;;2233   	if(vz1_stat==vz1sOFF)
;;;2234   		{
;;;2235   		vz2_stat=vz2sSTEP1;
0023d6  f04f0001          MOV      r0,#1
0023da  71c8              STRB     r0,[r1,#7]
;;;2236   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023dc  4601              MOV      r1,r0
0023de  f44f70ca          MOV      r0,#0x194
0023e2  f7fffffe          BL       lc640_write
;;;2237   		out=1;
0023e6  f04f0001          MOV      r0,#1
                  |L1.9194|
;;;2238   		
;;;2239   		}
;;;2240   /*	spc_stat=spcVZ;
;;;2241   	__ee_spc_stat=spcVZ; 
;;;2242   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2243   	vz_cnt_h=hour;
;;;2244   	__ee_vz_cnt=hour*60;
;;;2245   	if(hour==0)__ee_vz_cnt=30;
;;;2246   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2247   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2248   	vz_cnt_h_=0;
;;;2249   	vz_cnt_s=0;
;;;2250   	vz_cnt_s_=0;
;;;2251   	
;;;2252   		*/
;;;2253   	}
;;;2254   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2255   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2256   //plazma=out;	
;;;2257   return out;
;;;2258   }
0023ea  bd10              POP      {r4,pc}
;;;2259   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2260   //стоп формовочного заряда
;;;2261   void vz2_stop(void)
0023ec  48c3              LDR      r0,|L1.9980|
;;;2262   {
;;;2263   if(vz2_stat!=vz2sOFF)
0023ee  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023f0  2900              CMP      r1,#0
0023f2  d006              BEQ      |L1.9218|
;;;2264   	{
;;;2265   	vz2_stat=vz2sSTOP;
0023f4  f04f0113          MOV      r1,#0x13
0023f8  71c1              STRB     r1,[r0,#7]
;;;2266   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023fa  f44f70ca          MOV      r0,#0x194
0023fe  f7ffbffe          B.W      lc640_write
                  |L1.9218|
;;;2267   	}
;;;2268   }
002402  4770              BX       lr
;;;2269   
                          ENDP

                  kb_init PROC
;;;2270   //-----------------------------------------------
;;;2271   void kb_init(void)
002404  48bf              LDR      r0,|L1.9988|
;;;2272   {
;;;2273   main_kb_cnt=(TBAT*60)-60/*120*/;
002406  f06f013b          MVN      r1,#0x3b
00240a  8800              LDRH     r0,[r0,#0]  ; TBAT
00240c  ebc01000          RSB      r0,r0,r0,LSL #4
002410  eb010080          ADD      r0,r1,r0,LSL #2
002414  49b9              LDR      r1,|L1.9980|
002416  f8a10052          STRH     r0,[r1,#0x52]
;;;2274   }
00241a  4770              BX       lr
;;;2275   
                          ENDP

                  kb_hndl PROC
;;;2276   //-----------------------------------------------
;;;2277   void kb_hndl(void)
00241c  e92d5ff0          PUSH     {r4-r12,lr}
;;;2278   {
;;;2279   
;;;2280   static signed short ibat[2],ibat_[2];
;;;2281   #ifdef UKU_TELECORE2015
;;;2282   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2283   #else 
;;;2284   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002420  f8df82d8          LDR      r8,|L1.9980|
;;;2285   #endif
;;;2286   	{
;;;2287   	main_kb_cnt=0;
;;;2288   	
;;;2289   	kb_start[0]=0;
;;;2290   	kb_start[1]=0;
;;;2291   	kb_start_ips=0;
;;;2292   
;;;2293   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2294   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2295   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2296   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002424  f8dfa2e0          LDR      r10,|L1.9992|
002428  2500              MOVS     r5,#0                 ;2284
00242a  f8b80052          LDRH     r0,[r8,#0x52]         ;2284  ; main_kb_cnt
00242e  4eb7              LDR      r6,|L1.9996|
002430  1c40              ADDS     r0,r0,#1              ;2284
002432  b201              SXTH     r1,r0                 ;2284
002434  48b3              LDR      r0,|L1.9988|
002436  f8a81052          STRH     r1,[r8,#0x52]         ;2284
00243a  f8df92d4          LDR      r9,|L1.10000|
00243e  f9b00000          LDRSH    r0,[r0,#0]            ;2284  ; TBAT
;;;2297   #endif	
;;;2298   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2299   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2300   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2301   #endif
;;;2302   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2303    
;;;2304   		{
;;;2305   		kb_start[0]=0;
;;;2306   		kb_start[1]=0;
;;;2307   		kb_start_ips=0;
;;;2308   		}
;;;2309   
;;;2310   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2311   		{
;;;2312   		kb_cnt_1lev=10;
002442  270a              MOVS     r7,#0xa
002444  ebc01200          RSB      r2,r0,r0,LSL #4       ;2284
002448  f04f0b01          MOV      r11,#1                ;2293
00244c  f1080458          ADD      r4,r8,#0x58           ;2289
002450  ebb10f82          CMP      r1,r2,LSL #2          ;2284
002454  db6c              BLT      |L1.9520|
002456  2800              CMP      r0,#0                 ;2284
002458  d06a              BEQ      |L1.9520|
00245a  f8a85052          STRH     r5,[r8,#0x52]         ;2287
00245e  7025              STRB     r5,[r4,#0]            ;2289
002460  7065              STRB     r5,[r4,#1]            ;2290
002462  f888501d          STRB     r5,[r8,#0x1d]         ;2291
002466  48ab              LDR      r0,|L1.10004|
002468  7800              LDRB     r0,[r0,#0]            ;2293  ; BAT_IS_ON
00246a  2855              CMP      r0,#0x55              ;2293
00246c  d111              BNE      |L1.9362|
00246e  f9b60002          LDRSH    r0,[r6,#2]            ;2293  ; bat
002472  2850              CMP      r0,#0x50              ;2293
002474  dd0d              BLE      |L1.9362|
002476  f9b60008          LDRSH    r0,[r6,#8]            ;2293  ; bat
00247a  f7fffffe          BL       abs
00247e  f9b91000          LDRSH    r1,[r9,#0]            ;2293  ; IKB
002482  4288              CMP      r0,r1                 ;2293
002484  db03              BLT      |L1.9358|
002486  f896003d          LDRB     r0,[r6,#0x3d]         ;2293  ; bat
00248a  07c0              LSLS     r0,r0,#31             ;2293
00248c  d001              BEQ      |L1.9362|
                  |L1.9358|
00248e  f884b000          STRB     r11,[r4,#0]           ;2293
                  |L1.9362|
002492  48a0              LDR      r0,|L1.10004|
002494  7840              LDRB     r0,[r0,#1]            ;2294  ; BAT_IS_ON
002496  2855              CMP      r0,#0x55              ;2294
002498  d111              BNE      |L1.9406|
00249a  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2294  ; bat
00249e  2850              CMP      r0,#0x50              ;2294
0024a0  dd0d              BLE      |L1.9406|
0024a2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2294  ; bat
0024a6  f7fffffe          BL       abs
0024aa  f9b91000          LDRSH    r1,[r9,#0]            ;2294  ; IKB
0024ae  4288              CMP      r0,r1                 ;2294
0024b0  db03              BLT      |L1.9402|
0024b2  f8960089          LDRB     r0,[r6,#0x89]         ;2294  ; bat
0024b6  07c0              LSLS     r0,r0,#31             ;2294
0024b8  d001              BEQ      |L1.9406|
                  |L1.9402|
0024ba  f884b001          STRB     r11,[r4,#1]           ;2294
                  |L1.9406|
0024be  4896              LDR      r0,|L1.10008|
0024c0  7800              LDRB     r0,[r0,#0]            ;2296  ; ips_bat_av_vzvod
0024c2  b970              CBNZ     r0,|L1.9442|
0024c4  f9ba0000          LDRSH    r0,[r10,#0]           ;2296  ; Ib_ips_termokompensat
0024c8  f7fffffe          BL       abs
0024cc  f9b91000          LDRSH    r1,[r9,#0]            ;2296  ; IKB
0024d0  4288              CMP      r0,r1                 ;2296
0024d2  db04              BLT      |L1.9438|
0024d4  4891              LDR      r0,|L1.10012|
0024d6  f890003d          LDRB     r0,[r0,#0x3d]         ;2296  ; bat_ips
0024da  07c0              LSLS     r0,r0,#31             ;2296
0024dc  d001              BEQ      |L1.9442|
                  |L1.9438|
0024de  f888b01d          STRB     r11,[r8,#0x1d]        ;2296
                  |L1.9442|
0024e2  488f              LDR      r0,|L1.10016|
0024e4  7800              LDRB     r0,[r0,#0]            ;2298  ; net_av
0024e6  b998              CBNZ     r0,|L1.9488|
0024e8  f898001e          LDRB     r0,[r8,#0x1e]         ;2298  ; num_of_wrks_bps
0024ec  b180              CBZ      r0,|L1.9488|
0024ee  f8980023          LDRB     r0,[r8,#0x23]         ;2298  ; spc_stat
0024f2  b108              CBZ      r0,|L1.9464|
0024f4  2802              CMP      r0,#2                 ;2298
0024f6  d10b              BNE      |L1.9488|
                  |L1.9464|
0024f8  f8980005          LDRB     r0,[r8,#5]            ;2300  ; vz1_stat
0024fc  f8981007          LDRB     r1,[r8,#7]            ;2300  ; vz2_stat
002500  4308              ORRS     r0,r0,r1              ;2300
002502  d002              BEQ      |L1.9482|
002504  4887              LDR      r0,|L1.10020|
002506  8800              LDRH     r0,[r0,#0]            ;2300  ; SMART_SPC
002508  b910              CBNZ     r0,|L1.9488|
                  |L1.9482|
00250a  4887              LDR      r0,|L1.10024|
00250c  7800              LDRB     r0,[r0,#0]            ;2302  ; sp_ch_stat
00250e  b118              CBZ      r0,|L1.9496|
                  |L1.9488|
002510  7025              STRB     r5,[r4,#0]            ;2305
002512  7065              STRB     r5,[r4,#1]            ;2306
002514  f888501d          STRB     r5,[r8,#0x1d]         ;2307
                  |L1.9496|
002518  7820              LDRB     r0,[r4,#0]            ;2310  ; kb_start
00251a  2801              CMP      r0,#1                 ;2310
00251c  d020              BEQ      |L1.9568|
00251e  7860              LDRB     r0,[r4,#1]            ;2310  ; kb_start
002520  2801              CMP      r0,#1                 ;2310
002522  d01d              BEQ      |L1.9568|
002524  f898001d          LDRB     r0,[r8,#0x1d]         ;2310  ; kb_start_ips
002528  2801              CMP      r0,#1                 ;2310
00252a  d019              BEQ      |L1.9568|
;;;2313   		}
;;;2314   	else kb_cnt_1lev=0;
00252c  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9520|
;;;2315   	}
;;;2316   
;;;2317   if(kb_cnt_1lev)
002530  4641              MOV      r1,r8
002532  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2318   	{
;;;2319   	kb_cnt_1lev--;
;;;2320   
;;;2321   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2322   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2323   
;;;2324   
;;;2325   	if(kb_cnt_1lev==5)
;;;2326   		{
;;;2327   		ibat[0]=abs(bat[0]._Ib);
002536  f8df81c4          LDR      r8,|L1.9980|
00253a  2800              CMP      r0,#0                 ;2317
00253c  f1080890          ADD      r8,r8,#0x90
002540  d07e              BEQ      |L1.9792|
002542  f1a00001          SUB      r0,r0,#1              ;2319
002546  b200              SXTH     r0,r0                 ;2319
002548  468b              MOV      r11,r1                ;2319
00254a  f8a10054          STRH     r0,[r1,#0x54]         ;2319
00254e  2805              CMP      r0,#5                 ;2321
002550  dd09              BLE      |L1.9574|
002552  230f              MOVS     r3,#0xf               ;2321
002554  221e              MOVS     r2,#0x1e              ;2321
002556  2164              MOVS     r1,#0x64              ;2321
002558  20e1              MOVS     r0,#0xe1              ;2321
00255a  f7fffffe          BL       mess_send
00255e  e00a              B        |L1.9590|
                  |L1.9568|
002560  f8a87054          STRH     r7,[r8,#0x54]         ;2312
002564  e7e4              B        |L1.9520|
                  |L1.9574|
002566  2800              CMP      r0,#0                 ;2322
002568  dd05              BLE      |L1.9590|
00256a  230f              MOVS     r3,#0xf               ;2322
00256c  221e              MOVS     r2,#0x1e              ;2322
00256e  2169              MOVS     r1,#0x69              ;2322
002570  20e1              MOVS     r0,#0xe1              ;2322
002572  f7fffffe          BL       mess_send
                  |L1.9590|
002576  f8bb0054          LDRH     r0,[r11,#0x54]        ;2325  ; kb_cnt_1lev
00257a  2805              CMP      r0,#5                 ;2325
00257c  d111              BNE      |L1.9634|
00257e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002582  f7fffffe          BL       abs
002586  f8a80000          STRH     r0,[r8,#0]
;;;2328   		ibat[1]=abs(bat[1]._Ib);
00258a  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00258e  f7fffffe          BL       abs
002592  f8a80002          STRH     r0,[r8,#2]
;;;2329   		ibat_ips=abs(Ib_ips_termokompensat);
002596  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00259a  f7fffffe          BL       abs
00259e  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9634|
;;;2330   		}
;;;2331   	
;;;2332   	if(kb_cnt_1lev==0)
0025a2  4856              LDR      r0,|L1.9980|
0025a4  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025a8  2800              CMP      r0,#0
0025aa  d158              BNE      |L1.9822|
;;;2333   		{
;;;2334   		ibat_[0]=abs(bat[0]._Ib);
0025ac  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025b0  f7fffffe          BL       abs
0025b4  f8dfb144          LDR      r11,|L1.9980|
0025b8  f10b0b94          ADD      r11,r11,#0x94
0025bc  f8ab0000          STRH     r0,[r11,#0]
;;;2335   		ibat_[1]=abs(bat[1]._Ib);
0025c0  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025c4  f7fffffe          BL       abs
0025c8  f8ab0002          STRH     r0,[r11,#2]
;;;2336   		ibat_ips_=abs(Ib_ips_termokompensat);
0025cc  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025d0  f7fffffe          BL       abs
0025d4  f8dfa124          LDR      r10,|L1.9980|
0025d8  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2337   
;;;2338   		kb_cnt_2lev=0;
0025dc  f8aa5056          STRH     r5,[r10,#0x56]
;;;2339   
;;;2340   
;;;2341   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025e0  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025e4  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025e8  4408              ADD      r0,r0,r1
0025ea  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025ee  4288              CMP      r0,r1
0025f0  da02              BGE      |L1.9720|
0025f2  7820              LDRB     r0,[r4,#0]  ; kb_start
0025f4  2801              CMP      r0,#1
0025f6  d034              BEQ      |L1.9826|
                  |L1.9720|
;;;2342   			{
;;;2343   			kb_cnt_2lev=10;  
;;;2344   			}
;;;2345   		else if(bat[0]._Ub>200)
0025f8  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025fc  28c8              CMP      r0,#0xc8
0025fe  dd04              BLE      |L1.9738|
;;;2346   			{
;;;2347   			kb_start[0]=0;
002600  7025              STRB     r5,[r4,#0]
;;;2348   			avar_bat_hndl(0,0);
002602  2100              MOVS     r1,#0
002604  4608              MOV      r0,r1
002606  f7fffffe          BL       avar_bat_hndl
                  |L1.9738|
;;;2349   			}
;;;2350   		
;;;2351   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
00260a  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
00260e  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
002612  4408              ADD      r0,r0,r1
002614  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002618  4288              CMP      r0,r1
00261a  da02              BGE      |L1.9762|
00261c  7860              LDRB     r0,[r4,#1]  ; kb_start
00261e  2801              CMP      r0,#1
002620  d022              BEQ      |L1.9832|
                  |L1.9762|
;;;2352   			{
;;;2353   			kb_cnt_2lev=10;     
;;;2354   			}
;;;2355   		else  if(bat[1]._Ub>200)
002622  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002626  28c8              CMP      r0,#0xc8
002628  dd04              BLE      |L1.9780|
;;;2356   			{
;;;2357   			kb_start[1]=0;
00262a  7065              STRB     r5,[r4,#1]
;;;2358   			avar_bat_hndl(1,0);
00262c  2100              MOVS     r1,#0
00262e  2001              MOVS     r0,#1
002630  f7fffffe          BL       avar_bat_hndl
                  |L1.9780|
;;;2359   			}
;;;2360   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2361   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002634  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002638  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
00263c  4408              ADD      r0,r0,r1
00263e  e000              B        |L1.9794|
                  |L1.9792|
002640  e01b              B        |L1.9850|
                  |L1.9794|
002642  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002646  4288              CMP      r0,r1
002648  da09              BGE      |L1.9822|
00264a  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00264e  2801              CMP      r0,#1
002650  d105              BNE      |L1.9822|
;;;2362   			{
;;;2363   			if(KB_ALGORITM==1)
002652  4836              LDR      r0,|L1.10028|
002654  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002656  2801              CMP      r0,#1
002658  d009              BEQ      |L1.9838|
;;;2364   				{
;;;2365   				avar_bat_ips_hndl(1);
;;;2366   				kb_start_ips=0;
;;;2367   				}
;;;2368   			else
;;;2369   				{
;;;2370   				kb_cnt_2lev=10;     
00265a  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9822|
;;;2371   				}
;;;2372   			}
;;;2373   #endif
;;;2374   		}	
;;;2375   
;;;2376   
;;;2377   	}
;;;2378   else if(kb_cnt_2lev)
;;;2379   	{
;;;2380   	kb_cnt_2lev--;
;;;2381   
;;;2382   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2383   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2384   
;;;2385   
;;;2386   	if(kb_cnt_2lev==5)
;;;2387   		{
;;;2388   		ibat[0]=abs(bat[0]._Ib);
;;;2389   		ibat[1]=abs(bat[1]._Ib);
;;;2390   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2391   		}
;;;2392   	
;;;2393   	if(kb_cnt_2lev==0)
;;;2394   		{
;;;2395   		ibat_[0]=abs(bat[0]._Ib);
;;;2396   		ibat_[1]=abs(bat[1]._Ib);
;;;2397   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2398   
;;;2399   		kb_full_ver=0;
;;;2400   
;;;2401   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2402   			{
;;;2403   			kb_full_ver=1;  
;;;2404   			}
;;;2405   		else if(bat[0]._Ub>200)			
;;;2406   			{
;;;2407   			kb_start[0]=0;
;;;2408   			avar_bat_hndl(0,0);
;;;2409   			}
;;;2410   
;;;2411   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2412   			{
;;;2413   			kb_full_ver=1;     
;;;2414   			}
;;;2415   		else	if(bat[1]._Ub>200)		
;;;2416   			{
;;;2417   			kb_start[1]=0;
;;;2418   			avar_bat_hndl(1,0);
;;;2419   			}
;;;2420   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2421   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2422   			{
;;;2423   			if(KB_ALGORITM==2)
;;;2424   				{
;;;2425   				avar_bat_ips_hndl(1);
;;;2426   				kb_start_ips=0;
;;;2427   				}
;;;2428   			else
;;;2429   				{
;;;2430   				kb_full_ver=1;     
;;;2431   				}
;;;2432   			}
;;;2433   #endif
;;;2434   		}	
;;;2435   	}
;;;2436   
;;;2437   else if(kb_full_ver)
;;;2438   	{
;;;2439   	
;;;2440   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2441   
;;;2442   	if( abs(bat[0]._Ib) > IKB ) 
;;;2443   		{
;;;2444   		if(kb_start[0]==1)
;;;2445   			{
;;;2446   			kb_start[0]=0;
;;;2447   			avar_bat_hndl(0,0);
;;;2448   			}
;;;2449   		}
;;;2450   
;;;2451   	if( abs(bat[1]._Ib) > IKB ) 
;;;2452   		{
;;;2453   		if(kb_start[1]==1)
;;;2454   			{
;;;2455   			kb_start[1]=0;
;;;2456   			avar_bat_hndl(1,0);
;;;2457   			}
;;;2458   		}
;;;2459   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2460   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2461   		{
;;;2462   		if(kb_start_ips==1)
;;;2463   			{
;;;2464   			kb_start_ips=0;
;;;2465   			avar_bat_ips_hndl(0);
;;;2466   			}
;;;2467   		}
;;;2468   #endif
;;;2469   
;;;2470   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2471   		{
;;;2472   		kb_full_ver=0;
;;;2473   		}
;;;2474   
;;;2475   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2476   		{
;;;2477   		kb_full_ver=0;
;;;2478   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2479   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2480   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2481   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2482   #endif
;;;2483   		}
;;;2484   	}
;;;2485   
;;;2486   }
00265e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9826|
002662  f8aa7056          STRH     r7,[r10,#0x56]        ;2343
002666  e7d0              B        |L1.9738|
                  |L1.9832|
002668  f8aa7056          STRH     r7,[r10,#0x56]        ;2353
00266c  e7e2              B        |L1.9780|
                  |L1.9838|
00266e  2001              MOVS     r0,#1                 ;2365
002670  f7fffffe          BL       avar_bat_ips_hndl
002674  f88a501d          STRB     r5,[r10,#0x1d]        ;2366
                  |L1.9848|
002678  e7f1              B        |L1.9822|
                  |L1.9850|
00267a  f9b10056          LDRSH    r0,[r1,#0x56]         ;2378  ; kb_cnt_2lev
00267e  b380              CBZ      r0,|L1.9954|
002680  f1a00001          SUB      r0,r0,#1              ;2380
002684  b200              SXTH     r0,r0                 ;2380
002686  460f              MOV      r7,r1                 ;2380
002688  f8a10056          STRH     r0,[r1,#0x56]         ;2380
00268c  2805              CMP      r0,#5                 ;2382
00268e  dd06              BLE      |L1.9886|
002690  230f              MOVS     r3,#0xf               ;2382
002692  22c8              MOVS     r2,#0xc8              ;2382
002694  2164              MOVS     r1,#0x64              ;2382
002696  20e1              MOVS     r0,#0xe1              ;2382
002698  f7fffffe          BL       mess_send
00269c  e007              B        |L1.9902|
                  |L1.9886|
00269e  2800              CMP      r0,#0                 ;2383
0026a0  dd05              BLE      |L1.9902|
0026a2  230f              MOVS     r3,#0xf               ;2383
0026a4  22c8              MOVS     r2,#0xc8              ;2383
0026a6  2169              MOVS     r1,#0x69              ;2383
0026a8  20e1              MOVS     r0,#0xe1              ;2383
0026aa  f7fffffe          BL       mess_send
                  |L1.9902|
0026ae  f8b70056          LDRH     r0,[r7,#0x56]         ;2386  ; kb_cnt_2lev
0026b2  2805              CMP      r0,#5                 ;2386
0026b4  d111              BNE      |L1.9946|
0026b6  f9b60008          LDRSH    r0,[r6,#8]            ;2388  ; bat
0026ba  f7fffffe          BL       abs
0026be  f8a80000          STRH     r0,[r8,#0]            ;2388
0026c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2389  ; bat
0026c6  f7fffffe          BL       abs
0026ca  f8a80002          STRH     r0,[r8,#2]            ;2389
0026ce  f9ba0000          LDRSH    r0,[r10,#0]           ;2390  ; Ib_ips_termokompensat
0026d2  f7fffffe          BL       abs
0026d6  f8a7005a          STRH     r0,[r7,#0x5a]         ;2390
                  |L1.9946|
0026da  4808              LDR      r0,|L1.9980|
0026dc  f8b00056          LDRH     r0,[r0,#0x56]         ;2393  ; kb_cnt_2lev
0026e0  e026              B        |L1.10032|
                  |L1.9954|
0026e2  e087              B        |L1.10228|
                  |L1.9956|
0026e4  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026e8  d4ced0cc
0026ec  cec2ced7
0026f0  cddbc920
0026f4  202020  
0026f7  2000              DCB      " ",0
0026f9  00                DCB      0
0026fa  00                DCB      0
0026fb  00                DCB      0
                  |L1.9980|
                          DCD      ||area_number.18||
                  |L1.9984|
                          DCD      speedChrgBlckStat
                  |L1.9988|
                          DCD      TBAT
                  |L1.9992|
                          DCD      Ib_ips_termokompensat
                  |L1.9996|
                          DCD      bat
                  |L1.10000|
                          DCD      IKB
                  |L1.10004|
                          DCD      BAT_IS_ON
                  |L1.10008|
                          DCD      ips_bat_av_vzvod
                  |L1.10012|
                          DCD      bat_ips
                  |L1.10016|
                          DCD      net_av
                  |L1.10020|
                          DCD      SMART_SPC
                  |L1.10024|
                          DCD      sp_ch_stat
                  |L1.10028|
                          DCD      KB_ALGORITM
                  |L1.10032|
002730  2800              CMP      r0,#0                 ;2393
                  |L1.10034|
002732  d194              BNE      |L1.9822|
002734  f9b60008          LDRSH    r0,[r6,#8]            ;2395  ; bat
002738  f7fffffe          BL       abs
00273c  4ff9              LDR      r7,|L1.11044|
00273e  8038              STRH     r0,[r7,#0]            ;2395
002740  f9b60054          LDRSH    r0,[r6,#0x54]         ;2396  ; bat
002744  f7fffffe          BL       abs
002748  8078              STRH     r0,[r7,#2]            ;2396
00274a  f9ba0000          LDRSH    r0,[r10,#0]           ;2397  ; Ib_ips_termokompensat
00274e  f7fffffe          BL       abs
002752  f1a70a94          SUB      r10,r7,#0x94          ;2397
002756  f8aa005c          STRH     r0,[r10,#0x5c]        ;2397
00275a  f88a501c          STRB     r5,[r10,#0x1c]        ;2399
00275e  f9b80000          LDRSH    r0,[r8,#0]            ;2401  ; ibat
002762  f9b71000          LDRSH    r1,[r7,#0]            ;2401  ; ibat_
002766  4408              ADD      r0,r0,r1              ;2401
002768  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
00276c  4288              CMP      r0,r1                 ;2401
00276e  da02              BGE      |L1.10102|
002770  7820              LDRB     r0,[r4,#0]            ;2401  ; kb_start
002772  2801              CMP      r0,#1                 ;2401
002774  d032              BEQ      |L1.10204|
                  |L1.10102|
002776  f9b60002          LDRSH    r0,[r6,#2]            ;2405  ; bat
00277a  28c8              CMP      r0,#0xc8              ;2405
00277c  dd04              BLE      |L1.10120|
00277e  7025              STRB     r5,[r4,#0]            ;2407
002780  2100              MOVS     r1,#0                 ;2408
002782  4608              MOV      r0,r1                 ;2408
002784  f7fffffe          BL       avar_bat_hndl
                  |L1.10120|
002788  f9b80002          LDRSH    r0,[r8,#2]            ;2411  ; ibat
00278c  f9b71002          LDRSH    r1,[r7,#2]            ;2411  ; ibat_
002790  4408              ADD      r0,r0,r1              ;2411
002792  f9b91000          LDRSH    r1,[r9,#0]            ;2411  ; IKB
002796  4288              CMP      r0,r1                 ;2411
002798  da02              BGE      |L1.10144|
00279a  7860              LDRB     r0,[r4,#1]            ;2411  ; kb_start
00279c  2801              CMP      r0,#1                 ;2411
00279e  d020              BEQ      |L1.10210|
                  |L1.10144|
0027a0  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2415  ; bat
0027a4  28c8              CMP      r0,#0xc8              ;2415
0027a6  dd04              BLE      |L1.10162|
0027a8  7065              STRB     r5,[r4,#1]            ;2417
0027aa  2100              MOVS     r1,#0                 ;2418
0027ac  2001              MOVS     r0,#1                 ;2418
0027ae  f7fffffe          BL       avar_bat_hndl
                  |L1.10162|
0027b2  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2421  ; ibat_ips
0027b6  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2421  ; ibat_ips_
0027ba  4408              ADD      r0,r0,r1              ;2421
0027bc  f9b91000          LDRSH    r1,[r9,#0]            ;2421  ; IKB
0027c0  4288              CMP      r0,r1                 ;2421
0027c2  f6bfaf59          BGE      |L1.9848|
0027c6  f89a001d          LDRB     r0,[r10,#0x1d]        ;2421  ; kb_start_ips
0027ca  2801              CMP      r0,#1                 ;2421
0027cc  d1b1              BNE      |L1.10034|
0027ce  48d6              LDR      r0,|L1.11048|
0027d0  8800              LDRH     r0,[r0,#0]            ;2423  ; KB_ALGORITM
0027d2  2802              CMP      r0,#2                 ;2423
0027d4  d008              BEQ      |L1.10216|
0027d6  f88ab01c          STRB     r11,[r10,#0x1c]       ;2430
                  |L1.10202|
0027da  e740              B        |L1.9822|
                  |L1.10204|
0027dc  f88ab01c          STRB     r11,[r10,#0x1c]       ;2403
0027e0  e7d2              B        |L1.10120|
                  |L1.10210|
0027e2  f88ab01c          STRB     r11,[r10,#0x1c]       ;2413
0027e6  e7e4              B        |L1.10162|
                  |L1.10216|
0027e8  2001              MOVS     r0,#1                 ;2425
0027ea  f7fffffe          BL       avar_bat_ips_hndl
0027ee  f88a501d          STRB     r5,[r10,#0x1d]        ;2426
0027f2  e734              B        |L1.9822|
                  |L1.10228|
0027f4  7f08              LDRB     r0,[r1,#0x1c]         ;2437  ; kb_full_ver
0027f6  4688              MOV      r8,r1                 ;2437
0027f8  2800              CMP      r0,#0                 ;2437
0027fa  d0ee              BEQ      |L1.10202|
0027fc  230f              MOVS     r3,#0xf               ;2440
0027fe  2200              MOVS     r2,#0                 ;2440
002800  216e              MOVS     r1,#0x6e              ;2440
002802  20e1              MOVS     r0,#0xe1              ;2440
002804  f7fffffe          BL       mess_send
002808  f9b60008          LDRSH    r0,[r6,#8]            ;2442  ; bat
00280c  f7fffffe          BL       abs
002810  f9b91000          LDRSH    r1,[r9,#0]            ;2442  ; IKB
002814  4288              CMP      r0,r1                 ;2442
002816  dd07              BLE      |L1.10280|
002818  7820              LDRB     r0,[r4,#0]            ;2444  ; kb_start
00281a  2801              CMP      r0,#1                 ;2444
00281c  d104              BNE      |L1.10280|
00281e  7025              STRB     r5,[r4,#0]            ;2446
002820  2100              MOVS     r1,#0                 ;2447
002822  4608              MOV      r0,r1                 ;2447
002824  f7fffffe          BL       avar_bat_hndl
                  |L1.10280|
002828  f9b60054          LDRSH    r0,[r6,#0x54]         ;2451  ; bat
00282c  f7fffffe          BL       abs
002830  f9b91000          LDRSH    r1,[r9,#0]            ;2451  ; IKB
002834  4288              CMP      r0,r1                 ;2451
002836  dd06              BLE      |L1.10310|
002838  7860              LDRB     r0,[r4,#1]            ;2453  ; kb_start
00283a  2801              CMP      r0,#1                 ;2453
00283c  d103              BNE      |L1.10310|
00283e  7065              STRB     r5,[r4,#1]            ;2455
002840  2100              MOVS     r1,#0                 ;2456
002842  f7fffffe          BL       avar_bat_hndl
                  |L1.10310|
002846  f9ba0000          LDRSH    r0,[r10,#0]           ;2460  ; Ib_ips_termokompensat
00284a  f7fffffe          BL       abs
00284e  f9b91000          LDRSH    r1,[r9,#0]            ;2460  ; IKB
002852  4288              CMP      r0,r1                 ;2460
002854  dd08              BLE      |L1.10344|
002856  f898001d          LDRB     r0,[r8,#0x1d]         ;2462  ; kb_start_ips
00285a  2801              CMP      r0,#1                 ;2462
00285c  d104              BNE      |L1.10344|
00285e  f888501d          STRB     r5,[r8,#0x1d]         ;2464
002862  2000              MOVS     r0,#0                 ;2465
002864  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10344|
002868  7820              LDRB     r0,[r4,#0]            ;2470  ; kb_start
00286a  b930              CBNZ     r0,|L1.10362|
00286c  7860              LDRB     r0,[r4,#1]            ;2470  ; kb_start
00286e  b920              CBNZ     r0,|L1.10362|
002870  f898001d          LDRB     r0,[r8,#0x1d]         ;2470  ; kb_start_ips
002874  b908              CBNZ     r0,|L1.10362|
002876  f888501c          STRB     r5,[r8,#0x1c]         ;2472
                  |L1.10362|
00287a  20e6              MOVS     r0,#0xe6              ;2475
00287c  f7fffffe          BL       mess_find
002880  b118              CBZ      r0,|L1.10378|
002882  48aa              LDR      r0,|L1.11052|
002884  6800              LDR      r0,[r0,#0]            ;2475  ; mess_data
002886  28e7              CMP      r0,#0xe7              ;2475
002888  d00a              BEQ      |L1.10400|
                  |L1.10378|
00288a  48a9              LDR      r0,|L1.11056|
00288c  49a9              LDR      r1,|L1.11060|
00288e  f9b00000          LDRSH    r0,[r0,#0]            ;2475  ; USIGN
002892  f9b11000          LDRSH    r1,[r1,#0]            ;2475  ; load_U
002896  eb000080          ADD      r0,r0,r0,LSL #2       ;2475
00289a  ebb10f40          CMP      r1,r0,LSL #1          ;2475
                  |L1.10398|
00289e  da9c              BGE      |L1.10202|
                  |L1.10400|
0028a0  f888501c          STRB     r5,[r8,#0x1c]         ;2477
0028a4  7820              LDRB     r0,[r4,#0]            ;2478  ; kb_start
0028a6  4da4              LDR      r5,|L1.11064|
0028a8  2801              CMP      r0,#1                 ;2478
0028aa  d10f              BNE      |L1.10444|
0028ac  f9b90000          LDRSH    r0,[r9,#0]            ;2478  ; IKB
0028b0  f9b51000          LDRSH    r1,[r5,#0]            ;2478  ; load_I
0028b4  0040              LSLS     r0,r0,#1              ;2478
0028b6  fb90f0f7          SDIV     r0,r0,r7              ;2478
0028ba  4288              CMP      r0,r1                 ;2478
0028bc  da06              BGE      |L1.10444|
0028be  f896003d          LDRB     r0,[r6,#0x3d]         ;2478  ; bat
0028c2  07c0              LSLS     r0,r0,#31             ;2478
0028c4  d102              BNE      |L1.10444|
0028c6  2101              MOVS     r1,#1                 ;2478
0028c8  f7fffffe          BL       avar_bat_hndl
                  |L1.10444|
0028cc  7860              LDRB     r0,[r4,#1]            ;2479  ; kb_start
0028ce  2801              CMP      r0,#1                 ;2479
0028d0  d110              BNE      |L1.10484|
0028d2  f9b90000          LDRSH    r0,[r9,#0]            ;2479  ; IKB
0028d6  f9b51000          LDRSH    r1,[r5,#0]            ;2479  ; load_I
0028da  0040              LSLS     r0,r0,#1              ;2479
0028dc  fb90f0f7          SDIV     r0,r0,r7              ;2479
0028e0  4288              CMP      r0,r1                 ;2479
0028e2  da07              BGE      |L1.10484|
0028e4  f8960089          LDRB     r0,[r6,#0x89]         ;2479  ; bat
0028e8  07c0              LSLS     r0,r0,#31             ;2479
0028ea  d103              BNE      |L1.10484|
0028ec  2101              MOVS     r1,#1                 ;2479
0028ee  4608              MOV      r0,r1                 ;2479
0028f0  f7fffffe          BL       avar_bat_hndl
                  |L1.10484|
0028f4  f898001d          LDRB     r0,[r8,#0x1d]         ;2481  ; kb_start_ips
0028f8  2801              CMP      r0,#1                 ;2481
                  |L1.10490|
0028fa  f47faebd          BNE      |L1.9848|
0028fe  f9b90000          LDRSH    r0,[r9,#0]            ;2481  ; IKB
002902  f9b51000          LDRSH    r1,[r5,#0]            ;2481  ; load_I
002906  0040              LSLS     r0,r0,#1              ;2481
002908  fb90f0f7          SDIV     r0,r0,r7              ;2481
00290c  4288              CMP      r0,r1                 ;2481
00290e  dac6              BGE      |L1.10398|
002910  488a              LDR      r0,|L1.11068|
002912  f890003d          LDRB     r0,[r0,#0x3d]         ;2481  ; bat_ips
002916  07c0              LSLS     r0,r0,#31             ;2481
002918  d1ef              BNE      |L1.10490|
00291a  e8bd5ff0          POP      {r4-r12,lr}           ;2481
00291e  2001              MOVS     r0,#1                 ;2481
002920  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2487   
                          ENDP

                  samokalibr_init PROC
;;;2491   //-----------------------------------------------
;;;2492   void samokalibr_init(void)
002924  497f              LDR      r1,|L1.11044|
;;;2493   {
;;;2494   samokalibr_cnt=1785;
002926  f24060f9          MOV      r0,#0x6f9
00292a  f1a10194          SUB      r1,r1,#0x94
00292e  f8a10050          STRH     r0,[r1,#0x50]
;;;2495   }
002932  4770              BX       lr
;;;2496   //-----------------------------------------------
                          ENDP

                  samokalibr_hndl PROC
;;;2497   void samokalibr_hndl(void)
002934  4770              BX       lr
;;;2498   {
;;;2499   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2500   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2501   
;;;2502   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2503   	{
;;;2504   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2505   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2506   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2507   	} 
;;;2508   
;;;2509   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2510   	{
;;;2511   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2512   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2513   	
;;;2514   	}
;;;2515   #endif	 	
;;;2516   }
;;;2517   
                          ENDP

                  ubat_old_drv PROC
;;;2520   //-----------------------------------------------
;;;2521   void ubat_old_drv(void)
002936  b510              PUSH     {r4,lr}
;;;2522   {        
;;;2523   bat_u_old_cnt++;
002938  4c81              LDR      r4,|L1.11072|
00293a  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
00293c  f1000001          ADD      r0,r0,#1
002940  8020              STRH     r0,[r4,#0]
;;;2524   gran_ring(&bat_u_old_cnt,0,8);
002942  f04f0208          MOV      r2,#8
002946  f04f0100          MOV      r1,#0
00294a  4620              MOV      r0,r4
00294c  f7fffffe          BL       gran_ring
;;;2525   
;;;2526   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002950  497c              LDR      r1,|L1.11076|
002952  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002956  eb010040          ADD      r0,r1,r0,LSL #1
00295a  884a              LDRH     r2,[r1,#2]  ; bat
00295c  8402              STRH     r2,[r0,#0x20]
;;;2527   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
00295e  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002962  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2528   }
002966  bd10              POP      {r4,pc}
;;;2529   
                          ENDP

                  unet_drv PROC
;;;2530   //-----------------------------------------------
;;;2531   void unet_drv(void)
002968  e92d41f0          PUSH     {r4-r8,lr}
;;;2532   {
;;;2533   if(net_av_2min_timer)net_av_2min_timer--;
00296c  4976              LDR      r1,|L1.11080|
00296e  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002972  b110              CBZ      r0,|L1.10618|
002974  f1a00001          SUB      r0,r0,#1
002978  8008              STRH     r0,[r1,#0]
                  |L1.10618|
;;;2534   
;;;2535   if(net_U<UMN)
00297a  f8df81d0          LDR      r8,|L1.11084|
00297e  4874              LDR      r0,|L1.11088|
;;;2536   	{
;;;2537   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002980  4a75              LDR      r2,|L1.11096|
;;;2538   		{
;;;2539   		unet_drv_cnt++;
;;;2540   		if(unet_drv_cnt>=10)
;;;2541   			{
;;;2542   			net_Ustore=net_U;
;;;2543   		 	avar_unet_hndl(1);
;;;2544   			
;;;2545   			}
;;;2546   		}
;;;2547   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2548   
;;;2549   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2550   	}
;;;2551   
;;;2552   else if(net_U>UMN)
;;;2553   	{                 
;;;2554   	if(unet_drv_cnt)
;;;2555   		{
;;;2556   		unet_drv_cnt--;
;;;2557   		if(unet_drv_cnt<=0)
;;;2558   			{
;;;2559   			avar_unet_hndl(0);
;;;2560   			avar_bps_reset_cnt=10;
002982  4c68              LDR      r4,|L1.11044|
002984  f9b81000          LDRSH    r1,[r8,#0]            ;2535  ; net_U
002988  f9b03000          LDRSH    r3,[r0,#0]            ;2535  ; UMN
00298c  4e71              LDR      r6,|L1.11092|
00298e  f9920000          LDRSB    r0,[r2,#0]            ;2537
002992  250a              MOVS     r5,#0xa               ;2547
002994  3c94              SUBS     r4,r4,#0x94
002996  4299              CMP      r1,r3                 ;2535
002998  da1c              BGE      |L1.10708|
00299a  4f70              LDR      r7,|L1.11100|
00299c  280a              CMP      r0,#0xa               ;2537
00299e  da0e              BGE      |L1.10686|
0029a0  f9b63000          LDRSH    r3,[r6,#0]            ;2537  ; main_1Hz_cnt
0029a4  2b0f              CMP      r3,#0xf               ;2537
0029a6  dd0a              BLE      |L1.10686|
0029a8  f1000001          ADD      r0,r0,#1              ;2539
0029ac  b240              SXTB     r0,r0                 ;2539
0029ae  7010              STRB     r0,[r2,#0]            ;2539
0029b0  280a              CMP      r0,#0xa               ;2540
0029b2  db07              BLT      |L1.10692|
0029b4  8039              STRH     r1,[r7,#0]            ;2542
0029b6  2001              MOVS     r0,#1                 ;2543
0029b8  f7fffffe          BL       avar_unet_hndl
0029bc  e002              B        |L1.10692|
                  |L1.10686|
0029be  280a              CMP      r0,#0xa               ;2547
0029c0  db00              BLT      |L1.10692|
0029c2  7015              STRB     r5,[r2,#0]            ;2547
                  |L1.10692|
0029c4  f9b80000          LDRSH    r0,[r8,#0]            ;2549  ; net_U
0029c8  f9b71000          LDRSH    r1,[r7,#0]            ;2549  ; net_Ustore
0029cc  4288              CMP      r0,r1                 ;2549
0029ce  da0e              BGE      |L1.10734|
0029d0  8038              STRH     r0,[r7,#0]            ;2549
0029d2  e00c              B        |L1.10734|
                  |L1.10708|
0029d4  dd0b              BLE      |L1.10734|
0029d6  b150              CBZ      r0,|L1.10734|
0029d8  f1a00001          SUB      r0,r0,#1              ;2556
0029dc  b240              SXTB     r0,r0                 ;2556
0029de  7010              STRB     r0,[r2,#0]            ;2556
0029e0  2800              CMP      r0,#0                 ;2557
0029e2  dc04              BGT      |L1.10734|
0029e4  2000              MOVS     r0,#0                 ;2559
0029e6  f7fffffe          BL       avar_unet_hndl
0029ea  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10734|
;;;2561   			}
;;;2562   		}
;;;2563   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2564   	
;;;2565   	}
;;;2566   //#ifdef UKU_6U || UKU_ZVU
;;;2567   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2568   if(net_Umax>UMAXN) //o_11
0029ee  f8df8170          LDR      r8,|L1.11104|
0029f2  485c              LDR      r0,|L1.11108|
;;;2569   	{
;;;2570   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
0029f4  4a5c              LDR      r2,|L1.11112|
0029f6  f9b81000          LDRSH    r1,[r8,#0]            ;2568  ; net_Umax
0029fa  f9b00000          LDRSH    r0,[r0,#0]            ;2568  ; UMAXN
0029fe  4281              CMP      r1,r0                 ;2568
002a00  dd1e              BLE      |L1.10816|
002a02  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
;;;2571   		{
;;;2572   		unet_max_drv_cnt++;
;;;2573   		if(unet_max_drv_cnt>=10)
;;;2574   			{
;;;2575   			net_Ustore_max=net_Umax; //o_11
002a06  4f59              LDR      r7,|L1.11116|
002a08  280a              CMP      r0,#0xa               ;2570
002a0a  da0e              BGE      |L1.10794|
002a0c  f9b63000          LDRSH    r3,[r6,#0]            ;2570  ; main_1Hz_cnt
002a10  2b0f              CMP      r3,#0xf               ;2570
002a12  dd0a              BLE      |L1.10794|
002a14  f1000001          ADD      r0,r0,#1              ;2572
002a18  b240              SXTB     r0,r0                 ;2572
002a1a  7010              STRB     r0,[r2,#0]            ;2572
002a1c  280a              CMP      r0,#0xa               ;2573
002a1e  db07              BLT      |L1.10800|
002a20  8039              STRH     r1,[r7,#0]
;;;2576   		 	avar_unet_hndl(2);
002a22  2002              MOVS     r0,#2
002a24  f7fffffe          BL       avar_unet_hndl
002a28  e002              B        |L1.10800|
                  |L1.10794|
;;;2577   			
;;;2578   			}
;;;2579   		}
;;;2580   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002a2a  280a              CMP      r0,#0xa
002a2c  db00              BLT      |L1.10800|
002a2e  7015              STRB     r5,[r2,#0]
                  |L1.10800|
;;;2581   
;;;2582   	if(net_Umax>net_Ustore_max) net_Ustore_max=net_Umax; //o_11	
002a30  f9b80000          LDRSH    r0,[r8,#0]  ; net_Umax
002a34  f9b71000          LDRSH    r1,[r7,#0]  ; net_Ustore_max
002a38  4288              CMP      r0,r1
002a3a  dd10              BLE      |L1.10846|
002a3c  8038              STRH     r0,[r7,#0]
002a3e  e00e              B        |L1.10846|
                  |L1.10816|
;;;2583   	}
;;;2584   
;;;2585   else if(net_Umax<UMAXN) //o_11
002a40  da0d              BGE      |L1.10846|
;;;2586   	{                 
;;;2587   	if(unet_max_drv_cnt)
002a42  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002a46  b150              CBZ      r0,|L1.10846|
;;;2588   		{
;;;2589   		unet_max_drv_cnt--;
002a48  f1a00001          SUB      r0,r0,#1
002a4c  b240              SXTB     r0,r0
002a4e  7010              STRB     r0,[r2,#0]
;;;2590   		if(unet_max_drv_cnt<=0)
002a50  2800              CMP      r0,#0
002a52  dc04              BGT      |L1.10846|
;;;2591   			{
;;;2592   			avar_unet_hndl(4); //o_11
002a54  2004              MOVS     r0,#4
002a56  f7fffffe          BL       avar_unet_hndl
;;;2593   			avar_bps_reset_cnt=10;
002a5a  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10846|
;;;2594   			}
;;;2595   		}
;;;2596   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2597   	
;;;2598   	}
;;;2599   #endif /*UKU_6U*/
;;;2600   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a5e  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002a62  2800              CMP      r0,#0
002a64  d003              BEQ      |L1.10862|
002a66  f1a00001          SUB      r0,r0,#1
002a6a  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10862|
;;;2601   }
002a6e  e8bd81f0          POP      {r4-r8,pc}
;;;2602   
                          ENDP

                  matemat PROC
;;;2604   //-----------------------------------------------
;;;2605   void matemat(void)
002a72  e92d5fff          PUSH     {r0-r12,lr}
;;;2606   {
;;;2607   //signed short temp_SS;
;;;2608   signed long temp_SL/*,temp_SL_*/;
;;;2609   char /*temp,*/i;
;;;2610   //signed short temp_SS;
;;;2611   
;;;2612   #ifdef UKU_MGTS
;;;2613   //напряжение сети
;;;2614   temp_SL=(signed long)net_buff_;
;;;2615   temp_SL*=Kunet;
;;;2616   temp_SL/=110000L;
;;;2617   net_U=(signed short)temp_SL;
;;;2618   #endif
;;;2619   
;;;2620   #ifdef UKU_RSTKM
;;;2621   //напряжение сети
;;;2622   temp_SL=(signed long)net_buff_;
;;;2623   temp_SL*=Kunet;
;;;2624   temp_SL/=110000L;
;;;2625   net_U=(signed short)temp_SL;
;;;2626   #endif
;;;2627   
;;;2628   #ifdef UKU_3U
;;;2629   //напряжение сети
;;;2630   temp_SL=(signed long)net_buff_;
;;;2631   temp_SL*=Kunet;
;;;2632   temp_SL/=36000L;
;;;2633   net_U=(signed short)temp_SL;
;;;2634   #endif
;;;2635   
;;;2636   #ifdef UKU_6U
;;;2637   //напряжение сети
;;;2638   
;;;2639   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2640   	{
;;;2641   
;;;2642   	if(bps[11]._device==dNET_METR)
;;;2643   		{
;;;2644   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2645   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2646   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2647   
;;;2648   		temp_SL=(signed long)net_metr_buff_[0];
;;;2649   		temp_SL*=KunetA;
;;;2650   		temp_SL/=6000L;
;;;2651   		net_Ua=(signed short)temp_SL;
;;;2652   	
;;;2653   		temp_SL=(signed long)net_metr_buff_[1];
;;;2654   		temp_SL*=KunetB;
;;;2655   		temp_SL/=6000L;
;;;2656   		net_Ub=(signed short)temp_SL;
;;;2657   	
;;;2658   		temp_SL=(signed long)net_metr_buff_[2];
;;;2659   		temp_SL*=KunetC;
;;;2660   		temp_SL/=6000L;
;;;2661   		net_Uc=(signed short)temp_SL;
;;;2662   		}
;;;2663   	else
;;;2664   		{
;;;2665   		temp_SL=(signed long)net_buff_;
;;;2666   		temp_SL*=KunetA;
;;;2667   		temp_SL/=110000L;
;;;2668   		net_Ua=(signed short)temp_SL;
;;;2669   	
;;;2670   		temp_SL=(signed long)adc_buff_[3];
;;;2671   		temp_SL*=KunetB;
;;;2672   		temp_SL/=6000L;
;;;2673   		net_Ub=(signed short)temp_SL;
;;;2674   	
;;;2675   		temp_SL=(signed long)adc_buff_[10];
;;;2676   		temp_SL*=KunetC;
;;;2677   		temp_SL/=6000L;
;;;2678   		net_Uc=(signed short)temp_SL;
;;;2679   		}
;;;2680   
;;;2681   	net_U=net_Ua;
;;;2682   	if(net_Ub<net_U)net_U=net_Ub;
;;;2683   	if(net_Uc<net_U)net_U=net_Uc;
;;;2684   	//o_10_s
;;;2685   	net_Umax=net_Ua;
;;;2686   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2687   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2688   	//o_10_e
;;;2689   	}
;;;2690   else 
;;;2691   	{
;;;2692   	temp_SL=(signed long)net_buff_;
;;;2693   	temp_SL*=Kunet;
;;;2694   	temp_SL/=110000L;
;;;2695   	net_U=(signed short)temp_SL;
;;;2696   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2697   	}
;;;2698   
;;;2699   
;;;2700   
;;;2701   
;;;2702   #endif
;;;2703   
;;;2704   #ifdef UKU_GLONASS
;;;2705   //напряжение сети
;;;2706   temp_SL=(signed long)net_buff_;
;;;2707   temp_SL*=Kunet;
;;;2708   temp_SL/=110000L;
;;;2709   net_U=(signed short)temp_SL;
;;;2710   #endif
;;;2711   
;;;2712   #ifdef UKU_KONTUR
;;;2713   //напряжение сети
;;;2714   temp_SL=(signed long)net_buff_;
;;;2715   temp_SL*=Kunet;
;;;2716   temp_SL/=110000L;
;;;2717   net_U=(signed short)temp_SL;
;;;2718   #endif
;;;2719   
;;;2720   #ifdef IPS_SGEP_GAZPROM
;;;2721   //напряжение сети
;;;2722   temp_SL=(signed long)net_buff_;
;;;2723   temp_SL*=Kunet;
;;;2724   temp_SL/=110000L;
;;;2725   net_U=(signed short)temp_SL;
;;;2726   #endif
;;;2727   
;;;2728   #ifdef UKU_220_V2
;;;2729   //напряжение сети
;;;2730   
;;;2731   if(AUSW_MAIN==22033)
;;;2732   	{
;;;2733   	temp_SL=(signed long)net_buff_;
;;;2734   	temp_SL*=KunetA;
;;;2735   	temp_SL/=6000L;
;;;2736   	net_Ua=(signed short)temp_SL;
;;;2737   
;;;2738   	temp_SL=(signed long)adc_buff_[3];
;;;2739   	temp_SL*=KunetB;
;;;2740   	temp_SL/=6000L;
;;;2741   	net_Ub=(signed short)temp_SL;
;;;2742   
;;;2743   	temp_SL=(signed long)adc_buff_[10];
;;;2744   	temp_SL*=KunetC;
;;;2745   	temp_SL/=6000L;
;;;2746   	net_Uc=(signed short)temp_SL;
;;;2747   
;;;2748   	net_U=net_Ua;
;;;2749   	if(net_Ub<net_U)net_U=net_Ub;
;;;2750   	if(net_Uc<net_U)net_U=net_Uc;
;;;2751   	}
;;;2752   else
;;;2753   	{
;;;2754   	temp_SL=(signed long)net_buff_;
;;;2755   	temp_SL*=Kunet;
;;;2756   	temp_SL/=5000L;
;;;2757   	net_U=(signed short)temp_SL;
;;;2758   	}
;;;2759   #endif
;;;2760   
;;;2761   
;;;2762   #ifdef UKU_220
;;;2763   //напряжение сети
;;;2764   
;;;2765   if(AUSW_MAIN==22035)
;;;2766   	{
;;;2767   	temp_SL=(signed long)net_buff_;
;;;2768   	temp_SL*=KunetA;
;;;2769   	temp_SL/=6000L;
;;;2770   	net_Ua=(signed short)temp_SL;
;;;2771   
;;;2772   	temp_SL=(signed long)adc_buff_[3];
;;;2773   	temp_SL*=KunetB;
;;;2774   	temp_SL/=6000L;
;;;2775   	net_Ub=(signed short)temp_SL;
;;;2776   
;;;2777   	temp_SL=(signed long)adc_buff_[10];
;;;2778   	temp_SL*=KunetC;
;;;2779   	temp_SL/=6000L;
;;;2780   	net_Uc=(signed short)temp_SL;
;;;2781   
;;;2782   	net_U=net_Ua;
;;;2783   	if(net_Ub<net_U)net_U=net_Ub;
;;;2784   	if(net_Uc<net_U)net_U=net_Uc;
;;;2785   	}
;;;2786   else
;;;2787   	{
;;;2788   	temp_SL=(signed long)net_buff_;
;;;2789   	temp_SL*=Kunet;
;;;2790   	#ifdef _ACDC_
;;;2791   	temp_SL/=500L;
;;;2792   	#else
;;;2793   	temp_SL/=5000L;
;;;2794   	#endif
;;;2795   	net_U=(signed short)temp_SL;
;;;2796   	
;;;2797   	}
;;;2798   #endif
;;;2799   
;;;2800   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2801   //напряжение сети
;;;2802   
;;;2803   
;;;2804   	if(bps[11]._device==dNET_METR)
002a76  483e              LDR      r0,|L1.11120|
;;;2805   		{
;;;2806   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2807   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2808   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2809   
;;;2810   		temp_SL=(signed long)net_metr_buff_[2];
;;;2811   		temp_SL*=KunetA;
002a78  4a3e              LDR      r2,|L1.11124|
;;;2812   		temp_SL/=6000L;
;;;2813   		net_Ua=(signed short)temp_SL;
;;;2814   	
;;;2815   		temp_SL=(signed long)net_metr_buff_[1];
;;;2816   		temp_SL*=KunetB;
;;;2817   		temp_SL/=6000L;
;;;2818   		net_Ub=(signed short)temp_SL;
;;;2819   	
;;;2820   		temp_SL=(signed long)net_metr_buff_[0];
;;;2821   		temp_SL*=KunetC;
002a7a  4b40              LDR      r3,|L1.11132|
002a7c  f890044c          LDRB     r0,[r0,#0x44c]        ;2804  ; bps
002a80  9003              STR      r0,[sp,#0xc]          ;2811
002a82  493d              LDR      r1,|L1.11128|
;;;2822   		temp_SL/=6000L;
;;;2823   		net_Uc=(signed short)temp_SL;
;;;2824   
;;;2825   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2826   
;;;2827   		net_U=net_Ua;
;;;2828   		if(net_Ub<net_U)net_U=net_Ub;
;;;2829   		if(net_Uc<net_U)net_U=net_Uc;
;;;2830   		//o_10_s
;;;2831   		net_Umax=net_Ua;
;;;2832   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2833   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2834   		//o_10_e
;;;2835   		}
;;;2836   	  else if(AUSW_MAIN==22033)
;;;2837   	{
;;;2838   	temp_SL=(signed long)net_buff_;
002a84  4e27              LDR      r6,|L1.11044|
002a86  f9b28000          LDRSH    r8,[r2,#0]            ;2811
002a8a  f9b39000          LDRSH    r9,[r3,#0]            ;2821
002a8e  f9b12000          LDRSH    r2,[r1,#0]            ;2816
002a92  f8dfc0ec          LDR      r12,|L1.11136|
002a96  4d3b              LDR      r5,|L1.11140|
002a98  4c3b              LDR      r4,|L1.11144|
002a9a  4b31              LDR      r3,|L1.11104|
002a9c  3e94              SUBS     r6,r6,#0x94
002a9e  2807              CMP      r0,#7                 ;2804
002aa0  d079              BEQ      |L1.11158|
002aa2  4631              MOV      r1,r6
;;;2839   	temp_SL*=KunetA;
;;;2840   	temp_SL/=4000L;
;;;2841   	net_Ua=(signed short)temp_SL;
;;;2842   
;;;2843   	temp_SL=(signed long)adc_buff_[3];
002aa4  f8dfa0e8          LDR      r10,|L1.11152|
002aa8  8f4f              LDRH     r7,[r1,#0x3a]         ;2838
002aaa  4932              LDR      r1,|L1.11124|
002aac  4a32              LDR      r2,|L1.11128|
002aae  f2417970          MOV      r9,#0x1770            ;2812
002ab2  f9b11000          LDRSH    r1,[r1,#0]            ;2811
002ab6  f9b22000          LDRSH    r2,[r2,#0]            ;2816
002aba  434f              MULS     r7,r1,r7              ;2839
002abc  f9ba1006          LDRSH    r1,[r10,#6]
002ac0  4832              LDR      r0,|L1.11148|
;;;2844   	temp_SL*=KunetB;
002ac2  4351              MULS     r1,r2,r1
;;;2845   	temp_SL/=6000L;
002ac4  fb91f1f9          SDIV     r1,r1,r9
;;;2846   	net_Ub=(signed short)temp_SL;
002ac8  b20a              SXTH     r2,r1
;;;2847   
;;;2848   	temp_SL=(signed long)adc_buff_[10];
002aca  f9ba1014          LDRSH    r1,[r10,#0x14]
002ace  f8dfa0ac          LDR      r10,|L1.11132|
002ad2  8800              LDRH     r0,[r0,#0]            ;2836  ; AUSW_MAIN
002ad4  f2456811          MOV      r8,#0x5611            ;2836
002ad8  f9baa000          LDRSH    r10,[r10,#0]          ;2821
002adc  4540              CMP      r0,r8                 ;2836
;;;2849   	temp_SL*=KunetC;
002ade  fb01f10a          MUL      r1,r1,r10
;;;2850   	temp_SL/=6000L;
002ae2  fb91f1f9          SDIV     r1,r1,r9
;;;2851   	net_Uc=(signed short)temp_SL;
002ae6  b209              SXTH     r1,r1
002ae8  d17d              BNE      |L1.11238|
002aea  f44f607a          MOV      r0,#0xfa0             ;2840
002aee  fb97f0f0          SDIV     r0,r7,r0              ;2840
002af2  b200              SXTH     r0,r0                 ;2841
002af4  f8ac0000          STRH     r0,[r12,#0]           ;2841
002af8  802a              STRH     r2,[r5,#0]            ;2846
002afa  8021              STRH     r1,[r4,#0]
;;;2852   
;;;2853   	net_U=net_Ua;
002afc  4c13              LDR      r4,|L1.11084|
002afe  8020              STRH     r0,[r4,#0]
;;;2854   	if(net_Ub<net_U)net_U=net_Ub;
002b00  4282              CMP      r2,r0
002b02  da00              BGE      |L1.11014|
002b04  8022              STRH     r2,[r4,#0]
                  |L1.11014|
;;;2855   	if(net_Uc<net_U)net_U=net_Uc;
002b06  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002b0a  42a9              CMP      r1,r5
002b0c  da00              BGE      |L1.11024|
002b0e  8021              STRH     r1,[r4,#0]
                  |L1.11024|
;;;2856   	//o_10_s
;;;2857   	net_Umax=net_Ua;
002b10  8018              STRH     r0,[r3,#0]
;;;2858   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002b12  4282              CMP      r2,r0
002b14  dd00              BLE      |L1.11032|
002b16  801a              STRH     r2,[r3,#0]
                  |L1.11032|
;;;2859   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002b18  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002b1c  4281              CMP      r1,r0
002b1e  dd00              BLE      |L1.11042|
002b20  8019              STRH     r1,[r3,#0]
                  |L1.11042|
002b22  e0cf              B        |L1.11460|
                  |L1.11044|
                          DCD      ||area_number.18||+0x94
                  |L1.11048|
                          DCD      KB_ALGORITM
                  |L1.11052|
                          DCD      mess_data
                  |L1.11056|
                          DCD      USIGN
                  |L1.11060|
                          DCD      load_U
                  |L1.11064|
                          DCD      load_I
                  |L1.11068|
                          DCD      bat_ips
                  |L1.11072|
                          DCD      bat_u_old_cnt
                  |L1.11076|
                          DCD      bat
                  |L1.11080|
                          DCD      net_av_2min_timer
                  |L1.11084|
                          DCD      net_U
                  |L1.11088|
                          DCD      UMN
                  |L1.11092|
                          DCD      main_1Hz_cnt
                  |L1.11096|
                          DCD      unet_drv_cnt
                  |L1.11100|
                          DCD      net_Ustore
                  |L1.11104|
                          DCD      net_Umax
                  |L1.11108|
                          DCD      UMAXN
                  |L1.11112|
                          DCD      unet_max_drv_cnt
                  |L1.11116|
                          DCD      net_Ustore_max
                  |L1.11120|
                          DCD      bps
                  |L1.11124|
                          DCD      KunetA
                  |L1.11128|
                          DCD      KunetB
                  |L1.11132|
                          DCD      KunetC
                  |L1.11136|
                          DCD      net_Ua
                  |L1.11140|
                          DCD      net_Ub
                  |L1.11144|
                          DCD      net_Uc
                  |L1.11148|
                          DCD      AUSW_MAIN
                  |L1.11152|
                          DCD      ||.bss||+0x40c
002b94  e7ff              B        |L1.11158|
                  |L1.11158|
002b96  49f8              LDR      r1,|L1.12152|
002b98  7808              LDRB     r0,[r1,#0]            ;2806  ; bps
002b9a  784f              LDRB     r7,[r1,#1]            ;2806  ; bps
002b9c  eb002007          ADD      r0,r0,r7,LSL #8       ;2806
002ba0  4ff6              LDR      r7,|L1.12156|
002ba2  b280              UXTH     r0,r0                 ;2806
002ba4  8038              STRH     r0,[r7,#0]            ;2806
002ba6  f891a002          LDRB     r10,[r1,#2]           ;2807  ; bps
002baa  f891b003          LDRB     r11,[r1,#3]           ;2807  ; bps
002bae  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2807
002bb2  fa1ffa8a          UXTH     r10,r10               ;2807
002bb6  f8a7a002          STRH     r10,[r7,#2]           ;2807
002bba  f891b004          LDRB     r11,[r1,#4]           ;2808  ; bps
002bbe  f891e005          LDRB     lr,[r1,#5]            ;2808  ; bps
002bc2  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2808
002bc6  fa1ffb8b          UXTH     r11,r11               ;2808
002bca  f8a7b004          STRH     r11,[r7,#4]           ;2808
002bce  fb0bfb08          MUL      r11,r11,r8            ;2811
002bd2  f2417870          MOV      r8,#0x1770            ;2812
002bd6  fb9bf7f8          SDIV     r7,r11,r8             ;2812
002bda  b23f              SXTH     r7,r7                 ;2813
002bdc  f8ac7000          STRH     r7,[r12,#0]           ;2813
002be0  fb0afa02          MUL      r10,r10,r2            ;2816
002be4  e000              B        |L1.11240|
                  |L1.11238|
002be6  e023              B        |L1.11312|
                  |L1.11240|
002be8  fb9af2f8          SDIV     r2,r10,r8             ;2817
002bec  b212              SXTH     r2,r2                 ;2818
002bee  802a              STRH     r2,[r5,#0]            ;2818
002bf0  fb00f009          MUL      r0,r0,r9              ;2821
002bf4  fb90f0f8          SDIV     r0,r0,r8              ;2822
002bf8  b200              SXTH     r0,r0                 ;2823
002bfa  8020              STRH     r0,[r4,#0]            ;2823
002bfc  798c              LDRB     r4,[r1,#6]            ;2825  ; bps
002bfe  79c9              LDRB     r1,[r1,#7]            ;2825  ; bps
002c00  eb042401          ADD      r4,r4,r1,LSL #8       ;2825
002c04  49de              LDR      r1,|L1.12160|
002c06  800c              STRH     r4,[r1,#0]            ;2825
002c08  49de              LDR      r1,|L1.12164|
002c0a  800f              STRH     r7,[r1,#0]            ;2827
002c0c  42ba              CMP      r2,r7                 ;2828
002c0e  da00              BGE      |L1.11282|
002c10  800a              STRH     r2,[r1,#0]            ;2828
                  |L1.11282|
002c12  f9b14000          LDRSH    r4,[r1,#0]            ;2829  ; net_U
002c16  42a0              CMP      r0,r4                 ;2829
002c18  da00              BGE      |L1.11292|
002c1a  8008              STRH     r0,[r1,#0]            ;2829
                  |L1.11292|
002c1c  801f              STRH     r7,[r3,#0]            ;2831
002c1e  42ba              CMP      r2,r7                 ;2832
002c20  dd00              BLE      |L1.11300|
002c22  801a              STRH     r2,[r3,#0]            ;2832
                  |L1.11300|
002c24  f9b31000          LDRSH    r1,[r3,#0]            ;2833  ; net_Umax
002c28  4288              CMP      r0,r1                 ;2833
002c2a  dd4b              BLE      |L1.11460|
002c2c  8018              STRH     r0,[r3,#0]            ;2833
002c2e  e049              B        |L1.11460|
                  |L1.11312|
;;;2860   	//o_10_e
;;;2861   	}
;;;2862   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002c30  f5a048ac          SUB      r8,r0,#0x5600
002c34  f1b8082f          SUBS     r8,r8,#0x2f
002c38  d00b              BEQ      |L1.11346|
002c3a  f1180828          ADDS     r8,r8,#0x28
002c3e  d008              BEQ      |L1.11346|
002c40  f1b80814          SUBS     r8,r8,#0x14
002c44  d005              BEQ      |L1.11346|
002c46  f1b80801          SUBS     r8,r8,#1
002c4a  d002              BEQ      |L1.11346|
002c4c  f118081a          ADDS     r8,r8,#0x1a
002c50  d11c              BNE      |L1.11404|
                  |L1.11346|
;;;2863   	{
;;;2864   	temp_SL=(signed long)net_buff_;
;;;2865   	temp_SL*=KunetA;
;;;2866   	temp_SL/=40000L;
002c52  f6494040          MOV      r0,#0x9c40
002c56  fb97f0f0          SDIV     r0,r7,r0
;;;2867   	net_Ua=(signed short)temp_SL;
002c5a  b200              SXTH     r0,r0
002c5c  f8ac0000          STRH     r0,[r12,#0]
;;;2868   
;;;2869   	temp_SL=(signed long)adc_buff_[3];
;;;2870   	temp_SL*=KunetB;
;;;2871   	temp_SL/=6000L;
;;;2872   	net_Ub=(signed short)temp_SL;
002c60  802a              STRH     r2,[r5,#0]
;;;2873   
;;;2874   	temp_SL=(signed long)adc_buff_[10];
;;;2875   	temp_SL*=KunetC;
;;;2876   	temp_SL/=6000L;
;;;2877   	net_Uc=(signed short)temp_SL;
002c62  8021              STRH     r1,[r4,#0]
;;;2878   
;;;2879   	net_U=net_Ua;
002c64  4cc7              LDR      r4,|L1.12164|
002c66  8020              STRH     r0,[r4,#0]
;;;2880   	if(net_Ub<net_U)net_U=net_Ub;
002c68  4282              CMP      r2,r0
002c6a  da00              BGE      |L1.11374|
002c6c  8022              STRH     r2,[r4,#0]
                  |L1.11374|
;;;2881   	if(net_Uc<net_U)net_U=net_Uc;
002c6e  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002c72  42a9              CMP      r1,r5
002c74  da00              BGE      |L1.11384|
002c76  8021              STRH     r1,[r4,#0]
                  |L1.11384|
;;;2882   	//o_10_s
;;;2883   	net_Umax=net_Ua;
002c78  8018              STRH     r0,[r3,#0]
;;;2884   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002c7a  4282              CMP      r2,r0
002c7c  dd00              BLE      |L1.11392|
002c7e  801a              STRH     r2,[r3,#0]
                  |L1.11392|
;;;2885   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002c80  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002c84  4281              CMP      r1,r0
002c86  dd1d              BLE      |L1.11460|
002c88  8019              STRH     r1,[r3,#0]
002c8a  e01b              B        |L1.11460|
                  |L1.11404|
;;;2886   	//o_10_e
;;;2887   	}
;;;2888   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2889   	{
;;;2890   	temp_SL=(signed long)net_buff_;
;;;2891   	temp_SL*=Kunet;
002c8c  49be              LDR      r1,|L1.12168|
002c8e  f5a044aa          SUB      r4,r0,#0x5500         ;2888
002c92  f9b12000          LDRSH    r2,[r1,#0]
002c96  49b9              LDR      r1,|L1.12156|
002c98  39ec              SUBS     r1,r1,#0xec           ;2838
002c9a  8f49              LDRH     r1,[r1,#0x3a]         ;2838
002c9c  4351              MULS     r1,r2,r1
002c9e  3cfa              SUBS     r4,r4,#0xfa           ;2888
002ca0  d001              BEQ      |L1.11430|
002ca2  1e62              SUBS     r2,r4,#1              ;2888
002ca4  d107              BNE      |L1.11446|
                  |L1.11430|
;;;2892   	temp_SL/=35000L;
002ca6  f64800b8          MOV      r0,#0x88b8
002caa  fb91f0f0          SDIV     r0,r1,r0
;;;2893   	net_U=(signed short)temp_SL;
002cae  49b5              LDR      r1,|L1.12164|
002cb0  8008              STRH     r0,[r1,#0]
;;;2894   	net_Umax=net_U; //o_10
002cb2  8018              STRH     r0,[r3,#0]
002cb4  e006              B        |L1.11460|
                  |L1.11446|
;;;2895   	}
;;;2896   else
;;;2897   	{
;;;2898   	temp_SL=(signed long)net_buff_;
;;;2899   	temp_SL*=Kunet;
;;;2900   	#ifdef _ACDC_
;;;2901   	temp_SL/=500L;
002cb6  f44f70fa          MOV      r0,#0x1f4
002cba  fb91f0f0          SDIV     r0,r1,r0
;;;2902   	#else
;;;2903   	temp_SL/=5000L;
;;;2904   	#endif
;;;2905   	net_U=(signed short)temp_SL;
002cbe  49b1              LDR      r1,|L1.12164|
002cc0  8008              STRH     r0,[r1,#0]
;;;2906   	net_Umax=net_U; //o_10
002cc2  8018              STRH     r0,[r3,#0]
                  |L1.11460|
;;;2907   	
;;;2908   	}
;;;2909   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002cc4  9803              LDR      r0,[sp,#0xc]
002cc6  2807              CMP      r0,#7
002cc8  d003              BEQ      |L1.11474|
002cca  48b0              LDR      r0,|L1.12172|
002ccc  8801              LDRH     r1,[r0,#0]  ; net_F
002cce  48ac              LDR      r0,|L1.12160|
002cd0  8001              STRH     r1,[r0,#0]
                  |L1.11474|
;;;2910   #endif
;;;2911   
;;;2912   #ifdef UKU_TELECORE2015
;;;2913   //напряжение сети
;;;2914   temp_SL=(signed long)net_buff_;
;;;2915   temp_SL*=Kunet;
;;;2916   temp_SL/=110000L;
;;;2917   net_U=(signed short)temp_SL;
;;;2918   #endif
;;;2919   
;;;2920   #ifdef UKU_TELECORE2017
;;;2921   //напряжение сети
;;;2922   temp_SL=(signed long)net_buff_;
;;;2923   temp_SL*=Kunet;
;;;2924   temp_SL/=110000L;
;;;2925   net_U=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   //Напряжения батарей
;;;2929   temp_SL=(signed long)adc_buff_[0];
002cd2  4caf              LDR      r4,|L1.12176|
002cd4  f9b41000          LDRSH    r1,[r4,#0]  ; adc_buff_
;;;2930   temp_SL*=Kubat[0];
002cd8  4aae              LDR      r2,|L1.12180|
002cda  f9b20000          LDRSH    r0,[r2,#0]  ; Kubat
002cde  4348              MULS     r0,r1,r0
;;;2931   temp_SL/=2000L;
002ce0  f44f68fa          MOV      r8,#0x7d0
002ce4  fb90f0f8          SDIV     r0,r0,r8
;;;2932   bat[0]._Ub=(signed short)temp_SL;
002ce8  4dab              LDR      r5,|L1.12184|
002cea  8068              STRH     r0,[r5,#2]
;;;2933   
;;;2934   #ifdef UKU_220
;;;2935   //Напряжения батарей
;;;2936   temp_SL=(signed long)adc_buff_[0];
;;;2937   temp_SL*=Kubat[0];
;;;2938   temp_SL/=400L;
;;;2939   bat[0]._Ub=(signed short)temp_SL;
;;;2940   #endif
;;;2941   
;;;2942   #ifdef UKU_220_V2
;;;2943   //Напряжения батарей
;;;2944   temp_SL=(signed long)adc_buff_[0];
;;;2945   temp_SL*=Kubat[0];
;;;2946   temp_SL/=400L;
;;;2947   bat[0]._Ub=(signed short)temp_SL;
;;;2948   #endif
;;;2949   
;;;2950   //adc_buff_[4]=300;
;;;2951   
;;;2952   temp_SL=(signed long)adc_buff_[4];
002cec  f9b40008          LDRSH    r0,[r4,#8]  ; adc_buff_
;;;2953   temp_SL*=Kubatm[0];
002cf0  4baa              LDR      r3,|L1.12188|
002cf2  f9b31000          LDRSH    r1,[r3,#0]  ; Kubatm
002cf6  fb01f100          MUL      r1,r1,r0
;;;2954   temp_SL/=700L;
002cfa  f44f772f          MOV      r7,#0x2bc
002cfe  fb91f0f7          SDIV     r0,r1,r7
;;;2955   bat[0]._Ubm=(signed short)temp_SL;
002d02  80a8              STRH     r0,[r5,#4]
;;;2956   
;;;2957   #ifdef UKU_KONTUR
;;;2958   temp_SL=(signed long)adc_buff_[4];
;;;2959   temp_SL*=Kubatm[0];
;;;2960   temp_SL/=2000L;
;;;2961   bat[0]._Ubm=(signed short)temp_SL;
;;;2962   #endif
;;;2963   
;;;2964   #ifdef UKU_6U
;;;2965   temp_SL=(signed long)adc_buff_[4];
;;;2966   temp_SL*=Kubatm[0];
;;;2967   temp_SL/=2000L;
;;;2968   bat[0]._Ubm=(signed short)temp_SL;
;;;2969   #endif
;;;2970   
;;;2971   temp_SL=(signed long)adc_buff_[12];
002d04  f9b40018          LDRSH    r0,[r4,#0x18]  ; adc_buff_
;;;2972   temp_SL*=Kubat[1];
002d08  f9b21002          LDRSH    r1,[r2,#2]  ; Kubat
002d0c  fb01f100          MUL      r1,r1,r0
;;;2973   temp_SL/=2000L;
002d10  fb91f0f8          SDIV     r0,r1,r8
;;;2974   bat[1]._Ub=(signed short)temp_SL;
002d14  f8a5004e          STRH     r0,[r5,#0x4e]
;;;2975   
;;;2976   #ifdef UKU_220
;;;2977   temp_SL=(signed long)adc_buff_[12];
;;;2978   temp_SL*=Kubat[1];
;;;2979   temp_SL/=400L;
;;;2980   bat[1]._Ub=(signed short)temp_SL;
;;;2981   #endif
;;;2982   
;;;2983   #ifdef UKU_220_V2
;;;2984   temp_SL=(signed long)adc_buff_[12];
;;;2985   temp_SL*=Kubat[1];
;;;2986   temp_SL/=400L;
;;;2987   bat[1]._Ub=(signed short)temp_SL;
;;;2988   #endif
;;;2989   
;;;2990   //adc_buff_[1]=300;
;;;2991   
;;;2992   temp_SL=(signed long)adc_buff_[1];
002d18  f9b41002          LDRSH    r1,[r4,#2]  ; adc_buff_
;;;2993   temp_SL*=Kubatm[1];
002d1c  f9b30002          LDRSH    r0,[r3,#2]  ; Kubatm
002d20  fb00f001          MUL      r0,r0,r1
;;;2994   temp_SL/=700L;
002d24  fb90f0f7          SDIV     r0,r0,r7
;;;2995   bat[1]._Ubm=(signed short)temp_SL;
002d28  f8a50050          STRH     r0,[r5,#0x50]
;;;2996   #ifdef UKU_KONTUR
;;;2997   temp_SL=(signed long)adc_buff_[1];
;;;2998   temp_SL*=Kubatm[1];
;;;2999   temp_SL/=2000L;
;;;3000   bat[1]._Ubm=(signed short)temp_SL;
;;;3001   #endif
;;;3002   #ifdef UKU_6U
;;;3003   temp_SL=(signed long)adc_buff_[1];
;;;3004   temp_SL*=Kubatm[1];
;;;3005   temp_SL/=2000L;
;;;3006   bat[1]._Ubm=(signed short)temp_SL;
;;;3007   #endif
;;;3008   
;;;3009   #ifdef UKU_TELECORE2015
;;;3010   temp_SL=(signed long)adc_buff_[2];
;;;3011   temp_SL*=Kubat[0];
;;;3012   temp_SL/=2000L;
;;;3013   bat[0]._Ub=(signed short)temp_SL;
;;;3014   #endif
;;;3015   
;;;3016   /*
;;;3017   //Токи батарей
;;;3018   if(!mess_find_unvol(MESS2MATEMAT))
;;;3019   	{
;;;3020   	temp_SL=(signed long)ad7705_buff_[0];
;;;3021   	temp_SL-=(signed long)Kibat0[0];
;;;3022   	temp_SL*=(signed long)Kibat1[0];
;;;3023   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3024   	else temp_SL/=1000L;
;;;3025   	bat[0]._Ib=(signed short)temp_SL;
;;;3026   
;;;3027   	temp_SL=(signed long)ad7705_buff_[1];
;;;3028   	temp_SL-=(signed long)Kibat0[1];
;;;3029   	temp_SL*=(signed long)Kibat1[1];
;;;3030   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3031   	else temp_SL/=1000L;
;;;3032   	bat[1]._Ib=(signed short)temp_SL;
;;;3033   	}
;;;3034   */
;;;3035   
;;;3036   
;;;3037   //Токи батарей
;;;3038   if(!mess_find_unvol(MESS2MATEMAT))
002d2c  f04f00dc          MOV      r0,#0xdc
002d30  f7fffffe          BL       mess_find_unvol
;;;3039   	{
;;;3040   	temp_SL=(signed long)ad7705_buff_[0];
;;;3041   	temp_SL-=(signed long)Kibat0[0];
;;;3042   	temp_SL*=(signed long)Kibat1[0];
;;;3043   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3044   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d34  f2456913          MOV      r9,#0x5613
002d38  bbf0              CBNZ     r0,|L1.11704|
002d3a  f8dfa264          LDR      r10,|L1.12192|
002d3e  f8ba0000          LDRH     r0,[r10,#0]           ;3040  ; ad7705_buff_
002d42  f8dfb260          LDR      r11,|L1.12196|
002d46  f8bb1000          LDRH     r1,[r11,#0]           ;3041  ; Kibat0
002d4a  eba00001          SUB      r0,r0,r1              ;3041
002d4e  4a96              LDR      r2,|L1.12200|
002d50  f9b21000          LDRSH    r1,[r2,#0]            ;3042  ; Kibat1
002d54  fb01f100          MUL      r1,r1,r0              ;3042
002d58  4894              LDR      r0,|L1.12204|
002d5a  f6456338          MOV      r3,#0x5e38            ;3043
002d5e  f6456792          MOV      r7,#0x5e92            ;3043
002d62  8800              LDRH     r0,[r0,#0]            ;3043  ; AUSW_MAIN
002d64  f44f7c96          MOV      r12,#0x12c            ;3043
002d68  4298              CMP      r0,r3                 ;3043
002d6a  d001              BEQ      |L1.11632|
002d6c  42b8              CMP      r0,r7                 ;3043
002d6e  d102              BNE      |L1.11638|
                  |L1.11632|
002d70  fb91f1fc          SDIV     r1,r1,r12             ;3043
002d74  e010              B        |L1.11672|
                  |L1.11638|
002d76  f5a04ea8          SUB      lr,r0,#0x5400
002d7a  f5be7efd          SUBS     lr,lr,#0x1fa
002d7e  d004              BEQ      |L1.11658|
002d80  4548              CMP      r0,r9
002d82  d002              BEQ      |L1.11658|
002d84  f1be0e17          SUBS     lr,lr,#0x17
002d88  d102              BNE      |L1.11664|
                  |L1.11658|
002d8a  fb91f1f8          SDIV     r1,r1,r8
002d8e  e003              B        |L1.11672|
                  |L1.11664|
;;;3045   	else temp_SL/=1000L;
002d90  f44f7e7a          MOV      lr,#0x3e8
002d94  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11672|
;;;3046   	#ifdef UKU_TELECORE2015
;;;3047   	temp_SL/=2L;
;;;3048   	//temp_SL=-temp_SL;
;;;3049   	#endif
;;;3050   	//#ifdef UKU_TELECORE2017
;;;3051   	//temp_SL/=-2L;
;;;3052   	//temp_SL=-temp_SL;
;;;3053   	//#endif
;;;3054   	bat[0]._Ib=(signed short)temp_SL;
002d98  8129              STRH     r1,[r5,#8]
;;;3055   
;;;3056   	temp_SL=(signed long)ad7705_buff_[1];
002d9a  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3057   	temp_SL-=(signed long)Kibat0[1];
002d9e  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002da2  eba10a0a          SUB      r10,r1,r10
;;;3058   	temp_SL*=(signed long)Kibat1[1];
002da6  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002daa  fb01f10a          MUL      r1,r1,r10
;;;3059   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002dae  4298              CMP      r0,r3
002db0  d001              BEQ      |L1.11702|
002db2  42b8              CMP      r0,r7
002db4  d104              BNE      |L1.11712|
                  |L1.11702|
002db6  e000              B        |L1.11706|
                  |L1.11704|
002db8  e013              B        |L1.11746|
                  |L1.11706|
002dba  fb91f0fc          SDIV     r0,r1,r12
002dbe  e00e              B        |L1.11742|
                  |L1.11712|
;;;3060   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002dc0  f5a042aa          SUB      r2,r0,#0x5500
002dc4  3afa              SUBS     r2,r2,#0xfa
002dc6  d003              BEQ      |L1.11728|
002dc8  4548              CMP      r0,r9
002dca  d001              BEQ      |L1.11728|
002dcc  3a17              SUBS     r2,r2,#0x17
002dce  d102              BNE      |L1.11734|
                  |L1.11728|
002dd0  fb91f0f8          SDIV     r0,r1,r8
002dd4  e003              B        |L1.11742|
                  |L1.11734|
;;;3061   	else temp_SL/=1000L;
002dd6  f44f707a          MOV      r0,#0x3e8
002dda  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11742|
;;;3062   	bat[1]._Ib=(signed short)temp_SL;
002dde  f8a50054          STRH     r0,[r5,#0x54]
                  |L1.11746|
;;;3063   	}
;;;3064   
;;;3065   
;;;3066   
;;;3067   
;;;3068   
;;;3069   //Температуры батарей
;;;3070   
;;;3071   #ifdef UKU_KONTUR
;;;3072   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3073   else bat[0]._nd=1;
;;;3074   temp_SL=(signed long)adc_buff_[6];
;;;3075   temp_SL*=Ktbat[0];
;;;3076   temp_SL/=20000L;
;;;3077   temp_SL-=273L;
;;;3078   bat[0]._Tb=(signed short)temp_SL;
;;;3079   #else
;;;3080   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002de2  f9b4000c          LDRSH    r0,[r4,#0xc]  ; adc_buff_
002de6  f64031b7          MOV      r1,#0xbb7
002dea  4684              MOV      r12,r0
002dec  f2a03021          SUB      r0,r0,#0x321
;;;3081   else bat[0]._nd=1;
002df0  2701              MOVS     r7,#1
002df2  2300              MOVS     r3,#0                 ;3080
002df4  9002              STR      r0,[sp,#8]            ;3080
002df6  4288              CMP      r0,r1                 ;3080
002df8  d201              BCS      |L1.11774|
002dfa  732b              STRB     r3,[r5,#0xc]          ;3080
002dfc  e000              B        |L1.11776|
                  |L1.11774|
002dfe  732f              STRB     r7,[r5,#0xc]
                  |L1.11776|
;;;3082   temp_SL=(signed long)adc_buff_[6];
;;;3083   temp_SL*=Ktbat[0];
002e00  4a6b              LDR      r2,|L1.12208|
002e02  f9b20000          LDRSH    r0,[r2,#0]  ; Ktbat
002e06  fb00f00c          MUL      r0,r0,r12
;;;3084   temp_SL/=20000L;
002e0a  f6446a20          MOV      r10,#0x4e20
002e0e  fb90f0fa          SDIV     r0,r0,r10
;;;3085   temp_SL-=273L;
002e12  f2a01011          SUB      r0,r0,#0x111
;;;3086   bat[0]._Tb=(signed short)temp_SL;
002e16  8168              STRH     r0,[r5,#0xa]
;;;3087   #endif
;;;3088   
;;;3089   #ifdef UKU_KONTUR
;;;3090   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3091   else bat[1]._nd=1;
;;;3092   temp_SL=(signed long)adc_buff_[7];
;;;3093   temp_SL*=Ktbat[1];
;;;3094   temp_SL/=20000L;
;;;3095   temp_SL-=273L;
;;;3096   bat[1]._Tb=(signed short)temp_SL;
;;;3097   #else
;;;3098   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002e18  f9b4000e          LDRSH    r0,[r4,#0xe]  ; adc_buff_
002e1c  f64031b7          MOV      r1,#0xbb7
002e20  f2a03b21          SUB      r11,r0,#0x321
002e24  458b              CMP      r11,r1
002e26  d202              BCS      |L1.11822|
002e28  f8853058          STRB     r3,[r5,#0x58]
002e2c  e001              B        |L1.11826|
                  |L1.11822|
;;;3099   else bat[1]._nd=1;
002e2e  f8857058          STRB     r7,[r5,#0x58]
                  |L1.11826|
;;;3100   temp_SL=(signed long)adc_buff_[7];
;;;3101   temp_SL*=Ktbat[1];
002e32  f9b21002          LDRSH    r1,[r2,#2]  ; Ktbat
002e36  4341              MULS     r1,r0,r1
;;;3102   temp_SL/=20000L;
002e38  f6446020          MOV      r0,#0x4e20
002e3c  fb91f0f0          SDIV     r0,r1,r0
;;;3103   temp_SL-=273L;
002e40  f2a01011          SUB      r0,r0,#0x111
;;;3104   bat[1]._Tb=(signed short)temp_SL;
002e44  4954              LDR      r1,|L1.12184|
002e46  f8a10056          STRH     r0,[r1,#0x56]
;;;3105   #endif
;;;3106   
;;;3107   #ifdef UKU_6U
;;;3108   
;;;3109   if(NUMMAKB==2)
;;;3110   	{
;;;3111   	if(makb[0]._cnt<5)
;;;3112   		{
;;;3113   		if(makb[0]._T_nd[0]==0)
;;;3114   			{
;;;3115   			bat[0]._Tb=makb[0]._T[0];
;;;3116   			bat[0]._nd=0;
;;;3117   			}
;;;3118   		}
;;;3119   
;;;3120   	if(makb[1]._cnt<5)
;;;3121   		{
;;;3122   		if(makb[1]._T_nd[0]==0)
;;;3123   			{
;;;3124   			bat[1]._Tb=makb[1]._T[0];
;;;3125   			bat[1]._nd=0;
;;;3126   			}
;;;3127   		}
;;;3128   
;;;3129   	}
;;;3130   else if(NUMMAKB==4)
;;;3131   	{
;;;3132   	signed short temp_t;
;;;3133   	temp_t=-20;
;;;3134   	if(makb[0]._cnt<5)
;;;3135   		{
;;;3136   		if(makb[0]._T_nd[0]==0)
;;;3137   			{
;;;3138   			temp_t=makb[0]._T[0];
;;;3139   			bat[0]._nd=0;
;;;3140   			}
;;;3141   		}
;;;3142   	if(makb[1]._cnt<5)
;;;3143   		{
;;;3144   		if(makb[1]._T_nd[0]==0)
;;;3145   			{
;;;3146   			if(temp_t<makb[1]._T[0])
;;;3147   				{
;;;3148   				bat[0]._nd=0;
;;;3149   				temp_t=makb[1]._T[0];
;;;3150   				}
;;;3151   			}
;;;3152   		}
;;;3153   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3154   
;;;3155    	temp_t=-20;
;;;3156   	if(makb[2]._cnt<5)
;;;3157   		{
;;;3158   		if(makb[2]._T_nd[0]==0)
;;;3159   			{
;;;3160   			temp_t=makb[2]._T[0];
;;;3161   			bat[1]._nd=0;
;;;3162   			}
;;;3163   		}
;;;3164   	if(makb[3]._cnt<5)
;;;3165   		{
;;;3166   		if(makb[3]._T_nd[0]==0)
;;;3167   			{
;;;3168   			if(temp_t<makb[3]._T[0])
;;;3169   				{
;;;3170   				bat[1]._nd=0;
;;;3171   				temp_t=makb[3]._T[0];
;;;3172   				}
;;;3173   			}
;;;3174   		}
;;;3175   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3176   	}
;;;3177   
;;;3178   #endif
;;;3179   
;;;3180   
;;;3181   //Напряжение нагрузки
;;;3182   temp_SL=(signed long)adc_buff_[2];
002e4a  f9b41004          LDRSH    r1,[r4,#4]  ; adc_buff_
;;;3183   temp_SL*=Kuload;
002e4e  4859              LDR      r0,|L1.12212|
002e50  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002e54  fb01f000          MUL      r0,r1,r0
;;;3184   temp_SL/=2000L;
002e58  f44f62fa          MOV      r2,#0x7d0
002e5c  fb90f0f2          SDIV     r0,r0,r2
;;;3185   load_U=(signed short)temp_SL;
002e60  f8dfb154          LDR      r11,|L1.12216|
002e64  f8ab0000          STRH     r0,[r11,#0]
;;;3186   
;;;3187   #ifdef UKU_220 
;;;3188   //Напряжение нагрузки
;;;3189   temp_SL=(signed long)adc_buff_[2];
;;;3190   temp_SL*=Kuload;
;;;3191   temp_SL/=350L;
;;;3192   load_U=(signed short)temp_SL;
;;;3193   #endif
;;;3194   
;;;3195   #ifdef UKU_220_V2 
;;;3196   //Напряжение нагрузки
;;;3197   temp_SL=(signed long)adc_buff_[2];
;;;3198   temp_SL*=Kuload;
;;;3199   temp_SL/=350L;
;;;3200   load_U=(signed short)temp_SL;
;;;3201   #endif
;;;3202   
;;;3203   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3204   //Напряжение шины
;;;3205   temp_SL=(signed long)adc_buff_[1];
002e68  f9b42002          LDRSH    r2,[r4,#2]  ; adc_buff_
;;;3206   temp_SL*=Kuout;
002e6c  4853              LDR      r0,|L1.12220|
002e6e  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002e72  fb02f200          MUL      r2,r2,r0
;;;3207   if(AUSW_MAIN==22010)temp_SL/=400L;
002e76  484d              LDR      r0,|L1.12204|
002e78  f24555fa          MOV      r5,#0x55fa
002e7c  f44f78c8          MOV      r8,#0x190
002e80  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002e82  42a8              CMP      r0,r5
002e84  d102              BNE      |L1.11916|
002e86  fb92f2f8          SDIV     r2,r2,r8
002e8a  e003              B        |L1.11924|
                  |L1.11916|
;;;3208   else temp_SL/=500L;
002e8c  f44f7afa          MOV      r10,#0x1f4
002e90  fb92f2fa          SDIV     r2,r2,r10
                  |L1.11924|
;;;3209   out_U=(signed short)temp_SL;
002e94  fa0ffa82          SXTH     r10,r2
002e98  4a49              LDR      r2,|L1.12224|
002e9a  f8a2a000          STRH     r10,[r2,#0]
;;;3210   load_U=out_U;
002e9e  f8aba000          STRH     r10,[r11,#0]
;;;3211   
;;;3212   //Напряжение выпрямителей
;;;3213   temp_SL=(signed long)adc_buff_[2];
;;;3214   temp_SL*=Kubps;
002ea2  4a48              LDR      r2,|L1.12228|
002ea4  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002ea8  fb01f102          MUL      r1,r1,r2
;;;3215   if(AUSW_MAIN==22010)temp_SL/=400L;
002eac  d102              BNE      |L1.11956|
002eae  fb91f1f8          SDIV     r1,r1,r8
002eb2  e003              B        |L1.11964|
                  |L1.11956|
;;;3216   else temp_SL/=500L;
002eb4  f44f72fa          MOV      r2,#0x1f4
002eb8  fb91f1f2          SDIV     r1,r1,r2
                  |L1.11964|
;;;3217   bps_U=(signed short)temp_SL;
002ebc  4d42              LDR      r5,|L1.12232|
002ebe  b209              SXTH     r1,r1
002ec0  8029              STRH     r1,[r5,#0]
;;;3218   
;;;3219   if(bps_U<100)
;;;3220   	{
;;;3221   	char i;
;;;3222   	for(i=0;i<NUMIST;i++)
002ec2  f8dfe108          LDR      lr,|L1.12236|
002ec6  2964              CMP      r1,#0x64              ;3219
002ec8  da17              BGE      |L1.12026|
002eca  f04f0100          MOV      r1,#0
002ece  f9be8000          LDRSH    r8,[lr,#0]
002ed2  f8dfb0fc          LDR      r11,|L1.12240|
002ed6  e00e              B        |L1.12022|
                  |L1.11992|
;;;3223   		{
;;;3224   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002ed8  eb0102c1          ADD      r2,r1,r1,LSL #3
002edc  eb021201          ADD      r2,r2,r1,LSL #4
002ee0  eb0b0282          ADD      r2,r11,r2,LSL #2
002ee4  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002ee8  6a12              LDR      r2,[r2,#0x20]
002eea  42a2              CMP      r2,r4
002eec  dd00              BLE      |L1.12016|
002eee  802a              STRH     r2,[r5,#0]
                  |L1.12016|
002ef0  f1010101          ADD      r1,r1,#1              ;3222
002ef4  b2c9              UXTB     r1,r1                 ;3222
                  |L1.12022|
002ef6  4541              CMP      r1,r8                 ;3222
002ef8  dbee              BLT      |L1.11992|
                  |L1.12026|
;;;3225   		}
;;;3226   	}
;;;3227   
;;;3228   //Суммарный ток выпрямителей
;;;3229   temp_SL=0;
002efa  f04f0500          MOV      r5,#0
;;;3230   for (i=0;i<NUMIST;i++)
002efe  4629              MOV      r1,r5
002f00  f9be2000          LDRSH    r2,[lr,#0]            ;3222
002f04  4c32              LDR      r4,|L1.12240|
002f06  e00b              B        |L1.12064|
                  |L1.12040|
;;;3231   	{
;;;3232   	temp_SL+=((signed long)bps[i]._Ii);
002f08  eb0108c1          ADD      r8,r1,r1,LSL #3
002f0c  eb081801          ADD      r8,r8,r1,LSL #4
002f10  eb040888          ADD      r8,r4,r8,LSL #2
002f14  f8d88024          LDR      r8,[r8,#0x24]
002f18  4445              ADD      r5,r5,r8
002f1a  f1010101          ADD      r1,r1,#1              ;3230
002f1e  b2c9              UXTB     r1,r1                 ;3230
                  |L1.12064|
002f20  4291              CMP      r1,r2                 ;3230
002f22  dbf1              BLT      |L1.12040|
;;;3233   	}
;;;3234   bps_I=(signed short)temp_SL;
002f24  492b              LDR      r1,|L1.12244|
002f26  800d              STRH     r5,[r1,#0]
;;;3235   
;;;3236   
;;;3237   #endif
;;;3238   
;;;3239   
;;;3240   #ifdef UKU_KONTUR
;;;3241   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3242   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3243   else ND_EXT[0]=1;
;;;3244   temp_SL=(signed long)adc_buff_[5];
;;;3245   temp_SL*=Ktext[0];
;;;3246   temp_SL/=20000L;
;;;3247   temp_SL-=273L;
;;;3248   t_ext[0]=(signed short)temp_SL;
;;;3249   #else 
;;;3250   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3251   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002f28  4919              LDR      r1,|L1.12176|
002f2a  f6403bb7          MOV      r11,#0xbb7
002f2e  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
002f32  4929              LDR      r1,|L1.12248|
002f34  f2a53821          SUB      r8,r5,#0x321
002f38  f8cd8004          STR      r8,[sp,#4]
002f3c  45d8              CMP      r8,r11
002f3e  d201              BCS      |L1.12100|
002f40  700b              STRB     r3,[r1,#0]
002f42  e000              B        |L1.12102|
                  |L1.12100|
;;;3252   else ND_EXT[0]=1;
002f44  700f              STRB     r7,[r1,#0]
                  |L1.12102|
;;;3253   temp_SL=(signed long)adc_buff_[5];
;;;3254   temp_SL*=Ktext[0];
002f46  f8df8094          LDR      r8,|L1.12252|
002f4a  f9b88000          LDRSH    r8,[r8,#0]  ; Ktext
002f4e  fb08fb05          MUL      r11,r8,r5
;;;3255   temp_SL/=20000L;
002f52  f6446e20          MOV      lr,#0x4e20
002f56  fb9bfbfe          SDIV     r11,r11,lr
;;;3256   temp_SL-=273L;
002f5a  f2ab1b11          SUB      r11,r11,#0x111
;;;3257   t_ext[0]=(signed short)temp_SL;
002f5e  f8dfe080          LDR      lr,|L1.12256|
002f62  f8aeb000          STRH     r11,[lr,#0]
;;;3258   /*
;;;3259   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3260   else ND_EXT[1]=1;
;;;3261   temp_SL=(signed long)adc_buff_[6];
;;;3262   temp_SL*=Ktext[1];
;;;3263   temp_SL/=20000L;
;;;3264   temp_SL-=273L;
;;;3265   t_ext[1]=(signed short)temp_SL;	*/
;;;3266   #endif
;;;3267   
;;;3268   #ifdef UKU_220
;;;3269   
;;;3270   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3271   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3272   else ND_EXT[1]=1;
;;;3273   temp_SL=(signed long)adc_buff_[3];
;;;3274   temp_SL*=Ktext[1];
;;;3275   temp_SL/=20000L;
;;;3276   temp_SL-=273L;
;;;3277   t_ext[1]=(signed short)temp_SL;
;;;3278   
;;;3279   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3280   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3281   else ND_EXT[2]=1;
;;;3282   temp_SL=(signed long)adc_buff_[10];
;;;3283   temp_SL*=Ktext[2];
;;;3284   temp_SL/=20000L;
;;;3285   temp_SL-=273L;
;;;3286   t_ext[2]=(signed short)temp_SL;
;;;3287   
;;;3288   #else
;;;3289   
;;;3290   
;;;3291   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3292   
;;;3293   //Внешний датчик температуры 
;;;3294   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002f66  f8dde008          LDR      lr,[sp,#8]
002f6a  f6403bb7          MOV      r11,#0xbb7
002f6e  45de              CMP      lr,r11
002f70  d238              BCS      |L1.12260|
002f72  700b              STRB     r3,[r1,#0]
002f74  e037              B        |L1.12262|
002f76  0000              DCW      0x0000
                  |L1.12152|
                          DCD      bps+0x452
                  |L1.12156|
                          DCD      ||area_number.18||+0xec
                  |L1.12160|
                          DCD      net_F3
                  |L1.12164|
                          DCD      net_U
                  |L1.12168|
                          DCD      Kunet
                  |L1.12172|
                          DCD      net_F
                  |L1.12176|
                          DCD      ||.bss||+0x40c
                  |L1.12180|
                          DCD      Kubat
                  |L1.12184|
                          DCD      bat
                  |L1.12188|
                          DCD      Kubatm
                  |L1.12192|
                          DCD      ad7705_buff_
                  |L1.12196|
                          DCD      Kibat0
                  |L1.12200|
                          DCD      Kibat1
                  |L1.12204|
                          DCD      AUSW_MAIN
                  |L1.12208|
                          DCD      Ktbat
                  |L1.12212|
                          DCD      Kuload
                  |L1.12216|
                          DCD      load_U
                  |L1.12220|
                          DCD      Kuout
                  |L1.12224|
                          DCD      out_U
                  |L1.12228|
                          DCD      Kubps
                  |L1.12232|
                          DCD      bps_U
                  |L1.12236|
                          DCD      NUMIST
                  |L1.12240|
                          DCD      bps
                  |L1.12244|
                          DCD      bps_I
                  |L1.12248|
                          DCD      ND_EXT
                  |L1.12252|
                          DCD      Ktext
                  |L1.12256|
                          DCD      t_ext
                  |L1.12260|
;;;3295   else ND_EXT[0]=1;
002fe4  700f              STRB     r7,[r1,#0]
                  |L1.12262|
;;;3296   temp_SL=(signed long)adc_buff_[6];
;;;3297   temp_SL*=Ktext[0];
002fe6  fb08f80c          MUL      r8,r8,r12
;;;3298   temp_SL/=20000L;
002fea  f6446e20          MOV      lr,#0x4e20
002fee  fb98f8fe          SDIV     r8,r8,lr
;;;3299   temp_SL-=273L;
002ff2  f2a81811          SUB      r8,r8,#0x111
;;;3300   t_ext[0]=(signed short)temp_SL;
002ff6  f8dfc410          LDR      r12,|L1.13320|
002ffa  f8ac8000          STRH     r8,[r12,#0]
;;;3301   
;;;3302   //Внешний датчик температуры №2
;;;3303   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002ffe  f8dd8004          LDR      r8,[sp,#4]
003002  45d8              CMP      r8,r11
003004  d201              BCS      |L1.12298|
003006  704b              STRB     r3,[r1,#1]
003008  e000              B        |L1.12300|
                  |L1.12298|
;;;3304   else ND_EXT[1]=1;
00300a  704f              STRB     r7,[r1,#1]
                  |L1.12300|
;;;3305   temp_SL=(signed long)adc_buff_[5];
;;;3306   temp_SL*=Ktext[1];
00300c  4fff              LDR      r7,|L1.13324|
00300e  f9b77002          LDRSH    r7,[r7,#2]  ; Ktext
003012  436f              MULS     r7,r5,r7
;;;3307   temp_SL/=20000L;
003014  fb97f5fe          SDIV     r5,r7,lr
;;;3308   temp_SL-=273L;
003018  f2a51511          SUB      r5,r5,#0x111
;;;3309   t_ext[1]=(signed short)temp_SL;
00301c  4ffa              LDR      r7,|L1.13320|
00301e  b22d              SXTH     r5,r5
003020  807d              STRH     r5,[r7,#2]
003022  9500              STR      r5,[sp,#0]
;;;3310   #else
;;;3311   
;;;3312   
;;;3313   
;;;3314   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3315   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3316   else ND_EXT[1]=1;
;;;3317   temp_SL=(signed long)adc_buff_[6];
;;;3318   temp_SL*=Ktext[1];
;;;3319   temp_SL/=20000L;
;;;3320   temp_SL-=273L;
;;;3321   t_ext[1]=(signed short)temp_SL;
;;;3322   
;;;3323   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3324   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3325   else ND_EXT[2]=1;
;;;3326   temp_SL=(signed long)adc_buff_[3];
;;;3327   temp_SL*=Ktext[2];
;;;3328   temp_SL/=20000L;
;;;3329   temp_SL-=273L;
;;;3330   t_ext[2]=(signed short)temp_SL;
;;;3331   
;;;3332   #endif
;;;3333   #endif
;;;3334   
;;;3335   #ifdef UKU_220_V2
;;;3336   
;;;3337   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3338   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3339   else ND_EXT[1]=1;
;;;3340   temp_SL=(signed long)adc_buff_[3];
;;;3341   temp_SL*=Ktext[1];
;;;3342   temp_SL/=20000L;
;;;3343   temp_SL-=273L;
;;;3344   t_ext[1]=(signed short)temp_SL;
;;;3345   
;;;3346   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3347   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3348   else ND_EXT[2]=1;
;;;3349   temp_SL=(signed long)adc_buff_[10];
;;;3350   temp_SL*=Ktext[2];
;;;3351   temp_SL/=20000L;
;;;3352   temp_SL-=273L;
;;;3353   t_ext[2]=(signed short)temp_SL;
;;;3354   
;;;3355   #else
;;;3356   
;;;3357   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3358   //Ток батареи
;;;3359   if(bps[8]._device==dIBAT_METR)
003024  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3360   	{
;;;3361   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3362   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3363   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3364   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3365   	if(!bIBAT_SMKLBR)
;;;3366   		{
;;;3367   		signed long temp_SL;
;;;3368   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3369   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3370   		temp_SL*=(signed long)Kibat1[0];
;;;3371   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3372   	
;;;3373   		Ib_ips_termokompensat =(signed short)temp_SL;
003028  f8dfc3e4          LDR      r12,|L1.13328|
00302c  2d09              CMP      r5,#9                 ;3359
00302e  d157              BNE      |L1.12512|
003030  f8945326          LDRB     r5,[r4,#0x326]        ;3361  ; bps
003034  f8947327          LDRB     r7,[r4,#0x327]        ;3361  ; bps
003038  f8df83d8          LDR      r8,|L1.13332|
00303c  eb052507          ADD      r5,r5,r7,LSL #8       ;3361
003040  f8c85000          STR      r5,[r8,#0]            ;3361  ; ibat_metr_buff_
003044  f8947328          LDRB     r7,[r4,#0x328]        ;3362  ; bps
003048  f894b329          LDRB     r11,[r4,#0x329]       ;3362  ; bps
00304c  eb07270b          ADD      r7,r7,r11,LSL #8      ;3362
003050  f8c87004          STR      r7,[r8,#4]            ;3362  ; ibat_metr_buff_
003054  f894832a          LDRB     r8,[r4,#0x32a]        ;3363  ; bps
003058  f894b32b          LDRB     r11,[r4,#0x32b]       ;3363  ; bps
00305c  eb08280b          ADD      r8,r8,r11,LSL #8      ;3363
003060  fa0ffb88          SXTH     r11,r8                ;3363
003064  f8df83b0          LDR      r8,|L1.13336|
003068  f8a8b000          STRH     r11,[r8,#0]           ;3363
00306c  f8df83ac          LDR      r8,|L1.13340|
003070  f1bb0f00          CMP      r11,#0                ;3364
003074  d003              BEQ      |L1.12414|
003076  f04f0b32          MOV      r11,#0x32             ;3364
00307a  f8a8b000          STRH     r11,[r8,#0]           ;3364
                  |L1.12414|
00307e  d12f              BNE      |L1.12512|
003080  eba50707          SUB      r7,r5,r7              ;3369
003084  4de6              LDR      r5,|L1.13344|
003086  f9b55000          LDRSH    r5,[r5,#0]            ;3370  ; Kibat1
00308a  fb05f507          MUL      r5,r5,r7              ;3370
00308e  f5a047aa          SUB      r7,r0,#0x5500         ;3371
003092  3ffa              SUBS     r7,r7,#0xfa           ;3371
003094  d00d              BEQ      |L1.12466|
003096  1e7f              SUBS     r7,r7,#1              ;3371
003098  d00b              BEQ      |L1.12466|
00309a  4548              CMP      r0,r9                 ;3371
00309c  d009              BEQ      |L1.12466|
00309e  3f16              SUBS     r7,r7,#0x16           ;3371
0030a0  d007              BEQ      |L1.12466|
0030a2  3f1e              SUBS     r7,r7,#0x1e           ;3371
0030a4  d005              BEQ      |L1.12466|
0030a6  3728              ADDS     r7,r7,#0x28           ;3371
0030a8  d003              BEQ      |L1.12466|
0030aa  3f14              SUBS     r7,r7,#0x14           ;3371
0030ac  d001              BEQ      |L1.12466|
0030ae  1e7f              SUBS     r7,r7,#1              ;3371
0030b0  d103              BNE      |L1.12474|
                  |L1.12466|
0030b2  f44f67fa          MOV      r7,#0x7d0             ;3371
0030b6  fb95f5f7          SDIV     r5,r5,r7              ;3371
                  |L1.12474|
0030ba  b22f              SXTH     r7,r5
0030bc  f8ac7000          STRH     r7,[r12,#0]
;;;3374   		if(bIBAT_SMKLBR_cnt)
0030c0  f9b85000          LDRSH    r5,[r8,#0]  ; bIBAT_SMKLBR_cnt
;;;3375   			{
;;;3376   			bIBAT_SMKLBR_cnt--;
;;;3377   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0030c4  f8df935c          LDR      r9,|L1.13348|
0030c8  b145              CBZ      r5,|L1.12508|
0030ca  f1a50501          SUB      r5,r5,#1              ;3376
0030ce  f8a85000          STRH     r5,[r8,#0]            ;3376
0030d2  f8b95000          LDRH     r5,[r9,#0]  ; Ib_ips_termokompensat_temp
0030d6  f8ac5000          STRH     r5,[r12,#0]
0030da  e001              B        |L1.12512|
                  |L1.12508|
;;;3378   			}
;;;3379   		else 
;;;3380   			{
;;;3381   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0030dc  f8a97000          STRH     r7,[r9,#0]
                  |L1.12512|
;;;3382   			}
;;;3383   		}
;;;3384   	}
;;;3385   
;;;3386   bat[0]._Ub=load_U;
0030e0  4dd1              LDR      r5,|L1.13352|
0030e2  f8a5a002          STRH     r10,[r5,#2]
;;;3387   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0030e6  f5a047ac          SUB      r7,r0,#0x5600
0030ea  3f02              SUBS     r7,#2
0030ec  d103              BNE      |L1.12534|
0030ee  8928              LDRH     r0,[r5,#8]  ; bat
0030f0  f8ac0000          STRH     r0,[r12,#0]
0030f4  e002              B        |L1.12540|
                  |L1.12534|
;;;3388   else bat[0]._Ib=Ib_ips_termokompensat;
0030f6  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0030fa  8128              STRH     r0,[r5,#8]
                  |L1.12540|
;;;3389   
;;;3390   #endif
;;;3391   #endif
;;;3392   
;;;3393   
;;;3394   #ifdef UKU_TELECORE2015
;;;3395   
;;;3396   //Внешний датчик температуры №1
;;;3397   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3398   else ND_EXT[0]=1;
;;;3399   temp_SL=(signed long)adc_buff_[7];
;;;3400   temp_SL*=Ktext[0];
;;;3401   temp_SL/=20000L;
;;;3402   temp_SL-=273L;
;;;3403   t_ext[0]=(signed short)temp_SL;
;;;3404   
;;;3405   
;;;3406   //Внешний датчик температуры №2
;;;3407   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3408   else ND_EXT[1]=1;
;;;3409   temp_SL=(signed long)adc_buff_[6];
;;;3410   temp_SL*=Ktext[1];
;;;3411   temp_SL/=20000L;
;;;3412   temp_SL-=273L;
;;;3413   t_ext[1]=(signed short)temp_SL;
;;;3414   
;;;3415   #endif
;;;3416   
;;;3417   #ifdef UKU_TELECORE2017
;;;3418   
;;;3419   //Внешний датчик температуры №1
;;;3420   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3421   else ND_EXT[0]=1;
;;;3422   temp_SL=(signed long)adc_buff_[7];
;;;3423   temp_SL*=Ktext[0];
;;;3424   temp_SL/=20000L;
;;;3425   temp_SL-=273L;
;;;3426   t_ext[0]=(signed short)temp_SL;
;;;3427   
;;;3428   
;;;3429   //Внешний датчик температуры №2
;;;3430   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3431   else ND_EXT[1]=1;
;;;3432   temp_SL=(signed long)adc_buff_[6];
;;;3433   temp_SL*=Ktext[1];
;;;3434   temp_SL/=20000L;
;;;3435   temp_SL-=273L;
;;;3436   t_ext[1]=(signed short)temp_SL;
;;;3437   
;;;3438   #endif
;;;3439   
;;;3440   //напряжение ввода
;;;3441   temp_SL=(signed long)adc_buff_ext_[0];
0030fc  f8df832c          LDR      r8,|L1.13356|
003100  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3442   temp_SL*=Kunet_ext[0];
003104  f8df9328          LDR      r9,|L1.13360|
003108  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
00310c  4378              MULS     r0,r7,r0
;;;3443   temp_SL/=4000L;
00310e  f44f6b7a          MOV      r11,#0xfa0
003112  fb90f0fb          SDIV     r0,r0,r11
;;;3444   Uvv[0]=(signed short)temp_SL;
003116  4fc7              LDR      r7,|L1.13364|
003118  b280              UXTH     r0,r0
00311a  8038              STRH     r0,[r7,#0]
;;;3445   if(Uvv[0]<100) Uvv0=Uvv[0];
00311c  f8dfe318          LDR      lr,|L1.13368|
003120  2864              CMP      r0,#0x64
003122  d202              BCS      |L1.12586|
003124  f8ae0000          STRH     r0,[lr,#0]
003128  e003              B        |L1.12594|
                  |L1.12586|
;;;3446   else Uvv0=net_U;
00312a  48c4              LDR      r0,|L1.13372|
00312c  8800              LDRH     r0,[r0,#0]  ; net_U
00312e  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12594|
;;;3447   
;;;3448   //напряжение пэс
;;;3449   temp_SL=(signed long)adc_buff_ext_[1];
003132  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3450   temp_SL*=Kunet_ext[1];
003136  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
00313a  fb00f008          MUL      r0,r0,r8
;;;3451   temp_SL/=4000L;
00313e  fb90f0fb          SDIV     r0,r0,r11
;;;3452   Uvv[1]=(signed short)temp_SL;
003142  8078              STRH     r0,[r7,#2]
;;;3453   
;;;3454   
;;;3455   //напряжение ввода трехфазное
;;;3456   temp_SL=(signed long)eb2_data_short[0];
003144  4fbe              LDR      r7,|L1.13376|
003146  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3457   temp_SL*=Kvv_eb2[0];
00314a  f8df82f8          LDR      r8,|L1.13380|
00314e  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
003152  fb09f900          MUL      r9,r9,r0
;;;3458   temp_SL/=6000L;
003156  f2417070          MOV      r0,#0x1770
00315a  fb99fbf0          SDIV     r11,r9,r0
;;;3459   Uvv_eb2[0]=(signed short)temp_SL;
00315e  f8df92e8          LDR      r9,|L1.13384|
003162  f8a9b000          STRH     r11,[r9,#0]
;;;3460   
;;;3461   temp_SL=(signed long)eb2_data_short[1];
003166  f9b7e002          LDRSH    lr,[r7,#2]  ; eb2_data_short
;;;3462   temp_SL*=Kvv_eb2[1];
00316a  f9b8b002          LDRSH    r11,[r8,#2]  ; Kvv_eb2
00316e  fb0bfb0e          MUL      r11,r11,lr
;;;3463   temp_SL/=6000L;
003172  fb9bfbf0          SDIV     r11,r11,r0
;;;3464   Uvv_eb2[1]=(signed short)temp_SL;
003176  f8a9b002          STRH     r11,[r9,#2]
;;;3465   
;;;3466   temp_SL=(signed long)eb2_data_short[2];
00317a  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3467   temp_SL*=Kvv_eb2[2];
00317e  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
003182  fb08f80b          MUL      r8,r8,r11
;;;3468   temp_SL/=6000L;
003186  fb98f8f0          SDIV     r8,r8,r0
;;;3469   Uvv_eb2[2]=(signed short)temp_SL;
00318a  f8a98004          STRH     r8,[r9,#4]
;;;3470   
;;;3471   //напряжение пэс трехфазное
;;;3472   temp_SL=(signed long)eb2_data_short[3];
00318e  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3473   temp_SL*=Kpes_eb2[0];
003192  f8df82b8          LDR      r8,|L1.13388|
003196  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
00319a  fb09f90b          MUL      r9,r9,r11
;;;3474   temp_SL/=6000L;
00319e  fb99fbf0          SDIV     r11,r9,r0
;;;3475   Upes_eb2[0]=(signed short)temp_SL;
0031a2  f8df92ac          LDR      r9,|L1.13392|
0031a6  f8a9b000          STRH     r11,[r9,#0]
;;;3476   
;;;3477   temp_SL=(signed long)eb2_data_short[4];
0031aa  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3478   temp_SL*=Kpes_eb2[1];
0031ae  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
0031b2  fb0bfb0e          MUL      r11,r11,lr
;;;3479   temp_SL/=6000L;
0031b6  fb9bfbf0          SDIV     r11,r11,r0
;;;3480   Upes_eb2[1]=(signed short)temp_SL;
0031ba  f8a9b002          STRH     r11,[r9,#2]
;;;3481   
;;;3482   temp_SL=(signed long)eb2_data_short[5];
0031be  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3483   temp_SL*=Kpes_eb2[2];
0031c2  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
0031c6  fb07f70b          MUL      r7,r7,r11
;;;3484   temp_SL/=6000L;
0031ca  fb97f0f0          SDIV     r0,r7,r0
;;;3485   Upes_eb2[2]=(signed short)temp_SL;
0031ce  f8a90004          STRH     r0,[r9,#4]
;;;3486   
;;;3487   //Вычисление температуры шкафа
;;;3488   
;;;3489   ibt._T[0]=t_ext[1]+273;
0031d2  9f00              LDR      r7,[sp,#0]
0031d4  f8dfb27c          LDR      r11,|L1.13396|
0031d8  f2071711          ADD      r7,r7,#0x111
0031dc  488a              LDR      r0,|L1.13320|
0031de  fa0ff887          SXTH     r8,r7
0031e2  f8ab8000          STRH     r8,[r11,#0]
;;;3490   ibt._T[1]=t_ext[2]+273;
0031e6  8880              LDRH     r0,[r0,#4]  ; t_ext
0031e8  f2001011          ADD      r0,r0,#0x111
0031ec  fa0ff980          SXTH     r9,r0
0031f0  f8ab9002          STRH     r9,[r11,#2]
;;;3491   
;;;3492   ibt._nd[0]=ND_EXT[1];
0031f4  784f              LDRB     r7,[r1,#1]  ; ND_EXT
0031f6  f88b7008          STRB     r7,[r11,#8]
;;;3493   ibt._nd[1]=ND_EXT[2];
0031fa  7888              LDRB     r0,[r1,#2]  ; ND_EXT
0031fc  f88b0009          STRB     r0,[r11,#9]
;;;3494   
;;;3495   #ifndef UKU_TELECORE2015
;;;3496   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3497   	{
;;;3498   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003200  4995              LDR      r1,|L1.13400|
003202  b907              CBNZ     r7,|L1.12806|
003204  b110              CBZ      r0,|L1.12812|
                  |L1.12806|
;;;3499   	}
;;;3500   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
003206  2f01              CMP      r7,#1
003208  d00a              BEQ      |L1.12832|
00320a  e00a              B        |L1.12834|
                  |L1.12812|
00320c  eb080009          ADD      r0,r8,r9              ;3498
003210  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3498
003214  f46f7788          MVN      r7,#0x110             ;3498
003218  eb070060          ADD      r0,r7,r0,ASR #1       ;3498
00321c  8008              STRH     r0,[r1,#0]            ;3498
00321e  e01e              B        |L1.12894|
                  |L1.12832|
003220  b108              CBZ      r0,|L1.12838|
                  |L1.12834|
;;;3501   	{
;;;3502   	t_box=ibt._T[1]-273;
;;;3503   	}
;;;3504   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003222  b12f              CBZ      r7,|L1.12848|
003224  e006              B        |L1.12852|
                  |L1.12838|
003226  f2a91911          SUB      r9,r9,#0x111          ;3502
00322a  f8a19000          STRH     r9,[r1,#0]            ;3502
00322e  e016              B        |L1.12894|
                  |L1.12848|
003230  2801              CMP      r0,#1
003232  d002              BEQ      |L1.12858|
                  |L1.12852|
;;;3505   	{
;;;3506   	t_box=ibt._T[0]-273;
;;;3507   	}
;;;3508   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003234  2f01              CMP      r7,#1
003236  d005              BEQ      |L1.12868|
003238  e011              B        |L1.12894|
                  |L1.12858|
00323a  f2a81811          SUB      r8,r8,#0x111          ;3506
00323e  f8a18000          STRH     r8,[r1,#0]            ;3506
003242  e00c              B        |L1.12894|
                  |L1.12868|
003244  2801              CMP      r0,#1
003246  d10a              BNE      |L1.12894|
;;;3509   	{
;;;3510   	if(t_ext_can_nd<5)t_box= t_ext_can;
003248  4884              LDR      r0,|L1.13404|
00324a  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
00324c  2805              CMP      r0,#5
00324e  d203              BCS      |L1.12888|
003250  4883              LDR      r0,|L1.13408|
003252  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003254  8008              STRH     r0,[r1,#0]
003256  e002              B        |L1.12894|
                  |L1.12888|
;;;3511   	else t_box=20;
003258  f04f0014          MOV      r0,#0x14
00325c  8008              STRH     r0,[r1,#0]
                  |L1.12894|
;;;3512   	}
;;;3513   #endif
;;;3514   /*
;;;3515   //Вычисление температуры шкафа
;;;3516   
;;;3517   ibt._T[0]=bat[0]._Tb+273;
;;;3518   ibt._T[1]=bat[1]._Tb+273;
;;;3519   ibt._T[2]=t_ext[1]+273;
;;;3520   ibt._T[3]=t_ext[2]+273;
;;;3521   
;;;3522   ibt._nd[0]=bat[0]._nd;
;;;3523   ibt._nd[1]=bat[1]._nd;
;;;3524   ibt._nd[2]=ND_EXT[1];
;;;3525   ibt._nd[3]=ND_EXT[2];
;;;3526   
;;;3527   ibt._avg1=0;
;;;3528   ibt._avg_cnt=4;
;;;3529   
;;;3530   if(ibt._nd[0]==0)
;;;3531   	{
;;;3532   	ibt._avg1+=ibt._T[0];
;;;3533   	}
;;;3534   else 
;;;3535   	{
;;;3536   	ibt._avg_cnt--;
;;;3537   	}
;;;3538   
;;;3539   if(ibt._nd[1]==0)
;;;3540   	{
;;;3541   	ibt._avg1+=ibt._T[1];
;;;3542   	}
;;;3543   else 
;;;3544   	{
;;;3545   	ibt._avg_cnt--;
;;;3546   	}
;;;3547   
;;;3548   if(ibt._nd[2]==0)
;;;3549   	{
;;;3550   	ibt._avg1+=ibt._T[2];
;;;3551   	}
;;;3552   else 
;;;3553   	{
;;;3554   	ibt._avg_cnt--;
;;;3555   	}
;;;3556   
;;;3557   if(ibt._nd[3]==0)
;;;3558   	{
;;;3559   	ibt._avg1+=ibt._T[3];
;;;3560   	}
;;;3561   else 
;;;3562   	{
;;;3563   	ibt._avg_cnt--;
;;;3564   	}
;;;3565   
;;;3566   if(ibt._avg_cnt==0)
;;;3567   	{
;;;3568   	}
;;;3569   else
;;;3570   	{
;;;3571   	ibt._avg1/=ibt._avg_cnt;
;;;3572   	}
;;;3573   
;;;3574   
;;;3575   if(ibt._nd[0]!=0)
;;;3576   	{
;;;3577   	ibt._T_dispers[0]=0;
;;;3578   	}
;;;3579   else 
;;;3580   	{
;;;3581   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3582   	}
;;;3583   
;;;3584   if(ibt._nd[1]!=0)
;;;3585   	{
;;;3586   	ibt._T_dispers[1]=0;
;;;3587   	}
;;;3588   else 
;;;3589   	{
;;;3590   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3591   	}
;;;3592   
;;;3593   if(ibt._nd[2]!=0)
;;;3594   	{
;;;3595   	ibt._T_dispers[2]=0;
;;;3596   	}
;;;3597   else 
;;;3598   	{
;;;3599   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3600   	}
;;;3601   
;;;3602   if(ibt._nd[3]!=0)
;;;3603   	{
;;;3604   	ibt._T_dispers[3]=0;
;;;3605   	}
;;;3606   else 
;;;3607   	{
;;;3608   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3609   	}
;;;3610   
;;;3611   if(	ibt._nd[0]&&
;;;3612   	ibt._nd[1]&&
;;;3613   	ibt._nd[2]&&
;;;3614   	ibt._nd[3]
;;;3615   	)
;;;3616   	{
;;;3617   	t_box=(bps[0]._Ti);
;;;3618   	}
;;;3619   
;;;3620   else if(	ibt._nd[0]||
;;;3621   	ibt._nd[1]||
;;;3622   	ibt._nd[2]||
;;;3623   	ibt._nd[3]
;;;3624   	)
;;;3625   	{
;;;3626   	t_box=(ibt._avg1-273);
;;;3627   	}
;;;3628   else 
;;;3629   	{
;;;3630   	ibt._max_dispers_num=0;
;;;3631   	ibt._max_dispers=ibt._T_dispers[0];
;;;3632   
;;;3633   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3634   		{
;;;3635   		ibt._max_dispers_num=1;
;;;3636   		ibt._max_dispers=ibt._T_dispers[1];
;;;3637   		}
;;;3638   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3639   		{
;;;3640   		ibt._max_dispers_num=2;
;;;3641   		ibt._max_dispers=ibt._T_dispers[2];
;;;3642   		}
;;;3643   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3644   		{
;;;3645   		ibt._max_dispers_num=3;
;;;3646   		ibt._max_dispers=ibt._T_dispers[3];
;;;3647   		}
;;;3648   
;;;3649   	ibt._avg2=0;
;;;3650   
;;;3651   	if(ibt._max_dispers_num!=0)
;;;3652   		{
;;;3653   		ibt._avg2+=ibt._T[0];
;;;3654   		}
;;;3655   	if(ibt._max_dispers_num!=1)
;;;3656   		{
;;;3657   		ibt._avg2+=ibt._T[1];
;;;3658   		}
;;;3659   	if(ibt._max_dispers_num!=2)
;;;3660   		{
;;;3661   		ibt._avg2+=ibt._T[2];
;;;3662   		}
;;;3663   	if(ibt._max_dispers_num!=3)
;;;3664   		{
;;;3665   		ibt._avg2+=ibt._T[3];
;;;3666   		}
;;;3667   
;;;3668   	t_box=(ibt._avg2/3)-273;
;;;3669   
;;;3670   	}*/
;;;3671   
;;;3672   
;;;3673   //*********************************************
;;;3674   
;;;3675   #ifndef TELECORE
;;;3676   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
00325e  4881              LDR      r0,|L1.13412|
003260  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
003262  2955              CMP      r1,#0x55
003264  d105              BNE      |L1.12914|
003266  f1ba0fc8          CMP      r10,#0xc8
00326a  dd02              BLE      |L1.12914|
00326c  8929              LDRH     r1,[r5,#8]  ; bat
00326e  f8a6104a          STRH     r1,[r6,#0x4a]
                  |L1.12914|
;;;3677   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003272  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
003274  2855              CMP      r0,#0x55
003276  d10b              BNE      |L1.12944|
003278  f9b5004e          LDRSH    r0,[r5,#0x4e]  ; bat
00327c  28c8              CMP      r0,#0xc8
00327e  dd07              BLE      |L1.12944|
003280  f9b50054          LDRSH    r0,[r5,#0x54]  ; bat
003284  f9b51008          LDRSH    r1,[r5,#8]  ; bat
003288  4288              CMP      r0,r1
00328a  dd01              BLE      |L1.12944|
00328c  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12944|
;;;3678   #endif
;;;3679   
;;;3680   #ifdef TELECORE
;;;3681   Ibmax=0;
;;;3682   /*
;;;3683   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3684   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3685   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3686   */
;;;3687   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3688   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3689   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3690   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3691   #endif
;;;3692   //Ibmax=bat[0]._Ib;
;;;3693   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3694   
;;;3695   #ifdef UKU_TELECORE2017
;;;3696   Ibmax=0;
;;;3697   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3698   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3699   #endif
;;;3700   
;;;3701   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3702   Ibmax=Ib_ips_termokompensat;
003290  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
003294  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3703   #endif
;;;3704   for(i=0;i<NUMIST;i++)
003298  f04f0100          MOV      r1,#0
00329c  e02f              B        |L1.13054|
                  |L1.12958|
;;;3705   	{
;;;3706   	if(bps[i]._cnt<25)
00329e  eb0100c1          ADD      r0,r1,r1,LSL #3
0032a2  eb001001          ADD      r0,r0,r1,LSL #4
0032a6  eb040080          ADD      r0,r4,r0,LSL #2
0032aa  78c6              LDRB     r6,[r0,#3]
0032ac  2e19              CMP      r6,#0x19
0032ae  d21c              BCS      |L1.13034|
;;;3707        	{
;;;3708        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0032b0  7986              LDRB     r6,[r0,#6]
0032b2  79c7              LDRB     r7,[r0,#7]
0032b4  eb062607          ADD      r6,r6,r7,LSL #8
0032b8  6246              STR      r6,[r0,#0x24]
;;;3709        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0032ba  7a06              LDRB     r6,[r0,#8]
0032bc  7a47              LDRB     r7,[r0,#9]
0032be  eb062607          ADD      r6,r6,r7,LSL #8
0032c2  6206              STR      r6,[r0,#0x20]
;;;3710        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0032c4  7a86              LDRB     r6,[r0,#0xa]
0032c6  7ac7              LDRB     r7,[r0,#0xb]
0032c8  eb062607          ADD      r6,r6,r7,LSL #8
0032cc  61c6              STR      r6,[r0,#0x1c]
;;;3711        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0032ce  7b06              LDRB     r6,[r0,#0xc]
0032d0  6286              STR      r6,[r0,#0x28]
;;;3712        	bps[i]._adr_ee=bps[i]._buff[7];
0032d2  7b46              LDRB     r6,[r0,#0xd]
0032d4  f8806056          STRB     r6,[r0,#0x56]
;;;3713        	bps[i]._flags_tm=bps[i]._buff[8];
0032d8  7b86              LDRB     r6,[r0,#0xe]
0032da  f8806042          STRB     r6,[r0,#0x42]
;;;3714   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0032de  7c06              LDRB     r6,[r0,#0x10]
0032e0  7c47              LDRB     r7,[r0,#0x11]
0032e2  eb062607          ADD      r6,r6,r7,LSL #8
0032e6  6506              STR      r6,[r0,#0x50]
0032e8  e006              B        |L1.13048|
                  |L1.13034|
;;;3715        	} 
;;;3716   	else 
;;;3717        	{
;;;3718        	bps[i]._Uii=0; 
0032ea  61c3              STR      r3,[r0,#0x1c]
;;;3719        	bps[i]._Ii=0;
0032ec  6243              STR      r3,[r0,#0x24]
;;;3720        	bps[i]._Uin=0;
0032ee  6203              STR      r3,[r0,#0x20]
;;;3721        	bps[i]._Ti=0;
0032f0  6283              STR      r3,[r0,#0x28]
;;;3722        	bps[i]._flags_tm=0; 
0032f2  f8803042          STRB     r3,[r0,#0x42]
;;;3723   	     bps[i]._rotor=0;    
0032f6  6503              STR      r3,[r0,#0x50]
                  |L1.13048|
0032f8  f1010101          ADD      r1,r1,#1              ;3704
0032fc  b2c9              UXTB     r1,r1                 ;3704
                  |L1.13054|
0032fe  4291              CMP      r1,r2                 ;3704
003300  dbcd              BLT      |L1.12958|
;;;3724        	}
;;;3725        
;;;3726        }
;;;3727   
;;;3728   load_I=0;
003302  4e59              LDR      r6,|L1.13416|
;;;3729   #ifdef TELECORE
;;;3730   
;;;3731   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3732   	{
;;;3733   	load_I-=lakb[i]._ch_curr/10;
;;;3734   	}*/
;;;3735   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3736   #elif UKU_TELECORE2017
;;;3737   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3738   #else
;;;3739   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003304  f9b51008          LDRSH    r1,[r5,#8]  ; bat
003308  f04f000a          MOV      r0,#0xa
00330c  fb91f1f0          SDIV     r1,r1,r0
003310  f9b55054          LDRSH    r5,[r5,#0x54]  ; bat
003314  fb95f0f0          SDIV     r0,r5,r0
003318  4408              ADD      r0,r0,r1
00331a  f1c00000          RSB      r0,r0,#0
00331e  b207              SXTH     r7,r0
003320  8037              STRH     r7,[r6,#0]
;;;3740   #endif
;;;3741   Isumm=0;
003322  4d52              LDR      r5,|L1.13420|
003324  802b              STRH     r3,[r5,#0]
;;;3742   
;;;3743   for(i=0;i<NUMIST;i++)
003326  f04f0000          MOV      r0,#0
00332a  e012              B        |L1.13138|
                  |L1.13100|
;;;3744        {
;;;3745        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00332c  eb0001c0          ADD      r1,r0,r0,LSL #3
003330  eb011100          ADD      r1,r1,r0,LSL #4
003334  eb040181          ADD      r1,r4,r1,LSL #2
003338  f891c003          LDRB     r12,[r1,#3]
00333c  f1bc0f05          CMP      r12,#5
003340  d204              BCS      |L1.13132|
003342  6a49              LDR      r1,[r1,#0x24]
003344  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
003348  4461              ADD      r1,r1,r12
00334a  8029              STRH     r1,[r5,#0]
                  |L1.13132|
00334c  f1000001          ADD      r0,r0,#1              ;3743
003350  b2c0              UXTB     r0,r0                 ;3743
                  |L1.13138|
003352  4290              CMP      r0,r2                 ;3743
003354  dbea              BLT      |L1.13100|
;;;3746        }  
;;;3747        
;;;3748   load_I=load_I+Isumm;
003356  8828              LDRH     r0,[r5,#0]  ; Isumm
003358  4438              ADD      r0,r0,r7
00335a  b200              SXTH     r0,r0
00335c  8030              STRH     r0,[r6,#0]
;;;3749   if(load_I<0)load_I=0;
00335e  2800              CMP      r0,#0
003360  da00              BGE      |L1.13156|
003362  8033              STRH     r3,[r6,#0]
                  |L1.13156|
;;;3750   
;;;3751   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3752   load_I=0;
003364  8033              STRH     r3,[r6,#0]
;;;3753   
;;;3754   Isumm=0;
003366  802b              STRH     r3,[r5,#0]
;;;3755   
;;;3756   for(i=0;i<NUMIST;i++)
003368  f04f0000          MOV      r0,#0
00336c  e00f              B        |L1.13198|
                  |L1.13166|
;;;3757        {
;;;3758        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00336e  eb0001c0          ADD      r1,r0,r0,LSL #3
003372  eb011100          ADD      r1,r1,r0,LSL #4
003376  eb040181          ADD      r1,r4,r1,LSL #2
00337a  78cf              LDRB     r7,[r1,#3]
00337c  2f05              CMP      r7,#5
00337e  d203              BCS      |L1.13192|
003380  6a49              LDR      r1,[r1,#0x24]
003382  882f              LDRH     r7,[r5,#0]  ; Isumm
003384  4439              ADD      r1,r1,r7
003386  8029              STRH     r1,[r5,#0]
                  |L1.13192|
003388  f1000001          ADD      r0,r0,#1              ;3756
00338c  b2c0              UXTB     r0,r0                 ;3756
                  |L1.13198|
00338e  4290              CMP      r0,r2                 ;3756
003390  dbed              BLT      |L1.13166|
;;;3759        }  
;;;3760        
;;;3761   load_I=load_I+Isumm;
003392  8829              LDRH     r1,[r5,#0]  ; Isumm
003394  eb030001          ADD      r0,r3,r1
003398  b200              SXTH     r0,r0
00339a  8030              STRH     r0,[r6,#0]
;;;3762   if(load_I<0)load_I=0;
00339c  2800              CMP      r0,#0
00339e  da00              BGE      |L1.13218|
0033a0  8033              STRH     r3,[r6,#0]
                  |L1.13218|
;;;3763   
;;;3764   #endif
;;;3765   #ifdef IPS_SGEP_GAZPROM
;;;3766   load_I=Isumm;
;;;3767   #endif
;;;3768   
;;;3769   
;;;3770   #ifdef UKU_GLONASS
;;;3771   inv[0]._Uio=6;
;;;3772   if (NUMINV)
;;;3773   	{
;;;3774   	for(i=0;i<NUMINV;i++)
;;;3775   		{
;;;3776   		if(bps[i+first_inv_slot]._cnt<25)
;;;3777        		{
;;;3778        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3779        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3780        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3781        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3782        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3783   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3784   			inv[i]._cnt=0;    
;;;3785        		} 
;;;3786   		else 
;;;3787        		{
;;;3788        		inv[i]._Uio=0; 
;;;3789        		inv[i]._Ii=0;
;;;3790        		inv[i]._Uin=0;
;;;3791        		inv[i]._Ti=0;
;;;3792        		inv[i]._flags_tm=0; 
;;;3793   //	     	inv[i]._rotor0;
;;;3794   			inv[i]._cnt=25;    
;;;3795        		}
;;;3796        	}
;;;3797      	}
;;;3798   #endif
;;;3799   
;;;3800   #ifndef UKU_GLONASS
;;;3801   if (NUMINV)
0033a2  4833              LDR      r0,|L1.13424|
0033a4  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0033a8  2d00              CMP      r5,#0
0033aa  d02c              BEQ      |L1.13318|
;;;3802   	{
;;;3803   	for(i=0;i<NUMINV;i++)
0033ac  f04f0200          MOV      r2,#0
;;;3804   		{
;;;3805   		if(bps[i+20]._cnt<25)
;;;3806        		{
;;;3807        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0033b0  4e30              LDR      r6,|L1.13428|
0033b2  e09b              B        |L1.13548|
                  |L1.13236|
0033b4  f1020014          ADD      r0,r2,#0x14           ;3805
0033b8  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3805
0033bc  eb011000          ADD      r0,r1,r0,LSL #4       ;3805
0033c0  eb040080          ADD      r0,r4,r0,LSL #2       ;3805
0033c4  78c1              LDRB     r1,[r0,#3]            ;3805
0033c6  2919              CMP      r1,#0x19              ;3805
0033c8  d274              BCS      |L1.13492|
0033ca  7981              LDRB     r1,[r0,#6]
0033cc  79c7              LDRB     r7,[r0,#7]
0033ce  eb012707          ADD      r7,r1,r7,LSL #8
0033d2  eb020142          ADD      r1,r2,r2,LSL #1
0033d6  eb061141          ADD      r1,r6,r1,LSL #5
0033da  61cf              STR      r7,[r1,#0x1c]
;;;3808        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0033dc  7a07              LDRB     r7,[r0,#8]
0033de  f890c009          LDRB     r12,[r0,#9]
0033e2  eb07270c          ADD      r7,r7,r12,LSL #8
0033e6  62cf              STR      r7,[r1,#0x2c]
;;;3809        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0033e8  7a87              LDRB     r7,[r0,#0xa]
0033ea  f890c00b          LDRB     r12,[r0,#0xb]
0033ee  eb07270c          ADD      r7,r7,r12,LSL #8
0033f2  618f              STR      r7,[r1,#0x18]
;;;3810        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0033f4  7b07              LDRB     r7,[r0,#0xc]
0033f6  620f              STR      r7,[r1,#0x20]
;;;3811        		inv[i]._flags_tm=bps[i+20]._buff[7];
0033f8  7b47              LDRB     r7,[r0,#0xd]
0033fa  f8817046          STRB     r7,[r1,#0x46]
;;;3812        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0033fe  7b87              LDRB     r7,[r0,#0xe]
003400  f890c00f          LDRB     r12,[r0,#0xf]
003404  e038              B        |L1.13432|
                  |L1.13318|
003406  e074              B        |L1.13554|
                  |L1.13320|
                          DCD      t_ext
                  |L1.13324|
                          DCD      Ktext
                  |L1.13328|
                          DCD      Ib_ips_termokompensat
                  |L1.13332|
                          DCD      ibat_metr_buff_
                  |L1.13336|
                          DCD      bIBAT_SMKLBR
                  |L1.13340|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13344|
                          DCD      Kibat1
                  |L1.13348|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13352|
                          DCD      bat
                  |L1.13356|
                          DCD      adc_buff_ext_
                  |L1.13360|
                          DCD      Kunet_ext
                  |L1.13364|
                          DCD      Uvv
                  |L1.13368|
                          DCD      Uvv0
                  |L1.13372|
                          DCD      net_U
                  |L1.13376|
                          DCD      eb2_data_short
                  |L1.13380|
                          DCD      Kvv_eb2
                  |L1.13384|
                          DCD      Uvv_eb2
                  |L1.13388|
                          DCD      Kpes_eb2
                  |L1.13392|
                          DCD      Upes_eb2
                  |L1.13396|
                          DCD      ibt
                  |L1.13400|
                          DCD      t_box
                  |L1.13404|
                          DCD      t_ext_can_nd
                  |L1.13408|
                          DCD      t_ext_can
                  |L1.13412|
                          DCD      BAT_IS_ON
                  |L1.13416|
                          DCD      load_I
                  |L1.13420|
                          DCD      Isumm
                  |L1.13424|
                          DCD      NUMINV
                  |L1.13428|
                          DCD      inv
                  |L1.13432|
003478  eb07270c          ADD      r7,r7,r12,LSL #8
00347c  628f              STR      r7,[r1,#0x28]
;;;3813        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00347e  7c07              LDRB     r7,[r0,#0x10]
003480  f890c011          LDRB     r12,[r0,#0x11]
003484  eb07270c          ADD      r7,r7,r12,LSL #8
003488  624f              STR      r7,[r1,#0x24]
;;;3814   			inv[i]._cnt=0;
00348a  708b              STRB     r3,[r1,#2]
;;;3815   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00348c  7c87              LDRB     r7,[r0,#0x12]
00348e  f8817059          STRB     r7,[r1,#0x59]
;;;3816   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003492  7cc7              LDRB     r7,[r0,#0x13]
003494  f881705a          STRB     r7,[r1,#0x5a]
;;;3817   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003498  7d07              LDRB     r7,[r0,#0x14]
00349a  f8817058          STRB     r7,[r1,#0x58]
;;;3818   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00349e  7d47              LDRB     r7,[r0,#0x15]
0034a0  f881705b          STRB     r7,[r1,#0x5b]
;;;3819   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0034a4  7d87              LDRB     r7,[r0,#0x16]
0034a6  f881705c          STRB     r7,[r1,#0x5c]
;;;3820   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0034aa  7dc0              LDRB     r0,[r0,#0x17]
0034ac  f881005d          STRB     r0,[r1,#0x5d]
0034b0  e019              B        |L1.13542|
0034b2  e7ff              B        |L1.13492|
                  |L1.13492|
;;;3821        		} 
;;;3822   		else 
;;;3823        		{
;;;3824         		inv[i]._Ii=0;
0034b4  eb020042          ADD      r0,r2,r2,LSL #1
0034b8  eb061040          ADD      r0,r6,r0,LSL #5
0034bc  61c3              STR      r3,[r0,#0x1c]
;;;3825   			inv[i]._Pio=0;
0034be  62c3              STR      r3,[r0,#0x2c]
;;;3826   			inv[i]._Uio=0;
0034c0  6183              STR      r3,[r0,#0x18]
;;;3827        		inv[i]._Ti=0;
0034c2  6203              STR      r3,[r0,#0x20]
;;;3828        		inv[i]._flags_tm=0; 
0034c4  f8803046          STRB     r3,[r0,#0x46]
;;;3829        		inv[i]._Uil=0;
0034c8  6243              STR      r3,[r0,#0x24]
;;;3830        		inv[i]._Uin=0;
0034ca  6283              STR      r3,[r0,#0x28]
;;;3831   			inv[i]._cnt=25; 
0034cc  f04f0119          MOV      r1,#0x19
0034d0  7081              STRB     r1,[r0,#2]
;;;3832   			inv[i]._Uoutmin=0; 
0034d2  f8803059          STRB     r3,[r0,#0x59]
;;;3833   			inv[i]._Uoutmax=0; 
0034d6  f880305a          STRB     r3,[r0,#0x5a]
;;;3834   			inv[i]._Pnom=0; 
0034da  f8803058          STRB     r3,[r0,#0x58]
;;;3835   			inv[i]._net_contr_en=0;
0034de  f880305b          STRB     r3,[r0,#0x5b]
;;;3836   			inv[i]._pwm_en=0;   
0034e2  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13542|
0034e6  f1020201          ADD      r2,r2,#1              ;3803
0034ea  b2d2              UXTB     r2,r2                 ;3803
                  |L1.13548|
0034ec  42aa              CMP      r2,r5                 ;3803
0034ee  f6ffaf61          BLT      |L1.13236|
                  |L1.13554|
;;;3837   			   
;;;3838        		}
;;;3839        	}
;;;3840      	}
;;;3841   #endif
;;;3842   
;;;3843   #ifdef GLADKOV
;;;3844   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3845   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3846   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3847   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3848   inv[0]._flags_tm=bps[4]._buff[7];
;;;3849   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3850   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3851   inv[0]._cnt=0;    
;;;3852   
;;;3853   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3854   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3855   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3856   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3857   inv[1]._flags_tm=bps[21]._buff[7];
;;;3858   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3859   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3860   inv[1]._cnt=0;    
;;;3861   #endif
;;;3862   
;;;3863   /*
;;;3864   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3865   	{
;;;3866   	lakb[0]._battCommState=0;
;;;3867   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3868   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3869   	
;;;3870   	if(lakb[0]._battCommState==0)
;;;3871   		{	
;;;3872   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3873   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3874   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3875   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3876   		}
;;;3877   	}
;;;3878   */
;;;3879   
;;;3880   #ifdef UKU_TELECORE2015
;;;3881   
;;;3882   	if(BAT_TYPE==2)
;;;3883   		{
;;;3884   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3885   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3886   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3887   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3888   		
;;;3889   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3890   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3891   	
;;;3892   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3893   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3894   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3895   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3896   	
;;;3897   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3898   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3899   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3900   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3901   	
;;;3902   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3903   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3904   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3905   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3906   	
;;;3907   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3908   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3909   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3910   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3911   	
;;;3912   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3913   	
;;;3914   	
;;;3915   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3916   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3917   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3918   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3919   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3920   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3921   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3922   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3923   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3924   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3925   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3926   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3927   	
;;;3928   		if(lakb[i]._rat_cap==0)
;;;3929   			{
;;;3930   			if(lakb[i]._isOnCnt)
;;;3931   				{
;;;3932   				lakb[i]._isOnCnt--;
;;;3933   				if(lakb[i]._isOnCnt==0)
;;;3934   					{
;;;3935   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3936   					}
;;;3937   				}
;;;3938   			}
;;;3939   		else 
;;;3940   			{
;;;3941   			if(lakb[i]._isOnCnt<50)
;;;3942   				{
;;;3943   				lakb[i]._isOnCnt++;
;;;3944   				if(lakb[i]._isOnCnt==50)
;;;3945   					{
;;;3946   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3947   					}
;;;3948   				}
;;;3949   			}
;;;3950   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3951   		}
;;;3952   	else if(BAT_TYPE==3)
;;;3953   		{
;;;3954   		//short numOfPacks;
;;;3955   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3956   		
;;;3957   		#ifndef UKU_TELECORE2016
;;;3958   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3959   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3960   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3961   		if(numOfPacks)numOfPacks-=1;
;;;3962   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3963   		plazma_numOfCells=numOfCells;
;;;3964   		plazma_numOfTemperCells=numOfTemperCells;
;;;3965   		plazma_numOfPacks=numOfPacks;
;;;3966   
;;;3967   
;;;3968   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3969   
;;;3970   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3971   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3972   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3975   							);	  
;;;3976   
;;;3977   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3978   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3980   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3981   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3982   							)/10;
;;;3983   
;;;3984   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3985   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3986   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3987   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3988   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3989   							)-2730;
;;;3990   
;;;3991   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3992   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3993   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3994   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3995   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3996   							)/10;
;;;3997   
;;;3998   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3999   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4000   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4001   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4002   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4003   							)/10;
;;;4004   		#endif
;;;4005   		
;;;4006   		#ifdef UKU_TELECORE2016
;;;4007   		{
;;;4008   		char i;
;;;4009   		
;;;4010   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4011   			{
;;;4012   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4013   			}
;;;4014   		}
;;;4015   		#endif
;;;4016   		
;;;4017   										  
;;;4018   		}
;;;4019   	
;;;4020   if(sacredSunSilentCnt<3) 
;;;4021   	{
;;;4022       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4023       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4024      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4025   	}
;;;4026   else 
;;;4027   	{
;;;4028       	//bat[0]._Ub=0;
;;;4029       	//bat[0]._Tb=0;
;;;4030      	//bat[0]._Ib=0;
;;;4031   	}
;;;4032   
;;;4033   if(BAT_TYPE==1)
;;;4034   	{
;;;4035   	char i;
;;;4036   	for(i=0;i<1;i++)
;;;4037   		{
;;;4038   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4039   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4040   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4041   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4042   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4043   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4044   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4045   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4046   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4047   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4048   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4049   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4050   		lakb[i]._flags1= lakb_damp[i][34];
;;;4051   		lakb[i]._flags2= lakb_damp[i][35];
;;;4052   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4053   
;;;4054   /*		if(lakb[i]._rat_cap==0)
;;;4055   			{
;;;4056   			if(lakb[i]._isOnCnt)
;;;4057   				{
;;;4058   				lakb[i]._isOnCnt--;
;;;4059   				if(lakb[i]._isOnCnt==0)
;;;4060   					{
;;;4061   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4062   					}
;;;4063   				}
;;;4064   			}
;;;4065   		else 
;;;4066   			{
;;;4067   			if(lakb[i]._isOnCnt<50)
;;;4068   				{
;;;4069   				lakb[i]._isOnCnt++;
;;;4070   				if(lakb[i]._isOnCnt==50)
;;;4071   					{
;;;4072   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4073   					}
;;;4074   				}
;;;4075   			} */
;;;4076   		gran(&lakb[i]._isOnCnt,0,50);
;;;4077   	 	}
;;;4078   
;;;4079   	if(lakb_damp[0][41]==100)
;;;4080   		{
;;;4081   		li_bat._485Error=1;
;;;4082   		}
;;;4083   	if(lakb_damp[0][41]==0)
;;;4084   		{
;;;4085   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4086   		li_bat._485Error=0;
;;;4087   		}
;;;4088   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4089   
;;;4090   
;;;4091   	}
;;;4092   
;;;4093   
;;;4094   #endif
;;;4095   
;;;4096   		#ifdef UKU_TELECORE2017
;;;4097   		{
;;;4098   		char i;
;;;4099   		
;;;4100   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4101   			{
;;;4102   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4103   			}
;;;4104   		}
;;;4105   		#endif
;;;4106   #ifdef UKU_TELECORE2015
;;;4107   //вычисление параметров работы батареи
;;;4108   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4109   li_bat._batStat=bsOK;
;;;4110   if(BAT_TYPE==1) //COSLIGHT
;;;4111   	{
;;;4112   	if(li_bat._batStat==bsOK)
;;;4113   		{
;;;4114   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4115   
;;;4116   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4117   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4118   	
;;;4119   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4120   		li_bat._soc=lakb[0]._s_o_c;
;;;4121   		li_bat._soh=lakb[0]._s_o_h;
;;;4122   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4123   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4124   		li_bat._rbt=lakb[0]._r_b_t;
;;;4125   		}
;;;4126   	else 
;;;4127   		{
;;;4128   		li_bat._Ub=bat[0]._Ub;
;;;4129   		li_bat._Ib=bat[0]._Ib/10;
;;;4130   		li_bat._Tb=bat[0]._Tb;
;;;4131   		}
;;;4132   
;;;4133   	if((li_bat._485Error)||(li_bat._canError))
;;;4134   		{
;;;4135   		li_bat._batStat=bsOFF;
;;;4136   		}
;;;4137   	else li_bat._batStat=bsOK;
;;;4138   	}
;;;4139   else if(BAT_TYPE==2) //SACRED SUN
;;;4140   	{
;;;4141   	}
;;;4142   else if(BAT_TYPE==3) //ZTT
;;;4143   	{
;;;4144   	if(li_bat._batStat==bsOK)
;;;4145   		{
;;;4146   
;;;4147   		}
;;;4148   	}
;;;4149   #endif
;;;4150   
;;;4151   
;;;4152   /*
;;;4153   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4154   	{
;;;4155   
;;;4156   
;;;4157   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4158   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4159   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4160   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4161   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4162   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4163   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4164   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4165   
;;;4166   	tempSS=0;
;;;4167   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4168   
;;;4169   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4170   
;;;4171   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4172   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4173   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4174   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4175   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4176   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4177   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4178   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4179   
;;;4180   	tempSS=0;
;;;4181   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4182   
;;;4183   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4184   
;;;4185   
;;;4186   	}*/
;;;4187   }
0034f2  e8bd9fff          POP      {r0-r12,pc}
;;;4188   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4248   //-----------------------------------------------
;;;4249   void mnemo_hndl(void)
0034f6  4aff              LDR      r2,|L1.14580|
;;;4250   {
;;;4251   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4252   	{
;;;4253   	if(mnemo_cnt)mnemo_cnt--;
0034f8  49ff              LDR      r1,|L1.14584|
0034fa  7810              LDRB     r0,[r2,#0]            ;4251  ; a_ind
0034fc  2804              CMP      r0,#4                 ;4251
0034fe  d001              BEQ      |L1.13572|
003500  2801              CMP      r0,#1                 ;4251
003502  d105              BNE      |L1.13584|
                  |L1.13572|
003504  7850              LDRB     r0,[r2,#1]            ;4251  ; a_ind
003506  b918              CBNZ     r0,|L1.13584|
003508  48fc              LDR      r0,|L1.14588|
00350a  7800              LDRB     r0,[r0,#0]            ;4251  ; MNEMO_ON
00350c  2855              CMP      r0,#0x55              ;4251
00350e  d003              BEQ      |L1.13592|
                  |L1.13584|
;;;4254   	}
;;;4255   else mnemo_cnt=MNEMO_TIME;
003510  48fb              LDR      r0,|L1.14592|
003512  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003514  7008              STRB     r0,[r1,#0]
                  |L1.13590|
;;;4256   }
003516  4770              BX       lr
                  |L1.13592|
003518  7808              LDRB     r0,[r1,#0]            ;4253  ; mnemo_cnt
00351a  2800              CMP      r0,#0                 ;4253
00351c  d0fb              BEQ      |L1.13590|
00351e  f1a00001          SUB      r0,r0,#1              ;4253
003522  7008              STRB     r0,[r1,#0]            ;4253
003524  4770              BX       lr
;;;4257   
                          ENDP

                  apv_start PROC
;;;4258   //-----------------------------------------------
;;;4259   void apv_start(char in)
003526  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4260   {
;;;4261   if(	(bps[in]._apv_timer_1_lev==0)&&
00352a  eb011100          ADD      r1,r1,r0,LSL #4
00352e  48f5              LDR      r0,|L1.14596|
003530  eb000081          ADD      r0,r0,r1,LSL #2
003534  f890105e          LDRB     r1,[r0,#0x5e]
003538  2900              CMP      r1,#0
00353a  d115              BNE      |L1.13672|
;;;4262   	(bps[in]._apv_cnt_1_lev==0)&&
00353c  f890105f          LDRB     r1,[r0,#0x5f]
003540  2900              CMP      r1,#0
003542  d111              BNE      |L1.13672|
;;;4263   	(bps[in]._apv_timer_2_lev==0) )
003544  f8b01060          LDRH     r1,[r0,#0x60]
003548  2900              CMP      r1,#0
00354a  d10d              BNE      |L1.13672|
;;;4264   		{
;;;4265    		bps[in]._apv_timer_1_lev=60;
00354c  f04f013c          MOV      r1,#0x3c
003550  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4266   		bps[in]._apv_cnt_1_lev=3;
003554  f04f0103          MOV      r1,#3
003558  7041              STRB     r1,[r0,#1]
;;;4267   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00355a  49eb              LDR      r1,|L1.14600|
00355c  f44f6261          MOV      r2,#0xe10
003560  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003562  fb01f102          MUL      r1,r1,r2
003566  8041              STRH     r1,[r0,#2]
                  |L1.13672|
;;;4268   		}
;;;4269   }
003568  4770              BX       lr
;;;4270   
                          ENDP

                  apv_stop PROC
;;;4271   //-----------------------------------------------
;;;4272   void apv_stop(char in)
00356a  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4273   {
;;;4274   bps[in]._apv_timer_1_lev=0;
00356e  eb021200          ADD      r2,r2,r0,LSL #4
003572  48e4              LDR      r0,|L1.14596|
003574  f04f0100          MOV      r1,#0
003578  eb000082          ADD      r0,r0,r2,LSL #2
00357c  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4275   bps[in]._apv_cnt_1_lev=0;
003580  7041              STRB     r1,[r0,#1]
;;;4276   bps[in]._apv_timer_2_lev=0;
003582  8041              STRH     r1,[r0,#2]
;;;4277   }
003584  4770              BX       lr
;;;4278   
                          ENDP

                  apv_drv PROC
;;;4279   //-----------------------------------------------
;;;4280   void apv_drv(void)		//1 Гц
003586  e92d43f0          PUSH     {r4-r9,lr}
;;;4281   {
;;;4282   for(i=0;i<NUMIST;i++)
00358a  4ee0              LDR      r6,|L1.14604|
00358c  f04f0300          MOV      r3,#0
003590  75f3              STRB     r3,[r6,#0x17]
;;;4283   	{
;;;4284   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4285   		{
;;;4286   		bps[i]._apv_timer_1_lev=0;
;;;4287   		bps[i]._apv_cnt_1_lev=0;
;;;4288   		bps[i]._apv_timer_2_lev=0;
;;;4289   		}
;;;4290   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
003592  4cdf              LDR      r4,|L1.14608|
;;;4291   		{
;;;4292   		bps[i]._apv_timer_2_lev=0;
;;;4293   		}
;;;4294   
;;;4295   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4296   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4297   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4298   			{
;;;4299   			if(bps[i]._state==bsWRK)
;;;4300   				{
;;;4301   				if(bps[i]._apv_succes_timer<60)
;;;4302   					{
;;;4303   					bps[i]._apv_succes_timer++;
;;;4304   					if(bps[i]._apv_succes_timer>=60)
;;;4305   						{
;;;4306   						apv_stop(i);
;;;4307   						}
;;;4308   					}
;;;4309   				}
;;;4310   			else bps[i]._apv_succes_timer=0;
;;;4311   			}
;;;4312   
;;;4313   	if(bps[i]._apv_timer_1_lev)
;;;4314   		{
;;;4315   		bps[i]._apv_timer_2_lev=0;
;;;4316   		bps[i]._apv_timer_1_lev--;
;;;4317   		if(bps[i]._apv_timer_1_lev==0)
;;;4318   			{
;;;4319   			if(bps[i]._apv_cnt_1_lev)
;;;4320   				{
;;;4321   				bps[i]._apv_cnt_1_lev--;
;;;4322   				bps[i]._apv_timer_1_lev=60;
003594  f04f073c          MOV      r7,#0x3c
;;;4323   				bps[i]._apv_reset_av_timer=2;
003598  f04f0802          MOV      r8,#2
00359c  4dd9              LDR      r5,|L1.14596|
00359e  f8df9374          LDR      r9,|L1.14612|
0035a2  e079              B        |L1.13976|
                  |L1.13732|
0035a4  49dc              LDR      r1,|L1.14616|
0035a6  7809              LDRB     r1,[r1,#0]            ;4284  ; APV_ON1
0035a8  b949              CBNZ     r1,|L1.13758|
0035aa  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4286
0035ae  eb011100          ADD      r1,r1,r0,LSL #4       ;4286
0035b2  eb050181          ADD      r1,r5,r1,LSL #2       ;4286
0035b6  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4286
0035ba  704b              STRB     r3,[r1,#1]            ;4287
0035bc  804b              STRH     r3,[r1,#2]            ;4288
                  |L1.13758|
0035be  7821              LDRB     r1,[r4,#0]            ;4290  ; APV_ON2
0035c0  b939              CBNZ     r1,|L1.13778|
0035c2  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4292
0035c6  eb011100          ADD      r1,r1,r0,LSL #4       ;4292
0035ca  eb050181          ADD      r1,r5,r1,LSL #2       ;4292
0035ce  f8a13060          STRH     r3,[r1,#0x60]         ;4292
                  |L1.13778|
0035d2  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4295
0035d6  eb011100          ADD      r1,r1,r0,LSL #4       ;4295
0035da  eb050181          ADD      r1,r5,r1,LSL #2       ;4295
0035de  f891205e          LDRB     r2,[r1,#0x5e]         ;4295
0035e2  b92a              CBNZ     r2,|L1.13808|
0035e4  f891205f          LDRB     r2,[r1,#0x5f]         ;4296
0035e8  b912              CBNZ     r2,|L1.13808|
0035ea  f8b12060          LDRH     r2,[r1,#0x60]         ;4297
0035ee  b122              CBZ      r2,|L1.13818|
                  |L1.13808|
0035f0  788a              LDRB     r2,[r1,#2]            ;4299
0035f2  2a01              CMP      r2,#1                 ;4299
0035f4  d014              BEQ      |L1.13856|
0035f6  f8813063          STRB     r3,[r1,#0x63]         ;4310
                  |L1.13818|
0035fa  7df1              LDRB     r1,[r6,#0x17]         ;4313  ; i
0035fc  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4313
003600  eb001001          ADD      r0,r0,r1,LSL #4       ;4313
003604  eb050080          ADD      r0,r5,r0,LSL #2       ;4313
003608  f890205e          LDRB     r2,[r0,#0x5e]         ;4313
00360c  b30a              CBZ      r2,|L1.13906|
00360e  f8a03060          STRH     r3,[r0,#0x60]         ;4315
003612  f1a20201          SUB      r2,r2,#1              ;4316
003616  b2d2              UXTB     r2,r2                 ;4316
003618  f880205e          STRB     r2,[r0,#0x5e]         ;4316
00361c  b172              CBZ      r2,|L1.13884|
00361e  e024              B        |L1.13930|
                  |L1.13856|
003620  f8912063          LDRB     r2,[r1,#0x63]         ;4301
003624  2a3c              CMP      r2,#0x3c              ;4301
003626  d2e8              BCS      |L1.13818|
003628  f1020201          ADD      r2,r2,#1              ;4303
00362c  b2d2              UXTB     r2,r2                 ;4303
00362e  f8812063          STRB     r2,[r1,#0x63]         ;4303
003632  2a3c              CMP      r2,#0x3c              ;4304
003634  d3e1              BCC      |L1.13818|
003636  f7fffffe          BL       apv_stop
00363a  e7de              B        |L1.13818|
                  |L1.13884|
00363c  f890205f          LDRB     r2,[r0,#0x5f]         ;4319
003640  b142              CBZ      r2,|L1.13908|
003642  f1a20201          SUB      r2,r2,#1              ;4321
003646  f880205f          STRB     r2,[r0,#0x5f]         ;4321
00364a  f880705e          STRB     r7,[r0,#0x5e]         ;4322
00364e  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13906|
003652  e00a              B        |L1.13930|
                  |L1.13908|
;;;4324   				}
;;;4325   			else
;;;4326   				{
;;;4327   				if(APV_ON2==apvON)
003654  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003656  2a01              CMP      r2,#1
003658  d107              BNE      |L1.13930|
;;;4328   					{
;;;4329   					bps[i]._apv_timer_1_lev=0;
;;;4330   					bps[i]._apv_cnt_1_lev=0;
;;;4331   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00365a  4aab              LDR      r2,|L1.14600|
00365c  f44f6c61          MOV      r12,#0xe10
003660  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003662  fb02f20c          MUL      r2,r2,r12
003666  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13930|
;;;4332   					}
;;;4333   				}
;;;4334   			
;;;4335   			}
;;;4336   		}
;;;4337   	if(bps[i]._apv_timer_2_lev)
00366a  f8b02060          LDRH     r2,[r0,#0x60]
00366e  b14a              CBZ      r2,|L1.13956|
;;;4338   		{
;;;4339   		bps[i]._apv_timer_2_lev--;
003670  f1a20201          SUB      r2,r2,#1
003674  b292              UXTH     r2,r2
003676  f8a02060          STRH     r2,[r0,#0x60]
;;;4340   		if(bps[i]._apv_timer_2_lev==0)
00367a  b91a              CBNZ     r2,|L1.13956|
;;;4341   			{
;;;4342   			bps[i]._apv_cnt_1_lev=2;
00367c  f880805f          STRB     r8,[r0,#0x5f]
;;;4343   			bps[i]._apv_timer_1_lev=60;
003680  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13956|
;;;4344   			}
;;;4345   		}
;;;4346   
;;;4347   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
003684  f8902062          LDRB     r2,[r0,#0x62]
003688  b11a              CBZ      r2,|L1.13970|
00368a  f1a20201          SUB      r2,r2,#1
00368e  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13970|
003692  f1010101          ADD      r1,r1,#1              ;4282
003696  75f1              STRB     r1,[r6,#0x17]         ;4282
                  |L1.13976|
003698  7df0              LDRB     r0,[r6,#0x17]         ;4282  ; i
00369a  f9b91000          LDRSH    r1,[r9,#0]            ;4282  ; NUMIST
00369e  4288              CMP      r0,r1                 ;4282
0036a0  db80              BLT      |L1.13732|
;;;4348   	} 
;;;4349   /*char i;
;;;4350   for(i=0;i<2;i++) 
;;;4351   	{
;;;4352   	if(apv_cnt_sec[i])
;;;4353   		{
;;;4354   		apv_cnt_sec[i]--;
;;;4355   		if(apv_cnt_sec[i]==0)
;;;4356   			{
;;;4357   			cnt_av_umax[i]=0;
;;;4358   			cnt_av_umin[i]=0;
;;;4359   			reset_apv_cnt[i]=600;
;;;4360   			}
;;;4361   		}
;;;4362   	
;;;4363   	if(reset_apv_cnt[i])
;;;4364   		{
;;;4365   		reset_apv_cnt[i]--;
;;;4366   		if(reset_apv_cnt[i]==0)
;;;4367   			{
;;;4368   			apv_cnt[i]=0;
;;;4369   			}
;;;4370   		}	
;;;4371   		
;;;4372   	if(hour_apv_cnt[i])
;;;4373   		{
;;;4374   		hour_apv_cnt[i]--;
;;;4375   		if(hour_apv_cnt[i]==0)
;;;4376   			{
;;;4377   			apv_cnt[i]=0;
;;;4378   			avar_src_reset(i);
;;;4379   			}
;;;4380   		}			
;;;4381   	}
;;;4382   
;;;4383   
;;;4384   
;;;4385   
;;;4386   if(apv_cnt_1)
;;;4387   	{
;;;4388   	apv_cnt_1--;
;;;4389   	if(!apv_cnt_1) 
;;;4390   		{
;;;4391   		avar_src_reset(0);
;;;4392   		avar_src_reset(1);
;;;4393   		//cntrl_stat=0;
;;;4394   		}
;;;4395   	}*/		
;;;4396   }
0036a2  e8bd83f0          POP      {r4-r9,pc}
;;;4397   
                          ENDP

                  adc_init PROC
;;;4398   //-----------------------------------------------
;;;4399   void adc_init(void)
0036a6  489d              LDR      r0,|L1.14620|
;;;4400   {
;;;4401   
;;;4402   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0036a8  6841              LDR      r1,[r0,#4]
0036aa  f4212140          BIC      r1,r1,#0xc0000
0036ae  f4412180          ORR      r1,r1,#0x40000
0036b2  6041              STR      r1,[r0,#4]
;;;4403   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0036b4  6841              LDR      r1,[r0,#4]
0036b6  f4213140          BIC      r1,r1,#0x30000
0036ba  f4413180          ORR      r1,r1,#0x10000
0036be  6041              STR      r1,[r0,#4]
;;;4404   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0036c0  6841              LDR      r1,[r0,#4]
0036c2  f4214140          BIC      r1,r1,#0xc000
0036c6  f4414180          ORR      r1,r1,#0x4000
0036ca  6041              STR      r1,[r0,#4]
;;;4405   
;;;4406   
;;;4407   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0036cc  6c41              LDR      r1,[r0,#0x44]
0036ce  f4212140          BIC      r1,r1,#0xc0000
0036d2  f4412100          ORR      r1,r1,#0x80000
0036d6  6441              STR      r1,[r0,#0x44]
;;;4408   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0036d8  6c41              LDR      r1,[r0,#0x44]
0036da  f4213140          BIC      r1,r1,#0x30000
0036de  f4413100          ORR      r1,r1,#0x20000
0036e2  6441              STR      r1,[r0,#0x44]
;;;4409   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0036e4  6c41              LDR      r1,[r0,#0x44]
0036e6  f4214140          BIC      r1,r1,#0xc000
0036ea  f4414100          ORR      r1,r1,#0x8000
0036ee  6441              STR      r1,[r0,#0x44]
;;;4410   
;;;4411   SET_REG(LPC_ADC->ADCR,0,24,3);
0036f0  488b              LDR      r0,|L1.14624|
0036f2  6801              LDR      r1,[r0,#0]
0036f4  f02161e0          BIC      r1,r1,#0x7000000
0036f8  6001              STR      r1,[r0,#0]
;;;4412   
;;;4413   SET_REG(LPC_ADC->ADCR,1,21,1);
0036fa  6801              LDR      r1,[r0,#0]
0036fc  f4411100          ORR      r1,r1,#0x200000
003700  6001              STR      r1,[r0,#0]
;;;4414   SET_REG(LPC_ADC->ADCR,0,16,1);
003702  6801              LDR      r1,[r0,#0]
003704  f4213180          BIC      r1,r1,#0x10000
003708  6001              STR      r1,[r0,#0]
;;;4415   SET_REG(LPC_ADC->ADCR,1,8,8);
00370a  6801              LDR      r1,[r0,#0]
00370c  f421417f          BIC      r1,r1,#0xff00
003710  f4417180          ORR      r1,r1,#0x100
003714  6001              STR      r1,[r0,#0]
;;;4416   
;;;4417   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4418   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4419   	
;;;4420   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4421        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4422        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4423   
;;;4424   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003716  f44f7180          MOV      r1,#0x100
00371a  60c1              STR      r1,[r0,#0xc]
00371c  4881              LDR      r0,|L1.14628|
00371e  f44f0180          MOV      r1,#0x400000
003722  6001              STR      r1,[r0,#0]
;;;4425   
;;;4426   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4427   
;;;4428   
;;;4429   }
003724  4770              BX       lr
;;;4430   
                          ENDP

                  adc_drv7 PROC
;;;4431   //-----------------------------------------------
;;;4432   void adc_drv7(void) //(Uсети - постоянка)
003726  e92d41f0          PUSH     {r4-r8,lr}
;;;4433   {
;;;4434   //int temp_S;
;;;4435   //char i;
;;;4436   //signed short temp_SS;
;;;4437   
;;;4438   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00372a  4c78              LDR      r4,|L1.14604|
00372c  34f2              ADDS     r4,r4,#0xf2
00372e  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003730  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003732  1a40              SUBS     r0,r0,r1
003734  b200              SXTH     r0,r0
003736  f7fffffe          BL       abs_pal
00373a  1da6              ADDS     r6,r4,#6
00373c  8030              STRH     r0,[r6,#0]
;;;4439   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
00373e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003740  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003742  1a40              SUBS     r0,r0,r1
003744  b200              SXTH     r0,r0
003746  f7fffffe          BL       abs_pal
00374a  8070              STRH     r0,[r6,#2]
;;;4440   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00374c  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00374e  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003750  1a40              SUBS     r0,r0,r1
003752  b200              SXTH     r0,r0
003754  f7fffffe          BL       abs_pal
003758  80b0              STRH     r0,[r6,#4]
;;;4441   
;;;4442   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4443   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4444   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4445   
;;;4446   
;;;4447   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00375a  f44f7196          MOV      r1,#0x12c
;;;4448   	{
;;;4449   	adc_result=adc_self_ch_buff[2];
00375e  4d6b              LDR      r5,|L1.14604|
003760  4288              CMP      r0,r1                 ;4447
003762  da02              BGE      |L1.14186|
003764  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003766  87a8              STRH     r0,[r5,#0x3c]
003768  e00c              B        |L1.14212|
                  |L1.14186|
;;;4450   	} 
;;;4451   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00376a  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
00376e  4288              CMP      r0,r1
003770  da02              BGE      |L1.14200|
;;;4452   	{
;;;4453   	adc_result=adc_self_ch_buff[1];
003772  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003774  87a8              STRH     r0,[r5,#0x3c]
003776  e005              B        |L1.14212|
                  |L1.14200|
;;;4454   	}
;;;4455   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003778  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
00377c  4288              CMP      r0,r1
00377e  da01              BGE      |L1.14212|
;;;4456   	{
;;;4457   	adc_result=adc_self_ch_buff[0];
003780  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003782  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14212|
;;;4458   	}
;;;4459       //adc_result=92;
;;;4460   
;;;4461   if(adc_ch_net)
003784  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003786  2600              MOVS     r6,#0
003788  b347              CBZ      r7,|L1.14300|
;;;4462   	{
;;;4463   
;;;4464   	main_power_buffer[0]+=(long)(adc_result);
00378a  4867              LDR      r0,|L1.14632|
00378c  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003790  6802              LDR      r2,[r0,#0]  ; main_power_buffer
003792  440a              ADD      r2,r2,r1
003794  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4465   	main_power_buffer[1]+=(long)(adc_result);
003796  6842              LDR      r2,[r0,#4]  ; main_power_buffer
003798  440a              ADD      r2,r2,r1
00379a  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4466   	main_power_buffer[2]+=(long)(adc_result);
00379c  6882              LDR      r2,[r0,#8]  ; main_power_buffer
00379e  440a              ADD      r2,r2,r1
0037a0  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4467   	main_power_buffer[3]+=(long)(adc_result);
0037a2  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0037a4  4411              ADD      r1,r1,r2
0037a6  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4468   
;;;4469   	adc_net_buff_cnt++;
0037a8  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
0037ac  f1010101          ADD      r1,r1,#1
0037b0  b209              SXTH     r1,r1
0037b2  f8a51044          STRH     r1,[r5,#0x44]
;;;4470   	if(adc_net_buff_cnt>=0x1000)
0037b6  f5b15f80          CMP      r1,#0x1000
0037ba  db01              BLT      |L1.14272|
;;;4471   		{
;;;4472   		adc_net_buff_cnt=0;
0037bc  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14272|
;;;4473   		}
;;;4474   	if((adc_net_buff_cnt&0x03ff)==0)
0037c0  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0037c4  058a              LSLS     r2,r1,#22
0037c6  d131              BNE      |L1.14380|
;;;4475   		{
;;;4476   		#ifdef UKU_220
;;;4477   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4478   		#else
;;;4479   		#ifdef UKU_220_V2
;;;4480   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4481   		#else
;;;4482   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0037c8  ea4f21a1          ASR      r1,r1,#10
0037cc  f8502021          LDR      r2,[r0,r1,LSL #2]
0037d0  ea4f2222          ASR      r2,r2,#8
0037d4  876a              STRH     r2,[r5,#0x3a]
;;;4483   		#endif
;;;4484   		#endif
;;;4485   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0037d6  f8406021          STR      r6,[r0,r1,LSL #2]
0037da  e027              B        |L1.14380|
                  |L1.14300|
;;;4486   		}
;;;4487   
;;;4488   
;;;4489   	} 
;;;4490   else if(!adc_ch_net)
;;;4491   	{
;;;4492   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0037dc  4853              LDR      r0,|L1.14636|
0037de  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0037e0  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0037e2  eb001384          ADD      r3,r0,r4,LSL #6
0037e6  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0037ea  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4493   	
;;;4494   	if((adc_ch_cnt&0x03)==0)
0037ee  0790              LSLS     r0,r2,#30
0037f0  d10f              BNE      |L1.14354|
;;;4495   		{
;;;4496   		long temp_L;
;;;4497   		char i;
;;;4498   		temp_L=0;
0037f2  4601              MOV      r1,r0
                  |L1.14324|
;;;4499   		for(i=0;i<16;i++)
;;;4500   			{
;;;4501   			temp_L+=adc_buff[adc_ch][i];
0037f4  f853c020          LDR      r12,[r3,r0,LSL #2]
0037f8  4461              ADD      r1,r1,r12
0037fa  f1000001          ADD      r0,r0,#1              ;4499
0037fe  b2c0              UXTB     r0,r0                 ;4499
003800  2810              CMP      r0,#0x10              ;4499
003802  d3f7              BCC      |L1.14324|
;;;4502   			}
;;;4503   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003804  ea4f1021          ASR      r0,r1,#4
003808  4947              LDR      r1,|L1.14632|
00380a  f1a10120          SUB      r1,r1,#0x20
00380e  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14354|
;;;4504   
;;;4505   		//adc_buff_[3]=346;
;;;4506   		}
;;;4507   	if(++adc_ch>=16) 
003812  1c64              ADDS     r4,r4,#1
003814  b2e0              UXTB     r0,r4
003816  74a8              STRB     r0,[r5,#0x12]
003818  2810              CMP      r0,#0x10
00381a  d307              BCC      |L1.14380|
;;;4508   		{
;;;4509   		adc_ch=0;
00381c  74ae              STRB     r6,[r5,#0x12]
;;;4510   		adc_ch_cnt++;
00381e  f1020201          ADD      r2,r2,#1
003822  b2d0              UXTB     r0,r2
003824  74e8              STRB     r0,[r5,#0x13]
;;;4511   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003826  2810              CMP      r0,#0x10
003828  d300              BCC      |L1.14380|
00382a  74ee              STRB     r6,[r5,#0x13]
                  |L1.14380|
;;;4512   		}
;;;4513   	}
;;;4514   
;;;4515   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4516   
;;;4517   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4518   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4519   /*
;;;4520   	{
;;;4521   	if((adc_cnt1&0x03)==0)
;;;4522   		{
;;;4523   		temp_S=0;
;;;4524   		for(i=0;i<16;i++)
;;;4525   			{
;;;4526   			temp_S+=adc_buff[adc_ch][i];
;;;4527   			} 
;;;4528            	adc_buff_[adc_ch]=temp_S>>4;
;;;4529             }
;;;4530   	}*/
;;;4531   
;;;4532   
;;;4533   		  
;;;4534   
;;;4535   adc_self_ch_cnt=0;
00382c  742e              STRB     r6,[r5,#0x10]
;;;4536   
;;;4537   adc_ch_net++;
00382e  f1070701          ADD      r7,r7,#1
;;;4538   adc_ch_net&=1;
003832  f0070001          AND      r0,r7,#1
003836  7468              STRB     r0,[r5,#0x11]
;;;4539   
;;;4540   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4541   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4542   
;;;4543   if(adc_ch_net)
;;;4544   	{
;;;4545   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4546   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4547   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003838  4a39              LDR      r2,|L1.14624|
00383a  b130              CBZ      r0,|L1.14410|
00383c  6810              LDR      r0,[r2,#0]
00383e  f02000ff          BIC      r0,r0,#0xff
003842  f1000004          ADD      r0,r0,#4
003846  6010              STR      r0,[r2,#0]
003848  e03d              B        |L1.14534|
                  |L1.14410|
;;;4548   	}
;;;4549   else
;;;4550   	{
;;;4551   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4552   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4553   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00384a  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
00384c  0708              LSLS     r0,r1,#28
00384e  d406              BMI      |L1.14430|
003850  6810              LDR      r0,[r2,#0]
003852  f02000ff          BIC      r0,r0,#0xff
003856  f1000001          ADD      r0,r0,#1
00385a  6010              STR      r0,[r2,#0]
00385c  e005              B        |L1.14442|
                  |L1.14430|
;;;4554   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
00385e  6810              LDR      r0,[r2,#0]
003860  f02000ff          BIC      r0,r0,#0xff
003864  f1000002          ADD      r0,r0,#2
003868  6010              STR      r0,[r2,#0]
                  |L1.14442|
;;;4555   
;;;4556   
;;;4557   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
00386a  4831              LDR      r0,|L1.14640|
00386c  6803              LDR      r3,[r0,#0]
00386e  f0435380          ORR      r3,r3,#0x10000000
003872  6003              STR      r3,[r0,#0]
;;;4558   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
003874  6a03              LDR      r3,[r0,#0x20]
003876  f0434380          ORR      r3,r3,#0x40000000
00387a  6203              STR      r3,[r0,#0x20]
;;;4559   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
00387c  6e03              LDR      r3,[r0,#0x60]
00387e  f0436380          ORR      r3,r3,#0x4000000
003882  6603              STR      r3,[r0,#0x60]
;;;4560   
;;;4561   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003884  07cb              LSLS     r3,r1,#31
003886  d00a              BEQ      |L1.14494|
;;;4562   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003888  6943              LDR      r3,[r0,#0x14]
00388a  f0435380          ORR      r3,r3,#0x10000000
00388e  6143              STR      r3,[r0,#0x14]
                  |L1.14480|
;;;4563   
;;;4564   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003890  078b              LSLS     r3,r1,#30
003892  d409              BMI      |L1.14504|
003894  6b43              LDR      r3,[r0,#0x34]
003896  f0234380          BIC      r3,r3,#0x40000000
00389a  6343              STR      r3,[r0,#0x34]
00389c  e008              B        |L1.14512|
                  |L1.14494|
00389e  6943              LDR      r3,[r0,#0x14]         ;4561
0038a0  f0235380          BIC      r3,r3,#0x10000000     ;4561
0038a4  6143              STR      r3,[r0,#0x14]         ;4561
0038a6  e7f3              B        |L1.14480|
                  |L1.14504|
;;;4565   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0038a8  6b43              LDR      r3,[r0,#0x34]
0038aa  f0434380          ORR      r3,r3,#0x40000000
0038ae  6343              STR      r3,[r0,#0x34]
                  |L1.14512|
;;;4566   
;;;4567   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0038b0  0749              LSLS     r1,r1,#29
0038b2  d404              BMI      |L1.14526|
0038b4  6f41              LDR      r1,[r0,#0x74]
0038b6  f0216180          BIC      r1,r1,#0x4000000
0038ba  6741              STR      r1,[r0,#0x74]
0038bc  e003              B        |L1.14534|
                  |L1.14526|
;;;4568   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0038be  6f41              LDR      r1,[r0,#0x74]
0038c0  f0416180          ORR      r1,r1,#0x4000000
0038c4  6741              STR      r1,[r0,#0x74]
                  |L1.14534|
;;;4569   	}
;;;4570   	
;;;4571   
;;;4572   
;;;4573   
;;;4574   LPC_ADC->ADCR |=  (1<<24);
0038c6  6810              LDR      r0,[r2,#0]
0038c8  f0407080          ORR      r0,r0,#0x1000000
0038cc  6010              STR      r0,[r2,#0]
                  |L1.14542|
;;;4575   
;;;4576   }
0038ce  e8bd81f0          POP      {r4-r8,pc}
;;;4577   
                          ENDP

                  adc_drv6 PROC
;;;4578   //-----------------------------------------------
;;;4579   void adc_drv6(void) //(с попыткой измерять горбы)
0038d2  e92d41f0          PUSH     {r4-r8,lr}
;;;4580   {
;;;4581   //int temp_S;
;;;4582   //char i;
;;;4583   //signed short temp_SS;
;;;4584   
;;;4585   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0038d6  4c0d              LDR      r4,|L1.14604|
0038d8  34f2              ADDS     r4,r4,#0xf2
0038da  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0038dc  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0038de  1a40              SUBS     r0,r0,r1
0038e0  b200              SXTH     r0,r0
0038e2  f7fffffe          BL       abs_pal
0038e6  1da5              ADDS     r5,r4,#6
0038e8  8028              STRH     r0,[r5,#0]
;;;4586   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0038ea  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0038ec  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0038ee  1a40              SUBS     r0,r0,r1
0038f0  b200              SXTH     r0,r0
0038f2  e01f              B        |L1.14644|
                  |L1.14580|
                          DCD      a_ind
                  |L1.14584|
                          DCD      mnemo_cnt
                  |L1.14588|
                          DCD      MNEMO_ON
                  |L1.14592|
                          DCD      MNEMO_TIME
                  |L1.14596|
                          DCD      bps
                  |L1.14600|
                          DCD      APV_ON2_TIME
                  |L1.14604|
                          DCD      ||area_number.18||
                  |L1.14608|
                          DCD      APV_ON2
                  |L1.14612|
                          DCD      NUMIST
                  |L1.14616|
                          DCD      APV_ON1
                  |L1.14620|
                          DCD      0x4002c000
                  |L1.14624|
                          DCD      0x40034000
                  |L1.14628|
                          DCD      0xe000e100
                  |L1.14632|
                          DCD      ||.bss||+0x42c
                  |L1.14636|
                          DCD      ||.bss||+0xc
                  |L1.14640|
                          DCD      0x2009c000
                  |L1.14644|
003934  f7fffffe          BL       abs_pal
003938  8068              STRH     r0,[r5,#2]
;;;4587   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00393a  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00393c  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00393e  1a40              SUBS     r0,r0,r1
003940  b200              SXTH     r0,r0
003942  f7fffffe          BL       abs_pal
003946  80a8              STRH     r0,[r5,#4]
;;;4588   
;;;4589   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4590   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4591   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4592   
;;;4593   
;;;4594   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003948  f44f7196          MOV      r1,#0x12c
;;;4595   	{
;;;4596   	adc_result=adc_self_ch_buff[2];
00394c  f1a406f2          SUB      r6,r4,#0xf2
003950  4288              CMP      r0,r1                 ;4594
003952  da02              BGE      |L1.14682|
003954  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003956  87b0              STRH     r0,[r6,#0x3c]
003958  e00c              B        |L1.14708|
                  |L1.14682|
;;;4597   	} 
;;;4598   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00395a  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
00395e  4288              CMP      r0,r1
003960  da02              BGE      |L1.14696|
;;;4599   	{
;;;4600   	adc_result=adc_self_ch_buff[1];
003962  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003964  87b0              STRH     r0,[r6,#0x3c]
003966  e005              B        |L1.14708|
                  |L1.14696|
;;;4601   	}
;;;4602   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003968  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
00396c  4288              CMP      r0,r1
00396e  da01              BGE      |L1.14708|
;;;4603   	{
;;;4604   	adc_result=adc_self_ch_buff[0];
003970  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003972  87b0              STRH     r0,[r6,#0x3c]
                  |L1.14708|
;;;4605   	}
;;;4606       //adc_result=92;
;;;4607   
;;;4608   if(adc_ch_net)
003974  7c77              LDRB     r7,[r6,#0x11]  ; adc_ch_net
003976  2200              MOVS     r2,#0
003978  b3ef              CBZ      r7,|L1.14838|
;;;4609   	{
;;;4610   
;;;4611   	if(adc_window_flag)
00397a  7d33              LDRB     r3,[r6,#0x14]  ; adc_window_flag
;;;4612   		{
;;;4613   		main_power_buffer[0]+=(long)(adc_result>>2);
00397c  48ff              LDR      r0,|L1.15740|
00397e  b18b              CBZ      r3,|L1.14756|
003980  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
003984  6804              LDR      r4,[r0,#0]  ; main_power_buffer
003986  eb0404a1          ADD      r4,r4,r1,ASR #2
00398a  6004              STR      r4,[r0,#0]  ; main_power_buffer
;;;4614   		main_power_buffer[1]+=(long)(adc_result>>2);
00398c  6844              LDR      r4,[r0,#4]  ; main_power_buffer
00398e  eb0404a1          ADD      r4,r4,r1,ASR #2
003992  6044              STR      r4,[r0,#4]  ; main_power_buffer
;;;4615   		main_power_buffer[2]+=(long)(adc_result>>2);
003994  6884              LDR      r4,[r0,#8]  ; main_power_buffer
003996  eb0404a1          ADD      r4,r4,r1,ASR #2
00399a  6084              STR      r4,[r0,#8]  ; main_power_buffer
;;;4616   		main_power_buffer[3]+=(long)(adc_result>>2);
00399c  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
00399e  eb0401a1          ADD      r1,r4,r1,ASR #2
0039a2  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L1.14756|
;;;4617   		}
;;;4618   //	main_power_buffer[4]+=(long)(adc_result>>2);
;;;4619   //	main_power_buffer[5]+=(long)(adc_result>>2);
;;;4620   //	main_power_buffer[6]+=(long)(adc_result>>2);
;;;4621   //	main_power_buffer[7]+=(long)(adc_result>>2);
;;;4622   //	main_power_buffer_cnt++;
;;;4623   
;;;4624   
;;;4625   	if(adc_result<100)
0039a4  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
0039a8  2964              CMP      r1,#0x64
0039aa  da06              BGE      |L1.14778|
;;;4626   		{
;;;4627   		adc_zero_cnt++;
0039ac  f8b61040          LDRH     r1,[r6,#0x40]  ; adc_zero_cnt
0039b0  f1010101          ADD      r1,r1,#1
0039b4  f8a61040          STRH     r1,[r6,#0x40]
0039b8  e001              B        |L1.14782|
                  |L1.14778|
;;;4628   		}
;;;4629   	else adc_zero_cnt=0;
0039ba  f8a62040          STRH     r2,[r6,#0x40]
                  |L1.14782|
;;;4630   
;;;4631   	if(adc_zero_cnt>=2000)
0039be  f9b64040          LDRSH    r4,[r6,#0x40]  ; adc_zero_cnt
0039c2  f44f61fa          MOV      r1,#0x7d0
0039c6  428c              CMP      r4,r1
0039c8  db06              BLT      |L1.14808|
;;;4632   		{
;;;4633   		adc_zero_cnt=2000;
0039ca  f8a61040          STRH     r1,[r6,#0x40]
;;;4634   		main_power_buffer[0]=0;
0039ce  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4635   		main_power_buffer[1]=0;
0039d0  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4636   		main_power_buffer[2]=0;
0039d2  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4637   		main_power_buffer[3]=0;
0039d4  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
;;;4638   		net_buff_=0;
0039d6  8772              STRH     r2,[r6,#0x3a]
                  |L1.14808|
;;;4639   		}
;;;4640   
;;;4641   	if(adc_zero_cnt==5)
0039d8  f8b61040          LDRH     r1,[r6,#0x40]  ; adc_zero_cnt
0039dc  2905              CMP      r1,#5
0039de  d14f              BNE      |L1.14976|
;;;4642   		{
;;;4643   		
;;;4644   		if(adc_window_flag)
0039e0  b1bb              CBZ      r3,|L1.14866|
;;;4645   			{
;;;4646   			adc_gorb_cnt++;
0039e2  8ff1              LDRH     r1,[r6,#0x3e]  ; adc_gorb_cnt
0039e4  f1010101          ADD      r1,r1,#1
0039e8  b209              SXTH     r1,r1
0039ea  87f1              STRH     r1,[r6,#0x3e]
;;;4647   			if(adc_gorb_cnt>=512)
0039ec  f5b17f00          CMP      r1,#0x200
0039f0  db00              BLT      |L1.14836|
;;;4648   				{
;;;4649   				adc_gorb_cnt=0;
0039f2  87f2              STRH     r2,[r6,#0x3e]
                  |L1.14836|
;;;4650   				//net_buff_=main_power_buffer[0]>>8;
;;;4651   				//main_power_buffer[0]=0;
;;;4652   			   	}
;;;4653   
;;;4654   			if((adc_gorb_cnt&0x007f)==0)
0039f4  e000              B        |L1.14840|
                  |L1.14838|
0039f6  e01b              B        |L1.14896|
                  |L1.14840|
0039f8  f9b6103e          LDRSH    r1,[r6,#0x3e]  ; adc_gorb_cnt
0039fc  064c              LSLS     r4,r1,#25
0039fe  d108              BNE      |L1.14866|
;;;4655   				{
;;;4656   				net_buff_=main_power_buffer[adc_gorb_cnt>>7]>>8;
003a00  ea4f11e1          ASR      r1,r1,#7
003a04  f8504021          LDR      r4,[r0,r1,LSL #2]
003a08  ea4f2424          ASR      r4,r4,#8
003a0c  8774              STRH     r4,[r6,#0x3a]
;;;4657   				main_power_buffer[adc_gorb_cnt>>7]=0;
003a0e  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L1.14866|
;;;4658   				}
;;;4659   			}
;;;4660   
;;;4661   		//LPC_GPIO2->FIODIR|=(1<<8);
;;;4662   		//LPC_GPIO2->FIOPIN^=(1<<8);
;;;4663   
;;;4664   		if((adc_window_cnt>150)&&(adc_window_flag))
003a12  f9b60042          LDRSH    r0,[r6,#0x42]  ; adc_window_cnt
003a16  2896              CMP      r0,#0x96
003a18  dd01              BLE      |L1.14878|
003a1a  b103              CBZ      r3,|L1.14878|
;;;4665   			{
;;;4666   			adc_window_flag=0;
003a1c  7532              STRB     r2,[r6,#0x14]
                  |L1.14878|
;;;4667   
;;;4668   			
;;;4669   			}
;;;4670   		if((adc_window_cnt>30)&&(adc_window_cnt<70)&&(!adc_window_flag))
003a1e  381f              SUBS     r0,r0,#0x1f
003a20  2827              CMP      r0,#0x27
003a22  d22d              BCS      |L1.14976|
003a24  7d30              LDRB     r0,[r6,#0x14]  ; adc_window_flag
003a26  bb58              CBNZ     r0,|L1.14976|
;;;4671   			{
;;;4672   			adc_window_flag=1;
003a28  f04f0001          MOV      r0,#1
003a2c  7530              STRB     r0,[r6,#0x14]
003a2e  e027              B        |L1.14976|
                  |L1.14896|
;;;4673   
;;;4674   			//LPC_GPIO2->FIODIR|=(1<<8);
;;;4675   			//LPC_GPIO2->FIOPIN|=(1<<8);
;;;4676   			}
;;;4677   		}
;;;4678   	} 
;;;4679   else if(!adc_ch_net)
;;;4680   	{
;;;4681   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
003a30  48d3              LDR      r0,|L1.15744|
003a32  7cb5              LDRB     r5,[r6,#0x12]  ; adc_ch
003a34  7cf3              LDRB     r3,[r6,#0x13]  ; adc_ch_cnt
003a36  eb001485          ADD      r4,r0,r5,LSL #6
003a3a  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
003a3e  f8441023          STR      r1,[r4,r3,LSL #2]
;;;4682   	
;;;4683   	if((adc_ch_cnt&0x03)==0)
003a42  0798              LSLS     r0,r3,#30
003a44  d10f              BNE      |L1.14950|
;;;4684   		{
;;;4685   		long temp_L;
;;;4686   		char i;
;;;4687   		temp_L=0;
003a46  4601              MOV      r1,r0
                  |L1.14920|
;;;4688   		for(i=0;i<16;i++)
;;;4689   			{
;;;4690   			temp_L+=adc_buff[adc_ch][i];
003a48  f854c020          LDR      r12,[r4,r0,LSL #2]
003a4c  4461              ADD      r1,r1,r12
003a4e  f1000001          ADD      r0,r0,#1              ;4688
003a52  b2c0              UXTB     r0,r0                 ;4688
003a54  2810              CMP      r0,#0x10              ;4688
003a56  d3f7              BCC      |L1.14920|
;;;4691   			}
;;;4692   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003a58  ea4f1021          ASR      r0,r1,#4
003a5c  49c7              LDR      r1,|L1.15740|
003a5e  f1a10120          SUB      r1,r1,#0x20
003a62  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.14950|
;;;4693   
;;;4694   		//adc_buff_[3]=346;
;;;4695   		}
;;;4696   	if(++adc_ch>=16) 
003a66  1c6d              ADDS     r5,r5,#1
003a68  b2e8              UXTB     r0,r5
003a6a  74b0              STRB     r0,[r6,#0x12]
003a6c  2810              CMP      r0,#0x10
003a6e  d307              BCC      |L1.14976|
;;;4697   		{
;;;4698   		adc_ch=0;
003a70  74b2              STRB     r2,[r6,#0x12]
;;;4699   		adc_ch_cnt++;
003a72  f1030301          ADD      r3,r3,#1
003a76  b2d8              UXTB     r0,r3
003a78  74f0              STRB     r0,[r6,#0x13]
;;;4700   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003a7a  2810              CMP      r0,#0x10
003a7c  d300              BCC      |L1.14976|
003a7e  74f2              STRB     r2,[r6,#0x13]
                  |L1.14976|
;;;4701   		}
;;;4702   	}
;;;4703   
;;;4704   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4705   
;;;4706   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4707   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4708   /*
;;;4709   	{
;;;4710   	if((adc_cnt1&0x03)==0)
;;;4711   		{
;;;4712   		temp_S=0;
;;;4713   		for(i=0;i<16;i++)
;;;4714   			{
;;;4715   			temp_S+=adc_buff[adc_ch][i];
;;;4716   			} 
;;;4717            	adc_buff_[adc_ch]=temp_S>>4;
;;;4718             }
;;;4719   	}*/
;;;4720   
;;;4721   
;;;4722   		  
;;;4723   
;;;4724   adc_self_ch_cnt=0;
003a80  7432              STRB     r2,[r6,#0x10]
;;;4725   
;;;4726   adc_ch_net++;
003a82  f1070701          ADD      r7,r7,#1
;;;4727   adc_ch_net&=1;
003a86  f0070001          AND      r0,r7,#1
003a8a  7470              STRB     r0,[r6,#0x11]
;;;4728   
;;;4729   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4730   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4731   
;;;4732   if(adc_ch_net)
;;;4733   	{
;;;4734   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4735   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4736   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003a8c  4abd              LDR      r2,|L1.15748|
003a8e  b130              CBZ      r0,|L1.15006|
003a90  6810              LDR      r0,[r2,#0]
003a92  f02000ff          BIC      r0,r0,#0xff
003a96  f1000004          ADD      r0,r0,#4
003a9a  6010              STR      r0,[r2,#0]
003a9c  e03d              B        |L1.15130|
                  |L1.15006|
;;;4737   	}
;;;4738   else
;;;4739   	{
;;;4740   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4741   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4742   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003a9e  7cb1              LDRB     r1,[r6,#0x12]  ; adc_ch
003aa0  0708              LSLS     r0,r1,#28
003aa2  d406              BMI      |L1.15026|
003aa4  6810              LDR      r0,[r2,#0]
003aa6  f02000ff          BIC      r0,r0,#0xff
003aaa  f1000001          ADD      r0,r0,#1
003aae  6010              STR      r0,[r2,#0]
003ab0  e005              B        |L1.15038|
                  |L1.15026|
;;;4743   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003ab2  6810              LDR      r0,[r2,#0]
003ab4  f02000ff          BIC      r0,r0,#0xff
003ab8  f1000002          ADD      r0,r0,#2
003abc  6010              STR      r0,[r2,#0]
                  |L1.15038|
;;;4744   
;;;4745   
;;;4746   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003abe  48b2              LDR      r0,|L1.15752|
003ac0  6803              LDR      r3,[r0,#0]
003ac2  f0435380          ORR      r3,r3,#0x10000000
003ac6  6003              STR      r3,[r0,#0]
;;;4747   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
003ac8  6a03              LDR      r3,[r0,#0x20]
003aca  f0434380          ORR      r3,r3,#0x40000000
003ace  6203              STR      r3,[r0,#0x20]
;;;4748   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003ad0  6e03              LDR      r3,[r0,#0x60]
003ad2  f0436380          ORR      r3,r3,#0x4000000
003ad6  6603              STR      r3,[r0,#0x60]
;;;4749   
;;;4750   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003ad8  07cb              LSLS     r3,r1,#31
003ada  d00a              BEQ      |L1.15090|
;;;4751   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003adc  6943              LDR      r3,[r0,#0x14]
003ade  f0435380          ORR      r3,r3,#0x10000000
003ae2  6143              STR      r3,[r0,#0x14]
                  |L1.15076|
;;;4752   
;;;4753   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003ae4  078b              LSLS     r3,r1,#30
003ae6  d409              BMI      |L1.15100|
003ae8  6b43              LDR      r3,[r0,#0x34]
003aea  f0234380          BIC      r3,r3,#0x40000000
003aee  6343              STR      r3,[r0,#0x34]
003af0  e008              B        |L1.15108|
                  |L1.15090|
003af2  6943              LDR      r3,[r0,#0x14]         ;4750
003af4  f0235380          BIC      r3,r3,#0x10000000     ;4750
003af8  6143              STR      r3,[r0,#0x14]         ;4750
003afa  e7f3              B        |L1.15076|
                  |L1.15100|
;;;4754   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003afc  6b43              LDR      r3,[r0,#0x34]
003afe  f0434380          ORR      r3,r3,#0x40000000
003b02  6343              STR      r3,[r0,#0x34]
                  |L1.15108|
;;;4755   
;;;4756   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003b04  0749              LSLS     r1,r1,#29
003b06  d404              BMI      |L1.15122|
003b08  6f41              LDR      r1,[r0,#0x74]
003b0a  f0216180          BIC      r1,r1,#0x4000000
003b0e  6741              STR      r1,[r0,#0x74]
003b10  e003              B        |L1.15130|
                  |L1.15122|
;;;4757   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003b12  6f41              LDR      r1,[r0,#0x74]
003b14  f0416180          ORR      r1,r1,#0x4000000
003b18  6741              STR      r1,[r0,#0x74]
                  |L1.15130|
;;;4758   	}
;;;4759   	
;;;4760   
;;;4761   
;;;4762   
;;;4763   LPC_ADC->ADCR |=  (1<<24);
003b1a  6810              LDR      r0,[r2,#0]
003b1c  f0407080          ORR      r0,r0,#0x1000000
003b20  6010              STR      r0,[r2,#0]
;;;4764   
;;;4765   }
003b22  e6d4              B        |L1.14542|
;;;4766    /*
                          ENDP

                  avg_hndl PROC
;;;4834   //-----------------------------------------------
;;;4835   void avg_hndl(void)
003b24  e92d41f0          PUSH     {r4-r8,lr}
;;;4836   { 
;;;4837   char i;
;;;4838   
;;;4839   //#define AVGCNTMAX	5
;;;4840   if(avg_main_cnt)
003b28  4d98              LDR      r5,|L1.15756|
003b2a  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
003b2e  b118              CBZ      r0,|L1.15160|
;;;4841   	{
;;;4842   	avg_main_cnt--;
003b30  f1a00001          SUB      r0,r0,#1
003b34  86e8              STRH     r0,[r5,#0x36]
                  |L1.15158|
;;;4843   	//goto avg_hndl_end;
;;;4844   	return;
;;;4845   	}                 
;;;4846   
;;;4847   avg_main_cnt=5;
;;;4848   avg_num=0;
;;;4849   
;;;4850   for(i=0;i<NUMIST;i++)
;;;4851   	{
;;;4852   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4853   	}
;;;4854   
;;;4855   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4856   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4857   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4858   
;;;4859   if(avg_vektor) avg_vektor=0;
;;;4860   else avg_vektor=1;
;;;4861   	
;;;4862   if(avg_num<2)
;;;4863   	{
;;;4864   	//goto avg_hndl_end;
;;;4865   	return;
;;;4866   	}
;;;4867   	
;;;4868   else
;;;4869   	{
;;;4870   	i_avg_min=5000;
;;;4871   	i_avg_max=0;
;;;4872   	i_avg_summ=0;
;;;4873   	for(i=0;i<NUMIST;i++)
;;;4874   		{
;;;4875   		if(bps[i]._state==bsWRK)
;;;4876   			{
;;;4877   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4878   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4879   			
;;;4880   			i_avg_summ+=bps[i]._Ii;
;;;4881   			}
;;;4882   		}
;;;4883   	i_avg=i_avg_summ/avg_num;	
;;;4884   	
;;;4885   	if(i_avg_min==0)i_avg_min=1;
;;;4886   
;;;4887   	avg=i_avg_max;
;;;4888   	avg*=100;
;;;4889   	avg/=i_avg_min;
;;;4890   
;;;4891   	if(avg>130) bAVG=1;
;;;4892   	if(avg<110) bAVG=0;
;;;4893   
;;;4894   	if(bAVG==1)
;;;4895   		{
;;;4896   		for(i=0;i<NUMIST;i++)
;;;4897   			{
;;;4898   			if(bps[i]._state==bsWRK)
;;;4899   				{
;;;4900   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4901   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4902   			
;;;4903   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4904   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4905   				}
;;;4906   			}		
;;;4907   		}			
;;;4908   	}   	 
;;;4909   
;;;4910   
;;;4911   avg_hndl_end:
;;;4912   __nop();  
;;;4913   }
003b36  e6ca              B        |L1.14542|
                  |L1.15160|
003b38  f04f0005          MOV      r0,#5                 ;4847
003b3c  86e8              STRH     r0,[r5,#0x36]         ;4847
003b3e  f04f0700          MOV      r7,#0                 ;4848
003b42  76af              STRB     r7,[r5,#0x1a]         ;4848
003b44  f04f0000          MOV      r0,#0                 ;4850
003b48  4992              LDR      r1,|L1.15764|
003b4a  4c91              LDR      r4,|L1.15760|
003b4c  f9b12000          LDRSH    r2,[r1,#0]            ;4850
003b50  e012              B        |L1.15224|
                  |L1.15186|
003b52  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4852
003b56  eb011100          ADD      r1,r1,r0,LSL #4       ;4852
003b5a  eb040181          ADD      r1,r4,r1,LSL #2       ;4852
003b5e  788b              LDRB     r3,[r1,#2]            ;4852
003b60  2b01              CMP      r3,#1                 ;4852
003b62  d106              BNE      |L1.15218|
003b64  78c9              LDRB     r1,[r1,#3]            ;4852
003b66  2914              CMP      r1,#0x14              ;4852
003b68  d203              BCS      |L1.15218|
003b6a  7ea9              LDRB     r1,[r5,#0x1a]         ;4852  ; avg_num
003b6c  f1010101          ADD      r1,r1,#1              ;4852
003b70  76a9              STRB     r1,[r5,#0x1a]         ;4852
                  |L1.15218|
003b72  f1000001          ADD      r0,r0,#1              ;4850
003b76  b2c0              UXTB     r0,r0                 ;4850
                  |L1.15224|
003b78  4290              CMP      r0,r2                 ;4850
003b7a  dbea              BLT      |L1.15186|
003b7c  7ee8              LDRB     r0,[r5,#0x1b]         ;4859  ; avg_vektor
003b7e  f04f0c01          MOV      r12,#1                ;4852
003b82  b108              CBZ      r0,|L1.15240|
003b84  76ef              STRB     r7,[r5,#0x1b]         ;4859
003b86  e001              B        |L1.15244|
                  |L1.15240|
003b88  f885c01b          STRB     r12,[r5,#0x1b]        ;4860
                  |L1.15244|
003b8c  7eae              LDRB     r6,[r5,#0x1a]         ;4862  ; avg_num
003b8e  2e02              CMP      r6,#2                 ;4862
003b90  d3d1              BCC      |L1.15158|
003b92  4b7e              LDR      r3,|L1.15756|
003b94  f2413088          MOV      r0,#0x1388            ;4870
003b98  f1030380          ADD      r3,r3,#0x80           ;4870
003b9c  61d8              STR      r0,[r3,#0x1c]         ;4870  ; i_avg_min
003b9e  619f              STR      r7,[r3,#0x18]         ;4871  ; i_avg_max
003ba0  621f              STR      r7,[r3,#0x20]         ;4872  ; i_avg_summ
003ba2  f04f0100          MOV      r1,#0                 ;4873
003ba6  e01c              B        |L1.15330|
                  |L1.15272|
003ba8  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4875
003bac  eb001001          ADD      r0,r0,r1,LSL #4       ;4875
003bb0  eb040080          ADD      r0,r4,r0,LSL #2       ;4875
003bb4  f8908002          LDRB     r8,[r0,#2]            ;4875
003bb8  f1b80f01          CMP      r8,#1                 ;4875
003bbc  d10e              BNE      |L1.15324|
003bbe  6a40              LDR      r0,[r0,#0x24]         ;4877
003bc0  f8d38018          LDR      r8,[r3,#0x18]         ;4877  ; i_avg_max
003bc4  4540              CMP      r0,r8                 ;4877
003bc6  dd00              BLE      |L1.15306|
003bc8  6198              STR      r0,[r3,#0x18]         ;4877  ; i_avg_max
                  |L1.15306|
003bca  f8d3801c          LDR      r8,[r3,#0x1c]         ;4878  ; i_avg_min
003bce  4540              CMP      r0,r8                 ;4878
003bd0  da00              BGE      |L1.15316|
003bd2  61d8              STR      r0,[r3,#0x1c]         ;4878  ; i_avg_min
                  |L1.15316|
003bd4  f8d38020          LDR      r8,[r3,#0x20]         ;4880  ; i_avg_summ
003bd8  4440              ADD      r0,r0,r8              ;4880
003bda  6218              STR      r0,[r3,#0x20]         ;4880  ; i_avg_summ
                  |L1.15324|
003bdc  f1010101          ADD      r1,r1,#1              ;4873
003be0  b2c9              UXTB     r1,r1                 ;4873
                  |L1.15330|
003be2  4291              CMP      r1,r2                 ;4873
003be4  dbe0              BLT      |L1.15272|
003be6  6a18              LDR      r0,[r3,#0x20]         ;4883  ; i_avg_summ
003be8  fb90f6f6          SDIV     r6,r0,r6              ;4883
003bec  625e              STR      r6,[r3,#0x24]         ;4883  ; i_avg
003bee  69d8              LDR      r0,[r3,#0x1c]         ;4885  ; i_avg_min
003bf0  b908              CBNZ     r0,|L1.15350|
003bf2  f8c3c01c          STR      r12,[r3,#0x1c]        ;4885  ; i_avg_min
                  |L1.15350|
003bf6  6998              LDR      r0,[r3,#0x18]         ;4887  ; i_avg_max
003bf8  f04f0164          MOV      r1,#0x64              ;4888
003bfc  fb00f001          MUL      r0,r0,r1              ;4888
003c00  69d9              LDR      r1,[r3,#0x1c]         ;4889  ; i_avg_min
003c02  fb90f0f1          SDIV     r0,r0,r1              ;4889
003c06  6298              STR      r0,[r3,#0x28]         ;4889  ; avg
003c08  2882              CMP      r0,#0x82              ;4891
003c0a  dd01              BLE      |L1.15376|
003c0c  f885c019          STRB     r12,[r5,#0x19]        ;4891
                  |L1.15376|
003c10  286e              CMP      r0,#0x6e              ;4892
003c12  da00              BGE      |L1.15382|
003c14  766f              STRB     r7,[r5,#0x19]         ;4892
                  |L1.15382|
003c16  7e68              LDRB     r0,[r5,#0x19]         ;4894  ; bAVG
003c18  2801              CMP      r0,#1                 ;4894
003c1a  d138              BNE      |L1.15502|
003c1c  f04f0100          MOV      r1,#0                 ;4896
003c20  f06f0731          MVN      r7,#0x31              ;4903
003c24  e031              B        |L1.15498|
                  |L1.15398|
003c26  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4898
003c2a  eb001001          ADD      r0,r0,r1,LSL #4       ;4898
003c2e  eb040080          ADD      r0,r4,r0,LSL #2       ;4898
003c32  7883              LDRB     r3,[r0,#2]            ;4898
003c34  2b01              CMP      r3,#1                 ;4898
003c36  d125              BNE      |L1.15492|
003c38  6a43              LDR      r3,[r0,#0x24]         ;4900
003c3a  42b3              CMP      r3,r6                 ;4900
003c3c  dd0a              BLE      |L1.15444|
003c3e  f895c01b          LDRB     r12,[r5,#0x1b]        ;4900  ; avg_vektor
003c42  f1bc0f00          CMP      r12,#0                ;4900
003c46  d105              BNE      |L1.15444|
003c48  f8b0c054          LDRH     r12,[r0,#0x54]        ;4900
003c4c  f1ac0c01          SUB      r12,r12,#1            ;4900
003c50  f8a0c054          STRH     r12,[r0,#0x54]        ;4900
                  |L1.15444|
003c54  42b3              CMP      r3,r6                 ;4901
003c56  da07              BGE      |L1.15464|
003c58  7eeb              LDRB     r3,[r5,#0x1b]         ;4901  ; avg_vektor
003c5a  b12b              CBZ      r3,|L1.15464|
003c5c  f8b03054          LDRH     r3,[r0,#0x54]         ;4901
003c60  f1030301          ADD      r3,r3,#1              ;4901
003c64  f8a03054          STRH     r3,[r0,#0x54]         ;4901
                  |L1.15464|
003c68  f9b03054          LDRSH    r3,[r0,#0x54]         ;4903
003c6c  42bb              CMP      r3,r7                 ;4903
003c6e  da01              BGE      |L1.15476|
003c70  f8a07054          STRH     r7,[r0,#0x54]         ;4903
                  |L1.15476|
003c74  f9b03054          LDRSH    r3,[r0,#0x54]         ;4904
003c78  2b32              CMP      r3,#0x32              ;4904
003c7a  dd03              BLE      |L1.15492|
003c7c  f04f0332          MOV      r3,#0x32              ;4904
003c80  f8a03054          STRH     r3,[r0,#0x54]         ;4904
                  |L1.15492|
003c84  f1010101          ADD      r1,r1,#1              ;4896
003c88  b2c9              UXTB     r1,r1                 ;4896
                  |L1.15498|
003c8a  4291              CMP      r1,r2                 ;4896
003c8c  dbcb              BLT      |L1.15398|
                  |L1.15502|
003c8e  bf00              NOP                            ;4912
003c90  e61d              B        |L1.14542|
;;;4914   
                          ENDP

                  rele_hndl PROC
;;;4927   //*************-----------------------------------------------
;;;4928   void rele_hndl(void)
003c92  e92d5ff0          PUSH     {r4-r12,lr}
;;;4929   {
;;;4930   //static char cnt_rel_sam;
;;;4931   //char temp;
;;;4932   
;;;4933   //temp=0;
;;;4934   
;;;4935   
;;;4936   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003c96  4840              LDR      r0,|L1.15768|
003c98  6801              LDR      r1,[r0,#0]
003c9a  4a40              LDR      r2,|L1.15772|
003c9c  ea010102          AND      r1,r1,r2
003ca0  6001              STR      r1,[r0,#0]
;;;4937   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003ca2  4c39              LDR      r4,|L1.15752|
003ca4  6821              LDR      r1,[r4,#0]
003ca6  f441717c          ORR      r1,r1,#0x3f0
003caa  6021              STR      r1,[r4,#0]
;;;4938   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003cac  69c1              LDR      r1,[r0,#0x1c]
003cae  f4212140          BIC      r1,r1,#0xc0000
003cb2  61c1              STR      r1,[r0,#0x1c]
;;;4939   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003cb4  6e21              LDR      r1,[r4,#0x60]
003cb6  f0417100          ORR      r1,r1,#0x2000000
003cba  6621              STR      r1,[r4,#0x60]
;;;4940   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003cbc  6841              LDR      r1,[r0,#4]
003cbe  f0216140          BIC      r1,r1,#0xc000000
003cc2  6041              STR      r1,[r0,#4]
;;;4941   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003cc4  6820              LDR      r0,[r4,#0]
003cc6  f0405000          ORR      r0,r0,#0x20000000
003cca  6020              STR      r0,[r4,#0]
;;;4942   
;;;4943   
;;;4944   
;;;4945   
;;;4946   
;;;4947   
;;;4948   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003ccc  4835              LDR      r0,|L1.15780|
003cce  4d34              LDR      r5,|L1.15776|
003cd0  4936              LDR      r1,|L1.15788|
003cd2  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003cd4  4834              LDR      r0,|L1.15784|
003cd6  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003cda  f9b11000          LDRSH    r1,[r1,#0]
003cde  7800              LDRB     r0,[r0,#0]
003ce0  4313              ORRS     r3,r3,r2
003ce2  d007              BEQ      |L1.15604|
003ce4  b130              CBZ      r0,|L1.15604|
003ce6  2905              CMP      r1,#5
003ce8  dd04              BLE      |L1.15604|
;;;4949   	{
;;;4950   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003cea  69a3              LDR      r3,[r4,#0x18]
003cec  f4437380          ORR      r3,r3,#0x100
003cf0  61a3              STR      r3,[r4,#0x18]
003cf2  e003              B        |L1.15612|
                  |L1.15604|
;;;4951   	}
;;;4952   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003cf4  69e3              LDR      r3,[r4,#0x1c]
003cf6  f4437380          ORR      r3,r3,#0x100
003cfa  61e3              STR      r3,[r4,#0x1c]
                  |L1.15612|
;;;4953   
;;;4954   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003cfc  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003d00  4313              ORRS     r3,r3,r2
003d02  d007              BEQ      |L1.15636|
003d04  b130              CBZ      r0,|L1.15636|
003d06  2905              CMP      r1,#5
003d08  dd04              BLE      |L1.15636|
;;;4955   	{
;;;4956   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003d0a  69a0              LDR      r0,[r4,#0x18]
003d0c  f0400040          ORR      r0,r0,#0x40
003d10  61a0              STR      r0,[r4,#0x18]
003d12  e003              B        |L1.15644|
                  |L1.15636|
;;;4957   	}
;;;4958   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003d14  69e0              LDR      r0,[r4,#0x1c]
003d16  f0400040          ORR      r0,r0,#0x40
003d1a  61e0              STR      r0,[r4,#0x1c]
                  |L1.15644|
;;;4959   
;;;4960   
;;;4961   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003d1c  20d2              MOVS     r0,#0xd2
003d1e  f7fffffe          BL       mess_find_unvol
003d22  4d23              LDR      r5,|L1.15792|
003d24  b110              CBZ      r0,|L1.15660|
003d26  6828              LDR      r0,[r5,#0]  ; mess_data
003d28  2864              CMP      r0,#0x64
003d2a  d06d              BEQ      |L1.15880|
                  |L1.15660|
;;;4962   	{
;;;4963   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4964   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4965   	}
;;;4966   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003d2c  69e0              LDR      r0,[r4,#0x1c]
003d2e  f0405000          ORR      r0,r0,#0x20000000
003d32  61e0              STR      r0,[r4,#0x1c]
                  |L1.15668|
;;;4967   
;;;4968   
;;;4969   #ifndef UKU2071x
;;;4970   //Реле аварии сети
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4974   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4975   	}
;;;4976   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4977   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4978   #endif
;;;4979   #ifdef UKU2071x
;;;4980   //Реле аварии сети
;;;4981   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d34  20d2              MOVS     r0,#0xd2
003d36  f7fffffe          BL       mess_find_unvol
;;;4982   	{
;;;4983   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4984   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4985   	}
;;;4986   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003d3a  4e1e              LDR      r6,|L1.15796|
003d3c  b110              CBZ      r0,|L1.15684|
003d3e  6828              LDR      r0,[r5,#0]            ;4981  ; mess_data
003d40  2866              CMP      r0,#0x66              ;4981
003d42  d072              BEQ      |L1.15914|
                  |L1.15684|
003d44  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d46  07c0              LSLS     r0,r0,#31
003d48  d07b              BEQ      |L1.15938|
;;;4987   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d4a  6fa0              LDR      r0,[r4,#0x78]
003d4c  f0407000          ORR      r0,r0,#0x2000000
003d50  67a0              STR      r0,[r4,#0x78]
                  |L1.15698|
;;;4988   #endif
;;;4989   
;;;4990   #ifdef UKU_3U
;;;4991   //Реле аварий батарей
;;;4992   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4993   	{
;;;4994   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4995   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4996        }
;;;4997   else 
;;;4998   	{
;;;4999   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5000        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5001   	} 
;;;5002   
;;;5003   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5004   	{
;;;5005   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5006   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5007        }
;;;5008   else 
;;;5009   	{
;;;5010   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5011        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5012   	} 
;;;5013   
;;;5014   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5015   	{
;;;5016   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5017   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5018        }
;;;5019   else 
;;;5020   	{
;;;5021   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5022        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5023   	} 
;;;5024   
;;;5025   #endif
;;;5026   
;;;5027   
;;;5028   #ifdef UKU_GLONASS
;;;5029   //Реле аварий батарей
;;;5030   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5031   	{
;;;5032   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5033   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5034        }
;;;5035   else 
;;;5036   	{
;;;5037   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5038        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5039   	} 
;;;5040   
;;;5041   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5042   	{
;;;5043   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5044   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5045        }
;;;5046   else 
;;;5047   	{
;;;5048   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5049        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5050   	} 
;;;5051   
;;;5052   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5053   	{
;;;5054   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5055   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5056        }
;;;5057   else 
;;;5058   	{
;;;5059   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5060        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5061   	} 
;;;5062   
;;;5063   #endif
;;;5064   
;;;5065   #ifdef U 
;;;5066   
;;;5067   #endif
;;;5068   
;;;5069   #ifdef UKU_RSTKM
;;;5070   
;;;5071   //Реле общей аварии
;;;5072   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5073   	{
;;;5074   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5075   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5076   	}
;;;5077   else 
;;;5078   	{
;;;5079        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5080             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5081             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5082             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5083             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5084        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5085   	}
;;;5086   	
;;;5087   
;;;5088   //Реле освещения
;;;5089   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5090   	{
;;;5091   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5092   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5093        }
;;;5094   else 
;;;5095   	{
;;;5096   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5097        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5098   	}
;;;5099   
;;;5100   
;;;5101   //Реле выключения нагрузки
;;;5102   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5103   	{
;;;5104   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5105   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5106        }
;;;5107   else if(tloaddisable_cmnd==0)
;;;5108   	{
;;;5109   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5110   	}
;;;5111   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5112   	{
;;;5113   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5114   	}
;;;5115   
;;;5116   else 
;;;5117   	{
;;;5118   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5119        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5120   	} 
;;;5121   
;;;5122   //Реле осевого вентилятора
;;;5123   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5124   	{
;;;5125   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5126   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5127   	}
;;;5128   else 
;;;5129   	{
;;;5130   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5131        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5132   	} 
;;;5133   
;;;5134   #endif
;;;5135   
;;;5136   #ifdef UKU_KONTUR
;;;5137   
;;;5138   //Реле общей аварии
;;;5139   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5140   	{
;;;5141   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5142   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5143   	}
;;;5144   else 
;;;5145   	{
;;;5146        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5147             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5148             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5149             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5150             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5152   	}
;;;5153   
;;;5154   	
;;;5155   //rel_warm_plazma=0;
;;;5156   //Реле освещения   
;;;5157   /*
;;;5158   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5159   	{
;;;5160   	if(mess_data[1]==0)
;;;5161   		{
;;;5162   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5163   		rel_warm_plazma=1;
;;;5164   		}
;;;5165   	else if(mess_data[1]==1) 
;;;5166   		{
;;;5167   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5168   		rel_warm_plazma=2;
;;;5169   		}
;;;5170        }
;;;5171   else 
;;;5172   	{
;;;5173   	if(warm_stat_k==wsOFF) 
;;;5174   		{
;;;5175   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5176   		rel_warm_plazma=3;
;;;5177   		}
;;;5178        else 
;;;5179   		{
;;;5180   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5181   		rel_warm_plazma=4;
;;;5182   		}
;;;5183   	}
;;;5184   */
;;;5185   //Реле освещения
;;;5186   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5187   	{
;;;5188   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5189   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5190        }
;;;5191   else 
;;;5192   	{
;;;5193   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5194        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5195   	}
;;;5196   
;;;5197   
;;;5198   
;;;5199   //Реле выключения нагрузки
;;;5200   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5201   	{
;;;5202   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5203   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5204        }
;;;5205   else if(tloaddisable_cmnd==0)
;;;5206   	{
;;;5207   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5208   	}
;;;5209   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5210   	{
;;;5211   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5212   	}
;;;5213   
;;;5214   else 
;;;5215   	{
;;;5216   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5218   	} 
;;;5219   
;;;5220   //Реле осевого вентилятора или отопителя
;;;5221   if(RELE_LOG)
;;;5222   	{
;;;5223   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5224   		{
;;;5225   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5226   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5227   		}
;;;5228   	else 
;;;5229   		{
;;;5230   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5231   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5232   		} 
;;;5233   
;;;5234   	}
;;;5235   else 
;;;5236   	{
;;;5237   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5238   		{
;;;5239   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5240   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5241   		}
;;;5242   	else 
;;;5243   		{
;;;5244   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5245   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5246   		} 
;;;5247   	}
;;;5248   #endif
;;;5249   
;;;5250   #ifdef UKU_6U
;;;5251   //Реле аварий батарей
;;;5252   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5253   	{
;;;5254   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5255   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5256        }
;;;5257   else 
;;;5258   	{
;;;5259   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5260        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5261   	} 
;;;5262   
;;;5263   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5264   	{
;;;5265   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5266   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5267       }
;;;5268   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5269   	{
;;;5270   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5271   		{
;;;5272   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5273   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5274        	}
;;;5275   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5276   	}
;;;5277   else 
;;;5278   	{
;;;5279   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5280       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5281   	} 
;;;5282   
;;;5283   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5284   	{
;;;5285   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5286   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5287        }
;;;5288   else 
;;;5289   	{
;;;5290   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5291        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5292   	} 
;;;5293   
;;;5294   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5295   	{
;;;5296   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5297   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5298   	}
;;;5299   else if((NPN_OUT==npnoRELEVENT))
;;;5300   	{
;;;5301   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5302   		{
;;;5303   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5304   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5305       	}
;;;5306   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5307   	}
;;;5308   else 
;;;5309   	{
;;;5310   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5311   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5312   	}
;;;5313   
;;;5314   #endif
;;;5315   
;;;5316   #ifdef UKU_220
;;;5317   //Реле аварий батарей
;;;5318   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5319   	{
;;;5320   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5321   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5322        }
;;;5323   else 
;;;5324   	{
;;;5325   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5326        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5327   	} 
;;;5328   
;;;5329   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5330   	{
;;;5331   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5332   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5333        }
;;;5334   else 
;;;5335   	{
;;;5336   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5337        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5338   	} 
;;;5339   
;;;5340   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5341   	{
;;;5342   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5343   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5344   	}
;;;5345   else 
;;;5346   	{
;;;5347   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5348   		{
;;;5349   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5350   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5351   		}
;;;5352   	else 
;;;5353   		{
;;;5354   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5355        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5356   		}
;;;5357   	}
;;;5358   
;;;5359   #endif
;;;5360   
;;;5361   #ifdef UKU_220_V2
;;;5362   //Реле аварий батарей
;;;5363   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5364   	{
;;;5365   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5366   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5367        }
;;;5368   else 
;;;5369   	{
;;;5370   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5371        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5372   	} 
;;;5373   
;;;5374   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5375   	{
;;;5376   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5377   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5378        }
;;;5379   else 
;;;5380   	{
;;;5381   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5382        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5383   	} 
;;;5384   
;;;5385   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5386   	{
;;;5387   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5388   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5389   	}
;;;5390   else 
;;;5391   	{
;;;5392   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5393   		{
;;;5394   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5395   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5396   		}
;;;5397   	else 
;;;5398   		{
;;;5399   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5400        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5401   		}
;;;5402   	}
;;;5403   
;;;5404   #endif
;;;5405   
;;;5406   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5407   
;;;5408   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003d52  4819              LDR      r0,|L1.15800|
;;;5409   	{
;;;5410   	#ifndef UKU2071x
;;;5411   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5412   		{
;;;5413   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5414   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5415   		}
;;;5416   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5417   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5418   	#endif
;;;5419   
;;;5420   	#ifdef UKU2071x
;;;5421   		#ifndef APSENERGIA
;;;5422   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5423   			{
;;;5424   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5425   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5426   			}
;;;5427   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5428   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5429   		#endif
;;;5430   
;;;5431   		#ifdef APSENERGIA
;;;5432   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5433   			{
;;;5434   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5435   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5436   			}
;;;5437   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5438   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5439   		#endif
;;;5440   
;;;5441   	#endif
;;;5442   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5443   		{
;;;5444   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5445   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5446   	     }
;;;5447   	else 
;;;5448   		{
;;;5449   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5450   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5451   		} 
;;;5452   
;;;5453   	//Реле аварий батарей
;;;5454   	#ifndef APSENERGIA
;;;5455   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5456   		{
;;;5457   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5458   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5459        	}
;;;5460   	else 
;;;5461   		{
;;;5462   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003d54  f8df8064          LDR      r8,|L1.15804|
003d58  4f19              LDR      r7,|L1.15808|
003d5a  8800              LDRH     r0,[r0,#0]            ;5408  ; AUSW_MAIN
003d5c  f5a041aa          SUB      r1,r0,#0x5500         ;5408
003d60  39fa              SUBS     r1,r1,#0xfa           ;5408
003d62  d001              BEQ      |L1.15720|
003d64  1e49              SUBS     r1,r1,#1              ;5408
003d66  d171              BNE      |L1.15948|
                  |L1.15720|
003d68  20d2              MOVS     r0,#0xd2              ;5422
003d6a  f7fffffe          BL       mess_find_unvol
003d6e  b110              CBZ      r0,|L1.15734|
003d70  6828              LDR      r0,[r5,#0]            ;5422  ; mess_data
003d72  2866              CMP      r0,#0x66              ;5422
003d74  d06d              BEQ      |L1.15954|
                  |L1.15734|
003d76  6830              LDR      r0,[r6,#0]            ;5427  ; avar_ind_stat
003d78  07c0              LSLS     r0,r0,#31             ;5427
003d7a  e023              B        |L1.15812|
                  |L1.15740|
                          DCD      ||.bss||+0x42c
                  |L1.15744|
                          DCD      ||.bss||+0xc
                  |L1.15748|
                          DCD      0x40034000
                  |L1.15752|
                          DCD      0x2009c000
                  |L1.15756|
                          DCD      ||area_number.18||
                  |L1.15760|
                          DCD      bps
                  |L1.15764|
                          DCD      NUMIST
                  |L1.15768|
                          DCD      0x4002c000
                  |L1.15772|
                          DCD      0xfff000ff
                  |L1.15776|
                          DCD      bat
                  |L1.15780|
                          DCD      tbatdisable_stat
                  |L1.15784|
                          DCD      tbatdisable_cmnd
                  |L1.15788|
                          DCD      main_1Hz_cnt
                  |L1.15792|
                          DCD      mess_data
                  |L1.15796|
                          DCD      avar_ind_stat
                  |L1.15800|
                          DCD      AUSW_MAIN
                  |L1.15804|
                          DCD      ips_bat_av_stat
                  |L1.15808|
                          DCD      0x100007f8
                  |L1.15812|
003dc4  d051              BEQ      |L1.15978|
003dc6  6fa0              LDR      r0,[r4,#0x78]         ;5428
003dc8  f0407000          ORR      r0,r0,#0x2000000      ;5428
003dcc  67a0              STR      r0,[r4,#0x78]         ;5428
                  |L1.15822|
003dce  20d2              MOVS     r0,#0xd2              ;5442
003dd0  f7fffffe          BL       mess_find_unvol
003dd4  b110              CBZ      r0,|L1.15836|
003dd6  6828              LDR      r0,[r5,#0]            ;5442  ; mess_data
003dd8  286a              CMP      r0,#0x6a              ;5442
003dda  d04b              BEQ      |L1.15988|
                  |L1.15836|
003ddc  6830              LDR      r0,[r6,#0]            ;5449  ; avar_ind_stat
003dde  4238              TST      r0,r7                 ;5449
003de0  d056              BEQ      |L1.16016|
003de2  69a0              LDR      r0,[r4,#0x18]         ;5450
003de4  f0400080          ORR      r0,r0,#0x80           ;5450
003de8  61a0              STR      r0,[r4,#0x18]         ;5450
                  |L1.15850|
003dea  20d2              MOVS     r0,#0xd2              ;5455
003dec  f7fffffe          BL       mess_find_unvol
003df0  b110              CBZ      r0,|L1.15864|
003df2  6828              LDR      r0,[r5,#0]            ;5455  ; mess_data
003df4  2867              CMP      r0,#0x67              ;5455
003df6  d050              BEQ      |L1.16026|
                  |L1.15864|
003df8  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003dfc  b340              CBZ      r0,|L1.15952|
;;;5463        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003dfe  69a0              LDR      r0,[r4,#0x18]
003e00  f0400010          ORR      r0,r0,#0x10
003e04  61a0              STR      r0,[r4,#0x18]
003e06  e1d5              B        |L1.16820|
                  |L1.15880|
003e08  6868              LDR      r0,[r5,#4]            ;4963  ; mess_data
003e0a  2801              CMP      r0,#1                 ;4963
003e0c  d006              BEQ      |L1.15900|
003e0e  2800              CMP      r0,#0                 ;4964
003e10  d190              BNE      |L1.15668|
003e12  69e0              LDR      r0,[r4,#0x1c]         ;4964
003e14  f0405000          ORR      r0,r0,#0x20000000     ;4964
003e18  61e0              STR      r0,[r4,#0x1c]         ;4964
003e1a  e78b              B        |L1.15668|
                  |L1.15900|
003e1c  69a0              LDR      r0,[r4,#0x18]         ;4963
003e1e  f0405000          ORR      r0,r0,#0x20000000     ;4963
003e22  61a0              STR      r0,[r4,#0x18]         ;4963
003e24  e786              B        |L1.15668|
003e26  e000              B        |L1.15914|
003e28  e00b              B        |L1.15938|
                  |L1.15914|
003e2a  6868              LDR      r0,[r5,#4]            ;4983  ; mess_data
003e2c  b120              CBZ      r0,|L1.15928|
003e2e  6fa0              LDR      r0,[r4,#0x78]         ;4984
003e30  f0407000          ORR      r0,r0,#0x2000000      ;4984
003e34  67a0              STR      r0,[r4,#0x78]         ;4984
003e36  e78c              B        |L1.15698|
                  |L1.15928|
003e38  6fe0              LDR      r0,[r4,#0x7c]         ;4983
003e3a  f0407000          ORR      r0,r0,#0x2000000      ;4983
003e3e  67e0              STR      r0,[r4,#0x7c]         ;4983
003e40  e787              B        |L1.15698|
                  |L1.15938|
003e42  6fe0              LDR      r0,[r4,#0x7c]         ;4986
003e44  f0407000          ORR      r0,r0,#0x2000000      ;4986
003e48  67e0              STR      r0,[r4,#0x7c]         ;4986
003e4a  e782              B        |L1.15698|
                  |L1.15948|
003e4c  e039              B        |L1.16066|
003e4e  e000              B        |L1.15954|
                  |L1.15952|
003e50  e032              B        |L1.16056|
                  |L1.15954|
003e52  6868              LDR      r0,[r5,#4]            ;5424  ; mess_data
003e54  b120              CBZ      r0,|L1.15968|
003e56  6fa0              LDR      r0,[r4,#0x78]         ;5425
003e58  f0407000          ORR      r0,r0,#0x2000000      ;5425
003e5c  67a0              STR      r0,[r4,#0x78]         ;5425
003e5e  e7b6              B        |L1.15822|
                  |L1.15968|
003e60  6fe0              LDR      r0,[r4,#0x7c]         ;5424
003e62  f0407000          ORR      r0,r0,#0x2000000      ;5424
003e66  67e0              STR      r0,[r4,#0x7c]         ;5424
003e68  e7b1              B        |L1.15822|
                  |L1.15978|
003e6a  6fe0              LDR      r0,[r4,#0x7c]         ;5427
003e6c  f0407000          ORR      r0,r0,#0x2000000      ;5427
003e70  67e0              STR      r0,[r4,#0x7c]         ;5427
003e72  e7ac              B        |L1.15822|
                  |L1.15988|
003e74  6868              LDR      r0,[r5,#4]            ;5444  ; mess_data
003e76  b130              CBZ      r0,|L1.16006|
003e78  2801              CMP      r0,#1                 ;5445
003e7a  d1b6              BNE      |L1.15850|
003e7c  69a0              LDR      r0,[r4,#0x18]         ;5445
003e7e  f0400080          ORR      r0,r0,#0x80           ;5445
003e82  61a0              STR      r0,[r4,#0x18]         ;5445
003e84  e7b1              B        |L1.15850|
                  |L1.16006|
003e86  69e0              LDR      r0,[r4,#0x1c]         ;5444
003e88  f0400080          ORR      r0,r0,#0x80           ;5444
003e8c  61e0              STR      r0,[r4,#0x1c]         ;5444
003e8e  e7ac              B        |L1.15850|
                  |L1.16016|
003e90  69e0              LDR      r0,[r4,#0x1c]         ;5449
003e92  f0400080          ORR      r0,r0,#0x80           ;5449
003e96  61e0              STR      r0,[r4,#0x1c]         ;5449
003e98  e7a7              B        |L1.15850|
                  |L1.16026|
003e9a  6868              LDR      r0,[r5,#4]            ;5457  ; mess_data
003e9c  b110              CBZ      r0,|L1.16036|
003e9e  2801              CMP      r0,#1                 ;5458
003ea0  d005              BEQ      |L1.16046|
003ea2  e187              B        |L1.16820|
                  |L1.16036|
003ea4  69e0              LDR      r0,[r4,#0x1c]         ;5457
003ea6  f0400010          ORR      r0,r0,#0x10           ;5457
003eaa  61e0              STR      r0,[r4,#0x1c]         ;5457
003eac  e182              B        |L1.16820|
                  |L1.16046|
003eae  69a0              LDR      r0,[r4,#0x18]         ;5458
003eb0  f0400010          ORR      r0,r0,#0x10           ;5458
003eb4  61a0              STR      r0,[r4,#0x18]         ;5458
003eb6  e17d              B        |L1.16820|
                  |L1.16056|
003eb8  69e0              LDR      r0,[r4,#0x1c]         ;5462
003eba  f0400010          ORR      r0,r0,#0x10           ;5462
003ebe  61e0              STR      r0,[r4,#0x1c]         ;5462
003ec0  e178              B        |L1.16820|
                  |L1.16066|
;;;5464   		}
;;;5465   	#endif
;;;5466   	#ifdef APSENERGIA
;;;5467   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5468   		{
;;;5469   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5470   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5471        	}
;;;5472   	else 
;;;5473   		{
;;;5474   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5475   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5476   		}
;;;5477   	#endif
;;;5478   	}
;;;5479   
;;;5480   else	if(AUSW_MAIN==22023)
003ec2  f5a041ac          SUB      r1,r0,#0x5600
003ec6  3907              SUBS     r1,#7
003ec8  d162              BNE      |L1.16272|
;;;5481   	{
;;;5482   
;;;5483   	//Реле аварий батарей
;;;5484   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003eca  20d2              MOVS     r0,#0xd2
003ecc  f7fffffe          BL       mess_find_unvol
003ed0  b110              CBZ      r0,|L1.16088|
003ed2  6828              LDR      r0,[r5,#0]  ; mess_data
003ed4  2867              CMP      r0,#0x67
003ed6  d023              BEQ      |L1.16160|
                  |L1.16088|
;;;5485   		{
;;;5486   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5487   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5488        	}
;;;5489   	else 
;;;5490   		{
;;;5491   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003ed8  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003edc  b370              CBZ      r0,|L1.16188|
;;;5492        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ede  69a0              LDR      r0,[r4,#0x18]
003ee0  f0400010          ORR      r0,r0,#0x10
003ee4  61a0              STR      r0,[r4,#0x18]
                  |L1.16102|
;;;5493   		} 
;;;5494   
;;;5495   
;;;5496   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5497   	#ifndef UKU2071x
;;;5498   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5499   		{
;;;5500   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5501   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5502   		}
;;;5503   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5504   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5505   	#endif
;;;5506   	#ifdef UKU2071x
;;;5507   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ee6  20d2              MOVS     r0,#0xd2
003ee8  f7fffffe          BL       mess_find_unvol
003eec  b110              CBZ      r0,|L1.16116|
003eee  6828              LDR      r0,[r5,#0]  ; mess_data
003ef0  2866              CMP      r0,#0x66
003ef2  d028              BEQ      |L1.16198|
                  |L1.16116|
;;;5508   		{
;;;5509   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5510   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5511   		}
;;;5512   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ef4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ef6  07c0              LSLS     r0,r0,#31
003ef8  d031              BEQ      |L1.16222|
;;;5513   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003efa  6fa0              LDR      r0,[r4,#0x78]
003efc  f0407000          ORR      r0,r0,#0x2000000
003f00  67a0              STR      r0,[r4,#0x78]
                  |L1.16130|
;;;5514   	#endif
;;;5515   
;;;5516   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f02  20d2              MOVS     r0,#0xd2
003f04  f7fffffe          BL       mess_find_unvol
003f08  b110              CBZ      r0,|L1.16144|
003f0a  6828              LDR      r0,[r5,#0]  ; mess_data
003f0c  286a              CMP      r0,#0x6a
003f0e  d02b              BEQ      |L1.16232|
                  |L1.16144|
;;;5517   		{
;;;5518   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5519   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5520   	     }
;;;5521   	else 
;;;5522   		{
;;;5523   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003f10  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f12  4238              TST      r0,r7
003f14  d037              BEQ      |L1.16262|
;;;5524   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003f16  69a0              LDR      r0,[r4,#0x18]
003f18  f0400080          ORR      r0,r0,#0x80
003f1c  61a0              STR      r0,[r4,#0x18]
003f1e  e149              B        |L1.16820|
                  |L1.16160|
003f20  6868              LDR      r0,[r5,#4]            ;5486  ; mess_data
003f22  b130              CBZ      r0,|L1.16178|
003f24  2801              CMP      r0,#1                 ;5487
003f26  d1de              BNE      |L1.16102|
003f28  69a0              LDR      r0,[r4,#0x18]         ;5487
003f2a  f0400010          ORR      r0,r0,#0x10           ;5487
003f2e  61a0              STR      r0,[r4,#0x18]         ;5487
003f30  e7d9              B        |L1.16102|
                  |L1.16178|
003f32  69e0              LDR      r0,[r4,#0x1c]         ;5486
003f34  f0400010          ORR      r0,r0,#0x10           ;5486
003f38  61e0              STR      r0,[r4,#0x1c]         ;5486
003f3a  e7d4              B        |L1.16102|
                  |L1.16188|
003f3c  69e0              LDR      r0,[r4,#0x1c]         ;5491
003f3e  f0400010          ORR      r0,r0,#0x10           ;5491
003f42  61e0              STR      r0,[r4,#0x1c]         ;5491
003f44  e7cf              B        |L1.16102|
                  |L1.16198|
003f46  6868              LDR      r0,[r5,#4]            ;5509  ; mess_data
003f48  b120              CBZ      r0,|L1.16212|
003f4a  69e0              LDR      r0,[r4,#0x1c]         ;5510
003f4c  f0407000          ORR      r0,r0,#0x2000000      ;5510
003f50  61e0              STR      r0,[r4,#0x1c]         ;5510
003f52  e7d6              B        |L1.16130|
                  |L1.16212|
003f54  69a0              LDR      r0,[r4,#0x18]         ;5509
003f56  f0407000          ORR      r0,r0,#0x2000000      ;5509
003f5a  61a0              STR      r0,[r4,#0x18]         ;5509
003f5c  e7d1              B        |L1.16130|
                  |L1.16222|
003f5e  6ba0              LDR      r0,[r4,#0x38]         ;5512
003f60  f0407000          ORR      r0,r0,#0x2000000      ;5512
003f64  63a0              STR      r0,[r4,#0x38]         ;5512
003f66  e7cc              B        |L1.16130|
                  |L1.16232|
003f68  6868              LDR      r0,[r5,#4]            ;5518  ; mess_data
003f6a  b110              CBZ      r0,|L1.16242|
003f6c  2801              CMP      r0,#1                 ;5519
003f6e  d005              BEQ      |L1.16252|
003f70  e120              B        |L1.16820|
                  |L1.16242|
003f72  69e0              LDR      r0,[r4,#0x1c]         ;5518
003f74  f0400080          ORR      r0,r0,#0x80           ;5518
003f78  61e0              STR      r0,[r4,#0x1c]         ;5518
003f7a  e11b              B        |L1.16820|
                  |L1.16252|
003f7c  69a0              LDR      r0,[r4,#0x18]         ;5519
003f7e  f0400080          ORR      r0,r0,#0x80           ;5519
003f82  61a0              STR      r0,[r4,#0x18]         ;5519
003f84  e116              B        |L1.16820|
                  |L1.16262|
003f86  69e0              LDR      r0,[r4,#0x1c]         ;5523
003f88  f0400080          ORR      r0,r0,#0x80           ;5523
003f8c  61e0              STR      r0,[r4,#0x1c]         ;5523
003f8e  e111              B        |L1.16820|
                  |L1.16272|
;;;5525   		} 
;;;5526   	}
;;;5527   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003f90  f5a041ac          SUB      r1,r0,#0x5600
003f94  391b              SUBS     r1,r1,#0x1b
003f96  d001              BEQ      |L1.16284|
003f98  1e49              SUBS     r1,r1,#1
003f9a  d170              BNE      |L1.16510|
                  |L1.16284|
;;;5528   	{
;;;5529   	//Реле аварий батарей
;;;5530   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003f9c  20d2              MOVS     r0,#0xd2
003f9e  f7fffffe          BL       mess_find_unvol
003fa2  b110              CBZ      r0,|L1.16298|
003fa4  6828              LDR      r0,[r5,#0]  ; mess_data
003fa6  2867              CMP      r0,#0x67
003fa8  d031              BEQ      |L1.16398|
                  |L1.16298|
;;;5531   		{
;;;5532   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5533   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5534        	}
;;;5535   	else 
;;;5536   		{
;;;5537   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003faa  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003fae  b3b8              CBZ      r0,|L1.16416|
;;;5538        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003fb0  69a0              LDR      r0,[r4,#0x18]
003fb2  f0400010          ORR      r0,r0,#0x10
003fb6  61a0              STR      r0,[r4,#0x18]
                  |L1.16312|
;;;5539   		} 
;;;5540   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5541   	#ifndef UKU2071x 
;;;5542   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5543   		{
;;;5544   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5545   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5546   		}
;;;5547   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5548   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5549   	#endif
;;;5550   	#ifdef UKU2071x 
;;;5551   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003fb8  20d2              MOVS     r0,#0xd2
003fba  f7fffffe          BL       mess_find_unvol
003fbe  b110              CBZ      r0,|L1.16326|
003fc0  6828              LDR      r0,[r5,#0]  ; mess_data
003fc2  2866              CMP      r0,#0x66
003fc4  d037              BEQ      |L1.16438|
                  |L1.16326|
;;;5552   		{
;;;5553   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5554   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5555   		}
;;;5556   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003fc6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fc8  07c0              LSLS     r0,r0,#31
003fca  d040              BEQ      |L1.16462|
;;;5557   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003fcc  6fa0              LDR      r0,[r4,#0x78]
003fce  f0407000          ORR      r0,r0,#0x2000000
003fd2  67a0              STR      r0,[r4,#0x78]
                  |L1.16340|
;;;5558   	#endif
;;;5559   
;;;5560   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003fd4  20d2              MOVS     r0,#0xd2
003fd6  f7fffffe          BL       mess_find_unvol
003fda  b110              CBZ      r0,|L1.16354|
003fdc  6828              LDR      r0,[r5,#0]  ; mess_data
003fde  286a              CMP      r0,#0x6a
003fe0  d03a              BEQ      |L1.16472|
                  |L1.16354|
;;;5561   		{
;;;5562   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5563   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5564   	     }
;;;5565   	else 
;;;5566   		{
;;;5567   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003fe2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fe4  4238              TST      r0,r7
003fe6  d045              BEQ      |L1.16500|
;;;5568   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003fe8  69a0              LDR      r0,[r4,#0x18]
003fea  f0400080          ORR      r0,r0,#0x80
003fee  61a0              STR      r0,[r4,#0x18]
                  |L1.16368|
;;;5569   		}
;;;5570   	//Реле аварии БПС
;;;5571   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ff0  20d2              MOVS     r0,#0xd2
003ff2  f7fffffe          BL       mess_find_unvol
003ff6  b110              CBZ      r0,|L1.16382|
003ff8  6828              LDR      r0,[r5,#0]  ; mess_data
003ffa  286a              CMP      r0,#0x6a
003ffc  d040              BEQ      |L1.16512|
                  |L1.16382|
;;;5572   		{
;;;5573   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5574   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5575        	}
;;;5576   	else 
;;;5577   		{
;;;5578   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003ffe  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
004000  4238              TST      r0,r7
004002  d04c              BEQ      |L1.16542|
;;;5579        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
004004  69a0              LDR      r0,[r4,#0x18]
004006  f0400020          ORR      r0,r0,#0x20
00400a  61a0              STR      r0,[r4,#0x18]
00400c  e0d2              B        |L1.16820|
                  |L1.16398|
00400e  6868              LDR      r0,[r5,#4]            ;5532  ; mess_data
004010  b138              CBZ      r0,|L1.16418|
004012  2801              CMP      r0,#1                 ;5533
004014  d1d0              BNE      |L1.16312|
004016  69a0              LDR      r0,[r4,#0x18]         ;5533
004018  f0400010          ORR      r0,r0,#0x10           ;5533
00401c  61a0              STR      r0,[r4,#0x18]         ;5533
00401e  e7cb              B        |L1.16312|
                  |L1.16416|
004020  e004              B        |L1.16428|
                  |L1.16418|
004022  69e0              LDR      r0,[r4,#0x1c]         ;5532
004024  f0400010          ORR      r0,r0,#0x10           ;5532
004028  61e0              STR      r0,[r4,#0x1c]         ;5532
00402a  e7c5              B        |L1.16312|
                  |L1.16428|
00402c  69e0              LDR      r0,[r4,#0x1c]         ;5537
00402e  f0400010          ORR      r0,r0,#0x10           ;5537
004032  61e0              STR      r0,[r4,#0x1c]         ;5537
004034  e7c0              B        |L1.16312|
                  |L1.16438|
004036  6868              LDR      r0,[r5,#4]            ;5553  ; mess_data
004038  b120              CBZ      r0,|L1.16452|
00403a  69e0              LDR      r0,[r4,#0x1c]         ;5554
00403c  f0407000          ORR      r0,r0,#0x2000000      ;5554
004040  61e0              STR      r0,[r4,#0x1c]         ;5554
004042  e7c7              B        |L1.16340|
                  |L1.16452|
004044  69a0              LDR      r0,[r4,#0x18]         ;5553
004046  f0407000          ORR      r0,r0,#0x2000000      ;5553
00404a  61a0              STR      r0,[r4,#0x18]         ;5553
00404c  e7c2              B        |L1.16340|
                  |L1.16462|
00404e  6ba0              LDR      r0,[r4,#0x38]         ;5556
004050  f0407000          ORR      r0,r0,#0x2000000      ;5556
004054  63a0              STR      r0,[r4,#0x38]         ;5556
004056  e7bd              B        |L1.16340|
                  |L1.16472|
004058  6868              LDR      r0,[r5,#4]            ;5562  ; mess_data
00405a  b130              CBZ      r0,|L1.16490|
00405c  2801              CMP      r0,#1                 ;5563
00405e  d1c7              BNE      |L1.16368|
004060  69a0              LDR      r0,[r4,#0x18]         ;5563
004062  f0400080          ORR      r0,r0,#0x80           ;5563
004066  61a0              STR      r0,[r4,#0x18]         ;5563
004068  e7c2              B        |L1.16368|
                  |L1.16490|
00406a  69e0              LDR      r0,[r4,#0x1c]         ;5562
00406c  f0400080          ORR      r0,r0,#0x80           ;5562
004070  61e0              STR      r0,[r4,#0x1c]         ;5562
004072  e7bd              B        |L1.16368|
                  |L1.16500|
004074  69e0              LDR      r0,[r4,#0x1c]         ;5567
004076  f0400080          ORR      r0,r0,#0x80           ;5567
00407a  61e0              STR      r0,[r4,#0x1c]         ;5567
00407c  e7b8              B        |L1.16368|
                  |L1.16510|
00407e  e013              B        |L1.16552|
                  |L1.16512|
004080  6868              LDR      r0,[r5,#4]            ;5573  ; mess_data
004082  b110              CBZ      r0,|L1.16522|
004084  2801              CMP      r0,#1                 ;5574
004086  d005              BEQ      |L1.16532|
004088  e094              B        |L1.16820|
                  |L1.16522|
00408a  69e0              LDR      r0,[r4,#0x1c]         ;5573
00408c  f0400020          ORR      r0,r0,#0x20           ;5573
004090  61e0              STR      r0,[r4,#0x1c]         ;5573
004092  e08f              B        |L1.16820|
                  |L1.16532|
004094  69a0              LDR      r0,[r4,#0x18]         ;5574
004096  f0400020          ORR      r0,r0,#0x20           ;5574
00409a  61a0              STR      r0,[r4,#0x18]         ;5574
00409c  e08a              B        |L1.16820|
                  |L1.16542|
00409e  69e0              LDR      r0,[r4,#0x1c]         ;5578
0040a0  f0400020          ORR      r0,r0,#0x20           ;5578
0040a4  61e0              STR      r0,[r4,#0x1c]         ;5578
0040a6  e085              B        |L1.16820|
                  |L1.16552|
;;;5580   		} 
;;;5581   	}
;;;5582   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
0040a8  f5a041ac          SUB      r1,r0,#0x5600
0040ac  3911              SUBS     r1,r1,#0x11
0040ae  d001              BEQ      |L1.16564|
0040b0  310f              ADDS     r1,r1,#0xf
0040b2  d163              BNE      |L1.16764|
                  |L1.16564|
;;;5583   	{
;;;5584   	#ifndef UKU2071x 
;;;5585   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5586   		{
;;;5587   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5588   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5589   		}
;;;5590   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5591   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5592   	#endif
;;;5593   	#ifdef UKU2071x 
;;;5594   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0040b4  20d2              MOVS     r0,#0xd2
0040b6  f7fffffe          BL       mess_find_unvol
0040ba  b110              CBZ      r0,|L1.16578|
0040bc  6828              LDR      r0,[r5,#0]  ; mess_data
0040be  2866              CMP      r0,#0x66
0040c0  d023              BEQ      |L1.16650|
                  |L1.16578|
;;;5595   		{
;;;5596   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5597   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5598   		}
;;;5599   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
0040c2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0040c4  07c0              LSLS     r0,r0,#31
0040c6  d02c              BEQ      |L1.16674|
;;;5600   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
0040c8  6fa0              LDR      r0,[r4,#0x78]
0040ca  f0407000          ORR      r0,r0,#0x2000000
0040ce  67a0              STR      r0,[r4,#0x78]
                  |L1.16592|
;;;5601   	#endif
;;;5602   	
;;;5603   	
;;;5604   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
0040d0  20d2              MOVS     r0,#0xd2
0040d2  f7fffffe          BL       mess_find_unvol
0040d6  b110              CBZ      r0,|L1.16606|
0040d8  6828              LDR      r0,[r5,#0]  ; mess_data
0040da  286a              CMP      r0,#0x6a
0040dc  d026              BEQ      |L1.16684|
                  |L1.16606|
;;;5605   		{
;;;5606   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5607   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5608   	     }
;;;5609   	else 
;;;5610   		{
;;;5611   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
0040de  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0040e0  4238              TST      r0,r7
0040e2  d031              BEQ      |L1.16712|
;;;5612   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
0040e4  69a0              LDR      r0,[r4,#0x18]
0040e6  f0400080          ORR      r0,r0,#0x80
0040ea  61a0              STR      r0,[r4,#0x18]
                  |L1.16620|
;;;5613   		} 
;;;5614   
;;;5615   	//Реле аварий батарей
;;;5616   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
0040ec  20d2              MOVS     r0,#0xd2
0040ee  f7fffffe          BL       mess_find_unvol
0040f2  b110              CBZ      r0,|L1.16634|
0040f4  6828              LDR      r0,[r5,#0]  ; mess_data
0040f6  2867              CMP      r0,#0x67
0040f8  d02b              BEQ      |L1.16722|
                  |L1.16634|
;;;5617   		{
;;;5618   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5619   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5620        	}
;;;5621   	else 
;;;5622   		{
;;;5623   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
0040fa  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
0040fe  b390              CBZ      r0,|L1.16742|
;;;5624        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
004100  69a0              LDR      r0,[r4,#0x18]
004102  f0400010          ORR      r0,r0,#0x10
004106  61a0              STR      r0,[r4,#0x18]
004108  e054              B        |L1.16820|
                  |L1.16650|
00410a  6868              LDR      r0,[r5,#4]            ;5596  ; mess_data
00410c  b120              CBZ      r0,|L1.16664|
00410e  6fa0              LDR      r0,[r4,#0x78]         ;5597
004110  f0407000          ORR      r0,r0,#0x2000000      ;5597
004114  67a0              STR      r0,[r4,#0x78]         ;5597
004116  e7db              B        |L1.16592|
                  |L1.16664|
004118  6fe0              LDR      r0,[r4,#0x7c]         ;5596
00411a  f0407000          ORR      r0,r0,#0x2000000      ;5596
00411e  67e0              STR      r0,[r4,#0x7c]         ;5596
004120  e7d6              B        |L1.16592|
                  |L1.16674|
004122  6fe0              LDR      r0,[r4,#0x7c]         ;5599
004124  f0407000          ORR      r0,r0,#0x2000000      ;5599
004128  67e0              STR      r0,[r4,#0x7c]         ;5599
00412a  e7d1              B        |L1.16592|
                  |L1.16684|
00412c  6868              LDR      r0,[r5,#4]            ;5606  ; mess_data
00412e  b130              CBZ      r0,|L1.16702|
004130  2801              CMP      r0,#1                 ;5607
004132  d1db              BNE      |L1.16620|
004134  69a0              LDR      r0,[r4,#0x18]         ;5607
004136  f0400080          ORR      r0,r0,#0x80           ;5607
00413a  61a0              STR      r0,[r4,#0x18]         ;5607
00413c  e7d6              B        |L1.16620|
                  |L1.16702|
00413e  69e0              LDR      r0,[r4,#0x1c]         ;5606
004140  f0400080          ORR      r0,r0,#0x80           ;5606
004144  61e0              STR      r0,[r4,#0x1c]         ;5606
004146  e7d1              B        |L1.16620|
                  |L1.16712|
004148  69e0              LDR      r0,[r4,#0x1c]         ;5611
00414a  f0400080          ORR      r0,r0,#0x80           ;5611
00414e  61e0              STR      r0,[r4,#0x1c]         ;5611
004150  e7cc              B        |L1.16620|
                  |L1.16722|
004152  6868              LDR      r0,[r5,#4]            ;5618  ; mess_data
004154  b110              CBZ      r0,|L1.16732|
004156  2801              CMP      r0,#1                 ;5619
004158  d006              BEQ      |L1.16744|
00415a  e02b              B        |L1.16820|
                  |L1.16732|
00415c  69e0              LDR      r0,[r4,#0x1c]         ;5618
00415e  f0400010          ORR      r0,r0,#0x10           ;5618
004162  61e0              STR      r0,[r4,#0x1c]         ;5618
004164  e026              B        |L1.16820|
                  |L1.16742|
004166  e004              B        |L1.16754|
                  |L1.16744|
004168  69a0              LDR      r0,[r4,#0x18]         ;5619
00416a  f0400010          ORR      r0,r0,#0x10           ;5619
00416e  61a0              STR      r0,[r4,#0x18]         ;5619
004170  e020              B        |L1.16820|
                  |L1.16754|
004172  69e0              LDR      r0,[r4,#0x1c]         ;5623
004174  f0400010          ORR      r0,r0,#0x10           ;5623
004178  61e0              STR      r0,[r4,#0x1c]         ;5623
00417a  e01b              B        |L1.16820|
                  |L1.16764|
;;;5625   		} 
;;;5626   	} 	 
;;;5627   else	
;;;5628   	{
;;;5629   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5630   	#ifndef UKU2071x 
;;;5631   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5632   		{
;;;5633   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5634   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5635   		}
;;;5636   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5637   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5638   	#endif
;;;5639   	#ifdef UKU2071x 
;;;5640   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
00417c  20d2              MOVS     r0,#0xd2
00417e  f7fffffe          BL       mess_find_unvol
004182  b110              CBZ      r0,|L1.16778|
004184  6828              LDR      r0,[r5,#0]  ; mess_data
004186  2866              CMP      r0,#0x66
004188  d026              BEQ      |L1.16856|
                  |L1.16778|
;;;5641   		{
;;;5642   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5643   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5644   		}
;;;5645   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
00418a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00418c  07c0              LSLS     r0,r0,#31
00418e  d02f              BEQ      |L1.16880|
;;;5646   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
004190  6fa0              LDR      r0,[r4,#0x78]
004192  f0407000          ORR      r0,r0,#0x2000000
004196  67a0              STR      r0,[r4,#0x78]
                  |L1.16792|
;;;5647   	#endif
;;;5648   
;;;5649   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
004198  20d2              MOVS     r0,#0xd2
00419a  f7fffffe          BL       mess_find_unvol
00419e  b110              CBZ      r0,|L1.16806|
0041a0  6828              LDR      r0,[r5,#0]  ; mess_data
0041a2  286a              CMP      r0,#0x6a
0041a4  d029              BEQ      |L1.16890|
                  |L1.16806|
;;;5650   		{
;;;5651   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5652   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5653        	}
;;;5654   	else 
;;;5655   		{
;;;5656   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
0041a6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0041a8  4238              TST      r0,r7
0041aa  d034              BEQ      |L1.16918|
;;;5657        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
0041ac  69a0              LDR      r0,[r4,#0x18]
0041ae  f0400020          ORR      r0,r0,#0x20
0041b2  61a0              STR      r0,[r4,#0x18]
                  |L1.16820|
;;;5658   		}
;;;5659   	}
;;;5660   //Дополнительное реле УКУ 
;;;5661   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
0041b4  20d2              MOVS     r0,#0xd2
0041b6  f7fffffe          BL       mess_find_unvol
;;;5662   	{
;;;5663   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5664   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5665   	}
;;;5666   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5667   	{
;;;5668   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0041ba  f8df83fc          LDR      r8,|L1.17848|
0041be  4fff              LDR      r7,|L1.17852|
0041c0  4eff              LDR      r6,|L1.17856|
0041c2  b110              CBZ      r0,|L1.16842|
0041c4  6828              LDR      r0,[r5,#0]            ;5661  ; mess_data
0041c6  2871              CMP      r0,#0x71              ;5661
0041c8  d02a              BEQ      |L1.16928|
                  |L1.16842|
0041ca  48fe              LDR      r0,|L1.17860|
0041cc  f9b00000          LDRSH    r0,[r0,#0]            ;5666  ; DOP_RELE_FUNC
0041d0  b380              CBZ      r0,|L1.16948|
;;;5669   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5670   	}
;;;5671   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
0041d2  2801              CMP      r0,#1
0041d4  d066              BEQ      |L1.17060|
0041d6  e070              B        |L1.17082|
                  |L1.16856|
0041d8  6868              LDR      r0,[r5,#4]            ;5642  ; mess_data
0041da  b120              CBZ      r0,|L1.16870|
0041dc  69e0              LDR      r0,[r4,#0x1c]         ;5643
0041de  f0407000          ORR      r0,r0,#0x2000000      ;5643
0041e2  61e0              STR      r0,[r4,#0x1c]         ;5643
0041e4  e7d8              B        |L1.16792|
                  |L1.16870|
0041e6  69a0              LDR      r0,[r4,#0x18]         ;5642
0041e8  f0407000          ORR      r0,r0,#0x2000000      ;5642
0041ec  61a0              STR      r0,[r4,#0x18]         ;5642
0041ee  e7d3              B        |L1.16792|
                  |L1.16880|
0041f0  6ba0              LDR      r0,[r4,#0x38]         ;5645
0041f2  f0407000          ORR      r0,r0,#0x2000000      ;5645
0041f6  63a0              STR      r0,[r4,#0x38]         ;5645
0041f8  e7ce              B        |L1.16792|
                  |L1.16890|
0041fa  6868              LDR      r0,[r5,#4]            ;5651  ; mess_data
0041fc  b130              CBZ      r0,|L1.16908|
0041fe  2801              CMP      r0,#1                 ;5652
004200  d1d8              BNE      |L1.16820|
004202  69a0              LDR      r0,[r4,#0x18]         ;5652
004204  f0400020          ORR      r0,r0,#0x20           ;5652
004208  61a0              STR      r0,[r4,#0x18]         ;5652
00420a  e7d3              B        |L1.16820|
                  |L1.16908|
00420c  69e0              LDR      r0,[r4,#0x1c]         ;5651
00420e  f0400020          ORR      r0,r0,#0x20           ;5651
004212  61e0              STR      r0,[r4,#0x1c]         ;5651
004214  e7ce              B        |L1.16820|
                  |L1.16918|
004216  69e0              LDR      r0,[r4,#0x1c]         ;5656
004218  f0400020          ORR      r0,r0,#0x20           ;5656
00421c  61e0              STR      r0,[r4,#0x1c]         ;5656
00421e  e7c9              B        |L1.16820|
                  |L1.16928|
004220  6868              LDR      r0,[r5,#4]            ;5663  ; mess_data
004222  b110              CBZ      r0,|L1.16938|
004224  2801              CMP      r0,#1                 ;5664
004226  d006              BEQ      |L1.16950|
004228  e047              B        |L1.17082|
                  |L1.16938|
00422a  69e0              LDR      r0,[r4,#0x1c]         ;5663
00422c  f4407000          ORR      r0,r0,#0x200          ;5663
004230  61e0              STR      r0,[r4,#0x1c]         ;5663
004232  e042              B        |L1.17082|
                  |L1.16948|
004234  e004              B        |L1.16960|
                  |L1.16950|
004236  69a0              LDR      r0,[r4,#0x18]         ;5664
004238  f4407000          ORR      r0,r0,#0x200          ;5664
00423c  61a0              STR      r0,[r4,#0x18]         ;5664
00423e  e03c              B        |L1.17082|
                  |L1.16960|
004240  48e1              LDR      r0,|L1.17864|
004242  49e2              LDR      r1,|L1.17868|
004244  f9b00000          LDRSH    r0,[r0,#0]            ;5668  ; speedChIsOn
004248  b9d0              CBNZ     r0,|L1.17024|
00424a  f8962023          LDRB     r2,[r6,#0x23]         ;5668  ; spc_stat
00424e  2a02              CMP      r2,#2                 ;5668
004250  d016              BEQ      |L1.17024|
004252  780a              LDRB     r2,[r1,#0]            ;5668  ; hv_vz_stat
004254  b9a2              CBNZ     r2,|L1.17024|
004256  783a              LDRB     r2,[r7,#0]            ;5668  ; sp_ch_stat
004258  b992              CBNZ     r2,|L1.17024|
00425a  7972              LDRB     r2,[r6,#5]            ;5668  ; vz1_stat
00425c  b982              CBNZ     r2,|L1.17024|
00425e  79f2              LDRB     r2,[r6,#7]            ;5668  ; vz2_stat
004260  b972              CBNZ     r2,|L1.17024|
004262  f9b82000          LDRSH    r2,[r8,#0]            ;5668  ; load_U
004266  230a              MOVS     r3,#0xa               ;5668
004268  fb92f2f3          SDIV     r2,r2,r3              ;5668
00426c  4bd8              LDR      r3,|L1.17872|
00426e  f9b33000          LDRSH    r3,[r3,#0]            ;5668  ; UVENTOFF
004272  429a              CMP      r2,r3                 ;5668
004274  da04              BGE      |L1.17024|
004276  69e0              LDR      r0,[r4,#0x1c]         ;5668
004278  f4407000          ORR      r0,r0,#0x200          ;5668
00427c  61e0              STR      r0,[r4,#0x1c]         ;5668
00427e  e01c              B        |L1.17082|
                  |L1.17024|
004280  b958              CBNZ     r0,|L1.17050|
004282  f8960023          LDRB     r0,[r6,#0x23]         ;5669  ; spc_stat
004286  2802              CMP      r0,#2                 ;5669
004288  d007              BEQ      |L1.17050|
00428a  7808              LDRB     r0,[r1,#0]            ;5669  ; hv_vz_stat
00428c  b928              CBNZ     r0,|L1.17050|
00428e  7838              LDRB     r0,[r7,#0]            ;5669  ; sp_ch_stat
004290  b918              CBNZ     r0,|L1.17050|
004292  7970              LDRB     r0,[r6,#5]            ;5669  ; vz1_stat
004294  b908              CBNZ     r0,|L1.17050|
004296  79f0              LDRB     r0,[r6,#7]            ;5669  ; vz2_stat
004298  b178              CBZ      r0,|L1.17082|
                  |L1.17050|
00429a  69a0              LDR      r0,[r4,#0x18]         ;5669
00429c  f4407000          ORR      r0,r0,#0x200          ;5669
0042a0  61a0              STR      r0,[r4,#0x18]         ;5669
0042a2  e00a              B        |L1.17082|
                  |L1.17060|
;;;5672   	{
;;;5673   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0042a4  20d2              MOVS     r0,#0xd2
0042a6  f7fffffe          BL       mess_find_unvol
0042aa  b110              CBZ      r0,|L1.17074|
0042ac  6828              LDR      r0,[r5,#0]  ; mess_data
0042ae  2872              CMP      r0,#0x72
0042b0  d017              BEQ      |L1.17122|
                  |L1.17074|
;;;5674   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
0042b2  69a0              LDR      r0,[r4,#0x18]
0042b4  f4407000          ORR      r0,r0,#0x200
0042b8  61a0              STR      r0,[r4,#0x18]
                  |L1.17082|
;;;5675   	}
;;;5676   
;;;5677   #endif //o_9
;;;5678   
;;;5679   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5680   //Блок выносной реле
;;;5681   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
0042ba  20d2              MOVS     r0,#0xd2
0042bc  f7fffffe          BL       mess_find_unvol
;;;5682   	{
;;;5683   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
0042c0  f8df9310          LDR      r9,|L1.17876|
;;;5684   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5685   	}
;;;5686   else 
;;;5687   	{
;;;5688   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
0042c4  4cc4              LDR      r4,|L1.17880|
0042c6  b110              CBZ      r0,|L1.17102|
0042c8  6828              LDR      r0,[r5,#0]            ;5681  ; mess_data
0042ca  2875              CMP      r0,#0x75              ;5681
0042cc  d00e              BEQ      |L1.17132|
                  |L1.17102|
0042ce  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0042d0  07c0              LSLS     r0,r0,#31
0042d2  d01e              BEQ      |L1.17170|
0042d4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042d8  f0400001          ORR      r0,r0,#1
0042dc  f8890000          STRB     r0,[r9,#0]
0042e0  e01d              B        |L1.17182|
                  |L1.17122|
0042e2  69e0              LDR      r0,[r4,#0x1c]         ;5673
0042e4  f4407000          ORR      r0,r0,#0x200          ;5673
0042e8  61e0              STR      r0,[r4,#0x1c]         ;5673
0042ea  e7e6              B        |L1.17082|
                  |L1.17132|
0042ec  6868              LDR      r0,[r5,#4]            ;5683  ; mess_data
0042ee  b110              CBZ      r0,|L1.17142|
0042f0  2801              CMP      r0,#1                 ;5684
0042f2  d007              BEQ      |L1.17156|
0042f4  e013              B        |L1.17182|
                  |L1.17142|
0042f6  f8990000          LDRB     r0,[r9,#0]            ;5683  ; bdr_transmit_stat
0042fa  f00000fe          AND      r0,r0,#0xfe           ;5683
0042fe  f8890000          STRB     r0,[r9,#0]            ;5683
004302  e00c              B        |L1.17182|
                  |L1.17156|
004304  f8990000          LDRB     r0,[r9,#0]            ;5684  ; bdr_transmit_stat
004308  f0400001          ORR      r0,r0,#1              ;5684
00430c  f8890000          STRB     r0,[r9,#0]            ;5684
004310  e005              B        |L1.17182|
                  |L1.17170|
;;;5689   	else 						bdr_transmit_stat&=0xfe;
004312  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004316  f00000fe          AND      r0,r0,#0xfe
00431a  f8890000          STRB     r0,[r9,#0]
                  |L1.17182|
;;;5690   	}	
;;;5691   
;;;5692   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
00431e  20d2              MOVS     r0,#0xd2
004320  f7fffffe          BL       mess_find_unvol
004324  b110              CBZ      r0,|L1.17196|
004326  6828              LDR      r0,[r5,#0]  ; mess_data
004328  2876              CMP      r0,#0x76
00432a  d009              BEQ      |L1.17216|
                  |L1.17196|
;;;5693   	{
;;;5694   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5695   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5696   	}
;;;5697   else 
;;;5698   	{
;;;5699   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
00432c  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00432e  0780              LSLS     r0,r0,#30
004330  d519              BPL      |L1.17254|
004332  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004336  f0400002          ORR      r0,r0,#2
00433a  f8890000          STRB     r0,[r9,#0]
00433e  e018              B        |L1.17266|
                  |L1.17216|
004340  6868              LDR      r0,[r5,#4]            ;5694  ; mess_data
004342  b110              CBZ      r0,|L1.17226|
004344  2801              CMP      r0,#1                 ;5695
004346  d007              BEQ      |L1.17240|
004348  e013              B        |L1.17266|
                  |L1.17226|
00434a  f8990000          LDRB     r0,[r9,#0]            ;5694  ; bdr_transmit_stat
00434e  f00000fd          AND      r0,r0,#0xfd           ;5694
004352  f8890000          STRB     r0,[r9,#0]            ;5694
004356  e00c              B        |L1.17266|
                  |L1.17240|
004358  f8990000          LDRB     r0,[r9,#0]            ;5695  ; bdr_transmit_stat
00435c  f0400002          ORR      r0,r0,#2              ;5695
004360  f8890000          STRB     r0,[r9,#0]            ;5695
004364  e005              B        |L1.17266|
                  |L1.17254|
;;;5700   	else 						bdr_transmit_stat&=0xfd;
004366  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00436a  f00000fd          AND      r0,r0,#0xfd
00436e  f8890000          STRB     r0,[r9,#0]
                  |L1.17266|
;;;5701   	}	
;;;5702   	
;;;5703   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
004372  20d2              MOVS     r0,#0xd2
004374  f7fffffe          BL       mess_find_unvol
004378  b110              CBZ      r0,|L1.17280|
00437a  6828              LDR      r0,[r5,#0]  ; mess_data
00437c  2877              CMP      r0,#0x77
00437e  d009              BEQ      |L1.17300|
                  |L1.17280|
;;;5704   	{
;;;5705   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5706   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5707   	}
;;;5708   else 
;;;5709   	{
;;;5710   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
004380  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004382  0740              LSLS     r0,r0,#29
004384  d519              BPL      |L1.17338|
004386  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00438a  f0400004          ORR      r0,r0,#4
00438e  f8890000          STRB     r0,[r9,#0]
004392  e018              B        |L1.17350|
                  |L1.17300|
004394  6868              LDR      r0,[r5,#4]            ;5705  ; mess_data
004396  b110              CBZ      r0,|L1.17310|
004398  2801              CMP      r0,#1                 ;5706
00439a  d007              BEQ      |L1.17324|
00439c  e013              B        |L1.17350|
                  |L1.17310|
00439e  f8990000          LDRB     r0,[r9,#0]            ;5705  ; bdr_transmit_stat
0043a2  f00000fb          AND      r0,r0,#0xfb           ;5705
0043a6  f8890000          STRB     r0,[r9,#0]            ;5705
0043aa  e00c              B        |L1.17350|
                  |L1.17324|
0043ac  f8990000          LDRB     r0,[r9,#0]            ;5706  ; bdr_transmit_stat
0043b0  f0400004          ORR      r0,r0,#4              ;5706
0043b4  f8890000          STRB     r0,[r9,#0]            ;5706
0043b8  e005              B        |L1.17350|
                  |L1.17338|
;;;5711   	else 						bdr_transmit_stat&=0xfb;
0043ba  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0043be  f00000fb          AND      r0,r0,#0xfb
0043c2  f8890000          STRB     r0,[r9,#0]
                  |L1.17350|
;;;5712   	}	
;;;5713   	
;;;5714   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
0043c6  20d2              MOVS     r0,#0xd2
0043c8  f7fffffe          BL       mess_find_unvol
0043cc  b110              CBZ      r0,|L1.17364|
0043ce  6828              LDR      r0,[r5,#0]  ; mess_data
0043d0  2878              CMP      r0,#0x78
0043d2  d009              BEQ      |L1.17384|
                  |L1.17364|
;;;5715   	{
;;;5716   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5717   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5718   	}
;;;5719   else 
;;;5720   	{
;;;5721   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
0043d4  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0043d6  0700              LSLS     r0,r0,#28
0043d8  d519              BPL      |L1.17422|
0043da  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0043de  f0400008          ORR      r0,r0,#8
0043e2  f8890000          STRB     r0,[r9,#0]
0043e6  e018              B        |L1.17434|
                  |L1.17384|
0043e8  6868              LDR      r0,[r5,#4]            ;5716  ; mess_data
0043ea  b110              CBZ      r0,|L1.17394|
0043ec  2801              CMP      r0,#1                 ;5717
0043ee  d007              BEQ      |L1.17408|
0043f0  e013              B        |L1.17434|
                  |L1.17394|
0043f2  f8990000          LDRB     r0,[r9,#0]            ;5716  ; bdr_transmit_stat
0043f6  f00000f7          AND      r0,r0,#0xf7           ;5716
0043fa  f8890000          STRB     r0,[r9,#0]            ;5716
0043fe  e00c              B        |L1.17434|
                  |L1.17408|
004400  f8990000          LDRB     r0,[r9,#0]            ;5717  ; bdr_transmit_stat
004404  f0400008          ORR      r0,r0,#8              ;5717
004408  f8890000          STRB     r0,[r9,#0]            ;5717
00440c  e005              B        |L1.17434|
                  |L1.17422|
;;;5722   	else 						bdr_transmit_stat&=0xf7;
00440e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004412  f00000f7          AND      r0,r0,#0xf7
004416  f8890000          STRB     r0,[r9,#0]
                  |L1.17434|
;;;5723   	}	
;;;5724   					 	
;;;5725   #endif
;;;5726   
;;;5727   #ifdef UKU_KONTUR
;;;5728   
;;;5729   //Реле общей аварии
;;;5730   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5731   	{
;;;5732   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5733   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5734   	}
;;;5735   else 
;;;5736   	{
;;;5737        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5738             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5739             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5740             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5741             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5742        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5743   	}
;;;5744   
;;;5745   	
;;;5746   //rel_warm_plazma=0;
;;;5747   //Реле освещения   
;;;5748   /*
;;;5749   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5750   	{
;;;5751   	if(mess_data[1]==0)
;;;5752   		{
;;;5753   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5754   		rel_warm_plazma=1;
;;;5755   		}
;;;5756   	else if(mess_data[1]==1) 
;;;5757   		{
;;;5758   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5759   		rel_warm_plazma=2;
;;;5760   		}
;;;5761        }
;;;5762   else 
;;;5763   	{
;;;5764   	if(warm_stat_k==wsOFF) 
;;;5765   		{
;;;5766   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5767   		rel_warm_plazma=3;
;;;5768   		}
;;;5769        else 
;;;5770   		{
;;;5771   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5772   		rel_warm_plazma=4;
;;;5773   		}
;;;5774   	}
;;;5775   */
;;;5776   //Реле освещения
;;;5777   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5778   	{
;;;5779   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5780   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5781        }
;;;5782   else 
;;;5783   	{
;;;5784   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5785        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5786   	}
;;;5787   
;;;5788   
;;;5789   
;;;5790   //Реле выключения нагрузки
;;;5791   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5792   	{
;;;5793   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5794   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5795        }
;;;5796   else if(tloaddisable_cmnd==0)
;;;5797   	{
;;;5798   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5799   	}
;;;5800   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5801   	{
;;;5802   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5803   	}
;;;5804   
;;;5805   else 
;;;5806   	{
;;;5807   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5808        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5809   	} 
;;;5810   
;;;5811   //Реле осевого вентилятора или отопителя
;;;5812   if(RELE_LOG)
;;;5813   	{
;;;5814   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5815   		{
;;;5816   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5817   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5818   		}
;;;5819   	else 
;;;5820   		{
;;;5821   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5822   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5823   		} 
;;;5824   
;;;5825   	}
;;;5826   else 
;;;5827   	{
;;;5828   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5829   		{
;;;5830   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5831   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5832   		}
;;;5833   	else 
;;;5834   		{
;;;5835   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5836   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5837   		} 
;;;5838   	}
;;;5839   #endif
;;;5840   
;;;5841   
;;;5842   #ifdef UKU_TELECORE2015
;;;5843   //Реле аварии сети
;;;5844   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5845   	{
;;;5846   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5847   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5848   	}
;;;5849   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5850   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5851   
;;;5852   
;;;5853   //Реле освещения
;;;5854   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5855   	{
;;;5856   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5857   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5858        }
;;;5859   else 
;;;5860   	{
;;;5861   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5862        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5863   	}
;;;5864   
;;;5865   //Реле отопителя
;;;5866   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5867   	{
;;;5868   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5869   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5870   	}
;;;5871   else 
;;;5872   	{
;;;5873   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5874        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5875   	} 
;;;5876   //Реле вентилятора
;;;5877   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5878   	{
;;;5879   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5880   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5881   	}
;;;5882   else 
;;;5883   	{
;;;5884   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5885        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5886   	} 
;;;5887   
;;;5888   //Реле внутреннего вентилятора
;;;5889   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5890   	{
;;;5891   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5892   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5893   	}
;;;5894   else 
;;;5895   	{
;;;5896   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5897        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5898   	} 
;;;5899   
;;;5900   #endif
;;;5901   
;;;5902   #ifdef UKU_TELECORE2017
;;;5903   //Реле аварии сети
;;;5904   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5905   	{
;;;5906   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5907   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5908   	}
;;;5909   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5910   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5911   
;;;5912   
;;;5913   //Реле освещения
;;;5914   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5915   	{
;;;5916   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5917   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5918        }
;;;5919   else 
;;;5920   	{
;;;5921   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5922        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5923   	}
;;;5924   
;;;5925   //Реле отопителя
;;;5926   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5927   	{
;;;5928   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5929   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5930   	}
;;;5931   else 
;;;5932   	{
;;;5933   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5934        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5935   	} 
;;;5936   //Реле вентилятора
;;;5937   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5938   	{
;;;5939   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5940   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5941   	}
;;;5942   else 
;;;5943   	{
;;;5944   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5945        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5946   	} 
;;;5947   
;;;5948   //Реле внутреннего вентилятора
;;;5949   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5950   	{
;;;5951   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5952   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5953   	}
;;;5954   else 
;;;5955   	{
;;;5956   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5957        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5958   	} 
;;;5959   
;;;5960   //Реле выключения нагрузки
;;;5961   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5962   	{
;;;5963   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5964   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5965        }
;;;5966   else if(tloaddisable_cmnd==0)
;;;5967   	{
;;;5968   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5969   	}
;;;5970   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5971   	{
;;;5972   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5973   	}
;;;5974   
;;;5975   else 
;;;5976   	{
;;;5977   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5978        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5979   	} 
;;;5980   
;;;5981   
;;;5982   #endif
;;;5983   
;;;5984   #ifdef IPS_SGEP_GAZPROM
;;;5985   rele_hndl_plazma[0]++;
;;;5986   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5987   	{
;;;5988   	rele_hndl_plazma[1]++;
;;;5989   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5990   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5991        }
;;;5992   else 
;;;5993   	{
;;;5994   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5995        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5996   	} 
;;;5997   
;;;5998   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5999   	{
;;;6000   	rele_hndl_plazma[2]++;
;;;6001   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6002   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6003   	}
;;;6004   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6005   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6006   #endif
;;;6007   
;;;6008   if(NUMBDR==1)
00441a  4870              LDR      r0,|L1.17884|
00441c  8800              LDRH     r0,[r0,#0]  ; NUMBDR
00441e  2801              CMP      r0,#1
004420  d17e              BNE      |L1.17696|
;;;6009   	{
;;;6010   	char ii_;
;;;6011   	char bdr_avar_stat_temp=0;
004422  f04f0000          MOV      r0,#0
;;;6012   	for	(ii_=0;ii_<4;ii_++)
004426  4601              MOV      r1,r0
;;;6013   		{
;;;6014   	//o_9_s
;;;6015   	#ifdef UKU_6U
;;;6016   		 //АБ разряжена
;;;6017   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6018   			( (bat[0]._Ub<(USIGN*10)) || (bat[1]._Ub<(USIGN*10)) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6019   		//Выравнивающий заряд
;;;6020   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6021   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6022   	   	//Общая авария ИБЭП
;;;6023   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6024   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6025   		//Ток АКБ<-0,5А
;;;6026   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6027   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6028   	   	//отключение НПН
;;;6029   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6030   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6031   		//контроль емкости АКБ1
;;;6032   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6033   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6034   		//контроль емкости АКБ2
;;;6035   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6036   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6037   	#else
;;;6038   	//o_9_e		//АБ разряжена
;;;6039   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6040   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6041   		//Ускоренный заряд
;;;6042   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6043   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6044   		//Выравнивающий заряд
;;;6045   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6046   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6047   		//Общая авария ЗВУ
;;;6048   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6049   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6050   		//Uвых завышено
;;;6051   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6052   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
004428  f8dfa1b4          LDR      r10,|L1.17888|
;;;6053   		//Uвых занижено
;;;6054   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6055   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6056   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6057   			(
;;;6058   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
00442c  f8df91b4          LDR      r9,|L1.17892|
004430  4d6d              LDR      r5,|L1.17896|
004432  f8dfb1b8          LDR      r11,|L1.17900|
004436  f04f0301          MOV      r3,#1                 ;4963
                  |L1.17466|
00443a  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6039
00443e  ea5f7cc2          LSLS     r12,r2,#31            ;6039
004442  d010              BEQ      |L1.17510|
004444  f8dfc1a8          LDR      r12,|L1.17904|
004448  f9b8e000          LDRSH    lr,[r8,#0]            ;6040  ; load_U
00444c  f9bcc000          LDRSH    r12,[r12,#0]          ;6040  ; USIGN
004450  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6040
004454  ebbe0f4c          CMP      lr,r12,LSL #1         ;6040
004458  da05              BGE      |L1.17510|
00445a  fa03fc01          LSL      r12,r3,r1             ;6040
00445e  ea4c0c00          ORR      r12,r12,r0            ;6040
004462  f00c00ff          AND      r0,r12,#0xff          ;6040
                  |L1.17510|
004466  ea5f7c82          LSLS     r12,r2,#30            ;6042
00446a  d50a              BPL      |L1.17538|
00446c  f897c000          LDRB     r12,[r7,#0]           ;6043  ; sp_ch_stat
004470  f1bc0f02          CMP      r12,#2                ;6043
004474  d105              BNE      |L1.17538|
004476  fa03fc01          LSL      r12,r3,r1             ;6043
00447a  ea4c0c00          ORR      r12,r12,r0            ;6043
00447e  f00c00ff          AND      r0,r12,#0xff          ;6043
                  |L1.17538|
004482  ea5f7c42          LSLS     r12,r2,#29            ;6045
004486  d50a              BPL      |L1.17566|
004488  f896c023          LDRB     r12,[r6,#0x23]        ;6046  ; spc_stat
00448c  f1bc0f02          CMP      r12,#2                ;6046
004490  d105              BNE      |L1.17566|
004492  fa03fc01          LSL      r12,r3,r1             ;6046
004496  ea4c0c00          ORR      r12,r12,r0            ;6046
00449a  f00c00ff          AND      r0,r12,#0xff          ;6046
                  |L1.17566|
00449e  ea5f7c02          LSLS     r12,r2,#28            ;6048
0044a2  d50c              BPL      |L1.17598|
0044a4  f8dfc14c          LDR      r12,|L1.17908|
0044a8  f8dcc000          LDR      r12,[r12,#0]          ;6049  ; avar_stat
0044ac  f1bc0f00          CMP      r12,#0                ;6049
0044b0  d005              BEQ      |L1.17598|
0044b2  fa03fc01          LSL      r12,r3,r1             ;6049
0044b6  ea4c0c00          ORR      r12,r12,r0            ;6049
0044ba  f00c00ff          AND      r0,r12,#0xff          ;6049
                  |L1.17598|
0044be  ea5f6cc2          LSLS     r12,r2,#27            ;6051
0044c2  d50a              BPL      |L1.17626|
0044c4  f89ac000          LDRB     r12,[r10,#0]          ;6052  ; uout_av
0044c8  f1bc0f01          CMP      r12,#1                ;6052
0044cc  d105              BNE      |L1.17626|
0044ce  fa03fc01          LSL      r12,r3,r1             ;6052
0044d2  ea4c0c00          ORR      r12,r12,r0            ;6052
0044d6  f00c00ff          AND      r0,r12,#0xff          ;6052
                  |L1.17626|
0044da  ea5f6c82          LSLS     r12,r2,#26            ;6054
0044de  d50a              BPL      |L1.17654|
0044e0  f89ac000          LDRB     r12,[r10,#0]          ;6055  ; uout_av
0044e4  f1bc0f02          CMP      r12,#2                ;6055
0044e8  d105              BNE      |L1.17654|
0044ea  fa03fc01          LSL      r12,r3,r1             ;6055
0044ee  ea4c0c00          ORR      r12,r12,r0            ;6055
0044f2  f00c00ff          AND      r0,r12,#0xff          ;6055
                  |L1.17654|
0044f6  ea5f6c42          LSLS     r12,r2,#25            ;6056
0044fa  d525              BPL      |L1.17736|
0044fc  f899c001          LDRB     r12,[r9,#1]  ; bps
004500  ea5f6ccc          LSLS     r12,r12,#27
004504  d504              BPL      |L1.17680|
004506  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00450a  f1bc0f01          CMP      r12,#1
00450e  da15              BGE      |L1.17724|
                  |L1.17680|
;;;6059   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
004510  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004514  ea5f6ccc          LSLS     r12,r12,#27
004518  d506              BPL      |L1.17704|
00451a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00451e  e000              B        |L1.17698|
                  |L1.17696|
004520  e047              B        |L1.17842|
                  |L1.17698|
004522  f1bc0f02          CMP      r12,#2
004526  da09              BGE      |L1.17724|
                  |L1.17704|
;;;6060   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
004528  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00452c  ea5f6ccc          LSLS     r12,r12,#27
004530  d50a              BPL      |L1.17736|
004532  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004536  f1bc0f03          CMP      r12,#3
00453a  db05              BLT      |L1.17736|
                  |L1.17724|
;;;6061   			))bdr_avar_stat_temp|=(1<<ii_);
00453c  fa03fc01          LSL      r12,r3,r1
004540  ea4c0c00          ORR      r12,r12,r0
004544  f00c00ff          AND      r0,r12,#0xff
                  |L1.17736|
;;;6062   		if((RELE_SET_MASK[ii_]&0x80)&&
004548  ea5f6c02          LSLS     r12,r2,#24
00454c  d523              BPL      |L1.17814|
;;;6063   			(
;;;6064   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
00454e  f899c001          LDRB     r12,[r9,#1]  ; bps
004552  ea5f7c0c          LSLS     r12,r12,#28
004556  d004              BEQ      |L1.17762|
004558  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00455c  f1bc0f01          CMP      r12,#1
004560  da13              BGE      |L1.17802|
                  |L1.17762|
;;;6065   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004562  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004566  ea5f7c0c          LSLS     r12,r12,#28
00456a  d004              BEQ      |L1.17782|
00456c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004570  f1bc0f02          CMP      r12,#2
004574  da09              BGE      |L1.17802|
                  |L1.17782|
;;;6066   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004576  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00457a  ea5f7c0c          LSLS     r12,r12,#28
00457e  d00a              BEQ      |L1.17814|
004580  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004584  f1bc0f03          CMP      r12,#3
004588  db05              BLT      |L1.17814|
                  |L1.17802|
;;;6067   			))bdr_avar_stat_temp|=(1<<ii_);
00458a  fa03fc01          LSL      r12,r3,r1
00458e  ea4c0c00          ORR      r12,r12,r0
004592  f00c00ff          AND      r0,r12,#0xff
                  |L1.17814|
;;;6068   	  #endif											 //o_9
;;;6069   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004596  0412              LSLS     r2,r2,#16
004598  d404              BMI      |L1.17828|
00459a  fa03f201          LSL      r2,r3,r1
00459e  ea820200          EOR      r2,r2,r0
0045a2  b2d0              UXTB     r0,r2
                  |L1.17828|
0045a4  f1010101          ADD      r1,r1,#1              ;6012
0045a8  b2c9              UXTB     r1,r1                 ;6012
0045aa  2904              CMP      r1,#4                 ;6012
0045ac  f4ffaf45          BCC      |L1.17466|
;;;6070   		}
;;;6071   	bdr_avar_stat=bdr_avar_stat_temp;
0045b0  7020              STRB     r0,[r4,#0]
                  |L1.17842|
;;;6072   	}
;;;6073   }
0045b2  e8bd9ff0          POP      {r4-r12,pc}
0045b6  0000              DCW      0x0000
                  |L1.17848|
                          DCD      load_U
                  |L1.17852|
                          DCD      sp_ch_stat
                  |L1.17856|
                          DCD      ||area_number.18||
                  |L1.17860|
                          DCD      DOP_RELE_FUNC
                  |L1.17864|
                          DCD      speedChIsOn
                  |L1.17868|
                          DCD      hv_vz_stat
                  |L1.17872|
                          DCD      UVENTOFF
                  |L1.17876|
                          DCD      bdr_transmit_stat
                  |L1.17880|
                          DCD      bdr_avar_stat
                  |L1.17884|
                          DCD      NUMBDR
                  |L1.17888|
                          DCD      uout_av
                  |L1.17892|
                          DCD      bps
                  |L1.17896|
                          DCD      NUMIST
                  |L1.17900|
                          DCD      RELE_SET_MASK
                  |L1.17904|
                          DCD      USIGN
                  |L1.17908|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6076   //-----------------------------------------------
;;;6077   void bps_hndl(void)
0045f8  e92d5ff0          PUSH     {r4-r12,lr}
;;;6078   {
;;;6079   char ptr__,i;
;;;6080   unsigned short tempUS;
;;;6081   
;;;6082   if(sh_cnt0<10)
0045fc  f8dfb424          LDR      r11,|L1.18980|
;;;6083   	{
;;;6084   	sh_cnt0++;
;;;6085   	if(sh_cnt0>=10)
;;;6086   		{
;;;6087   		sh_cnt0=0;
004600  2600              MOVS     r6,#0
;;;6088   		b1Hz_sh=1;
004602  f04f0a01          MOV      r10,#1
004606  f89b0021          LDRB     r0,[r11,#0x21]        ;6082  ; sh_cnt0
00460a  280a              CMP      r0,#0xa               ;6082
00460c  d20a              BCS      |L1.17956|
00460e  f1000001          ADD      r0,r0,#1              ;6084
004612  b2c0              UXTB     r0,r0                 ;6084
004614  f88b0021          STRB     r0,[r11,#0x21]        ;6084
004618  280a              CMP      r0,#0xa               ;6085
00461a  d303              BCC      |L1.17956|
00461c  f88b6021          STRB     r6,[r11,#0x21]        ;6087
004620  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17956|
;;;6089   		}
;;;6090   	}
;;;6091   
;;;6092   /*if(sh_cnt1<5)
;;;6093   	{
;;;6094   	sh_cnt1++;
;;;6095   	if(sh_cnt1==5)
;;;6096   		{
;;;6097   		sh_cnt1=0;
;;;6098   		b2Hz_sh=1;
;;;6099   		}
;;;6100   	} */
;;;6101   
;;;6102   
;;;6103   /*
;;;6104   if(mess_find(MESS_SRC_ON_OFF))
;;;6105   	{
;;;6106   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6107   		{
;;;6108   		char i;
;;;6109   		for(i=0;i<NUMIST;i++)
;;;6110   			{
;;;6111   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6112   			}
;;;6113   		
;;;6114   		}
;;;6115   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6116   		{
;;;6117   		char i;
;;;6118   		for(i=0;i<NUMIST;i++)
;;;6119   			{
;;;6120   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6121   			}
;;;6122   		
;;;6123   		}
;;;6124   	}
;;;6125   	
;;;6126   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6127   	{				
;;;6128   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6129   		{
;;;6130   		char i;
;;;6131   		for(i=0;i<NUMIST;i++)
;;;6132   			{
;;;6133   			if(mess_data[1]&(1<<i))
;;;6134   				{
;;;6135   				src[i]._ist_blok_cnt=0;
;;;6136   				src[i]._flags_tu=2;
;;;6137   				}
;;;6138   			}
;;;6139   		
;;;6140   		}				
;;;6141   	}*/
;;;6142   
;;;6143   
;;;6144   
;;;6145   /*else*/ 
;;;6146   bps_on_mask=0;
004624  4fff              LDR      r7,|L1.18980|
004626  3780              ADDS     r7,r7,#0x80
004628  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6147   bps_off_mask=0;
00462a  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6148   
;;;6149   if(mess_find_unvol(MESS2BPS_HNDL))
00462c  20cd              MOVS     r0,#0xcd
00462e  f7fffffe          BL       mess_find_unvol
;;;6150   	{
;;;6151   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6152   		{
;;;6153   		bps_off_mask=0xffff;
;;;6154   		}
;;;6155   
;;;6156   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6157   		{
;;;6158   		bps_off_mask=mess_data[1];
;;;6159   		}
;;;6160   
;;;6161   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6162   		{
;;;6163   		bps_on_mask=mess_data[1];
;;;6164   		}
;;;6165   
;;;6166   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6167   		{
;;;6168   		bps_on_mask=0xffff;
;;;6169   		}
;;;6170   
;;;6171   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6172   		{
;;;6173   		bps_on_mask=(unsigned)mess_data[1];
;;;6174   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6175   		}
;;;6176   
;;;6177    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6178   		{
;;;6179   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6180   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6181   		}
;;;6182   
;;;6183   	for(i=0;i<=NUMIST;i++)
;;;6184   		{
;;;6185   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004632  f8df83f4          LDR      r8,|L1.18984|
004636  b3b8              CBZ      r0,|L1.18088|
004638  4afc              LDR      r2,|L1.18988|
00463a  f64f71ff          MOV      r1,#0xffff            ;6153
00463e  6810              LDR      r0,[r2,#0]            ;6151  ; mess_data
004640  28ce              CMP      r0,#0xce              ;6151
004642  d100              BNE      |L1.17990|
004644  6339              STR      r1,[r7,#0x30]         ;6153  ; bps_off_mask
                  |L1.17990|
004646  28cf              CMP      r0,#0xcf              ;6156
004648  d101              BNE      |L1.17998|
00464a  6853              LDR      r3,[r2,#4]            ;6158  ; mess_data
00464c  633b              STR      r3,[r7,#0x30]         ;6158  ; bps_off_mask
                  |L1.17998|
00464e  28d1              CMP      r0,#0xd1              ;6161
004650  d101              BNE      |L1.18006|
004652  6853              LDR      r3,[r2,#4]            ;6163  ; mess_data
004654  62fb              STR      r3,[r7,#0x2c]         ;6163  ; bps_on_mask
                  |L1.18006|
004656  28d2              CMP      r0,#0xd2              ;6166
004658  d100              BNE      |L1.18012|
00465a  62f9              STR      r1,[r7,#0x2c]         ;6168  ; bps_on_mask
                  |L1.18012|
00465c  28d0              CMP      r0,#0xd0              ;6171
00465e  d104              BNE      |L1.18026|
004660  6851              LDR      r1,[r2,#4]            ;6173  ; mess_data
004662  62f9              STR      r1,[r7,#0x2c]         ;6173  ; bps_on_mask
004664  ea6f0101          MVN      r1,r1                 ;6174
004668  6339              STR      r1,[r7,#0x30]         ;6174  ; bps_off_mask
                  |L1.18026|
00466a  f5b07f9a          CMP      r0,#0x134             ;6177
00466e  d106              BNE      |L1.18046|
004670  6851              LDR      r1,[r2,#4]            ;6179  ; mess_data
004672  fa0af001          LSL      r0,r10,r1             ;6179
004676  62f8              STR      r0,[r7,#0x2c]         ;6179  ; bps_on_mask
004678  ea6f0000          MVN      r0,r0                 ;6180
00467c  6338              STR      r0,[r7,#0x30]         ;6180  ; bps_off_mask
                  |L1.18046|
00467e  f04f0400          MOV      r4,#0                 ;6183
004682  e035              B        |L1.18160|
                  |L1.18052|
004684  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
004686  fa0af904          LSL      r9,r10,r4
00468a  ea190f00          TST      r9,r0
00468e  d00c              BEQ      |L1.18090|
004690  eb0400c4          ADD      r0,r4,r4,LSL #3
004694  eb001004          ADD      r0,r0,r4,LSL #4
004698  eb080080          ADD      r0,r8,r0,LSL #2
00469c  f8301f40          LDRH     r1,[r0,#0x40]!
0046a0  f1010101          ADD      r1,r1,#1
0046a4  8001              STRH     r1,[r0,#0]
0046a6  e008              B        |L1.18106|
                  |L1.18088|
0046a8  e028              B        |L1.18172|
                  |L1.18090|
;;;6186   		else bps[i]._blok_cnt=0;
0046aa  eb0400c4          ADD      r0,r4,r4,LSL #3
0046ae  eb001004          ADD      r0,r0,r4,LSL #4
0046b2  eb080080          ADD      r0,r8,r0,LSL #2
0046b6  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.18106|
;;;6187   		gran(&bps[i]._blok_cnt,0,50);
0046ba  eb0400c4          ADD      r0,r4,r4,LSL #3
0046be  eb001004          ADD      r0,r0,r4,LSL #4
0046c2  eb080580          ADD      r5,r8,r0,LSL #2
0046c6  f1050040          ADD      r0,r5,#0x40
0046ca  2232              MOVS     r2,#0x32
0046cc  2100              MOVS     r1,#0
0046ce  f7fffffe          BL       gran
;;;6188   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0046d2  f9b50040          LDRSH    r0,[r5,#0x40]
0046d6  2814              CMP      r0,#0x14
0046d8  dd01              BLE      |L1.18142|
0046da  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.18142|
;;;6189   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0046de  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
0046e0  ea190f00          TST      r9,r0
0046e4  d001              BEQ      |L1.18154|
0046e6  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.18154|
0046ea  f1040401          ADD      r4,r4,#1              ;6183
0046ee  b2e4              UXTB     r4,r4                 ;6183
                  |L1.18160|
0046f0  48cf              LDR      r0,|L1.18992|
0046f2  f9b00000          LDRSH    r0,[r0,#0]            ;6183  ; NUMIST
0046f6  4284              CMP      r4,r0                 ;6183
0046f8  ddc4              BLE      |L1.18052|
0046fa  e08e              B        |L1.18458|
                  |L1.18172|
;;;6190   	     }
;;;6191   
;;;6192   	
;;;6193   /*
;;;6194   
;;;6195   	if(bps_all_off_cnt>20)
;;;6196   		{
;;;6197   		for(i=0;i<=NUMIST;i++)
;;;6198   			{
;;;6199   	     	bps[i]._flags_tu=1;
;;;6200   	     	}
;;;6201   		}
;;;6202   	else if(bps_mask_off_cnt>20)
;;;6203   		{
;;;6204   		for(i=0;i<=NUMIST;i++)
;;;6205   			{
;;;6206   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6207   	     	}
;;;6208   		}	
;;;6209   		
;;;6210   	else if(bps_mask_on_off_cnt>20)
;;;6211   		{
;;;6212   		for(i=0;i<=NUMIST;i++)
;;;6213   			{
;;;6214   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6215   			else bps[i]._flags_tu=0;
;;;6216   	     	}
;;;6217   		}
;;;6218   		
;;;6219   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6220   		{
;;;6221   		for(i=0;i<=NUMIST;i++)
;;;6222   			{
;;;6223   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6224   	     	}
;;;6225   		}
;;;6226   */										
;;;6227   	}
;;;6228   
;;;6229   
;;;6230   else if(b1Hz_sh)
0046fc  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
004700  b3f0              CBZ      r0,|L1.18304|
;;;6231   	{
;;;6232   	ptr__=0;
004702  f04f0400          MOV      r4,#0
;;;6233        for(i=0;i<=NUMIST;i++)
004706  4621              MOV      r1,r4
004708  48c9              LDR      r0,|L1.18992|
00470a  f9b00000          LDRSH    r0,[r0,#0]            ;6183
00470e  e00a              B        |L1.18214|
                  |L1.18192|
;;;6234   		{
;;;6235   	     bps[i]._flags_tu=1;
004710  eb0102c1          ADD      r2,r1,r1,LSL #3
004714  eb021201          ADD      r2,r2,r1,LSL #4
004718  eb080282          ADD      r2,r8,r2,LSL #2
00471c  f882a02c          STRB     r10,[r2,#0x2c]
004720  f1010101          ADD      r1,r1,#1              ;6233
004724  b2c9              UXTB     r1,r1                 ;6233
                  |L1.18214|
004726  4281              CMP      r1,r0                 ;6233
004728  ddf2              BLE      |L1.18192|
;;;6236   	     }	
;;;6237     	     
;;;6238     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
00472a  f04f0100          MOV      r1,#0
00472e  e023              B        |L1.18296|
                  |L1.18224|
;;;6239     		{
;;;6240   		char ii,iii;
;;;6241   
;;;6242   		ii=(char)NUMIST;
004730  b2c2              UXTB     r2,r0
;;;6243   		//if(ii<0)ii=0;
;;;6244   		if(ii>32)ii=32;
004732  2a20              CMP      r2,#0x20
004734  d901              BLS      |L1.18234|
004736  f04f0220          MOV      r2,#0x20
                  |L1.18234|
;;;6245   		iii=numOfForvardBps;
00473a  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6246   		//if(iii<0)iii=0;
;;;6247   		if(iii>=NUMIST)iii=0;
00473e  4283              CMP      r3,r0
004740  db01              BLT      |L1.18246|
004742  f04f0300          MOV      r3,#0
                  |L1.18246|
;;;6248   		iii+=i;
004746  440b              ADD      r3,r3,r1
004748  b2db              UXTB     r3,r3
;;;6249   		iii=iii%ii;
00474a  fbb3f5f2          UDIV     r5,r3,r2
00474e  fb023215          MLS      r2,r2,r5,r3
;;;6250   		
;;;6251     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004752  eb0203c2          ADD      r3,r2,r2,LSL #3
004756  eb031202          ADD      r2,r3,r2,LSL #4
00475a  eb080282          ADD      r2,r8,r2,LSL #2
00475e  7893              LDRB     r3,[r2,#2]
004760  2b02              CMP      r3,#2
004762  d001              BEQ      |L1.18280|
004764  2b01              CMP      r3,#1
004766  d104              BNE      |L1.18290|
                  |L1.18280|
;;;6252     	         	{
;;;6253     	         	bps[iii]._flags_tu=0;
004768  f882602c          STRB     r6,[r2,#0x2c]
;;;6254     	         	ptr__++;
00476c  f1040401          ADD      r4,r4,#1
004770  b2e4              UXTB     r4,r4
                  |L1.18290|
004772  f1010101          ADD      r1,r1,#1              ;6238
004776  b2c9              UXTB     r1,r1                 ;6238
                  |L1.18296|
004778  4281              CMP      r1,r0                 ;6238
00477a  da06              BGE      |L1.18314|
00477c  4aad              LDR      r2,|L1.18996|
00477e  e000              B        |L1.18306|
                  |L1.18304|
004780  e04b              B        |L1.18458|
                  |L1.18306|
004782  f9b22000          LDRSH    r2,[r2,#0]            ;6238  ; num_necc
004786  4294              CMP      r4,r2                 ;6238
004788  dbd2              BLT      |L1.18224|
                  |L1.18314|
;;;6255     	         	}
;;;6256   			
;;;6257     	     }
;;;6258   	bps[numOfForvardBps_old]._flags_tu=0;
00478a  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
00478e  eb0102c1          ADD      r2,r1,r1,LSL #3
004792  eb021101          ADD      r1,r2,r1,LSL #4
004796  eb080181          ADD      r1,r8,r1,LSL #2
00479a  f881602c          STRB     r6,[r1,#0x2c]
;;;6259   
;;;6260   	if(main_1Hz_cnt<60)
00479e  49a6              LDR      r1,|L1.19000|
0047a0  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0047a4  293c              CMP      r1,#0x3c
0047a6  da0f              BGE      |L1.18376|
;;;6261   		{
;;;6262        	for(i=0;i<=NUMIST;i++)
0047a8  f04f0100          MOV      r1,#0
0047ac  e00a              B        |L1.18372|
                  |L1.18350|
;;;6263   			{
;;;6264   	     	bps[i]._flags_tu=0;
0047ae  eb0102c1          ADD      r2,r1,r1,LSL #3
0047b2  eb021201          ADD      r2,r2,r1,LSL #4
0047b6  eb080282          ADD      r2,r8,r2,LSL #2
0047ba  f882602c          STRB     r6,[r2,#0x2c]
0047be  f1010101          ADD      r1,r1,#1              ;6262
0047c2  b2c9              UXTB     r1,r1                 ;6262
                  |L1.18372|
0047c4  4281              CMP      r1,r0                 ;6262
0047c6  ddf2              BLE      |L1.18350|
                  |L1.18376|
;;;6265   	     	}	
;;;6266   		}
;;;6267   	if(ipsBlckStat)
0047c8  499c              LDR      r1,|L1.19004|
0047ca  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0047cc  b179              CBZ      r1,|L1.18414|
;;;6268   		{
;;;6269        	for(i=0;i<=NUMIST;i++)
0047ce  f04f0100          MOV      r1,#0
0047d2  e00a              B        |L1.18410|
                  |L1.18388|
;;;6270   			{
;;;6271   	     	bps[i]._flags_tu=1;
0047d4  eb0102c1          ADD      r2,r1,r1,LSL #3
0047d8  eb021201          ADD      r2,r2,r1,LSL #4
0047dc  eb080282          ADD      r2,r8,r2,LSL #2
0047e0  f882a02c          STRB     r10,[r2,#0x2c]
0047e4  f1010101          ADD      r1,r1,#1              ;6269
0047e8  b2c9              UXTB     r1,r1                 ;6269
                  |L1.18410|
0047ea  4281              CMP      r1,r0                 ;6269
0047ec  ddf2              BLE      |L1.18388|
                  |L1.18414|
;;;6272   	     	}
;;;6273   		}
;;;6274   
;;;6275        for(i=0;i<=NUMIST;i++)
0047ee  f04f0100          MOV      r1,#0
;;;6276   		{
;;;6277   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0047f2  f06f0331          MVN      r3,#0x31
0047f6  e00e              B        |L1.18454|
                  |L1.18424|
0047f8  eb0102c1          ADD      r2,r1,r1,LSL #3
0047fc  eb021201          ADD      r2,r2,r1,LSL #4
004800  eb080282          ADD      r2,r8,r2,LSL #2
004804  f892402c          LDRB     r4,[r2,#0x2c]
004808  2c01              CMP      r4,#1
00480a  d101              BNE      |L1.18448|
00480c  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.18448|
004810  f1010101          ADD      r1,r1,#1              ;6275
004814  b2c9              UXTB     r1,r1                 ;6275
                  |L1.18454|
004816  4281              CMP      r1,r0                 ;6275
004818  ddee              BLE      |L1.18424|
                  |L1.18458|
;;;6278   	   	}	
;;;6279   		 
;;;6280     	}
;;;6281   
;;;6282   
;;;6283   for(i=0;i<NUMIST;i++)
00481a  f04f0000          MOV      r0,#0
00481e  4984              LDR      r1,|L1.18992|
;;;6284        {
;;;6285        if(bps[i]._ist_blok_host_cnt!=0)
;;;6286             {
;;;6287             bps[i]._flags_tu=99;
004820  f04f0463          MOV      r4,#0x63
004824  f9b11000          LDRSH    r1,[r1,#0]            ;6183
004828  e00f              B        |L1.18506|
                  |L1.18474|
00482a  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6285
00482e  eb021200          ADD      r2,r2,r0,LSL #4       ;6285
004832  eb080282          ADD      r2,r8,r2,LSL #2       ;6285
004836  6bd3              LDR      r3,[r2,#0x3c]         ;6285
004838  b123              CBZ      r3,|L1.18500|
00483a  f882402c          STRB     r4,[r2,#0x2c]
;;;6288   	     bps[i]._ist_blok_host_cnt--;
00483e  f1a30301          SUB      r3,r3,#1
004842  63d3              STR      r3,[r2,#0x3c]
                  |L1.18500|
004844  f1000001          ADD      r0,r0,#1              ;6283
004848  b2c0              UXTB     r0,r0                 ;6283
                  |L1.18506|
00484a  4288              CMP      r0,r1                 ;6283
00484c  dbed              BLT      |L1.18474|
;;;6289             }
;;;6290        }
;;;6291   
;;;6292   
;;;6293   
;;;6294   
;;;6295   b1Hz_sh=0;
00484e  f88b6022          STRB     r6,[r11,#0x22]
;;;6296   
;;;6297   
;;;6298   num_of_wrks_bps=0;
004852  f88b601e          STRB     r6,[r11,#0x1e]
;;;6299   tempUS=0;
004856  f04f0200          MOV      r2,#0
;;;6300   for(i=0;i<NUMIST;i++)
00485a  4610              MOV      r0,r2
00485c  e015              B        |L1.18570|
                  |L1.18526|
;;;6301   	{
;;;6302   	if(bps[i]._state==bsWRK)
00485e  eb0003c0          ADD      r3,r0,r0,LSL #3
004862  eb031300          ADD      r3,r3,r0,LSL #4
004866  eb080383          ADD      r3,r8,r3,LSL #2
00486a  789c              LDRB     r4,[r3,#2]
00486c  2c01              CMP      r4,#1
00486e  d109              BNE      |L1.18564|
;;;6303   		{
;;;6304   		num_of_wrks_bps++;
004870  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
004874  f1040401          ADD      r4,r4,#1
004878  f88b401e          STRB     r4,[r11,#0x1e]
;;;6305   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00487c  69db              LDR      r3,[r3,#0x1c]
00487e  4293              CMP      r3,r2
004880  dd00              BLE      |L1.18564|
004882  b29a              UXTH     r2,r3
                  |L1.18564|
004884  f1000001          ADD      r0,r0,#1              ;6300
004888  b2c0              UXTB     r0,r0                 ;6300
                  |L1.18570|
00488a  4288              CMP      r0,r1                 ;6300
00488c  dbe7              BLT      |L1.18526|
;;;6306   		}
;;;6307   	}
;;;6308   Ubpsmax=tempUS;
00488e  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6309   
;;;6310   bPARALLEL_ENOUG=0;
004892  f88b602c          STRB     r6,[r11,#0x2c]
;;;6311   bPARALLEL_NOT_ENOUG=1;
004896  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6312   
;;;6313   for(i=0;i<NUMIST;i++)
00489a  f04f0000          MOV      r0,#0
;;;6314   	{
;;;6315   	if(bps[i]._Ti>=TSIGN)
00489e  4a68              LDR      r2,|L1.19008|
0048a0  f9b23000          LDRSH    r3,[r2,#0]
;;;6316   		{
;;;6317   		bPARALLEL_ENOUG=1;
;;;6318   		}
;;;6319   	if(bps[i]._Ti>=(TSIGN-5))
0048a4  f1a30405          SUB      r4,r3,#5
0048a8  e011              B        |L1.18638|
                  |L1.18602|
0048aa  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6315
0048ae  eb021200          ADD      r2,r2,r0,LSL #4       ;6315
0048b2  eb080282          ADD      r2,r8,r2,LSL #2       ;6315
0048b6  6a92              LDR      r2,[r2,#0x28]         ;6315
0048b8  429a              CMP      r2,r3                 ;6315
0048ba  db01              BLT      |L1.18624|
0048bc  f88ba02c          STRB     r10,[r11,#0x2c]       ;6317
                  |L1.18624|
0048c0  42a2              CMP      r2,r4
0048c2  db01              BLT      |L1.18632|
;;;6320   		{
;;;6321   		bPARALLEL_NOT_ENOUG=0;
0048c4  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.18632|
0048c8  f1000001          ADD      r0,r0,#1              ;6313
0048cc  b2c0              UXTB     r0,r0                 ;6313
                  |L1.18638|
0048ce  4288              CMP      r0,r1                 ;6313
0048d0  dbeb              BLT      |L1.18602|
;;;6322   		}
;;;6323   	}
;;;6324   
;;;6325   if(bPARALLEL_ENOUG==1)
0048d2  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
0048d6  2801              CMP      r0,#1
0048d8  d00a              BEQ      |L1.18672|
;;;6326   	{
;;;6327   	bPARALLEL=1;
;;;6328   	}
;;;6329   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0048da  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
0048de  2800              CMP      r0,#0
0048e0  d005              BEQ      |L1.18670|
0048e2  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
0048e6  2800              CMP      r0,#0
0048e8  d001              BEQ      |L1.18670|
;;;6330   	{
;;;6331   	bPARALLEL=0;
0048ea  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.18670|
;;;6332   	}
;;;6333   }
0048ee  e660              B        |L1.17842|
                  |L1.18672|
0048f0  f88ba02d          STRB     r10,[r11,#0x2d]       ;6327
0048f4  e65d              B        |L1.17842|
;;;6334   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6341   //-----------------------------------------------
;;;6342   void powerAntiAliasingHndl(void)
0048f6  b570              PUSH     {r4-r6,lr}
;;;6343   {
;;;6344   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0048f8  230a              MOVS     r3,#0xa
0048fa  4c53              LDR      r4,|L1.19016|
0048fc  4851              LDR      r0,|L1.19012|
;;;6345   	{
;;;6346   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6347   	if(powerSummaryCnt>=10)
;;;6348   		{
;;;6349   		power_summary=power_summary_tempo;
;;;6350   		}
;;;6351   	}
;;;6352   else powerSummaryCnt=0;
0048fe  2500              MOVS     r5,#0
004900  6822              LDR      r2,[r4,#0]            ;6344  ; power_summary_tempo_old
004902  6800              LDR      r0,[r0,#0]            ;6344  ; power_summary_tempo
004904  fbb2f6f3          UDIV     r6,r2,r3              ;6344
004908  fbb0f1f3          UDIV     r1,r0,r3              ;6344
00490c  4a4f              LDR      r2,|L1.19020|
00490e  42b1              CMP      r1,r6                 ;6344
004910  d10b              BNE      |L1.18730|
004912  7811              LDRB     r1,[r2,#0]            ;6346  ; powerSummaryCnt
004914  290f              CMP      r1,#0xf               ;6346
004916  d202              BCS      |L1.18718|
004918  f1010101          ADD      r1,r1,#1              ;6346
00491c  7011              STRB     r1,[r2,#0]            ;6346
                  |L1.18718|
00491e  7811              LDRB     r1,[r2,#0]            ;6347  ; powerSummaryCnt
004920  290a              CMP      r1,#0xa               ;6347
004922  d303              BCC      |L1.18732|
004924  494a              LDR      r1,|L1.19024|
004926  6008              STR      r0,[r1,#0]            ;6349  ; power_summary
004928  e000              B        |L1.18732|
                  |L1.18730|
00492a  7015              STRB     r5,[r2,#0]
                  |L1.18732|
;;;6353   power_summary_tempo_old=power_summary_tempo;
00492c  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6354   
;;;6355   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
00492e  4849              LDR      r0,|L1.19028|
004930  4c49              LDR      r4,|L1.19032|
004932  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
004936  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
00493a  fbb0f1f3          UDIV     r1,r0,r3
00493e  fbb2f3f3          UDIV     r3,r2,r3
;;;6356   	{
;;;6357   	if(powerCurrentCnt<15)powerCurrentCnt++;
004942  4a46              LDR      r2,|L1.19036|
004944  4299              CMP      r1,r3                 ;6355
004946  d10b              BNE      |L1.18784|
004948  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00494a  290f              CMP      r1,#0xf
00494c  d202              BCS      |L1.18772|
00494e  f1010101          ADD      r1,r1,#1
004952  7011              STRB     r1,[r2,#0]
                  |L1.18772|
;;;6358   	if(powerCurrentCnt>=10)
004954  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004956  290a              CMP      r1,#0xa
004958  d303              BCC      |L1.18786|
;;;6359   		{
;;;6360   		power_current=power_current_tempo;
00495a  4941              LDR      r1,|L1.19040|
00495c  8008              STRH     r0,[r1,#0]
00495e  e000              B        |L1.18786|
                  |L1.18784|
;;;6361   		}
;;;6362   	}
;;;6363   else powerCurrentCnt=0;
004960  7015              STRB     r5,[r2,#0]
                  |L1.18786|
;;;6364   power_current_tempo_old=power_current_tempo;
004962  8020              STRH     r0,[r4,#0]
;;;6365   }
004964  bd70              POP      {r4-r6,pc}
;;;6366   
                          ENDP

                  ips_current_average_hndl_ PROC
;;;6367   //-----------------------------------------------
;;;6368   void ips_current_average_hndl_(void)
004966  e92d43f0          PUSH     {r4-r9,lr}
;;;6369   {
00496a  b085              SUB      sp,sp,#0x14
;;;6370   if(++ica_timer_cnt>=10)
00496c  4c3d              LDR      r4,|L1.19044|
;;;6371   	{
;;;6372   	ica_timer_cnt=0;
;;;6373   	ica_plazma[0]++;
;;;6374   
;;;6375   	ica_my_current=bps_I;
;;;6376   
;;;6377   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=10)&&(ICA_EN==1))
00496e  4e3e              LDR      r6,|L1.19048|
004970  2500              MOVS     r5,#0                 ;6372
004972  7820              LDRB     r0,[r4,#0]            ;6370  ; ica_timer_cnt
004974  1c40              ADDS     r0,r0,#1              ;6370
004976  b2c0              UXTB     r0,r0                 ;6370
004978  7020              STRB     r0,[r4,#0]            ;6370
00497a  280a              CMP      r0,#0xa               ;6370
00497c  d340              BCC      |L1.18944|
00497e  7025              STRB     r5,[r4,#0]            ;6372
004980  f8dfc0e8          LDR      r12,|L1.19052|
004984  f89c0000          LDRB     r0,[r12,#0]           ;6373  ; ica_plazma
004988  f1000001          ADD      r0,r0,#1              ;6373
00498c  f88c0000          STRB     r0,[r12,#0]           ;6373
004990  4837              LDR      r0,|L1.19056|
004992  4938              LDR      r1,|L1.19060|
004994  f9b00000          LDRSH    r0,[r0,#0]            ;6375  ; bps_I
004998  8008              STRH     r0,[r1,#0]            ;6375
00499a  4937              LDR      r1,|L1.19064|
;;;6378   		{
;;;6379   		ica_plazma[1]++;
;;;6380   		ica_u_necc--;
00499c  f8df80dc          LDR      r8,|L1.19068|
0049a0  4662              MOV      r2,r12                ;6373
0049a2  4637              MOV      r7,r6                 ;6377
0049a4  f9b11000          LDRSH    r1,[r1,#0]            ;6377  ; ica_your_current
0049a8  7852              LDRB     r2,[r2,#1]            ;6379
0049aa  f9b83000          LDRSH    r3,[r8,#0]
0049ae  f9b77000          LDRSH    r7,[r7,#0]            ;6377
0049b2  4288              CMP      r0,r1                 ;6377
0049b4  dd06              BLE      |L1.18884|
0049b6  eba00901          SUB      r9,r0,r1              ;6377
0049ba  f1b90f0a          CMP      r9,#0xa               ;6377
0049be  db01              BLT      |L1.18884|
0049c0  2f01              CMP      r7,#1                 ;6377
0049c2  d007              BEQ      |L1.18900|
                  |L1.18884|
;;;6381   		}
;;;6382   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=10)&&(ICA_EN==1))
0049c4  4288              CMP      r0,r1
0049c6  da16              BGE      |L1.18934|
0049c8  1a08              SUBS     r0,r1,r0
0049ca  280a              CMP      r0,#0xa
0049cc  db13              BLT      |L1.18934|
0049ce  2f01              CMP      r7,#1
0049d0  d009              BEQ      |L1.18918|
0049d2  e010              B        |L1.18934|
                  |L1.18900|
0049d4  f1020201          ADD      r2,r2,#1              ;6379
0049d8  f88c2001          STRB     r2,[r12,#1]           ;6379
0049dc  f1a30301          SUB      r3,r3,#1              ;6380
0049e0  f8a83000          STRH     r3,[r8,#0]            ;6380
0049e4  e007              B        |L1.18934|
                  |L1.18918|
;;;6383   		{
;;;6384   		ica_plazma[1]--;
0049e6  f1a20201          SUB      r2,r2,#1
0049ea  f88c2001          STRB     r2,[r12,#1]
;;;6385   		ica_u_necc++;
0049ee  f1030301          ADD      r3,r3,#1
0049f2  f8a83000          STRH     r3,[r8,#0]
                  |L1.18934|
;;;6386   		}
;;;6387   	gran(&ica_u_necc,-20,20);
0049f6  2214              MOVS     r2,#0x14
0049f8  4251              RSBS     r1,r2,#0
0049fa  4820              LDR      r0,|L1.19068|
0049fc  f7fffffe          BL       gran
                  |L1.18944|
;;;6388   	}
;;;6389   
;;;6390   if((ica_timer_cnt==8)&&(ICA_EN==1))
004a00  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
;;;6391   	{
;;;6392   	char modbus_buff[20],i;
;;;6393   	short crc_temp;
;;;6394   
;;;6395   	modbus_buff[0] = ICA_MODBUS_ADDRESS;
004a02  f8df807c          LDR      r8,|L1.19072|
;;;6396   	modbus_buff[1] = 4;
;;;6397   	modbus_buff[2] = 0;
;;;6398   	modbus_buff[3] = 2;
;;;6399   	modbus_buff[4] = 0;	
;;;6400   	modbus_buff[5] = 1;
;;;6401   
;;;6402   	crc_temp= CRC16_2(modbus_buff,6);
;;;6403   
;;;6404   	modbus_buff[6]= (char)crc_temp;
;;;6405   	modbus_buff[7]= (char)(crc_temp>>8);
;;;6406   
;;;6407   
;;;6408   
;;;6409   	if(ICA_CH==0)
004a06  4f1f              LDR      r7,|L1.19076|
004a08  2808              CMP      r0,#8                 ;6390
004a0a  d158              BNE      |L1.19134|
004a0c  8830              LDRH     r0,[r6,#0]            ;6390  ; ICA_EN
004a0e  2801              CMP      r0,#1                 ;6390
004a10  d155              BNE      |L1.19134|
004a12  f8b80000          LDRH     r0,[r8,#0]            ;6395  ; ICA_MODBUS_ADDRESS
004a16  f88d0000          STRB     r0,[sp,#0]            ;6395
004a1a  f04f0004          MOV      r0,#4                 ;6396
004a1e  f88d0001          STRB     r0,[sp,#1]            ;6396
004a22  e031              B        |L1.19080|
                  |L1.18980|
                          DCD      ||area_number.18||
                  |L1.18984|
                          DCD      bps
                  |L1.18988|
                          DCD      mess_data
                  |L1.18992|
                          DCD      NUMIST
                  |L1.18996|
                          DCD      num_necc
                  |L1.19000|
                          DCD      main_1Hz_cnt
                  |L1.19004|
                          DCD      ipsBlckStat
                  |L1.19008|
                          DCD      TSIGN
                  |L1.19012|
                          DCD      power_summary_tempo
                  |L1.19016|
                          DCD      power_summary_tempo_old
                  |L1.19020|
                          DCD      powerSummaryCnt
                  |L1.19024|
                          DCD      power_summary
                  |L1.19028|
                          DCD      power_current_tempo
                  |L1.19032|
                          DCD      power_current_tempo_old
                  |L1.19036|
                          DCD      powerCurrentCnt
                  |L1.19040|
                          DCD      power_current
                  |L1.19044|
                          DCD      ica_timer_cnt
                  |L1.19048|
                          DCD      ICA_EN
                  |L1.19052|
                          DCD      ica_plazma
                  |L1.19056|
                          DCD      bps_I
                  |L1.19060|
                          DCD      ica_my_current
                  |L1.19064|
                          DCD      ica_your_current
                  |L1.19068|
                          DCD      ica_u_necc
                  |L1.19072|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19076|
                          DCD      ICA_CH
                  |L1.19080|
004a88  f88d5002          STRB     r5,[sp,#2]            ;6397
004a8c  f04f0002          MOV      r0,#2                 ;6398
004a90  f88d0003          STRB     r0,[sp,#3]            ;6398
004a94  f88d5004          STRB     r5,[sp,#4]            ;6399
004a98  f04f0001          MOV      r0,#1                 ;6400
004a9c  f88d0005          STRB     r0,[sp,#5]            ;6400
004aa0  f04f0106          MOV      r1,#6                 ;6402
004aa4  4668              MOV      r0,sp                 ;6402
004aa6  f7fffffe          BL       CRC16_2
004aaa  f88d0006          STRB     r0,[sp,#6]            ;6404
004aae  ea4f2020          ASR      r0,r0,#8              ;6405
004ab2  f88d0007          STRB     r0,[sp,#7]            ;6405
004ab6  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004aba  b3e8              CBZ      r0,|L1.19256|
;;;6410   		{
;;;6411   		for (i=0;i<8;i++)
;;;6412   			{
;;;6413   			putchar_sc16is700(modbus_buff[i]);
;;;6414   			}
;;;6415   		}
;;;6416   	else if(ICA_CH==1)
004abc  2801              CMP      r0,#1
                  |L1.19134|
;;;6417   		{
;;;6418   	/*	static U8 rem_IP[4];
;;;6419   		rem_IP[0]=ICA_MODBUS_TCP_IP1;
;;;6420   		rem_IP[1]=ICA_MODBUS_TCP_IP2;
;;;6421   		rem_IP[2]=ICA_MODBUS_TCP_IP3;
;;;6422   		rem_IP[3]=ICA_MODBUS_TCP_IP4;*/
;;;6423     		//tcp_soc_avg = tcp_get_socket (TCP_TYPE_CLIENT, 0, 30, tcp_callback);
;;;6424     		if (tcp_soc_avg != 0) 
;;;6425   			{
;;;6426       		
;;;6427   			//tcp_connect_stat=0;
;;;6428       		//tcp_connect (tcp_soc_avg, rem_IP, 502, 1000);
;;;6429   			/*while(!tcp_connect_stat)
;;;6430   				{
;;;6431   				}*/
;;;6432   			//delay_us(500);
;;;6433   			//tcp_close(tcp_soc_avg);
;;;6434   
;;;6435   			}
;;;6436   		}
;;;6437   	}
;;;6438   
;;;6439   if((ica_timer_cnt==3)&&(ICA_EN==1))
;;;6440   	{
;;;6441   	//if(tcp_connect_stat)
;;;6442   		{
;;;6443   		//tcp_close(tcp_soc_avg);
;;;6444   		//tcp_connect_stat=3;
;;;6445   		}
;;;6446   	}
;;;6447   
;;;6448   if((main_kb_cnt==(TBAT*60)-21)&&(ICA_EN==1))
004abe  48ff              LDR      r0,|L1.20156|
004ac0  f06f0214          MVN      r2,#0x14
004ac4  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004ac8  ebc01100          RSB      r1,r0,r0,LSL #4
004acc  eb020181          ADD      r1,r2,r1,LSL #2
004ad0  4afb              LDR      r2,|L1.20160|
004ad2  f9b22052          LDRSH    r2,[r2,#0x52]  ; main_kb_cnt
004ad6  4291              CMP      r1,r2
004ad8  d134              BNE      |L1.19268|
004ada  8831              LDRH     r1,[r6,#0]  ; ICA_EN
004adc  2901              CMP      r1,#1
004ade  d131              BNE      |L1.19268|
;;;6449   	{
;;;6450   	char modbus_buff[20],i;
;;;6451   	short crc_temp;
;;;6452   
;;;6453   	modbus_buff[0] = ICA_MODBUS_ADDRESS;
004ae0  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
004ae4  f88d1000          STRB     r1,[sp,#0]
;;;6454   	modbus_buff[1] = 6;
004ae8  f04f0106          MOV      r1,#6
004aec  f88d1001          STRB     r1,[sp,#1]
;;;6455   	modbus_buff[2] = 0;
004af0  f88d5002          STRB     r5,[sp,#2]
;;;6456   	modbus_buff[3] = 30;
004af4  f04f011e          MOV      r1,#0x1e
004af8  f88d1003          STRB     r1,[sp,#3]
;;;6457   	modbus_buff[4] = (char)(TBAT/256);	
004afc  ea4f71e0          ASR      r1,r0,#31
004b00  eb006111          ADD      r1,r0,r1,LSR #24
004b04  ea4f2221          ASR      r2,r1,#8
004b08  f88d2004          STRB     r2,[sp,#4]
;;;6458   	modbus_buff[5] = (char)(TBAT%256);
004b0c  f88d0005          STRB     r0,[sp,#5]
;;;6459   
;;;6460   	crc_temp= CRC16_2(modbus_buff,6);
004b10  f04f0106          MOV      r1,#6
004b14  4668              MOV      r0,sp
004b16  f7fffffe          BL       CRC16_2
;;;6461   
;;;6462   	modbus_buff[6]= (char)crc_temp;
004b1a  f88d0006          STRB     r0,[sp,#6]
;;;6463   	modbus_buff[7]= (char)(crc_temp>>8);
004b1e  ea4f2020          ASR      r0,r0,#8
004b22  f88d0007          STRB     r0,[sp,#7]
;;;6464   
;;;6465   	if(ICA_CH==0)
004b26  8838              LDRH     r0,[r7,#0]  ; ICA_CH
004b28  2800              CMP      r0,#0
004b2a  d10b              BNE      |L1.19268|
;;;6466   		{
;;;6467   		for (i=0;i<8;i++)
004b2c  4604              MOV      r4,r0
004b2e  466d              MOV      r5,sp                 ;6450
                  |L1.19248|
;;;6468   			{
;;;6469   			putchar_sc16is700(modbus_buff[i]);
004b30  5d28              LDRB     r0,[r5,r4]
004b32  f7fffffe          BL       putchar_sc16is700
004b36  e000              B        |L1.19258|
                  |L1.19256|
004b38  e007              B        |L1.19274|
                  |L1.19258|
004b3a  f1040401          ADD      r4,r4,#1              ;6467
004b3e  b2e4              UXTB     r4,r4                 ;6467
004b40  2c08              CMP      r4,#8                 ;6467
004b42  d3f5              BCC      |L1.19248|
                  |L1.19268|
;;;6470   			}
;;;6471   		}
;;;6472   	}
;;;6473   
;;;6474   }
004b44  b005              ADD      sp,sp,#0x14
004b46  e8bd83f0          POP      {r4-r9,pc}
                  |L1.19274|
004b4a  f04f0400          MOV      r4,#0                 ;6411
004b4e  46e9              MOV      r9,sp                 ;6392
                  |L1.19280|
004b50  f8190004          LDRB     r0,[r9,r4]            ;6413
004b54  f7fffffe          BL       putchar_sc16is700
004b58  f1040401          ADD      r4,r4,#1              ;6411
004b5c  b2e4              UXTB     r4,r4                 ;6411
004b5e  2c08              CMP      r4,#8                 ;6411
004b60  d3f6              BCC      |L1.19280|
004b62  e7ac              B        |L1.19134|
;;;6475   
                          ENDP

                  energometr_hndl PROC
;;;6476   //-----------------------------------------------
;;;6477   void energometr_hndl(void)
004b64  4770              BX       lr
;;;6478   {
;;;6479   //2F 3F 21 0D 0A 
;;;6480   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6481   //2F 3F 21 0D 0A 
;;;6482   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6483   //06 30 35 31 0D 0A 
;;;6484   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6485   
;;;6486   #ifdef CE102M_ENABLED
;;;6487   /*if
;;;6488   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6489   
;;;6490   if(read_power_cnt_main_cnt)
;;;6491   	{
;;;6492   	read_power_cnt_main_cnt--;
;;;6493   	if(read_power_cnt_main_cnt==0)
;;;6494   		{
;;;6495   		rx_read_power_cnt_phase=0;
;;;6496   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6497   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6498   		else bENERGOMETR_UIP=0;
;;;6499   		//bENERGOMETR_UIP=2;
;;;6500   		}
;;;6501   	}
;;;6502   
;;;6503   if (rx_read_power_cnt_phase==0)
;;;6504   	{
;;;6505   	char command_with_crc[20];
;;;6506   	
;;;6507      	command_with_crc[0]=0xaf;  // /
;;;6508   	command_with_crc[1]=0x3f;  // ?
;;;6509   	command_with_crc[2]=0x21;  // !
;;;6510   	command_with_crc[3]=0x8d;  // CR
;;;6511   	command_with_crc[4]=0x0a;  // LF
;;;6512   
;;;6513   	uart_out__adr1(command_with_crc,5);
;;;6514   
;;;6515   	rx_wr_index1=0;
;;;6516   	rx_read_power_cnt_phase=1;
;;;6517   
;;;6518   	read_power_cnt_main_cnt=50;
;;;6519   	}
;;;6520   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6521   	{
;;;6522   	char command_with_crc[20];
;;;6523   	
;;;6524   	command_with_crc[0]=0x06;  //  
;;;6525   	command_with_crc[1]=0x30;  // 0
;;;6526   	command_with_crc[2]=0x35;  // 5
;;;6527   	command_with_crc[3]=0xb1;  // 1
;;;6528   	command_with_crc[4]=0x8d;  // CR
;;;6529   	command_with_crc[5]=0x0a;  // LF
;;;6530   	
;;;6531   	uart_out__adr1(command_with_crc,6);
;;;6532   	
;;;6533   	rx_wr_index1=0;
;;;6534   	rx_read_power_cnt_phase=3;
;;;6535   
;;;6536   	read_power_cnt_main_cnt=50;
;;;6537   	}  
;;;6538   
;;;6539   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6540   	{
;;;6541   	char command_with_crc[20];
;;;6542   	
;;;6543   	command_with_crc[0]=0x81;  //  
;;;6544   	command_with_crc[1]=0xd2;  // 0
;;;6545   	command_with_crc[2]=0xb1;  // 5
;;;6546   	command_with_crc[3]=0x82;  // 1
;;;6547   	command_with_crc[4]=0x56;  // CR
;;;6548   	command_with_crc[5]=0xcf;  // LF
;;;6549   	command_with_crc[6]=0xcc;  // 1
;;;6550   	command_with_crc[7]=0xd4;  // CR
;;;6551   	command_with_crc[8]=0x41;  // LF
;;;6552   	command_with_crc[9]=0x28;  // 1
;;;6553   	command_with_crc[10]=0xa9;  // CR
;;;6554   	command_with_crc[11]=0x03;  // LF
;;;6555   	command_with_crc[12]=0x5f;  // LF
;;;6556   		
;;;6557   	uart_out__adr1(command_with_crc,13);
;;;6558   	
;;;6559   	rx_wr_index1=0;
;;;6560   	rx_read_power_cnt_phase=5;
;;;6561   
;;;6562   	read_power_cnt_main_cnt=50;
;;;6563   	}  
;;;6564   
;;;6565   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6566   	{
;;;6567   	char command_with_crc[20];
;;;6568   	
;;;6569   	command_with_crc[0]=0x81;  //  
;;;6570   	command_with_crc[1]=0xd2;  // 0
;;;6571   	command_with_crc[2]=0xb1;  // 5
;;;6572   	command_with_crc[3]=0x82;  // 1
;;;6573   	command_with_crc[4]=0xc3;  // CR
;;;6574   	command_with_crc[5]=0x55;  // LF
;;;6575   	command_with_crc[6]=0xd2;  // 1
;;;6576   	command_with_crc[7]=0xd2;  // CR
;;;6577   	command_with_crc[8]=0xc5;  // LF
;;;6578   	command_with_crc[9]=0x28;  // 1
;;;6579   	command_with_crc[10]=0xa9;  // CR
;;;6580   	command_with_crc[11]=0x03;  // LF
;;;6581   	command_with_crc[12]=0x5a;  // LF
;;;6582   		
;;;6583   	uart_out__adr1(command_with_crc,13);
;;;6584   	
;;;6585   	rx_wr_index1=0;
;;;6586   	rx_read_power_cnt_phase=9;
;;;6587   
;;;6588   	read_power_cnt_main_cnt=50;
;;;6589   	}  
;;;6590   
;;;6591   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6592   	{
;;;6593   	char command_with_crc[20];
;;;6594   	
;;;6595   	command_with_crc[0]=0x81;  //  		01
;;;6596   	command_with_crc[1]=0xd2;  // R		52
;;;6597   	command_with_crc[2]=0xb1;  // 1		31
;;;6598   	command_with_crc[3]=0x82;  // 		02
;;;6599   	command_with_crc[4]=0x50;  // P		50
;;;6600   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6601   	command_with_crc[6]=0xd7;  // W		57
;;;6602   	command_with_crc[7]=0xc5;  // E		45
;;;6603   	command_with_crc[8]=0x50;  // P		50
;;;6604   	command_with_crc[9]=0x28;  // (		28
;;;6605   	command_with_crc[10]=0xa9;  // )	29
;;;6606   	command_with_crc[11]=0x03;  // 		03
;;;6607   	command_with_crc[12]=0xe4;  // d	64
;;;6608   		
;;;6609   	uart_out__adr1(command_with_crc,13);
;;;6610   	
;;;6611   	rx_wr_index1=0;
;;;6612   	rx_read_power_cnt_phase=21;
;;;6613   
;;;6614   	read_power_cnt_main_cnt=50;
;;;6615   	}  
;;;6616   
;;;6617   
;;;6618   #endif
;;;6619   }
;;;6620   
                          ENDP

                  ips_current_average_hndl PROC
;;;6621   //-----------------------------------------------
;;;6622   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004b66  e92d4ff0          PUSH     {r4-r11,lr}
;;;6623   {
004b6a  b089              SUB      sp,sp,#0x24
;;;6624   
;;;6625   if(++ica_timer_cnt>=10) 
004b6c  4ed5              LDR      r6,|L1.20164|
;;;6626   	{
;;;6627   	ica_timer_cnt=0;
004b6e  2400              MOVS     r4,#0
004b70  7830              LDRB     r0,[r6,#0]            ;6625  ; ica_timer_cnt
004b72  1c40              ADDS     r0,r0,#1              ;6625
004b74  b2c0              UXTB     r0,r0                 ;6625
004b76  7030              STRB     r0,[r6,#0]            ;6625
004b78  280a              CMP      r0,#0xa               ;6625
004b7a  d300              BCC      |L1.19326|
004b7c  7034              STRB     r4,[r6,#0]
                  |L1.19326|
;;;6628   	}
;;;6629   
;;;6630   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004b7e  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004b80  4fd1              LDR      r7,|L1.20168|
;;;6631   	{
;;;6632   	
;;;6633   	ica_plazma[0]++;
;;;6634   
;;;6635   	ica_my_current=bps_I;
;;;6636   
;;;6637   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004b82  f8dfb348          LDR      r11,|L1.20172|
004b86  4dce              LDR      r5,|L1.20160|
004b88  bbe8              CBNZ     r0,|L1.19462|
004b8a  7fa8              LDRB     r0,[r5,#0x1e]         ;6630  ; num_of_wrks_bps
004b8c  b3d8              CBZ      r0,|L1.19462|
004b8e  f8950023          LDRB     r0,[r5,#0x23]         ;6630  ; spc_stat
004b92  7969              LDRB     r1,[r5,#5]            ;6630  ; vz1_stat
004b94  4308              ORRS     r0,r0,r1              ;6630
004b96  79e9              LDRB     r1,[r5,#7]            ;6630  ; vz2_stat
004b98  4308              ORRS     r0,r0,r1              ;6630
004b9a  7839              LDRB     r1,[r7,#0]            ;6630  ; sp_ch_stat
004b9c  4308              ORRS     r0,r0,r1              ;6630
004b9e  d14c              BNE      |L1.19514|
004ba0  f8df932c          LDR      r9,|L1.20176|
004ba4  f8990000          LDRB     r0,[r9,#0]            ;6633  ; ica_plazma
004ba8  f1000001          ADD      r0,r0,#1              ;6633
004bac  f8890000          STRB     r0,[r9,#0]            ;6633
004bb0  48c8              LDR      r0,|L1.20180|
004bb2  f9b01000          LDRSH    r1,[r0,#0]            ;6635  ; bps_I
004bb6  48c8              LDR      r0,|L1.20184|
004bb8  8001              STRH     r1,[r0,#0]            ;6635
004bba  48c8              LDR      r0,|L1.20188|
;;;6638   		{
;;;6639   		ica_plazma[1]++;
;;;6640   		ica_u_necc--;
004bbc  f8dfa320          LDR      r10,|L1.20192|
004bc0  f9b02000          LDRSH    r2,[r0,#0]            ;6637  ; ica_your_current
004bc4  4648              MOV      r0,r9                 ;6633
004bc6  f9bac000          LDRSH    r12,[r10,#0]
004bca  7843              LDRB     r3,[r0,#1]            ;6639
004bcc  48c5              LDR      r0,|L1.20196|
004bce  4291              CMP      r1,r2                 ;6637
004bd0  f9b08000          LDRSH    r8,[r0,#0]            ;6637
004bd4  4658              MOV      r0,r11                ;6637
004bd6  f9b00000          LDRSH    r0,[r0,#0]            ;6637
004bda  dd15              BLE      |L1.19464|
004bdc  eba10e02          SUB      lr,r1,r2              ;6637
004be0  f1be0f05          CMP      lr,#5                 ;6637
004be4  db10              BLT      |L1.19464|
004be6  2801              CMP      r0,#1                 ;6637
004be8  d004              BEQ      |L1.19444|
004bea  2802              CMP      r0,#2                 ;6637
004bec  d10c              BNE      |L1.19464|
004bee  f1b80f05          CMP      r8,#5                 ;6637
004bf2  dd09              BLE      |L1.19464|
                  |L1.19444|
004bf4  f1030301          ADD      r3,r3,#1              ;6639
004bf8  f8893001          STRB     r3,[r9,#1]            ;6639
004bfc  f1ac0c01          SUB      r12,r12,#1
004c00  f8aac000          STRH     r12,[r10,#0]
004c04  e014              B        |L1.19504|
                  |L1.19462|
004c06  e018              B        |L1.19514|
                  |L1.19464|
;;;6641   		}
;;;6642   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004c08  4291              CMP      r1,r2
004c0a  da11              BGE      |L1.19504|
004c0c  1a51              SUBS     r1,r2,r1
004c0e  2905              CMP      r1,#5
004c10  db0e              BLT      |L1.19504|
004c12  2801              CMP      r0,#1
004c14  d004              BEQ      |L1.19488|
004c16  2802              CMP      r0,#2
004c18  d10a              BNE      |L1.19504|
004c1a  f1b80f05          CMP      r8,#5
004c1e  dd07              BLE      |L1.19504|
                  |L1.19488|
;;;6643   		{
;;;6644   		ica_plazma[1]--;
004c20  f1a30301          SUB      r3,r3,#1
004c24  f8893001          STRB     r3,[r9,#1]
;;;6645   		ica_u_necc++;
004c28  f10c0c01          ADD      r12,r12,#1
004c2c  f8aac000          STRH     r12,[r10,#0]
                  |L1.19504|
;;;6646   		}
;;;6647   	gran(&ica_u_necc,-100,100);
004c30  2264              MOVS     r2,#0x64
004c32  4251              RSBS     r1,r2,#0
004c34  48aa              LDR      r0,|L1.20192|
004c36  f7fffffe          BL       gran
                  |L1.19514|
;;;6648   	}
;;;6649   
;;;6650   
;;;6651   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004c3a  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
004c3e  2801              CMP      r0,#1
004c40  d169              BNE      |L1.19734|
004c42  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
004c46  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004c48  4308              ORRS     r0,r0,r1
004c4a  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004c4c  4308              ORRS     r0,r0,r1
004c4e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004c50  4308              ORRS     r0,r0,r1
004c52  d160              BNE      |L1.19734|
004c54  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
004c56  2800              CMP      r0,#0
004c58  d05d              BEQ      |L1.19734|
;;;6652   	{
;;;6653   	
;;;6654   //	ica_connect_cnt++;
;;;6655   
;;;6656   	if(ica_timer_cnt==8)
004c5a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6657   		{
;;;6658   		char modbus_buff[20],i;
;;;6659   		short crc_temp;
;;;6660   	
;;;6661   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004c5c  4ba2              LDR      r3,|L1.20200|
;;;6662   		modbus_buff[1] = 4;
;;;6663   		modbus_buff[2] = 0;
;;;6664   		modbus_buff[3] = 2;
;;;6665   		modbus_buff[4] = 0;	
;;;6666   		modbus_buff[5] = 1;
;;;6667   	
;;;6668   		crc_temp= CRC16_2(modbus_buff,6);
;;;6669   	
;;;6670   		modbus_buff[6]= (char)crc_temp;
;;;6671   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6672   	
;;;6673   		if(ICA_CH==0)
004c5e  4fa3              LDR      r7,|L1.20204|
004c60  2808              CMP      r0,#8                 ;6656
004c62  d05b              BEQ      |L1.19740|
;;;6674   			{
;;;6675   			for (i=0;i<8;i++)
;;;6676   				{
;;;6677   				putchar_sc16is700(modbus_buff[i]);
;;;6678   				}
;;;6679   			}
;;;6680   		else if(ICA_CH==2)
;;;6681   			{
;;;6682   			uart_out1 (5,4,0,2,0,1,0);
;;;6683   			}
;;;6684   		}
;;;6685   	else
;;;6686   		{
;;;6687   		char modbus_buff[20],i;
;;;6688   		short crc_temp, tempSSSS;
;;;6689   
;;;6690   		tempSSSS=cntrl_stat_old;
004c64  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6691   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004c68  4894              LDR      r0,|L1.20156|
004c6a  f06f0214          MVN      r2,#0x14
004c6e  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004c72  ebc01100          RSB      r1,r0,r0,LSL #4
004c76  eb020c81          ADD      r12,r2,r1,LSL #2
004c7a  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
004c7e  4594              CMP      r12,r2
004c80  d00b              BEQ      |L1.19610|
004c82  f06f0c13          MVN      r12,#0x13
004c86  eb0c0c81          ADD      r12,r12,r1,LSL #2
004c8a  4594              CMP      r12,r2
004c8c  d005              BEQ      |L1.19610|
004c8e  f06f0c12          MVN      r12,#0x12
004c92  eb0c0181          ADD      r1,r12,r1,LSL #2
004c96  4291              CMP      r1,r2
004c98  d101              BNE      |L1.19614|
                  |L1.19610|
004c9a  f4404680          ORR      r6,r0,#0x4000
                  |L1.19614|
;;;6692   
;;;6693   
;;;6694   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004c9e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004ca0  f88d0010          STRB     r0,[sp,#0x10]
;;;6695   		modbus_buff[1] = 6;
004ca4  f04f0006          MOV      r0,#6
004ca8  f88d0011          STRB     r0,[sp,#0x11]
;;;6696   		modbus_buff[2] = 0;
004cac  f88d4012          STRB     r4,[sp,#0x12]
;;;6697   		modbus_buff[3] = 100;
004cb0  f04f0064          MOV      r0,#0x64
004cb4  f88d0013          STRB     r0,[sp,#0x13]
;;;6698   		modbus_buff[4] = (char)(tempSSSS/256);	
004cb8  ea4f70e6          ASR      r0,r6,#31
004cbc  eb066010          ADD      r0,r6,r0,LSR #24
004cc0  ea4f2120          ASR      r1,r0,#8
004cc4  f88d1014          STRB     r1,[sp,#0x14]
;;;6699   		modbus_buff[5] = (char)(tempSSSS%256);
004cc8  4630              MOV      r0,r6
004cca  f88d0015          STRB     r0,[sp,#0x15]
;;;6700   	
;;;6701   		crc_temp= CRC16_2(modbus_buff,6);
004cce  f04f0106          MOV      r1,#6
004cd2  a804              ADD      r0,sp,#0x10
004cd4  f7fffffe          BL       CRC16_2
;;;6702   	
;;;6703   		modbus_buff[6]= (char)crc_temp;
004cd8  f88d0016          STRB     r0,[sp,#0x16]
;;;6704   		modbus_buff[7]= (char)(crc_temp>>8);
004cdc  ea4f2020          ASR      r0,r0,#8
004ce0  f88d0017          STRB     r0,[sp,#0x17]
;;;6705   	
;;;6706   		crc_temp= CRC16_2(modbus_buff,6);
004ce4  f04f0106          MOV      r1,#6
004ce8  a804              ADD      r0,sp,#0x10
004cea  f7fffffe          BL       CRC16_2
;;;6707   	
;;;6708   		plazma_ica1=tempSSSS;
004cee  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6709   		if(ICA_CH==0)
004cf2  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004cf6  b3f0              CBZ      r0,|L1.19830|
;;;6710   			{
;;;6711   			for (i=0;i<8;i++)
;;;6712   				{
;;;6713   				putchar_sc16is700(modbus_buff[i]);
;;;6714   				}
;;;6715   			}
;;;6716   		else if(ICA_CH==2)
004cf8  2802              CMP      r0,#2
004cfa  d10c              BNE      |L1.19734|
;;;6717   			{
;;;6718   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004cfc  f89d0015          LDRB     r0,[sp,#0x15]
004d00  f89d1014          LDRB     r1,[sp,#0x14]
004d04  e9cd0401          STRD     r0,r4,[sp,#4]
004d08  9100              STR      r1,[sp,#0]
004d0a  2364              MOVS     r3,#0x64
004d0c  2200              MOVS     r2,#0
004d0e  2106              MOVS     r1,#6
004d10  2005              MOVS     r0,#5
004d12  f7fffffe          BL       uart_out1
                  |L1.19734|
;;;6719   			}
;;;6720   		}
;;;6721   	}
;;;6722   }
004d16  b009              ADD      sp,sp,#0x24
004d18  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.19740|
004d1c  8818              LDRH     r0,[r3,#0]            ;6661  ; ICA_MODBUS_ADDRESS
004d1e  f88d0010          STRB     r0,[sp,#0x10]         ;6661
004d22  f04f0004          MOV      r0,#4                 ;6662
004d26  f88d0011          STRB     r0,[sp,#0x11]         ;6662
004d2a  f88d4012          STRB     r4,[sp,#0x12]         ;6663
004d2e  f04f0002          MOV      r0,#2                 ;6664
004d32  f88d0013          STRB     r0,[sp,#0x13]         ;6664
004d36  f88d4014          STRB     r4,[sp,#0x14]         ;6665
004d3a  f04f0501          MOV      r5,#1                 ;6666
004d3e  f88d5015          STRB     r5,[sp,#0x15]         ;6666
004d42  f04f0106          MOV      r1,#6                 ;6668
004d46  a804              ADD      r0,sp,#0x10           ;6668
004d48  f7fffffe          BL       CRC16_2
004d4c  f88d0016          STRB     r0,[sp,#0x16]         ;6670
004d50  ea4f2020          ASR      r0,r0,#8              ;6671
004d54  f88d0017          STRB     r0,[sp,#0x17]         ;6671
004d58  f9b70000          LDRSH    r0,[r7,#0]            ;6673  ; ICA_CH
004d5c  b160              CBZ      r0,|L1.19832|
004d5e  2802              CMP      r0,#2                 ;6680
004d60  d1d9              BNE      |L1.19734|
004d62  e9cd4500          STRD     r4,r5,[sp,#0]         ;6682
004d66  2302              MOVS     r3,#2                 ;6682
004d68  2200              MOVS     r2,#0                 ;6682
004d6a  2104              MOVS     r1,#4                 ;6682
004d6c  2005              MOVS     r0,#5                 ;6682
004d6e  9402              STR      r4,[sp,#8]            ;6682
004d70  f7fffffe          BL       uart_out1
004d74  e7cf              B        |L1.19734|
                  |L1.19830|
004d76  e00b              B        |L1.19856|
                  |L1.19832|
004d78  f04f0400          MOV      r4,#0                 ;6675
004d7c  ad04              ADD      r5,sp,#0x10           ;6658
                  |L1.19838|
004d7e  5d28              LDRB     r0,[r5,r4]            ;6677
004d80  f7fffffe          BL       putchar_sc16is700
004d84  f1040401          ADD      r4,r4,#1              ;6675
004d88  b2e4              UXTB     r4,r4                 ;6675
004d8a  2c08              CMP      r4,#8                 ;6675
004d8c  d3f7              BCC      |L1.19838|
004d8e  e7c2              B        |L1.19734|
                  |L1.19856|
004d90  f04f0400          MOV      r4,#0                 ;6711
004d94  ad04              ADD      r5,sp,#0x10           ;6687
                  |L1.19862|
004d96  5d28              LDRB     r0,[r5,r4]            ;6713
004d98  f7fffffe          BL       putchar_sc16is700
004d9c  f1040401          ADD      r4,r4,#1              ;6711
004da0  b2e4              UXTB     r4,r4                 ;6711
004da2  2c08              CMP      r4,#8                 ;6711
004da4  d3f7              BCC      |L1.19862|
004da6  e7b6              B        |L1.19734|
;;;6723   
                          ENDP

                  inv_drv PROC
;;;6724   //-----------------------------------------------
;;;6725   void inv_drv(char in)
004da8  b570              PUSH     {r4-r6,lr}
;;;6726   {
004daa  4604              MOV      r4,r0
;;;6727   char temp,temp_;
;;;6728   //if (bps[in]._device!=dINV) return;
;;;6729   //plazma_inv[4];
;;;6730   
;;;6731   gran_char((signed char*)&first_inv_slot,1,7);
004dac  f04f0207          MOV      r2,#7
004db0  f04f0101          MOV      r1,#1
004db4  484e              LDR      r0,|L1.20208|
004db6  f7fffffe          BL       gran_char
;;;6732   
;;;6733   
;;;6734   temp=inv[in]._flags_tm_old^inv[in]._flags_tm;
004dba  484e              LDR      r0,|L1.20212|
004dbc  eb040144          ADD      r1,r4,r4,LSL #1
004dc0  eb001541          ADD      r5,r0,r1,LSL #5
004dc4  f8950047          LDRB     r0,[r5,#0x47]
004dc8  f8951046          LDRB     r1,[r5,#0x46]
004dcc  ea800001          EOR      r0,r0,r1
;;;6735   if(temp)plazma_inv[1] =temp;
004dd0  4a3b              LDR      r2,|L1.20160|
004dd2  f10202bc          ADD      r2,r2,#0xbc
004dd6  b100              CBZ      r0,|L1.19930|
004dd8  7050              STRB     r0,[r2,#1]
                  |L1.19930|
;;;6736   
;;;6737   temp_=inv[in]._flags_tm&temp;
004dda  ea010100          AND      r1,r1,r0
;;;6738   if(temp_)plazma_inv[2] =temp_;
004dde  b101              CBZ      r1,|L1.19938|
004de0  7091              STRB     r1,[r2,#2]
                  |L1.19938|
;;;6739   
;;;6740   if( (temp&(1<<0)) && (temp_&(1<<0)) ) 
004de2  ea000301          AND      r3,r0,r1
004de6  07db              LSLS     r3,r3,#31
004de8  d027              BEQ      |L1.20026|
;;;6741   	{
;;;6742   	plazma_inv[3]++;
004dea  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
004dec  f1000001          ADD      r0,r0,#1
004df0  70d0              STRB     r0,[r2,#3]
;;;6743   	if(in==0)snmp_trap_send("Invertor #1 Alarm, overload",14,1,1);
004df2  b134              CBZ      r4,|L1.19970|
;;;6744   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, overload",14,2,1);
004df4  2c01              CMP      r4,#1
004df6  d00b              BEQ      |L1.19984|
;;;6745   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, overload",14,3,1);
004df8  2c02              CMP      r4,#2
004dfa  d010              BEQ      |L1.19998|
;;;6746   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, overload",14,4,1);
004dfc  2c03              CMP      r4,#3
004dfe  d015              BEQ      |L1.20012|
004e00  e1b3              B        |L1.20842|
                  |L1.19970|
004e02  2301              MOVS     r3,#1                 ;6743
004e04  461a              MOV      r2,r3                 ;6743
004e06  210e              MOVS     r1,#0xe               ;6743
004e08  a03b              ADR      r0,|L1.20216|
004e0a  f7fffffe          BL       snmp_trap_send
004e0e  e1ac              B        |L1.20842|
                  |L1.19984|
004e10  2301              MOVS     r3,#1                 ;6744
004e12  2202              MOVS     r2,#2                 ;6744
004e14  210e              MOVS     r1,#0xe               ;6744
004e16  a03f              ADR      r0,|L1.20244|
004e18  f7fffffe          BL       snmp_trap_send
004e1c  e1a5              B        |L1.20842|
                  |L1.19998|
004e1e  2301              MOVS     r3,#1                 ;6745
004e20  2203              MOVS     r2,#3                 ;6745
004e22  210e              MOVS     r1,#0xe               ;6745
004e24  a042              ADR      r0,|L1.20272|
004e26  f7fffffe          BL       snmp_trap_send
004e2a  e19e              B        |L1.20842|
                  |L1.20012|
004e2c  2301              MOVS     r3,#1
004e2e  2204              MOVS     r2,#4
004e30  210e              MOVS     r1,#0xe
004e32  a046              ADR      r0,|L1.20300|
004e34  f7fffffe          BL       snmp_trap_send
004e38  e197              B        |L1.20842|
                  |L1.20026|
;;;6747   	}
;;;6748   else if( (temp&(1<<1)) && (temp_&(1<<1)) )
004e3a  0783              LSLS     r3,r0,#30
004e3c  d529              BPL      |L1.20114|
004e3e  078b              LSLS     r3,r1,#30
004e40  d527              BPL      |L1.20114|
;;;6749   	{
;;;6750   		plazma_inv[3]++;
004e42  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
004e44  f1000001          ADD      r0,r0,#1
004e48  70d0              STRB     r0,[r2,#3]
;;;6751   	if(in==0)snmp_trap_send("Invertor #1 Alarm, overheat",14,1,2);
004e4a  b134              CBZ      r4,|L1.20058|
;;;6752   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, overheat",14,2,2);
004e4c  2c01              CMP      r4,#1
004e4e  d00b              BEQ      |L1.20072|
;;;6753   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, overheat",14,3,2);
004e50  2c02              CMP      r4,#2
004e52  d010              BEQ      |L1.20086|
;;;6754   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, overheat",14,4,2);
004e54  2c03              CMP      r4,#3
004e56  d015              BEQ      |L1.20100|
004e58  e187              B        |L1.20842|
                  |L1.20058|
004e5a  2302              MOVS     r3,#2                 ;6751
004e5c  2201              MOVS     r2,#1                 ;6751
004e5e  210e              MOVS     r1,#0xe               ;6751
004e60  a041              ADR      r0,|L1.20328|
004e62  f7fffffe          BL       snmp_trap_send
004e66  e180              B        |L1.20842|
                  |L1.20072|
004e68  2302              MOVS     r3,#2                 ;6752
004e6a  461a              MOV      r2,r3                 ;6752
004e6c  210e              MOVS     r1,#0xe               ;6752
004e6e  a045              ADR      r0,|L1.20356|
004e70  f7fffffe          BL       snmp_trap_send
004e74  e179              B        |L1.20842|
                  |L1.20086|
004e76  2302              MOVS     r3,#2                 ;6753
004e78  2203              MOVS     r2,#3                 ;6753
004e7a  210e              MOVS     r1,#0xe               ;6753
004e7c  a048              ADR      r0,|L1.20384|
004e7e  f7fffffe          BL       snmp_trap_send
004e82  e172              B        |L1.20842|
                  |L1.20100|
004e84  2302              MOVS     r3,#2
004e86  2204              MOVS     r2,#4
004e88  210e              MOVS     r1,#0xe
004e8a  a04c              ADR      r0,|L1.20412|
004e8c  f7fffffe          BL       snmp_trap_send
004e90  e16b              B        |L1.20842|
                  |L1.20114|
;;;6755   	}
;;;6756   
;;;6757   else if( (temp&(1<<2)) && (temp_&(1<<2)) )
004e92  0743              LSLS     r3,r0,#29
004e94  d50e              BPL      |L1.20148|
004e96  074b              LSLS     r3,r1,#29
004e98  d50c              BPL      |L1.20148|
;;;6758   	{
;;;6759   		plazma_inv[3]++;
004e9a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
004e9c  f1000001          ADD      r0,r0,#1
004ea0  70d0              STRB     r0,[r2,#3]
;;;6760   	if(in==0)snmp_trap_send("Invertor #1 Alarm, is warm",14,1,3);
004ea2  b134              CBZ      r4,|L1.20146|
;;;6761   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, is warm",14,2,3);
004ea4  2c01              CMP      r4,#1
004ea6  d006              BEQ      |L1.20150|
;;;6762   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, is warm",14,3,3);
004ea8  2c02              CMP      r4,#2
004eaa  d005              BEQ      |L1.20152|
;;;6763   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, is warm",14,4,3);
004eac  2c03              CMP      r4,#3
004eae  d004              BEQ      |L1.20154|
004eb0  e15b              B        |L1.20842|
                  |L1.20146|
004eb2  e091              B        |L1.20440|
                  |L1.20148|
004eb4  e0ac              B        |L1.20496|
                  |L1.20150|
004eb6  e096              B        |L1.20454|
                  |L1.20152|
004eb8  e09c              B        |L1.20468|
                  |L1.20154|
004eba  e0a2              B        |L1.20482|
                  |L1.20156|
                          DCD      TBAT
                  |L1.20160|
                          DCD      ||area_number.18||
                  |L1.20164|
                          DCD      ica_timer_cnt
                  |L1.20168|
                          DCD      sp_ch_stat
                  |L1.20172|
                          DCD      ICA_EN
                  |L1.20176|
                          DCD      ica_plazma
                  |L1.20180|
                          DCD      bps_I
                  |L1.20184|
                          DCD      ica_my_current
                  |L1.20188|
                          DCD      ica_your_current
                  |L1.20192|
                          DCD      ica_u_necc
                  |L1.20196|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.20200|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.20204|
                          DCD      ICA_CH
                  |L1.20208|
                          DCD      first_inv_slot
                  |L1.20212|
                          DCD      inv
                  |L1.20216|
004ef8  496e7665          DCB      "Invertor #1 Alarm, overload",0
004efc  72746f72
004f00  20233120
004f04  416c6172
004f08  6d2c206f
004f0c  7665726c
004f10  6f616400
                  |L1.20244|
004f14  496e7665          DCB      "Invertor #2 Alarm, overload",0
004f18  72746f72
004f1c  20233220
004f20  416c6172
004f24  6d2c206f
004f28  7665726c
004f2c  6f616400
                  |L1.20272|
004f30  496e7665          DCB      "Invertor #3 Alarm, overload",0
004f34  72746f72
004f38  20233320
004f3c  416c6172
004f40  6d2c206f
004f44  7665726c
004f48  6f616400
                  |L1.20300|
004f4c  496e7665          DCB      "Invertor #4 Alarm, overload",0
004f50  72746f72
004f54  20233420
004f58  416c6172
004f5c  6d2c206f
004f60  7665726c
004f64  6f616400
                  |L1.20328|
004f68  496e7665          DCB      "Invertor #1 Alarm, overheat",0
004f6c  72746f72
004f70  20233120
004f74  416c6172
004f78  6d2c206f
004f7c  76657268
004f80  65617400
                  |L1.20356|
004f84  496e7665          DCB      "Invertor #2 Alarm, overheat",0
004f88  72746f72
004f8c  20233220
004f90  416c6172
004f94  6d2c206f
004f98  76657268
004f9c  65617400
                  |L1.20384|
004fa0  496e7665          DCB      "Invertor #3 Alarm, overheat",0
004fa4  72746f72
004fa8  20233320
004fac  416c6172
004fb0  6d2c206f
004fb4  76657268
004fb8  65617400
                  |L1.20412|
004fbc  496e7665          DCB      "Invertor #4 Alarm, overheat",0
004fc0  72746f72
004fc4  20233420
004fc8  416c6172
004fcc  6d2c206f
004fd0  76657268
004fd4  65617400
                  |L1.20440|
004fd8  2303              MOVS     r3,#3                 ;6760
004fda  2201              MOVS     r2,#1                 ;6760
004fdc  210e              MOVS     r1,#0xe               ;6760
004fde  a0c1              ADR      r0,|L1.21220|
004fe0  f7fffffe          BL       snmp_trap_send
004fe4  e0c1              B        |L1.20842|
                  |L1.20454|
004fe6  2303              MOVS     r3,#3                 ;6761
004fe8  2202              MOVS     r2,#2                 ;6761
004fea  210e              MOVS     r1,#0xe               ;6761
004fec  a0c4              ADR      r0,|L1.21248|
004fee  f7fffffe          BL       snmp_trap_send
004ff2  e0ba              B        |L1.20842|
                  |L1.20468|
004ff4  2303              MOVS     r3,#3                 ;6762
004ff6  461a              MOV      r2,r3                 ;6762
004ff8  210e              MOVS     r1,#0xe               ;6762
004ffa  a0c8              ADR      r0,|L1.21276|
004ffc  f7fffffe          BL       snmp_trap_send
005000  e0b3              B        |L1.20842|
                  |L1.20482|
005002  2303              MOVS     r3,#3
005004  2204              MOVS     r2,#4
005006  210e              MOVS     r1,#0xe
005008  a0cb              ADR      r0,|L1.21304|
00500a  f7fffffe          BL       snmp_trap_send
00500e  e0ac              B        |L1.20842|
                  |L1.20496|
;;;6764   	}
;;;6765   
;;;6766   else if( (temp&(1<<3)) && (temp_&(1<<3)) ) 
005010  0703              LSLS     r3,r0,#28
005012  d529              BPL      |L1.20584|
005014  070b              LSLS     r3,r1,#28
005016  d527              BPL      |L1.20584|
;;;6767   	{
;;;6768   		plazma_inv[3]++;
005018  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00501a  f1000001          ADD      r0,r0,#1
00501e  70d0              STRB     r0,[r2,#3]
;;;6769   	if(in==0)snmp_trap_send("Invertor #1 Alarm, voltage is up",14,1,4);
005020  b134              CBZ      r4,|L1.20528|
;;;6770   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, voltage is up",14,2,4);
005022  2c01              CMP      r4,#1
005024  d00b              BEQ      |L1.20542|
;;;6771   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, voltage is up",14,3,4);
005026  2c02              CMP      r4,#2
005028  d010              BEQ      |L1.20556|
;;;6772   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, voltage is up",14,4,4);
00502a  2c03              CMP      r4,#3
00502c  d015              BEQ      |L1.20570|
00502e  e09c              B        |L1.20842|
                  |L1.20528|
005030  2304              MOVS     r3,#4                 ;6769
005032  2201              MOVS     r2,#1                 ;6769
005034  210e              MOVS     r1,#0xe               ;6769
005036  a0c7              ADR      r0,|L1.21332|
005038  f7fffffe          BL       snmp_trap_send
00503c  e095              B        |L1.20842|
                  |L1.20542|
00503e  2304              MOVS     r3,#4                 ;6770
005040  2202              MOVS     r2,#2                 ;6770
005042  210e              MOVS     r1,#0xe               ;6770
005044  a0cc              ADR      r0,|L1.21368|
005046  f7fffffe          BL       snmp_trap_send
00504a  e08e              B        |L1.20842|
                  |L1.20556|
00504c  2304              MOVS     r3,#4                 ;6771
00504e  2203              MOVS     r2,#3                 ;6771
005050  210e              MOVS     r1,#0xe               ;6771
005052  a0d2              ADR      r0,|L1.21404|
005054  f7fffffe          BL       snmp_trap_send
005058  e087              B        |L1.20842|
                  |L1.20570|
00505a  2304              MOVS     r3,#4
00505c  461a              MOV      r2,r3
00505e  210e              MOVS     r1,#0xe
005060  a0d7              ADR      r0,|L1.21440|
005062  f7fffffe          BL       snmp_trap_send
005066  e080              B        |L1.20842|
                  |L1.20584|
;;;6773   	}
;;;6774   
;;;6775   else if( (temp&(1<<4)) && (temp_&(1<<4)) ) 
005068  06c3              LSLS     r3,r0,#27
00506a  d529              BPL      |L1.20672|
00506c  06cb              LSLS     r3,r1,#27
00506e  d527              BPL      |L1.20672|
;;;6776   	{
;;;6777   		plazma_inv[3]++;
005070  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
005072  f1000001          ADD      r0,r0,#1
005076  70d0              STRB     r0,[r2,#3]
;;;6778   	if(in==0)snmp_trap_send("Invertor #1 Alarm, voltage is down",14,1,5);
005078  b134              CBZ      r4,|L1.20616|
;;;6779   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, voltage is down",14,2,5);
00507a  2c01              CMP      r4,#1
00507c  d00b              BEQ      |L1.20630|
;;;6780   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, voltage is down",14,3,5);
00507e  2c02              CMP      r4,#2
005080  d010              BEQ      |L1.20644|
;;;6781   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, voltage is down",14,4,5);
005082  2c03              CMP      r4,#3
005084  d015              BEQ      |L1.20658|
005086  e070              B        |L1.20842|
                  |L1.20616|
005088  2305              MOVS     r3,#5                 ;6778
00508a  2201              MOVS     r2,#1                 ;6778
00508c  210e              MOVS     r1,#0xe               ;6778
00508e  a0d5              ADR      r0,|L1.21476|
005090  f7fffffe          BL       snmp_trap_send
005094  e069              B        |L1.20842|
                  |L1.20630|
005096  2305              MOVS     r3,#5                 ;6779
005098  2202              MOVS     r2,#2                 ;6779
00509a  210e              MOVS     r1,#0xe               ;6779
00509c  a0da              ADR      r0,|L1.21512|
00509e  f7fffffe          BL       snmp_trap_send
0050a2  e062              B        |L1.20842|
                  |L1.20644|
0050a4  2305              MOVS     r3,#5                 ;6780
0050a6  2203              MOVS     r2,#3                 ;6780
0050a8  210e              MOVS     r1,#0xe               ;6780
0050aa  a0e0              ADR      r0,|L1.21548|
0050ac  f7fffffe          BL       snmp_trap_send
0050b0  e05b              B        |L1.20842|
                  |L1.20658|
0050b2  2305              MOVS     r3,#5
0050b4  2204              MOVS     r2,#4
0050b6  210e              MOVS     r1,#0xe
0050b8  a0e5              ADR      r0,|L1.21584|
0050ba  f7fffffe          BL       snmp_trap_send
0050be  e054              B        |L1.20842|
                  |L1.20672|
;;;6782   	}
;;;6783   
;;;6784   else if( (temp&(1<<5)) && (temp_&(1<<5)) )
0050c0  0683              LSLS     r3,r0,#26
0050c2  d529              BPL      |L1.20760|
0050c4  068b              LSLS     r3,r1,#26
0050c6  d527              BPL      |L1.20760|
;;;6785   	{
;;;6786   		plazma_inv[3]++;
0050c8  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0050ca  f1000001          ADD      r0,r0,#1
0050ce  70d0              STRB     r0,[r2,#3]
;;;6787   	if(in==0)snmp_trap_send("Invertor #1 Alarm, output is offed",14,1,6);
0050d0  b134              CBZ      r4,|L1.20704|
;;;6788   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, output is offed",14,2,6);
0050d2  2c01              CMP      r4,#1
0050d4  d00b              BEQ      |L1.20718|
;;;6789   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, output is offed",14,3,6);
0050d6  2c02              CMP      r4,#2
0050d8  d010              BEQ      |L1.20732|
;;;6790   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, output is offed",14,4,6);
0050da  2c03              CMP      r4,#3
0050dc  d015              BEQ      |L1.20746|
0050de  e044              B        |L1.20842|
                  |L1.20704|
0050e0  2306              MOVS     r3,#6                 ;6787
0050e2  2201              MOVS     r2,#1                 ;6787
0050e4  210e              MOVS     r1,#0xe               ;6787
0050e6  a0e3              ADR      r0,|L1.21620|
0050e8  f7fffffe          BL       snmp_trap_send
0050ec  e03d              B        |L1.20842|
                  |L1.20718|
0050ee  2306              MOVS     r3,#6                 ;6788
0050f0  2202              MOVS     r2,#2                 ;6788
0050f2  210e              MOVS     r1,#0xe               ;6788
0050f4  a0e8              ADR      r0,|L1.21656|
0050f6  f7fffffe          BL       snmp_trap_send
0050fa  e036              B        |L1.20842|
                  |L1.20732|
0050fc  2306              MOVS     r3,#6                 ;6789
0050fe  2203              MOVS     r2,#3                 ;6789
005100  210e              MOVS     r1,#0xe               ;6789
005102  a0ee              ADR      r0,|L1.21692|
005104  f7fffffe          BL       snmp_trap_send
005108  e02f              B        |L1.20842|
                  |L1.20746|
00510a  2306              MOVS     r3,#6
00510c  2204              MOVS     r2,#4
00510e  210e              MOVS     r1,#0xe
005110  a0f3              ADR      r0,|L1.21728|
005112  f7fffffe          BL       snmp_trap_send
005116  e028              B        |L1.20842|
                  |L1.20760|
;;;6791   	}
;;;6792   
;;;6793   else if((temp)&&(!temp_)) 
005118  b300              CBZ      r0,|L1.20828|
00511a  b9f9              CBNZ     r1,|L1.20828|
;;;6794   	{
;;;6795   		plazma_inv[3]++;
00511c  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00511e  f1000001          ADD      r0,r0,#1
005122  70d0              STRB     r0,[r2,#3]
;;;6796   	if(in==0)snmp_trap_send("Invertor #1 is norm",14,1,0);
005124  b134              CBZ      r4,|L1.20788|
;;;6797   	else if(in==1)snmp_trap_send("Invertor #2 is norm",14,2,0);
005126  2c01              CMP      r4,#1
005128  d00b              BEQ      |L1.20802|
;;;6798   	else if(in==2)snmp_trap_send("Invertor #3 is norm",14,3,0);
00512a  2c02              CMP      r4,#2
00512c  d010              BEQ      |L1.20816|
;;;6799   	else if(in==3)snmp_trap_send("Invertor #4 is norm",14,4,0);
00512e  2c03              CMP      r4,#3
005130  d015              BEQ      |L1.20830|
005132  e01a              B        |L1.20842|
                  |L1.20788|
005134  2300              MOVS     r3,#0                 ;6796
005136  2201              MOVS     r2,#1                 ;6796
005138  210e              MOVS     r1,#0xe               ;6796
00513a  a0f2              ADR      r0,|L1.21764|
00513c  f7fffffe          BL       snmp_trap_send
005140  e013              B        |L1.20842|
                  |L1.20802|
005142  2300              MOVS     r3,#0                 ;6797
005144  2202              MOVS     r2,#2                 ;6797
005146  210e              MOVS     r1,#0xe               ;6797
005148  a0f3              ADR      r0,|L1.21784|
00514a  f7fffffe          BL       snmp_trap_send
00514e  e00c              B        |L1.20842|
                  |L1.20816|
005150  2300              MOVS     r3,#0                 ;6798
005152  2203              MOVS     r2,#3                 ;6798
005154  210e              MOVS     r1,#0xe               ;6798
005156  a0f5              ADR      r0,|L1.21804|
005158  f7fffffe          BL       snmp_trap_send
                  |L1.20828|
00515c  e005              B        |L1.20842|
                  |L1.20830|
00515e  2300              MOVS     r3,#0
005160  2204              MOVS     r2,#4
005162  210e              MOVS     r1,#0xe
005164  a0f6              ADR      r0,|L1.21824|
005166  f7fffffe          BL       snmp_trap_send
                  |L1.20842|
;;;6800   	}
;;;6801   
;;;6802   inv[in]._flags_tm_old=inv[in]._flags_tm;
00516a  f8150f46          LDRB     r0,[r5,#0x46]!
00516e  7068              STRB     r0,[r5,#1]
;;;6803   
;;;6804   }	
005170  bd70              POP      {r4-r6,pc}
;;;6805   
                          ENDP

                  ipsBlckHndl PROC
;;;6806   //-----------------------------------------------
;;;6807   void ipsBlckHndl(char in)
005172  b510              PUSH     {r4,lr}
;;;6808   {
;;;6809   
;;;6810   ipsBlckStat=0;
005174  4bf7              LDR      r3,|L1.21844|
005176  f04f0000          MOV      r0,#0
00517a  8018              STRH     r0,[r3,#0]
;;;6811   if(ipsBlckSrc==1)
00517c  48f6              LDR      r0,|L1.21848|
00517e  f04f0401          MOV      r4,#1
;;;6812   	{
;;;6813   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
005182  f44f62fa          MOV      r2,#0x7d0
005186  f9b01000          LDRSH    r1,[r0,#0]            ;6811  ; ipsBlckSrc
00518a  48f4              LDR      r0,|L1.21852|
00518c  2901              CMP      r1,#1                 ;6811
00518e  f9b00000          LDRSH    r0,[r0,#0]
005192  d006              BEQ      |L1.20898|
;;;6814   	}
;;;6815   else if(ipsBlckSrc==2)
005194  2902              CMP      r1,#2
005196  d10f              BNE      |L1.20920|
005198  49f1              LDR      r1,|L1.21856|
;;;6816   	{
;;;6817   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
00519a  f9b1101a          LDRSH    r1,[r1,#0x1a]
00519e  b160              CBZ      r0,|L1.20922|
0051a0  e00d              B        |L1.20926|
                  |L1.20898|
0051a2  49ef              LDR      r1,|L1.21856|
0051a4  f9b11016          LDRSH    r1,[r1,#0x16]         ;6813
0051a8  b908              CBNZ     r0,|L1.20910|
0051aa  4291              CMP      r1,r2                 ;6813
0051ac  dc03              BGT      |L1.20918|
                  |L1.20910|
0051ae  2801              CMP      r0,#1                 ;6813
0051b0  d102              BNE      |L1.20920|
0051b2  4291              CMP      r1,r2                 ;6813
0051b4  da00              BGE      |L1.20920|
                  |L1.20918|
0051b6  801c              STRH     r4,[r3,#0]            ;6813
                  |L1.20920|
;;;6818   	}
;;;6819   }
0051b8  bd10              POP      {r4,pc}
                  |L1.20922|
0051ba  4291              CMP      r1,r2                 ;6817
0051bc  dc03              BGT      |L1.20934|
                  |L1.20926|
0051be  2801              CMP      r0,#1                 ;6817
0051c0  d1fa              BNE      |L1.20920|
0051c2  4291              CMP      r1,r2                 ;6817
0051c4  daf8              BGE      |L1.20920|
                  |L1.20934|
0051c6  801c              STRH     r4,[r3,#0]            ;6817
0051c8  bd10              POP      {r4,pc}
;;;6820   
                          ENDP

                  bps_drv PROC
;;;6821   //-----------------------------------------------
;;;6822   void bps_drv(char in)
0051ca  e92d41f0          PUSH     {r4-r8,lr}
;;;6823   {
0051ce  4606              MOV      r6,r0
;;;6824   char temp;
;;;6825   
;;;6826   if (bps[in]._device!=dSRC) return;
0051d0  eb0600c6          ADD      r0,r6,r6,LSL #3
0051d4  49e3              LDR      r1,|L1.21860|
0051d6  eb001006          ADD      r0,r0,r6,LSL #4
0051da  f8112020          LDRB     r2,[r1,r0,LSL #2]
0051de  2a03              CMP      r2,#3
0051e0  d17d              BNE      |L1.21214|
;;;6827   temp=bps[in]._flags_tm;
0051e2  eb010480          ADD      r4,r1,r0,LSL #2
0051e6  f8945042          LDRB     r5,[r4,#0x42]
;;;6828   if(temp&(1<<AV_T))
0051ea  07a8              LSLS     r0,r5,#30
0051ec  d517              BPL      |L1.21022|
;;;6829   	{
;;;6830   	if(bps[in]._temp_av_cnt<1200) 
0051ee  f9b41046          LDRSH    r1,[r4,#0x46]
0051f2  f44f6296          MOV      r2,#0x4b0
0051f6  4291              CMP      r1,r2
0051f8  da22              BGE      |L1.21056|
;;;6831   		{
;;;6832   		bps[in]._temp_av_cnt++;
0051fa  f1010101          ADD      r1,r1,#1
0051fe  b208              SXTH     r0,r1
005200  f8a40046          STRH     r0,[r4,#0x46]
;;;6833   		if(bps[in]._temp_av_cnt>=1200)
005204  4290              CMP      r0,r2
005206  db1b              BLT      |L1.21056|
;;;6834   			{
;;;6835   			bps[in]._temp_av_cnt=1200;
005208  f8a42046          STRH     r2,[r4,#0x46]
;;;6836   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
00520c  7860              LDRB     r0,[r4,#1]
00520e  07c0              LSLS     r0,r0,#31
005210  d116              BNE      |L1.21056|
005212  2201              MOVS     r2,#1
005214  2100              MOVS     r1,#0
005216  4630              MOV      r0,r6
005218  f7fffffe          BL       avar_bps_hndl
00521c  e010              B        |L1.21056|
                  |L1.21022|
;;;6837   			}
;;;6838   		}
;;;6839   	}
;;;6840   
;;;6841   else if(!(temp&(1<<AV_T)))
;;;6842   	{
;;;6843   	if(bps[in]._temp_av_cnt) 
00521e  f9b41046          LDRSH    r1,[r4,#0x46]
005222  b169              CBZ      r1,|L1.21056|
;;;6844   		{
;;;6845   		bps[in]._temp_av_cnt--;
005224  f1a10101          SUB      r1,r1,#1
005228  b208              SXTH     r0,r1
00522a  f8a40046          STRH     r0,[r4,#0x46]
;;;6846   		if(!bps[in]._temp_av_cnt)
00522e  b938              CBNZ     r0,|L1.21056|
;;;6847   			{
;;;6848   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
005230  7860              LDRB     r0,[r4,#1]
005232  07c0              LSLS     r0,r0,#31
005234  d004              BEQ      |L1.21056|
005236  2200              MOVS     r2,#0
005238  4611              MOV      r1,r2
00523a  4630              MOV      r0,r6
00523c  f7fffffe          BL       avar_bps_hndl
                  |L1.21056|
;;;6849   			}
;;;6850   		} 	
;;;6851   
;;;6852   	}
;;;6853   
;;;6854   if((temp&(1<<AVUMAX)))
005240  0728              LSLS     r0,r5,#28
;;;6855   	{
;;;6856   	if(bps[in]._umax_av_cnt<10) 
;;;6857   		{
;;;6858   		bps[in]._umax_av_cnt++;
;;;6859   		if(bps[in]._umax_av_cnt>=10)
;;;6860   			{ 
;;;6861   			bps[in]._umax_av_cnt=10;
005242  f04f080a          MOV      r8,#0xa
005246  f04f0700          MOV      r7,#0                 ;6836
00524a  d518              BPL      |L1.21118|
00524c  f9b41048          LDRSH    r1,[r4,#0x48]         ;6856
005250  290a              CMP      r1,#0xa               ;6856
005252  da29              BGE      |L1.21160|
005254  f1010101          ADD      r1,r1,#1              ;6858
005258  b208              SXTH     r0,r1                 ;6858
00525a  f8a40048          STRH     r0,[r4,#0x48]         ;6858
00525e  280a              CMP      r0,#0xa               ;6859
005260  db22              BLT      |L1.21160|
005262  f8a48048          STRH     r8,[r4,#0x48]
;;;6862   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
005266  7860              LDRB     r0,[r4,#1]
005268  0780              LSLS     r0,r0,#30
00526a  d404              BMI      |L1.21110|
00526c  2201              MOVS     r2,#1
00526e  4611              MOV      r1,r2
005270  4630              MOV      r0,r6
005272  f7fffffe          BL       avar_bps_hndl
                  |L1.21110|
;;;6863   			apv_start(in);
005276  4630              MOV      r0,r6
005278  f7fffffe          BL       apv_start
00527c  e014              B        |L1.21160|
                  |L1.21118|
;;;6864   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6865   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6866   				{
;;;6867   				apv_cnt[in,0]=APV_INIT;
;;;6868   				apv_cnt[in,1]=APV_INIT;
;;;6869   				apv_cnt[in,2]=APV_INIT;
;;;6870   				apv_flags[in]=afOFF;
;;;6871   				}				*/
;;;6872   						
;;;6873   			}
;;;6874   		} 
;;;6875   	}		
;;;6876   else if(!(temp&(1<<AVUMAX)))
;;;6877   	{
;;;6878   	if(bps[in]._umax_av_cnt>0) 
00527e  f9b41048          LDRSH    r1,[r4,#0x48]
005282  2900              CMP      r1,#0
005284  dd0d              BLE      |L1.21154|
;;;6879   		{
;;;6880   		bps[in]._umax_av_cnt--;
005286  f1a10101          SUB      r1,r1,#1
00528a  b208              SXTH     r0,r1
00528c  f8a40048          STRH     r0,[r4,#0x48]
;;;6881   		if(bps[in]._umax_av_cnt==0)
005290  b950              CBNZ     r0,|L1.21160|
;;;6882   			{
;;;6883   			bps[in]._umax_av_cnt=0;
;;;6884   			avar_bps_hndl(in,1,0);
005292  f04f0200          MOV      r2,#0
005296  f04f0101          MOV      r1,#1
00529a  4630              MOV      r0,r6
00529c  f7fffffe          BL       avar_bps_hndl
0052a0  e002              B        |L1.21160|
                  |L1.21154|
;;;6885   			//apv_stop(in);
;;;6886   	 //		apv_cnt[in,0]=0;
;;;6887   	//		apv_cnt[in,1]=0;
;;;6888   	 //		apv_cnt[in,2]=0;			
;;;6889   			}
;;;6890   		}
;;;6891   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
0052a2  da01              BGE      |L1.21160|
0052a4  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.21160|
;;;6892   	}
;;;6893   
;;;6894   if(temp&(1<<AVUMIN))
0052a8  06e8              LSLS     r0,r5,#27
0052aa  d519              BPL      |L1.21216|
;;;6895   	{
;;;6896   	if(bps[in]._umin_av_cnt<10) 
0052ac  f9b4104a          LDRSH    r1,[r4,#0x4a]
0052b0  290a              CMP      r1,#0xa
0052b2  da13              BGE      |L1.21212|
;;;6897   		{
;;;6898   		bps[in]._umin_av_cnt++;
0052b4  f1010101          ADD      r1,r1,#1
0052b8  b208              SXTH     r0,r1
0052ba  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6899   		if(bps[in]._umin_av_cnt>=10)
0052be  280a              CMP      r0,#0xa
0052c0  db0c              BLT      |L1.21212|
;;;6900   			{ 
;;;6901   			bps[in]._umin_av_cnt=10;
0052c2  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6902   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
0052c6  7860              LDRB     r0,[r4,#1]
0052c8  0740              LSLS     r0,r0,#29
0052ca  d404              BMI      |L1.21206|
0052cc  2201              MOVS     r2,#1
0052ce  2102              MOVS     r1,#2
0052d0  4630              MOV      r0,r6
0052d2  f7fffffe          BL       avar_bps_hndl
                  |L1.21206|
;;;6903   			apv_start(in);
0052d6  4630              MOV      r0,r6
0052d8  f7fffffe          BL       apv_start
                  |L1.21212|
0052dc  e152              B        |L1.21892|
                  |L1.21214|
0052de  e1db              B        |L1.22168|
                  |L1.21216|
0052e0  e142              B        |L1.21864|
0052e2  0000              DCW      0x0000
                  |L1.21220|
0052e4  496e7665          DCB      "Invertor #1 Alarm, is warm",0
0052e8  72746f72
0052ec  20233120
0052f0  416c6172
0052f4  6d2c2069
0052f8  73207761
0052fc  726d00  
0052ff  00                DCB      0
                  |L1.21248|
005300  496e7665          DCB      "Invertor #2 Alarm, is warm",0
005304  72746f72
005308  20233220
00530c  416c6172
005310  6d2c2069
005314  73207761
005318  726d00  
00531b  00                DCB      0
                  |L1.21276|
00531c  496e7665          DCB      "Invertor #3 Alarm, is warm",0
005320  72746f72
005324  20233320
005328  416c6172
00532c  6d2c2069
005330  73207761
005334  726d00  
005337  00                DCB      0
                  |L1.21304|
005338  496e7665          DCB      "Invertor #4 Alarm, is warm",0
00533c  72746f72
005340  20233420
005344  416c6172
005348  6d2c2069
00534c  73207761
005350  726d00  
005353  00                DCB      0
                  |L1.21332|
005354  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
005358  72746f72
00535c  20233120
005360  416c6172
005364  6d2c2076
005368  6f6c7461
00536c  67652069
005370  73207570
005374  00      
005375  00                DCB      0
005376  00                DCB      0
005377  00                DCB      0
                  |L1.21368|
005378  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
00537c  72746f72
005380  20233220
005384  416c6172
005388  6d2c2076
00538c  6f6c7461
005390  67652069
005394  73207570
005398  00      
005399  00                DCB      0
00539a  00                DCB      0
00539b  00                DCB      0
                  |L1.21404|
00539c  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
0053a0  72746f72
0053a4  20233320
0053a8  416c6172
0053ac  6d2c2076
0053b0  6f6c7461
0053b4  67652069
0053b8  73207570
0053bc  00      
0053bd  00                DCB      0
0053be  00                DCB      0
0053bf  00                DCB      0
                  |L1.21440|
0053c0  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
0053c4  72746f72
0053c8  20233420
0053cc  416c6172
0053d0  6d2c2076
0053d4  6f6c7461
0053d8  67652069
0053dc  73207570
0053e0  00      
0053e1  00                DCB      0
0053e2  00                DCB      0
0053e3  00                DCB      0
                  |L1.21476|
0053e4  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
0053e8  72746f72
0053ec  20233120
0053f0  416c6172
0053f4  6d2c2076
0053f8  6f6c7461
0053fc  67652069
005400  7320646f
005404  776e00  
005407  00                DCB      0
                  |L1.21512|
005408  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
00540c  72746f72
005410  20233220
005414  416c6172
005418  6d2c2076
00541c  6f6c7461
005420  67652069
005424  7320646f
005428  776e00  
00542b  00                DCB      0
                  |L1.21548|
00542c  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
005430  72746f72
005434  20233320
005438  416c6172
00543c  6d2c2076
005440  6f6c7461
005444  67652069
005448  7320646f
00544c  776e00  
00544f  00                DCB      0
                  |L1.21584|
005450  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
005454  72746f72
005458  20233420
00545c  416c6172
005460  6d2c2076
005464  6f6c7461
005468  67652069
00546c  7320646f
005470  776e00  
005473  00                DCB      0
                  |L1.21620|
005474  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
005478  72746f72
00547c  20233120
005480  416c6172
005484  6d2c206f
005488  75747075
00548c  74206973
005490  206f6666
005494  656400  
005497  00                DCB      0
                  |L1.21656|
005498  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
00549c  72746f72
0054a0  20233220
0054a4  416c6172
0054a8  6d2c206f
0054ac  75747075
0054b0  74206973
0054b4  206f6666
0054b8  656400  
0054bb  00                DCB      0
                  |L1.21692|
0054bc  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
0054c0  72746f72
0054c4  20233320
0054c8  416c6172
0054cc  6d2c206f
0054d0  75747075
0054d4  74206973
0054d8  206f6666
0054dc  656400  
0054df  00                DCB      0
                  |L1.21728|
0054e0  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
0054e4  72746f72
0054e8  20233420
0054ec  416c6172
0054f0  6d2c206f
0054f4  75747075
0054f8  74206973
0054fc  206f6666
005500  656400  
005503  00                DCB      0
                  |L1.21764|
005504  496e7665          DCB      "Invertor #1 is norm",0
005508  72746f72
00550c  20233120
005510  6973206e
005514  6f726d00
                  |L1.21784|
005518  496e7665          DCB      "Invertor #2 is norm",0
00551c  72746f72
005520  20233220
005524  6973206e
005528  6f726d00
                  |L1.21804|
00552c  496e7665          DCB      "Invertor #3 is norm",0
005530  72746f72
005534  20233320
005538  6973206e
00553c  6f726d00
                  |L1.21824|
005540  496e7665          DCB      "Invertor #4 is norm",0
005544  72746f72
005548  20233420
00554c  6973206e
005550  6f726d00
                  |L1.21844|
                          DCD      ipsBlckStat
                  |L1.21848|
                          DCD      ipsBlckSrc
                  |L1.21852|
                          DCD      ipsBlckLog
                  |L1.21856|
                          DCD      ||.bss||+0x40c
                  |L1.21860|
                          DCD      bps
                  |L1.21864|
;;;6904   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6905   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6906   				{
;;;6907   				apv_cnt[in,0]=APV_INIT;
;;;6908   				apv_cnt[in,1]=APV_INIT;
;;;6909   				apv_cnt[in,2]=APV_INIT;
;;;6910   				apv_flags[in]=afOFF;
;;;6911   				}*/				
;;;6912   			}
;;;6913   		} 
;;;6914   	}	
;;;6915   	
;;;6916   else if(!(temp&(1<<AVUMIN)))
;;;6917   	{
;;;6918   	if(bps[in]._umin_av_cnt) 
005568  f9b4004a          LDRSH    r0,[r4,#0x4a]
00556c  b150              CBZ      r0,|L1.21892|
;;;6919   		{
;;;6920   		bps[in]._umin_av_cnt--;
00556e  f1a00001          SUB      r0,r0,#1
005572  b200              SXTH     r0,r0
005574  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6921   		if(bps[in]._umin_av_cnt==0)
005578  b920              CBNZ     r0,|L1.21892|
;;;6922   			{
;;;6923   			bps[in]._umin_av_cnt=0;
;;;6924   			avar_bps_hndl(in,2,0);
00557a  2200              MOVS     r2,#0
00557c  2102              MOVS     r1,#2
00557e  4630              MOV      r0,r6
005580  f7fffffe          BL       avar_bps_hndl
                  |L1.21892|
;;;6925   			//apv_stop(in);
;;;6926   		//	apv_cnt[in,0]=0;
;;;6927   		//	apv_cnt[in,1]=0;
;;;6928   		//	apv_cnt[in,2]=0;
;;;6929   			}
;;;6930   		}
;;;6931   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6932   	}
;;;6933   
;;;6934   if((bps[in]._Uii<(UB20-DU)))
005584  48fe              LDR      r0,|L1.22912|
005586  69e1              LDR      r1,[r4,#0x1c]
005588  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
00558c  48fd              LDR      r0,|L1.22916|
00558e  f9b00000          LDRSH    r0,[r0,#0]  ; DU
005592  1a10              SUBS     r0,r2,r0
005594  4281              CMP      r1,r0
005596  da1d              BGE      |L1.21972|
;;;6935   	{
;;;6936   	if(bps[in]._state==bsWRK)
005598  78a0              LDRB     r0,[r4,#2]
00559a  2801              CMP      r0,#1
00559c  d128              BNE      |L1.22000|
;;;6937   		{
;;;6938   		if(bps[in]._umin_av_cnt_uku<300) 
00559e  f9b4004c          LDRSH    r0,[r4,#0x4c]
0055a2  f44f7196          MOV      r1,#0x12c
0055a6  4288              CMP      r0,r1
0055a8  da11              BGE      |L1.21966|
;;;6939   			{
;;;6940   			bps[in]._umin_av_cnt_uku++;
0055aa  f1000001          ADD      r0,r0,#1
0055ae  b200              SXTH     r0,r0
0055b0  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6941   			if(bps[in]._umin_av_cnt_uku>=300)
0055b4  4288              CMP      r0,r1
0055b6  db1b              BLT      |L1.22000|
;;;6942   				{ 
;;;6943   				bps[in]._umin_av_cnt_uku=300;
0055b8  f8a4104c          STRH     r1,[r4,#0x4c]
;;;6944   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
0055bc  7860              LDRB     r0,[r4,#1]
0055be  0740              LSLS     r0,r0,#29
0055c0  d416              BMI      |L1.22000|
0055c2  2201              MOVS     r2,#1
0055c4  2102              MOVS     r1,#2
0055c6  4630              MOV      r0,r6
0055c8  f7fffffe          BL       avar_bps_hndl
0055cc  e010              B        |L1.22000|
                  |L1.21966|
;;;6945   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6946   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6947   					{
;;;6948   					apv_cnt[in,0]=APV_INIT;
;;;6949   					apv_cnt[in,1]=APV_INIT;
;;;6950   					apv_cnt[in,2]=APV_INIT;
;;;6951   					apv_flags[in]=afOFF;
;;;6952   					}*/				
;;;6953   				}
;;;6954   			}
;;;6955   		else
;;;6956   			{
;;;6957   			bps[in]._umin_av_cnt_uku=0;
0055ce  f8a4704c          STRH     r7,[r4,#0x4c]
0055d2  e00d              B        |L1.22000|
                  |L1.21972|
;;;6958   			} 
;;;6959   		}
;;;6960   	}	
;;;6961   	
;;;6962   else if(bps[in]._Uii>=(UB20-DU))
;;;6963   	{
;;;6964   	if(bps[in]._umin_av_cnt_uku) 
0055d4  f9b4004c          LDRSH    r0,[r4,#0x4c]
0055d8  b150              CBZ      r0,|L1.22000|
;;;6965   		{
;;;6966   		bps[in]._umin_av_cnt_uku--;
0055da  f1a00001          SUB      r0,r0,#1
0055de  b200              SXTH     r0,r0
0055e0  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6967   		if(bps[in]._umin_av_cnt_uku==0)
0055e4  b920              CBNZ     r0,|L1.22000|
;;;6968   			{
;;;6969   			bps[in]._umin_av_cnt_uku=0;
;;;6970   			avar_bps_hndl(in,2,0);
0055e6  2200              MOVS     r2,#0
0055e8  2102              MOVS     r1,#2
0055ea  4630              MOV      r0,r6
0055ec  f7fffffe          BL       avar_bps_hndl
                  |L1.22000|
;;;6971   		//	apv_cnt[in,0]=0;
;;;6972   		//	apv_cnt[in,1]=0;
;;;6973   		//	apv_cnt[in,2]=0;
;;;6974   			}
;;;6975   		}
;;;6976   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6977   	}
;;;6978   
;;;6979   //bps[in]._state=bsOFF;
;;;6980   
;;;6981   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
0055f0  7860              LDRB     r0,[r4,#1]
0055f2  0700              LSLS     r0,r0,#28
0055f4  d003              BEQ      |L1.22014|
0055f6  f04f0004          MOV      r0,#4
0055fa  70a0              STRB     r0,[r4,#2]
0055fc  e017              B        |L1.22062|
                  |L1.22014|
;;;6982   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
0055fe  48e2              LDR      r0,|L1.22920|
005600  7800              LDRB     r0,[r0,#0]  ; net_av
005602  b130              CBZ      r0,|L1.22034|
005604  78e0              LDRB     r0,[r4,#3]
005606  2814              CMP      r0,#0x14
005608  d903              BLS      |L1.22034|
;;;6983   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
00560a  f04f0005          MOV      r0,#5
00560e  70a0              STRB     r0,[r4,#2]
005610  e00d              B        |L1.22062|
                  |L1.22034|
;;;6984   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
005612  f8940042          LDRB     r0,[r4,#0x42]
005616  0680              LSLS     r0,r0,#26
005618  d503              BPL      |L1.22050|
00561a  f04f0002          MOV      r0,#2
00561e  70a0              STRB     r0,[r4,#2]
005620  e005              B        |L1.22062|
                  |L1.22050|
;;;6985   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
005622  78e0              LDRB     r0,[r4,#3]
005624  2814              CMP      r0,#0x14
005626  d202              BCS      |L1.22062|
005628  f04f0001          MOV      r0,#1
00562c  70a0              STRB     r0,[r4,#2]
                  |L1.22062|
;;;6986   
;;;6987   
;;;6988   
;;;6989   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6990   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6991   //else bps[0]._state=ssNOT;
;;;6992   
;;;6993   //bps[in]._is_ready=0;
;;;6994   //bps[in]._is_wrk=0;
;;;6995   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6996   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6997   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6998   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6999   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7000   //	{
;;;7001   //	bps[in]._flags_bp='B';// заблокирован
;;;7002   //	bps[in]._is_ready=1;
;;;7003   //	}
;;;7004   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7005   //     {
;;;7006   //     bps[in]._flags_bp='W';// работает
;;;7007   //     bps[in]._is_ready=1;
;;;7008   //     bps[in]._is_wrk=1;
;;;7009        
;;;7010   //     }
;;;7011   //else bps[in]._is_ready=1;     
;;;7012   
;;;7013   
;;;7014   
;;;7015   
;;;7016   
;;;7017   /*
;;;7018   bps[in]._flags_tu&=BIN8(11111110);
;;;7019   if(bps[in]._ist_blok_cnt)
;;;7020   	{
;;;7021   	bps[in]._ist_blok_cnt--;
;;;7022   	bps[in]._flags_tu|=BIN8(1);
;;;7023   	}
;;;7024   
;;;7025   	   */ 
;;;7026   
;;;7027   //Пересброс БПСа при потере связи
;;;7028   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
00562e  78e0              LDRB     r0,[r4,#3]
005630  280a              CMP      r0,#0xa
005632  d306              BCC      |L1.22082|
005634  f894002c          LDRB     r0,[r4,#0x2c]
005638  f0400080          ORR      r0,r0,#0x80
00563c  f884002c          STRB     r0,[r4,#0x2c]
005640  e005              B        |L1.22094|
                  |L1.22082|
;;;7029   else bps[in]._flags_tu&=BIN8(1111111);
005642  f894002c          LDRB     r0,[r4,#0x2c]
005646  f000007f          AND      r0,r0,#0x7f
00564a  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.22094|
;;;7030   
;;;7031   if(avar_bps_reset_cnt) 
00564e  48cf              LDR      r0,|L1.22924|
005650  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
005654  b139              CBZ      r1,|L1.22118|
;;;7032   	{
;;;7033   	bps[in]._flags_tu|=BIN8(10);
005656  f894102c          LDRB     r1,[r4,#0x2c]
00565a  f0410102          ORR      r1,r1,#2
00565e  f884102c          STRB     r1,[r4,#0x2c]
;;;7034   	bps[in]._av=0;
005662  7067              STRB     r7,[r4,#1]
005664  e00f              B        |L1.22150|
                  |L1.22118|
;;;7035   	}
;;;7036   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
005666  f8941062          LDRB     r1,[r4,#0x62]
00566a  b131              CBZ      r1,|L1.22138|
00566c  f894102c          LDRB     r1,[r4,#0x2c]
005670  f0410102          ORR      r1,r1,#2
005674  f884102c          STRB     r1,[r4,#0x2c]
005678  e005              B        |L1.22150|
                  |L1.22138|
;;;7037   else bps[in]._flags_tu&=BIN8(11111101);
00567a  f894102c          LDRB     r1,[r4,#0x2c]
00567e  f00101fd          AND      r1,r1,#0xfd
005682  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.22150|
;;;7038   	
;;;7039   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
005686  f9b41054          LDRSH    r1,[r4,#0x54]
00568a  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
00568e  4408              ADD      r0,r0,r1
005690  6320              STR      r0,[r4,#0x30]
;;;7040   bps[in]._vol_i=1000;
005692  f44f707a          MOV      r0,#0x3e8
005696  6360              STR      r0,[r4,#0x34]
                  |L1.22168|
;;;7041   //bps[0]._vol_u=500;
;;;7042   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7043   }
005698  e8bd81f0          POP      {r4-r8,pc}
;;;7044   
                          ENDP

                  avt_hndl PROC
;;;7045   //-----------------------------------------------
;;;7046   void avt_hndl(void)
00569c  b570              PUSH     {r4-r6,lr}
;;;7047   {
;;;7048   char i;
;;;7049   for(i=0;i<12;i++)
00569e  f04f0000          MOV      r0,#0
;;;7050   	{
;;;7051   	if(eb2_data_short[6]&(1<<i))
0056a2  49bb              LDR      r1,|L1.22928|
;;;7052   		{
;;;7053   		avt_stat[i]=avtON;
0056a4  4dbb              LDR      r5,|L1.22932|
0056a6  f04f0401          MOV      r4,#1                 ;7051
0056aa  f9b1200c          LDRSH    r2,[r1,#0xc]          ;7051
0056ae  4603              MOV      r3,r0                 ;7049
                  |L1.22192|
0056b0  fa04f100          LSL      r1,r4,r0              ;7051
0056b4  420a              TST      r2,r1                 ;7051
0056b6  d001              BEQ      |L1.22204|
0056b8  542c              STRB     r4,[r5,r0]
0056ba  e000              B        |L1.22206|
                  |L1.22204|
;;;7054   		}
;;;7055   	else avt_stat[i]=avtOFF;
0056bc  542b              STRB     r3,[r5,r0]
                  |L1.22206|
0056be  f1000001          ADD      r0,r0,#1              ;7049
0056c2  b2c0              UXTB     r0,r0                 ;7049
0056c4  280c              CMP      r0,#0xc               ;7049
0056c6  d3f3              BCC      |L1.22192|
;;;7056   	}
;;;7057   
;;;7058   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
0056c8  4eb3              LDR      r6,|L1.22936|
0056ca  7828              LDRB     r0,[r5,#0]  ; avt_stat
0056cc  4cb3              LDR      r4,|L1.22940|
0056ce  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
0056d0  4281              CMP      r1,r0
0056d2  d00b              BEQ      |L1.22252|
0056d4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0056d8  2901              CMP      r1,#1
0056da  db07              BLT      |L1.22252|
;;;7059   	{
;;;7060   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
0056dc  2801              CMP      r0,#1
0056de  d07e              BEQ      |L1.22494|
;;;7061   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
0056e0  2300              MOVS     r3,#0
0056e2  2201              MOVS     r2,#1
0056e4  210b              MOVS     r1,#0xb
0056e6  a0ae              ADR      r0,|L1.22944|
0056e8  f7fffffe          BL       snmp_trap_send
                  |L1.22252|
;;;7062   	}
;;;7063   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
0056ec  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
0056ee  7868              LDRB     r0,[r5,#1]  ; avt_stat
0056f0  4281              CMP      r1,r0
0056f2  d00b              BEQ      |L1.22284|
0056f4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0056f8  2902              CMP      r1,#2
0056fa  db07              BLT      |L1.22284|
;;;7064   	{
;;;7065   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
0056fc  2801              CMP      r0,#1
0056fe  d06f              BEQ      |L1.22496|
;;;7066   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
005700  2300              MOVS     r3,#0
005702  2202              MOVS     r2,#2
005704  210b              MOVS     r1,#0xb
005706  a0ab              ADR      r0,|L1.22964|
005708  f7fffffe          BL       snmp_trap_send
                  |L1.22284|
;;;7067   	}
;;;7068   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
00570c  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
00570e  78a8              LDRB     r0,[r5,#2]  ; avt_stat
005710  4281              CMP      r1,r0
005712  d00b              BEQ      |L1.22316|
005714  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
005718  2903              CMP      r1,#3
00571a  db07              BLT      |L1.22316|
;;;7069   	{
;;;7070   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
00571c  2801              CMP      r0,#1
00571e  d072              BEQ      |L1.22534|
;;;7071   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
005720  2300              MOVS     r3,#0
005722  2203              MOVS     r2,#3
005724  210b              MOVS     r1,#0xb
005726  a0a8              ADR      r0,|L1.22984|
005728  f7fffffe          BL       snmp_trap_send
                  |L1.22316|
;;;7072   	}
;;;7073   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
00572c  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
00572e  78e8              LDRB     r0,[r5,#3]  ; avt_stat
005730  4281              CMP      r1,r0
005732  d00b              BEQ      |L1.22348|
005734  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
005738  2904              CMP      r1,#4
00573a  db07              BLT      |L1.22348|
;;;7074   	{
;;;7075   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
00573c  2801              CMP      r0,#1
00573e  d079              BEQ      |L1.22580|
;;;7076   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
005740  2300              MOVS     r3,#0
005742  2204              MOVS     r2,#4
005744  210b              MOVS     r1,#0xb
005746  a0a5              ADR      r0,|L1.23004|
005748  f7fffffe          BL       snmp_trap_send
                  |L1.22348|
;;;7077   	}
;;;7078   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
00574c  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
00574e  7928              LDRB     r0,[r5,#4]  ; avt_stat
005750  4281              CMP      r1,r0
005752  d00b              BEQ      |L1.22380|
005754  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
005758  2905              CMP      r1,#5
00575a  db07              BLT      |L1.22380|
;;;7079   	{
;;;7080   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
00575c  2801              CMP      r0,#1
00575e  d071              BEQ      |L1.22596|
;;;7081   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
005760  2300              MOVS     r3,#0
005762  2205              MOVS     r2,#5
005764  210b              MOVS     r1,#0xb
005766  a0a2              ADR      r0,|L1.23024|
005768  f7fffffe          BL       snmp_trap_send
                  |L1.22380|
;;;7082   	}
;;;7083   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
00576c  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
00576e  7968              LDRB     r0,[r5,#5]  ; avt_stat
005770  4281              CMP      r1,r0
005772  d00b              BEQ      |L1.22412|
005774  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
005778  2906              CMP      r1,#6
00577a  db07              BLT      |L1.22412|
;;;7084   	{
;;;7085   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
00577c  2801              CMP      r0,#1
00577e  d068              BEQ      |L1.22610|
;;;7086   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
005780  2300              MOVS     r3,#0
005782  2206              MOVS     r2,#6
005784  210b              MOVS     r1,#0xb
005786  a09f              ADR      r0,|L1.23044|
005788  f7fffffe          BL       snmp_trap_send
                  |L1.22412|
;;;7087   	}
;;;7088   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
00578c  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
00578e  79a8              LDRB     r0,[r5,#6]  ; avt_stat
005790  4281              CMP      r1,r0
005792  d00b              BEQ      |L1.22444|
005794  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
005798  2907              CMP      r1,#7
00579a  db07              BLT      |L1.22444|
;;;7089   	{
;;;7090   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
00579c  2801              CMP      r0,#1
00579e  d05f              BEQ      |L1.22624|
;;;7091   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
0057a0  2300              MOVS     r3,#0
0057a2  2207              MOVS     r2,#7
0057a4  210b              MOVS     r1,#0xb
0057a6  a09c              ADR      r0,|L1.23064|
0057a8  f7fffffe          BL       snmp_trap_send
                  |L1.22444|
;;;7092   	}
;;;7093   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
0057ac  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
0057ae  79e8              LDRB     r0,[r5,#7]  ; avt_stat
0057b0  4281              CMP      r1,r0
0057b2  d00b              BEQ      |L1.22476|
0057b4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0057b8  2908              CMP      r1,#8
0057ba  db07              BLT      |L1.22476|
;;;7094   	{
;;;7095   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
0057bc  2801              CMP      r0,#1
0057be  d056              BEQ      |L1.22638|
;;;7096   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
0057c0  2300              MOVS     r3,#0
0057c2  2208              MOVS     r2,#8
0057c4  210b              MOVS     r1,#0xb
0057c6  a099              ADR      r0,|L1.23084|
0057c8  f7fffffe          BL       snmp_trap_send
                  |L1.22476|
;;;7097   	}
;;;7098   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
0057cc  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
0057ce  7a28              LDRB     r0,[r5,#8]  ; avt_stat
0057d0  4281              CMP      r1,r0
0057d2  d00e              BEQ      |L1.22514|
0057d4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0057d8  2909              CMP      r1,#9
0057da  db0a              BLT      |L1.22514|
;;;7099   	{
;;;7100   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
0057dc  e001              B        |L1.22498|
                  |L1.22494|
0057de  e013              B        |L1.22536|
                  |L1.22496|
0057e0  e019              B        |L1.22550|
                  |L1.22498|
0057e2  2801              CMP      r0,#1
0057e4  d04a              BEQ      |L1.22652|
;;;7101   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
0057e6  2300              MOVS     r3,#0
0057e8  2209              MOVS     r2,#9
0057ea  210b              MOVS     r1,#0xb
0057ec  a094              ADR      r0,|L1.23104|
0057ee  f7fffffe          BL       snmp_trap_send
                  |L1.22514|
;;;7102   	}
;;;7103   
;;;7104   for(i=0;i<12;i++)
0057f2  f04f0000          MOV      r0,#0
                  |L1.22518|
;;;7105   	{
;;;7106   	avt_stat_old[i]=avt_stat[i];
0057f6  5c29              LDRB     r1,[r5,r0]
0057f8  5431              STRB     r1,[r6,r0]
0057fa  f1000001          ADD      r0,r0,#1              ;7104
0057fe  b2c0              UXTB     r0,r0                 ;7104
005800  280c              CMP      r0,#0xc               ;7104
005802  d3f8              BCC      |L1.22518|
                  |L1.22532|
;;;7107   	}
;;;7108   }
005804  bd70              POP      {r4-r6,pc}
                  |L1.22534|
005806  e00e              B        |L1.22566|
                  |L1.22536|
005808  2301              MOVS     r3,#1                 ;7060
00580a  461a              MOV      r2,r3                 ;7060
00580c  210b              MOVS     r1,#0xb               ;7060
00580e  a091              ADR      r0,|L1.23124|
005810  f7fffffe          BL       snmp_trap_send
005814  e76a              B        |L1.22252|
                  |L1.22550|
005816  2301              MOVS     r3,#1                 ;7065
005818  2202              MOVS     r2,#2                 ;7065
00581a  210b              MOVS     r1,#0xb               ;7065
00581c  a092              ADR      r0,|L1.23144|
00581e  f7fffffe          BL       snmp_trap_send
005822  e773              B        |L1.22284|
005824  e006              B        |L1.22580|
                  |L1.22566|
005826  2301              MOVS     r3,#1                 ;7070
005828  2203              MOVS     r2,#3                 ;7070
00582a  210b              MOVS     r1,#0xb               ;7070
00582c  a093              ADR      r0,|L1.23164|
00582e  f7fffffe          BL       snmp_trap_send
005832  e77b              B        |L1.22316|
                  |L1.22580|
005834  2301              MOVS     r3,#1                 ;7075
005836  2204              MOVS     r2,#4                 ;7075
005838  210b              MOVS     r1,#0xb               ;7075
00583a  a095              ADR      r0,|L1.23184|
00583c  f7fffffe          BL       snmp_trap_send
005840  e784              B        |L1.22348|
005842  e7ff              B        |L1.22596|
                  |L1.22596|
005844  2301              MOVS     r3,#1                 ;7080
005846  2205              MOVS     r2,#5                 ;7080
005848  210b              MOVS     r1,#0xb               ;7080
00584a  a096              ADR      r0,|L1.23204|
00584c  f7fffffe          BL       snmp_trap_send
005850  e78c              B        |L1.22380|
                  |L1.22610|
005852  2301              MOVS     r3,#1                 ;7085
005854  2206              MOVS     r2,#6                 ;7085
005856  210b              MOVS     r1,#0xb               ;7085
005858  a097              ADR      r0,|L1.23224|
00585a  f7fffffe          BL       snmp_trap_send
00585e  e795              B        |L1.22412|
                  |L1.22624|
005860  2301              MOVS     r3,#1                 ;7090
005862  2207              MOVS     r2,#7                 ;7090
005864  210b              MOVS     r1,#0xb               ;7090
005866  a099              ADR      r0,|L1.23244|
005868  f7fffffe          BL       snmp_trap_send
00586c  e79e              B        |L1.22444|
                  |L1.22638|
00586e  2301              MOVS     r3,#1                 ;7095
005870  2208              MOVS     r2,#8                 ;7095
005872  210b              MOVS     r1,#0xb               ;7095
005874  a09a              ADR      r0,|L1.23264|
005876  f7fffffe          BL       snmp_trap_send
00587a  e7a7              B        |L1.22476|
                  |L1.22652|
00587c  2301              MOVS     r3,#1                 ;7100
00587e  2209              MOVS     r2,#9                 ;7100
005880  210b              MOVS     r1,#0xb               ;7100
005882  a09c              ADR      r0,|L1.23284|
005884  f7fffffe          BL       snmp_trap_send
005888  e7b3              B        |L1.22514|
;;;7109   
                          ENDP

                  bat_hndl PROC
;;;7110   //-----------------------------------------------
;;;7111   void bat_hndl(void)
00588a  b570              PUSH     {r4-r6,lr}
;;;7112   {
;;;7113   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7114   	{
;;;7115   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7116   		{
;;;7117   		char i;
;;;7118   		for(i=0;i<2;i++)
;;;7119   			{
;;;7120   			if(mess_data[1]&(1<<i))
;;;7121   				{
;;;7122   				bat[i]._cnt_to_block=0;
;;;7123        			bat[i]._rel_stat=0;
;;;7124        			}
;;;7125   			}
;;;7126   		}
;;;7127   	}
;;;7128   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7129   	{		
;;;7130   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7131   		{
;;;7132   		char i;
;;;7133   		for(i=0;i<2;i++)
;;;7134   			{
;;;7135   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7136   				{
;;;7137   				bat[i]._cnt_to_block=20;
;;;7138   				bat[i]._rel_stat=1;
;;;7139        			}
;;;7140   			}
;;;7141   		
;;;7142   		}		
;;;7143   	}*/
;;;7144   
;;;7145   if(mess_find_unvol(MESS2BAT_HNDL))
00588c  20c8              MOVS     r0,#0xc8
00588e  f7fffffe          BL       mess_find_unvol
;;;7146   	{ 
;;;7147   	char i;
;;;7148   	
;;;7149   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7150   		{
;;;7151   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7152   			{
;;;7153   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
005892  499d              LDR      r1,|L1.23304|
005894  2200              MOVS     r2,#0                 ;7151
005896  b3a8              CBZ      r0,|L1.22788|
005898  4b9c              LDR      r3,|L1.23308|
;;;7154   			}
;;;7155   		}
;;;7156   
;;;7157   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7158   		{
;;;7159   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7160   			{
;;;7161   			if(mess_data[1]&(1<<i))
00589a  2401              MOVS     r4,#1
00589c  6818              LDR      r0,[r3,#0]            ;7149  ; mess_data
00589e  28c9              CMP      r0,#0xc9              ;7149
0058a0  d01c              BEQ      |L1.22748|
0058a2  28ca              CMP      r0,#0xca              ;7157
0058a4  d02f              BEQ      |L1.22790|
;;;7162   				{
;;;7163   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7164   				}
;;;7165   			else bat[i]._cnt_to_block=0;
;;;7166   			}
;;;7167   		}
;;;7168   	else 
;;;7169   	 	{
;;;7170   		for(i=0;i<MAX_NUM_OF_BAT;i++)
0058a6  4610              MOV      r0,r2
                  |L1.22696|
;;;7171   			{
;;;7172   			bat[i]._cnt_to_block=0;
0058a8  eb000340          ADD      r3,r0,r0,LSL #1
0058ac  eb031300          ADD      r3,r3,r0,LSL #4
0058b0  f8012023          STRB     r2,[r1,r3,LSL #2]
0058b4  f1000001          ADD      r0,r0,#1              ;7170
0058b8  b2c0              UXTB     r0,r0                 ;7170
0058ba  2802              CMP      r0,#2                 ;7170
0058bc  d3f4              BCC      |L1.22696|
                  |L1.22718|
;;;7173   			}
;;;7174   
;;;7175   		}
;;;7176   	for(i=0;i<MAX_NUM_OF_BAT;i++)
0058be  f04f0000          MOV      r0,#0
                  |L1.22722|
;;;7177   		{
;;;7178   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
0058c2  eb000340          ADD      r3,r0,r0,LSL #1
0058c6  eb031300          ADD      r3,r3,r0,LSL #4
0058ca  f8115023          LDRB     r5,[r1,r3,LSL #2]
0058ce  2d14              CMP      r5,#0x14
0058d0  d939              BLS      |L1.22854|
0058d2  eb010383          ADD      r3,r1,r3,LSL #2
0058d6  f883403c          STRB     r4,[r3,#0x3c]
0058da  e038              B        |L1.22862|
                  |L1.22748|
0058dc  f04f0000          MOV      r0,#0                 ;7151
                  |L1.22752|
0058e0  eb000340          ADD      r3,r0,r0,LSL #1       ;7153
0058e4  eb031500          ADD      r5,r3,r0,LSL #4       ;7153
0058e8  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7153
0058ec  2b32              CMP      r3,#0x32              ;7153
0058ee  d203              BCS      |L1.22776|
0058f0  f1030301          ADD      r3,r3,#1              ;7153
0058f4  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7153
                  |L1.22776|
0058f8  f1000001          ADD      r0,r0,#1              ;7151
0058fc  b2c0              UXTB     r0,r0                 ;7151
0058fe  2802              CMP      r0,#2                 ;7151
005900  d3ee              BCC      |L1.22752|
005902  e7dc              B        |L1.22718|
                  |L1.22788|
005904  e029              B        |L1.22874|
                  |L1.22790|
005906  f04f0000          MOV      r0,#0                 ;7159
00590a  685e              LDR      r6,[r3,#4]            ;7161
                  |L1.22796|
00590c  fa04f300          LSL      r3,r4,r0              ;7161
005910  421e              TST      r6,r3                 ;7161
005912  d00c              BEQ      |L1.22830|
005914  eb000340          ADD      r3,r0,r0,LSL #1       ;7163
005918  eb031500          ADD      r5,r3,r0,LSL #4       ;7163
00591c  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7163
005920  2b32              CMP      r3,#0x32              ;7163
005922  d20a              BCS      |L1.22842|
005924  f1030301          ADD      r3,r3,#1              ;7163
005928  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7163
00592c  e005              B        |L1.22842|
                  |L1.22830|
00592e  eb000340          ADD      r3,r0,r0,LSL #1       ;7165
005932  eb031300          ADD      r3,r3,r0,LSL #4       ;7165
005936  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7165
                  |L1.22842|
00593a  f1000001          ADD      r0,r0,#1              ;7159
00593e  b2c0              UXTB     r0,r0                 ;7159
005940  2802              CMP      r0,#2                 ;7159
005942  d3e3              BCC      |L1.22796|
005944  e7bb              B        |L1.22718|
                  |L1.22854|
;;;7179   		else bat[i]._rel_stat=0;
005946  eb010383          ADD      r3,r1,r3,LSL #2
00594a  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.22862|
00594e  f1000001          ADD      r0,r0,#1              ;7176
005952  b2c0              UXTB     r0,r0                 ;7176
005954  2802              CMP      r0,#2                 ;7176
005956  d3b4              BCC      |L1.22722|
;;;7180   		}
;;;7181   
;;;7182   	}
;;;7183   
;;;7184   else 
;;;7185   	{
;;;7186   	char i;
;;;7187   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7188   		{
;;;7189   		bat[i]._cnt_to_block=0;
;;;7190   		bat[i]._rel_stat=0;
;;;7191   		}
;;;7192   
;;;7193   	}
;;;7194   
;;;7195   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7196   	{
;;;7197   	if(PARAM_BAT_ON)
;;;7198   		{
;;;7199   		char i;
;;;7200   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7201   			{
;;;7202   			if(mess_data[1]&(1<<i))
;;;7203   				{
;;;7204   				bat[i]._cnt_to_block=0;
;;;7205   				bat[i]._rel_stat=0;
;;;7206   				}
;;;7207   			}
;;;7208   		}
;;;7209   	} */
;;;7210   }
005958  e754              B        |L1.22532|
                  |L1.22874|
00595a  f04f0000          MOV      r0,#0                 ;7187
                  |L1.22878|
00595e  eb000340          ADD      r3,r0,r0,LSL #1       ;7189
005962  eb031300          ADD      r3,r3,r0,LSL #4       ;7189
005966  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7189
00596a  eb010383          ADD      r3,r1,r3,LSL #2       ;7190
00596e  f883203c          STRB     r2,[r3,#0x3c]         ;7190
005972  f1000001          ADD      r0,r0,#1              ;7187
005976  b2c0              UXTB     r0,r0                 ;7187
005978  2802              CMP      r0,#2                 ;7187
00597a  d3f0              BCC      |L1.22878|
00597c  e742              B        |L1.22532|
00597e  0000              DCW      0x0000
                  |L1.22912|
                          DCD      UB20
                  |L1.22916|
                          DCD      ||DU||
                  |L1.22920|
                          DCD      net_av
                  |L1.22924|
                          DCD      ||area_number.18||
                  |L1.22928|
                          DCD      eb2_data_short
                  |L1.22932|
                          DCD      avt_stat
                  |L1.22936|
                          DCD      avt_stat_old
                  |L1.22940|
                          DCD      NUMAVT
                  |L1.22944|
0059a0  4176746f          DCB      "Avtomat #1 is OFF",0
0059a4  6d617420
0059a8  23312069
0059ac  73204f46
0059b0  4600    
0059b2  00                DCB      0
0059b3  00                DCB      0
                  |L1.22964|
0059b4  4176746f          DCB      "Avtomat #2 is OFF",0
0059b8  6d617420
0059bc  23322069
0059c0  73204f46
0059c4  4600    
0059c6  00                DCB      0
0059c7  00                DCB      0
                  |L1.22984|
0059c8  4176746f          DCB      "Avtomat #3 is OFF",0
0059cc  6d617420
0059d0  23332069
0059d4  73204f46
0059d8  4600    
0059da  00                DCB      0
0059db  00                DCB      0
                  |L1.23004|
0059dc  4176746f          DCB      "Avtomat #4 is OFF",0
0059e0  6d617420
0059e4  23342069
0059e8  73204f46
0059ec  4600    
0059ee  00                DCB      0
0059ef  00                DCB      0
                  |L1.23024|
0059f0  4176746f          DCB      "Avtomat #5 is OFF",0
0059f4  6d617420
0059f8  23352069
0059fc  73204f46
005a00  4600    
005a02  00                DCB      0
005a03  00                DCB      0
                  |L1.23044|
005a04  4176746f          DCB      "Avtomat #6 is OFF",0
005a08  6d617420
005a0c  23362069
005a10  73204f46
005a14  4600    
005a16  00                DCB      0
005a17  00                DCB      0
                  |L1.23064|
005a18  4176746f          DCB      "Avtomat #7 is OFF",0
005a1c  6d617420
005a20  23372069
005a24  73204f46
005a28  4600    
005a2a  00                DCB      0
005a2b  00                DCB      0
                  |L1.23084|
005a2c  4176746f          DCB      "Avtomat #8 is OFF",0
005a30  6d617420
005a34  23382069
005a38  73204f46
005a3c  4600    
005a3e  00                DCB      0
005a3f  00                DCB      0
                  |L1.23104|
005a40  4176746f          DCB      "Avtomat #9 is OFF",0
005a44  6d617420
005a48  23392069
005a4c  73204f46
005a50  4600    
005a52  00                DCB      0
005a53  00                DCB      0
                  |L1.23124|
005a54  4176746f          DCB      "Avtomat #1 is ON ",0
005a58  6d617420
005a5c  23312069
005a60  73204f4e
005a64  2000    
005a66  00                DCB      0
005a67  00                DCB      0
                  |L1.23144|
005a68  4176746f          DCB      "Avtomat #2 is ON ",0
005a6c  6d617420
005a70  23322069
005a74  73204f4e
005a78  2000    
005a7a  00                DCB      0
005a7b  00                DCB      0
                  |L1.23164|
005a7c  4176746f          DCB      "Avtomat #3 is ON ",0
005a80  6d617420
005a84  23332069
005a88  73204f4e
005a8c  2000    
005a8e  00                DCB      0
005a8f  00                DCB      0
                  |L1.23184|
005a90  4176746f          DCB      "Avtomat #4 is ON ",0
005a94  6d617420
005a98  23342069
005a9c  73204f4e
005aa0  2000    
005aa2  00                DCB      0
005aa3  00                DCB      0
                  |L1.23204|
005aa4  4176746f          DCB      "Avtomat #5 is ON ",0
005aa8  6d617420
005aac  23352069
005ab0  73204f4e
005ab4  2000    
005ab6  00                DCB      0
005ab7  00                DCB      0
                  |L1.23224|
005ab8  4176746f          DCB      "Avtomat #6 is ON ",0
005abc  6d617420
005ac0  23362069
005ac4  73204f4e
005ac8  2000    
005aca  00                DCB      0
005acb  00                DCB      0
                  |L1.23244|
005acc  4176746f          DCB      "Avtomat #7 is ON ",0
005ad0  6d617420
005ad4  23372069
005ad8  73204f4e
005adc  2000    
005ade  00                DCB      0
005adf  00                DCB      0
                  |L1.23264|
005ae0  4176746f          DCB      "Avtomat #8 is ON ",0
005ae4  6d617420
005ae8  23382069
005aec  73204f4e
005af0  2000    
005af2  00                DCB      0
005af3  00                DCB      0
                  |L1.23284|
005af4  4176746f          DCB      "Avtomat #9 is ON ",0
005af8  6d617420
005afc  23392069
005b00  73204f4e
005b04  2000    
005b06  00                DCB      0
005b07  00                DCB      0
                  |L1.23304|
                          DCD      bat
                  |L1.23308|
                          DCD      mess_data
                          ENDP

                  klimat_hndl PROC
;;;7575   //-----------------------------------------------
;;;7576   void klimat_hndl(void)
005b10  e92d41f0          PUSH     {r4-r8,lr}
;;;7577   {
;;;7578   
;;;7579   
;;;7580   if(t_box>TBOXMAX)
005b14  4dfc              LDR      r5,|L1.24328|
005b16  48fd              LDR      r0,|L1.24332|
;;;7581   	{
;;;7582   	av_tbox_cnt++;
005b18  4cfd              LDR      r4,|L1.24336|
005b1a  f9b51000          LDRSH    r1,[r5,#0]            ;7580  ; t_box
005b1e  f9b02000          LDRSH    r2,[r0,#0]            ;7580  ; TBOXMAX
005b22  f9b40000          LDRSH    r0,[r4,#0]
005b26  4291              CMP      r1,r2                 ;7580
005b28  dd03              BLE      |L1.23346|
005b2a  f1000001          ADD      r0,r0,#1
005b2e  8020              STRH     r0,[r4,#0]
005b30  e003              B        |L1.23354|
                  |L1.23346|
;;;7583   	} 
;;;7584   else if(t_box<TBOXMAX)
005b32  da02              BGE      |L1.23354|
;;;7585   	{
;;;7586   	av_tbox_cnt--;
005b34  f1a00001          SUB      r0,r0,#1
005b38  8020              STRH     r0,[r4,#0]
                  |L1.23354|
;;;7587   	}
;;;7588   gran(&av_tbox_cnt,0,6);
005b3a  2206              MOVS     r2,#6
005b3c  2100              MOVS     r1,#0
005b3e  48f4              LDR      r0,|L1.24336|
005b40  f7fffffe          BL       gran
;;;7589   
;;;7590   if(av_tbox_cnt>5)
005b44  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;7591   	{
;;;7592   	av_tbox_stat=atsON;
005b48  49f2              LDR      r1,|L1.24340|
005b4a  2601              MOVS     r6,#1
005b4c  2805              CMP      r0,#5                 ;7590
005b4e  dd00              BLE      |L1.23378|
005b50  700e              STRB     r6,[r1,#0]
                  |L1.23378|
005b52  2400              MOVS     r4,#0                 ;7588
;;;7593   	}
;;;7594   if(av_tbox_cnt<1)
005b54  2801              CMP      r0,#1
005b56  da00              BGE      |L1.23386|
;;;7595   	{
;;;7596   	av_tbox_stat=atsOFF;
005b58  700c              STRB     r4,[r1,#0]
                  |L1.23386|
;;;7597   	}
;;;7598   
;;;7599   if(t_box<(TBOXREG-2))
005b5a  49ef              LDR      r1,|L1.24344|
005b5c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
;;;7600   	{
;;;7601   	if(t_box_cnt<30)
005b60  4aee              LDR      r2,|L1.24348|
005b62  f9b11000          LDRSH    r1,[r1,#0]            ;7599  ; TBOXREG
;;;7602   		{
;;;7603   		t_box_cnt++;
;;;7604   		if(t_box_cnt>=30)
;;;7605   			{
;;;7606   			main_vent_pos--;
005b66  4fee              LDR      r7,|L1.24352|
005b68  1e8b              SUBS     r3,r1,#2              ;7599
005b6a  4298              CMP      r0,r3                 ;7599
005b6c  da0f              BGE      |L1.23438|
005b6e  f9921000          LDRSB    r1,[r2,#0]            ;7601  ; t_box_cnt
005b72  291e              CMP      r1,#0x1e              ;7601
005b74  da1e              BGE      |L1.23476|
005b76  f1010101          ADD      r1,r1,#1              ;7603
005b7a  b249              SXTB     r1,r1                 ;7603
005b7c  7011              STRB     r1,[r2,#0]            ;7603
005b7e  291e              CMP      r1,#0x1e              ;7604
005b80  db18              BLT      |L1.23476|
005b82  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
005b84  f1a10101          SUB      r1,r1,#1
005b88  8039              STRH     r1,[r7,#0]
;;;7607   			t_box_cnt=0;
005b8a  7014              STRB     r4,[r2,#0]
005b8c  e012              B        |L1.23476|
                  |L1.23438|
;;;7608   			}
;;;7609   		}
;;;7610   	}
;;;7611   else if(t_box>(TBOXREG))
005b8e  4288              CMP      r0,r1
005b90  dd0f              BLE      |L1.23474|
;;;7612   	{
;;;7613   	if(t_box_cnt<30)
005b92  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
005b96  291e              CMP      r1,#0x1e
005b98  da0c              BGE      |L1.23476|
;;;7614   		{
;;;7615   		t_box_cnt++;
005b9a  f1010101          ADD      r1,r1,#1
005b9e  b249              SXTB     r1,r1
005ba0  7011              STRB     r1,[r2,#0]
;;;7616   		if(t_box_cnt>=30)
005ba2  291e              CMP      r1,#0x1e
005ba4  db06              BLT      |L1.23476|
;;;7617   			{
;;;7618   			main_vent_pos++;
005ba6  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
005ba8  f1010101          ADD      r1,r1,#1
005bac  8039              STRH     r1,[r7,#0]
;;;7619   			t_box_cnt=0;
005bae  7014              STRB     r4,[r2,#0]
005bb0  e000              B        |L1.23476|
                  |L1.23474|
;;;7620   			}
;;;7621   		}
;;;7622   	}
;;;7623   else
;;;7624   	{
;;;7625   	t_box_cnt=0;
005bb2  7014              STRB     r4,[r2,#0]
                  |L1.23476|
;;;7626   	}
;;;7627   
;;;7628   #ifndef UKU_KONTUR
;;;7629   if(t_box>TBOXVENTMAX)gran(&main_vent_pos,0,20); 
005bb4  49db              LDR      r1,|L1.24356|
005bb6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
005bba  4288              CMP      r0,r1
005bbc  dd05              BLE      |L1.23498|
005bbe  2214              MOVS     r2,#0x14
005bc0  2100              MOVS     r1,#0
005bc2  48d7              LDR      r0,|L1.24352|
005bc4  f7fffffe          BL       gran
005bc8  e007              B        |L1.23514|
                  |L1.23498|
;;;7630   else gran(&main_vent_pos,0,pos_vent+9);
005bca  48d7              LDR      r0,|L1.24360|
005bcc  2100              MOVS     r1,#0
005bce  8800              LDRH     r0,[r0,#0]  ; pos_vent
005bd0  3009              ADDS     r0,r0,#9
005bd2  b202              SXTH     r2,r0
005bd4  48d2              LDR      r0,|L1.24352|
005bd6  f7fffffe          BL       gran
                  |L1.23514|
;;;7631   
;;;7632   if((mess_find_unvol(MESS2VENT_HNDL))&&(mess_data[0]==PARAM_VENT_CB))
005bda  20f0              MOVS     r0,#0xf0
005bdc  f7fffffe          BL       mess_find_unvol
005be0  b128              CBZ      r0,|L1.23534|
005be2  48d2              LDR      r0,|L1.24364|
005be4  6801              LDR      r1,[r0,#0]  ; mess_data
005be6  29f1              CMP      r1,#0xf1
005be8  d101              BNE      |L1.23534|
;;;7633   	{
;;;7634   	main_vent_pos=mess_data[1];
005bea  6840              LDR      r0,[r0,#4]  ; mess_data
005bec  8038              STRH     r0,[r7,#0]
                  |L1.23534|
;;;7635   	}
;;;7636   
;;;7637   
;;;7638   if(main_vent_pos<=1)mixer_vent_stat=mvsON;
005bee  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
005bf2  48cf              LDR      r0,|L1.24368|
005bf4  2901              CMP      r1,#1
005bf6  dc01              BGT      |L1.23548|
005bf8  7006              STRB     r6,[r0,#0]
005bfa  e000              B        |L1.23550|
                  |L1.23548|
;;;7639   else mixer_vent_stat=mvsOFF;
005bfc  7004              STRB     r4,[r0,#0]
                  |L1.23550|
;;;7640   #endif
;;;7641   
;;;7642   #ifdef UKU_KONTUR
;;;7643   
;;;7644   if(t_box>TBOXVENTON) t_box_vent_on_cnt++;
;;;7645   else if(t_box<TBOXVENTOFF) t_box_vent_on_cnt--;
;;;7646   gran(&t_box_vent_on_cnt,0,10);
;;;7647   
;;;7648   if(t_box_vent_on_cnt>9) vent_stat_k=vsON;
;;;7649   else if(t_box_vent_on_cnt<1) vent_stat_k=vsOFF;
;;;7650   
;;;7651   if(t_box<TBOXWARMON) t_box_warm_on_cnt++;
;;;7652   else if(t_box>TBOXWARMOFF) t_box_warm_on_cnt--;
;;;7653   gran(&t_box_warm_on_cnt,0,10);
;;;7654   
;;;7655   if(t_box_warm_on_cnt>9) warm_stat_k=wsON;
;;;7656   else if(t_box_warm_on_cnt<1) warm_stat_k=wsOFF;
;;;7657   
;;;7658   #endif
;;;7659   
;;;7660   if((TBATDISABLE>=50) && (TBATDISABLE<=90))
005bfe  48cd              LDR      r0,|L1.24372|
;;;7661   	{
;;;7662   	if(t_box>TBATDISABLE)
;;;7663   		{
;;;7664   		tbatdisable_cnt++;
;;;7665   		}
;;;7666   	if(t_box<TBATENABLE)
;;;7667   		{
;;;7668   		tbatdisable_cnt--;
;;;7669   		}
;;;7670   	gran(&tbatdisable_cnt,0,6);
;;;7671   
;;;7672   	if(tbatdisable_cnt>5)
;;;7673   		{
;;;7674   		tbatdisable_stat=tbdsOFF;
005c00  f8df8334          LDR      r8,|L1.24376|
005c04  f9b00000          LDRSH    r0,[r0,#0]            ;7660  ; TBATDISABLE
005c08  f1a00132          SUB      r1,r0,#0x32           ;7660
005c0c  2928              CMP      r1,#0x28              ;7660
005c0e  d821              BHI      |L1.23636|
005c10  f9b51000          LDRSH    r1,[r5,#0]            ;7662  ; t_box
005c14  4fc9              LDR      r7,|L1.24380|
005c16  4281              CMP      r1,r0                 ;7662
005c18  dd03              BLE      |L1.23586|
005c1a  8838              LDRH     r0,[r7,#0]            ;7664  ; tbatdisable_cnt
005c1c  f1000001          ADD      r0,r0,#1              ;7664
005c20  8038              STRH     r0,[r7,#0]            ;7664
                  |L1.23586|
005c22  48c7              LDR      r0,|L1.24384|
005c24  f9b00000          LDRSH    r0,[r0,#0]            ;7666  ; TBATENABLE
005c28  4281              CMP      r1,r0                 ;7666
005c2a  da03              BGE      |L1.23604|
005c2c  8838              LDRH     r0,[r7,#0]            ;7668  ; tbatdisable_cnt
005c2e  f1a00001          SUB      r0,r0,#1              ;7668
005c32  8038              STRH     r0,[r7,#0]            ;7668
                  |L1.23604|
005c34  2206              MOVS     r2,#6                 ;7670
005c36  2100              MOVS     r1,#0                 ;7670
005c38  48c0              LDR      r0,|L1.24380|
005c3a  f7fffffe          BL       gran
005c3e  f9b70000          LDRSH    r0,[r7,#0]            ;7672  ; tbatdisable_cnt
005c42  2805              CMP      r0,#5                 ;7672
005c44  dd01              BLE      |L1.23626|
005c46  f8886000          STRB     r6,[r8,#0]
                  |L1.23626|
;;;7675   		}
;;;7676   	if(tbatdisable_cnt<1)
005c4a  2801              CMP      r0,#1
005c4c  da04              BGE      |L1.23640|
;;;7677   		{
;;;7678   		tbatdisable_stat=tbdsON;
005c4e  f8884000          STRB     r4,[r8,#0]
005c52  e001              B        |L1.23640|
                  |L1.23636|
;;;7679   		}
;;;7680   	}
;;;7681   else 
;;;7682   	{
;;;7683   	tbatdisable_stat=tbdsON;
005c54  f8884000          STRB     r4,[r8,#0]
                  |L1.23640|
;;;7684   	}
;;;7685   
;;;7686   if((TLOADDISABLE>=50) && (TLOADDISABLE<=80))
005c58  48ba              LDR      r0,|L1.24388|
;;;7687   	{
;;;7688   	if(t_box>TLOADDISABLE)
;;;7689   		{
;;;7690   		tloaddisable_cnt++;
;;;7691   		}
;;;7692   	if(t_box<TLOADENABLE)
;;;7693   		{
;;;7694   		tloaddisable_cnt--;
;;;7695   		}
;;;7696   	gran(&tloaddisable_cnt,0,6);
;;;7697   
;;;7698   	if(tloaddisable_cnt>5)
;;;7699   		{
;;;7700   		tloaddisable_stat=tldsOFF;
005c5a  4fbb              LDR      r7,|L1.24392|
005c5c  f9b00000          LDRSH    r0,[r0,#0]            ;7686  ; TLOADDISABLE
005c60  f1a00132          SUB      r1,r0,#0x32           ;7686
005c64  291e              CMP      r1,#0x1e              ;7686
005c66  d81f              BHI      |L1.23720|
005c68  f9b51000          LDRSH    r1,[r5,#0]            ;7688  ; t_box
005c6c  4db7              LDR      r5,|L1.24396|
005c6e  4281              CMP      r1,r0                 ;7688
005c70  dd03              BLE      |L1.23674|
005c72  8828              LDRH     r0,[r5,#0]            ;7690  ; tloaddisable_cnt
005c74  f1000001          ADD      r0,r0,#1              ;7690
005c78  8028              STRH     r0,[r5,#0]            ;7690
                  |L1.23674|
005c7a  48b5              LDR      r0,|L1.24400|
005c7c  f9b00000          LDRSH    r0,[r0,#0]            ;7692  ; TLOADENABLE
005c80  4281              CMP      r1,r0                 ;7692
005c82  da03              BGE      |L1.23692|
005c84  8828              LDRH     r0,[r5,#0]            ;7694  ; tloaddisable_cnt
005c86  f1a00001          SUB      r0,r0,#1              ;7694
005c8a  8028              STRH     r0,[r5,#0]            ;7694
                  |L1.23692|
005c8c  2206              MOVS     r2,#6                 ;7696
005c8e  2100              MOVS     r1,#0                 ;7696
005c90  48ae              LDR      r0,|L1.24396|
005c92  f7fffffe          BL       gran
005c96  f9b50000          LDRSH    r0,[r5,#0]            ;7698  ; tloaddisable_cnt
005c9a  2805              CMP      r0,#5                 ;7698
005c9c  dd00              BLE      |L1.23712|
005c9e  703e              STRB     r6,[r7,#0]
                  |L1.23712|
;;;7701   		}
;;;7702   	if(tloaddisable_cnt<1)
005ca0  2801              CMP      r0,#1
005ca2  da00              BGE      |L1.23718|
;;;7703   		{
;;;7704   		tloaddisable_stat=tldsON;
005ca4  703c              STRB     r4,[r7,#0]
                  |L1.23718|
;;;7705   		}
;;;7706   	}
;;;7707   else 
;;;7708   	{
;;;7709   	tloaddisable_stat=tldsON;
;;;7710   	}
;;;7711   
;;;7712   }
005ca6  e4f7              B        |L1.22168|
                  |L1.23720|
005ca8  703c              STRB     r4,[r7,#0]            ;7709
005caa  e4f5              B        |L1.22168|
;;;7713   #endif
                          ENDP

                  bat_drv PROC
;;;7849   //-----------------------------------------------
;;;7850   void bat_drv(char in)
005cac  e92d4ffe          PUSH     {r1-r11,lr}
;;;7851   {
005cb0  4605              MOV      r5,r0
;;;7852   unsigned short /*tempUS,*/tempUS_;
;;;7853   unsigned long tempUL,tempUL_;
;;;7854   unsigned short b_zar;
;;;7855   //static unsigned short time_cnt[2];
;;;7856   
;;;7857   
;;;7858   
;;;7859   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
005cb2  49a8              LDR      r1,|L1.24404|
005cb4  f9310015          LDRSH    r0,[r1,r5,LSL #1]
005cb8  b118              CBZ      r0,|L1.23746|
005cba  f1a00001          SUB      r0,r0,#1
005cbe  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.23746|
;;;7860   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
005cc2  4aa4              LDR      r2,|L1.24404|
005cc4  1d12              ADDS     r2,r2,#4
005cc6  f9320015          LDRSH    r0,[r2,r5,LSL #1]
005cca  b118              CBZ      r0,|L1.23764|
005ccc  f1a00001          SUB      r0,r0,#1
005cd0  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.23764|
;;;7861   
;;;7862   
;;;7863   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
005cd4  eb050045          ADD      r0,r5,r5,LSL #1
005cd8  4b9f              LDR      r3,|L1.24408|
005cda  eb001005          ADD      r0,r0,r5,LSL #4
005cde  eb030480          ADD      r4,r3,r0,LSL #2
005ce2  4b9e              LDR      r3,|L1.24412|
005ce4  9002              STR      r0,[sp,#8]
005ce6  f9b40008          LDRSH    r0,[r4,#8]
005cea  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
005cee  2364              MOVS     r3,#0x64
005cf0  42b0              CMP      r0,r6
005cf2  dd01              BLE      |L1.23800|
005cf4  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.23800|
;;;7864   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
005cf8  2800              CMP      r0,#0
005cfa  da01              BGE      |L1.23808|
005cfc  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.23808|
;;;7865   
;;;7866   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7867        {
;;;7868        if(!cntrl_stat_blok_cnt_)
005d00  4894              LDR      r0,|L1.24404|
005d02  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7866
005d06  38b4              SUBS     r0,r0,#0xb4
005d08  2700              MOVS     r7,#0
005d0a  b14b              CBZ      r3,|L1.23840|
005d0c  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7866
005d10  b133              CBZ      r3,|L1.23840|
005d12  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
005d16  b1a3              CBZ      r3,|L1.23874|
;;;7869             {
;;;7870             cntrl_stat_blok_cnt_=600; 
;;;7871             cntrl_stat_blok_cnt_plus[in]=0;
;;;7872             cntrl_stat_blok_cnt_minus[in]=0;
;;;7873             }
;;;7874        else cntrl_stat_blok_cnt=3000;
005d18  f64031b8          MOV      r1,#0xbb8
005d1c  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.23840|
;;;7875        }
;;;7876   cntrl_stat_blok_cnt=0;
005d20  f8a07070          STRH     r7,[r0,#0x70]
;;;7877   
;;;7878   if(++(bat[in]._time_cnt)>=10)
005d24  f894003e          LDRB     r0,[r4,#0x3e]
005d28  1c40              ADDS     r0,r0,#1
005d2a  b2c0              UXTB     r0,r0
005d2c  f884003e          STRB     r0,[r4,#0x3e]
005d30  280a              CMP      r0,#0xa
005d32  d301              BCC      |L1.23864|
;;;7879   	{
;;;7880   	bat[in]._time_cnt=0;
005d34  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.23864|
;;;7881   	//bat[in]._zar_cnt++;
;;;7882   	}
;;;7883   
;;;7884   if(main_10Hz_cnt==50)
005d38  4e89              LDR      r6,|L1.24416|
005d3a  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005d3c  2832              CMP      r0,#0x32
005d3e  d009              BEQ      |L1.23892|
005d40  e017              B        |L1.23922|
                  |L1.23874|
005d42  f44f7316          MOV      r3,#0x258             ;7870
005d46  f8a03072          STRH     r3,[r0,#0x72]         ;7870
005d4a  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7871
005d4e  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7872
005d52  e7e5              B        |L1.23840|
                  |L1.23892|
;;;7885   	{
;;;7886   	if(!bat[in]._rel_stat)
005d54  f894003c          LDRB     r0,[r4,#0x3c]
005d58  b958              CBNZ     r0,|L1.23922|
;;;7887   		{
;;;7888   		
;;;7889   		if(bat[in]._Ub<80) 
005d5a  f9b40002          LDRSH    r0,[r4,#2]
005d5e  2850              CMP      r0,#0x50
005d60  da07              BGE      |L1.23922|
;;;7890   			{
;;;7891   			
;;;7892   			if(!(bat[in]._av&1))
005d62  f894003d          LDRB     r0,[r4,#0x3d]
005d66  07c0              LSLS     r0,r0,#31
005d68  d103              BNE      |L1.23922|
;;;7893   				{
;;;7894   				avar_bat_hndl(in,1);
005d6a  2101              MOVS     r1,#1
005d6c  4628              MOV      r0,r5
005d6e  f7fffffe          BL       avar_bat_hndl
                  |L1.23922|
;;;7895   				//if(in==0)plazma_bat++;
;;;7896   				}
;;;7897   			}				
;;;7898   
;;;7899   		}
;;;7900   	}
;;;7901   
;;;7902   if(main_10Hz_cnt>200)
005d72  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7903   	{
;;;7904   	if(abs(bat[in]._Ib)>IKB) 
005d76  4e7b              LDR      r6,|L1.24420|
005d78  28c8              CMP      r0,#0xc8              ;7902
005d7a  dd0f              BLE      |L1.23964|
005d7c  f9b40008          LDRSH    r0,[r4,#8]
005d80  f7fffffe          BL       abs
005d84  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005d88  4288              CMP      r0,r1
005d8a  dd07              BLE      |L1.23964|
;;;7905   		{
;;;7906   		if((bat[in]._av&1))avar_bat_hndl(in,0);
005d8c  f894003d          LDRB     r0,[r4,#0x3d]
005d90  07c0              LSLS     r0,r0,#31
005d92  d003              BEQ      |L1.23964|
005d94  2100              MOVS     r1,#0
005d96  4628              MOV      r0,r5
005d98  f7fffffe          BL       avar_bat_hndl
                  |L1.23964|
;;;7907   		}
;;;7908   	}
;;;7909   
;;;7910   #ifdef APSENERGIA
;;;7911   //if(bat[in]._Ib>(-IKB))
;;;7912   
;;;7913   
;;;7914   #endif
;;;7915   
;;;7916   if(bat[in]._Ib>(-IKB))
005d9c  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005da0  f9b40008          LDRSH    r0,[r4,#8]
005da4  4249              RSBS     r1,r1,#0
005da6  4288              CMP      r0,r1
005da8  dd14              BLE      |L1.24020|
;;;7917   	{
;;;7918   	if(bat[in]._cnt_wrk<10)
005daa  7b60              LDRB     r0,[r4,#0xd]
005dac  280a              CMP      r0,#0xa
005dae  d20d              BCS      |L1.24012|
;;;7919   		{
;;;7920   		bat[in]._cnt_wrk++;
005db0  f1000001          ADD      r0,r0,#1
005db4  b2c0              UXTB     r0,r0
005db6  7360              STRB     r0,[r4,#0xd]
;;;7921   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
005db8  280a              CMP      r0,#0xa
005dba  d371              BCC      |L1.24224|
005dbc  7ba0              LDRB     r0,[r4,#0xe]
005dbe  2800              CMP      r0,#0
005dc0  d06e              BEQ      |L1.24224|
;;;7922   			{
;;;7923   			bat[in]._wrk=0;
005dc2  73a7              STRB     r7,[r4,#0xe]
;;;7924   			//beep_init(0x7L,'O');
;;;7925   			//wrk_mem_hndl(0);
;;;7926   			wrk_mem_hndl(in);
005dc4  4628              MOV      r0,r5
005dc6  f7fffffe          BL       wrk_mem_hndl
005dca  e069              B        |L1.24224|
                  |L1.24012|
;;;7927   			//plazma++;
;;;7928   			}
;;;7929   		}
;;;7930   	else bat[in]._cnt_wrk=10;	
005dcc  f04f000a          MOV      r0,#0xa
005dd0  7360              STRB     r0,[r4,#0xd]
005dd2  e065              B        |L1.24224|
                  |L1.24020|
;;;7931   	}	
;;;7932   
;;;7933   else if(bat[in]._Ib<(-IKB))
005dd4  da64              BGE      |L1.24224|
;;;7934   	{
;;;7935   	if(bat[in]._cnt_wrk)
005dd6  7b60              LDRB     r0,[r4,#0xd]
005dd8  b3f0              CBZ      r0,|L1.24152|
;;;7936   		{
;;;7937   		bat[in]._cnt_wrk--;
005dda  f1a00001          SUB      r0,r0,#1
005dde  b2c0              UXTB     r0,r0
005de0  7360              STRB     r0,[r4,#0xd]
;;;7938   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005de2  bbc8              CBNZ     r0,|L1.24152|
005de4  7ba0              LDRB     r0,[r4,#0xe]
005de6  bbb8              CBNZ     r0,|L1.24152|
;;;7939   			{
;;;7940   			bat[in]._wrk=1;
005de8  f04f0001          MOV      r0,#1
005dec  73a0              STRB     r0,[r4,#0xe]
;;;7941   
;;;7942   				{
;;;7943   				char temp;
;;;7944   				signed short temp_temp;
;;;7945   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
005dee  485e              LDR      r0,|L1.24424|
005df0  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005df2  f1000001          ADD      r0,r0,#1
005df6  f0000007          AND      r0,r0,#7
005dfa  eb040040          ADD      r0,r4,r0,LSL #1
005dfe  8c00              LDRH     r0,[r0,#0x20]
005e00  9000              STR      r0,[sp,#0]
;;;7946   			 
;;;7947   				temp=LPC_RTC->YEAR;
005e02  4e5a              LDR      r6,|L1.24428|
005e04  8bb0              LDRH     r0,[r6,#0x1c]
005e06  9001              STR      r0,[sp,#4]
;;;7948   				gran_char((signed char*)&temp,1,99);
005e08  f04f0263          MOV      r2,#0x63
005e0c  f04f0101          MOV      r1,#1
005e10  a801              ADD      r0,sp,#4
005e12  f7fffffe          BL       gran_char
;;;7949   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005e16  f104041c          ADD      r4,r4,#0x1c
005e1a  f89d0004          LDRB     r0,[sp,#4]
005e1e  7620              STRB     r0,[r4,#0x18]
;;;7950   			
;;;7951   				temp=LPC_RTC->MONTH;
005e20  7e30              LDRB     r0,[r6,#0x18]
005e22  9001              STR      r0,[sp,#4]
;;;7952   				gran_char((signed char*)&temp,1,12);
005e24  f04f020c          MOV      r2,#0xc
005e28  f04f0101          MOV      r1,#1
005e2c  a801              ADD      r0,sp,#4
005e2e  f7fffffe          BL       gran_char
;;;7953   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
005e32  f89d0004          LDRB     r0,[sp,#4]
005e36  7660              STRB     r0,[r4,#0x19]
;;;7954   			
;;;7955   				temp=LPC_RTC->DOM;
005e38  7b30              LDRB     r0,[r6,#0xc]
005e3a  9001              STR      r0,[sp,#4]
;;;7956   				gran_char((signed char*)&temp,1,31);
005e3c  221f              MOVS     r2,#0x1f
005e3e  2101              MOVS     r1,#1
005e40  a801              ADD      r0,sp,#4
005e42  f7fffffe          BL       gran_char
;;;7957   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
005e46  f89d0004          LDRB     r0,[sp,#4]
005e4a  76a0              STRB     r0,[r4,#0x1a]
;;;7958   				
;;;7959   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
005e4c  f89d0000          LDRB     r0,[sp,#0]
005e50  76e0              STRB     r0,[r4,#0x1b]
;;;7960   
;;;7961   				temp=LPC_RTC->HOUR;
005e52  7a30              LDRB     r0,[r6,#8]
005e54  9001              STR      r0,[sp,#4]
;;;7962   				gran_char((signed char*)&temp,0,23);
005e56  e000              B        |L1.24154|
                  |L1.24152|
005e58  e022              B        |L1.24224|
                  |L1.24154|
005e5a  2217              MOVS     r2,#0x17
005e5c  2100              MOVS     r1,#0
005e5e  a801              ADD      r0,sp,#4
005e60  f7fffffe          BL       gran_char
;;;7963   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
005e64  f89d0004          LDRB     r0,[sp,#4]
005e68  7720              STRB     r0,[r4,#0x1c]
;;;7964                  	
;;;7965   				temp=LPC_RTC->MIN;
005e6a  7930              LDRB     r0,[r6,#4]
005e6c  9001              STR      r0,[sp,#4]
;;;7966   				gran_char((signed char*)&temp,0,59);
005e6e  223b              MOVS     r2,#0x3b
005e70  2100              MOVS     r1,#0
005e72  a801              ADD      r0,sp,#4
005e74  f7fffffe          BL       gran_char
;;;7967   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
005e78  f89d0004          LDRB     r0,[sp,#4]
005e7c  7760              STRB     r0,[r4,#0x1d]
;;;7968   	          
;;;7969   				temp=LPC_RTC->SEC;
005e7e  7830              LDRB     r0,[r6,#0]
005e80  9001              STR      r0,[sp,#4]
;;;7970   				gran_char((signed char*)&temp,0,59);
005e82  223b              MOVS     r2,#0x3b
005e84  2100              MOVS     r1,#0
005e86  a801              ADD      r0,sp,#4
005e88  f7fffffe          BL       gran_char
;;;7971   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005e8c  f89d0004          LDRB     r0,[sp,#4]
005e90  77a0              STRB     r0,[r4,#0x1e]
;;;7972   			
;;;7973   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005e92  f89d0001          LDRB     r0,[sp,#1]
005e96  77e0              STRB     r0,[r4,#0x1f]
;;;7974   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005e98  8027              STRH     r7,[r4,#0]
;;;7975   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005e9a  8067              STRH     r7,[r4,#2]
005e9c  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.24224|
;;;7976   				}
;;;7977   	
;;;7978   			}
;;;7979   
;;;7980   		}
;;;7981   	else bat[in]._cnt_wrk=0;	 
;;;7982   	
;;;7983   	}					
;;;7984   
;;;7985   /*
;;;7986   if(Ibat>=(-IKB))
;;;7987   	{
;;;7988   	if(cnt_wrk<10)
;;;7989   		{
;;;7990   		cnt_wrk++;
;;;7991   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7992   			{
;;;7993   			wrk=wrkOFF;
;;;7994   			//beep_init(0x7L,'O');
;;;7995   			wrk_mem_hndl(ibat_integr);
;;;7996   			}
;;;7997   		}
;;;7998   	else cnt_wrk=10;	
;;;7999   	}	
;;;8000   
;;;8001   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8002   	{
;;;8003   	if(cnt_wrk)
;;;8004   		{
;;;8005   		cnt_wrk--;
;;;8006   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8007   			{
;;;8008   			char temp;
;;;8009   			signed short temp_temp;
;;;8010   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8011   			 
;;;8012   			wrk=wrkON;
;;;8013   			
;;;8014   			temp=_year;
;;;8015   			gran_char(&temp,1,99);
;;;8016   			*((char*)(&(wrk_date[0])))=temp;
;;;8017   			
;;;8018   			temp=_month;
;;;8019   			gran_char(&temp,1,12);
;;;8020   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8021   			
;;;8022   			temp=_date;
;;;8023   			gran_char(&temp,1,31);
;;;8024   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8025   				
;;;8026   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8027   
;;;8028   			temp=_hour;
;;;8029   			gran_char(&temp,0,23);
;;;8030   			*((char*)(&(wrk_date[1])))=temp;
;;;8031                  
;;;8032   			temp=_min;
;;;8033   			gran_char(&temp,0,59);
;;;8034   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8035   	          
;;;8036   			temp=_sec;
;;;8037   			gran_char(&temp,0,59);
;;;8038   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8039   			
;;;8040   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8041   
;;;8042   			
;;;8043   			//beep_init(0xFL,'O'); 
;;;8044   			ibat_integr=0;
;;;8045   			ibat_integr_=0;
;;;8046   			}
;;;8047   		}
;;;8048   	else cnt_wrk=0;	 
;;;8049   	
;;;8050   	}
;;;8051   if(wrk==wrkON)
;;;8052   	{
;;;8053   	ibat_integr_+=-Ibat;
;;;8054   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8055   		{
;;;8056   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8057   		ibat_integr++;
;;;8058   		}
;;;8059   	}
;;;8060   
;;;8061   */
;;;8062   
;;;8063   
;;;8064   /*if(bat[in]._cnt_to_block)
;;;8065   	{
;;;8066   	bat[in]._cnt_to_block--;
;;;8067   	if(!(bat[in]._cnt_to_block))
;;;8068   		{
;;;8069   		//bat[in]._rel_stat=1;
;;;8070   		}
;;;8071   	}
;;;8072   */
;;;8073   
;;;8074   
;;;8075   
;;;8076   
;;;8077   //unsigned int tempUI,tempUI_;
;;;8078   //unsigned int b_zar; 
;;;8079   //char i;
;;;8080   //Ibat[0]=5000;                     
;;;8081   
;;;8082   
;;;8083                               
;;;8084   if(bat[in]._time_cnt==0)
;;;8085   	{
;;;8086   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8087   	
;;;8088   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005ea0  f64848a0          MOV      r8,#0x8ca0
005ea4  f894003e          LDRB     r0,[r4,#0x3e]         ;8084
005ea8  bb60              CBNZ     r0,|L1.24324|
005eaa  f9b41008          LDRSH    r1,[r4,#8]            ;8086
005eae  6960              LDR      r0,[r4,#0x14]         ;8086
005eb0  4408              ADD      r0,r0,r1              ;8086
005eb2  6160              STR      r0,[r4,#0x14]         ;8086
;;;8089   		{
;;;8090   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8091   		else tempUS_=BAT_C_REAL[in];
;;;8092   		
;;;8093   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005eb4  f8df90b8          LDR      r9,|L1.24432|
005eb8  f8dfa0b8          LDR      r10,|L1.24436|
005ebc  f2455b55          MOV      r11,#0x5555           ;8090
005ec0  4540              CMP      r0,r8                 ;8088
005ec2  db64              BLT      |L1.24462|
005ec4  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8090
005ec8  4558              CMP      r0,r11                ;8090
005eca  d103              BNE      |L1.24276|
005ecc  482a              LDR      r0,|L1.24440|
005ece  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8090
005ed2  e001              B        |L1.24280|
                  |L1.24276|
005ed4  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8091
                  |L1.24280|
005ed8  f8390015          LDRH     r0,[r9,r5,LSL #1]
005edc  f7fffffe          BL       lc640_read_int
005ee0  b280              UXTH     r0,r0
;;;8094   
;;;8095   		if(b_zar<(tempUS_/**10*/))
005ee2  42b0              CMP      r0,r6
005ee4  d24a              BCS      |L1.24444|
;;;8096   			{
;;;8097   			bat[in]._zar_cnt-=AH_CONSTANT;
005ee6  6961              LDR      r1,[r4,#0x14]
005ee8  f5a14100          SUB      r1,r1,#0x8000
005eec  f5a1614a          SUB      r1,r1,#0xca0
005ef0  6161              STR      r1,[r4,#0x14]
;;;8098   
;;;8099   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005ef2  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005ef6  f1000001          ADD      r0,r0,#1
005efa  b201              SXTH     r1,r0
005efc  4610              MOV      r0,r2
005efe  f7fffffe          BL       lc640_write_int
005f02  e06d              B        |L1.24544|
                  |L1.24324|
005f04  e098              B        |L1.24632|
005f06  0000              DCW      0x0000
                  |L1.24328|
                          DCD      t_box
                  |L1.24332|
                          DCD      TBOXMAX
                  |L1.24336|
                          DCD      av_tbox_cnt
                  |L1.24340|
                          DCD      av_tbox_stat
                  |L1.24344|
                          DCD      TBOXREG
                  |L1.24348|
                          DCD      t_box_cnt
                  |L1.24352|
                          DCD      main_vent_pos
                  |L1.24356|
                          DCD      TBOXVENTMAX
                  |L1.24360|
                          DCD      pos_vent
                  |L1.24364|
                          DCD      mess_data
                  |L1.24368|
                          DCD      mixer_vent_stat
                  |L1.24372|
                          DCD      TBATDISABLE
                  |L1.24376|
                          DCD      tbatdisable_stat
                  |L1.24380|
                          DCD      tbatdisable_cnt
                  |L1.24384|
                          DCD      TBATENABLE
                  |L1.24388|
                          DCD      TLOADDISABLE
                  |L1.24392|
                          DCD      tloaddisable_stat
                  |L1.24396|
                          DCD      tloaddisable_cnt
                  |L1.24400|
                          DCD      TLOADENABLE
                  |L1.24404|
                          DCD      ||area_number.18||+0xb4
                  |L1.24408|
                          DCD      bat
                  |L1.24412|
                          DCD      IZMAX
                  |L1.24416|
                          DCD      main_10Hz_cnt
                  |L1.24420|
                          DCD      IKB
                  |L1.24424|
                          DCD      bat_u_old_cnt
                  |L1.24428|
                          DCD      0x40024020
                  |L1.24432|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.24436|
                          DCD      BAT_C_REAL
                  |L1.24440|
                          DCD      BAT_C_NOM
                  |L1.24444|
;;;8100   			}
;;;8101   		else if(b_zar>(tempUS_/**10*/))  
005f7c  d930              BLS      |L1.24544|
;;;8102   			{
;;;8103   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005f7e  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005f82  b231              SXTH     r1,r6
005f84  f7fffffe          BL       lc640_write_int
;;;8104   			bat[in]._zar_cnt=AH_CONSTANT;
005f88  f8c48014          STR      r8,[r4,#0x14]
005f8c  e028              B        |L1.24544|
                  |L1.24462|
;;;8105   
;;;8106   			}
;;;8107   
;;;8108   		}
;;;8109   
;;;8110   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005f8e  49fb              LDR      r1,|L1.25468|
005f90  4288              CMP      r0,r1
005f92  dc25              BGT      |L1.24544|
;;;8111   		{
;;;8112   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
005f94  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005f98  4558              CMP      r0,r11
005f9a  d103              BNE      |L1.24484|
005f9c  48f8              LDR      r0,|L1.25472|
005f9e  f8306015          LDRH     r6,[r0,r5,LSL #1]
005fa2  e001              B        |L1.24488|
                  |L1.24484|
;;;8113   		else tempUS_=BAT_C_REAL[in];
005fa4  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.24488|
;;;8114   		
;;;8115   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005fa8  f8390015          LDRH     r0,[r9,r5,LSL #1]
005fac  f7fffffe          BL       lc640_read_int
005fb0  b280              UXTH     r0,r0
;;;8116   
;;;8117   		if(b_zar>tempUS_)
005fb2  42b0              CMP      r0,r6
005fb4  d905              BLS      |L1.24514|
;;;8118   			{
;;;8119   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005fb6  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005fba  b231              SXTH     r1,r6
005fbc  f7fffffe          BL       lc640_write_int
;;;8120   			b_zar=tempUS_;
005fc0  4630              MOV      r0,r6
                  |L1.24514|
;;;8121   			}
;;;8122   		if(b_zar)
005fc2  b158              CBZ      r0,|L1.24540|
;;;8123   			{
;;;8124   			bat[in]._zar_cnt+=AH_CONSTANT;
005fc4  6961              LDR      r1,[r4,#0x14]
005fc6  4441              ADD      r1,r1,r8
005fc8  6161              STR      r1,[r4,#0x14]
;;;8125   
;;;8126   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
005fca  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005fce  f1a00001          SUB      r0,r0,#1
005fd2  b201              SXTH     r1,r0
005fd4  4610              MOV      r0,r2
005fd6  f7fffffe          BL       lc640_write_int
005fda  e001              B        |L1.24544|
                  |L1.24540|
;;;8127   			}
;;;8128   		else 
;;;8129   			{
;;;8130   			bat[in]._zar_cnt=-AH_CONSTANT;
005fdc  48e7              LDR      r0,|L1.25468|
005fde  6160              STR      r0,[r4,#0x14]
                  |L1.24544|
;;;8131   			}
;;;8132   
;;;8133   		}
;;;8134   
;;;8135   			
;;;8136   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005fe0  f8390015          LDRH     r0,[r9,r5,LSL #1]
005fe4  f7fffffe          BL       lc640_read_int
005fe8  4601              MOV      r1,r0
;;;8137   	
;;;8138   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
005fea  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005fee  4558              CMP      r0,r11
005ff0  d102              BNE      |L1.24568|
005ff2  48e3              LDR      r0,|L1.25472|
005ff4  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.24568|
;;;8139   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8140   		           	
;;;8141   	tempUL*=1000L;
005ff8  f44f727a          MOV      r2,#0x3e8
005ffc  fb01f102          MUL      r1,r1,r2
;;;8142   
;;;8143   
;;;8144   	if(tempUL_==0) tempUL=0;
006000  b158              CBZ      r0,|L1.24602|
;;;8145   	else tempUL/=tempUL_;
006002  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.24582|
;;;8146   
;;;8147   	tempUL/=10L;
006006  f04f010a          MOV      r1,#0xa
00600a  fbb0f0f1          UDIV     r0,r0,r1
;;;8148   
;;;8149   	bat[in]._zar=(unsigned short)tempUL;
00600e  8220              STRH     r0,[r4,#0x10]
;;;8150   
;;;8151   	if(BAT_TYPE==1)
006010  48dc              LDR      r0,|L1.25476|
006012  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
006014  2801              CMP      r0,#1
006016  d003              BEQ      |L1.24608|
006018  e008              B        |L1.24620|
                  |L1.24602|
00601a  f04f0000          MOV      r0,#0                 ;8144
00601e  e7f2              B        |L1.24582|
                  |L1.24608|
;;;8152   		{
;;;8153   		bat[in]._zar=lakb[in]._s_o_c;
006020  49d9              LDR      r1,|L1.25480|
006022  9802              LDR      r0,[sp,#8]
006024  eb010080          ADD      r0,r1,r0,LSL #2
006028  8a40              LDRH     r0,[r0,#0x12]
00602a  8220              STRH     r0,[r4,#0x10]
                  |L1.24620|
;;;8154   		}
;;;8155   	
;;;8156   	gran((signed short*)&bat[in]._zar,0,100);
00602c  f1040010          ADD      r0,r4,#0x10
006030  2264              MOVS     r2,#0x64
006032  2100              MOVS     r1,#0
006034  f7fffffe          BL       gran
                  |L1.24632|
;;;8157        }
;;;8158   
;;;8159   
;;;8160   //Подсчет тока разряда батареи      
;;;8161   if(bat[in]._wrk==1)
006038  7ba0              LDRB     r0,[r4,#0xe]
00603a  2801              CMP      r0,#1
00603c  d113              BNE      |L1.24678|
;;;8162   	{
;;;8163   	if(bat[in]._Iintegr<36000)
00603e  8ba0              LDRH     r0,[r4,#0x1c]
006040  4540              CMP      r0,r8
006042  d20f              BCS      |L1.24676|
;;;8164   		{          
;;;8165   		bat[in]._Iintegr+=abs(bat[in]._Ib);
006044  f9b40008          LDRSH    r0,[r4,#8]
006048  f7fffffe          BL       abs
00604c  8ba1              LDRH     r1,[r4,#0x1c]
00604e  4408              ADD      r0,r0,r1
006050  b280              UXTH     r0,r0
006052  83a0              STRH     r0,[r4,#0x1c]
;;;8166   		if(bat[in]._Iintegr>=36000)
006054  4540              CMP      r0,r8
006056  d306              BCC      |L1.24678|
;;;8167   			{
;;;8168   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
006058  83a7              STRH     r7,[r4,#0x1c]
;;;8169   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00605a  8be0              LDRH     r0,[r4,#0x1e]
00605c  f1000001          ADD      r0,r0,#1
006060  83e0              STRH     r0,[r4,#0x1e]
006062  e000              B        |L1.24678|
                  |L1.24676|
;;;8170   			}
;;;8171   		}
;;;8172   	else 
;;;8173   		{
;;;8174   		bat[in]._Iintegr=0;
006064  83a7              STRH     r7,[r4,#0x1c]
                  |L1.24678|
;;;8175   		}	
;;;8176   	} 
;;;8177   	    
;;;8178   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8179   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
006066  4ec9              LDR      r6,|L1.25484|
006068  49c9              LDR      r1,|L1.25488|
00606a  f8df9328          LDR      r9,|L1.25492|
00606e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
006072  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
006076  4288              CMP      r0,r1
006078  dd02              BLE      |L1.24704|
00607a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00607e  b380              CBZ      r0,|L1.24802|
                  |L1.24704|
;;;8180   	{
;;;8181   	bat[in]._sign_temper_cnt++;
;;;8182   	}
;;;8183   else 
;;;8184   	{
;;;8185   	bat[in]._sign_temper_cnt--;
006080  f8b40040          LDRH     r0,[r4,#0x40]
006084  f1a00001          SUB      r0,r0,#1
006088  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.24716|
;;;8186   	}
;;;8187   #else
;;;8188   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8189   	{
;;;8190   	bat[in]._sign_temper_cnt++;
;;;8191   	}
;;;8192   else 
;;;8193   	{
;;;8194   	bat[in]._sign_temper_cnt--;
;;;8195   	}
;;;8196   #endif
;;;8197   gran(&bat[in]._sign_temper_cnt,0,600);
00608c  f44f7b16          MOV      r11,#0x258
006090  f1040040          ADD      r0,r4,#0x40
006094  465a              MOV      r2,r11
006096  2100              MOVS     r1,#0
006098  f7fffffe          BL       gran
;;;8198   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
00609c  f9b40040          LDRSH    r0,[r4,#0x40]
0060a0  f2402a4e          MOV      r10,#0x24e
0060a4  4550              CMP      r0,r10
0060a6  db05              BLT      |L1.24756|
0060a8  f894103f          LDRB     r1,[r4,#0x3f]
0060ac  f0410101          ORR      r1,r1,#1
0060b0  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.24756|
;;;8199   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0060b4  280a              CMP      r0,#0xa
0060b6  dc05              BGT      |L1.24772|
0060b8  f894003f          LDRB     r0,[r4,#0x3f]
0060bc  f0200001          BIC      r0,r0,#1
0060c0  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.24772|
;;;8200   
;;;8201   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0060c4  f894003f          LDRB     r0,[r4,#0x3f]
0060c8  07c1              LSLS     r1,r0,#31
0060ca  d005              BEQ      |L1.24792|
0060cc  06c0              LSLS     r0,r0,#27
0060ce  d403              BMI      |L1.24792|
0060d0  2101              MOVS     r1,#1
0060d2  4628              MOV      r0,r5
0060d4  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.24792|
;;;8202   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0060d8  f894003f          LDRB     r0,[r4,#0x3f]
0060dc  07c1              LSLS     r1,r0,#31
0060de  d008              BEQ      |L1.24818|
0060e0  e00d              B        |L1.24830|
                  |L1.24802|
0060e2  e7ff              B        |L1.24804|
                  |L1.24804|
0060e4  f8b40040          LDRH     r0,[r4,#0x40]         ;8181
0060e8  f1000001          ADD      r0,r0,#1              ;8181
0060ec  f8a40040          STRH     r0,[r4,#0x40]         ;8181
0060f0  e7cc              B        |L1.24716|
                  |L1.24818|
0060f2  06c0              LSLS     r0,r0,#27
0060f4  d503              BPL      |L1.24830|
0060f6  2100              MOVS     r1,#0
0060f8  4628              MOV      r0,r5
0060fa  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.24830|
;;;8203   
;;;8204   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
0060fe  f894003f          LDRB     r0,[r4,#0x3f]
006102  07c1              LSLS     r1,r0,#31
006104  d004              BEQ      |L1.24848|
006106  f0400010          ORR      r0,r0,#0x10
00610a  f884003f          STRB     r0,[r4,#0x3f]
00610e  e003              B        |L1.24856|
                  |L1.24848|
;;;8205   else 								bat[in]._temper_stat&=~(1<<4);
006110  f0200010          BIC      r0,r0,#0x10
006114  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.24856|
;;;8206   
;;;8207   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8208   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
006118  499f              LDR      r1,|L1.25496|
00611a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00611e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
006122  4288              CMP      r0,r1
006124  dd02              BLE      |L1.24876|
006126  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00612a  b3d0              CBZ      r0,|L1.24994|
                  |L1.24876|
;;;8209   	{
;;;8210   	bat[in]._max_temper_cnt++;
;;;8211   	}
;;;8212   else 
;;;8213   	{
;;;8214   	bat[in]._max_temper_cnt--;
00612c  f8b40042          LDRH     r0,[r4,#0x42]
006130  f1a00001          SUB      r0,r0,#1
006134  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.24888|
;;;8215   	}
;;;8216   #else
;;;8217   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8218   	{
;;;8219   	bat[in]._max_temper_cnt++;
;;;8220   	}
;;;8221   else 
;;;8222   	{
;;;8223   	bat[in]._max_temper_cnt--;
;;;8224   	}
;;;8225   #endif
;;;8226   
;;;8227   gran(&bat[in]._max_temper_cnt,0,600);
006138  f1040042          ADD      r0,r4,#0x42
00613c  465a              MOV      r2,r11
00613e  2100              MOVS     r1,#0
006140  f7fffffe          BL       gran
;;;8228   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
006144  f9b40042          LDRSH    r0,[r4,#0x42]
006148  4550              CMP      r0,r10
00614a  db05              BLT      |L1.24920|
00614c  f894103f          LDRB     r1,[r4,#0x3f]
006150  f0410102          ORR      r1,r1,#2
006154  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.24920|
;;;8229   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
006158  280a              CMP      r0,#0xa
00615a  dc05              BGT      |L1.24936|
00615c  f894003f          LDRB     r0,[r4,#0x3f]
006160  f0200002          BIC      r0,r0,#2
006164  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.24936|
;;;8230   
;;;8231   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
006168  f894003f          LDRB     r0,[r4,#0x3f]
00616c  0781              LSLS     r1,r0,#30
00616e  d505              BPL      |L1.24956|
006170  0680              LSLS     r0,r0,#26
006172  d403              BMI      |L1.24956|
006174  2103              MOVS     r1,#3
006176  4628              MOV      r0,r5
006178  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.24956|
;;;8232   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
00617c  f894003f          LDRB     r0,[r4,#0x3f]
006180  0781              LSLS     r1,r0,#30
006182  d405              BMI      |L1.24976|
006184  0680              LSLS     r0,r0,#26
006186  d503              BPL      |L1.24976|
006188  2102              MOVS     r1,#2
00618a  4628              MOV      r0,r5
00618c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.24976|
;;;8233   
;;;8234   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
006190  f894003f          LDRB     r0,[r4,#0x3f]
006194  0781              LSLS     r1,r0,#30
006196  d50c              BPL      |L1.25010|
006198  f0400020          ORR      r0,r0,#0x20
00619c  f884003f          STRB     r0,[r4,#0x3f]
0061a0  e00b              B        |L1.25018|
                  |L1.24994|
0061a2  e7ff              B        |L1.24996|
                  |L1.24996|
0061a4  f8b40042          LDRH     r0,[r4,#0x42]         ;8210
0061a8  f1000001          ADD      r0,r0,#1              ;8210
0061ac  f8a40042          STRH     r0,[r4,#0x42]         ;8210
0061b0  e7c2              B        |L1.24888|
                  |L1.25010|
;;;8235   else 								bat[in]._temper_stat&=~(1<<5);
0061b2  f0200020          BIC      r0,r0,#0x20
0061b6  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.25018|
;;;8236   
;;;8237   //Подсчет наработки батареи
;;;8238   if(bat[in]._resurs_cnt<36000)
0061ba  6c60              LDR      r0,[r4,#0x44]
0061bc  4540              CMP      r0,r8
0061be  da13              BGE      |L1.25064|
;;;8239   	{               
;;;8240   	bat[in]._resurs_cnt++;
0061c0  f1000001          ADD      r0,r0,#1
0061c4  6460              STR      r0,[r4,#0x44]
;;;8241   	if(bat[in]._resurs_cnt>=36000)
0061c6  4540              CMP      r0,r8
0061c8  db0f              BLT      |L1.25066|
;;;8242   		{
;;;8243   		bat[in]._resurs_cnt=0;
0061ca  6467              STR      r7,[r4,#0x44]
;;;8244   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0061cc  4c73              LDR      r4,|L1.25500|
0061ce  f8340015          LDRH     r0,[r4,r5,LSL #1]
0061d2  f7fffffe          BL       lc640_read_int
0061d6  1c40              ADDS     r0,r0,#1
0061d8  b201              SXTH     r1,r0
0061da  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0061de  b003              ADD      sp,sp,#0xc
0061e0  e8bd4ff0          POP      {r4-r11,lr}
0061e4  f7ffbffe          B.W      lc640_write_int
                  |L1.25064|
;;;8245   		}
;;;8246   	}
;;;8247   else bat[in]._resurs_cnt=0;
0061e8  6467              STR      r7,[r4,#0x44]
                  |L1.25066|
;;;8248   
;;;8249   
;;;8250   #ifndef UKU_220_V2
;;;8251   #ifndef UKU_GLONASS
;;;8252   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8253   //#ifndef UKU_6U
;;;8254   //#ifndef UKU_220
;;;8255   if(UBM_AV)
;;;8256        {
;;;8257        signed short temp_SS;
;;;8258   #ifdef UKU_220
;;;8259   temp_SS=bat[in]._Ub/2;
;;;8260   #else
;;;8261        if(U0B<600)
;;;8262             {
;;;8263   
;;;8264             temp_SS=bat[in]._Ub/4;
;;;8265             }
;;;8266        else temp_SS=bat[in]._Ub/5;
;;;8267   	
;;;8268   	temp_SS+=temp_SS;     
;;;8269   #endif
;;;8270        temp_SS-=(bat[in]._Ubm);
;;;8271   
;;;8272        temp_SS=abs(temp_SS);
;;;8273   
;;;8274        temp_SS*=10;
;;;8275   
;;;8276        temp_SS/=12;
;;;8277   
;;;8278        bat[in]._dUbm=temp_SS;
;;;8279   
;;;8280   
;;;8281        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8282   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8283   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8284   		(!(bat[in]._av & 2))  )
;;;8285   		{
;;;8286   		bat[in]._cnt_as++;
;;;8287   		if(bat[in]._cnt_as==3000)
;;;8288   			{
;;;8289   			avar_bat_as_hndl(in,1);
;;;8290   			}
;;;8291   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8292   		}
;;;8293   	else 
;;;8294   		{
;;;8295   		if(bat[in]._cnt_as)
;;;8296   			{
;;;8297   			bat[in]._cnt_as--;
;;;8298   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8299   			}
;;;8300   		}
;;;8301        
;;;8302        }
;;;8303   //#endif 
;;;8304   #endif 
;;;8305   #endif
;;;8306   #endif
;;;8307   
;;;8308   }
0061ea  e8bd8ffe          POP      {r1-r11,pc}
;;;8309   
                          ENDP

                  bat_hndl_zvu PROC
;;;8311   //-----------------------------------------------
;;;8312   void bat_hndl_zvu(void)
0061ee  e92d4ff0          PUSH     {r4-r11,lr}
;;;8313   {
0061f2  b089              SUB      sp,sp,#0x24
;;;8314   char i;
;;;8315   short bat_hndl_i_temp;
;;;8316   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0061f4  f04f021c          MOV      r2,#0x1c
0061f8  4969              LDR      r1,|L1.25504|
0061fa  4668              MOV      r0,sp
0061fc  f7fffffe          BL       __aeabi_memcpy4
;;;8317   
;;;8318   //Ib_ips_termokompensat=-17000;
;;;8319    
;;;8320   if(bat_hndl_zvu_init==0)
006200  4c68              LDR      r4,|L1.25508|
;;;8321   	{
;;;8322   	//Инициализация при включении системы
;;;8323   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8324   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
006202  2564              MOVS     r5,#0x64
;;;8325   	bat_hndl_zvu_Q*=10000L;
;;;8326   
;;;8327   	bat_hndl_zvu_init=1;
;;;8328   	}
;;;8329   else 
;;;8330   	{
;;;8331   	if(Ib_ips_termokompensat<-IKB)
;;;8332   		{
;;;8333   		bat_hndl_i_vector=0;
;;;8334   		bat_hndl_i_zar_price=0L;
;;;8335   			
;;;8336   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8337   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8338   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8339   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8340   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8341   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8342   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8343   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8344   		
;;;8345   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8346   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8347   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8348   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8349   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8350   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8351   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8352   
;;;8353   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8354   		for(i=0;i<7;i++)
;;;8355   			{
;;;8356   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8357   				{
;;;8358   				break;
;;;8359   				}
;;;8360   			}
;;;8361   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8362   		 else if((i>=1)&&(i<7))
;;;8363   		 	{
;;;8364   			short i1,i2;
;;;8365   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8366   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8367   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8368   			bat_hndl_t_razr*=(long)i1;
;;;8369   			bat_hndl_t_razr/=(long)i2;
;;;8370   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8371   			}
;;;8372   		else if(i>=7)
;;;8373   			{
;;;8374   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8375   			}
;;;8376   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
006204  f8df81a0          LDR      r8,|L1.25512|
006208  7a60              LDRB     r0,[r4,#9]            ;8320  ; bat_hndl_zvu_init
00620a  2700              MOVS     r7,#0                 ;8320
00620c  f04f0901          MOV      r9,#1                 ;8327
006210  f1040680          ADD      r6,r4,#0x80           ;8323
006214  2800              CMP      r0,#0                 ;8320
006216  d07e              BEQ      |L1.25366|
006218  4965              LDR      r1,|L1.25520|
00621a  4864              LDR      r0,|L1.25516|
00621c  f9b12000          LDRSH    r2,[r1,#0]            ;8331  ; IKB
006220  4631              MOV      r1,r6                 ;8323
006222  f9b00000          LDRSH    r0,[r0,#0]            ;8331  ; Ib_ips_termokompensat
006226  4253              RSBS     r3,r2,#0              ;8331
006228  6d89              LDR      r1,[r1,#0x58]         ;8323
00622a  4298              CMP      r0,r3                 ;8331
00622c  da74              BGE      |L1.25368|
00622e  72e7              STRB     r7,[r4,#0xb]          ;8333
006230  60f7              STR      r7,[r6,#0xc]          ;8334  ; bat_hndl_i_zar_price
006232  f1c00000          RSB      r0,r0,#0              ;8336
006236  b200              SXTH     r0,r0                 ;8336
006238  8030              STRH     r0,[r6,#0]            ;8336
00623a  9008              STR      r0,[sp,#0x20]         ;8336
00623c  485d              LDR      r0,|L1.25524|
00623e  4a5e              LDR      r2,|L1.25528|
006240  8800              LDRH     r0,[r0,#0]            ;8337  ; BAT_C_POINT_1_6
006242  eb000040          ADD      r0,r0,r0,LSL #1       ;8337
006246  ea4f0040          LSL      r0,r0,#1              ;8337
00624a  fa0ffb80          SXTH     r11,r0                ;8337
00624e  485b              LDR      r0,|L1.25532|
006250  8800              LDRH     r0,[r0,#0]            ;8338  ; BAT_C_POINT_1_2
006252  ea4f0040          LSL      r0,r0,#1              ;8338
006256  b203              SXTH     r3,r0                 ;8338
006258  4859              LDR      r0,|L1.25536|
00625a  f9b0c000          LDRSH    r12,[r0,#0]           ;8339  ; BAT_C_POINT_1
00625e  4859              LDR      r0,|L1.25540|
006260  f04f0903          MOV      r9,#3                 ;8340
006264  f9b00000          LDRSH    r0,[r0,#0]            ;8340  ; BAT_C_POINT_3
006268  fb90f0f9          SDIV     r0,r0,r9              ;8340
00626c  b200              SXTH     r0,r0                 ;8340
00626e  9007              STR      r0,[sp,#0x1c]         ;8340
006270  4855              LDR      r0,|L1.25544|
006272  f04f0905          MOV      r9,#5                 ;8341
006276  f9b00000          LDRSH    r0,[r0,#0]            ;8341  ; BAT_C_POINT_5
00627a  fb90f0f9          SDIV     r0,r0,r9              ;8341
00627e  fa0ff980          SXTH     r9,r0                 ;8341
006282  4852              LDR      r0,|L1.25548|
006284  f9b0a000          LDRSH    r10,[r0,#0]           ;8342  ; BAT_C_POINT_10
006288  f04f000a          MOV      r0,#0xa               ;8342
00628c  fb9af0f0          SDIV     r0,r10,r0             ;8342
006290  fa0ffe80          SXTH     lr,r0                 ;8342
006294  484e              LDR      r0,|L1.25552|
006296  f04f0a14          MOV      r10,#0x14             ;8343
00629a  f9b00000          LDRSH    r0,[r0,#0]            ;8343  ; BAT_C_POINT_20
00629e  fb90f0fa          SDIV     r0,r0,r10             ;8343
0062a2  fa0ffa80          SXTH     r10,r0                ;8343
0062a6  484b              LDR      r0,|L1.25556|
0062a8  f9b00000          LDRSH    r0,[r0,#0]            ;8345  ; BAT_K_OLD
0062ac  fb0bfb00          MUL      r11,r11,r0            ;8345
0062b0  fb9bfbf5          SDIV     r11,r11,r5            ;8345
0062b4  f8a2b000          STRH     r11,[r2,#0]           ;8345
0062b8  fb03f300          MUL      r3,r3,r0              ;8346
0062bc  fb93f3f5          SDIV     r3,r3,r5              ;8346
0062c0  8053              STRH     r3,[r2,#2]            ;8346
0062c2  fb0cfc00          MUL      r12,r12,r0            ;8347
0062c6  fb9cf3f5          SDIV     r3,r12,r5             ;8347
0062ca  8093              STRH     r3,[r2,#4]            ;8347
0062cc  9b07              LDR      r3,[sp,#0x1c]         ;8348
0062ce  fb03f300          MUL      r3,r3,r0              ;8348
0062d2  fb93f3f5          SDIV     r3,r3,r5              ;8348
0062d6  80d3              STRH     r3,[r2,#6]            ;8348
0062d8  fb09f900          MUL      r9,r9,r0              ;8349
0062dc  fb99f3f5          SDIV     r3,r9,r5              ;8349
0062e0  8113              STRH     r3,[r2,#8]            ;8349
0062e2  fb0efe00          MUL      lr,lr,r0              ;8350
0062e6  fb9ef3f5          SDIV     r3,lr,r5              ;8350
0062ea  8153              STRH     r3,[r2,#0xa]          ;8350
0062ec  fb0afa00          MUL      r10,r10,r0            ;8351
0062f0  fb9af0f5          SDIV     r0,r10,r5             ;8351
0062f4  8190              STRH     r0,[r2,#0xc]          ;8351
0062f6  9808              LDR      r0,[sp,#0x20]         ;8353
0062f8  f04f030a          MOV      r3,#0xa               ;8353
0062fc  fb90f0f3          SDIV     r0,r0,r3              ;8353
006300  b203              SXTH     r3,r0                 ;8353
006302  f04f0000          MOV      r0,#0                 ;8354
                  |L1.25350|
006306  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8356
00630a  429d              CMP      r5,r3                 ;8356
00630c  dd07              BLE      |L1.25374|
00630e  f1000001          ADD      r0,r0,#1              ;8354
006312  b2c0              UXTB     r0,r0                 ;8354
006314  e001              B        |L1.25370|
                  |L1.25366|
006316  e01e              B        |L1.25430|
                  |L1.25368|
006318  e082              B        |L1.25632|
                  |L1.25370|
00631a  2807              CMP      r0,#7                 ;8354
00631c  d3f3              BCC      |L1.25350|
                  |L1.25374|
00631e  b358              CBZ      r0,|L1.25464|
006320  1e45              SUBS     r5,r0,#1              ;8362
006322  2d06              CMP      r5,#6                 ;8362
006324  d25b              BCS      |L1.25566|
006326  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8365
00632a  ebac0303          SUB      r3,r12,r3             ;8365
00632e  b21b              SXTH     r3,r3                 ;8365
006330  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8366
006334  ebac0202          SUB      r2,r12,r2             ;8366
006338  fa0ffc82          SXTH     r12,r2                ;8366
00633c  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8367
006340  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8367
006344  eba90200          SUB      r2,r9,r0              ;8367
006348  fb02f203          MUL      r2,r2,r3              ;8368
00634c  fb92f2fc          SDIV     r2,r2,r12             ;8369
006350  4410              ADD      r0,r0,r2              ;8370
006352  6530              STR      r0,[r6,#0x50]         ;8370  ; bat_hndl_t_razr
006354  e047              B        |L1.25574|
                  |L1.25430|
006356  f44f70ef          MOV      r0,#0x1de             ;8323
00635a  f7fffffe          BL       lc640_read_int
00635e  65b0              STR      r0,[r6,#0x58]         ;8323  ; bat_hndl_zvu_Q
006360  2865              CMP      r0,#0x65              ;8324
006362  d300              BCC      |L1.25446|
006364  65b5              STR      r5,[r6,#0x58]         ;8324  ; bat_hndl_zvu_Q
                  |L1.25446|
006366  6db0              LDR      r0,[r6,#0x58]         ;8325  ; bat_hndl_zvu_Q
006368  f2427110          MOV      r1,#0x2710            ;8325
00636c  fb00f001          MUL      r0,r0,r1              ;8325
006370  65b0              STR      r0,[r6,#0x58]         ;8325  ; bat_hndl_zvu_Q
006372  f8849009          STRB     r9,[r4,#9]            ;8327
006376  e096              B        |L1.25766|
                  |L1.25464|
006378  e02e              B        |L1.25560|
00637a  0000              DCW      0x0000
                  |L1.25468|
                          DCD      0xffff7360
                  |L1.25472|
                          DCD      BAT_C_NOM
                  |L1.25476|
                          DCD      BAT_TYPE
                  |L1.25480|
                          DCD      lakb
                  |L1.25484|
                          DCD      t_ext
                  |L1.25488|
                          DCD      TBATSIGN
                  |L1.25492|
                          DCD      ND_EXT
                  |L1.25496|
                          DCD      TBATMAX
                  |L1.25500|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.25504|
                          DCD      ||area_number.12||+0x20
                  |L1.25508|
                          DCD      ||area_number.18||
                  |L1.25512|
                          DCD      0x000f4240
                  |L1.25516|
                          DCD      Ib_ips_termokompensat
                  |L1.25520|
                          DCD      IKB
                  |L1.25524|
                          DCD      BAT_C_POINT_1_6
                  |L1.25528|
                          DCD      ||.bss||+0x44c
                  |L1.25532|
                          DCD      BAT_C_POINT_1_2
                  |L1.25536|
                          DCD      BAT_C_POINT_1
                  |L1.25540|
                          DCD      BAT_C_POINT_3
                  |L1.25544|
                          DCD      BAT_C_POINT_5
                  |L1.25548|
                          DCD      BAT_C_POINT_10
                  |L1.25552|
                          DCD      BAT_C_POINT_20
                  |L1.25556|
                          DCD      BAT_K_OLD
                  |L1.25560|
0063d8  9800              LDR      r0,[sp,#0]            ;8361
0063da  6530              STR      r0,[r6,#0x50]         ;8361  ; bat_hndl_t_razr
0063dc  e003              B        |L1.25574|
                  |L1.25566|
0063de  2807              CMP      r0,#7                 ;8372
0063e0  d301              BCC      |L1.25574|
0063e2  9806              LDR      r0,[sp,#0x18]         ;8374
0063e4  6530              STR      r0,[r6,#0x50]         ;8374  ; bat_hndl_t_razr
                  |L1.25574|
0063e6  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
0063e8  fb98f0f0          SDIV     r0,r8,r0
0063ec  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8377   
;;;8378   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0063ee  4281              CMP      r1,r0
0063f0  dd03              BLE      |L1.25594|
0063f2  eba10000          SUB      r0,r1,r0
0063f6  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0063f8  e000              B        |L1.25596|
                  |L1.25594|
;;;8379   		else bat_hndl_zvu_Q=0L;
0063fa  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.25596|
;;;8380   
;;;8381   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
0063fc  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
0063fe  f44f6061          MOV      r0,#0xe10
006402  fb91f0f0          SDIV     r0,r1,r0
006406  8070              STRH     r0,[r6,#2]
;;;8382   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
006408  f04f003c          MOV      r0,#0x3c
00640c  fb91f1f0          SDIV     r1,r1,r0
006410  b209              SXTH     r1,r1
006412  80b1              STRH     r1,[r6,#4]
;;;8383   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
006414  fb91f2f0          SDIV     r2,r1,r0
006418  fb001012          MLS      r0,r0,r2,r1
00641c  80f0              STRH     r0,[r6,#6]
00641e  e016              B        |L1.25678|
                  |L1.25632|
;;;8384   
;;;8385   		}
;;;8386   	else if(Ib_ips_termokompensat>IKB)
006420  4290              CMP      r0,r2
006422  dd14              BLE      |L1.25678|
;;;8387   		{
;;;8388   		bat_hndl_i_vector=1;
006424  f884900b          STRB     r9,[r4,#0xb]
;;;8389   
;;;8390   		bat_hndl_i=Ib_ips_termokompensat;
006428  8030              STRH     r0,[r6,#0]
;;;8391   		bat_hndl_i_summ+=(long)bat_hndl_i;
00642a  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
00642c  4410              ADD      r0,r0,r2
00642e  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8392   		if(bat_hndl_i_summ>=36000L)
006430  f64842a0          MOV      r2,#0x8ca0
006434  4290              CMP      r0,r2
006436  db0a              BLT      |L1.25678|
;;;8393   
;;;8394   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8395   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8396   			{
;;;8397   			bat_hndl_i_summ-=36000L;
006438  eba00002          SUB      r0,r0,r2
00643c  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8398   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
00643e  4541              CMP      r1,r8
006440  da03              BGE      |L1.25674|
006442  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
006444  4408              ADD      r0,r0,r1
006446  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
006448  e001              B        |L1.25678|
                  |L1.25674|
;;;8399   			else bat_hndl_zvu_Q=1000000L; 
00644a  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.25678|
;;;8400   			}
;;;8401   		}
;;;8402   
;;;8403   
;;;8404   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
00644e  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
006450  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
006452  4288              CMP      r0,r1
006454  d00d              BEQ      |L1.25714|
;;;8405   		{
;;;8406   		if(bat_hndl_i_vector==1)
006456  2801              CMP      r0,#1
006458  d10b              BNE      |L1.25714|
;;;8407   			{
;;;8408   			signed short tempSS;
;;;8409   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
00645a  f44f70e4          MOV      r0,#0x1c8
00645e  f7fffffe          BL       lc640_read_int
006462  b200              SXTH     r0,r0
;;;8410   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
006464  4aff              LDR      r2,|L1.26724|
006466  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
006468  4411              ADD      r1,r1,r2
00646a  fb91f0f0          SDIV     r0,r1,r0
00646e  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8411   			bat_hndl_i_summ=0;
006470  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.25714|
;;;8412   			}
;;;8413   		}
;;;8414   	bat_hndl_i_vector_old=bat_hndl_i_vector;
006472  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
006474  7320              STRB     r0,[r4,#0xc]
;;;8415   
;;;8416   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
006476  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
006478  f2427a10          MOV      r10,#0x2710
00647c  fb90f5fa          SDIV     r5,r0,r10
006480  f44f79ef          MOV      r9,#0x1de
006484  4648              MOV      r0,r9
006486  f7fffffe          BL       lc640_read_int
00648a  4285              CMP      r5,r0
00648c  d006              BEQ      |L1.25756|
00648e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
006490  fb90f0fa          SDIV     r0,r0,r10
006494  b201              SXTH     r1,r0
006496  4648              MOV      r0,r9
006498  f7fffffe          BL       lc640_write_int
                  |L1.25756|
;;;8417   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00649c  e9d60116          LDRD     r0,r1,[r6,#0x58]
0064a0  fb90f0f1          SDIV     r0,r0,r1
0064a4  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.25766|
;;;8418   	}
;;;8419   
;;;8420   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0064a6  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0064a8  4540              CMP      r0,r8
0064aa  dd02              BLE      |L1.25778|
0064ac  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
0064b0  e002              B        |L1.25784|
                  |L1.25778|
;;;8421   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0064b2  2800              CMP      r0,#0
0064b4  da00              BGE      |L1.25784|
0064b6  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.25784|
;;;8422   
;;;8423   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0064b8  48eb              LDR      r0,|L1.26728|
0064ba  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0064be  200a              MOVS     r0,#0xa
0064c0  fb91f0f0          SDIV     r0,r1,r0
0064c4  49e9              LDR      r1,|L1.26732|
0064c6  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0064ca  ebb00f41          CMP      r0,r1,LSL #1
0064ce  da30              BGE      |L1.25906|
0064d0  4249              RSBS     r1,r1,#0
0064d2  ebb00f41          CMP      r0,r1,LSL #1
0064d6  dd2c              BLE      |L1.25906|
0064d8  48e5              LDR      r0,|L1.26736|
0064da  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0064de  07c0              LSLS     r0,r0,#31
0064e0  d127              BNE      |L1.25906|
0064e2  48e4              LDR      r0,|L1.26740|
0064e4  49e4              LDR      r1,|L1.26744|
0064e6  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0064ea  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0064ee  4288              CMP      r0,r1
0064f0  dc1f              BGT      |L1.25906|
0064f2  49e2              LDR      r1,|L1.26748|
0064f4  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0064f8  4288              CMP      r0,r1
0064fa  dd1a              BLE      |L1.25906|
0064fc  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
006500  280a              CMP      r0,#0xa
006502  db16              BLT      |L1.25906|
006504  28c8              CMP      r0,#0xc8
006506  dc14              BGT      |L1.25906|
;;;8424   	{
;;;8425   	if(bat_hndl_zvu_Q_cnt<60)
006508  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
00650c  283c              CMP      r0,#0x3c
00650e  d20d              BCS      |L1.25900|
;;;8426   		{
;;;8427   		bat_hndl_zvu_Q_cnt++;
006510  f1000001          ADD      r0,r0,#1
006514  b2c0              UXTB     r0,r0
006516  f8840030          STRB     r0,[r4,#0x30]
;;;8428   		if(bat_hndl_zvu_Q_cnt>=60)
00651a  283c              CMP      r0,#0x3c
00651c  d306              BCC      |L1.25900|
;;;8429   			{
;;;8430   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
00651e  2164              MOVS     r1,#0x64
006520  f44f70ef          MOV      r0,#0x1de
006524  f7fffffe          BL       lc640_write_int
;;;8431   			bat_hndl_zvu_Q=1000000L;
006528  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.25900|
;;;8432   
;;;8433   
;;;8434   			}
;;;8435   		}
;;;8436   	}
;;;8437   else 
;;;8438   	{
;;;8439   	bat_hndl_zvu_Q_cnt=0;
;;;8440   	}
;;;8441   
;;;8442   
;;;8443   
;;;8444   };
00652c  b009              ADD      sp,sp,#0x24
00652e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.25906|
006532  f8847030          STRB     r7,[r4,#0x30]         ;8439
006536  e7f9              B        |L1.25900|
;;;8445   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8449   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8450   void u_avt_set_hndl(void)
006538  e92d5fff          PUSH     {r0-r12,lr}
;;;8451   {
;;;8452   if(uavt_set_stat==uassSTEP1)
00653c  4dd0              LDR      r5,|L1.26752|
;;;8453   	{
;;;8454   	char i,find_succes;
;;;8455   
;;;8456   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8457   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8458   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8459   		{
;;;8460   		uavt_set_error_cnt=60;
00653e  4ed1              LDR      r6,|L1.26756|
006540  f8df8344          LDR      r8,|L1.26760|
006544  7828              LDRB     r0,[r5,#0]            ;8452  ; uavt_set_stat
;;;8461   		}
;;;8462   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8463   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8464   	find_succes=0;
;;;8465   /*	for(i=0;i<NUMIST;i++)
;;;8466   		{
;;;8467   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8468   		else
;;;8469   			{
;;;8470   			find_succes=0;
;;;8471   			break;
;;;8472   			}
;;;8473   		}*/
;;;8474   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
006546  f8dfa344          LDR      r10,|L1.26764|
00654a  2400              MOVS     r4,#0                 ;8463
;;;8475   
;;;8476   	if(find_succes==1)
;;;8477   		{
;;;8478   		uavt_set_stat=uassSTEP2;
00654c  f04f0902          MOV      r9,#2
;;;8479   		}
;;;8480   	if(uavt_set_error_cnt)
;;;8481   		{
;;;8482   		uavt_set_error_cnt--;
;;;8483   		if(!uavt_set_error_cnt)
;;;8484   			{
;;;8485   			uavt_set_stat=uassOFF;
;;;8486   			uavt_set_result_stat=uasrsERR;
;;;8487   			avt_error_bps=100;
006550  f04f0b64          MOV      r11,#0x64
006554  2801              CMP      r0,#1                 ;8452
006556  d12e              BNE      |L1.26038|
006558  f8980000          LDRB     r0,[r8,#0]            ;8458  ; uavt_set_stat_old
00655c  2801              CMP      r0,#1                 ;8458
00655e  d002              BEQ      |L1.25958|
006560  f04f003c          MOV      r0,#0x3c              ;8460
006564  7030              STRB     r0,[r6,#0]            ;8460
                  |L1.25958|
006566  230a              MOVS     r3,#0xa               ;8463
006568  2200              MOVS     r2,#0                 ;8463
00656a  21e6              MOVS     r1,#0xe6              ;8463
00656c  20e1              MOVS     r0,#0xe1              ;8463
00656e  f7fffffe          BL       mess_send
006572  f04f0000          MOV      r0,#0                 ;8464
006576  49c6              LDR      r1,|L1.26768|
006578  f9b12000          LDRSH    r2,[r1,#0]            ;8474  ; bps_U
00657c  f9ba1000          LDRSH    r1,[r10,#0]           ;8474  ; U_AVT
006580  f1a10301          SUB      r3,r1,#1              ;8474
006584  429a              CMP      r2,r3                 ;8474
006586  db04              BLT      |L1.26002|
006588  1c49              ADDS     r1,r1,#1              ;8474
00658a  428a              CMP      r2,r1                 ;8474
00658c  dc01              BGT      |L1.26002|
00658e  f04f0001          MOV      r0,#1                 ;8474
                  |L1.26002|
006592  2801              CMP      r0,#1                 ;8476
006594  d101              BNE      |L1.26010|
006596  f8859000          STRB     r9,[r5,#0]            ;8478
                  |L1.26010|
00659a  7830              LDRB     r0,[r6,#0]            ;8480  ; uavt_set_error_cnt
00659c  b158              CBZ      r0,|L1.26038|
00659e  f1a00001          SUB      r0,r0,#1              ;8482
0065a2  b2c0              UXTB     r0,r0                 ;8482
0065a4  7030              STRB     r0,[r6,#0]            ;8482
0065a6  b930              CBNZ     r0,|L1.26038|
0065a8  702c              STRB     r4,[r5,#0]            ;8485
0065aa  48ba              LDR      r0,|L1.26772|
0065ac  f8809000          STRB     r9,[r0,#0]            ;8486
0065b0  48b9              LDR      r0,|L1.26776|
0065b2  f880b000          STRB     r11,[r0,#0]
                  |L1.26038|
;;;8488   			}
;;;8489   		}
;;;8490   	}
;;;8491   if(uavt_set_stat==uassSTEP2)
0065b6  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8492   	{
;;;8493   	char i,find_succes;
;;;8494   
;;;8495   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0065b8  49b8              LDR      r1,|L1.26780|
;;;8496   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0065ba  48b9              LDR      r0,|L1.26784|
;;;8497   
;;;8498   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8499   		{
;;;8500   		uavt_set_error_cnt=60;
;;;8501   		}
;;;8502   
;;;8503   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8504   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8505   	find_succes=1;
;;;8506   
;;;8507   	for(i=0;i<NUMIST;i++)
;;;8508   		{
;;;8509   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8510   		else
;;;8511   			{
;;;8512   			find_succes=0;
;;;8513   			avt_error_bps=i+1;
;;;8514   			break;
;;;8515   			}
;;;8516   		}
;;;8517   
;;;8518   	if(find_succes==1)
;;;8519   		{
;;;8520   		uavt_set_stat=uassSTEP3;
;;;8521   		uavt_bps_pntr=0;
0065bc  4fb9              LDR      r7,|L1.26788|
0065be  2a02              CMP      r2,#2                 ;8491
0065c0  d002              BEQ      |L1.26056|
;;;8522   		avt_plazma=0;
;;;8523   		}
;;;8524   
;;;8525   	if(uavt_set_error_cnt)
;;;8526   		{
;;;8527   		uavt_set_error_cnt--;
;;;8528   		if(!uavt_set_error_cnt)
;;;8529   			{
;;;8530   			uavt_set_stat=uassOFF;
;;;8531   			uavt_set_result_stat=uasrsERR;
;;;8532   			}
;;;8533   		}
;;;8534   	}
;;;8535   else if(uavt_set_stat==uassSTEP3)
0065c2  2a03              CMP      r2,#3
0065c4  d05e              BEQ      |L1.26244|
0065c6  e0ca              B        |L1.26462|
                  |L1.26056|
0065c8  f9ba2000          LDRSH    r2,[r10,#0]           ;8495  ; U_AVT
0065cc  f04f0365          MOV      r3,#0x65              ;8495
0065d0  fb02f303          MUL      r3,r2,r3              ;8495
0065d4  fbb3f3fb          UDIV     r3,r3,r11             ;8495
0065d8  468a              MOV      r10,r1                ;8495
0065da  800b              STRH     r3,[r1,#0]            ;8495
0065dc  eb021142          ADD      r1,r2,r2,LSL #5       ;8496
0065e0  eb010141          ADD      r1,r1,r1,LSL #1       ;8496
0065e4  fbb1f1fb          UDIV     r1,r1,r11             ;8496
0065e8  4683              MOV      r11,r0                ;8496
0065ea  8001              STRH     r1,[r0,#0]            ;8496
0065ec  f8980000          LDRB     r0,[r8,#0]            ;8498  ; uavt_set_stat_old
0065f0  2802              CMP      r0,#2                 ;8498
0065f2  d002              BEQ      |L1.26106|
0065f4  f04f003c          MOV      r0,#0x3c              ;8500
0065f8  7030              STRB     r0,[r6,#0]            ;8500
                  |L1.26106|
0065fa  230a              MOVS     r3,#0xa               ;8503
0065fc  21bf              MOVS     r1,#0xbf              ;8503
0065fe  20be              MOVS     r0,#0xbe              ;8503
006600  f7fffffe          BL       mess_send
006604  230a              MOVS     r3,#0xa               ;8504
006606  2200              MOVS     r2,#0                 ;8504
006608  21e6              MOVS     r1,#0xe6              ;8504
00660a  20e1              MOVS     r0,#0xe1              ;8504
00660c  f7fffffe          BL       mess_send
006610  f04f0201          MOV      r2,#1                 ;8505
006614  f04f0000          MOV      r0,#0                 ;8507
006618  49a4              LDR      r1,|L1.26796|
00661a  f9ba3000          LDRSH    r3,[r10,#0]           ;8507
00661e  f8dfe288          LDR      lr,|L1.26792|
006622  f9bbc000          LDRSH    r12,[r11,#0]          ;8509
006626  f9b1a000          LDRSH    r10,[r1,#0]           ;8507
00662a  e00d              B        |L1.26184|
                  |L1.26156|
00662c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8509
006630  eb011100          ADD      r1,r1,r0,LSL #4       ;8509
006634  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8509
006638  69c9              LDR      r1,[r1,#0x1c]         ;8509
00663a  4299              CMP      r1,r3                 ;8509
00663c  da09              BGE      |L1.26194|
00663e  4561              CMP      r1,r12                ;8509
006640  dd07              BLE      |L1.26194|
006642  f1000001          ADD      r0,r0,#1              ;8507
006646  b2c0              UXTB     r0,r0                 ;8507
                  |L1.26184|
006648  4550              CMP      r0,r10                ;8507
00664a  dbef              BLT      |L1.26156|
                  |L1.26188|
00664c  2a01              CMP      r2,#1                 ;8518
00664e  d007              BEQ      |L1.26208|
006650  e00c              B        |L1.26220|
                  |L1.26194|
006652  f04f0200          MOV      r2,#0                 ;8512
006656  4990              LDR      r1,|L1.26776|
006658  f1000001          ADD      r0,r0,#1              ;8513
00665c  7008              STRB     r0,[r1,#0]            ;8513
00665e  e7f5              B        |L1.26188|
                  |L1.26208|
006660  f04f0003          MOV      r0,#3                 ;8520
006664  7028              STRB     r0,[r5,#0]            ;8520
006666  703c              STRB     r4,[r7,#0]            ;8521
006668  4891              LDR      r0,|L1.26800|
00666a  7004              STRB     r4,[r0,#0]            ;8522
                  |L1.26220|
00666c  7830              LDRB     r0,[r6,#0]            ;8525  ; uavt_set_error_cnt
00666e  b3d0              CBZ      r0,|L1.26342|
006670  f1a00001          SUB      r0,r0,#1              ;8527
006674  b2c0              UXTB     r0,r0                 ;8527
006676  7030              STRB     r0,[r6,#0]            ;8527
006678  bba8              CBNZ     r0,|L1.26342|
00667a  702c              STRB     r4,[r5,#0]            ;8530
00667c  4885              LDR      r0,|L1.26772|
00667e  f8809000          STRB     r9,[r0,#0]            ;8531
006682  e06c              B        |L1.26462|
                  |L1.26244|
;;;8536   	{
;;;8537   	char i,find_succes;
;;;8538   
;;;8539   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
006684  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
006688  f04f0365          MOV      r3,#0x65
00668c  fb02f303          MUL      r3,r2,r3
006690  fbb3f3fb          UDIV     r3,r3,r11
006694  468a              MOV      r10,r1
006696  800b              STRH     r3,[r1,#0]
;;;8540   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
006698  eb021142          ADD      r1,r2,r2,LSL #5
00669c  eb010141          ADD      r1,r1,r1,LSL #1
0066a0  fbb1f1fb          UDIV     r1,r1,r11
0066a4  4683              MOV      r11,r0
0066a6  8001              STRH     r1,[r0,#0]
;;;8541   	
;;;8542   	if(uavt_set_stat_old!=uavt_set_stat)
0066a8  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
0066ac  2803              CMP      r0,#3
0066ae  d000              BEQ      |L1.26290|
;;;8543   		{
;;;8544   		uavt_bps_pntr=0;
0066b0  703c              STRB     r4,[r7,#0]
                  |L1.26290|
;;;8545   		}
;;;8546   
;;;8547   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
0066b2  230a              MOVS     r3,#0xa
0066b4  21bf              MOVS     r1,#0xbf
0066b6  20be              MOVS     r0,#0xbe
0066b8  f7fffffe          BL       mess_send
;;;8548   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
0066bc  230a              MOVS     r3,#0xa
0066be  2200              MOVS     r2,#0
0066c0  21e6              MOVS     r1,#0xe6
0066c2  20e1              MOVS     r0,#0xe1
0066c4  f7fffffe          BL       mess_send
;;;8549   
;;;8550   	find_succes=1;
0066c8  f04f0601          MOV      r6,#1
;;;8551   	for(i=0;i<NUMIST;i++)
0066cc  f04f0000          MOV      r0,#0
0066d0  f8df91d8          LDR      r9,|L1.26796|
0066d4  f9ba2000          LDRSH    r2,[r10,#0]
0066d8  f8dfc1cc          LDR      r12,|L1.26792|
0066dc  f9bb3000          LDRSH    r3,[r11,#0]           ;8509
0066e0  f9b9a000          LDRSH    r10,[r9,#0]           ;8507
0066e4  e00e              B        |L1.26372|
                  |L1.26342|
0066e6  e03a              B        |L1.26462|
                  |L1.26344|
;;;8552   		{
;;;8553   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
0066e8  eb0001c0          ADD      r1,r0,r0,LSL #3
0066ec  eb011100          ADD      r1,r1,r0,LSL #4
0066f0  eb0c0181          ADD      r1,r12,r1,LSL #2
0066f4  69c9              LDR      r1,[r1,#0x1c]
0066f6  4291              CMP      r1,r2
0066f8  da0f              BGE      |L1.26394|
0066fa  4299              CMP      r1,r3
0066fc  dd0d              BLE      |L1.26394|
0066fe  f1000001          ADD      r0,r0,#1              ;8551
006702  b2c0              UXTB     r0,r0                 ;8551
                  |L1.26372|
006704  4550              CMP      r0,r10                ;8551
006706  dbef              BLT      |L1.26344|
                  |L1.26376|
;;;8554   		else
;;;8555   			{
;;;8556   			find_succes=0;
;;;8557   			break;
;;;8558   			}
;;;8559   		}
;;;8560   
;;;8561   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
006708  20d7              MOVS     r0,#0xd7
00670a  f7fffffe          BL       mess_find
00670e  b1a0              CBZ      r0,|L1.26426|
006710  4868              LDR      r0,|L1.26804|
006712  6800              LDR      r0,[r0,#0]  ; mess_data
006714  28d9              CMP      r0,#0xd9
006716  d003              BEQ      |L1.26400|
006718  e00f              B        |L1.26426|
                  |L1.26394|
00671a  f04f0600          MOV      r6,#0                 ;8556
00671e  e7f3              B        |L1.26376|
                  |L1.26400|
;;;8562   		{
;;;8563   		if(++uavt_bps_pntr>=NUMIST)
006720  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
006722  1c40              ADDS     r0,r0,#1
006724  b2c0              UXTB     r0,r0
006726  7038              STRB     r0,[r7,#0]
006728  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
00672c  4288              CMP      r0,r1
00672e  db04              BLT      |L1.26426|
;;;8564   			{
;;;8565   			uavt_set_stat=uassOFF;
006730  702c              STRB     r4,[r5,#0]
;;;8566   			uavt_set_result_stat=uasrsSUCCESS;
006732  4958              LDR      r1,|L1.26772|
006734  f04f0003          MOV      r0,#3
006738  7008              STRB     r0,[r1,#0]
                  |L1.26426|
;;;8567   			}
;;;8568   		//uavt_bps_pntr++;
;;;8569   		//if()
;;;8570   		}
;;;8571   	if(find_succes==1)
00673a  2e01              CMP      r6,#1
00673c  d10f              BNE      |L1.26462|
;;;8572   		{
;;;8573   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
00673e  20ee              MOVS     r0,#0xee
006740  e9cd0400          STRD     r0,r4,[sp,#0]
006744  9402              STR      r4,[sp,#8]
006746  9403              STR      r4,[sp,#0xc]
006748  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
00674a  4603              MOV      r3,r0
00674c  2216              MOVS     r2,#0x16
00674e  4608              MOV      r0,r1
006750  f7fffffe          BL       mcp2515_transmit
;;;8574   		avt_plazma++;
006754  4856              LDR      r0,|L1.26800|
006756  7801              LDRB     r1,[r0,#0]  ; avt_plazma
006758  f1010101          ADD      r1,r1,#1
00675c  7001              STRB     r1,[r0,#0]
                  |L1.26462|
;;;8575   		}
;;;8576   	}
;;;8577   
;;;8578   
;;;8579   
;;;8580   uavt_set_stat_old=uavt_set_stat;
00675e  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
006760  f8880000          STRB     r0,[r8,#0]
                  |L1.26468|
;;;8581   
;;;8582   }
006764  e8bd9fff          POP      {r0-r12,pc}
;;;8583   
                          ENDP

                  u_avt_set_hndl1 PROC
;;;8586   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8587   void u_avt_set_hndl1(void)
006768  e92d5fff          PUSH     {r0-r12,lr}
;;;8588   {
;;;8589   if(uavt_set_stat==uassSTEP1)
;;;8590   	{
;;;8591   	char i,find_succes;
;;;8592   
;;;8593   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
00676c  4847              LDR      r0,|L1.26764|
00676e  2165              MOVS     r1,#0x65
006770  2564              MOVS     r5,#0x64
006772  f9b00000          LDRSH    r0,[r0,#0]
006776  4c42              LDR      r4,|L1.26752|
006778  4341              MULS     r1,r0,r1
;;;8594   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00677a  eb001040          ADD      r0,r0,r0,LSL #5
00677e  fbb1f1f5          UDIV     r1,r1,r5              ;8593
006782  eb000040          ADD      r0,r0,r0,LSL #1
006786  fbb0f0f5          UDIV     r0,r0,r5
;;;8595   	if(uavt_set_stat_old!=uavt_set_stat)
00678a  f8dfb0fc          LDR      r11,|L1.26760|
00678e  b20a              SXTH     r2,r1                 ;8593
006790  7823              LDRB     r3,[r4,#0]            ;8589  ; uavt_set_stat
006792  b201              SXTH     r1,r0                 ;8594
006794  f89b0000          LDRB     r0,[r11,#0]
;;;8596   		{
;;;8597   		uavt_bps_pntr=0;
006798  4e42              LDR      r6,|L1.26788|
00679a  4f40              LDR      r7,|L1.26780|
00679c  f8df8100          LDR      r8,|L1.26784|
;;;8598   
;;;8599   		}
;;;8600   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8601   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8602   	find_succes=1;
;;;8603   	for(i=0;i<NUMIST;i++)
;;;8604   		{
;;;8605   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
0067a0  f8df9104          LDR      r9,|L1.26792|
0067a4  f8dfa104          LDR      r10,|L1.26796|
0067a8  2500              MOVS     r5,#0                 ;8597
0067aa  2b01              CMP      r3,#1                 ;8589
0067ac  d002              BEQ      |L1.26548|
;;;8606   		else
;;;8607   			{
;;;8608   			find_succes=0;
;;;8609   			break;
;;;8610   			}
;;;8611   		}
;;;8612   
;;;8613   	if(find_succes==1)
;;;8614   		{
;;;8615   		uavt_set_stat=uassSTEP2;
;;;8616   		}
;;;8617   	}
;;;8618   else if(uavt_set_stat==uassSTEP2)
0067ae  2b02              CMP      r3,#2
0067b0  d031              BEQ      |L1.26646|
0067b2  e09c              B        |L1.26862|
                  |L1.26548|
0067b4  803a              STRH     r2,[r7,#0]            ;8593
0067b6  f8a81000          STRH     r1,[r8,#0]            ;8594
0067ba  2801              CMP      r0,#1                 ;8595
0067bc  d000              BEQ      |L1.26560|
0067be  7035              STRB     r5,[r6,#0]            ;8597
                  |L1.26560|
0067c0  230a              MOVS     r3,#0xa               ;8601
0067c2  2200              MOVS     r2,#0                 ;8601
0067c4  21e6              MOVS     r1,#0xe6              ;8601
0067c6  20e1              MOVS     r0,#0xe1              ;8601
0067c8  f7fffffe          BL       mess_send
0067cc  f04f0201          MOV      r2,#1                 ;8602
0067d0  f04f0000          MOV      r0,#0                 ;8603
0067d4  f9b73000          LDRSH    r3,[r7,#0]            ;8603
0067d8  f9b85000          LDRSH    r5,[r8,#0]            ;8603
0067dc  f9ba6000          LDRSH    r6,[r10,#0]           ;8603
0067e0  e00d              B        |L1.26622|
                  |L1.26594|
0067e2  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8605
0067e6  eb011100          ADD      r1,r1,r0,LSL #4       ;8605
0067ea  eb090181          ADD      r1,r9,r1,LSL #2       ;8605
0067ee  69c9              LDR      r1,[r1,#0x1c]         ;8605
0067f0  4299              CMP      r1,r3                 ;8605
0067f2  da09              BGE      |L1.26632|
0067f4  42a9              CMP      r1,r5                 ;8605
0067f6  dd07              BLE      |L1.26632|
0067f8  f1000001          ADD      r0,r0,#1              ;8603
0067fc  b2c0              UXTB     r0,r0                 ;8603
                  |L1.26622|
0067fe  42b0              CMP      r0,r6                 ;8603
006800  dbef              BLT      |L1.26594|
                  |L1.26626|
006802  2a01              CMP      r2,#1                 ;8613
006804  d003              BEQ      |L1.26638|
006806  e072              B        |L1.26862|
                  |L1.26632|
006808  f04f0200          MOV      r2,#0                 ;8608
00680c  e7f9              B        |L1.26626|
                  |L1.26638|
00680e  f04f0002          MOV      r0,#2                 ;8615
006812  7020              STRB     r0,[r4,#0]            ;8615
006814  e06b              B        |L1.26862|
                  |L1.26646|
;;;8619   	{
;;;8620   	char i,find_succes;
;;;8621   
;;;8622   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
006816  803a              STRH     r2,[r7,#0]
;;;8623   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
006818  f8a81000          STRH     r1,[r8,#0]
;;;8624   	
;;;8625   	if(uavt_set_stat_old!=uavt_set_stat)
00681c  2802              CMP      r0,#2
00681e  d000              BEQ      |L1.26658|
;;;8626   		{
;;;8627   		uavt_bps_pntr=0;
006820  7035              STRB     r5,[r6,#0]
                  |L1.26658|
;;;8628   		}
;;;8629   
;;;8630   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8631   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
006822  230a              MOVS     r3,#0xa
006824  2200              MOVS     r2,#0
006826  21e6              MOVS     r1,#0xe6
006828  20e1              MOVS     r0,#0xe1
00682a  f7fffffe          BL       mess_send
;;;8632   
;;;8633   	find_succes=1;
00682e  f04f0201          MOV      r2,#1
;;;8634   	for(i=0;i<NUMIST;i++)
006832  f04f0000          MOV      r0,#0
006836  f9b73000          LDRSH    r3,[r7,#0]
00683a  f9b87000          LDRSH    r7,[r8,#0]
00683e  f9bac000          LDRSH    r12,[r10,#0]          ;8603
006842  e00d              B        |L1.26720|
                  |L1.26692|
;;;8635   		{
;;;8636   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
006844  eb0001c0          ADD      r1,r0,r0,LSL #3
006848  eb011100          ADD      r1,r1,r0,LSL #4
00684c  eb090181          ADD      r1,r9,r1,LSL #2
006850  69c9              LDR      r1,[r1,#0x1c]
006852  4299              CMP      r1,r3
006854  da34              BGE      |L1.26816|
006856  42b9              CMP      r1,r7
006858  dd32              BLE      |L1.26816|
00685a  f1000001          ADD      r0,r0,#1              ;8634
00685e  b2c0              UXTB     r0,r0                 ;8634
                  |L1.26720|
006860  4560              CMP      r0,r12                ;8634
006862  e029              B        |L1.26808|
                  |L1.26724|
                          DCD      0xfff0bdc0
                  |L1.26728|
                          DCD      Ib_ips_termokompensat
                  |L1.26732|
                          DCD      IKB
                  |L1.26736|
                          DCD      bat
                  |L1.26740|
                          DCD      out_U
                  |L1.26744|
                          DCD      u_necc_up
                  |L1.26748|
                          DCD      u_necc_dn
                  |L1.26752|
                          DCD      uavt_set_stat
                  |L1.26756|
                          DCD      uavt_set_error_cnt
                  |L1.26760|
                          DCD      uavt_set_stat_old
                  |L1.26764|
                          DCD      U_AVT
                  |L1.26768|
                          DCD      bps_U
                  |L1.26772|
                          DCD      uavt_set_result_stat
                  |L1.26776|
                          DCD      avt_error_bps
                  |L1.26780|
                          DCD      u_max_temp
                  |L1.26784|
                          DCD      u_min_temp
                  |L1.26788|
                          DCD      uavt_bps_pntr
                  |L1.26792|
                          DCD      bps
                  |L1.26796|
                          DCD      NUMIST
                  |L1.26800|
                          DCD      avt_plazma
                  |L1.26804|
                          DCD      mess_data
                  |L1.26808|
0068b8  dbc4              BLT      |L1.26692|
                  |L1.26810|
;;;8637   		else
;;;8638   			{
;;;8639   			find_succes=0;
;;;8640   			break;
;;;8641   			}
;;;8642   		}
;;;8643   
;;;8644   	if(find_succes==1)
0068ba  2a01              CMP      r2,#1
0068bc  d003              BEQ      |L1.26822|
0068be  e016              B        |L1.26862|
                  |L1.26816|
0068c0  f04f0200          MOV      r2,#0                 ;8639
0068c4  e7f9              B        |L1.26810|
                  |L1.26822|
;;;8645   		{
;;;8646   		can1_out(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0068c6  20ee              MOVS     r0,#0xee
0068c8  e9cd0500          STRD     r0,r5,[sp,#0]
0068cc  9502              STR      r5,[sp,#8]
0068ce  9503              STR      r5,[sp,#0xc]
0068d0  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
0068d2  4603              MOV      r3,r0
0068d4  2216              MOVS     r2,#0x16
0068d6  4608              MOV      r0,r1
0068d8  f7fffffe          BL       mcp2515_transmit
;;;8647   		if(++uavt_bps_pntr>=NUMIST)uavt_set_stat=uassOFF;
0068dc  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
0068de  1c40              ADDS     r0,r0,#1
0068e0  b2c0              UXTB     r0,r0
0068e2  7030              STRB     r0,[r6,#0]
0068e4  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
0068e8  4288              CMP      r0,r1
0068ea  db00              BLT      |L1.26862|
0068ec  7025              STRB     r5,[r4,#0]
                  |L1.26862|
;;;8648   		}
;;;8649   	}
;;;8650   
;;;8651   
;;;8652   
;;;8653   uavt_set_stat_old=uavt_set_stat;
0068ee  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
0068f0  f88b0000          STRB     r0,[r11,#0]
;;;8654   
;;;8655   }
0068f4  e736              B        |L1.26468|
;;;8656   
                          ENDP

                  u_necc_hndl PROC
;;;8658   //-----------------------------------------------
;;;8659   void u_necc_hndl(void)
0068f6  b5f8              PUSH     {r3-r7,lr}
;;;8660   {
;;;8661   signed long temp_L;
;;;8662   signed long temp_SL;
;;;8663   //signed short temp_SS;
;;;8664   
;;;8665   //char i;
;;;8666   
;;;8667   //temp_SS=0;
;;;8668   signed short t[2];
;;;8669   
;;;8670   
;;;8671   
;;;8672   
;;;8673   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8674   
;;;8675   if(!TERMOKOMPENS)
0068f8  48ff              LDR      r0,|L1.27896|
0068fa  8801              LDRH     r1,[r0,#0]  ; TERMOKOMPENS
;;;8676   	{
;;;8677   	//u_necc=U0B;
;;;8678   	u_necc=UB20;
0068fc  48ff              LDR      r0,|L1.27900|
0068fe  f9b03000          LDRSH    r3,[r0,#0]
;;;8679   	}
;;;8680   else
;;;8681   	{
;;;8682   	if(ND_EXT[0])t[0]=20;
;;;8683   	else t[0]=t_ext[0];
;;;8684   
;;;8685   	mat_temper=t[0];
;;;8686   			
;;;8687   	if(mat_temper<0)temp_SL=UB0; 
;;;8688   	else 
;;;8689   		{
;;;8690   		if(mat_temper>40)mat_temper=40; 
;;;8691   		temp_SL=(UB20-UB0)*10;
;;;8692   		temp_SL*=mat_temper;
;;;8693   		temp_SL/=200;
;;;8694   		temp_SL+=UB0;
;;;8695   		}
;;;8696   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
;;;8697   		{
;;;8698   		temp_SL=UVZ;
006902  48ff              LDR      r0,|L1.27904|
006904  f9b02000          LDRSH    r2,[r0,#0]
006908  4dfe              LDR      r5,|L1.27908|
00690a  4cff              LDR      r4,|L1.27912|
00690c  b139              CBZ      r1,|L1.26910|
00690e  48ff              LDR      r0,|L1.27916|
006910  7800              LDRB     r0,[r0,#0]            ;8682  ; ND_EXT
006912  b130              CBZ      r0,|L1.26914|
006914  f04f0014          MOV      r0,#0x14              ;8682
006918  f8ad0000          STRH     r0,[sp,#0]            ;8682
00691c  e005              B        |L1.26922|
                  |L1.26910|
00691e  8023              STRH     r3,[r4,#0]            ;8678
006920  e02c              B        |L1.27004|
                  |L1.26914|
006922  48fb              LDR      r0,|L1.27920|
006924  8800              LDRH     r0,[r0,#0]            ;8683  ; t_ext
006926  f8ad0000          STRH     r0,[sp,#0]            ;8683
                  |L1.26922|
00692a  4efa              LDR      r6,|L1.27924|
00692c  f9bd1000          LDRSH    r1,[sp,#0]            ;8685
006930  6031              STR      r1,[r6,#0]            ;8685  ; mat_temper
006932  48f9              LDR      r0,|L1.27928|
006934  2900              CMP      r1,#0                 ;8687
006936  f9b00000          LDRSH    r0,[r0,#0]            ;8687
00693a  db12              BLT      |L1.26978|
00693c  2928              CMP      r1,#0x28              ;8690
00693e  dd02              BLE      |L1.26950|
006940  f04f0128          MOV      r1,#0x28              ;8690
006944  6031              STR      r1,[r6,#0]            ;8690  ; mat_temper
                  |L1.26950|
006946  eba30100          SUB      r1,r3,r0              ;8691
00694a  eb010181          ADD      r1,r1,r1,LSL #2       ;8691
00694e  ea4f0141          LSL      r1,r1,#1              ;8691
006952  6833              LDR      r3,[r6,#0]            ;8692  ; mat_temper
006954  fb01f103          MUL      r1,r1,r3              ;8692
006958  f04f03c8          MOV      r3,#0xc8              ;8693
00695c  fb91f1f3          SDIV     r1,r1,r3              ;8693
006960  4408              ADD      r0,r0,r1              ;8694
                  |L1.26978|
006962  f8951023          LDRB     r1,[r5,#0x23]         ;8696  ; spc_stat
006966  2902              CMP      r1,#2                 ;8696
006968  d107              BNE      |L1.27002|
00696a  49ec              LDR      r1,|L1.27932|
00696c  7809              LDRB     r1,[r1,#0]            ;8696  ; sk_stat
00696e  2901              CMP      r1,#1                 ;8696
006970  d002              BEQ      |L1.27000|
006972  49eb              LDR      r1,|L1.27936|
006974  8809              LDRH     r1,[r1,#0]            ;8696  ; VZ_CH_VENT_BLOK
006976  b901              CBNZ     r1,|L1.27002|
                  |L1.27000|
006978  4610              MOV      r0,r2
                  |L1.27002|
;;;8699   		}
;;;8700   	u_necc=(unsigned int)temp_SL;
00697a  8020              STRH     r0,[r4,#0]
                  |L1.27004|
;;;8701   	///u_necc=3456;
;;;8702   	}  
;;;8703   
;;;8704   //u_necc=2355;
;;;8705   
;;;8706   if((speedChIsOn)||(sp_ch_stat==scsWRK))
00697c  48e9              LDR      r0,|L1.27940|
00697e  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
006980  b918              CBNZ     r0,|L1.27018|
006982  48e9              LDR      r0,|L1.27944|
006984  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
006986  2802              CMP      r0,#2
006988  d102              BNE      |L1.27024|
                  |L1.27018|
;;;8707   	{
;;;8708   	u_necc=speedChrgVolt;
00698a  48e8              LDR      r0,|L1.27948|
00698c  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
00698e  8020              STRH     r0,[r4,#0]
                  |L1.27024|
;;;8709   	}
;;;8710   if(hv_vz_stat==hvsWRK)
006990  48e7              LDR      r0,|L1.27952|
006992  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
006994  2805              CMP      r0,#5
006996  d100              BNE      |L1.27034|
;;;8711   	{
;;;8712   	u_necc=UVZ;
006998  8022              STRH     r2,[r4,#0]
                  |L1.27034|
;;;8713   	}
;;;8714   if(vz1_stat==vz1sWRK)
00699a  7968              LDRB     r0,[r5,#5]  ; vz1_stat
00699c  280a              CMP      r0,#0xa
00699e  d102              BNE      |L1.27046|
;;;8715   	{
;;;8716   	u_necc=UZ_U;
0069a0  48e4              LDR      r0,|L1.27956|
0069a2  8800              LDRH     r0,[r0,#0]  ; UZ_U
0069a4  8020              STRH     r0,[r4,#0]
                  |L1.27046|
;;;8717   	}
;;;8718   if(vz2_stat==vz2sWRK1)
0069a6  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
0069a8  280a              CMP      r0,#0xa
0069aa  d102              BNE      |L1.27058|
;;;8719   	{
;;;8720   	u_necc=FZ_U1;
0069ac  49e2              LDR      r1,|L1.27960|
0069ae  8809              LDRH     r1,[r1,#0]  ; FZ_U1
0069b0  8021              STRH     r1,[r4,#0]
                  |L1.27058|
;;;8721   	}
;;;8722   if(vz2_stat==vz2sWRK2)
0069b2  280b              CMP      r0,#0xb
0069b4  d102              BNE      |L1.27068|
;;;8723   	{
;;;8724   	u_necc=FZ_U2;
0069b6  48e1              LDR      r0,|L1.27964|
0069b8  8800              LDRH     r0,[r0,#0]  ; FZ_U2
0069ba  8020              STRH     r0,[r4,#0]
                  |L1.27068|
;;;8725   	}
;;;8726   
;;;8727   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
0069bc  48e0              LDR      r0,|L1.27968|
0069be  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
0069c0  2801              CMP      r0,#1
0069c2  d001              BEQ      |L1.27080|
0069c4  2802              CMP      r0,#2
0069c6  d102              BNE      |L1.27086|
                  |L1.27080|
;;;8728   	{
;;;8729   	u_necc=U_AVT;
0069c8  48de              LDR      r0,|L1.27972|
0069ca  8800              LDRH     r0,[r0,#0]  ; U_AVT
0069cc  8020              STRH     r0,[r4,#0]
                  |L1.27086|
;;;8730   	}
;;;8731   
;;;8732   if(mess_find_unvol(MESS2UNECC_HNDL))
0069ce  20be              MOVS     r0,#0xbe
0069d0  f7fffffe          BL       mess_find_unvol
0069d4  b128              CBZ      r0,|L1.27106|
;;;8733   	{		
;;;8734   	if(mess_data[0]==PARAM_UNECC_SET)
0069d6  48dc              LDR      r0,|L1.27976|
0069d8  6801              LDR      r1,[r0,#0]  ; mess_data
0069da  29bf              CMP      r1,#0xbf
0069dc  d101              BNE      |L1.27106|
;;;8735   		{
;;;8736   		u_necc=mess_data[1];
0069de  6840              LDR      r0,[r0,#4]  ; mess_data
0069e0  8020              STRH     r0,[r4,#0]
                  |L1.27106|
;;;8737   		}		
;;;8738   	} 
;;;8739   
;;;8740   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8741   #endif
;;;8742   
;;;8743   
;;;8744   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8745   
;;;8746   #ifndef UKU_TELECORE2015
;;;8747   #ifndef UKU_TELECORE2017
;;;8748   if(unh_cnt0<10)
;;;8749   	{
;;;8750   	unh_cnt0++;
;;;8751   	if(unh_cnt0>=10)
;;;8752   		{
;;;8753   		unh_cnt0=0;
;;;8754   		b1Hz_unh=1;
;;;8755   		}
;;;8756   	}
;;;8757   
;;;8758   if(unh_cnt1<5)
;;;8759   	{
;;;8760   	unh_cnt1++;
;;;8761   	if(unh_cnt1==5)
;;;8762   		{
;;;8763   		unh_cnt1=0;
;;;8764   //		b2Hz_unh=1;
;;;8765   		}
;;;8766   	} 
;;;8767   
;;;8768   
;;;8769   
;;;8770   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8771   	{		
;;;8772   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8773   		{
;;;8774   		u_necc=mess_data[1];
;;;8775   		}		
;;;8776   	}
;;;8777   
;;;8778   
;;;8779   else if(b1Hz_unh)
;;;8780   	{
;;;8781   	
;;;8782   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8783   		{
;;;8784   		
;;;8785   		u_necc=U0B;
;;;8786   		#ifdef IPS_SGEP_GAZPROM
;;;8787   		u_necc=UB0;
;;;8788   		#endif
;;;8789   		}
;;;8790   	else 
;;;8791   		{
;;;8792   		if(BAT_TYPE==0) //если батарея обычная
;;;8793   			{
;;;8794   			for(i=0;i<2;i++)
;;;8795   				{
;;;8796   				if(BAT_IS_ON[i]==bisON)
;;;8797   					{
;;;8798   					if(bat[i]._nd)t[i]=20;
;;;8799   					else t[i]=bat[i]._Tb;
;;;8800   					}
;;;8801   				else
;;;8802   					{
;;;8803   					t[i]=-20;
;;;8804   					}
;;;8805   				}
;;;8806   			if(t[0]>t[1])mat_temper=t[0];
;;;8807   			else mat_temper=t[1];
;;;8808   			
;;;8809   		
;;;8810   			if(mat_temper<0)temp_SL=UB0; 
;;;8811   			else 
;;;8812   				{
;;;8813   				if(mat_temper>40)mat_temper=40; 
;;;8814   				temp_SL=(UB20-UB0)*10;
;;;8815   				temp_SL*=mat_temper;
;;;8816   				temp_SL/=200;
;;;8817   				temp_SL+=UB0;
;;;8818   				}
;;;8819   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8820   				{
;;;8821   				temp_SL=UVZ;
;;;8822   				}
;;;8823   			u_necc=(unsigned int)temp_SL;
;;;8824   			}
;;;8825   		else if(BAT_TYPE==1) //если батарея китайская
;;;8826   			{
;;;8827   			u_necc=U0B;
;;;8828   					
;;;8829   			u_necc=bat[0]._Ub+10;
;;;8830   
;;;8831   			
;;;8832   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8833   				{
;;;8834   				u_necc=UVZ;
;;;8835   				}
;;;8836   			if(u_necc>=UB0) u_necc=UB0;
;;;8837   			if(u_necc>=UB20) u_necc=UB20;
;;;8838   			}
;;;8839   		}  
;;;8840   	}
;;;8841   #endif
;;;8842   #endif
;;;8843   
;;;8844   #ifdef UKU_TELECORE2015
;;;8845   
;;;8846   if(unh_cnt0<10)
;;;8847   	{
;;;8848   	unh_cnt0++;
;;;8849   	if(unh_cnt0>=10)
;;;8850   		{
;;;8851   		unh_cnt0=0;
;;;8852   		b1Hz_unh=1;
;;;8853   		}
;;;8854   	}
;;;8855   
;;;8856   if(unh_cnt1<5)
;;;8857   	{
;;;8858   	unh_cnt1++;
;;;8859   	if(unh_cnt1==5)
;;;8860   		{
;;;8861   		unh_cnt1=0;
;;;8862   //		b2Hz_unh=1;
;;;8863   		}
;;;8864   	} 
;;;8865   
;;;8866   
;;;8867   
;;;8868   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8869   	{		
;;;8870   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8871   		{
;;;8872   		u_necc=mess_data[1];
;;;8873   		}		
;;;8874   	}
;;;8875   
;;;8876   
;;;8877   else if(b1Hz_unh)
;;;8878   	{
;;;8879   	b1Hz_unh=0;
;;;8880   
;;;8881   	if(BAT_TYPE==0)
;;;8882   		{
;;;8883   		if(bat[0]._nd)mat_temper=20;
;;;8884   		else mat_temper=bat[0]._Tb;
;;;8885   
;;;8886   			
;;;8887   		if(mat_temper<0)temp_SL=UB0; 
;;;8888   		else 
;;;8889   			{
;;;8890   			if(mat_temper>40)mat_temper=40; 
;;;8891   			temp_SL=(UB20-UB0)*10;
;;;8892   			temp_SL*=mat_temper;
;;;8893   			temp_SL/=200;
;;;8894   			temp_SL+=UB0;
;;;8895   			}
;;;8896   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8897   			{
;;;8898   			temp_SL=UVZ;
;;;8899   			}
;;;8900   		u_necc=(unsigned int)temp_SL;
;;;8901   	///u_necc=3456;
;;;8902   		}
;;;8903   	else if(BAT_TYPE==1)
;;;8904   		{
;;;8905   		
;;;8906   		gran(&DU_LI_BAT,1,30);
;;;8907   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8908   		gran(&u_necc,0,UB0);
;;;8909   		gran(&u_necc,0,UB20);
;;;8910   		gran(&u_necc,0,540);		
;;;8911   
;;;8912   
;;;8913   		if(li_bat._batStat!=bsOK)
;;;8914   			{
;;;8915   			u_necc=U0B;
;;;8916   			}
;;;8917   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8918   			{
;;;8919   			u_necc=UVZ;
;;;8920   			}
;;;8921   		/* 
;;;8922   		u_necc=U0B;
;;;8923   		
;;;8924   
;;;8925   	
;;;8926   		u_necc=UB0;
;;;8927   		u_necc=li_bat._Ub+10;
;;;8928   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8929   			{
;;;8930   			lakb_error_cnt++;
;;;8931   			if(lakb_error_cnt>=30)
;;;8932   				{
;;;8933   				lakb_error_cnt=30;
;;;8934   				u_necc=U0B;
;;;8935   				}
;;;8936   			}
;;;8937   		else lakb_error_cnt=0;*/
;;;8938   		}
;;;8939   	else if(BAT_TYPE==2)
;;;8940   		{
;;;8941   		u_necc=U0B;
;;;8942   		
;;;8943   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8944   			{
;;;8945   			u_necc=UVZ;
;;;8946   			}
;;;8947   	
;;;8948   		u_necc=UB0;
;;;8949   		}
;;;8950   
;;;8951   	else if(BAT_TYPE==3)
;;;8952   		{
;;;8953   		u_necc=U0B;
;;;8954   		
;;;8955   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8956   			{
;;;8957   			u_necc=UVZ;
;;;8958   			}
;;;8959   
;;;8960   		gran(&DU_LI_BAT,1,30);
;;;8961   
;;;8962   
;;;8963   		if(lakbNotErrorNum==0)
;;;8964   			{
;;;8965   			u_necc=U0B;
;;;8966   			}
;;;8967   		else 
;;;8968   			{
;;;8969   			signed short i;
;;;8970   			//signed short u_necc_max;
;;;8971   			//u_necc_max=0;
;;;8972   			char soc_flag=0;
;;;8973   
;;;8974   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8975   				{
;;;8976   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8977   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8978   				}
;;;8979   
;;;8980   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8981   			}
;;;8982   		gran(&u_necc,0,UB0);
;;;8983   		//gran(&u_necc,0,UB20);
;;;8984   		gran(&u_necc,0,540);
;;;8985   		}
;;;8986   	}
;;;8987   
;;;8988   #endif 
;;;8989   
;;;8990   #ifdef UKU_TELECORE2017
;;;8991   
;;;8992   if(unh_cnt0<10)
;;;8993   	{
;;;8994   	unh_cnt0++;
;;;8995   	if(unh_cnt0>=10)
;;;8996   		{
;;;8997   		unh_cnt0=0;
;;;8998   		b1Hz_unh=1;
;;;8999   		}
;;;9000   	}
;;;9001   
;;;9002   if(unh_cnt1<5)
;;;9003   	{
;;;9004   	unh_cnt1++;
;;;9005   	if(unh_cnt1==5)
;;;9006   		{
;;;9007   		unh_cnt1=0;
;;;9008   //		b2Hz_unh=1;
;;;9009   		}
;;;9010   	} 
;;;9011   
;;;9012   
;;;9013   
;;;9014   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9015   	{		
;;;9016   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9017   		{
;;;9018   		u_necc=mess_data[1];
;;;9019   		}		
;;;9020   	}
;;;9021   
;;;9022   
;;;9023   else if(b1Hz_unh)
;;;9024   	{
;;;9025   	b1Hz_unh=0;
;;;9026   
;;;9027   	if(BAT_TYPE==0)
;;;9028   		{
;;;9029   		if(bat[0]._nd)mat_temper=20;
;;;9030   		else mat_temper=bat[0]._Tb;
;;;9031   
;;;9032   			
;;;9033   		if(mat_temper<0)temp_SL=UB0; 
;;;9034   		else 
;;;9035   			{
;;;9036   			if(mat_temper>40)mat_temper=40; 
;;;9037   			temp_SL=(UB20-UB0)*10;
;;;9038   			temp_SL*=mat_temper;
;;;9039   			temp_SL/=200;
;;;9040   			temp_SL+=UB0;
;;;9041   			}
;;;9042   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9043   			{
;;;9044   			temp_SL=UVZ;
;;;9045   			}
;;;9046   		u_necc=(unsigned int)temp_SL;
;;;9047   	///u_necc=3456;
;;;9048   		}
;;;9049   	else if(BAT_TYPE==1)
;;;9050   		{
;;;9051   		
;;;9052   		gran(&DU_LI_BAT,1,30);
;;;9053   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9054   		gran(&u_necc,0,UB0);
;;;9055   		gran(&u_necc,0,UB20);
;;;9056   		gran(&u_necc,0,540);		
;;;9057   
;;;9058   
;;;9059   		if(li_bat._batStat!=bsOK)
;;;9060   			{
;;;9061   			u_necc=U0B;
;;;9062   			}
;;;9063   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9064   			{
;;;9065   			u_necc=UVZ;
;;;9066   			}
;;;9067   		}
;;;9068   	else if(BAT_TYPE==2)
;;;9069   		{
;;;9070   		u_necc=U0B;
;;;9071   		
;;;9072   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9073   			{
;;;9074   			u_necc=UVZ;
;;;9075   			}
;;;9076   	
;;;9077   		u_necc=UB0;
;;;9078   		}
;;;9079   
;;;9080   	else if(BAT_TYPE==3)
;;;9081   		{
;;;9082   		u_necc=U0B;
;;;9083   		
;;;9084   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9085   			{
;;;9086   			u_necc=UVZ;
;;;9087   			}
;;;9088   
;;;9089   		gran(&DU_LI_BAT,1,30);
;;;9090   
;;;9091   
;;;9092   		if(lakbNotErrorNum==0)
;;;9093   			{
;;;9094   			u_necc=U0B;
;;;9095   			}
;;;9096   		else 
;;;9097   			{
;;;9098   			signed short i;
;;;9099   			//signed short u_necc_max;
;;;9100   			//u_necc_max=0;
;;;9101   			char soc_flag=0;
;;;9102   
;;;9103   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9104   				{
;;;9105   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9106   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9107   				}
;;;9108   
;;;9109   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9110   			}
;;;9111   		gran(&u_necc,0,UB0);
;;;9112   		//gran(&u_necc,0,UB20);
;;;9113   		gran(&u_necc,0,540);
;;;9114   		}
;;;9115   	}
;;;9116   
;;;9117   #endif 
;;;9118   //u_necc=2356;
;;;9119   
;;;9120   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9121   	{
;;;9122   	u_necc=speedChrgVolt;
;;;9123   	}
;;;9124   #endif//gran(&u_necc,400,UMAX);
;;;9125   
;;;9126   
;;;9127   
;;;9128   temp_L=(signed long) u_necc;
0069e2  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9129   temp_L*=98L;
0069e6  f04f0162          MOV      r1,#0x62
0069ea  fb00f101          MUL      r1,r0,r1
;;;9130   temp_L/=100L;
0069ee  f04f0264          MOV      r2,#0x64
0069f2  fb91f1f2          SDIV     r1,r1,r2
;;;9131   u_necc_dn=(signed short)temp_L;
0069f6  4bd5              LDR      r3,|L1.27980|
0069f8  8019              STRH     r1,[r3,#0]
;;;9132   
;;;9133   temp_L=(signed long) u_necc;
;;;9134   temp_L*=102L;
0069fa  f04f0166          MOV      r1,#0x66
0069fe  fb00f001          MUL      r0,r0,r1
;;;9135   temp_L/=100L;
006a02  fb90f0f2          SDIV     r0,r0,r2
;;;9136   u_necc_up=(signed short)temp_L;
006a06  49d2              LDR      r1,|L1.27984|
006a08  8008              STRH     r0,[r1,#0]
;;;9137   /*
;;;9138   #ifdef IPS_SGEP_GAZPROM
;;;9139   u_necc=248;
;;;9140   #endif */
;;;9141   }
006a0a  bdf8              POP      {r3-r7,pc}
;;;9142   
                          ENDP

                  num_necc_hndl PROC
;;;9144   //-----------------------------------------------
;;;9145   void num_necc_hndl(void)
006a0c  e92d41f0          PUSH     {r4-r8,lr}
;;;9146   {
;;;9147   
;;;9148   static short num_necc_block_cnt;
;;;9149   if(num_necc_block_cnt) num_necc_block_cnt--;
006a10  4cbc              LDR      r4,|L1.27908|
006a12  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
006a16  b110              CBZ      r0,|L1.27166|
006a18  f1a00001          SUB      r0,r0,#1
006a1c  8720              STRH     r0,[r4,#0x38]
                  |L1.27166|
;;;9150   
;;;9151   Isumm_=Isumm;
006a1e  48cd              LDR      r0,|L1.27988|
006a20  4dcd              LDR      r5,|L1.27992|
006a22  8800              LDRH     r0,[r0,#0]  ; Isumm
006a24  8028              STRH     r0,[r5,#0]
;;;9152   
;;;9153   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
006a26  4ecd              LDR      r6,|L1.27996|
006a28  270a              MOVS     r7,#0xa
006a2a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
006a2e  2800              CMP      r0,#0
006a30  da06              BGE      |L1.27200|
006a32  f7fffffe          BL       abs
006a36  fb90f0f7          SDIV     r0,r0,r7
006a3a  8829              LDRH     r1,[r5,#0]  ; Isumm_
006a3c  4408              ADD      r0,r0,r1
006a3e  8028              STRH     r0,[r5,#0]
                  |L1.27200|
;;;9154   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
006a40  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
006a44  2800              CMP      r0,#0
006a46  da06              BGE      |L1.27222|
006a48  f7fffffe          BL       abs
006a4c  fb90f0f7          SDIV     r0,r0,r7
006a50  8829              LDRH     r1,[r5,#0]  ; Isumm_
006a52  4408              ADD      r0,r0,r1
006a54  8028              STRH     r0,[r5,#0]
                  |L1.27222|
;;;9155   
;;;9156   num_necc_up=(Isumm_/((signed short)IMAX))+1;
006a56  49c2              LDR      r1,|L1.28000|
006a58  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
006a5c  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
006a60  fb90f1f1          SDIV     r1,r0,r1
006a64  f1010101          ADD      r1,r1,#1
006a68  b2c9              UXTB     r1,r1
006a6a  77e1              STRB     r1,[r4,#0x1f]
;;;9157   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9158   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9159   
;;;9160   num_necc_down=(Isumm_/((signed short)IMIN))+1;
006a6c  4abd              LDR      r2,|L1.28004|
006a6e  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
006a72  fb90f0f2          SDIV     r0,r0,r2
006a76  f1000001          ADD      r0,r0,#1
006a7a  b2c2              UXTB     r2,r0
006a7c  f8842020          STRB     r2,[r4,#0x20]
;;;9161   
;;;9162   if(num_necc_up>num_necc)
006a80  48b9              LDR      r0,|L1.28008|
;;;9163   	{
;;;9164   	num_necc=num_necc_up;
;;;9165   	num_necc_block_cnt=60;
006a82  f04f053c          MOV      r5,#0x3c
006a86  f9b03000          LDRSH    r3,[r0,#0]            ;9162  ; num_necc
006a8a  4299              CMP      r1,r3                 ;9162
006a8c  dd02              BLE      |L1.27284|
006a8e  8001              STRH     r1,[r0,#0]            ;9164
006a90  8725              STRH     r5,[r4,#0x38]
006a92  e005              B        |L1.27296|
                  |L1.27284|
;;;9166   	}
;;;9167   else if(num_necc_down<num_necc)
006a94  429a              CMP      r2,r3
006a96  da03              BGE      |L1.27296|
;;;9168   	{
;;;9169   	if(!num_necc_block_cnt)
006a98  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
006a9a  b909              CBNZ     r1,|L1.27296|
;;;9170   		{
;;;9171   		num_necc=num_necc_down;
006a9c  8002              STRH     r2,[r0,#0]
;;;9172   		num_necc_block_cnt=60;
006a9e  8725              STRH     r5,[r4,#0x38]
                  |L1.27296|
;;;9173   		}
;;;9174   	}
;;;9175   
;;;9176   if(PAR) num_necc=NUMIST;
006aa0  49b2              LDR      r1,|L1.28012|
006aa2  880a              LDRH     r2,[r1,#0]  ; PAR
006aa4  49b2              LDR      r1,|L1.28016|
006aa6  b10a              CBZ      r2,|L1.27308|
006aa8  880a              LDRH     r2,[r1,#0]  ; NUMIST
006aaa  8002              STRH     r2,[r0,#0]
                  |L1.27308|
;;;9177   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9178   if(bPARALLEL) num_necc=NUMIST;
006aac  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
006ab0  b10a              CBZ      r2,|L1.27318|
006ab2  880a              LDRH     r2,[r1,#0]  ; NUMIST
006ab4  8002              STRH     r2,[r0,#0]
                  |L1.27318|
;;;9179   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
006ab6  7962              LDRB     r2,[r4,#5]  ; vz1_stat
006ab8  2a0a              CMP      r2,#0xa
006aba  d101              BNE      |L1.27328|
006abc  880a              LDRH     r2,[r1,#0]  ; NUMIST
006abe  8002              STRH     r2,[r0,#0]
                  |L1.27328|
;;;9180   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
006ac0  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
006ac2  2a0a              CMP      r2,#0xa
006ac4  d001              BEQ      |L1.27338|
006ac6  2a0b              CMP      r2,#0xb
006ac8  d101              BNE      |L1.27342|
                  |L1.27338|
006aca  880a              LDRH     r2,[r1,#0]  ; NUMIST
006acc  8002              STRH     r2,[r0,#0]
                  |L1.27342|
;;;9181   #endif
;;;9182   
;;;9183   gran(&num_necc,1,NUMIST);
006ace  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
006ad2  e8bd41f0          POP      {r4-r8,lr}
006ad6  2101              MOVS     r1,#1
006ad8  48a3              LDR      r0,|L1.28008|
006ada  f7ffbffe          B.W      gran
;;;9184   
;;;9185   }
;;;9186   
                          ENDP

                  cntrl_hndl PROC
;;;9189   //-----------------------------------------------
;;;9190   void cntrl_hndl(void)
006ade  e92d5ff0          PUSH     {r4-r12,lr}
;;;9191   {
;;;9192   
;;;9193   
;;;9194   
;;;9195   IZMAX_=IZMAX;
006ae2  48a4              LDR      r0,|L1.28020|
006ae4  4c87              LDR      r4,|L1.27908|
006ae6  8800              LDRH     r0,[r0,#0]  ; IZMAX
006ae8  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9196   
;;;9197   //cntrl_hndl_plazma=10;
;;;9198   
;;;9199   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
006aec  488d              LDR      r0,|L1.27940|
006aee  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
006af0  b918              CBNZ     r0,|L1.27386|
006af2  488d              LDR      r0,|L1.27944|
006af4  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
006af6  2802              CMP      r0,#2
006af8  d103              BNE      |L1.27394|
                  |L1.27386|
006afa  489f              LDR      r0,|L1.28024|
006afc  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
006afe  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.27394|
;;;9200   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
006b02  7960              LDRB     r0,[r4,#5]  ; vz1_stat
006b04  280a              CMP      r0,#0xa
006b06  d103              BNE      |L1.27408|
006b08  489c              LDR      r0,|L1.28028|
006b0a  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
006b0c  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.27408|
;;;9201   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
006b10  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
006b12  280a              CMP      r0,#0xa
006b14  d103              BNE      |L1.27422|
006b16  499a              LDR      r1,|L1.28032|
006b18  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
006b1a  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.27422|
;;;9202   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
006b1e  280b              CMP      r0,#0xb
006b20  d103              BNE      |L1.27434|
006b22  4898              LDR      r0,|L1.28036|
006b24  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
006b26  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.27434|
;;;9203   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9204   
;;;9205   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
006b2a  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt
006b2e  b118              CBZ      r0,|L1.27448|
006b30  f1a00001          SUB      r0,r0,#1
006b34  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.27448|
;;;9206   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
006b38  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt_
006b3c  b118              CBZ      r0,|L1.27462|
006b3e  f1a00001          SUB      r0,r0,#1
006b42  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.27462|
;;;9207   
;;;9208   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
006b46  4885              LDR      r0,|L1.27996|
006b48  f04f080a          MOV      r8,#0xa               ;9200
006b4c  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
006b50  0789              LSLS     r1,r1,#30
006b52  d103              BNE      |L1.27484|
006b54  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
006b58  0780              LSLS     r0,r0,#30
006b5a  d005              BEQ      |L1.27496|
                  |L1.27484|
006b5c  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
006b60  fbb0f0f8          UDIV     r0,r0,r8
006b64  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.27496|
;;;9209   
;;;9210   
;;;9211   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9212   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
006b68  4887              LDR      r0,|L1.28040|
006b6a  2601              MOVS     r6,#1
006b6c  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
006b70  1e49              SUBS     r1,r1,#1
006b72  2905              CMP      r1,#5
006b74  d300              BCC      |L1.27512|
006b76  8006              STRH     r6,[r0,#0]
                  |L1.27512|
;;;9213   if(ch_cnt0<(10*REG_SPEED))
006b78  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
006b7c  2500              MOVS     r5,#0                 ;9199
006b7e  eb000180          ADD      r1,r0,r0,LSL #2
006b82  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
006b84  ebb00f41          CMP      r0,r1,LSL #1
006b88  da08              BGE      |L1.27548|
;;;9214   	{
;;;9215   	ch_cnt0++;
006b8a  f1000001          ADD      r0,r0,#1
006b8e  b2c0              UXTB     r0,r0
006b90  7560              STRB     r0,[r4,#0x15]
;;;9216   	if(ch_cnt0>=10*REG_SPEED)
006b92  ebb00f41          CMP      r0,r1,LSL #1
006b96  db01              BLT      |L1.27548|
;;;9217   		{
;;;9218   		ch_cnt0=0;
006b98  7565              STRB     r5,[r4,#0x15]
;;;9219   		b1Hz_ch=1;
006b9a  75a6              STRB     r6,[r4,#0x16]
                  |L1.27548|
;;;9220   		}
;;;9221   	}
;;;9222   #endif
;;;9223   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9224   if(ch_cnt0<10)
;;;9225   	{
;;;9226   	ch_cnt0++;
;;;9227   	if(ch_cnt0>=10)
;;;9228   		{
;;;9229   		ch_cnt0=0;
;;;9230   		b1Hz_ch=1;
;;;9231   		}
;;;9232   	}
;;;9233   #endif
;;;9234   
;;;9235   
;;;9236   if(mess_find_unvol(MESS2CNTRL_HNDL))
006b9c  20e1              MOVS     r0,#0xe1
006b9e  f7fffffe          BL       mess_find_unvol
;;;9237   	{
;;;9238   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9239   		{
;;;9240   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9241   		}
;;;9242   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9243   		{
;;;9244   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9245   		}
;;;9246   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9247   		{
;;;9248   		static char cntrlStatIsDownCnt;
;;;9249   		cntrl_stat--;
;;;9250   
;;;9251   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9252   			{
;;;9253   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9254   			}
;;;9255   		else 
;;;9256   			{
;;;9257   			cntrlStatIsDownCnt=0;
;;;9258   			}
;;;9259   
;;;9260   		}
;;;9261   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9262   		{
;;;9263   		cntrl_stat/*_new*/=mess_data[1];
;;;9264   		}
;;;9265   
;;;9266   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9267   		{
;;;9268   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9269   		if(bps_U>u_necc)
006ba2  f8dfc1e8          LDR      r12,|L1.28044|
006ba6  4a58              LDR      r2,|L1.27912|
;;;9270   			{
;;;9271   			cntrl_hndl_plazma=11;
;;;9272   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9273   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9274   			}
;;;9275   		else if(bps_U<u_necc)
;;;9276   			{
;;;9277   			cntrl_hndl_plazma=12;	
;;;9278   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9279   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9280   			}
;;;9281   		#elif defined(UKU_220)
;;;9282   		if(load_U>u_necc)
;;;9283   			{
;;;9284   			cntrl_hndl_plazma=13;
;;;9285   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9286   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9287   			}
;;;9288   		else if(load_U<u_necc)
;;;9289   			{
;;;9290   			cntrl_hndl_plazma=14;	
;;;9291   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9292   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9293   			}
;;;9294   		#elif defined(UKU_220_V2)
;;;9295   		if(load_U>u_necc)
;;;9296   			{
;;;9297   			cntrl_hndl_plazma=15;
;;;9298   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9299   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9300   			}
;;;9301   		else if(load_U<u_necc)
;;;9302   			{
;;;9303   			cntrl_hndl_plazma=16;	
;;;9304   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9305   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9306   			}
;;;9307   		#else
;;;9308   
;;;9309   		if(load_U>u_necc)
;;;9310   			{
;;;9311   			cntrl_hndl_plazma=17;
;;;9312   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9313   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9314   			}
;;;9315   		else if(load_U<u_necc)
;;;9316   			{
;;;9317   			cntrl_hndl_plazma=18;	
;;;9318   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9319   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9320   			}
;;;9321   		#endif	
;;;9322   	 	}
;;;9323   
;;;9324   	/*gran(&cntrl_stat_new,10,1010);			
;;;9325   	cntrl_stat_old=cntrl_stat_new;
;;;9326   	cntrl_stat=cntrl_stat_new;*/
;;;9327   	}
;;;9328   
;;;9329   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9330   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
006ba8  f8df91e4          LDR      r9,|L1.28048|
;;;9331   	{
;;;9332   	cntrl_stat_new=cntrl_stat_old;
;;;9333   	cntrl_hndl_plazma=19;
;;;9334   	if((Ibmax/10)>(2*IZMAX_))
;;;9335   		{
;;;9336   		cntrl_hndl_plazma=20;
;;;9337             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9338   		else	cntrl_stat_new-=10;
;;;9339   		}		
;;;9340   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9341   		{
;;;9342   		cntrl_hndl_plazma=21;
;;;9343             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9344             else	cntrl_stat_new-=3;
;;;9345   		}   
;;;9346   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9347   		{
;;;9348   		cntrl_hndl_plazma=22;
;;;9349   		cntrl_stat_new--;
;;;9350   		}
;;;9351   		
;;;9352   	else if(bps_U<u_necc)
;;;9353   		{
;;;9354   		cntrl_hndl_plazma=23;
;;;9355   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9356   			{
;;;9357   			cntrl_hndl_plazma=24;
;;;9358   			if(Ibmax<0)
;;;9359   				{
;;;9360   				cntrl_hndl_plazma=25;
;;;9361                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9362   				else cntrl_stat_new+=10;
;;;9363   				}
;;;9364   			else if(Ibmax<(IZMAX_*5))
;;;9365   				{
;;;9366   				cntrl_hndl_plazma=26;
;;;9367                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9368   				else	cntrl_stat_new+=2;
;;;9369   				}
;;;9370   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9371   				{
;;;9372   				cntrl_hndl_plazma=27;
;;;9373   				cntrl_stat_new++;
;;;9374   				}					
;;;9375   			}
;;;9376   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9377   			{
;;;9378   			cntrl_hndl_plazma=28;
;;;9379   			if(Ibmax<(IZMAX_*5))
;;;9380   				{
;;;9381   				cntrl_hndl_plazma=29;
;;;9382                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9383   				else	cntrl_stat_new+=2;
;;;9384   				}
;;;9385   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9386   				{
;;;9387   				cntrl_hndl_plazma=30;
;;;9388   				cntrl_stat_new++;
;;;9389   				}					
;;;9390   			}	
;;;9391   		else if(bps_U<(u_necc-1))
;;;9392   			{
;;;9393   			cntrl_hndl_plazma=31;
;;;9394   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9395   				{
;;;9396   				cntrl_hndl_plazma=32;
;;;9397   				cntrl_stat_new++;
;;;9398   				}					
;;;9399   			}					
;;;9400   		}	
;;;9401   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9402   		{ 	
;;;9403   		cntrl_hndl_plazma=33;
;;;9404   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9405   			{
;;;9406   			cntrl_hndl_plazma=34;
;;;9407                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9408   			else	cntrl_stat_new-=10;
;;;9409   			}
;;;9410   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9411   			{
;;;9412   			cntrl_hndl_plazma=35;
;;;9413                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9414   			else cntrl_stat_new-=2;
;;;9415   			}	
;;;9416   		else if(bps_U>(u_necc+1))
;;;9417   			{
;;;9418   			cntrl_hndl_plazma=36;
;;;9419   			cntrl_stat_new--;
;;;9420   			}					
;;;9421   		}
;;;9422   
;;;9423   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9424   		{
;;;9425   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9426   		}
;;;9427   
;;;9428   	gran(&cntrl_stat_new,10,1010);
;;;9429   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9430   	cntrl_stat_old=cntrl_stat_new;
;;;9431   	cntrl_stat=cntrl_stat_new;
;;;9432   	
;;;9433   	if(ICA_EN==0)
;;;9434   		{
;;;9435   		if(ica_cntrl_hndl_cnt)
006bac  4f79              LDR      r7,|L1.28052|
006bae  b398              CBZ      r0,|L1.27672|
006bb0  4965              LDR      r1,|L1.27976|
006bb2  6808              LDR      r0,[r1,#0]            ;9238  ; mess_data
006bb4  2864              CMP      r0,#0x64              ;9238
006bb6  d008              BEQ      |L1.27594|
006bb8  2869              CMP      r0,#0x69              ;9242
006bba  d00b              BEQ      |L1.27604|
006bbc  286e              CMP      r0,#0x6e              ;9246
006bbe  d00f              BEQ      |L1.27616|
006bc0  28e5              CMP      r0,#0xe5              ;9261
006bc2  d02c              BEQ      |L1.27678|
006bc4  28e6              CMP      r0,#0xe6              ;9266
006bc6  d02d              BEQ      |L1.27684|
                  |L1.27592|
006bc8  e22b              B        |L1.28706|
                  |L1.27594|
006bca  6848              LDR      r0,[r1,#4]            ;9240  ; mess_data
006bcc  8ea1              LDRH     r1,[r4,#0x34]         ;9240  ; cntrl_stat_old
006bce  4408              ADD      r0,r0,r1              ;9240
006bd0  8660              STRH     r0,[r4,#0x32]         ;9240
006bd2  e226              B        |L1.28706|
                  |L1.27604|
006bd4  6848              LDR      r0,[r1,#4]            ;9244  ; mess_data
006bd6  8ea1              LDRH     r1,[r4,#0x34]         ;9244  ; cntrl_stat_old
006bd8  eba10000          SUB      r0,r1,r0              ;9244
006bdc  8660              STRH     r0,[r4,#0x32]         ;9244
006bde  e220              B        |L1.28706|
                  |L1.27616|
006be0  8e60              LDRH     r0,[r4,#0x32]         ;9249  ; cntrl_stat
006be2  f1a00001          SUB      r0,r0,#1              ;9249
006be6  b200              SXTH     r0,r0                 ;9249
006be8  8660              STRH     r0,[r4,#0x32]         ;9249
006bea  281e              CMP      r0,#0x1e              ;9251
006bec  dd07              BLE      |L1.27646|
006bee  486a              LDR      r0,|L1.28056|
006bf0  496a              LDR      r1,|L1.28060|
006bf2  f9b00000          LDRSH    r0,[r0,#0]            ;9251  ; load_U
006bf6  f9b11000          LDRSH    r1,[r1,#0]            ;9251  ; USIGN
006bfa  4288              CMP      r0,r1                 ;9251
006bfc  da0d              BGE      |L1.27674|
                  |L1.27646|
006bfe  7be0              LDRB     r0,[r4,#0xf]          ;9253  ; cntrlStatIsDownCnt
006c00  1c40              ADDS     r0,r0,#1              ;9253
006c02  b2c0              UXTB     r0,r0                 ;9253
006c04  73e0              STRB     r0,[r4,#0xf]          ;9253
006c06  28fa              CMP      r0,#0xfa              ;9253
006c08  d1de              BNE      |L1.27592|
006c0a  230a              MOVS     r3,#0xa               ;9253
006c0c  2200              MOVS     r2,#0                 ;9253
006c0e  21e7              MOVS     r1,#0xe7              ;9253
006c10  20e6              MOVS     r0,#0xe6              ;9253
006c12  f7fffffe          BL       mess_send
006c16  e204              B        |L1.28706|
                  |L1.27672|
006c18  e044              B        |L1.27812|
                  |L1.27674|
006c1a  73e5              STRB     r5,[r4,#0xf]          ;9257
006c1c  e201              B        |L1.28706|
                  |L1.27678|
006c1e  6848              LDR      r0,[r1,#4]            ;9263  ; mess_data
006c20  8660              STRH     r0,[r4,#0x32]         ;9263
006c22  e1fe              B        |L1.28706|
                  |L1.27684|
006c24  f9bc0000          LDRSH    r0,[r12,#0]           ;9269  ; bps_U
006c28  f9b21000          LDRSH    r1,[r2,#0]            ;9269  ; u_necc
006c2c  4288              CMP      r0,r1                 ;9269
006c2e  dd1a              BLE      |L1.27750|
006c30  f04f020b          MOV      r2,#0xb               ;9271
006c34  f884202e          STRB     r2,[r4,#0x2e]         ;9271
006c38  eba00001          SUB      r0,r0,r1              ;9272
006c3c  2828              CMP      r0,#0x28              ;9272
006c3e  dd07              BLE      |L1.27728|
006c40  f9b40032          LDRSH    r0,[r4,#0x32]         ;9272  ; cntrl_stat
006c44  2800              CMP      r0,#0                 ;9272
006c46  dd03              BLE      |L1.27728|
006c48  f1a00005          SUB      r0,r0,#5              ;9272
006c4c  8660              STRH     r0,[r4,#0x32]         ;9272
006c4e  e1e8              B        |L1.28706|
                  |L1.27728|
006c50  f9b40032          LDRSH    r0,[r4,#0x32]         ;9273  ; cntrl_stat
006c54  2800              CMP      r0,#0                 ;9273
006c56  d0b7              BEQ      |L1.27592|
006c58  7da1              LDRB     r1,[r4,#0x16]         ;9273  ; b1Hz_ch
006c5a  2900              CMP      r1,#0                 ;9273
006c5c  d0b4              BEQ      |L1.27592|
006c5e  f1a00001          SUB      r0,r0,#1              ;9273
006c62  8660              STRH     r0,[r4,#0x32]         ;9273
006c64  e1dd              B        |L1.28706|
                  |L1.27750|
006c66  daaf              BGE      |L1.27592|
006c68  f04f020c          MOV      r2,#0xc               ;9277
006c6c  f884202e          STRB     r2,[r4,#0x2e]         ;9277
006c70  eba10000          SUB      r0,r1,r0              ;9278
006c74  2828              CMP      r0,#0x28              ;9278
006c76  dd09              BLE      |L1.27788|
006c78  f9b40032          LDRSH    r0,[r4,#0x32]         ;9278  ; cntrl_stat
006c7c  f24031f7          MOV      r1,#0x3f7             ;9278
006c80  4288              CMP      r0,r1                 ;9278
006c82  da03              BGE      |L1.27788|
006c84  f1000005          ADD      r0,r0,#5              ;9278
006c88  8660              STRH     r0,[r4,#0x32]         ;9278
006c8a  e1ca              B        |L1.28706|
                  |L1.27788|
006c8c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9279  ; cntrl_stat
006c90  f5b07f7f          CMP      r0,#0x3fc             ;9279
006c94  da98              BGE      |L1.27592|
006c96  7da1              LDRB     r1,[r4,#0x16]         ;9279  ; b1Hz_ch
006c98  2900              CMP      r1,#0                 ;9279
006c9a  d095              BEQ      |L1.27592|
006c9c  f1000001          ADD      r0,r0,#1              ;9279
006ca0  8660              STRH     r0,[r4,#0x32]         ;9279
006ca2  e1be              B        |L1.28706|
                  |L1.27812|
006ca4  7da0              LDRB     r0,[r4,#0x16]         ;9330  ; b1Hz_ch
006ca6  2800              CMP      r0,#0                 ;9330
006ca8  d08e              BEQ      |L1.27592|
006caa  483d              LDR      r0,|L1.28064|
006cac  8800              LDRH     r0,[r0,#0]            ;9330  ; bIBAT_SMKLBR
006cae  b118              CBZ      r0,|L1.27832|
006cb0  f8990323          LDRB     r0,[r9,#0x323]        ;9330  ; bps
006cb4  2828              CMP      r0,#0x28              ;9330
006cb6  d987              BLS      |L1.27592|
                  |L1.27832|
006cb8  f104042e          ADD      r4,r4,#0x2e           ;9332
006cbc  f9b40006          LDRSH    r0,[r4,#6]            ;9332  ; cntrl_stat_old
006cc0  8360              STRH     r0,[r4,#0x1a]         ;9332
006cc2  f04f0113          MOV      r1,#0x13              ;9333
006cc6  7021              STRB     r1,[r4,#0]            ;9333
006cc8  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9334  ; Ibmax
006ccc  8be3              LDRH     r3,[r4,#0x1e]         ;9334  ; IZMAX_
006cce  fb91f8f8          SDIV     r8,r1,r8              ;9334
006cd2  f1a4042e          SUB      r4,r4,#0x2e           ;9334
006cd6  ebb80f43          CMP      r8,r3,LSL #1          ;9334
006cda  dd68              BLE      |L1.28078|
006cdc  f04f0114          MOV      r1,#0x14              ;9336
006ce0  f884102e          STRB     r1,[r4,#0x2e]         ;9336
006ce4  f8b41070          LDRH     r1,[r4,#0x70]         ;9337  ; cntrl_stat_blok_cnt
006ce8  b121              CBZ      r1,|L1.27892|
006cea  f1a00001          SUB      r0,r0,#1              ;9337
006cee  f8a40048          STRH     r0,[r4,#0x48]         ;9337
006cf2  e15a              B        |L1.28586|
                  |L1.27892|
006cf4  e056              B        |L1.28068|
006cf6  e05a              B        |L1.28078|
                  |L1.27896|
                          DCD      TERMOKOMPENS
                  |L1.27900|
                          DCD      UB20
                  |L1.27904|
                          DCD      UVZ
                  |L1.27908|
                          DCD      ||area_number.18||
                  |L1.27912|
                          DCD      u_necc
                  |L1.27916|
                          DCD      ND_EXT
                  |L1.27920|
                          DCD      t_ext
                  |L1.27924|
                          DCD      mat_temper
                  |L1.27928|
                          DCD      UB0
                  |L1.27932|
                          DCD      sk_stat
                  |L1.27936|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.27940|
                          DCD      speedChIsOn
                  |L1.27944|
                          DCD      sp_ch_stat
                  |L1.27948|
                          DCD      speedChrgVolt
                  |L1.27952|
                          DCD      hv_vz_stat
                  |L1.27956|
                          DCD      UZ_U
                  |L1.27960|
                          DCD      FZ_U1
                  |L1.27964|
                          DCD      FZ_U2
                  |L1.27968|
                          DCD      uavt_set_stat
                  |L1.27972|
                          DCD      U_AVT
                  |L1.27976|
                          DCD      mess_data
                  |L1.27980|
                          DCD      u_necc_dn
                  |L1.27984|
                          DCD      u_necc_up
                  |L1.27988|
                          DCD      Isumm
                  |L1.27992|
                          DCD      Isumm_
                  |L1.27996|
                          DCD      bat
                  |L1.28000|
                          DCD      IMAX
                  |L1.28004|
                          DCD      IMIN
                  |L1.28008|
                          DCD      num_necc
                  |L1.28012|
                          DCD      PAR
                  |L1.28016|
                          DCD      NUMIST
                  |L1.28020|
                          DCD      IZMAX
                  |L1.28024|
                          DCD      speedChrgCurr
                  |L1.28028|
                          DCD      UZ_IMAX
                  |L1.28032|
                          DCD      FZ_IMAX1
                  |L1.28036|
                          DCD      FZ_IMAX2
                  |L1.28040|
                          DCD      REG_SPEED
                  |L1.28044|
                          DCD      bps_U
                  |L1.28048|
                          DCD      bps
                  |L1.28052|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.28056|
                          DCD      load_U
                  |L1.28060|
                          DCD      USIGN
                  |L1.28064|
                          DCD      bIBAT_SMKLBR
                  |L1.28068|
006da4  f1a0000a          SUB      r0,r0,#0xa            ;9338
006da8  f8a40048          STRH     r0,[r4,#0x48]         ;9338
006dac  e0fd              B        |L1.28586|
                  |L1.28078|
006dae  da14              BGE      |L1.28122|
006db0  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9340
006db4  458a              CMP      r10,r1                ;9340
006db6  da10              BGE      |L1.28122|
006db8  f04f0115          MOV      r1,#0x15              ;9342
006dbc  f884102e          STRB     r1,[r4,#0x2e]         ;9342
006dc0  f8b41070          LDRH     r1,[r4,#0x70]         ;9343  ; cntrl_stat_blok_cnt
006dc4  b121              CBZ      r1,|L1.28112|
006dc6  f1a00001          SUB      r0,r0,#1              ;9343
006dca  f8a40048          STRH     r0,[r4,#0x48]         ;9343
006dce  e0ec              B        |L1.28586|
                  |L1.28112|
006dd0  f1a00003          SUB      r0,r0,#3              ;9344
006dd4  f8a40048          STRH     r0,[r4,#0x48]         ;9344
006dd8  e0e7              B        |L1.28586|
                  |L1.28122|
006dda  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9346
006dde  458a              CMP      r10,r1                ;9346
006de0  dd0a              BLE      |L1.28152|
006de2  4598              CMP      r8,r3                 ;9346
006de4  dd08              BLE      |L1.28152|
006de6  f04f0116          MOV      r1,#0x16              ;9348
006dea  f884102e          STRB     r1,[r4,#0x2e]         ;9348
006dee  f1a00001          SUB      r0,r0,#1              ;9349
006df2  f8a40048          STRH     r0,[r4,#0x48]         ;9349
006df6  e0d8              B        |L1.28586|
                  |L1.28152|
006df8  f9bcc000          LDRSH    r12,[r12,#0]          ;9352  ; bps_U
006dfc  f9b22000          LDRSH    r2,[r2,#0]            ;9352  ; u_necc
006e00  f8df853c          LDR      r8,|L1.29504|
006e04  f8dfb53c          LDR      r11,|L1.29508|
006e08  4594              CMP      r12,r2                ;9352
006e0a  da72              BGE      |L1.28402|
006e0c  f04f0a17          MOV      r10,#0x17             ;9354
006e10  f884a02e          STRB     r10,[r4,#0x2e]        ;9354
006e14  f9b88000          LDRSH    r8,[r8,#0]            ;9355  ; UB0
006e18  f9bba000          LDRSH    r10,[r11,#0]          ;9355  ; UB20
006e1c  eba8080a          SUB      r8,r8,r10             ;9355
006e20  eba20a08          SUB      r10,r2,r8             ;9355
006e24  45e2              CMP      r10,r12               ;9355
006e26  dd37              BLE      |L1.28312|
006e28  f04f0218          MOV      r2,#0x18              ;9357
006e2c  f884202e          STRB     r2,[r4,#0x2e]         ;9357
006e30  2900              CMP      r1,#0                 ;9358
006e32  da10              BGE      |L1.28246|
006e34  f04f0119          MOV      r1,#0x19              ;9360
006e38  f884102e          STRB     r1,[r4,#0x2e]         ;9360
006e3c  f8b41070          LDRH     r1,[r4,#0x70]         ;9361  ; cntrl_stat_blok_cnt
006e40  b121              CBZ      r1,|L1.28236|
006e42  f1000001          ADD      r0,r0,#1              ;9361
006e46  f8a40048          STRH     r0,[r4,#0x48]         ;9361
006e4a  e0ae              B        |L1.28586|
                  |L1.28236|
006e4c  f100000a          ADD      r0,r0,#0xa            ;9362
006e50  f8a40048          STRH     r0,[r4,#0x48]         ;9362
006e54  e0a9              B        |L1.28586|
                  |L1.28246|
006e56  eb030283          ADD      r2,r3,r3,LSL #2       ;9364
006e5a  428a              CMP      r2,r1                 ;9364
006e5c  dd10              BLE      |L1.28288|
006e5e  f04f011a          MOV      r1,#0x1a              ;9366
006e62  f884102e          STRB     r1,[r4,#0x2e]         ;9366
006e66  f8b41070          LDRH     r1,[r4,#0x70]         ;9367  ; cntrl_stat_blok_cnt
006e6a  b121              CBZ      r1,|L1.28278|
006e6c  f1000001          ADD      r0,r0,#1              ;9367
006e70  f8a40048          STRH     r0,[r4,#0x48]         ;9367
006e74  e099              B        |L1.28586|
                  |L1.28278|
006e76  f1000002          ADD      r0,r0,#2              ;9368
006e7a  f8a40048          STRH     r0,[r4,#0x48]         ;9368
006e7e  e094              B        |L1.28586|
                  |L1.28288|
006e80  ebb10f42          CMP      r1,r2,LSL #1          ;9370
006e84  da07              BGE      |L1.28310|
006e86  f04f011b          MOV      r1,#0x1b              ;9372
006e8a  f884102e          STRB     r1,[r4,#0x2e]         ;9372
006e8e  f1000001          ADD      r0,r0,#1              ;9373
006e92  f8a40048          STRH     r0,[r4,#0x48]         ;9373
                  |L1.28310|
006e96  e088              B        |L1.28586|
                  |L1.28312|
006e98  ea4f7ae8          ASR      r10,r8,#31            ;9376
006e9c  eb08789a          ADD      r8,r8,r10,LSR #30     ;9376
006ea0  eba208a8          SUB      r8,r2,r8,ASR #2       ;9376
006ea4  45e0              CMP      r8,r12                ;9376
006ea6  dd25              BLE      |L1.28404|
006ea8  f04f021c          MOV      r2,#0x1c              ;9378
006eac  f884202e          STRB     r2,[r4,#0x2e]         ;9378
006eb0  eb030283          ADD      r2,r3,r3,LSL #2       ;9379
006eb4  428a              CMP      r2,r1                 ;9379
006eb6  dd10              BLE      |L1.28378|
006eb8  f04f011d          MOV      r1,#0x1d              ;9381
006ebc  f884102e          STRB     r1,[r4,#0x2e]         ;9381
006ec0  f8b41070          LDRH     r1,[r4,#0x70]         ;9382  ; cntrl_stat_blok_cnt
006ec4  b121              CBZ      r1,|L1.28368|
006ec6  f1000001          ADD      r0,r0,#1              ;9382
006eca  f8a40048          STRH     r0,[r4,#0x48]         ;9382
006ece  e06c              B        |L1.28586|
                  |L1.28368|
006ed0  f1000002          ADD      r0,r0,#2              ;9383
006ed4  f8a40048          STRH     r0,[r4,#0x48]         ;9383
006ed8  e067              B        |L1.28586|
                  |L1.28378|
006eda  ebb10f42          CMP      r1,r2,LSL #1          ;9385
006ede  da64              BGE      |L1.28586|
006ee0  f04f011e          MOV      r1,#0x1e              ;9387
006ee4  f884102e          STRB     r1,[r4,#0x2e]         ;9387
006ee8  f1000001          ADD      r0,r0,#1              ;9388
006eec  f8a40048          STRH     r0,[r4,#0x48]         ;9388
006ef0  e05b              B        |L1.28586|
                  |L1.28402|
006ef2  e014              B        |L1.28446|
                  |L1.28404|
006ef4  1e52              SUBS     r2,r2,#1              ;9391
006ef6  4594              CMP      r12,r2                ;9391
006ef8  da57              BGE      |L1.28586|
006efa  f04f021f          MOV      r2,#0x1f              ;9393
006efe  f884202e          STRB     r2,[r4,#0x2e]         ;9393
006f02  eb030283          ADD      r2,r3,r3,LSL #2       ;9394
006f06  ebb10f42          CMP      r1,r2,LSL #1          ;9394
006f0a  da4e              BGE      |L1.28586|
006f0c  f04f0120          MOV      r1,#0x20              ;9396
006f10  f884102e          STRB     r1,[r4,#0x2e]         ;9396
006f14  f1000001          ADD      r0,r0,#1              ;9397
006f18  f8a40048          STRH     r0,[r4,#0x48]         ;9397
006f1c  e045              B        |L1.28586|
                  |L1.28446|
006f1e  dd44              BLE      |L1.28586|
006f20  f04f0121          MOV      r1,#0x21              ;9403
006f24  f884102e          STRB     r1,[r4,#0x2e]         ;9403
006f28  f9b81000          LDRSH    r1,[r8,#0]            ;9404  ; UB0
006f2c  f9bb3000          LDRSH    r3,[r11,#0]           ;9404  ; UB20
006f30  eba10103          SUB      r1,r1,r3              ;9404
006f34  eb010302          ADD      r3,r1,r2              ;9404
006f38  4563              CMP      r3,r12                ;9404
006f3a  da13              BGE      |L1.28516|
006f3c  f04f0122          MOV      r1,#0x22              ;9406
006f40  f884102e          STRB     r1,[r4,#0x2e]         ;9406
006f44  f8b41070          LDRH     r1,[r4,#0x70]         ;9407  ; cntrl_stat_blok_cnt
006f48  b939              CBNZ     r1,|L1.28506|
006f4a  49ff              LDR      r1,|L1.29512|
006f4c  8809              LDRH     r1,[r1,#0]            ;9407  ; TERMOKOMPENS
006f4e  b121              CBZ      r1,|L1.28506|
006f50  f1a0000a          SUB      r0,r0,#0xa            ;9408
006f54  f8a40048          STRH     r0,[r4,#0x48]         ;9408
006f58  e027              B        |L1.28586|
                  |L1.28506|
006f5a  f1a00001          SUB      r0,r0,#1              ;9407
006f5e  f8a40048          STRH     r0,[r4,#0x48]         ;9407
006f62  e022              B        |L1.28586|
                  |L1.28516|
006f64  17cb              ASRS     r3,r1,#31             ;9410
006f66  eb017193          ADD      r1,r1,r3,LSR #30      ;9410
006f6a  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9410
006f6e  4561              CMP      r1,r12                ;9410
006f70  da10              BGE      |L1.28564|
006f72  f04f0123          MOV      r1,#0x23              ;9412
006f76  f884102e          STRB     r1,[r4,#0x2e]         ;9412
006f7a  f8b41070          LDRH     r1,[r4,#0x70]         ;9413  ; cntrl_stat_blok_cnt
006f7e  b121              CBZ      r1,|L1.28554|
006f80  f1a00001          SUB      r0,r0,#1              ;9413
006f84  f8a40048          STRH     r0,[r4,#0x48]         ;9413
006f88  e00f              B        |L1.28586|
                  |L1.28554|
006f8a  f1a00002          SUB      r0,r0,#2              ;9414
006f8e  f8a40048          STRH     r0,[r4,#0x48]         ;9414
006f92  e00a              B        |L1.28586|
                  |L1.28564|
006f94  1c52              ADDS     r2,r2,#1              ;9416
006f96  4594              CMP      r12,r2                ;9416
006f98  dd07              BLE      |L1.28586|
006f9a  f04f0124          MOV      r1,#0x24              ;9418
006f9e  f884102e          STRB     r1,[r4,#0x2e]         ;9418
006fa2  f1a00001          SUB      r0,r0,#1              ;9419
006fa6  f8a40048          STRH     r0,[r4,#0x48]         ;9419
                  |L1.28586|
006faa  48e8              LDR      r0,|L1.29516|
006fac  7961              LDRB     r1,[r4,#5]            ;9423  ; vz1_stat
006fae  7800              LDRB     r0,[r0,#0]            ;9423  ; hv_vz_stat
006fb0  4308              ORRS     r0,r0,r1              ;9423
006fb2  79e1              LDRB     r1,[r4,#7]            ;9423  ; vz2_stat
006fb4  4308              ORRS     r0,r0,r1              ;9423
006fb6  d10e              BNE      |L1.28630|
006fb8  48e5              LDR      r0,|L1.29520|
006fba  7840              LDRB     r0,[r0,#1]            ;9425  ; sk_stat
006fbc  2801              CMP      r0,#1                 ;9425
006fbe  d10a              BNE      |L1.28630|
006fc0  48e4              LDR      r0,|L1.29524|
006fc2  7840              LDRB     r0,[r0,#1]            ;9425  ; sk_stat_old
006fc4  b938              CBNZ     r0,|L1.28630|
006fc6  48e4              LDR      r0,|L1.29528|
006fc8  8800              LDRH     r0,[r0,#0]            ;9425  ; VZ_KIND
006fca  2801              CMP      r0,#1                 ;9425
006fcc  d103              BNE      |L1.28630|
006fce  f04f0032          MOV      r0,#0x32              ;9425
006fd2  f8a40048          STRH     r0,[r4,#0x48]         ;9425
                  |L1.28630|
006fd6  f24032f2          MOV      r2,#0x3f2             ;9428
006fda  210a              MOVS     r1,#0xa               ;9428
006fdc  48df              LDR      r0,|L1.29532|
006fde  f7fffffe          BL       gran
006fe2  48df              LDR      r0,|L1.29536|
006fe4  8800              LDRH     r0,[r0,#0]            ;9429  ; net_av_2min_timer
006fe6  b110              CBZ      r0,|L1.28654|
006fe8  8ea0              LDRH     r0,[r4,#0x34]         ;9429  ; cntrl_stat_old
006fea  f8a40048          STRH     r0,[r4,#0x48]         ;9429
                  |L1.28654|
006fee  f8b40048          LDRH     r0,[r4,#0x48]         ;9430  ; cntrl_stat_new
006ff2  86a0              STRH     r0,[r4,#0x34]         ;9430
006ff4  8660              STRH     r0,[r4,#0x32]         ;9431
006ff6  48db              LDR      r0,|L1.29540|
006ff8  f9b00000          LDRSH    r0,[r0,#0]            ;9433  ; ICA_EN
006ffc  b938              CBNZ     r0,|L1.28686|
006ffe  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
007000  b129              CBZ      r1,|L1.28686|
;;;9436   			{
;;;9437   			cntrl_stat = ica_cntrl_hndl;
007002  49d9              LDR      r1,|L1.29544|
007004  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
007006  8661              STRH     r1,[r4,#0x32]
;;;9438   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
007008  f8a41048          STRH     r1,[r4,#0x48]
;;;9439   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
00700c  86a1              STRH     r1,[r4,#0x34]
                  |L1.28686|
;;;9440   			}
;;;9441   		}
;;;9442   	
;;;9443   	if((ICA_EN==1)||(ICA_EN==2))
00700e  2801              CMP      r0,#1
007010  d001              BEQ      |L1.28694|
007012  2802              CMP      r0,#2
007014  d105              BNE      |L1.28706|
                  |L1.28694|
;;;9444   		{
;;;9445   		cntrl_stat=cntrl_stat_new+ica_u_necc;
007016  49d5              LDR      r1,|L1.29548|
007018  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
00701c  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
00701e  4408              ADD      r0,r0,r1
007020  8660              STRH     r0,[r4,#0x32]
                  |L1.28706|
;;;9446   		}			
;;;9447   	}
;;;9448   #else
;;;9449   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9450   	{
;;;9451   	cntrl_hndl_plazma=37;
;;;9452   	cntrl_stat_new=cntrl_stat_old;
;;;9453   	
;;;9454   	if((Ibmax/10)>(2*IZMAX_))
;;;9455   		{
;;;9456   		cntrl_hndl_plazma=38;
;;;9457             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9458   		else	cntrl_stat_new-=10;
;;;9459   		}		
;;;9460   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9461   		{
;;;9462   		cntrl_hndl_plazma=39;
;;;9463             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9464             else	cntrl_stat_new-=3;
;;;9465   		}   
;;;9466   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9467   		{
;;;9468   		cntrl_hndl_plazma=40;
;;;9469   		cntrl_stat_new--;
;;;9470   		}
;;;9471   		
;;;9472   	else if(load_U<u_necc)
;;;9473   		{
;;;9474   		cntrl_hndl_plazma=41;
;;;9475   		if(load_U<(u_necc-(UB0-UB20)))
;;;9476   			{
;;;9477   			cntrl_hndl_plazma=42;
;;;9478   			if(Ibmax<0)
;;;9479   				{
;;;9480   				cntrl_hndl_plazma=43;
;;;9481                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9482   				else cntrl_stat_new+=10;
;;;9483   				}
;;;9484   			else if(Ibmax<(IZMAX_*5))
;;;9485   				{
;;;9486   				cntrl_hndl_plazma=44;
;;;9487                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9488   				else	cntrl_stat_new+=2;
;;;9489   				}
;;;9490   			else if(Ibmax<((IZMAX_*95)/10))
;;;9491   				{
;;;9492   				cntrl_hndl_plazma=45;
;;;9493   				cntrl_stat_new++;
;;;9494   				}					
;;;9495   			}
;;;9496   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9497   			{
;;;9498   			cntrl_hndl_plazma=46;
;;;9499   			if(Ibmax<(IZMAX_*5))
;;;9500   				{
;;;9501   				cntrl_hndl_plazma=47;
;;;9502                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9503   				else	cntrl_stat_new+=2;
;;;9504   				}
;;;9505   			else if(Ibmax<((IZMAX_*95)/10))
;;;9506   				{
;;;9507   				cntrl_hndl_plazma=48;
;;;9508   				cntrl_stat_new++;
;;;9509   				}					
;;;9510   			}	
;;;9511   		else if(load_U<(u_necc-1))
;;;9512   			{
;;;9513   			cntrl_hndl_plazma=49;
;;;9514   			if(Ibmax<((IZMAX_*95)/10))
;;;9515   				{
;;;9516   				cntrl_hndl_plazma=50;
;;;9517   				cntrl_stat_new++;
;;;9518   				}					
;;;9519   			}					
;;;9520   		}	
;;;9521   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9522   		{
;;;9523   		cntrl_hndl_plazma=51;
;;;9524   		if(load_U>(u_necc+(UB0-UB20)))
;;;9525   			{
;;;9526   			cntrl_hndl_plazma=52;
;;;9527                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9528   			else	cntrl_stat_new-=10;
;;;9529   			}
;;;9530   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9531   			{
;;;9532   			cntrl_hndl_plazma=53;
;;;9533                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9534   			else cntrl_stat_new-=2;
;;;9535   			}	
;;;9536   		else if(load_U>(u_necc+1))
;;;9537   			{
;;;9538   			cntrl_hndl_plazma=54;
;;;9539   			cntrl_stat_new--;
;;;9540   			}					
;;;9541   		}
;;;9542   
;;;9543   	gran(&cntrl_stat_new,10,1022);
;;;9544   				
;;;9545   	cntrl_stat_old=cntrl_stat_new;
;;;9546   	cntrl_stat=cntrl_stat_new;	
;;;9547   	}
;;;9548   #endif
;;;9549   
;;;9550   iiii=0;
007022  7625              STRB     r5,[r4,#0x18]
;;;9551   for(i=0;i<NUMIST;i++)
007024  75e5              STRB     r5,[r4,#0x17]
007026  48d2              LDR      r0,|L1.29552|
007028  f9b01000          LDRSH    r1,[r0,#0]
00702c  e00c              B        |L1.28744|
                  |L1.28718|
;;;9552        {
;;;9553        if(bps[i]._cnt<30)iiii=1;
00702e  eb0002c0          ADD      r2,r0,r0,LSL #3
007032  eb021200          ADD      r2,r2,r0,LSL #4
007036  eb090282          ADD      r2,r9,r2,LSL #2
00703a  78d2              LDRB     r2,[r2,#3]
00703c  2a1e              CMP      r2,#0x1e
00703e  d200              BCS      |L1.28738|
007040  7626              STRB     r6,[r4,#0x18]
                  |L1.28738|
007042  f1000001          ADD      r0,r0,#1              ;9551
007046  75e0              STRB     r0,[r4,#0x17]         ;9551
                  |L1.28744|
007048  7de0              LDRB     r0,[r4,#0x17]         ;9551  ; i
00704a  4288              CMP      r0,r1                 ;9551
00704c  dbef              BLT      |L1.28718|
;;;9554        }
;;;9555   
;;;9556   if(iiii==0)
00704e  7e20              LDRB     r0,[r4,#0x18]  ; iiii
007050  b948              CBNZ     r0,|L1.28774|
;;;9557   	{
;;;9558   	cntrl_stat=600;	
;;;9559   	cntrl_stat_old=600;
;;;9560   	cntrl_stat_new=600;
;;;9561   	cntrl_stat=10*PWM_START;
007052  48c8              LDR      r0,|L1.29556|
007054  8800              LDRH     r0,[r0,#0]  ; PWM_START
007056  eb000080          ADD      r0,r0,r0,LSL #2
00705a  ea4f0040          LSL      r0,r0,#1
00705e  8660              STRH     r0,[r4,#0x32]
;;;9562   	cntrl_stat_old=10*PWM_START;
007060  86a0              STRH     r0,[r4,#0x34]
;;;9563   	cntrl_stat_new=10*PWM_START;
007062  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.28774|
;;;9564   	}
;;;9565   
;;;9566   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9567   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
007066  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
00706a  b110              CBZ      r0,|L1.28786|
00706c  f1a00001          SUB      r0,r0,#1
007070  8038              STRH     r0,[r7,#0]
                  |L1.28786|
;;;9568   
;;;9569   
;;;9570   
;;;9571   #endif
;;;9572   
;;;9573   
;;;9574   gran(&cntrl_stat,10,1022); 
007072  48ba              LDR      r0,|L1.29532|
007074  f24032fe          MOV      r2,#0x3fe
007078  210a              MOVS     r1,#0xa
00707a  3816              SUBS     r0,r0,#0x16
00707c  f7fffffe          BL       gran
;;;9575   b1Hz_ch=0;
007080  75a5              STRB     r5,[r4,#0x16]
                  |L1.28802|
;;;9576   }
007082  e8bd9ff0          POP      {r4-r12,pc}
;;;9577   #endif
                          ENDP

                  ext_drv PROC
;;;10066  //-----------------------------------------------
;;;10067  void ext_drv(void)
007086  e92d5ff0          PUSH     {r4-r12,lr}
;;;10068  {
;;;10069  char i;
;;;10070  
;;;10071  
;;;10072  for(i=0;i<NUMSK;i++)
00708a  f04f0000          MOV      r0,#0
00708e  4abb              LDR      r2,|L1.29564|
;;;10073  	{
;;;10074  	#ifdef UKU_MGTS
;;;10075  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10076  	#endif
;;;10077  	#ifdef UKU_RSTKM
;;;10078  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10079  	#endif
;;;10080  	#ifdef UKU_3U
;;;10081  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10082  	#endif
;;;10083  	#ifdef UKU_GLONASS
;;;10084  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10085  	#endif
;;;10086  	#ifdef UKU_KONTUR
;;;10087  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10088  	#endif
;;;10089  	#ifdef UKU_6U
;;;10090  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10091  	#endif
;;;10092  	#ifdef UKU_220
;;;10093  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10094  	#endif
;;;10095  	#ifdef UKU_220_V2
;;;10096  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10097  	#endif
;;;10098  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10099  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10100  	#endif
;;;10101  	#ifdef UKU_TELECORE2015	
;;;10102  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10103  	#endif
;;;10104  	#ifdef UKU_TELECORE2017
;;;10105  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10106  	#endif
;;;10107  	#ifdef IPS_SGEP_GAZPROM
;;;10108  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10109  	#endif		
;;;10110  		{
;;;10111  		if(sk_cnt[i]<10)
007090  4bb9              LDR      r3,|L1.29560|
;;;10112  			{
;;;10113  			sk_cnt[i]++;
;;;10114  			if(sk_cnt[i]>=10)
;;;10115  				{
;;;10116  				sk_stat[i]=ssON;
007092  4daf              LDR      r5,|L1.29520|
007094  f04f0a01          MOV      r10,#1
;;;10117  				}
;;;10118  			}
;;;10119  		else 
;;;10120  			{
;;;10121  			sk_cnt[i]=10;
007098  f04f0b0a          MOV      r11,#0xa
00709c  4606              MOV      r6,r0                 ;10072
00709e  f9b24000          LDRSH    r4,[r2,#0]            ;10072
0070a2  e025              B        |L1.28912|
                  |L1.28836|
0070a4  49b6              LDR      r1,|L1.29568|
0070a6  4fb7              LDR      r7,|L1.29572|
0070a8  5c09              LDRB     r1,[r1,r0]            ;10099
0070aa  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10099
0070ae  f5b16ffa          CMP      r1,#0x7d0             ;10099
0070b2  da0e              BGE      |L1.28882|
0070b4  5619              LDRSB    r1,[r3,r0]            ;10111
0070b6  290a              CMP      r1,#0xa               ;10111
0070b8  da08              BGE      |L1.28876|
0070ba  f1010101          ADD      r1,r1,#1              ;10113
0070be  b249              SXTB     r1,r1                 ;10113
0070c0  5419              STRB     r1,[r3,r0]            ;10113
0070c2  290a              CMP      r1,#0xa               ;10114
0070c4  db11              BLT      |L1.28906|
0070c6  f805a000          STRB     r10,[r5,r0]           ;10116
0070ca  e00e              B        |L1.28906|
                  |L1.28876|
0070cc  f803b000          STRB     r11,[r3,r0]
0070d0  e00b              B        |L1.28906|
                  |L1.28882|
;;;10122  			}
;;;10123                 
;;;10124  		}
;;;10125  	else
;;;10126  		{
;;;10127  		if(sk_cnt[i]>0)
0070d2  5619              LDRSB    r1,[r3,r0]
0070d4  2900              CMP      r1,#0
0070d6  dd07              BLE      |L1.28904|
;;;10128  			{
;;;10129  			sk_cnt[i]--;
0070d8  f1a10101          SUB      r1,r1,#1
0070dc  b249              SXTB     r1,r1
0070de  5419              STRB     r1,[r3,r0]
;;;10130  			if(sk_cnt[i]<=0)
0070e0  2900              CMP      r1,#0
0070e2  dc02              BGT      |L1.28906|
;;;10131  				{
;;;10132  				sk_stat[i]=ssOFF;
0070e4  542e              STRB     r6,[r5,r0]
0070e6  e000              B        |L1.28906|
                  |L1.28904|
;;;10133  				}
;;;10134  			}
;;;10135  		else 
;;;10136  			{
;;;10137  			sk_cnt[i]=0;
0070e8  541e              STRB     r6,[r3,r0]
                  |L1.28906|
0070ea  f1000001          ADD      r0,r0,#1              ;10072
0070ee  b2c0              UXTB     r0,r0                 ;10072
                  |L1.28912|
0070f0  42a0              CMP      r0,r4                 ;10072
0070f2  dbd7              BLT      |L1.28836|
;;;10138  			}
;;;10139  		}
;;;10140  	}
;;;10141  
;;;10142  for(i=0;i<NUMSK;i++)
0070f4  f04f0400          MOV      r4,#0
;;;10143  	{
;;;10144  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10145  		{
;;;10146  		if(sk_av_cnt[i]<10)
0070f8  f8df928c          LDR      r9,|L1.29576|
;;;10147  			{
;;;10148  			sk_av_cnt[i]++;
;;;10149  			if(sk_av_cnt[i]>=10)
;;;10150  				{
;;;10151  				sk_av_stat[i]=sasON;
0070fc  4fa3              LDR      r7,|L1.29580|
;;;10152  				}
;;;10153  			}
;;;10154  		else 
;;;10155  			{
;;;10156  			sk_av_cnt[i]=10;
;;;10157  			}
;;;10158  		}
;;;10159  	else
;;;10160  		{
;;;10161  		if(sk_av_cnt[i]>=0)
;;;10162  			{
;;;10163  			sk_av_cnt[i]--;
;;;10164  			if(sk_av_cnt[i]<=0)
;;;10165  				{
;;;10166  				sk_av_stat[i]=sasOFF;
;;;10167  				}
;;;10168  			}
;;;10169  		else 
;;;10170  			{
;;;10171  			sk_av_cnt[i]=0;
;;;10172  			}
;;;10173  		}
;;;10174  
;;;10175  #ifndef UKU_KONTUR
;;;10176  	if(sk_av_stat_old[i]!=sk_av_stat[i])
0070fe  f8df8290          LDR      r8,|L1.29584|
007102  e083              B        |L1.29196|
                  |L1.28932|
007104  48a3              LDR      r0,|L1.29588|
007106  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10144
00710a  b910              CBNZ     r0,|L1.28946|
00710c  5d29              LDRB     r1,[r5,r4]            ;10144
00710e  2901              CMP      r1,#1                 ;10144
007110  d00f              BEQ      |L1.28978|
                  |L1.28946|
007112  b108              CBZ      r0,|L1.28952|
007114  5d28              LDRB     r0,[r5,r4]            ;10144
007116  b160              CBZ      r0,|L1.28978|
                  |L1.28952|
007118  f9190004          LDRSB    r0,[r9,r4]            ;10161
00711c  2800              CMP      r0,#0                 ;10161
00711e  db19              BLT      |L1.29012|
007120  f1a00001          SUB      r0,r0,#1              ;10163
007124  b240              SXTB     r0,r0                 ;10163
007126  f8090004          STRB     r0,[r9,r4]            ;10163
00712a  2800              CMP      r0,#0                 ;10164
00712c  dc14              BGT      |L1.29016|
00712e  553e              STRB     r6,[r7,r4]            ;10166
007130  e012              B        |L1.29016|
                  |L1.28978|
007132  f9190004          LDRSB    r0,[r9,r4]            ;10146
007136  280a              CMP      r0,#0xa               ;10146
007138  da09              BGE      |L1.29006|
00713a  f1000001          ADD      r0,r0,#1              ;10148
00713e  b240              SXTB     r0,r0                 ;10148
007140  f8090004          STRB     r0,[r9,r4]            ;10148
007144  280a              CMP      r0,#0xa               ;10149
007146  db07              BLT      |L1.29016|
007148  f807a004          STRB     r10,[r7,r4]           ;10151
00714c  e004              B        |L1.29016|
                  |L1.29006|
00714e  f809b004          STRB     r11,[r9,r4]           ;10156
007152  e001              B        |L1.29016|
                  |L1.29012|
007154  f8096004          STRB     r6,[r9,r4]            ;10171
                  |L1.29016|
007158  f8181004          LDRB     r1,[r8,r4]
00715c  5d38              LDRB     r0,[r7,r4]
00715e  4281              CMP      r1,r0
007160  d04e              BEQ      |L1.29184|
;;;10177  		{
;;;10178  		plazma_sk++;
007162  4a7e              LDR      r2,|L1.29532|
007164  1e92              SUBS     r2,r2,#2
007166  8811              LDRH     r1,[r2,#0]  ; plazma_sk
007168  f1010101          ADD      r1,r1,#1
00716c  8011              STRH     r1,[r2,#0]
;;;10179  		if(sk_av_stat[i]==sasON)
00716e  2801              CMP      r0,#1
007170  d007              BEQ      |L1.29058|
;;;10180  			{
;;;10181  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10182  			else if(i==1)
;;;10183  				{
;;;10184  				#ifndef UKU_TELEKORE2017
;;;10185  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10186  				#endif
;;;10187  				#ifdef UKU_TELEKORE2017
;;;10188  				snmp_trap_send("Door open",15,2,1);
;;;10189  				#endif
;;;10190  				}
;;;10191  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10192  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10193  			}
;;;10194  		else 
;;;10195  			{
;;;10196  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
007172  b354              CBZ      r4,|L1.29130|
;;;10197  			else if(i==1)
007174  2c01              CMP      r4,#1
007176  d02f              BEQ      |L1.29144|
;;;10198  				{
;;;10199  				#ifndef UKU_TELEKORE2017
;;;10200  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10201  				#endif
;;;10202  				#ifdef UKU_TELEKORE2017
;;;10203  				snmp_trap_send("Door open clear",15,2,0);
;;;10204  				#endif
;;;10205  				}
;;;10206  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
007178  2c02              CMP      r4,#2
00717a  d034              BEQ      |L1.29158|
;;;10207  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
00717c  2c03              CMP      r4,#3
00717e  d039              BEQ      |L1.29172|
007180  e03e              B        |L1.29184|
                  |L1.29058|
007182  b134              CBZ      r4,|L1.29074|
007184  2c01              CMP      r4,#1                 ;10182
007186  d00b              BEQ      |L1.29088|
007188  2c02              CMP      r4,#2                 ;10191
00718a  d010              BEQ      |L1.29102|
00718c  2c03              CMP      r4,#3                 ;10192
00718e  d015              BEQ      |L1.29116|
007190  e036              B        |L1.29184|
                  |L1.29074|
007192  2301              MOVS     r3,#1                 ;10181
007194  461a              MOV      r2,r3                 ;10181
007196  210f              MOVS     r1,#0xf               ;10181
007198  a07f              ADR      r0,|L1.29592|
00719a  f7fffffe          BL       snmp_trap_send
00719e  e02f              B        |L1.29184|
                  |L1.29088|
0071a0  2301              MOVS     r3,#1                 ;10185
0071a2  2202              MOVS     r2,#2                 ;10185
0071a4  210f              MOVS     r1,#0xf               ;10185
0071a6  a07f              ADR      r0,|L1.29604|
0071a8  f7fffffe          BL       snmp_trap_send
0071ac  e028              B        |L1.29184|
                  |L1.29102|
0071ae  2301              MOVS     r3,#1                 ;10191
0071b0  2203              MOVS     r2,#3                 ;10191
0071b2  210f              MOVS     r1,#0xf               ;10191
0071b4  a07e              ADR      r0,|L1.29616|
0071b6  f7fffffe          BL       snmp_trap_send
0071ba  e021              B        |L1.29184|
                  |L1.29116|
0071bc  2301              MOVS     r3,#1                 ;10192
0071be  2204              MOVS     r2,#4                 ;10192
0071c0  210f              MOVS     r1,#0xf               ;10192
0071c2  a07e              ADR      r0,|L1.29628|
0071c4  f7fffffe          BL       snmp_trap_send
0071c8  e01a              B        |L1.29184|
                  |L1.29130|
0071ca  2300              MOVS     r3,#0                 ;10196
0071cc  2201              MOVS     r2,#1                 ;10196
0071ce  210f              MOVS     r1,#0xf               ;10196
0071d0  a07d              ADR      r0,|L1.29640|
0071d2  f7fffffe          BL       snmp_trap_send
0071d6  e013              B        |L1.29184|
                  |L1.29144|
0071d8  2300              MOVS     r3,#0                 ;10200
0071da  2202              MOVS     r2,#2                 ;10200
0071dc  210f              MOVS     r1,#0xf               ;10200
0071de  a07f              ADR      r0,|L1.29660|
0071e0  f7fffffe          BL       snmp_trap_send
0071e4  e00c              B        |L1.29184|
                  |L1.29158|
0071e6  2300              MOVS     r3,#0                 ;10206
0071e8  2203              MOVS     r2,#3                 ;10206
0071ea  210f              MOVS     r1,#0xf               ;10206
0071ec  a080              ADR      r0,|L1.29680|
0071ee  f7fffffe          BL       snmp_trap_send
0071f2  e005              B        |L1.29184|
                  |L1.29172|
0071f4  2300              MOVS     r3,#0
0071f6  2204              MOVS     r2,#4
0071f8  210f              MOVS     r1,#0xf
0071fa  a082              ADR      r0,|L1.29700|
0071fc  f7fffffe          BL       snmp_trap_send
                  |L1.29184|
;;;10208  			}
;;;10209  	 	}
;;;10210  #endif
;;;10211  
;;;10212  #ifdef UKU_KONTUR
;;;10213  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10214  		{
;;;10215  		plazma_sk++;
;;;10216  		if(sk_av_stat[i]==sasON)
;;;10217  			{
;;;10218  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10219  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10220  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10221  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10222  			}
;;;10223  		else 
;;;10224  			{
;;;10225  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10226  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10227  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10228  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10229  			}
;;;10230  	 	}
;;;10231  #endif
;;;10232  	sk_av_stat_old[i]=sk_av_stat[i];
007200  5d38              LDRB     r0,[r7,r4]
007202  f8080004          STRB     r0,[r8,r4]
007206  f1040401          ADD      r4,r4,#1              ;10142
00720a  b2e4              UXTB     r4,r4                 ;10142
                  |L1.29196|
00720c  485b              LDR      r0,|L1.29564|
00720e  f9b00000          LDRSH    r0,[r0,#0]            ;10142  ; NUMSK
007212  4284              CMP      r4,r0                 ;10142
007214  f6ffaf76          BLT      |L1.28932|
;;;10233  	}
;;;10234  }
007218  e733              B        |L1.28802|
;;;10235  
                          ENDP

                  zar_superviser_start PROC
;;;10272  //-----------------------------------------------
;;;10273  void zar_superviser_start(void)
00721a  4a7f              LDR      r2,|L1.29720|
;;;10274  {
;;;10275  sign_U[0]=1;
00721c  f04f0001          MOV      r0,#1
007220  7010              STRB     r0,[r2,#0]
;;;10276  sign_I[0]=1;
007222  497e              LDR      r1,|L1.29724|
007224  7008              STRB     r0,[r1,#0]
;;;10277  sign_U[1]=1;
007226  7050              STRB     r0,[r2,#1]
;;;10278  sign_I[1]=1;
007228  7048              STRB     r0,[r1,#1]
;;;10279  
;;;10280  }
00722a  4770              BX       lr
;;;10281  
                          ENDP

                  zar_superviser_drv PROC
;;;10237  //-----------------------------------------------
;;;10238  void zar_superviser_drv(void)
00722c  e92d5ff0          PUSH     {r4-r12,lr}
;;;10239  {
;;;10240  
;;;10241  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
007230  487c              LDR      r0,|L1.29732|
007232  f8df91f4          LDR      r9,|L1.29736|
007236  f8df81e8          LDR      r8,|L1.29728|
00723a  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
00723e  f9b90000          LDRSH    r0,[r9,#0]
007242  4c46              LDR      r4,|L1.29532|
007244  ebc01100          RSB      r1,r0,r0,LSL #4
007248  3c48              SUBS     r4,r4,#0x48
00724a  f9b87002          LDRSH    r7,[r8,#2]  ; bat
00724e  f06f0a1d          MVN      r10,#0x1d
007252  f06f0b95          MVN      r11,#0x95
007256  2500              MOVS     r5,#0
007258  4e6f              LDR      r6,|L1.29720|
00725a  f9b40052          LDRSH    r0,[r4,#0x52]
00725e  eb0a0281          ADD      r2,r10,r1,LSL #2
007262  eb0b0381          ADD      r3,r11,r1,LSL #2
007266  4567              CMP      r7,r12
007268  dc05              BGT      |L1.29302|
00726a  f8dfc1c0          LDR      r12,|L1.29740|
00726e  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
007272  4567              CMP      r7,r12
007274  da04              BGE      |L1.29312|
                  |L1.29302|
007276  4282              CMP      r2,r0
007278  dd02              BLE      |L1.29312|
00727a  4283              CMP      r3,r0
00727c  da00              BGE      |L1.29312|
00727e  7035              STRB     r5,[r6,#0]
                  |L1.29312|
;;;10242  
;;;10243  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
007280  4f6b              LDR      r7,|L1.29744|
007282  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
007286  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
00728a  4f64              LDR      r7,|L1.29724|
00728c  ebbc0f4e          CMP      r12,lr,LSL #1
007290  dc04              BGT      |L1.29340|
007292  f1ce0e00          RSB      lr,lr,#0
007296  ebbc0f4e          CMP      r12,lr,LSL #1
00729a  da04              BGE      |L1.29350|
                  |L1.29340|
00729c  4282              CMP      r2,r0
00729e  dd02              BLE      |L1.29350|
0072a0  4283              CMP      r3,r0
0072a2  da00              BGE      |L1.29350|
0072a4  703d              STRB     r5,[r7,#0]
                  |L1.29350|
;;;10244  																 
;;;10245  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0072a6  f06f0209          MVN      r2,#9
0072aa  eb020181          ADD      r1,r2,r1,LSL #2
0072ae  4281              CMP      r1,r0
0072b0  d121              BNE      |L1.29430|
0072b2  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0072b6  b9f0              CBNZ     r0,|L1.29430|
;;;10246  	{
;;;10247  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
0072b8  7830              LDRB     r0,[r6,#0]  ; sign_U
0072ba  2801              CMP      r0,#1
0072bc  d11b              BNE      |L1.29430|
0072be  7838              LDRB     r0,[r7,#0]  ; sign_I
0072c0  2801              CMP      r0,#1
0072c2  d118              BNE      |L1.29430|
0072c4  f44f70ef          MOV      r0,#0x1de
0072c8  f7fffffe          BL       lc640_read_int
0072cc  4959              LDR      r1,|L1.29748|
0072ce  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0072d2  4288              CMP      r0,r1
0072d4  d00f              BEQ      |L1.29430|
0072d6  4858              LDR      r0,|L1.29752|
0072d8  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0072da  b160              CBZ      r0,|L1.29430|
0072dc  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
0072e0  07c0              LSLS     r0,r0,#31
0072e2  d108              BNE      |L1.29430|
;;;10248  		{
;;;10249  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
0072e4  f44f70ef          MOV      r0,#0x1de
0072e8  f7fffffe          BL       lc640_write_int
;;;10250  		superviser_cnt++;
0072ec  4853              LDR      r0,|L1.29756|
0072ee  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0072f0  f1010101          ADD      r1,r1,#1
0072f4  7001              STRB     r1,[r0,#0]
                  |L1.29430|
;;;10251  		}
;;;10252  	
;;;10253  	}
;;;10254  
;;;10255  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
0072f6  484b              LDR      r0,|L1.29732|
0072f8  f9b81002          LDRSH    r1,[r8,#2]  ; bat
0072fc  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
007300  4281              CMP      r1,r0
007302  dc06              BGT      |L1.29458|
007304  4849              LDR      r0,|L1.29740|
007306  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00730a  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
00730e  4281              CMP      r1,r0
007310  da0e              BGE      |L1.29488|
                  |L1.29458|
007312  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
007316  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00731a  ebc01000          RSB      r0,r0,r0,LSL #4
00731e  eb0a0280          ADD      r2,r10,r0,LSL #2
007322  428a              CMP      r2,r1
007324  dd04              BLE      |L1.29488|
007326  eb0b0080          ADD      r0,r11,r0,LSL #2
00732a  4288              CMP      r0,r1
00732c  da00              BGE      |L1.29488|
00732e  7075              STRB     r5,[r6,#1]
                  |L1.29488|
;;;10256  
;;;10257  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
007330  493f              LDR      r1,|L1.29744|
007332  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
007336  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00733a  ebb00f41          CMP      r0,r1,LSL #1
00733e  e07f              B        |L1.29760|
                  |L1.29504|
                          DCD      UB0
                  |L1.29508|
                          DCD      UB20
                  |L1.29512|
                          DCD      TERMOKOMPENS
                  |L1.29516|
                          DCD      hv_vz_stat
                  |L1.29520|
                          DCD      sk_stat
                  |L1.29524|
                          DCD      sk_stat_old
                  |L1.29528|
                          DCD      VZ_KIND
                  |L1.29532|
                          DCD      ||area_number.18||+0x48
                  |L1.29536|
                          DCD      net_av_2min_timer
                  |L1.29540|
                          DCD      ICA_EN
                  |L1.29544|
                          DCD      ica_cntrl_hndl
                  |L1.29548|
                          DCD      ica_u_necc
                  |L1.29552|
                          DCD      NUMIST
                  |L1.29556|
                          DCD      PWM_START
                  |L1.29560|
                          DCD      sk_cnt
                  |L1.29564|
                          DCD      NUMSK
                  |L1.29568|
                          DCD      ||area_number.12||
                  |L1.29572|
                          DCD      ||.bss||+0x40c
                  |L1.29576|
                          DCD      sk_av_cnt
                  |L1.29580|
                          DCD      sk_av_stat
                  |L1.29584|
                          DCD      sk_av_stat_old
                  |L1.29588|
                          DCD      SK_SIGN
                  |L1.29592|
007398  534b2023          DCB      "SK #1 Alarm",0
00739c  3120416c
0073a0  61726d00
                  |L1.29604|
0073a4  534b2023          DCB      "SK #2 Alarm",0
0073a8  3220416c
0073ac  61726d00
                  |L1.29616|
0073b0  534b2023          DCB      "SK #3 Alarm",0
0073b4  3320416c
0073b8  61726d00
                  |L1.29628|
0073bc  534b2023          DCB      "SK #4 Alarm",0
0073c0  3420416c
0073c4  61726d00
                  |L1.29640|
0073c8  534b2023          DCB      "SK #1 Alarm is off",0
0073cc  3120416c
0073d0  61726d20
0073d4  6973206f
0073d8  666600  
0073db  00                DCB      0
                  |L1.29660|
0073dc  534b2023          DCB      "SK #2 Alarm is off",0
0073e0  3220416c
0073e4  61726d20
0073e8  6973206f
0073ec  666600  
0073ef  00                DCB      0
                  |L1.29680|
0073f0  534b2023          DCB      "SK #3 Alarm is off",0
0073f4  3320416c
0073f8  61726d20
0073fc  6973206f
007400  666600  
007403  00                DCB      0
                  |L1.29700|
007404  534b2023          DCB      "SK #4 Alarm is off",0
007408  3420416c
00740c  61726d20
007410  6973206f
007414  666600  
007417  00                DCB      0
                  |L1.29720|
                          DCD      sign_U
                  |L1.29724|
                          DCD      sign_I
                  |L1.29728|
                          DCD      bat
                  |L1.29732|
                          DCD      u_necc_up
                  |L1.29736|
                          DCD      TBAT
                  |L1.29740|
                          DCD      u_necc_dn
                  |L1.29744|
                          DCD      IKB
                  |L1.29748|
                          DCD      BAT_C_REAL
                  |L1.29752|
                          DCD      NUMBAT
                  |L1.29756|
                          DCD      superviser_cnt
                  |L1.29760|
007440  dc03              BGT      |L1.29770|
007442  4249              RSBS     r1,r1,#0
007444  ebb00f41          CMP      r0,r1,LSL #1
007448  da0e              BGE      |L1.29800|
                  |L1.29770|
00744a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00744e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
007452  ebc01000          RSB      r0,r0,r0,LSL #4
007456  eb0a0280          ADD      r2,r10,r0,LSL #2
00745a  428a              CMP      r2,r1
00745c  dd04              BLE      |L1.29800|
00745e  eb0b0080          ADD      r0,r11,r0,LSL #2
007462  4288              CMP      r0,r1
007464  da00              BGE      |L1.29800|
007466  707d              STRB     r5,[r7,#1]
                  |L1.29800|
;;;10258  																 
;;;10259  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
007468  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00746c  ebc01100          RSB      r1,r0,r0,LSL #4
007470  f06f0009          MVN      r0,#9
007474  eb000081          ADD      r0,r0,r1,LSL #2
007478  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00747c  4288              CMP      r0,r1
00747e  d122              BNE      |L1.29894|
007480  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
007484  b9f8              CBNZ     r0,|L1.29894|
;;;10260  	{
;;;10261  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
007486  7870              LDRB     r0,[r6,#1]  ; sign_U
007488  2801              CMP      r0,#1
00748a  d11c              BNE      |L1.29894|
00748c  7878              LDRB     r0,[r7,#1]  ; sign_I
00748e  2801              CMP      r0,#1
007490  d119              BNE      |L1.29894|
007492  f44f75fe          MOV      r5,#0x1fc
007496  4628              MOV      r0,r5
007498  f7fffffe          BL       lc640_read_int
00749c  49ff              LDR      r1,|L1.30876|
00749e  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0074a2  4288              CMP      r0,r1
0074a4  d00f              BEQ      |L1.29894|
0074a6  48fe              LDR      r0,|L1.30880|
0074a8  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0074aa  2802              CMP      r0,#2
0074ac  d10b              BNE      |L1.29894|
0074ae  f8980089          LDRB     r0,[r8,#0x89]  ; bat
0074b2  07c0              LSLS     r0,r0,#31
0074b4  d107              BNE      |L1.29894|
;;;10262  		{
;;;10263  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
0074b6  4628              MOV      r0,r5
0074b8  f7fffffe          BL       lc640_write_int
;;;10264  		superviser_cnt++;
0074bc  48f9              LDR      r0,|L1.30884|
0074be  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0074c0  f1010101          ADD      r1,r1,#1
0074c4  7001              STRB     r1,[r0,#0]
                  |L1.29894|
;;;10265  		}
;;;10266  	
;;;10267  	}
;;;10268  
;;;10269  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
0074c6  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0074ca  f06f0101          MVN      r1,#1
0074ce  ebc01000          RSB      r0,r0,r0,LSL #4
0074d2  eb010080          ADD      r0,r1,r0,LSL #2
0074d6  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0074da  4288              CMP      r0,r1
0074dc  d102              BNE      |L1.29924|
0074de  e8bd5ff0          POP      {r4-r12,lr}
0074e2  e7fe              B        zar_superviser_start
                  |L1.29924|
;;;10270  }
0074e4  e5cd              B        |L1.28802|
;;;10271  
                          ENDP

                  npn_hndl PROC
;;;10282  //-----------------------------------------------
;;;10283  void npn_hndl(void)
0074e6  e92d03f0          PUSH     {r4-r9}
;;;10284  {
;;;10285  if(NPN_OUT!=npnoOFF)
0074ea  48ef              LDR      r0,|L1.30888|
;;;10286  	{
;;;10287  /*	if(NPN_SIGN==npnsAVNET)
;;;10288  		{
;;;10289  		if(net_av==1)
;;;10290  			{
;;;10291  			if(npn_tz_cnt<TZNPN)
;;;10292  				{
;;;10293  				npn_tz_cnt++;
;;;10294  				if(npn_tz_cnt==TZNPN)
;;;10295  					{
;;;10296  					npn_stat=npnsOFF;
;;;10297  					}
;;;10298  				}
;;;10299  			}
;;;10300  		else
;;;10301  			{
;;;10302  			if(npn_tz_cnt)
;;;10303  				{
;;;10304  				npn_tz_cnt--;
;;;10305  				if(npn_tz_cnt==0)
;;;10306  					{
;;;10307  					npn_stat=npnsON;
;;;10308  					}
;;;10309  				}
;;;10310  			}
;;;10311  		}*/
;;;10312  /*	if(NPN_SIGN==npnsULOAD)
;;;10313  		{
;;;10314  		if(load_U<UONPN)
;;;10315  			{
;;;10316  			if(npn_tz_cnt<TZNPN)
;;;10317  				{
;;;10318  				npn_tz_cnt++;
;;;10319  				if(npn_tz_cnt==TZNPN)
;;;10320  					{
;;;10321  					npn_stat=npnsOFF;
;;;10322  					}
;;;10323  				}
;;;10324  			}
;;;10325  		else if(load_U>UVNPN)
;;;10326  			{
;;;10327  			if(npn_tz_cnt)
;;;10328  				{
;;;10329  				npn_tz_cnt--;
;;;10330  				if(npn_tz_cnt==0)
;;;10331  					{
;;;10332  					npn_stat=npnsON;
;;;10333  					}
;;;10334  				}
;;;10335  			}
;;;10336  		}*/
;;;10337  
;;;10338  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10339  		{
;;;10340  		if(npn_tz_cnt<TZNPN)
0074ec  4fef              LDR      r7,|L1.30892|
;;;10341  			{
;;;10342  			npn_tz_cnt++;
;;;10343  			if(npn_tz_cnt==TZNPN)
;;;10344  				{
;;;10345  				npn_stat=npnsOFF;
0074ee  4ef0              LDR      r6,|L1.30896|
0074f0  7800              LDRB     r0,[r0,#0]            ;10285  ; NPN_OUT
0074f2  f04f0c00          MOV      r12,#0                ;10285
;;;10346  				}
;;;10347  			}
;;;10348  		}
;;;10349  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10350  		{
;;;10351  		if(npn_tz_cnt)
;;;10352  			{
;;;10353  			npn_tz_cnt--;
;;;10354  			if(npn_tz_cnt==0)
;;;10355  				{
;;;10356  				npn_stat=npnsON;
0074f6  f04f0801          MOV      r8,#1
0074fa  b3e8              CBZ      r0,|L1.30072|
0074fc  48ed              LDR      r0,|L1.30900|
0074fe  4639              MOV      r1,r7                 ;10340
007500  f9b05000          LDRSH    r5,[r0,#0]            ;10338  ; load_U
007504  48ec              LDR      r0,|L1.30904|
007506  f9b11000          LDRSH    r1,[r1,#0]            ;10340
00750a  f9b09000          LDRSH    r9,[r0,#0]            ;10338  ; UONPN
00750e  48eb              LDR      r0,|L1.30908|
007510  454d              CMP      r5,r9                 ;10338
007512  f9b02000          LDRSH    r2,[r0,#0]            ;10338
007516  48ea              LDR      r0,|L1.30912|
007518  f9b03000          LDRSH    r3,[r0,#0]            ;10338
00751c  48e9              LDR      r0,|L1.30916|
00751e  f9b04000          LDRSH    r4,[r0,#0]            ;10338
007522  48e9              LDR      r0,|L1.30920|
007524  f9b00000          LDRSH    r0,[r0,#0]            ;10338
007528  da13              BGE      |L1.30034|
00752a  4282              CMP      r2,r0                 ;10338
00752c  db03              BLT      |L1.30006|
00752e  4283              CMP      r3,r0                 ;10338
007530  db01              BLT      |L1.30006|
007532  4284              CMP      r4,r0                 ;10338
007534  da0d              BGE      |L1.30034|
                  |L1.30006|
007536  48e5              LDR      r0,|L1.30924|
007538  f9b02000          LDRSH    r2,[r0,#0]            ;10340  ; TZNPN
00753c  4291              CMP      r1,r2                 ;10340
00753e  da23              BGE      |L1.30088|
007540  f1010101          ADD      r1,r1,#1              ;10342
007544  b208              SXTH     r0,r1                 ;10342
007546  8038              STRH     r0,[r7,#0]            ;10342
007548  4290              CMP      r0,r2                 ;10343
00754a  d11d              BNE      |L1.30088|
00754c  f886c000          STRB     r12,[r6,#0]           ;10345
007550  e01a              B        |L1.30088|
                  |L1.30034|
007552  f8dfc37c          LDR      r12,|L1.30928|
007556  f9bcc000          LDRSH    r12,[r12,#0]          ;10349  ; UVNPN
00755a  4565              CMP      r5,r12                ;10349
00755c  dd14              BLE      |L1.30088|
00755e  4282              CMP      r2,r0                 ;10349
007560  dd12              BLE      |L1.30088|
007562  4283              CMP      r3,r0                 ;10349
007564  dd10              BLE      |L1.30088|
007566  4284              CMP      r4,r0                 ;10349
007568  dd0e              BLE      |L1.30088|
00756a  b169              CBZ      r1,|L1.30088|
00756c  f1a10101          SUB      r1,r1,#1              ;10353
007570  b208              SXTH     r0,r1                 ;10353
007572  8038              STRH     r0,[r7,#0]            ;10353
007574  b940              CBNZ     r0,|L1.30088|
007576  e000              B        |L1.30074|
                  |L1.30072|
007578  e002              B        |L1.30080|
                  |L1.30074|
00757a  f8868000          STRB     r8,[r6,#0]
00757e  e003              B        |L1.30088|
                  |L1.30080|
;;;10357  				}
;;;10358  			}
;;;10359  		}
;;;10360  	}
;;;10361  else
;;;10362  	{
;;;10363  	npn_tz_cnt=0;
007580  f8a7c000          STRH     r12,[r7,#0]
;;;10364  	npn_stat=npnsON;
007584  f8868000          STRB     r8,[r6,#0]
                  |L1.30088|
;;;10365  	}
;;;10366  
;;;10367  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
007588  7830              LDRB     r0,[r6,#0]  ; npn_stat
00758a  2800              CMP      r0,#0
00758c  d107              BNE      |L1.30110|
00758e  e8bd03f0          POP      {r4-r9}
007592  230f              MOVS     r3,#0xf
007594  2201              MOVS     r2,#1
007596  216e              MOVS     r1,#0x6e
007598  20d2              MOVS     r0,#0xd2
00759a  f7ffbffe          B.W      mess_send
                  |L1.30110|
;;;10368  
;;;10369  
;;;10370  }
00759e  e8bd03f0          POP      {r4-r9}
0075a2  4770              BX       lr
;;;10371  
                          ENDP

                  loadoff_hndl PROC
;;;10373  //-----------------------------------------------
;;;10374  void loadoff_hndl(void)
0075a4  b5f0              PUSH     {r4-r7,lr}
;;;10375  {
;;;10376  if((load_U>UONPN)||(load_U<UVNPN))
0075a6  48c3              LDR      r0,|L1.30900|
;;;10377  	{
;;;10378  	if(load_off_cnt<TZNPN)
0075a8  4dca              LDR      r5,|L1.30932|
;;;10379  		{
;;;10380  		load_off_cnt++;
;;;10381  		if(load_off_cnt>=TZNPN)
;;;10382  			{
;;;10383  			load_off_stat=npnsOFF;
0075aa  2700              MOVS     r7,#0
0075ac  f9b01000          LDRSH    r1,[r0,#0]            ;10376  ; load_U
0075b0  48c1              LDR      r0,|L1.30904|
0075b2  4ec9              LDR      r6,|L1.30936|
0075b4  f9b02000          LDRSH    r2,[r0,#0]            ;10376  ; UONPN
0075b8  f9b50000          LDRSH    r0,[r5,#0]            ;10378
0075bc  4291              CMP      r1,r2                 ;10376
0075be  dc04              BGT      |L1.30154|
0075c0  4bc3              LDR      r3,|L1.30928|
0075c2  f9b33000          LDRSH    r3,[r3,#0]            ;10376  ; UVNPN
0075c6  4299              CMP      r1,r3                 ;10376
0075c8  da0d              BGE      |L1.30182|
                  |L1.30154|
0075ca  49c0              LDR      r1,|L1.30924|
0075cc  f9b11000          LDRSH    r1,[r1,#0]            ;10378  ; TZNPN
0075d0  4288              CMP      r0,r1                 ;10378
0075d2  da1c              BGE      |L1.30222|
0075d4  f1000001          ADD      r0,r0,#1              ;10380
0075d8  b200              SXTH     r0,r0                 ;10380
0075da  8028              STRH     r0,[r5,#0]            ;10380
0075dc  4288              CMP      r0,r1                 ;10381
0075de  db16              BLT      |L1.30222|
0075e0  7037              STRB     r7,[r6,#0]
;;;10384  			load_off_cnt=TZNPN;
0075e2  8029              STRH     r1,[r5,#0]
0075e4  e013              B        |L1.30222|
                  |L1.30182|
;;;10385  			}
;;;10386  		}
;;;10387  	}
;;;10388  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
0075e6  4cbd              LDR      r4,|L1.30940|
0075e8  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
0075ec  4423              ADD      r3,r3,r4
0075ee  428b              CMP      r3,r1
0075f0  da0d              BGE      |L1.30222|
0075f2  1b12              SUBS     r2,r2,r4
0075f4  428a              CMP      r2,r1
0075f6  dd0a              BLE      |L1.30222|
;;;10389  	{
;;;10390  	if(load_off_cnt)
0075f8  b148              CBZ      r0,|L1.30222|
;;;10391  		{
;;;10392  		load_off_cnt--;
0075fa  f1a00001          SUB      r0,r0,#1
0075fe  b200              SXTH     r0,r0
007600  8028              STRH     r0,[r5,#0]
;;;10393  		if(load_off_cnt<=0)
007602  2800              CMP      r0,#0
007604  dc03              BGT      |L1.30222|
;;;10394  			{
;;;10395  			load_off_stat=npnsON;
007606  f04f0001          MOV      r0,#1
00760a  7030              STRB     r0,[r6,#0]
;;;10396  			load_off_cnt=0;
00760c  802f              STRH     r7,[r5,#0]
                  |L1.30222|
;;;10397  			}
;;;10398  		}
;;;10399  	}
;;;10400  
;;;10401  
;;;10402  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
00760e  7830              LDRB     r0,[r6,#0]  ; load_off_stat
007610  2800              CMP      r0,#0
007612  d103              BNE      |L1.30236|
007614  49b2              LDR      r1,|L1.30944|
007616  f04f000a          MOV      r0,#0xa
00761a  7008              STRB     r0,[r1,#0]
                  |L1.30236|
;;;10403  
;;;10404  
;;;10405  }
00761c  bdf0              POP      {r4-r7,pc}
;;;10406  
                          ENDP

                  speedChargeStartStop PROC
;;;10594  //-----------------------------------------------
;;;10595  void speedChargeStartStop(void)
00761e  b538              PUSH     {r3-r5,lr}
;;;10596  {
;;;10597  spch_plazma[1]++;
007620  4cb0              LDR      r4,|L1.30948|
007622  7860              LDRB     r0,[r4,#1]  ; spch_plazma
007624  f1000001          ADD      r0,r0,#1
007628  7060              STRB     r0,[r4,#1]
;;;10598  /*if(speedChIsOn)
;;;10599  	{
;;;10600  	speedChIsOn=0;
;;;10601  	}
;;;10602  
;;;10603  else
;;;10604  	{
;;;10605  	if(speedChrgBlckStat==0)
;;;10606  		{
;;;10607  		speedChIsOn=1;
;;;10608  		speedChTimeCnt=0;
;;;10609  		}
;;;10610  	else
;;;10611  		{
;;;10612  		show_mess(	"     Ускоренный     ",
;;;10613  	          		"       заряд        ",
;;;10614  	          		"    заблокирован!   ",
;;;10615  	          		"                    ",2000);	 
;;;10616  		}
;;;10617  	}*/
;;;10618  
;;;10619  if(sp_ch_stat!=scsOFF)
00762a  48af              LDR      r0,|L1.30952|
00762c  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
00762e  b151              CBZ      r1,|L1.30278|
;;;10620  	{
;;;10621  	sp_ch_stat=scsOFF;
007630  f04f0100          MOV      r1,#0
007634  7001              STRB     r1,[r0,#0]
;;;10622  	speedz_mem_hndl(10);
007636  f04f000a          MOV      r0,#0xa
00763a  f7fffffe          BL       speedz_mem_hndl
;;;10623  	spch_plazma[1]=10;
00763e  f04f000a          MOV      r0,#0xa
007642  7060              STRB     r0,[r4,#1]
;;;10624  	}
;;;10625  
;;;10626  else
;;;10627  	{
;;;10628  	spch_plazma[1]=20;
;;;10629  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10630  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10631  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10632  		#endif
;;;10633  		)
;;;10634  		{
;;;10635  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10636  		sp_ch_stat=scsSTEP1;
;;;10637  		#else
;;;10638  		sp_ch_stat=scsWRK;
;;;10639  		#endif
;;;10640  		speedz_mem_hndl(1);
;;;10641  		}
;;;10642  	else 
;;;10643  		{
;;;10644  		show_mess(	"     Ускоренный     ",
;;;10645  	          		"       заряд        ",
;;;10646  	          		"    заблокирован!   ",
;;;10647  	          		"                    ",2000);
;;;10648  		}
;;;10649  	}
;;;10650  }
007644  bd38              POP      {r3-r5,pc}
                  |L1.30278|
007646  f04f0114          MOV      r1,#0x14              ;10628
00764a  7061              STRB     r1,[r4,#1]            ;10628
00764c  49a7              LDR      r1,|L1.30956|
00764e  f9b12000          LDRSH    r2,[r1,#0]            ;10629  ; speedChrgBlckStat
007652  49a7              LDR      r1,|L1.30960|
007654  f8913023          LDRB     r3,[r1,#0x23]         ;10629  ; spc_stat
007658  ea420203          ORR      r2,r2,r3              ;10629
00765c  794b              LDRB     r3,[r1,#5]            ;10629  ; vz1_stat
00765e  79c9              LDRB     r1,[r1,#7]            ;10629  ; vz2_stat
007660  ea420203          ORR      r2,r2,r3              ;10629
007664  430a              ORRS     r2,r2,r1              ;10629
007666  d009              BEQ      |L1.30332|
007668  f44f60fa          MOV      r0,#0x7d0             ;10644
00766c  9000              STR      r0,[sp,#0]            ;10644
00766e  4ba1              LDR      r3,|L1.30964|
007670  a2a1              ADR      r2,|L1.30968|
007672  a1a7              ADR      r1,|L1.30992|
007674  a0ac              ADR      r0,|L1.31016|
007676  f7fffffe          BL       show_mess
00767a  bd38              POP      {r3-r5,pc}
                  |L1.30332|
00767c  f04f0101          MOV      r1,#1                 ;10636
007680  7001              STRB     r1,[r0,#0]            ;10636
007682  e8bd4038          POP      {r3-r5,lr}            ;10640
007686  4608              MOV      r0,r1                 ;10640
007688  f7ffbffe          B.W      speedz_mem_hndl
;;;10651  
                          ENDP

                  speedChargeHndl PROC
;;;10407  //-----------------------------------------------
;;;10408  void speedChargeHndl(void)
00768c  e92d4ff8          PUSH     {r3-r11,lr}
;;;10409  {
;;;10410  /*
;;;10411  if(sp_ch_stat==scsOFF)
;;;10412  	{
;;;10413  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10414  	}*/
;;;10415  	 
;;;10416  if(sp_ch_stat==scsSTEP1)
007690  4f95              LDR      r7,|L1.30952|
;;;10417  	{
;;;10418  	if(sp_ch_stat_old!=sp_ch_stat)
007692  4ead              LDR      r6,|L1.31048|
;;;10419  		{
;;;10420  		sp_ch_stat_cnt=5;
;;;10421  		if(SP_CH_VENT_BLOK==0)
007694  f8dfa2a8          LDR      r10,|L1.31040|
007698  7839              LDRB     r1,[r7,#0]            ;10416  ; sp_ch_stat
;;;10422  			{
;;;10423  			sp_ch_stat_cnt=0;
;;;10424  			sp_ch_stat=scsWRK;
;;;10425  			}
;;;10426  		}
;;;10427  	if(sp_ch_stat_cnt)
;;;10428  		{
;;;10429  		sp_ch_stat_cnt--;
;;;10430  		if(sp_ch_stat_cnt==0)
;;;10431  			{
;;;10432  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10433  
;;;10434  			}
;;;10435  		}
;;;10436  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
00769a  f8df92a8          LDR      r9,|L1.31044|
00769e  7830              LDRB     r0,[r6,#0]            ;10418
0076a0  4caa              LDR      r4,|L1.31052|
0076a2  2500              MOVS     r5,#0                 ;10421
0076a4  f04f0802          MOV      r8,#2                 ;10424
0076a8  2901              CMP      r1,#1                 ;10416
0076aa  d11b              BNE      |L1.30436|
0076ac  2801              CMP      r0,#1                 ;10418
0076ae  d008              BEQ      |L1.30402|
0076b0  f04f0105          MOV      r1,#5                 ;10420
0076b4  8021              STRH     r1,[r4,#0]            ;10420
0076b6  f8ba1000          LDRH     r1,[r10,#0]           ;10421  ; SP_CH_VENT_BLOK
0076ba  b911              CBNZ     r1,|L1.30402|
0076bc  8025              STRH     r5,[r4,#0]            ;10423
0076be  f8878000          STRB     r8,[r7,#0]            ;10424
                  |L1.30402|
0076c2  f9b41000          LDRSH    r1,[r4,#0]            ;10427  ; sp_ch_stat_cnt
0076c6  b139              CBZ      r1,|L1.30424|
0076c8  f1a10101          SUB      r1,r1,#1              ;10429
0076cc  b209              SXTH     r1,r1                 ;10429
0076ce  8021              STRH     r1,[r4,#0]            ;10429
0076d0  b911              CBNZ     r1,|L1.30424|
0076d2  f04f0103          MOV      r1,#3                 ;10432
0076d6  7039              STRB     r1,[r7,#0]            ;10432
                  |L1.30424|
0076d8  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
0076dc  2901              CMP      r1,#1
0076de  d101              BNE      |L1.30436|
0076e0  f8878000          STRB     r8,[r7,#0]
                  |L1.30436|
;;;10437  	}
;;;10438  
;;;10439  if(sp_ch_stat==scsWRK)
0076e4  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0076e6  2902              CMP      r1,#2
0076e8  d123              BNE      |L1.30514|
;;;10440  	{
;;;10441  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10442  		{
;;;10443  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
0076ea  4a99              LDR      r2,|L1.31056|
;;;10444  		hv_vz_up_cnt=0;
0076ec  4999              LDR      r1,|L1.31060|
0076ee  2802              CMP      r0,#2                 ;10441
0076f0  d008              BEQ      |L1.30468|
0076f2  4899              LDR      r0,|L1.31064|
0076f4  f44f6361          MOV      r3,#0xe10             ;10443
0076f8  f9b00000          LDRSH    r0,[r0,#0]            ;10443  ; speedChrgTimeInHour
0076fc  fb00f003          MUL      r0,r0,r3              ;10443
007700  6010              STR      r0,[r2,#0]            ;10443  ; sp_ch_wrk_cnt
007702  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.30468|
;;;10445  		}
;;;10446  	sp_ch_wrk_cnt--;
007704  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
007706  f1a00001          SUB      r0,r0,#1
00770a  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10447  	hv_vz_up_cnt++;
00770c  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
00770e  f1020201          ADD      r2,r2,#1
007712  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10448  	if(sp_ch_wrk_cnt==0)
007714  b918              CBNZ     r0,|L1.30494|
;;;10449  		{
;;;10450  		sp_ch_stat=scsOFF;
007716  703d              STRB     r5,[r7,#0]
;;;10451  		speedz_mem_hndl(0);
007718  2000              MOVS     r0,#0
00771a  f7fffffe          BL       speedz_mem_hndl
                  |L1.30494|
;;;10452  		}
;;;10453  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10454  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
00771e  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
007722  b930              CBNZ     r0,|L1.30514|
007724  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
007728  2801              CMP      r0,#1
00772a  d102              BNE      |L1.30514|
00772c  f04f0004          MOV      r0,#4
007730  7038              STRB     r0,[r7,#0]
                  |L1.30514|
;;;10455  	#endif
;;;10456  	}
;;;10457  
;;;10458  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
007732  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10459  	{
;;;10460  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10461  		{
;;;10462  		sp_ch_stat_cnt=10;
;;;10463  		}
;;;10464  	sp_ch_stat_cnt--;
;;;10465  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10466  		{
;;;10467  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
007734  f2413b88          MOV      r11,#0x1388
007738  f04f0a0a          MOV      r10,#0xa              ;10462
00773c  2803              CMP      r0,#3                 ;10458
00773e  d119              BNE      |L1.30580|
007740  7830              LDRB     r0,[r6,#0]            ;10460  ; sp_ch_stat_old
007742  2803              CMP      r0,#3                 ;10460
007744  d101              BNE      |L1.30538|
007746  8820              LDRH     r0,[r4,#0]            ;10460  ; sp_ch_stat_cnt
007748  b908              CBNZ     r0,|L1.30542|
                  |L1.30538|
00774a  f8a4a000          STRH     r10,[r4,#0]           ;10462
                  |L1.30542|
00774e  8820              LDRH     r0,[r4,#0]            ;10464  ; sp_ch_stat_cnt
007750  f1a00001          SUB      r0,r0,#1              ;10464
007754  b200              SXTH     r0,r0                 ;10464
007756  8020              STRH     r0,[r4,#0]            ;10464
007758  280a              CMP      r0,#0xa               ;10465
00775a  d001              BEQ      |L1.30560|
00775c  2809              CMP      r0,#9                 ;10465
00775e  d109              BNE      |L1.30580|
                  |L1.30560|
007760  4b7e              LDR      r3,|L1.31068|
007762  a07f              ADR      r0,|L1.31072|
007764  f1030218          ADD      r2,r3,#0x18
007768  f1020118          ADD      r1,r2,#0x18
00776c  f8cdb000          STR      r11,[sp,#0]
007770  f7fffffe          BL       show_mess
                  |L1.30580|
;;;10468  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10469  					"      ВКЛЮЧЕН       ",
;;;10470  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10471  					5000);
;;;10472  		}
;;;10473  	}
;;;10474  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
007774  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
007776  2804              CMP      r0,#4
007778  d11f              BNE      |L1.30650|
;;;10475  	{
;;;10476  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
00777a  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
00777c  2804              CMP      r0,#4
00777e  d101              BNE      |L1.30596|
007780  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
007782  b908              CBNZ     r0,|L1.30600|
                  |L1.30596|
;;;10477  		{
;;;10478  		sp_ch_stat_cnt=10;
007784  f8a4a000          STRH     r10,[r4,#0]
                  |L1.30600|
;;;10479  		}
;;;10480  	sp_ch_stat_cnt--;
007788  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
00778a  f1a00001          SUB      r0,r0,#1
00778e  b200              SXTH     r0,r0
007790  8020              STRH     r0,[r4,#0]
;;;10481  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
007792  280a              CMP      r0,#0xa
007794  d001              BEQ      |L1.30618|
007796  2809              CMP      r0,#9
007798  d109              BNE      |L1.30638|
                  |L1.30618|
;;;10482  		{
;;;10483  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
00779a  4b77              LDR      r3,|L1.31096|
00779c  a070              ADR      r0,|L1.31072|
00779e  f1030218          ADD      r2,r3,#0x18
0077a2  f1020118          ADD      r1,r2,#0x18
0077a6  f8cdb000          STR      r11,[sp,#0]
0077aa  f7fffffe          BL       show_mess
                  |L1.30638|
;;;10484  					"    ЗАБЛОКИРОВАН    ",
;;;10485  					"     НЕИСПРАВНА     ",
;;;10486  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10487  					5000);
;;;10488  		}
;;;10489  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0077ae  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0077b2  2801              CMP      r0,#1
0077b4  d101              BNE      |L1.30650|
0077b6  f8878000          STRB     r8,[r7,#0]
                  |L1.30650|
;;;10490  	}
;;;10491  
;;;10492  
;;;10493  sp_ch_stat_old=sp_ch_stat;
0077ba  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0077bc  7030              STRB     r0,[r6,#0]
;;;10494  
;;;10495  
;;;10496  
;;;10497  if(speedChrgAvtEn==1)
0077be  496f              LDR      r1,|L1.31100|
;;;10498  	{
;;;10499  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10500  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10501  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10502  		#endif
;;;10503  		)
;;;10504  		{
;;;10505  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10506  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10507  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10508  		#endif
;;;10509  		#ifdef UKU_220_V2
;;;10510  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10511  		#endif
;;;10512  		&&(!speedChrgBlckStat))
0077c0  4c4a              LDR      r4,|L1.30956|
0077c2  8809              LDRH     r1,[r1,#0]            ;10497  ; speedChrgAvtEn
0077c4  2901              CMP      r1,#1                 ;10497
0077c6  d10a              BNE      |L1.30686|
0077c8  4949              LDR      r1,|L1.30960|
;;;10513  			{
;;;10514  			speedChargeStartCnt++;
0077ca  4e6d              LDR      r6,|L1.31104|
0077cc  f8912023          LDRB     r2,[r1,#0x23]         ;10499  ; spc_stat
0077d0  4310              ORRS     r0,r0,r2              ;10499
0077d2  794a              LDRB     r2,[r1,#5]            ;10499  ; vz1_stat
0077d4  79c9              LDRB     r1,[r1,#7]            ;10499  ; vz2_stat
0077d6  4310              ORRS     r0,r0,r2              ;10499
0077d8  4308              ORRS     r0,r0,r1              ;10499
0077da  d007              BEQ      |L1.30700|
;;;10515  			if(speedChargeStartCnt>=60)
;;;10516  				{
;;;10517  				speedChargeStartStop();
;;;10518  				speedz_mem_hndl(5);
;;;10519  				}
;;;10520  			}
;;;10521  		else speedChargeStartCnt=0;
;;;10522  		}
;;;10523  	else speedChargeStartCnt=0;
0077dc  7035              STRB     r5,[r6,#0]
                  |L1.30686|
;;;10524  	}
;;;10525  
;;;10526  
;;;10527  
;;;10528  /*
;;;10529  if(speedChIsOn)
;;;10530  	{
;;;10531  	speedChTimeCnt++;
;;;10532  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10533  		{
;;;10534  		speedChIsOn=0;
;;;10535  		}
;;;10536  	if(speedChrgBlckStat)
;;;10537  		{
;;;10538  		speedChIsOn=0;
;;;10539  		speedChTimeCnt=0;
;;;10540  		}
;;;10541  	}
;;;10542  
;;;10543  
;;;10544  
;;;10545  if(speedChrgAvtEn)
;;;10546  	{
;;;10547  	if(!speedChIsOn)
;;;10548  		{
;;;10549  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10550  			{
;;;10551  			speedChIsOn=1;
;;;10552  			}
;;;10553  		}
;;;10554  	}
;;;10555  
;;;10556  
;;;10557  */
;;;10558  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
0077de  4869              LDR      r0,|L1.31108|
0077e0  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
0077e2  2802              CMP      r0,#2
0077e4  d02e              BEQ      |L1.30788|
0077e6  8025              STRH     r5,[r4,#0]
                  |L1.30696|
;;;10559  else
;;;10560  	{
;;;10561  	speedChrgBlckStat=0;
;;;10562  	if(speedChrgBlckSrc==1)
;;;10563  		{
;;;10564  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10565  		}
;;;10566  	else if(speedChrgBlckSrc==2)
;;;10567  		{
;;;10568  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10569  		}
;;;10570  	}
;;;10571  
;;;10572  /*
;;;10573  if(speedChrgBlckStat==1)
;;;10574  	{
;;;10575  
;;;10576  	//speedChargeStartStop();
;;;10577  
;;;10578  	speedChrgShowCnt++;
;;;10579  	if(speedChrgShowCnt>=30)	
;;;10580  		{
;;;10581  		speedChrgShowCnt=0;
;;;10582  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10583  					"       ЗАРЯД        ",
;;;10584  					"     ЗАПРЕЩЕН!!!    ",
;;;10585  					"                    ",
;;;10586  					5000);
;;;10587  		}
;;;10588  	} 
;;;10589  else speedChrgShowCnt=0;  */
;;;10590  
;;;10591  
;;;10592  }
0077e8  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.30700|
0077ec  4831              LDR      r0,|L1.30900|
0077ee  4966              LDR      r1,|L1.31112|
0077f0  f9b00000          LDRSH    r0,[r0,#0]            ;10505  ; load_U
0077f4  f9b11000          LDRSH    r1,[r1,#0]            ;10505  ; u_necc
0077f8  4288              CMP      r0,r1                 ;10505
0077fa  da14              BGE      |L1.30758|
0077fc  1a08              SUBS     r0,r1,r0              ;10505
0077fe  4963              LDR      r1,|L1.31116|
007800  f9b11000          LDRSH    r1,[r1,#0]            ;10505  ; speedChrgDU
007804  4288              CMP      r0,r1                 ;10505
007806  dd0e              BLE      |L1.30758|
007808  4861              LDR      r0,|L1.31120|
00780a  4962              LDR      r1,|L1.31124|
00780c  f9b00000          LDRSH    r0,[r0,#0]            ;10507  ; Ib_ips_termokompensat
007810  8809              LDRH     r1,[r1,#0]            ;10507  ; IZMAX
007812  fb90f0fa          SDIV     r0,r0,r10             ;10507
007816  1a40              SUBS     r0,r0,r1              ;10507
007818  b200              SXTH     r0,r0                 ;10507
00781a  f7fffffe          BL       abs
00781e  2805              CMP      r0,#5                 ;10507
007820  da01              BGE      |L1.30758|
007822  8820              LDRH     r0,[r4,#0]            ;10512  ; speedChrgBlckStat
007824  b108              CBZ      r0,|L1.30762|
                  |L1.30758|
007826  7035              STRB     r5,[r6,#0]            ;10521
007828  e7d9              B        |L1.30686|
                  |L1.30762|
00782a  7830              LDRB     r0,[r6,#0]            ;10514  ; speedChargeStartCnt
00782c  f1000001          ADD      r0,r0,#1              ;10514
007830  b2c0              UXTB     r0,r0                 ;10514
007832  7030              STRB     r0,[r6,#0]            ;10514
007834  283c              CMP      r0,#0x3c              ;10515
007836  d3d2              BCC      |L1.30686|
007838  f7fffffe          BL       speedChargeStartStop
00783c  2005              MOVS     r0,#5                 ;10518
00783e  f7fffffe          BL       speedz_mem_hndl
007842  e7cc              B        |L1.30686|
                  |L1.30788|
007844  8025              STRH     r5,[r4,#0]            ;10561
007846  4854              LDR      r0,|L1.31128|
007848  4954              LDR      r1,|L1.31132|
00784a  f44f63fa          MOV      r3,#0x7d0             ;10564
00784e  f9b00000          LDRSH    r0,[r0,#0]            ;10568  ; speedChrgBlckLog
007852  b918              CBNZ     r0,|L1.30812|
007854  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10568  ; adc_buff_
007858  429a              CMP      r2,r3                 ;10568
00785a  dc05              BGT      |L1.30824|
                  |L1.30812|
00785c  2801              CMP      r0,#1                 ;10568
00785e  d1c3              BNE      |L1.30696|
007860  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10568  ; adc_buff_
007864  4298              CMP      r0,r3                 ;10568
007866  dabf              BGE      |L1.30696|
                  |L1.30824|
007868  f04f0001          MOV      r0,#1                 ;10568
00786c  8020              STRH     r0,[r4,#0]            ;10568
00786e  e7bb              B        |L1.30696|
;;;10593  
                          ENDP

                  averageChargeHndl PROC
;;;10652  //-----------------------------------------------
;;;10653  void averageChargeHndl(void)
007870  e92d4ff8          PUSH     {r3-r11,lr}
;;;10654  {
;;;10655  /*
;;;10656  if(hv_vz_stat==hvsOFF)
;;;10657  	{
;;;10658  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10659  	} */
;;;10660  if(hv_vz_stat!=hvsOFF)
007874  f8dfa128          LDR      r10,|L1.31136|
007878  f04f0b00          MOV      r11,#0
00787c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007880  b130              CBZ      r0,|L1.30864|
;;;10661  	{
;;;10662  	hv_vz_stat=hvsOFF; 	
007882  f88ab000          STRB     r11,[r10,#0]
;;;10663  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
007886  2100              MOVS     r1,#0
007888  f44f70b4          MOV      r0,#0x168
00788c  f7fffffe          BL       lc640_write
                  |L1.30864|
;;;10664  	}
;;;10665  
;;;10666  if(hv_vz_stat==hvsSTEP1)
007890  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10667  	{
;;;10668  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10669  		{
;;;10670  		hv_vz_stat_cnt=5;
007894  f04f0905          MOV      r9,#5
;;;10671  		}
;;;10672  	if(hv_vz_stat_cnt)
;;;10673  		{
;;;10674  		hv_vz_stat_cnt--;
;;;10675  		if(hv_vz_stat_cnt==0)
;;;10676  			{
;;;10677  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10678  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10679  			}
;;;10680  		}
;;;10681  	if(sk_stat[0]==1)
007898  4e2a              LDR      r6,|L1.31044|
00789a  e083              B        |L1.31140|
                  |L1.30876|
                          DCD      BAT_C_REAL
                  |L1.30880|
                          DCD      NUMBAT
                  |L1.30884|
                          DCD      superviser_cnt
                  |L1.30888|
                          DCD      NPN_OUT
                  |L1.30892|
                          DCD      npn_tz_cnt
                  |L1.30896|
                          DCD      npn_stat
                  |L1.30900|
                          DCD      load_U
                  |L1.30904|
                          DCD      UONPN
                  |L1.30908|
                          DCD      net_Ua
                  |L1.30912|
                          DCD      net_Ub
                  |L1.30916|
                          DCD      net_Uc
                  |L1.30920|
                          DCD      UMN
                  |L1.30924|
                          DCD      TZNPN
                  |L1.30928|
                          DCD      UVNPN
                  |L1.30932|
                          DCD      load_off_cnt
                  |L1.30936|
                          DCD      load_off_stat
                  |L1.30940|
                          DCD      dUNPN
                  |L1.30944|
                          DCD      tloaddisable_cmnd
                  |L1.30948|
                          DCD      spch_plazma
                  |L1.30952|
                          DCD      sp_ch_stat
                  |L1.30956|
                          DCD      speedChrgBlckStat
                  |L1.30960|
                          DCD      ||area_number.18||
                  |L1.30964|
                          DCD      ||.text||+0x1d64
                  |L1.30968|
0078f8  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
0078fc  e7e0e1eb
007900  eeeae8f0
007904  eee2e0ed
007908  21      
007909  20202000          DCB      "   ",0
00790d  00                DCB      0
00790e  00                DCB      0
00790f  00                DCB      0
                  |L1.30992|
007910  20202020          DCB      "       ",231,224,240,255,228,"        ",0
007914  202020e7
007918  e0f0ffe4
00791c  20202020
007920  20202020
007924  00      
007925  00                DCB      0
007926  00                DCB      0
007927  00                DCB      0
                  |L1.31016|
007928  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
00792c  20d3f1ea
007930  eef0e5ed
007934  edfbe920
007938  20202020
00793c  00      
00793d  00                DCB      0
00793e  00                DCB      0
00793f  00                DCB      0
                  |L1.31040|
                          DCD      SP_CH_VENT_BLOK
                  |L1.31044|
                          DCD      sk_stat
                  |L1.31048|
                          DCD      sp_ch_stat_old
                  |L1.31052|
                          DCD      sp_ch_stat_cnt
                  |L1.31056|
                          DCD      sp_ch_wrk_cnt
                  |L1.31060|
                          DCD      hv_vz_up_cnt
                  |L1.31064|
                          DCD      speedChrgTimeInHour
                  |L1.31068|
                          DCD      ||.text||+0x1c2c
                  |L1.31072|
007960  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
007964  caced0c5
007968  cdcddbc9
00796c  20c7c0  
00796f  d0dfc420          DCB      208,223,196,"  ",0
007973  2000    
007975  00                DCB      0
007976  00                DCB      0
007977  00                DCB      0
                  |L1.31096|
                          DCD      ||.text||+0x1690
                  |L1.31100|
                          DCD      speedChrgAvtEn
                  |L1.31104|
                          DCD      speedChargeStartCnt
                  |L1.31108|
                          DCD      speedChrgBlckSrc
                  |L1.31112|
                          DCD      u_necc
                  |L1.31116|
                          DCD      speedChrgDU
                  |L1.31120|
                          DCD      Ib_ips_termokompensat
                  |L1.31124|
                          DCD      IZMAX
                  |L1.31128|
                          DCD      speedChrgBlckLog
                  |L1.31132|
                          DCD      ||.bss||+0x40c
                  |L1.31136|
                          DCD      hv_vz_stat
                  |L1.31140|
0079a4  4dfa              LDR      r5,|L1.32144|
0079a6  4cfb              LDR      r4,|L1.32148|
0079a8  2801              CMP      r0,#1                 ;10666
0079aa  d131              BNE      |L1.31248|
0079ac  7828              LDRB     r0,[r5,#0]            ;10668  ; hv_vz_stat_old
0079ae  2801              CMP      r0,#1                 ;10668
0079b0  d001              BEQ      |L1.31158|
0079b2  f8a49000          STRH     r9,[r4,#0]            ;10670
                  |L1.31158|
0079b6  f9b40000          LDRSH    r0,[r4,#0]            ;10672  ; hv_vz_stat_cnt
0079ba  b168              CBZ      r0,|L1.31192|
0079bc  f1a00001          SUB      r0,r0,#1              ;10674
0079c0  b200              SXTH     r0,r0                 ;10674
0079c2  8020              STRH     r0,[r4,#0]            ;10674
0079c4  b940              CBNZ     r0,|L1.31192|
0079c6  f04f0006          MOV      r0,#6                 ;10677
0079ca  f88a0000          STRB     r0,[r10,#0]           ;10677
0079ce  4601              MOV      r1,r0                 ;10678
0079d0  f44f70b4          MOV      r0,#0x168             ;10678
0079d4  f7fffffe          BL       lc640_write
                  |L1.31192|
0079d8  7830              LDRB     r0,[r6,#0]  ; sk_stat
0079da  2801              CMP      r0,#1
0079dc  d118              BNE      |L1.31248|
;;;10682  		{
;;;10683  		hv_vz_stat=hvsSTEP2;
0079de  f04f0002          MOV      r0,#2
0079e2  f88a0000          STRB     r0,[r10,#0]
;;;10684  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
0079e6  4601              MOV      r1,r0
0079e8  f44f70b4          MOV      r0,#0x168
0079ec  f7fffffe          BL       lc640_write
;;;10685  		tree_up(iHV_STEP2_2,1,0,0);
0079f0  2300              MOVS     r3,#0
0079f2  461a              MOV      r2,r3
0079f4  2101              MOVS     r1,#1
0079f6  20df              MOVS     r0,#0xdf
0079f8  f7fffffe          BL       tree_up
;;;10686  		tree_up(iHV_STEP2_1,0,0,0);
0079fc  2300              MOVS     r3,#0
0079fe  461a              MOV      r2,r3
007a00  4619              MOV      r1,r3
007a02  20de              MOVS     r0,#0xde
007a04  f7fffffe          BL       tree_up
;;;10687  		ret(1200);
007a08  f44f6096          MOV      r0,#0x4b0
007a0c  f7fffffe          BL       ||ret||
                  |L1.31248|
;;;10688  		}
;;;10689  	}
;;;10690  
;;;10691  if(hv_vz_stat==hvsSTEP2)
007a10  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007a14  2802              CMP      r0,#2
007a16  d10b              BNE      |L1.31280|
;;;10692  	{
;;;10693  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007a18  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
007a1a  2902              CMP      r1,#2
007a1c  d101              BNE      |L1.31266|
007a1e  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
007a20  b911              CBNZ     r1,|L1.31272|
                  |L1.31266|
;;;10694  		{
;;;10695  		hv_vz_stat_cnt=15;
007a22  f04f010f          MOV      r1,#0xf
007a26  8021              STRH     r1,[r4,#0]
                  |L1.31272|
;;;10696  		}
;;;10697  	hv_vz_stat_cnt--;
007a28  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
007a2a  f1a10101          SUB      r1,r1,#1
007a2e  8021              STRH     r1,[r4,#0]
                  |L1.31280|
;;;10698  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10699  	//	{
;;;10700  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10701  	//				"  Напряжение будет  ",
;;;10702  	//				" увеличено до     @В",
;;;10703  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10704  	//				4800,UVZ,1);
;;;10705  	//	}
;;;10706  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10707  	//	{
;;;10708  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10709  	//				"     НАЖАТИЕМ       ",
;;;10710  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10711  	//				"      КНОПКИ        ",
;;;10712  	//				4800);
;;;10713  	//	} 
;;;10714  /*	if(sk_stat[1]==1)
;;;10715  		{
;;;10716  		hv_vz_stat=hvsWRK;
;;;10717  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10718  		}*/
;;;10719  	}
;;;10720  
;;;10721  if(hv_vz_stat==hvsSTEP3)
;;;10722  	{
;;;10723  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10724  		{
;;;10725  		hv_vz_stat_cnt=10;
007a30  270a              MOVS     r7,#0xa
;;;10726  		}
;;;10727  	hv_vz_stat_cnt--;
;;;10728  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10729  		{
;;;10730  		show_mess(	"     ВКЛЮЧИТЕ       ",
007a32  f2413888          MOV      r8,#0x1388
007a36  2803              CMP      r0,#3                 ;10721
007a38  d122              BNE      |L1.31360|
007a3a  7828              LDRB     r0,[r5,#0]            ;10723  ; hv_vz_stat_old
007a3c  2803              CMP      r0,#3                 ;10723
007a3e  d101              BNE      |L1.31300|
007a40  8820              LDRH     r0,[r4,#0]            ;10723  ; hv_vz_stat_cnt
007a42  b900              CBNZ     r0,|L1.31302|
                  |L1.31300|
007a44  8027              STRH     r7,[r4,#0]            ;10725
                  |L1.31302|
007a46  8820              LDRH     r0,[r4,#0]            ;10727  ; hv_vz_stat_cnt
007a48  f1a00001          SUB      r0,r0,#1              ;10727
007a4c  b200              SXTH     r0,r0                 ;10727
007a4e  8020              STRH     r0,[r4,#0]            ;10727
007a50  280a              CMP      r0,#0xa               ;10728
007a52  d001              BEQ      |L1.31320|
007a54  2809              CMP      r0,#9                 ;10728
007a56  d109              BNE      |L1.31340|
                  |L1.31320|
007a58  4bcf              LDR      r3,|L1.32152|
007a5a  a2d0              ADR      r2,|L1.32156|
007a5c  f5a361bf          SUB      r1,r3,#0x5f8
007a60  f1010018          ADD      r0,r1,#0x18
007a64  f8cd8000          STR      r8,[sp,#0]
007a68  f7fffffe          BL       show_mess
                  |L1.31340|
;;;10731  					"      ТУМБЛЕР       ",
;;;10732  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10733  					"       ЗАРЯД        ",
;;;10734  					5000);
;;;10735  		}
;;;10736  	if(sk_stat[1]==1)
007a6c  7870              LDRB     r0,[r6,#1]  ; sk_stat
007a6e  2801              CMP      r0,#1
007a70  d106              BNE      |L1.31360|
;;;10737  		{
;;;10738  		hv_vz_stat=hvsWRK;
007a72  f88a9000          STRB     r9,[r10,#0]
;;;10739  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
007a76  2105              MOVS     r1,#5
007a78  f44f70b4          MOV      r0,#0x168
007a7c  f7fffffe          BL       lc640_write
                  |L1.31360|
;;;10740  		}
;;;10741  	}
;;;10742  
;;;10743  if(hv_vz_stat==hvsWRK)
007a80  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007a84  2805              CMP      r0,#5
007a86  d13a              BNE      |L1.31486|
;;;10744  	{
;;;10745  	if(hv_vz_stat_old!=hv_vz_stat)
007a88  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10746  		{
;;;10747  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
007a8a  4aca              LDR      r2,|L1.32180|
;;;10748  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10749  		hv_vz_up_cnt=0L;
007a8c  49ca              LDR      r1,|L1.32184|
007a8e  2805              CMP      r0,#5                 ;10745
007a90  d00d              BEQ      |L1.31406|
007a92  48ca              LDR      r0,|L1.32188|
007a94  f44f6361          MOV      r3,#0xe10             ;10747
007a98  f9b00000          LDRSH    r0,[r0,#0]            ;10747  ; VZ_HR
007a9c  fb00f303          MUL      r3,r0,r3              ;10747
007aa0  6013              STR      r3,[r2,#0]            ;10747  ; hv_vz_wrk_cnt
007aa2  b910              CBNZ     r0,|L1.31402|
007aa4  f44f60e1          MOV      r0,#0x708             ;10748
007aa8  6010              STR      r0,[r2,#0]            ;10748  ; hv_vz_wrk_cnt
                  |L1.31402|
007aaa  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.31406|
;;;10750  		}
;;;10751  	hv_vz_wrk_cnt--;
007aae  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
007ab0  f1a00001          SUB      r0,r0,#1
007ab4  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10752  	hv_vz_up_cnt++;
007ab6  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
007ab8  f1020201          ADD      r2,r2,#1
007abc  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10753  
;;;10754  	if(hv_vz_wrk_cnt==0)
007abe  b940              CBNZ     r0,|L1.31442|
;;;10755  		{
;;;10756  		hv_vz_stat=hvsERR4;
007ac0  f04f0009          MOV      r0,#9
007ac4  f88a0000          STRB     r0,[r10,#0]
;;;10757  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
007ac8  4601              MOV      r1,r0
007aca  f44f70b4          MOV      r0,#0x168
007ace  f7fffffe          BL       lc640_write
                  |L1.31442|
;;;10758  		}
;;;10759  	if(sk_stat[0]==0)
007ad2  7830              LDRB     r0,[r6,#0]  ; sk_stat
007ad4  b940              CBNZ     r0,|L1.31464|
;;;10760  		{
;;;10761  		hv_vz_stat=hvsERR2;
007ad6  f04f0007          MOV      r0,#7
007ada  f88a0000          STRB     r0,[r10,#0]
;;;10762  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
007ade  4601              MOV      r1,r0
007ae0  f44f70b4          MOV      r0,#0x168
007ae4  f7fffffe          BL       lc640_write
                  |L1.31464|
;;;10763  		}
;;;10764  	if(sk_stat[1]==0)
007ae8  7870              LDRB     r0,[r6,#1]  ; sk_stat
007aea  b940              CBNZ     r0,|L1.31486|
;;;10765  		{
;;;10766  		hv_vz_stat=hvsERR3;
007aec  f04f0008          MOV      r0,#8
007af0  f88a0000          STRB     r0,[r10,#0]
;;;10767  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
007af4  4601              MOV      r1,r0
007af6  f44f70b4          MOV      r0,#0x168
007afa  f7fffffe          BL       lc640_write
                  |L1.31486|
;;;10768  		}
;;;10769  	}
;;;10770  
;;;10771  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
007afe  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007b02  2806              CMP      r0,#6
007b04  d11a              BNE      |L1.31548|
;;;10772  	{
;;;10773  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007b06  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
007b08  2806              CMP      r0,#6
007b0a  d101              BNE      |L1.31504|
007b0c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007b0e  b900              CBNZ     r0,|L1.31506|
                  |L1.31504|
;;;10774  		{
;;;10775  		hv_vz_stat_cnt=10;
007b10  8027              STRH     r7,[r4,#0]
                  |L1.31506|
;;;10776  		}
;;;10777  	hv_vz_stat_cnt--;
007b12  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007b14  f1a00001          SUB      r0,r0,#1
007b18  b200              SXTH     r0,r0
007b1a  8020              STRH     r0,[r4,#0]
;;;10778  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007b1c  280a              CMP      r0,#0xa
007b1e  d001              BEQ      |L1.31524|
007b20  2809              CMP      r0,#9
007b22  d10b              BNE      |L1.31548|
                  |L1.31524|
;;;10779  		{
;;;10780  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
007b24  4b9c              LDR      r3,|L1.32152|
007b26  f8cd8000          STR      r8,[sp,#0]
007b2a  3bf0              SUBS     r3,r3,#0xf0
007b2c  f1030218          ADD      r2,r3,#0x18
007b30  f1020118          ADD      r1,r2,#0x18
007b34  f2a15084          SUB      r0,r1,#0x584
007b38  f7fffffe          BL       show_mess
                  |L1.31548|
;;;10781  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10782  					"      ВКЛЮЧЕН       ",
;;;10783  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10784  					5000);
;;;10785  		}
;;;10786  	}
;;;10787  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
007b3c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007b40  2807              CMP      r0,#7
007b42  d123              BNE      |L1.31628|
;;;10788  	{
;;;10789  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007b44  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
007b46  2807              CMP      r0,#7
007b48  d101              BNE      |L1.31566|
007b4a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007b4c  b900              CBNZ     r0,|L1.31568|
                  |L1.31566|
;;;10790  		{
;;;10791  		hv_vz_stat_cnt=10;
007b4e  8027              STRH     r7,[r4,#0]
                  |L1.31568|
;;;10792  		}
;;;10793  	hv_vz_stat_cnt--;
007b50  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007b52  f1a00001          SUB      r0,r0,#1
007b56  b200              SXTH     r0,r0
007b58  8020              STRH     r0,[r4,#0]
;;;10794  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007b5a  280a              CMP      r0,#0xa
007b5c  d001              BEQ      |L1.31586|
007b5e  2809              CMP      r0,#9
007b60  d10a              BNE      |L1.31608|
                  |L1.31586|
;;;10795  		{
;;;10796  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
007b62  4b97              LDR      r3,|L1.32192|
007b64  f8cd8000          STR      r8,[sp,#0]
007b68  f1030218          ADD      r2,r3,#0x18
007b6c  f1020118          ADD      r1,r2,#0x18
007b70  f1010018          ADD      r0,r1,#0x18
007b74  f7fffffe          BL       show_mess
                  |L1.31608|
;;;10797  					"    ЗАБЛОКИРОВАН    ",
;;;10798  					"     НЕИСПРАВНА     ",
;;;10799  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10800  					5000);
;;;10801  		}
;;;10802  	if(sk_stat[0]==1)
007b78  7830              LDRB     r0,[r6,#0]  ; sk_stat
007b7a  2801              CMP      r0,#1
007b7c  d106              BNE      |L1.31628|
;;;10803  		{
;;;10804  		hv_vz_stat=hvsWRK;
007b7e  f88a9000          STRB     r9,[r10,#0]
;;;10805  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
007b82  2105              MOVS     r1,#5
007b84  f44f70b4          MOV      r0,#0x168
007b88  f7fffffe          BL       lc640_write
                  |L1.31628|
;;;10806  		}
;;;10807  	}
;;;10808  
;;;10809  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
007b8c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007b90  2808              CMP      r0,#8
007b92  d123              BNE      |L1.31708|
;;;10810  	{
;;;10811  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007b94  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
007b96  2808              CMP      r0,#8
007b98  d101              BNE      |L1.31646|
007b9a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007b9c  b900              CBNZ     r0,|L1.31648|
                  |L1.31646|
;;;10812  		{
;;;10813  		hv_vz_stat_cnt=10;
007b9e  8027              STRH     r7,[r4,#0]
                  |L1.31648|
;;;10814  		}
;;;10815  	hv_vz_stat_cnt--;
007ba0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007ba2  f1a00001          SUB      r0,r0,#1
007ba6  b200              SXTH     r0,r0
007ba8  8020              STRH     r0,[r4,#0]
;;;10816  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007baa  280a              CMP      r0,#0xa
007bac  d001              BEQ      |L1.31666|
007bae  2809              CMP      r0,#9
007bb0  d10a              BNE      |L1.31688|
                  |L1.31666|
;;;10817  		{
;;;10818  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
007bb2  4b84              LDR      r3,|L1.32196|
007bb4  f8cd8000          STR      r8,[sp,#0]
007bb8  f2a35254          SUB      r2,r3,#0x554
007bbc  f1020118          ADD      r1,r2,#0x18
007bc0  f2a150e4          SUB      r0,r1,#0x5e4
007bc4  f7fffffe          BL       show_mess
                  |L1.31688|
;;;10819  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10820  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10821  					"    ТУМБЛЕРА!!!     ",
;;;10822  					5000);
;;;10823  		}
;;;10824  	if(sk_stat[1]==1)
007bc8  7870              LDRB     r0,[r6,#1]  ; sk_stat
007bca  2801              CMP      r0,#1
007bcc  d106              BNE      |L1.31708|
;;;10825  		{
;;;10826  		hv_vz_stat=hvsWRK;
007bce  f88a9000          STRB     r9,[r10,#0]
;;;10827  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
007bd2  2105              MOVS     r1,#5
007bd4  f44f70b4          MOV      r0,#0x168
007bd8  f7fffffe          BL       lc640_write
                  |L1.31708|
;;;10828  		}
;;;10829  	}
;;;10830  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
007bdc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007be0  2809              CMP      r0,#9
007be2  d123              BNE      |L1.31788|
;;;10831  	{
;;;10832  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007be4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
007be6  2809              CMP      r0,#9
007be8  d101              BNE      |L1.31726|
007bea  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007bec  b900              CBNZ     r0,|L1.31728|
                  |L1.31726|
;;;10833  		{
;;;10834  		hv_vz_stat_cnt=10;
007bee  8027              STRH     r7,[r4,#0]
                  |L1.31728|
;;;10835  		}
;;;10836  	hv_vz_stat_cnt--;
007bf0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007bf2  f1a00001          SUB      r0,r0,#1
007bf6  b200              SXTH     r0,r0
007bf8  8020              STRH     r0,[r4,#0]
;;;10837  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007bfa  280a              CMP      r0,#0xa
007bfc  d001              BEQ      |L1.31746|
007bfe  2809              CMP      r0,#9
007c00  d109              BNE      |L1.31766|
                  |L1.31746|
;;;10838  		{
;;;10839  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
007c02  4b65              LDR      r3,|L1.32152|
007c04  a265              ADR      r2,|L1.32156|
007c06  f5a361bf          SUB      r1,r3,#0x5f8
007c0a  f50160c5          ADD      r0,r1,#0x628
007c0e  f8cd8000          STR      r8,[sp,#0]
007c12  f7fffffe          BL       show_mess
                  |L1.31766|
;;;10840  					"      ТУМБЛЕР       ",
;;;10841  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10842  					"       ЗАРЯД        ",
;;;10843  					5000);
;;;10844  		}
;;;10845  	if(sk_stat[1]==0)
007c16  7870              LDRB     r0,[r6,#1]  ; sk_stat
007c18  b940              CBNZ     r0,|L1.31788|
;;;10846  		{
;;;10847  		hv_vz_stat=hvsOFF;
007c1a  f88ab000          STRB     r11,[r10,#0]
;;;10848  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
007c1e  2100              MOVS     r1,#0
007c20  f44f70b4          MOV      r0,#0x168
007c24  f7fffffe          BL       lc640_write
;;;10849  		vz_stop();
007c28  f7fffffe          BL       vz_stop
                  |L1.31788|
;;;10850  
;;;10851  		}
;;;10852  	}
;;;10853  hv_vz_stat_old=hv_vz_stat;
007c2c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007c30  7028              STRB     r0,[r5,#0]
;;;10854  /*
;;;10855  if(speedChIsOn)
;;;10856  	{
;;;10857  	speedChTimeCnt++;
;;;10858  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10859  		{
;;;10860  		speedChIsOn=0;
;;;10861  		}
;;;10862  	if(speedChrgBlckStat)
;;;10863  		{
;;;10864  		speedChIsOn=0;
;;;10865  		speedChTimeCnt=0;
;;;10866  		}
;;;10867  	}
;;;10868  
;;;10869  
;;;10870  
;;;10871  if(speedChrgAvtEn)
;;;10872  	{
;;;10873  	if(!speedChIsOn)
;;;10874  		{
;;;10875  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10876  			{
;;;10877  			speedChIsOn=1;
;;;10878  			}
;;;10879  		}
;;;10880  	}
;;;10881  
;;;10882  
;;;10883  
;;;10884  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10885  else
;;;10886  	{
;;;10887  	speedChrgBlckStat=0;
;;;10888  	if(speedChrgBlckSrc==1)
;;;10889  		{
;;;10890  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10891  		}
;;;10892  	else if(speedChrgBlckSrc==2)
;;;10893  		{
;;;10894  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10895  		}
;;;10896  	}
;;;10897  
;;;10898  
;;;10899  if(speedChrgBlckStat==1)
;;;10900  	{
;;;10901  
;;;10902  	//speedChargeStartStop();
;;;10903  
;;;10904  	speedChrgShowCnt++;
;;;10905  	if(speedChrgShowCnt>=30)	
;;;10906  		{
;;;10907  		speedChrgShowCnt=0;
;;;10908  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10909  					"       ЗАРЯД        ",
;;;10910  					"     ЗАПРЕЩЕН!!!    ",
;;;10911  					"                    ",
;;;10912  					5000);
;;;10913  		}
;;;10914  	}
;;;10915  else speedChrgShowCnt=0;
;;;10916  
;;;10917  */
;;;10918  }
007c32  e5d9              B        |L1.30696|
;;;10919  
                          ENDP

                  averageChargeStartStop PROC
;;;10920  //-----------------------------------------------
;;;10921  void averageChargeStartStop(void)
007c34  4964              LDR      r1,|L1.32200|
;;;10922  {
;;;10923  if(hv_vz_stat!=hvsOFF)
;;;10924  	{
;;;10925  	hv_vz_stat=hvsOFF;
;;;10926  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
007c36  f44f70b4          MOV      r0,#0x168
007c3a  780a              LDRB     r2,[r1,#0]            ;10923  ; hv_vz_stat
007c3c  b132              CBZ      r2,|L1.31820|
007c3e  f04f0200          MOV      r2,#0                 ;10925
007c42  700a              STRB     r2,[r1,#0]            ;10925
007c44  f04f0100          MOV      r1,#0
007c48  f7ffbffe          B.W      lc640_write
                  |L1.31820|
;;;10927  	}
;;;10928  
;;;10929  else
;;;10930  	{
;;;10931  	hv_vz_stat=hvsSTEP1;
007c4c  f04f0201          MOV      r2,#1
007c50  700a              STRB     r2,[r1,#0]
;;;10932  	lc640_write(EE_HV_VZ_STAT,hvsSTEP1);
007c52  4611              MOV      r1,r2
007c54  f7ffbffe          B.W      lc640_write
;;;10933  	}
;;;10934  }
;;;10935  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10936  //-----------------------------------------------
;;;10937  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
007c58  e92d41f0          PUSH     {r4-r8,lr}
;;;10938  {
;;;10939  
;;;10940  numOfForvardBps_old=numOfForvardBps;
007c5c  4c5b              LDR      r4,|L1.32204|
007c5e  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
007c60  7060              STRB     r0,[r4,#1]
;;;10941  
;;;10942  numOfForvardBps=0;
007c62  f04f0500          MOV      r5,#0
007c66  f8045928          STRB     r5,[r4],#-0x28
;;;10943  
;;;10944  //FORVARDBPSCHHOUR=10;
;;;10945  
;;;10946  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
007c6a  4e59              LDR      r6,|L1.32208|
007c6c  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
007c70  2800              CMP      r0,#0
007c72  dd02              BLE      |L1.31866|
007c74  f5b07ffa          CMP      r0,#0x1f4
007c78  dd02              BLE      |L1.31872|
                  |L1.31866|
;;;10947  	{
;;;10948  	FORVARDBPSCHHOUR=0;
007c7a  8035              STRH     r5,[r6,#0]
                  |L1.31868|
;;;10949  	return;
;;;10950  	}
;;;10951  
;;;10952  numOfForvardBps_minCnt++;
;;;10953  
;;;10954  
;;;10955  if(numOfForvardBps_minCnt>=60)
;;;10956  	{
;;;10957  	numOfForvardBps_minCnt=0;
;;;10958  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10959  	numOfForvardBps_hourCnt++;
;;;10960  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10961  		{
;;;10962  		numOfForvardBps_hourCnt=0;
;;;10963  		}
;;;10964  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10965  	}
;;;10966  
;;;10967  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10968  
;;;10969  //if(numOfForvardBps)
;;;10970  //numOfForvardBps_old=numOfForvardBps; 
;;;10971  }
007c7c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.31872|
007c80  f894002a          LDRB     r0,[r4,#0x2a]         ;10952  ; numOfForvardBps_minCnt
007c84  f1000001          ADD      r0,r0,#1              ;10952
007c88  b2c0              UXTB     r0,r0                 ;10952
007c8a  f884002a          STRB     r0,[r4,#0x2a]         ;10952
007c8e  283c              CMP      r0,#0x3c              ;10955
007c90  d31b              BCC      |L1.31946|
007c92  f884502a          STRB     r5,[r4,#0x2a]         ;10957
007c96  f44f7794          MOV      r7,#0x128             ;10958
007c9a  4638              MOV      r0,r7                 ;10958
007c9c  f7fffffe          BL       lc640_read_int
007ca0  f1000001          ADD      r0,r0,#1              ;10959
007ca4  b200              SXTH     r0,r0                 ;10959
007ca6  f8a40074          STRH     r0,[r4,#0x74]         ;10959
007caa  4a4a              LDR      r2,|L1.32212|
007cac  f9b61000          LDRSH    r1,[r6,#0]            ;10960  ; FORVARDBPSCHHOUR
007cb0  f9b22000          LDRSH    r2,[r2,#0]            ;10960  ; NUMIST
007cb4  fb01f102          MUL      r1,r1,r2              ;10960
007cb8  4281              CMP      r1,r0                 ;10960
007cba  dc01              BGT      |L1.31936|
007cbc  f8a45074          STRH     r5,[r4,#0x74]         ;10962
                  |L1.31936|
007cc0  f9b41074          LDRSH    r1,[r4,#0x74]         ;10964  ; numOfForvardBps_hourCnt
007cc4  4638              MOV      r0,r7                 ;10964
007cc6  f7fffffe          BL       lc640_write_int
                  |L1.31946|
007cca  f9b40074          LDRSH    r0,[r4,#0x74]         ;10967  ; numOfForvardBps_hourCnt
007cce  f9b61000          LDRSH    r1,[r6,#0]            ;10967  ; FORVARDBPSCHHOUR
007cd2  fb90f0f1          SDIV     r0,r0,r1              ;10967
007cd6  f8840028          STRB     r0,[r4,#0x28]         ;10967
007cda  e7cf              B        |L1.31868|
;;;10972  
                          ENDP

                  numOfForvardBps_init PROC
;;;10973  //-----------------------------------------------
;;;10974  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
007cdc  b510              PUSH     {r4,lr}
;;;10975  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10976  lc640_write_int(EE_FORVBPSHOURCNT,0);
007cde  2100              MOVS     r1,#0
007ce0  f44f7094          MOV      r0,#0x128
007ce4  f7fffffe          BL       lc640_write_int
;;;10977  numOfForvardBps_minCnt=58;
007ce8  4938              LDR      r1,|L1.32204|
007cea  f04f003a          MOV      r0,#0x3a
007cee  f1a10128          SUB      r1,r1,#0x28
007cf2  f881002a          STRB     r0,[r1,#0x2a]
;;;10978  }
007cf6  bd10              POP      {r4,pc}
;;;10979  
                          ENDP

                  outVoltContrHndl PROC
;;;10980  //-----------------------------------------------
;;;10981  void outVoltContrHndl(void)
007cf8  b570              PUSH     {r4-r6,lr}
;;;10982  { 
;;;10983  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
007cfa  4c37              LDR      r4,|L1.32216|
007cfc  4837              LDR      r0,|L1.32220|
;;;10984  	{
;;;10985  	outVoltContrHndlCnt_=0;
;;;10986  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
007cfe  4a38              LDR      r2,|L1.32224|
007d00  f9b41000          LDRSH    r1,[r4,#0]            ;10983  ; load_U
007d04  f9b06000          LDRSH    r6,[r0,#0]            ;10983  ; U_OUT_KONTR_MAX
007d08  2500              MOVS     r5,#0                 ;10985
007d0a  f9b20000          LDRSH    r0,[r2,#0]
007d0e  4b35              LDR      r3,|L1.32228|
007d10  42b1              CMP      r1,r6                 ;10983
007d12  dc04              BGT      |L1.32030|
007d14  4e34              LDR      r6,|L1.32232|
007d16  f9b66000          LDRSH    r6,[r6,#0]            ;10983  ; U_OUT_KONTR_MIN
007d1a  42b1              CMP      r1,r6                 ;10983
007d1c  da0f              BGE      |L1.32062|
                  |L1.32030|
007d1e  801d              STRH     r5,[r3,#0]            ;10985
007d20  4932              LDR      r1,|L1.32236|
007d22  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
007d26  4288              CMP      r0,r1
007d28  da1b              BGE      |L1.32098|
;;;10987  		{
;;;10988  		outVoltContrHndlCnt++;
007d2a  f1000001          ADD      r0,r0,#1
007d2e  b200              SXTH     r0,r0
007d30  8010              STRH     r0,[r2,#0]
;;;10989  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
007d32  4288              CMP      r0,r1
007d34  d115              BNE      |L1.32098|
;;;10990  			{
;;;10991  			avar_uout_hndl(1);
007d36  2001              MOVS     r0,#1
007d38  f7fffffe          BL       avar_uout_hndl
007d3c  e011              B        |L1.32098|
                  |L1.32062|
;;;10992  			}
;;;10993  		}
;;;10994  	}
;;;10995  else
;;;10996  	{
;;;10997  	if(outVoltContrHndlCnt)
007d3e  b180              CBZ      r0,|L1.32098|
;;;10998  		{
;;;10999  		if(outVoltContrHndlCnt_<5)
007d40  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
007d44  2805              CMP      r0,#5
007d46  da0c              BGE      |L1.32098|
;;;11000  			{
;;;11001  			outVoltContrHndlCnt_++;
007d48  f1000001          ADD      r0,r0,#1
007d4c  b200              SXTH     r0,r0
007d4e  8018              STRH     r0,[r3,#0]
;;;11002  			if(outVoltContrHndlCnt_>=5)
007d50  2805              CMP      r0,#5
007d52  db06              BLT      |L1.32098|
;;;11003  				{
;;;11004  				outVoltContrHndlCnt=0;
007d54  8015              STRH     r5,[r2,#0]
;;;11005  				if(uout_av)avar_uout_hndl(0);
007d56  4826              LDR      r0,|L1.32240|
007d58  7800              LDRB     r0,[r0,#0]  ; uout_av
007d5a  b110              CBZ      r0,|L1.32098|
007d5c  2000              MOVS     r0,#0
007d5e  f7fffffe          BL       avar_uout_hndl
                  |L1.32098|
;;;11006  				}
;;;11007  			}
;;;11008  		}
;;;11009  	}
;;;11010  
;;;11011  if (load_U<(USIGN*10)) 
007d62  4824              LDR      r0,|L1.32244|
007d64  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
007d68  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
007d6c  eb000080          ADD      r0,r0,r0,LSL #2
007d70  ebb10f40          CMP      r1,r0,LSL #1
007d74  da0b              BGE      |L1.32142|
;;;11012  	{
;;;11013  	if(!bSILENT)
007d76  4820              LDR      r0,|L1.32248|
007d78  6800              LDR      r0,[r0,#0]  ; bSILENT
007d7a  2800              CMP      r0,#0
007d7c  d107              BNE      |L1.32142|
;;;11014  		{
;;;11015  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
007d7e  e8bd4070          POP      {r4-r6,lr}
007d82  2314              MOVS     r3,#0x14
007d84  2201              MOVS     r2,#1
007d86  2172              MOVS     r1,#0x72
007d88  20d2              MOVS     r0,#0xd2
007d8a  f7ffbffe          B.W      mess_send
                  |L1.32142|
;;;11016  		}
;;;11017  
;;;11018  	//bU_BAT2REL_AV_BAT=1;
;;;11019  	}
;;;11020  
;;;11021  
;;;11022  }
007d8e  bd70              POP      {r4-r6,pc}
                  |L1.32144|
                          DCD      hv_vz_stat_old
                  |L1.32148|
                          DCD      hv_vz_stat_cnt
                  |L1.32152|
                          DCD      ||.text||+0x1d1c
                  |L1.32156|
007d9c  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
007da0  dbd0c0c2
007da4  cdc8c2c0
007da8  ded9c8c9
007dac  20202020          DCB      "    ",0
007db0  00      
007db1  00                DCB      0
007db2  00                DCB      0
007db3  00                DCB      0
                  |L1.32180|
                          DCD      hv_vz_wrk_cnt
                  |L1.32184|
                          DCD      hv_vz_up_cnt
                  |L1.32188|
                          DCD      VZ_HR
                  |L1.32192|
                          DCD      ||.text||+0x1690
                  |L1.32196|
                          DCD      ||.text||+0x21f8
                  |L1.32200|
                          DCD      hv_vz_stat
                  |L1.32204|
                          DCD      ||area_number.18||+0x28
                  |L1.32208|
                          DCD      FORVARDBPSCHHOUR
                  |L1.32212|
                          DCD      NUMIST
                  |L1.32216|
                          DCD      load_U
                  |L1.32220|
                          DCD      U_OUT_KONTR_MAX
                  |L1.32224|
                          DCD      outVoltContrHndlCnt
                  |L1.32228|
                          DCD      outVoltContrHndlCnt_
                  |L1.32232|
                          DCD      U_OUT_KONTR_MIN
                  |L1.32236|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.32240|
                          DCD      uout_av
                  |L1.32244|
                          DCD      USIGN
                  |L1.32248|
                          DCD      bSILENT
                          ENDP

                  vent_resurs_hndl PROC
;;;11024  //-----------------------------------------------
;;;11025  void vent_resurs_hndl(void)
007dfc  e92d47f0          PUSH     {r4-r10,lr}
;;;11026  {
;;;11027  char i;
;;;11028  char crc_in,crc_eval;
;;;11029  
;;;11030  for(i=0;i<NUMIST;i++)
007e00  f04f0200          MOV      r2,#0
;;;11031  	{
;;;11032  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11033  		{
;;;11034  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11035  		}
;;;11036  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11037  		{
;;;11038  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11039  		}
;;;11040  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11041  		{
;;;11042  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11043  		}
;;;11044  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11045  		{
;;;11046  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11047  		}
;;;11048  	crc_in=0;
;;;11049  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11050  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11051  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11052  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11053  
;;;11054  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11055  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11056  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11057  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11058  
;;;11059  	if(crc_eval==crc_in)
;;;11060  		{
;;;11061  		unsigned short temp_US;
;;;11062  		temp_US=0;
;;;11063  
;;;11064  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11065  		temp_US<<=4;
;;;11066  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11067  		temp_US<<=4;
;;;11068  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11069  		temp_US<<=4;
;;;11070  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11071  
;;;11072  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11073  		}
;;;11074  
;;;11075  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
007e04  48ea              LDR      r0,|L1.33200|
007e06  f8dfc3ac          LDR      r12,|L1.33204|
007e0a  f9b06000          LDRSH    r6,[r0,#0]
007e0e  48ea              LDR      r0,|L1.33208|
007e10  f9b07000          LDRSH    r7,[r0,#0]            ;11030
007e14  e06e              B        |L1.32500|
                  |L1.32278|
007e16  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11032
007e1a  eb001002          ADD      r0,r0,r2,LSL #4       ;11032
007e1e  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11032
007e22  7b41              LDRB     r1,[r0,#0xd]          ;11032
007e24  098b              LSRS     r3,r1,#6              ;11032
007e26  d006              BEQ      |L1.32310|
007e28  2301              MOVS     r3,#1                 ;11036
007e2a  ebb31f91          CMP      r3,r1,LSR #6          ;11036
007e2e  d105              BNE      |L1.32316|
007e30  f8801059          STRB     r1,[r0,#0x59]         ;11038
007e34  e00f              B        |L1.32342|
                  |L1.32310|
007e36  f8801058          STRB     r1,[r0,#0x58]         ;11034
007e3a  e00c              B        |L1.32342|
                  |L1.32316|
007e3c  2302              MOVS     r3,#2                 ;11040
007e3e  ebb31f91          CMP      r3,r1,LSR #6          ;11040
007e42  d102              BNE      |L1.32330|
007e44  f880105a          STRB     r1,[r0,#0x5a]         ;11042
007e48  e005              B        |L1.32342|
                  |L1.32330|
007e4a  2303              MOVS     r3,#3                 ;11044
007e4c  ebb31f91          CMP      r3,r1,LSR #6          ;11044
007e50  d101              BNE      |L1.32342|
007e52  f880105b          STRB     r1,[r0,#0x5b]         ;11046
                  |L1.32342|
007e56  f8101f58          LDRB     r1,[r0,#0x58]!        ;11049
007e5a  f3c11401          UBFX     r4,r1,#4,#2           ;11049
007e5e  7843              LDRB     r3,[r0,#1]            ;11050
007e60  f0030530          AND      r5,r3,#0x30           ;11050
007e64  ea440495          ORR      r4,r4,r5,LSR #2       ;11050
007e68  f8909002          LDRB     r9,[r0,#2]            ;11051
007e6c  f0090830          AND      r8,r9,#0x30           ;11051
007e70  ea480804          ORR      r8,r8,r4              ;11051
007e74  78c5              LDRB     r5,[r0,#3]            ;11052
007e76  f1a00058          SUB      r0,r0,#0x58           ;11052
007e7a  f0050430          AND      r4,r5,#0x30           ;11052
007e7e  ea480884          ORR      r8,r8,r4,LSL #2       ;11052
007e82  f001010f          AND      r1,r1,#0xf            ;11054
007e86  f003040f          AND      r4,r3,#0xf            ;11055
007e8a  ea840a01          EOR      r10,r4,r1             ;11055
007e8e  f009030f          AND      r3,r9,#0xf            ;11056
007e92  ea83090a          EOR      r9,r3,r10             ;11056
007e96  f005050f          AND      r5,r5,#0xf            ;11057
007e9a  ea850909          EOR      r9,r5,r9              ;11057
007e9e  45c1              CMP      r9,r8                 ;11059
007ea0  d113              BNE      |L1.32458|
007ea2  ea4f1505          LSL      r5,r5,#4              ;11065
007ea6  ea430305          ORR      r3,r3,r5              ;11066
007eaa  ea4f1303          LSL      r3,r3,#4              ;11067
007eae  ea440403          ORR      r4,r4,r3              ;11068
007eb2  ea4f5304          LSL      r3,r4,#20             ;11069
007eb6  ea4f4313          LSR      r3,r3,#16             ;11069
007eba  ea410103          ORR      r1,r1,r3              ;11070
007ebe  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11072
007ec2  428b              CMP      r3,r1                 ;11072
007ec4  d001              BEQ      |L1.32458|
007ec6  f8a0105c          STRH     r1,[r0,#0x5c]         ;11072
                  |L1.32458|
007eca  f8b0105c          LDRH     r1,[r0,#0x5c]
007ece  eb060386          ADD      r3,r6,r6,LSL #2
007ed2  ebb10f43          CMP      r1,r3,LSL #1
007ed6  dd06              BLE      |L1.32486|
007ed8  2e00              CMP      r6,#0
007eda  dd04              BLE      |L1.32486|
;;;11076  		{
;;;11077  		bps[i]._av|=(1<<4);
007edc  7841              LDRB     r1,[r0,#1]
007ede  f0410110          ORR      r1,r1,#0x10
007ee2  7041              STRB     r1,[r0,#1]
007ee4  e003              B        |L1.32494|
                  |L1.32486|
;;;11078  		}
;;;11079  	else bps[i]._av&=~(1<<4);
007ee6  7841              LDRB     r1,[r0,#1]
007ee8  f0210110          BIC      r1,r1,#0x10
007eec  7041              STRB     r1,[r0,#1]
                  |L1.32494|
007eee  f1020201          ADD      r2,r2,#1              ;11030
007ef2  b2d2              UXTB     r2,r2                 ;11030
                  |L1.32500|
007ef4  42ba              CMP      r2,r7                 ;11030
007ef6  db8e              BLT      |L1.32278|
;;;11080  	}
;;;11081  }
007ef8  e8bd87f0          POP      {r4-r10,pc}
;;;11082  
                          ENDP

                  vent_hndl PROC
;;;11083  //-----------------------------------------------
;;;11084  void vent_hndl(void)
007efc  e92d4ff0          PUSH     {r4-r11,lr}
;;;11085  {
007f00  b087              SUB      sp,sp,#0x1c
;;;11086  if(RELEVENTSIGN==rvsAKB)
007f02  48ae              LDR      r0,|L1.33212|
;;;11087  	{
;;;11088  	if(vent_stat==0)
007f04  4cae              LDR      r4,|L1.33216|
;;;11089  		{
;;;11090  		if	(
;;;11091  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
007f06  49af              LDR      r1,|L1.33220|
;;;11092  			||
;;;11093  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11094  			)
;;;11095  			{
;;;11096  			vent_stat=1;
;;;11097  			}
;;;11098  		}
;;;11099  	else if(vent_stat==1)
;;;11100  		{
;;;11101  		if	(
;;;11102  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
007f08  4aaf              LDR      r2,|L1.33224|
007f0a  7800              LDRB     r0,[r0,#0]            ;11086  ; RELEVENTSIGN
007f0c  f9943000          LDRSB    r3,[r4,#0]            ;11088
007f10  f9b11000          LDRSH    r1,[r1,#0]            ;11091
007f14  f9b22000          LDRSH    r2,[r2,#0]
007f18  b148              CBZ      r0,|L1.32558|
;;;11103  			&&
;;;11104  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11105  			)
;;;11106  			{
;;;11107  			vent_stat=0;
;;;11108  			}
;;;11109  		}
;;;11110  	}
;;;11111  else if(RELEVENTSIGN==rvsBPS)
007f1a  2802              CMP      r0,#2
007f1c  d03c              BEQ      |L1.32664|
;;;11112  	{
;;;11113  /*	if	(
;;;11114  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11115  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11116  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11117  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11118  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11119  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11120  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11121  		)
;;;11122  		{
;;;11123  		vent_stat=1;
;;;11124  		}
;;;11125  	else vent_stat=0;
;;;11126  	*/
;;;11127  
;;;11128  	if	(
;;;11129  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11130  		||
;;;11131  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11132  		||
;;;11133  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11134  		||
;;;11135  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11136  		||
;;;11137  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11138  		||
;;;11139  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11140  		||
;;;11141  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11142  		||
;;;11143  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11144  		)
;;;11145  		{
;;;11146  		vent_stat=1;
;;;11147  		}
;;;11148  	else if(vent_stat==1)
;;;11149  		{
;;;11150  		if	(
;;;11151  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11152  			&&
;;;11153  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11154  			&&
;;;11155  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11156  			&&
;;;11157  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11158  			&&
;;;11159  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11160  			&&
;;;11161  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11162  			&&
;;;11163  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11164  			&&
;;;11165  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11166  			)
;;;11167  			{
;;;11168  			vent_stat=0;
;;;11169  			}
;;;11170  		}
;;;11171  	}
;;;11172  else if(RELEVENTSIGN==rvsEXT)
007f1e  2801              CMP      r0,#1
007f20  d07e              BEQ      |L1.32800|
;;;11173  	{
;;;11174  	if	(
;;;11175  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11176  		||
;;;11177  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11178  		||
;;;11179  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11180  		)
;;;11181  		{
;;;11182  		vent_stat=1;
;;;11183  		}
;;;11184  	else if(vent_stat==1)
;;;11185  		{
;;;11186  		if	(
;;;11187  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11188  			&&
;;;11189  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11190  			&&
;;;11191  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11192  			)
;;;11193  			{
;;;11194  			vent_stat=0;
;;;11195  			}
;;;11196  		}
;;;11197  	}
;;;11198  else vent_stat=1;
007f22  f04f0001          MOV      r0,#1
007f26  7020              STRB     r0,[r4,#0]
                  |L1.32552|
;;;11199  }
007f28  b007              ADD      sp,sp,#0x1c
007f2a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.32558|
007f2e  4fa7              LDR      r7,|L1.33228|
007f30  f8df829c          LDR      r8,|L1.33232|
007f34  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11091
007f38  7b3d              LDRB     r5,[r7,#0xc]          ;11091
007f3a  f9b76056          LDRSH    r6,[r7,#0x56]         ;11093
007f3e  f898c000          LDRB     r12,[r8,#0]           ;11090
007f42  f8977058          LDRB     r7,[r7,#0x58]         ;11093
007f46  f8988001          LDRB     r8,[r8,#1]            ;11093
007f4a  b12b              CBZ      r3,|L1.32600|
007f4c  2b01              CMP      r3,#1                 ;11099
007f4e  d1eb              BNE      |L1.32552|
007f50  f1bc0f55          CMP      r12,#0x55             ;11101
007f54  d115              BNE      |L1.32642|
007f56  e010              B        |L1.32634|
                  |L1.32600|
007f58  f1bc0f55          CMP      r12,#0x55             ;11090
007f5c  d102              BNE      |L1.32612|
007f5e  4288              CMP      r0,r1                 ;11091
007f60  dc07              BGT      |L1.32626|
007f62  b935              CBNZ     r5,|L1.32626|
                  |L1.32612|
007f64  f1b80f55          CMP      r8,#0x55              ;11093
007f68  d1de              BNE      |L1.32552|
007f6a  428e              CMP      r6,r1                 ;11093
007f6c  dc01              BGT      |L1.32626|
007f6e  2f00              CMP      r7,#0                 ;11093
007f70  d0da              BEQ      |L1.32552|
                  |L1.32626|
007f72  f04f0001          MOV      r0,#1                 ;11096
007f76  7020              STRB     r0,[r4,#0]            ;11096
007f78  e7d6              B        |L1.32552|
                  |L1.32634|
007f7a  4290              CMP      r0,r2                 ;11102
007f7c  dad4              BGE      |L1.32552|
007f7e  2d00              CMP      r5,#0                 ;11102
007f80  d1d2              BNE      |L1.32552|
                  |L1.32642|
007f82  f1b80f55          CMP      r8,#0x55              ;11104
007f86  d103              BNE      |L1.32656|
007f88  4296              CMP      r6,r2                 ;11104
007f8a  dacd              BGE      |L1.32552|
007f8c  2f00              CMP      r7,#0                 ;11104
007f8e  d1cb              BNE      |L1.32552|
                  |L1.32656|
007f90  f04f0000          MOV      r0,#0                 ;11107
007f94  7020              STRB     r0,[r4,#0]            ;11107
007f96  e7c7              B        |L1.32552|
                  |L1.32664|
007f98  4e86              LDR      r6,|L1.33204|
007f9a  4887              LDR      r0,|L1.33208|
007f9c  6ab5              LDR      r5,[r6,#0x28]         ;11129
007f9e  f9b00000          LDRSH    r0,[r0,#0]            ;11128  ; NUMIST
007fa2  78f6              LDRB     r6,[r6,#3]            ;11129
007fa4  b118              CBZ      r0,|L1.32686|
007fa6  428d              CMP      r5,r1                 ;11129
007fa8  dc7a              BGT      |L1.32928|
007faa  2e1e              CMP      r6,#0x1e              ;11129
007fac  d278              BCS      |L1.32928|
                  |L1.32686|
007fae  f8dfc204          LDR      r12,|L1.33204|
007fb2  2801              CMP      r0,#1                 ;11131
007fb4  f8dc708c          LDR      r7,[r12,#0x8c]        ;11131
007fb8  f89cc067          LDRB     r12,[r12,#0x67]       ;11131
007fbc  f8cdc018          STR      r12,[sp,#0x18]        ;11131
007fc0  dd06              BLE      |L1.32720|
007fc2  428f              CMP      r7,r1                 ;11131
007fc4  dc6c              BGT      |L1.32928|
007fc6  f8ddc018          LDR      r12,[sp,#0x18]        ;11131
007fca  f1bc0f1e          CMP      r12,#0x1e             ;11131
007fce  d267              BCS      |L1.32928|
                  |L1.32720|
007fd0  f8dfc1e0          LDR      r12,|L1.33204|
007fd4  2802              CMP      r0,#2                 ;11133
007fd6  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11133
007fda  f8cd8014          STR      r8,[sp,#0x14]         ;11133
007fde  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11133
007fe2  f8cdc010          STR      r12,[sp,#0x10]        ;11133
007fe6  dd08              BLE      |L1.32762|
007fe8  f8ddc014          LDR      r12,[sp,#0x14]        ;11133
007fec  458c              CMP      r12,r1                ;11133
007fee  dc57              BGT      |L1.32928|
007ff0  f8ddc010          LDR      r12,[sp,#0x10]        ;11133
007ff4  f1bc0f1e          CMP      r12,#0x1e             ;11133
007ff8  d252              BCS      |L1.32928|
                  |L1.32762|
007ffa  f8dfc1b8          LDR      r12,|L1.33204|
007ffe  2803              CMP      r0,#3                 ;11135
008000  f8dc8154          LDR      r8,[r12,#0x154]       ;11135
008004  f8cd800c          STR      r8,[sp,#0xc]          ;11135
008008  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11135
00800c  f8cdc008          STR      r12,[sp,#8]           ;11135
008010  dd0a              BLE      |L1.32808|
008012  f8ddc00c          LDR      r12,[sp,#0xc]         ;11135
008016  458c              CMP      r12,r1                ;11135
008018  dc42              BGT      |L1.32928|
00801a  f8ddc008          LDR      r12,[sp,#8]           ;11135
00801e  e000              B        |L1.32802|
                  |L1.32800|
008020  e080              B        |L1.33060|
                  |L1.32802|
008022  f1bc0f1e          CMP      r12,#0x1e             ;11135
008026  d23b              BCS      |L1.32928|
                  |L1.32808|
008028  f8df8188          LDR      r8,|L1.33204|
00802c  2804              CMP      r0,#4                 ;11137
00802e  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11137
008032  f8988193          LDRB     r8,[r8,#0x193]        ;11137
008036  f8cd8004          STR      r8,[sp,#4]            ;11137
00803a  dd06              BLE      |L1.32842|
00803c  458c              CMP      r12,r1                ;11137
00803e  dc2f              BGT      |L1.32928|
008040  f8dd8004          LDR      r8,[sp,#4]            ;11137
008044  f1b80f1e          CMP      r8,#0x1e              ;11137
008048  d22a              BCS      |L1.32928|
                  |L1.32842|
00804a  f8df9168          LDR      r9,|L1.33204|
00804e  2805              CMP      r0,#5                 ;11139
008050  f8d9821c          LDR      r8,[r9,#0x21c]        ;11139
008054  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11139
008058  f8cd9000          STR      r9,[sp,#0]            ;11139
00805c  dd06              BLE      |L1.32876|
00805e  4588              CMP      r8,r1                 ;11139
008060  dc1e              BGT      |L1.32928|
008062  f8dd9000          LDR      r9,[sp,#0]            ;11139
008066  f1b90f1e          CMP      r9,#0x1e              ;11139
00806a  d219              BCS      |L1.32928|
                  |L1.32876|
00806c  f8dfa144          LDR      r10,|L1.33204|
008070  2806              CMP      r0,#6                 ;11141
008072  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11141
008076  f8da9280          LDR      r9,[r10,#0x280]       ;11141
00807a  dd04              BLE      |L1.32902|
00807c  4589              CMP      r9,r1                 ;11141
00807e  dc0f              BGT      |L1.32928|
008080  f1be0f1e          CMP      lr,#0x1e              ;11141
008084  d20c              BCS      |L1.32928|
                  |L1.32902|
008086  f8dfb12c          LDR      r11,|L1.33204|
00808a  2807              CMP      r0,#7                 ;11143
00808c  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11143
008090  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11143
008094  dd08              BLE      |L1.32936|
008096  458a              CMP      r10,r1                ;11143
008098  dc02              BGT      |L1.32928|
00809a  f1bb0f1e          CMP      r11,#0x1e             ;11143
00809e  d303              BCC      |L1.32936|
                  |L1.32928|
0080a0  f04f0001          MOV      r0,#1                 ;11146
0080a4  7020              STRB     r0,[r4,#0]            ;11146
                  |L1.32934|
0080a6  e73f              B        |L1.32552|
                  |L1.32936|
0080a8  2b01              CMP      r3,#1                 ;11148
0080aa  d1fc              BNE      |L1.32934|
0080ac  b118              CBZ      r0,|L1.32950|
0080ae  4295              CMP      r5,r2                 ;11151
0080b0  daf9              BGE      |L1.32934|
0080b2  2e0a              CMP      r6,#0xa               ;11151
0080b4  d2f7              BCS      |L1.32934|
                  |L1.32950|
0080b6  2802              CMP      r0,#2                 ;11153
0080b8  db04              BLT      |L1.32964|
0080ba  4297              CMP      r7,r2                 ;11153
0080bc  daf3              BGE      |L1.32934|
0080be  9906              LDR      r1,[sp,#0x18]         ;11153
0080c0  290a              CMP      r1,#0xa               ;11153
0080c2  d2f0              BCS      |L1.32934|
                  |L1.32964|
0080c4  2803              CMP      r0,#3                 ;11155
0080c6  db05              BLT      |L1.32980|
0080c8  9905              LDR      r1,[sp,#0x14]         ;11155
0080ca  4291              CMP      r1,r2                 ;11155
0080cc  daeb              BGE      |L1.32934|
0080ce  9904              LDR      r1,[sp,#0x10]         ;11155
0080d0  290a              CMP      r1,#0xa               ;11155
0080d2  d2e8              BCS      |L1.32934|
                  |L1.32980|
0080d4  2804              CMP      r0,#4                 ;11157
0080d6  db05              BLT      |L1.32996|
0080d8  9903              LDR      r1,[sp,#0xc]          ;11157
0080da  4291              CMP      r1,r2                 ;11157
0080dc  dae3              BGE      |L1.32934|
0080de  9902              LDR      r1,[sp,#8]            ;11157
0080e0  290a              CMP      r1,#0xa               ;11157
0080e2  d2e0              BCS      |L1.32934|
                  |L1.32996|
0080e4  2805              CMP      r0,#5                 ;11159
0080e6  db04              BLT      |L1.33010|
0080e8  4594              CMP      r12,r2                ;11159
0080ea  dadc              BGE      |L1.32934|
0080ec  9901              LDR      r1,[sp,#4]            ;11159
0080ee  290a              CMP      r1,#0xa               ;11159
0080f0  d2d9              BCS      |L1.32934|
                  |L1.33010|
0080f2  2806              CMP      r0,#6                 ;11161
0080f4  db04              BLT      |L1.33024|
0080f6  4590              CMP      r8,r2                 ;11161
0080f8  dad5              BGE      |L1.32934|
0080fa  9900              LDR      r1,[sp,#0]            ;11161
0080fc  290a              CMP      r1,#0xa               ;11161
0080fe  d2d2              BCS      |L1.32934|
                  |L1.33024|
008100  2807              CMP      r0,#7                 ;11163
008102  db04              BLT      |L1.33038|
008104  4591              CMP      r9,r2                 ;11163
008106  dace              BGE      |L1.32934|
008108  f1be0f0a          CMP      lr,#0xa               ;11163
00810c  d2cb              BCS      |L1.32934|
                  |L1.33038|
00810e  2808              CMP      r0,#8                 ;11165
008110  db04              BLT      |L1.33052|
008112  4592              CMP      r10,r2                ;11165
008114  dac7              BGE      |L1.32934|
008116  f1bb0f0a          CMP      r11,#0xa              ;11165
00811a  d2c4              BCS      |L1.32934|
                  |L1.33052|
00811c  f04f0000          MOV      r0,#0                 ;11168
008120  7020              STRB     r0,[r4,#0]            ;11168
                  |L1.33058|
008122  e701              B        |L1.32552|
                  |L1.33060|
008124  482b              LDR      r0,|L1.33236|
008126  4d2c              LDR      r5,|L1.33240|
008128  4e2c              LDR      r6,|L1.33244|
00812a  f9b00000          LDRSH    r0,[r0,#0]            ;11174  ; NUMDT
00812e  f9b55000          LDRSH    r5,[r5,#0]            ;11175
008132  7836              LDRB     r6,[r6,#0]            ;11175
008134  b110              CBZ      r0,|L1.33084|
008136  428d              CMP      r5,r1                 ;11175
008138  dc1d              BGT      |L1.33142|
00813a  b9e6              CBNZ     r6,|L1.33142|
                  |L1.33084|
00813c  4f26              LDR      r7,|L1.33240|
00813e  f8dfc09c          LDR      r12,|L1.33244|
008142  2801              CMP      r0,#1                 ;11177
008144  f9b77002          LDRSH    r7,[r7,#2]            ;11177
008148  f89cc001          LDRB     r12,[r12,#1]          ;11177
00814c  dd04              BLE      |L1.33112|
00814e  428f              CMP      r7,r1                 ;11177
008150  dc11              BGT      |L1.33142|
008152  f1bc0f00          CMP      r12,#0                ;11177
008156  d10e              BNE      |L1.33142|
                  |L1.33112|
008158  f8df807c          LDR      r8,|L1.33240|
00815c  f8df907c          LDR      r9,|L1.33244|
008160  2802              CMP      r0,#2                 ;11179
008162  f9b88004          LDRSH    r8,[r8,#4]            ;11179
008166  f8999002          LDRB     r9,[r9,#2]            ;11179
00816a  dd08              BLE      |L1.33150|
00816c  4588              CMP      r8,r1                 ;11179
00816e  dc02              BGT      |L1.33142|
008170  f1b90f00          CMP      r9,#0                 ;11179
008174  d003              BEQ      |L1.33150|
                  |L1.33142|
008176  f04f0001          MOV      r0,#1                 ;11182
00817a  7020              STRB     r0,[r4,#0]            ;11182
00817c  e6d4              B        |L1.32552|
                  |L1.33150|
00817e  2b01              CMP      r3,#1                 ;11184
008180  d191              BNE      |L1.32934|
008182  b118              CBZ      r0,|L1.33164|
008184  4295              CMP      r5,r2                 ;11187
008186  da8e              BGE      |L1.32934|
008188  2e00              CMP      r6,#0                 ;11187
00818a  d18c              BNE      |L1.32934|
                  |L1.33164|
00818c  2802              CMP      r0,#2                 ;11189
00818e  db04              BLT      |L1.33178|
008190  4297              CMP      r7,r2                 ;11189
008192  da88              BGE      |L1.32934|
008194  f1bc0f00          CMP      r12,#0                ;11189
008198  d185              BNE      |L1.32934|
                  |L1.33178|
00819a  2803              CMP      r0,#3                 ;11191
00819c  db04              BLT      |L1.33192|
00819e  4590              CMP      r8,r2                 ;11191
0081a0  dabf              BGE      |L1.33058|
0081a2  f1b90f00          CMP      r9,#0                 ;11191
0081a6  d1bc              BNE      |L1.33058|
                  |L1.33192|
0081a8  f04f0000          MOV      r0,#0                 ;11194
0081ac  7020              STRB     r0,[r4,#0]            ;11194
0081ae  e6bb              B        |L1.32552|
;;;11200  
                          ENDP

                  |L1.33200|
                          DCD      TVENTMAX
                  |L1.33204|
                          DCD      bps
                  |L1.33208|
                          DCD      NUMIST
                  |L1.33212|
                          DCD      RELEVENTSIGN
                  |L1.33216|
                          DCD      ||area_number.18||
                  |L1.33220|
                          DCD      TVENTON
                  |L1.33224|
                          DCD      TVENTOFF
                  |L1.33228|
                          DCD      bat
                  |L1.33232|
                          DCD      BAT_IS_ON
                  |L1.33236|
                          DCD      NUMDT
                  |L1.33240|
                          DCD      t_ext
                  |L1.33244|
                          DCD      ND_EXT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.11||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.17||, DATA, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.19||, DATA, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.20||, DATA, ALIGN=1

                          EXPORTAS ||area_number.20||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=1

                          EXPORTAS ||area_number.29||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.30||, DATA, ALIGN=1

                          EXPORTAS ||area_number.30||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.35||, DATA, ALIGN=1

                          EXPORTAS ||area_number.35||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.42||, DATA, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.43||, DATA, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.44||, DATA, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=1

                          EXPORTAS ||area_number.46||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.47||, DATA, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.54||, DATA, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=1

                          EXPORTAS ||area_number.56||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.57||, DATA, ALIGN=1

                          EXPORTAS ||area_number.57||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.58||, DATA, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.59||, DATA, ALIGN=1

                          EXPORTAS ||area_number.59||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.61||, DATA, ALIGN=1

                          EXPORTAS ||area_number.61||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "control.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_9601dfb0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REVSH|
#line 130
|__asm___9_control_c_9601dfb0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
