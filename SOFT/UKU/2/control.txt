; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;332    {  
;;;333    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;334    	{
;;;335    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960020          LDRB     r0,[r6,#0x20]         ;333  ; spc_stat
00000c  2802              CMP      r0,#2                 ;333
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;336    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;337    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;338    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;341  ; snmp_bat_status
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;341
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;341  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;341
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;343  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;343  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;343
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;343
000052  f9b01000          LDRSH    r1,[r0,#0]            ;345
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;346
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;345
000062  8021              STRH     r1,[r4,#0]            ;345
000064  07c0              LSLS     r0,r0,#31             ;346
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;348
00006a  2208              MOVS     r2,#8                 ;348
00006c  2105              MOVS     r1,#5                 ;348
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;349  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;349
00007a  8028              STRH     r0,[r5,#0]            ;349
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;354
000082  8021              STRH     r1,[r4,#0]            ;354
000084  07c0              LSLS     r0,r0,#31             ;355
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;357
00008a  2208              MOVS     r2,#8                 ;357
00008c  2105              MOVS     r1,#5                 ;357
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;358  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;358
00009a  8028              STRH     r0,[r5,#0]            ;358
                  |L1.156|
00009c  f8980043          LDRB     r0,[r8,#0x43]         ;362  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;362
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;364  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;364
0000aa  8021              STRH     r1,[r4,#0]            ;364
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;365  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;365
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;368
0000b8  8029              STRH     r1,[r5,#0]            ;368
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;373  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;373
0000c2  8021              STRH     r1,[r4,#0]            ;373
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;374  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;374
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;377
0000d0  8029              STRH     r1,[r5,#0]            ;377
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;381
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;383  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;383
0000dc  8020              STRH     r0,[r4,#0]            ;383
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;384  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;384
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;387
0000ea  8028              STRH     r0,[r5,#0]            ;387
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;392  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;392
0000f4  8020              STRH     r0,[r4,#0]            ;392
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;393  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;393
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;396
000102  8028              STRH     r0,[r5,#0]            ;396
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960020          LDRB     r0,[r6,#0x20]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960021          LDRB     r0,[r6,#0x21]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960020          LDRB     r0,[r6,#0x20]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;405  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;405
0001b6  8020              STRH     r0,[r4,#0]            ;405
0001b8  8828              LDRH     r0,[r5,#0]            ;406  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;406
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;408
0001c0  2208              MOVS     r2,#8                 ;408
0001c2  2105              MOVS     r1,#5                 ;408
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;409  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;409
0001d0  8028              STRH     r0,[r5,#0]            ;409
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;424  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;424
0001da  8020              STRH     r0,[r4,#0]            ;424
0001dc  8828              LDRH     r0,[r5,#0]            ;425  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;425
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;427
0001e4  461a              MOV      r2,r3                 ;427
0001e6  2105              MOVS     r1,#5                 ;427
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;428  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;428
0001f4  8028              STRH     r0,[r5,#0]            ;428
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;462  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;462
000272  8020              STRH     r0,[r4,#0]            ;462
000274  8828              LDRH     r0,[r5,#0]            ;463  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;463
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;465
00027c  2208              MOVS     r2,#8                 ;465
00027e  2105              MOVS     r1,#5                 ;465
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;466  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;466
00028c  8028              STRH     r0,[r5,#0]            ;466
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;577    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;816    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.25||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b81052          LDRSH    r1,[r8,#0x52]         ;582  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;582  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;582
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;582
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;584  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;584
0006e6  8060              STRH     r0,[r4,#2]            ;584
0006e8  8868              LDRH     r0,[r5,#2]            ;585  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;585
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;587
0006f0  2208              MOVS     r2,#8                 ;587
0006f2  2105              MOVS     r1,#5                 ;587
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;588  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;588
000700  8068              STRH     r0,[r5,#2]            ;588
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;593  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;593
00070a  8060              STRH     r0,[r4,#2]            ;593
00070c  8868              LDRH     r0,[r5,#2]            ;594  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;594
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;596
000714  2208              MOVS     r2,#8                 ;596
000716  2105              MOVS     r1,#5                 ;596
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;597  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;597
000724  8068              STRH     r0,[r5,#2]            ;597
                  |L1.1830|
000726  f8980093          LDRB     r0,[r8,#0x93]         ;601  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;601
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;603  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;603
000734  8061              STRH     r1,[r4,#2]            ;603
000736  8829              LDRH     r1,[r5,#0]            ;604  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;604
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;607  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;607
000742  8069              STRH     r1,[r5,#2]            ;607
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;612  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;612
00074c  8061              STRH     r1,[r4,#2]            ;612
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;613  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;613
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;616
00075a  8069              STRH     r1,[r5,#2]            ;616
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;620
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;622  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;622
000766  8060              STRH     r0,[r4,#2]            ;622
000768  f9b50002          LDRSH    r0,[r5,#2]            ;623  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;623
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;626
000774  8068              STRH     r0,[r5,#2]            ;626
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;631  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;631
00077e  8060              STRH     r0,[r4,#2]            ;631
000780  f9b50002          LDRSH    r0,[r5,#2]            ;632  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;632
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;635
00078c  8068              STRH     r0,[r5,#2]            ;635
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;639  ; IKB
000792  f9b80058          LDRSH    r0,[r8,#0x58]         ;639  ; bat
000796  424a              RSBS     r2,r1,#0              ;639
000798  4290              CMP      r0,r2                 ;639
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;639  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;639
0007a2  8060              STRH     r0,[r4,#2]            ;639
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;640
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;640  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;640
0007b0  8060              STRH     r0,[r4,#2]            ;640
                  |L1.1970|
0007b2  f8960020          LDRB     r0,[r6,#0x20]         ;642  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;642
0007b8  d102              BNE      |L1.1984|
0007ba  f8960021          LDRB     r0,[r6,#0x21]         ;642  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;653  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;653
0007c6  8060              STRH     r0,[r4,#2]            ;653
0007c8  8868              LDRH     r0,[r5,#2]            ;654  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;654
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;656
0007d0  2208              MOVS     r2,#8                 ;656
0007d2  2105              MOVS     r1,#5                 ;656
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;657  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;657
0007e0  8068              STRH     r0,[r5,#2]            ;657
                  |L1.2018|
0007e2  f8960020          LDRB     r0,[r6,#0x20]         ;661  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;661
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;672  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;672
0007f0  8060              STRH     r0,[r4,#2]            ;672
0007f2  8868              LDRH     r0,[r5,#2]            ;673  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;673
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;675
0007fa  2208              MOVS     r2,#8                 ;675
0007fc  2105              MOVS     r1,#5                 ;675
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;676  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;676
00080a  8068              STRH     r0,[r5,#2]            ;676
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;680  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;682  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;682
000816  8060              STRH     r0,[r4,#2]            ;682
000818  8868              LDRH     r0,[r5,#2]            ;683  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;683
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;685
000820  2208              MOVS     r2,#8                 ;685
000822  2105              MOVS     r1,#5                 ;685
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;686  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;686
000830  8068              STRH     r0,[r5,#2]            ;686
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;644  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;644
00083c  8060              STRH     r0,[r4,#2]            ;644
00083e  8868              LDRH     r0,[r5,#2]            ;645  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;645
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;647
000846  2208              MOVS     r2,#8                 ;647
000848  2105              MOVS     r1,#5                 ;647
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;648  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;648
000856  8068              STRH     r0,[r5,#2]            ;648
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;663  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;663
000860  8060              STRH     r0,[r4,#2]            ;663
000862  8868              LDRH     r0,[r5,#2]            ;664  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;664
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;666
00086a  2208              MOVS     r2,#8                 ;666
00086c  2105              MOVS     r1,#5                 ;666
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;667  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;667
00087a  8068              STRH     r0,[r5,#2]            ;667
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;691  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;691
000886  8060              STRH     r0,[r4,#2]            ;691
000888  8868              LDRH     r0,[r5,#2]            ;692  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;692
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;694
000890  2208              MOVS     r2,#8                 ;694
000892  2105              MOVS     r1,#5                 ;694
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;695  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;695
0008a0  8068              STRH     r0,[r5,#2]            ;695
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;699  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;699
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;710  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;710
0008b0  8060              STRH     r0,[r4,#2]            ;710
0008b2  8868              LDRH     r0,[r5,#2]            ;711  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;711
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;713
0008ba  2208              MOVS     r2,#8                 ;713
0008bc  2105              MOVS     r1,#5                 ;713
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;714  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;714
0008ca  8068              STRH     r0,[r5,#2]            ;714
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;718  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;720  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;720
0008d6  8060              STRH     r0,[r4,#2]            ;720
0008d8  8868              LDRH     r0,[r5,#2]            ;721  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;721
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;723
0008e0  2208              MOVS     r2,#8                 ;723
0008e2  2105              MOVS     r1,#5                 ;723
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;724  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;724
0008f0  8068              STRH     r0,[r5,#2]            ;724
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;701  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;701
0008fa  8060              STRH     r0,[r4,#2]            ;701
0008fc  8868              LDRH     r0,[r5,#2]            ;702  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;702
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;704
000904  2208              MOVS     r2,#8                 ;704
000906  2105              MOVS     r1,#5                 ;704
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;705  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;705
000914  8068              STRH     r0,[r5,#2]            ;705
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;729  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;729
00091e  8060              STRH     r0,[r4,#2]            ;729
000920  8868              LDRH     r0,[r5,#2]            ;730  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;730
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;732
000928  2208              MOVS     r2,#8                 ;732
00092a  2105              MOVS     r1,#5                 ;732
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;733  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;733
000938  8068              STRH     r0,[r5,#2]            ;733
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;737  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;739  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;739
000944  8060              STRH     r0,[r4,#2]            ;739
000946  8868              LDRH     r0,[r5,#2]            ;740  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;740
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;742
00094e  2208              MOVS     r2,#8                 ;742
000950  2105              MOVS     r1,#5                 ;742
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;743  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;743
00095e  8068              STRH     r0,[r5,#2]            ;743
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;748  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;748
000968  8060              STRH     r0,[r4,#2]            ;748
00096a  8868              LDRH     r0,[r5,#2]            ;749  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;749
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;751
000972  2208              MOVS     r2,#8                 ;751
000974  2105              MOVS     r1,#5                 ;751
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;752  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;752
000982  8068              STRH     r0,[r5,#2]            ;752
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;756  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;758  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;758
00098e  8060              STRH     r0,[r4,#2]            ;758
000990  8868              LDRH     r0,[r5,#2]            ;759  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;759
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;761
000998  2208              MOVS     r2,#8                 ;761
00099a  2105              MOVS     r1,#5                 ;761
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;762  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;762
0009a8  8068              STRH     r0,[r5,#2]            ;762
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;767  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;767
0009b2  8060              STRH     r0,[r4,#2]            ;767
0009b4  8868              LDRH     r0,[r5,#2]            ;768  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;768
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;770
0009bc  2208              MOVS     r2,#8                 ;770
0009be  2105              MOVS     r1,#5                 ;770
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;771  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;771
0009cc  8068              STRH     r0,[r5,#2]            ;771
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;775  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;777  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;777
0009d8  8060              STRH     r0,[r4,#2]            ;777
0009da  8868              LDRH     r0,[r5,#2]            ;778  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;778
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;780
0009e2  2208              MOVS     r2,#8                 ;780
0009e4  2105              MOVS     r1,#5                 ;780
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;781  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;781
0009f2  8068              STRH     r0,[r5,#2]            ;781
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;786  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;786
0009fc  8060              STRH     r0,[r4,#2]            ;786
0009fe  8868              LDRH     r0,[r5,#2]            ;787  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;787
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;789
000a06  2208              MOVS     r2,#8                 ;789
000a08  2105              MOVS     r1,#5                 ;789
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;790  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;790
000a16  8068              STRH     r0,[r5,#2]            ;790
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;794  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;796  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;796
000a22  8060              STRH     r0,[r4,#2]            ;796
000a24  8868              LDRH     r0,[r5,#2]            ;797  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;797
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;799
000a2e  2208              MOVS     r2,#8                 ;799
000a30  2105              MOVS     r1,#5                 ;799
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;800  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;800
000a3e  8068              STRH     r0,[r5,#2]            ;800
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;805  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;805
000a48  8060              STRH     r0,[r4,#2]            ;805
000a4a  8868              LDRH     r0,[r5,#2]            ;806  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;806
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;808
000a52  2208              MOVS     r2,#8                 ;808
000a54  2105              MOVS     r1,#5                 ;808
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;809  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;809
000a62  8068              STRH     r0,[r5,#2]            ;809
000a64  e4c7              B        |L1.1014|
;;;942    
                          ENDP

                  ke_start PROC
;;;945    //-----------------------------------------------
;;;946    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;947    {          
000a6a  4606              MOV      r6,r0
;;;948    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;949    /*
;;;950    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;951    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;952    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;953    #endif
;;;954    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;955    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;956    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;957    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;958    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;959    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;960    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;961    else */
;;;962    	{
;;;963    
;;;964    	ke_start_stat=kssYES;
000a72  f1050508          ADD      r5,r5,#8
000a76  f04f0064          MOV      r0,#0x64
000a7a  7728              STRB     r0,[r5,#0x1c]
;;;965    
;;;966    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  762f              STRB     r7,[r5,#0x18]
;;;967    	__ee_spc_stat=spcKE;
000a82  f8a57066          STRH     r7,[r5,#0x66]
;;;968    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;969    	
;;;970    	spc_bat=0;
000a90  766c              STRB     r4,[r5,#0x19]
;;;971    	__ee_spc_bat=0;
000a92  f8a54068          STRH     r4,[r5,#0x68]
;;;972    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;973    
;;;974    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c8401c          STR      r4,[r8,#0x1c]  ; bat
;;;975    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;976    
;;;977    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404e          STRH     r4,[r8,#0x4e]
;;;978    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;979    
;;;980    	
;;;981    	spc_phase=0;
000ac2  76ac              STRB     r4,[r5,#0x1a]
;;;982    	__ee_spc_phase=0;
000ac4  f8a5406a          STRH     r4,[r5,#0x6a]
;;;983    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.25||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;984    
;;;985    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;986    
;;;987    		{					
;;;988    		signed short temp_temp;
;;;989    		signed char temp;
;;;990    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060086          ADD      r0,r6,r6,LSL #2
000d98  eb081100          ADD      r1,r8,r0,LSL #4
000d9c  48ff              LDR      r0,|L1.4508|
000d9e  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da0  f1000001          ADD      r0,r0,#1
000da4  f0000007          AND      r0,r0,#7
000da8  eb010040          ADD      r0,r1,r0,LSL #1
000dac  8c80              LDRH     r0,[r0,#0x24]
000dae  9001              STR      r0,[sp,#4]
;;;991    		    
;;;992    		temp=LPC_RTC->YEAR;
000db0  4efb              LDR      r6,|L1.4512|
000db2  8bb0              LDRH     r0,[r6,#0x1c]
000db4  9000              STR      r0,[sp,#0]
;;;993    		gran_char(&temp,1,99);
000db6  f04f0263          MOV      r2,#0x63
000dba  f04f0101          MOV      r1,#1
000dbe  4668              MOV      r0,sp
000dc0  f7fffffe          BL       gran_char
;;;994    		*((char*)(&(ke_date[0])))=temp;
000dc4  4cf7              LDR      r4,|L1.4516|
000dc6  f89d0000          LDRB     r0,[sp,#0]
000dca  7020              STRB     r0,[r4,#0]
;;;995    			
;;;996    		temp=LPC_RTC->MONTH;
000dcc  7e30              LDRB     r0,[r6,#0x18]
000dce  9000              STR      r0,[sp,#0]
;;;997    		gran_char(&temp,1,12);
000dd0  220c              MOVS     r2,#0xc
000dd2  2101              MOVS     r1,#1
000dd4  4668              MOV      r0,sp
000dd6  f7fffffe          BL       gran_char
;;;998    		*(((char*)(&(ke_date[0])))+1)=temp;
000dda  f89d0000          LDRB     r0,[sp,#0]
000dde  7060              STRB     r0,[r4,#1]
;;;999    		
;;;1000   		temp=LPC_RTC->DOM;
000de0  7b30              LDRB     r0,[r6,#0xc]
000de2  9000              STR      r0,[sp,#0]
;;;1001   		gran_char(&temp,1,31);
000de4  221f              MOVS     r2,#0x1f
000de6  2101              MOVS     r1,#1
000de8  4668              MOV      r0,sp
000dea  f7fffffe          BL       gran_char
;;;1002   		*(((char*)(&(ke_date[0])))+2)=temp;			
000dee  f89d0000          LDRB     r0,[sp,#0]
000df2  70a0              STRB     r0,[r4,#2]
;;;1003   				
;;;1004   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df4  f89d0004          LDRB     r0,[sp,#4]
000df8  70e0              STRB     r0,[r4,#3]
;;;1005   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfa  f24020a2          MOV      r0,#0x2a2
000dfe  6821              LDR      r1,[r4,#0]  ; ke_date
000e00  f7fffffe          BL       lc640_write_long
;;;1006   
;;;1007   		temp=LPC_RTC->HOUR;
000e04  7a30              LDRB     r0,[r6,#8]
000e06  9000              STR      r0,[sp,#0]
;;;1008   		gran_char(&temp,0,23);
000e08  2217              MOVS     r2,#0x17
000e0a  2100              MOVS     r1,#0
000e0c  4668              MOV      r0,sp
000e0e  f7fffffe          BL       gran_char
;;;1009   		*((char*)(&(ke_date[1])))=temp;
000e12  f89d0000          LDRB     r0,[sp,#0]
000e16  7120              STRB     r0,[r4,#4]
;;;1010                  
;;;1011   		temp=LPC_RTC->MIN;
000e18  7930              LDRB     r0,[r6,#4]
000e1a  9000              STR      r0,[sp,#0]
;;;1012   		gran_char(&temp,0,59);
000e1c  223b              MOVS     r2,#0x3b
000e1e  2100              MOVS     r1,#0
000e20  4668              MOV      r0,sp
000e22  f7fffffe          BL       gran_char
;;;1013   		*(((char*)(&(ke_date[1])))+1)=temp;
000e26  f89d0000          LDRB     r0,[sp,#0]
000e2a  7160              STRB     r0,[r4,#5]
;;;1014   	          
;;;1015   		temp=LPC_RTC->SEC;
000e2c  7830              LDRB     r0,[r6,#0]
000e2e  9000              STR      r0,[sp,#0]
;;;1016   		gran_char(&temp,0,59);
000e30  223b              MOVS     r2,#0x3b
000e32  2100              MOVS     r1,#0
000e34  4668              MOV      r0,sp
000e36  f7fffffe          BL       gran_char
;;;1017   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3a  f89d0000          LDRB     r0,[sp,#0]
000e3e  71a0              STRB     r0,[r4,#6]
;;;1018   			
;;;1019   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e40  f89d0005          LDRB     r0,[sp,#5]
000e44  71e0              STRB     r0,[r4,#7]
;;;1020   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e46  f24020a6          MOV      r0,#0x2a6
000e4a  6861              LDR      r1,[r4,#4]  ; ke_date
000e4c  f7fffffe          BL       lc640_write_long
;;;1021   		}
;;;1022   	bat_hndl_zvu_ke_init=1;
000e50  706f              STRB     r7,[r5,#1]
;;;1023   	}
;;;1024   }
000e52  e8bd81fc          POP      {r2-r8,pc}
;;;1025   #endif
                          ENDP

                  ke_drv PROC
;;;1107   //-----------------------------------------------
;;;1108   void ke_drv(void)
000e56  e92d4ff0          PUSH     {r4-r11,lr}
;;;1109   {
000e5a  b087              SUB      sp,sp,#0x1c
;;;1110   static char ke_drv_cnt_10s;
;;;1111   static short i_bat_buff[6];
;;;1112   static char i_bat_buff_cnt;
;;;1113   short ke_drv_i_temp;
;;;1114   short ke_drv_i_avg;
;;;1115   char i;
;;;1116   short ke_drv_i_temp_temp;
;;;1117   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e5c  f04f021c          MOV      r2,#0x1c
000e60  49d1              LDR      r1,|L1.4520|
000e62  4668              MOV      r0,sp
000e64  f7fffffe          BL       __aeabi_memcpy4
;;;1118   
;;;1119   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e68  4ece              LDR      r6,|L1.4516|
;;;1120   	{
;;;1121   	
;;;1122   	i_bat_buff[0]=0;
000e6a  4ad0              LDR      r2,|L1.4524|
000e6c  3efc              SUBS     r6,r6,#0xfc           ;1119
000e6e  2400              MOVS     r4,#0
000e70  7a70              LDRB     r0,[r6,#9]            ;1119  ; bat_hndl_zvu_ke_init
000e72  2801              CMP      r0,#1                 ;1119
000e74  d102              BNE      |L1.3708|
000e76  8014              STRH     r4,[r2,#0]
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff[0]=0;
;;;1125   	i_bat_buff[0]=0;
;;;1126   	i_bat_buff[0]=0;
;;;1127   	i_bat_buff[0]=0;
;;;1128   	i_bat_buff_cnt=0;
000e78  72f4              STRB     r4,[r6,#0xb]
;;;1129   
;;;1130   	bat_hndl_zvu_ke_init=0;
000e7a  7274              STRB     r4,[r6,#9]
                  |L1.3708|
;;;1131   	}
;;;1132   
;;;1133   
;;;1134   
;;;1135   
;;;1136   if(spc_stat==spcKE)
000e7c  f8960020          LDRB     r0,[r6,#0x20]  ; spc_stat
000e80  2801              CMP      r0,#1
000e82  d17e              BNE      |L1.3970|
;;;1137   	{
;;;1138   	ke_drv_i_temp=-Ib_ips_termokompensat[0]/10;
000e84  48ca              LDR      r0,|L1.4528|
000e86  f04f030a          MOV      r3,#0xa
000e8a  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e8e  f1c00000          RSB      r0,r0,#0
000e92  fb90f0f3          SDIV     r0,r0,r3
000e96  b200              SXTH     r0,r0
;;;1139   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e98  2800              CMP      r0,#0
000e9a  da01              BGE      |L1.3744|
000e9c  f04f0000          MOV      r0,#0
                  |L1.3744|
;;;1140   
;;;1141   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000ea0  f8df8310          LDR      r8,|L1.4532|
000ea4  7ab1              LDRB     r1,[r6,#0xa]  ; ke_drv_cnt_10s
000ea6  f8c8100c          STR      r1,[r8,#0xc]  ; bat_hndl_plazma
;;;1142   	if(++ke_drv_cnt_10s>10)
000eaa  1c49              ADDS     r1,r1,#1
;;;1143   		{
;;;1144   		ke_drv_cnt_10s=0;
;;;1145   
;;;1146   		i_bat_buff_cnt++;
;;;1147   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1148   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1149   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1150   		ke_drv_i_temp_temp=0;
;;;1151   		for(i=0;i<6;i++)
;;;1152   			{
;;;1153   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1154   			}
;;;1155   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1156   
;;;1157   		I_from_t_table[0][0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1158   		I_from_t_table[0][1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1159   		I_from_t_table[0][2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1160   		I_from_t_table[0][3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1161   		I_from_t_table[0][4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1162   		I_from_t_table[0][5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1163   		I_from_t_table[0][6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1164   		
;;;1165   		U_end_from_i_table[0][0]=BAT_U_END_1_6;		//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1166   		U_end_from_i_table[0][1]=BAT_U_END_1_2;		//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1167   		U_end_from_i_table[0][2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1168   		U_end_from_i_table[0][3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1169   		U_end_from_i_table[0][4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1170   		U_end_from_i_table[0][5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1171   		U_end_from_i_table[0][6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1172   
;;;1173   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1174   		bat_hndl_i_temp=ke_drv_i_avg;
;;;1175   		
;;;1176   		for(i=0;i<7;i++)
;;;1177   			{
;;;1178   			if(bat_hndl_i_temp>=I_from_t_table[0][i])
;;;1179   				{
;;;1180   				break;
;;;1181   				}
;;;1182   			}
;;;1183   
;;;1184   		bat_hndl_plazma[0]=i;
;;;1185   
;;;1186   		 if(i==0) bat_hndl_t_razr_ke[0]=bat_hndl_t_razr_const[0];
;;;1187   		 else if((i>=1)&&(i<7))
;;;1188   		 	{
;;;1189   			short i1,i2;
;;;1190   			i1=I_from_t_table[0][i-1]-bat_hndl_i_temp;
;;;1191   			i2=I_from_t_table[0][i-1]-I_from_t_table[0][i];
;;;1192   			bat_hndl_t_razr_ke[0]=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;1193   			bat_hndl_t_razr_ke[0]*=(long)i1;
;;;1194   			bat_hndl_t_razr_ke[0]/=(long)i2;
;;;1195   			bat_hndl_t_razr_ke[0]+=bat_hndl_t_razr_const[i-1];
;;;1196   			}
;;;1197   		else if(i>=7)
;;;1198   			{
;;;1199   			bat_hndl_t_razr_ke[0]=bat_hndl_t_razr_const[6];
;;;1200   			}
;;;1201   
;;;1202   		 if(i==0) bat_hndl_u_end[0]=U_end_from_i_table[0][0];
000eac  4dbd              LDR      r5,|L1.4516|
000eae  b2c9              UXTB     r1,r1                 ;1142
000eb0  3d20              SUBS     r5,r5,#0x20
000eb2  72b1              STRB     r1,[r6,#0xa]          ;1142
000eb4  290a              CMP      r1,#0xa               ;1142
000eb6  d965              BLS      |L1.3972|
000eb8  72b4              STRB     r4,[r6,#0xa]          ;1144
000eba  7af1              LDRB     r1,[r6,#0xb]          ;1146  ; i_bat_buff_cnt
000ebc  f1010101          ADD      r1,r1,#1              ;1146
000ec0  b2c9              UXTB     r1,r1                 ;1146
000ec2  72f1              STRB     r1,[r6,#0xb]          ;1146
000ec4  2906              CMP      r1,#6                 ;1147
000ec6  d300              BCC      |L1.3786|
000ec8  72f4              STRB     r4,[r6,#0xb]          ;1147
                  |L1.3786|
000eca  7af1              LDRB     r1,[r6,#0xb]          ;1148  ; i_bat_buff_cnt
000ecc  f8c81008          STR      r1,[r8,#8]            ;1148  ; bat_hndl_plazma
000ed0  f8220011          STRH     r0,[r2,r1,LSL #1]     ;1149
000ed4  f04f0100          MOV      r1,#0                 ;1150
000ed8  4608              MOV      r0,r1                 ;1151
                  |L1.3802|
000eda  f8327010          LDRH     r7,[r2,r0,LSL #1]     ;1153
000ede  4439              ADD      r1,r1,r7              ;1153
000ee0  b209              SXTH     r1,r1                 ;1153
000ee2  f1000001          ADD      r0,r0,#1              ;1151
000ee6  b2c0              UXTB     r0,r0                 ;1151
000ee8  2806              CMP      r0,#6                 ;1151
000eea  d3f6              BCC      |L1.3802|
000eec  f04f0006          MOV      r0,#6                 ;1155
000ef0  fb91f0f0          SDIV     r0,r1,r0              ;1155
000ef4  b207              SXTH     r7,r0                 ;1155
000ef6  48b0              LDR      r0,|L1.4536|
000ef8  f8dfc2b8          LDR      r12,|L1.4532|
000efc  8800              LDRH     r0,[r0,#0]            ;1157  ; BAT_C_POINT_1_6
000efe  f1ac0c38          SUB      r12,r12,#0x38         ;1157
000f02  eb000040          ADD      r0,r0,r0,LSL #1       ;1157
000f06  ea4f0040          LSL      r0,r0,#1              ;1157
000f0a  f8ac0000          STRH     r0,[r12,#0]           ;1157
000f0e  48ab              LDR      r0,|L1.4540|
000f10  8800              LDRH     r0,[r0,#0]            ;1158  ; BAT_C_POINT_1_2
000f12  ea4f0040          LSL      r0,r0,#1              ;1158
000f16  f8ac0002          STRH     r0,[r12,#2]           ;1158
000f1a  48a9              LDR      r0,|L1.4544|
000f1c  8800              LDRH     r0,[r0,#0]            ;1159  ; BAT_C_POINT_1
000f1e  f8ac0004          STRH     r0,[r12,#4]           ;1159
000f22  48a8              LDR      r0,|L1.4548|
000f24  f04f0103          MOV      r1,#3                 ;1160
000f28  f9b00000          LDRSH    r0,[r0,#0]            ;1160  ; BAT_C_POINT_3
000f2c  fb90f0f1          SDIV     r0,r0,r1              ;1160
000f30  f8ac0006          STRH     r0,[r12,#6]           ;1160
000f34  48a4              LDR      r0,|L1.4552|
000f36  f04f0105          MOV      r1,#5                 ;1161
000f3a  f9b00000          LDRSH    r0,[r0,#0]            ;1161  ; BAT_C_POINT_5
000f3e  fb90f0f1          SDIV     r0,r0,r1              ;1161
000f42  f8ac0008          STRH     r0,[r12,#8]           ;1161
000f46  48a1              LDR      r0,|L1.4556|
000f48  f9b00000          LDRSH    r0,[r0,#0]            ;1162  ; BAT_C_POINT_10
000f4c  fb90f0f3          SDIV     r0,r0,r3              ;1162
000f50  f8ac000a          STRH     r0,[r12,#0xa]         ;1162
000f54  489e              LDR      r0,|L1.4560|
000f56  f04f0114          MOV      r1,#0x14              ;1163
000f5a  f9b00000          LDRSH    r0,[r0,#0]            ;1163  ; BAT_C_POINT_20
000f5e  fb90f0f1          SDIV     r0,r0,r1              ;1163
000f62  f8ac000c          STRH     r0,[r12,#0xc]         ;1163
000f66  489b              LDR      r0,|L1.4564|
000f68  f10c0a1c          ADD      r10,r12,#0x1c         ;1165
000f6c  f9b02000          LDRSH    r2,[r0,#0]            ;1165  ; BAT_U_END_1_6
000f70  f8aa2000          STRH     r2,[r10,#0]           ;1165
000f74  4898              LDR      r0,|L1.4568|
000f76  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_1_2
000f78  f8aa0002          STRH     r0,[r10,#2]           ;1166
000f7c  4897              LDR      r0,|L1.4572|
000f7e  8800              LDRH     r0,[r0,#0]            ;1167  ; BAT_U_END_1
000f80  e001              B        |L1.3974|
                  |L1.3970|
000f82  e0f4              B        |L1.4462|
                  |L1.3972|
000f84  e06d              B        |L1.4194|
                  |L1.3974|
000f86  f8aa0004          STRH     r0,[r10,#4]           ;1167
000f8a  4895              LDR      r0,|L1.4576|
000f8c  8800              LDRH     r0,[r0,#0]            ;1168  ; BAT_U_END_3
000f8e  f8aa0006          STRH     r0,[r10,#6]           ;1168
000f92  4894              LDR      r0,|L1.4580|
000f94  8800              LDRH     r0,[r0,#0]            ;1169  ; BAT_U_END_5
000f96  f8aa0008          STRH     r0,[r10,#8]           ;1169
000f9a  4893              LDR      r0,|L1.4584|
000f9c  8800              LDRH     r0,[r0,#0]            ;1170  ; BAT_U_END_10
000f9e  f8aa000a          STRH     r0,[r10,#0xa]         ;1170
000fa2  4892              LDR      r0,|L1.4588|
000fa4  f9b03000          LDRSH    r3,[r0,#0]            ;1171  ; BAT_U_END_20
000fa8  f8aa300c          STRH     r3,[r10,#0xc]         ;1171
000fac  f8c87004          STR      r7,[r8,#4]            ;1173  ; bat_hndl_plazma
000fb0  487c              LDR      r0,|L1.4516|
000fb2  f1a0007c          SUB      r0,r0,#0x7c           ;1174
000fb6  8087              STRH     r7,[r0,#4]            ;1174
000fb8  f04f0000          MOV      r0,#0                 ;1176
                  |L1.4028|
000fbc  f93c1010          LDRSH    r1,[r12,r0,LSL #1]    ;1178
000fc0  42b9              CMP      r1,r7                 ;1178
000fc2  dd04              BLE      |L1.4046|
000fc4  f1000001          ADD      r0,r0,#1              ;1176
000fc8  b2c0              UXTB     r0,r0                 ;1176
000fca  2807              CMP      r0,#7                 ;1176
000fcc  d3f6              BCC      |L1.4028|
                  |L1.4046|
000fce  f8c80000          STR      r0,[r8,#0]            ;1184  ; bat_hndl_plazma
000fd2  4974              LDR      r1,|L1.4516|
000fd4  46eb              MOV      r11,sp                ;1117
000fd6  3110              ADDS     r1,r1,#0x10           ;1186
000fd8  b1e0              CBZ      r0,|L1.4116|
000fda  f1a00801          SUB      r8,r0,#1              ;1187
000fde  f1b80f06          CMP      r8,#6                 ;1187
000fe2  d21a              BCS      |L1.4122|
000fe4  f83c9018          LDRH     r9,[r12,r8,LSL #1]    ;1190
000fe8  eba90707          SUB      r7,r9,r7              ;1190
000fec  b23f              SXTH     r7,r7                 ;1190
000fee  f83cc010          LDRH     r12,[r12,r0,LSL #1]   ;1191
000ff2  eba90c0c          SUB      r12,r9,r12            ;1191
000ff6  fa0ffc8c          SXTH     r12,r12               ;1191
000ffa  f85b9020          LDR      r9,[r11,r0,LSL #2]    ;1192
000ffe  f85b8028          LDR      r8,[r11,r8,LSL #2]    ;1192
001002  eba90908          SUB      r9,r9,r8              ;1192
001006  fb09f907          MUL      r9,r9,r7              ;1193
00100a  fb99f7fc          SDIV     r7,r9,r12             ;1194
00100e  4447              ADD      r7,r7,r8              ;1195
001010  600f              STR      r7,[r1,#0]            ;1195  ; bat_hndl_t_razr_ke
001012  e006              B        |L1.4130|
                  |L1.4116|
001014  9f00              LDR      r7,[sp,#0]            ;1186
001016  600f              STR      r7,[r1,#0]            ;1186  ; bat_hndl_t_razr_ke
001018  e003              B        |L1.4130|
                  |L1.4122|
00101a  2807              CMP      r0,#7                 ;1197
00101c  d301              BCC      |L1.4130|
00101e  9f06              LDR      r7,[sp,#0x18]         ;1199
001020  600f              STR      r7,[r1,#0]            ;1199  ; bat_hndl_t_razr_ke
                  |L1.4130|
001022  b1c8              CBZ      r0,|L1.4184|
;;;1203   		 else if((i>=1)&&(i<7))
001024  1e42              SUBS     r2,r0,#1
001026  2a06              CMP      r2,#6
001028  d218              BCS      |L1.4188|
;;;1204   		 	{
;;;1205   			long u1,tempL;
;;;1206   
;;;1207   			tempL=(long)U_end_from_i_table[0][i]-(long)U_end_from_i_table[0][i-1];
00102a  f93a7010          LDRSH    r7,[r10,r0,LSL #1]
00102e  f93a3012          LDRSH    r3,[r10,r2,LSL #1]
001032  eba70703          SUB      r7,r7,r3
;;;1208   			u1=bat_hndl_t_razr_ke[0]-bat_hndl_t_razr_const[i-1];
001036  f8d1c000          LDR      r12,[r1,#0]  ; bat_hndl_t_razr_ke
00103a  f85b1022          LDR      r1,[r11,r2,LSL #2]
00103e  ebac0201          SUB      r2,r12,r1
;;;1209   			tempL*=u1;
001042  fb07f702          MUL      r7,r7,r2
;;;1210   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
001046  f85b0020          LDR      r0,[r11,r0,LSL #2]
00104a  eba00001          SUB      r0,r0,r1
;;;1211   			tempL/=u1;
00104e  fb97f0f0          SDIV     r0,r7,r0
;;;1212   			tempL+=(long)U_end_from_i_table[0][i-1];
001052  4418              ADD      r0,r0,r3
;;;1213   			bat_hndl_u_end[0]=(short)tempL;
001054  8028              STRH     r0,[r5,#0]
;;;1214   			}
001056  e004              B        |L1.4194|
                  |L1.4184|
001058  802a              STRH     r2,[r5,#0]            ;1202
00105a  e002              B        |L1.4194|
                  |L1.4188|
;;;1215   		else if(i>=7)
00105c  2807              CMP      r0,#7
00105e  d300              BCC      |L1.4194|
;;;1216   			{
;;;1217   			bat_hndl_u_end[0]=U_end_from_i_table[0][6];
001060  802b              STRH     r3,[r5,#0]
                  |L1.4194|
;;;1218   			}
;;;1219   
;;;1220   		}
;;;1221   
;;;1222   
;;;1223   
;;;1224   	if(spc_phase==0)
001062  f8960022          LDRB     r0,[r6,#0x22]  ; spc_phase
;;;1225   		{
;;;1226   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1227   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1228   
;;;1229   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1230   	    	
;;;1231   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1232   			{
;;;1233   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1234   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001066  4f62              LDR      r7,|L1.4592|
;;;1235   			}
;;;1236   
;;;1237   		bat[0]._time_min_cnt_ke++;
;;;1238   		if(bat[0]._time_min_cnt_ke>=60)
;;;1239   			{
;;;1240   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
001068  f44f78e3          MOV      r8,#0x1c6
00106c  bbd8              CBNZ     r0,|L1.4326|
00106e  2314              MOVS     r3,#0x14              ;1227
001070  f04f32ff          MOV      r2,#0xffffffff        ;1227
001074  21ce              MOVS     r1,#0xce              ;1227
001076  20cd              MOVS     r0,#0xcd              ;1227
001078  f7fffffe          BL       mess_send
00107c  f8960021          LDRB     r0,[r6,#0x21]         ;1229  ; spc_bat
001080  f8df9170          LDR      r9,|L1.4596|
001084  eb000080          ADD      r0,r0,r0,LSL #2       ;1229
001088  eb091000          ADD      r0,r9,r0,LSL #4       ;1229
00108c  f9b00008          LDRSH    r0,[r0,#8]            ;1229
001090  f7fffffe          BL       abs
001094  f8d9101c          LDR      r1,[r9,#0x1c]         ;1229  ; bat
001098  4401              ADD      r1,r1,r0              ;1229
00109a  f8c9101c          STR      r1,[r9,#0x1c]         ;1229  ; bat
00109e  f64840a0          MOV      r0,#0x8ca0            ;1231
0010a2  4281              CMP      r1,r0                 ;1231
0010a4  db0c              BLT      |L1.4288|
0010a6  eba10100          SUB      r1,r1,r0              ;1233
0010aa  f8c9101c          STR      r1,[r9,#0x1c]         ;1233  ; bat
0010ae  8838              LDRH     r0,[r7,#0]            ;1234  ; ADR_EE_BAT_ZAR_CNT_KE
0010b0  f7fffffe          BL       lc640_read_int
0010b4  1c40              ADDS     r0,r0,#1              ;1234
0010b6  b201              SXTH     r1,r0                 ;1234
0010b8  f9b70000          LDRSH    r0,[r7,#0]            ;1234  ; ADR_EE_BAT_ZAR_CNT_KE
0010bc  f7fffffe          BL       lc640_write_int
                  |L1.4288|
0010c0  f8b9004e          LDRH     r0,[r9,#0x4e]         ;1237  ; bat
0010c4  f1000001          ADD      r0,r0,#1              ;1237
0010c8  b281              UXTH     r1,r0                 ;1237
0010ca  f8a9104e          STRH     r1,[r9,#0x4e]         ;1237
0010ce  293c              CMP      r1,#0x3c              ;1238
0010d0  d309              BCC      |L1.4326|
0010d2  4640              MOV      r0,r8
0010d4  f7fffffe          BL       lc640_read_int
0010d8  1c40              ADDS     r0,r0,#1
0010da  b201              SXTH     r1,r0
0010dc  4640              MOV      r0,r8
0010de  f7fffffe          BL       lc640_write_int
;;;1241   			bat[0]._time_min_cnt_ke=0;
0010e2  f8a9404e          STRH     r4,[r9,#0x4e]
                  |L1.4326|
;;;1242   			}
;;;1243   		}
;;;1244   
;;;1245   	else if(spc_phase==1)
;;;1246   		{
;;;1247   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1248   		}
;;;1249   
;;;1250   	if(out_U<bat_hndl_u_end[0])
0010e6  4944              LDR      r1,|L1.4600|
0010e8  f9b50000          LDRSH    r0,[r5,#0]  ; bat_hndl_u_end
0010ec  f9b11000          LDRSH    r1,[r1,#0]  ; out_U
0010f0  4288              CMP      r0,r1
0010f2  dd3a              BLE      |L1.4458|
;;;1251   		{
;;;1252   		cnt_end_ke++;
0010f4  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
0010f8  f1000001          ADD      r0,r0,#1
0010fc  b201              SXTH     r1,r0
0010fe  f8a6106a          STRH     r1,[r6,#0x6a]
;;;1253   		if(cnt_end_ke>=30)
001102  291e              CMP      r1,#0x1e
001104  db33              BLT      |L1.4462|
;;;1254   			{
;;;1255   			
;;;1256   			if((spc_stat==spcKE)&&(spc_phase==0))
001106  f8960020          LDRB     r0,[r6,#0x20]  ; spc_stat
00110a  2801              CMP      r0,#1
00110c  d121              BNE      |L1.4434|
00110e  f8960022          LDRB     r0,[r6,#0x22]  ; spc_phase
001112  b9f0              CBNZ     r0,|L1.4434|
;;;1257   				{
;;;1258   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
001114  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001116  f7fffffe          BL       lc640_read_int
00111a  b201              SXTH     r1,r0
00111c  4837              LDR      r0,|L1.4604|
00111e  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001122  f7fffffe          BL       lc640_write_int
;;;1259   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
001126  4640              MOV      r0,r8
001128  f7fffffe          BL       lc640_read_int
00112c  b285              UXTH     r5,r0
00112e  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001130  f7fffffe          BL       lc640_read_int
001134  b281              UXTH     r1,r0
001136  462a              MOV      r2,r5
001138  2000              MOVS     r0,#0
00113a  f7fffffe          BL       ke_zvu_mem_hndl
;;;1260   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
00113e  4830              LDR      r0,|L1.4608|
001140  2100              MOVS     r1,#0
001142  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001146  f7fffffe          BL       lc640_write_int
;;;1261   				cntrl_stat=50;
00114a  f04f0032          MOV      r0,#0x32
00114e  8630              STRH     r0,[r6,#0x30]
;;;1262   				cntrl_stat_old=50;
001150  8670              STRH     r0,[r6,#0x32]
                  |L1.4434|
;;;1263   				}
;;;1264   
;;;1265   			spc_stat=spcOFF;
001152  f8864020          STRB     r4,[r6,#0x20]
;;;1266   			__ee_spc_stat=spcOFF;
001156  f8a6406e          STRH     r4,[r6,#0x6e]
;;;1267   			lc640_write_int(EE_SPC_STAT,spcOFF);
00115a  b007              ADD      sp,sp,#0x1c
00115c  2100              MOVS     r1,#0
00115e  e8bd4ff0          POP      {r4-r11,lr}
001162  f240209a          MOV      r0,#0x29a
001166  f7ffbffe          B.W      lc640_write_int
                  |L1.4458|
;;;1268   
;;;1269   			}
;;;1270   		}
;;;1271   	else cnt_end_ke=0;
00116a  f8a6406a          STRH     r4,[r6,#0x6a]
                  |L1.4462|
;;;1272   
;;;1273   	}
;;;1274   			
;;;1275   }
00116e  b007              ADD      sp,sp,#0x1c
001170  e8bd8ff0          POP      {r4-r11,pc}
;;;1276   #endif
                          ENDP

                  vz_start PROC
;;;1346   //-----------------------------------------------
;;;1347   char vz_start(char hour)
001174  b570              PUSH     {r4-r6,lr}
;;;1348   {          
001176  4605              MOV      r5,r0
;;;1349   char out;
;;;1350   out=0;
001178  f04f0600          MOV      r6,#0
;;;1351   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00117c  4c09              LDR      r4,|L1.4516|
00117e  f1a404fc          SUB      r4,r4,#0xfc
001182  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
001186  b940              CBNZ     r0,|L1.4506|
001188  481e              LDR      r0,|L1.4612|
00118a  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
00118c  2801              CMP      r0,#1
00118e  d068              BEQ      |L1.4706|
;;;1352   	{
;;;1353   	spc_stat=spcVZ;
001190  f04f0102          MOV      r1,#2
001194  f1040430          ADD      r4,r4,#0x30
001198  e036              B        |L1.4616|
                  |L1.4506|
00119a  e062              B        |L1.4706|
                  |L1.4508|
                          DCD      bat_u_old_cnt
                  |L1.4512|
                          DCD      0x40024020
                  |L1.4516|
                          DCD      ||area_number.25||+0xfc
                  |L1.4520|
                          DCD      ||area_number.19||+0x4
                  |L1.4524|
                          DCD      ||.bss||
                  |L1.4528|
                          DCD      Ib_ips_termokompensat
                  |L1.4532|
                          DCD      ||.bss||+0x484
                  |L1.4536|
                          DCD      BAT_C_POINT_1_6
                  |L1.4540|
                          DCD      BAT_C_POINT_1_2
                  |L1.4544|
                          DCD      BAT_C_POINT_1
                  |L1.4548|
                          DCD      BAT_C_POINT_3
                  |L1.4552|
                          DCD      BAT_C_POINT_5
                  |L1.4556|
                          DCD      BAT_C_POINT_10
                  |L1.4560|
                          DCD      BAT_C_POINT_20
                  |L1.4564|
                          DCD      BAT_U_END_1_6
                  |L1.4568|
                          DCD      BAT_U_END_1_2
                  |L1.4572|
                          DCD      BAT_U_END_1
                  |L1.4576|
                          DCD      BAT_U_END_3
                  |L1.4580|
                          DCD      BAT_U_END_5
                  |L1.4584|
                          DCD      BAT_U_END_10
                  |L1.4588|
                          DCD      BAT_U_END_20
                  |L1.4592|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4596|
                          DCD      bat
                  |L1.4600|
                          DCD      out_U
                  |L1.4604|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4608|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4612|
                          DCD      speedChrgBlckStat
                  |L1.4616|
001208  f8041c10          STRB     r1,[r4,#-0x10]
;;;1354   	__ee_spc_stat=spcVZ; 
00120c  87e1              STRH     r1,[r4,#0x3e]
;;;1355   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
00120e  f240209a          MOV      r0,#0x29a
001212  f7fffffe          BL       lc640_write_int
;;;1356   	vz_cnt_h=hour;
001216  86e5              STRH     r5,[r4,#0x36]
;;;1357   	__ee_vz_cnt=hour*60;
001218  ebc51005          RSB      r0,r5,r5,LSL #4
00121c  ea4f0080          LSL      r0,r0,#2
001220  87a0              STRH     r0,[r4,#0x3c]
001222  f1a40430          SUB      r4,r4,#0x30
;;;1358   	if(hour==0)__ee_vz_cnt=30;
001226  b91d              CBNZ     r5,|L1.4656|
001228  f04f001e          MOV      r0,#0x1e
00122c  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.4656|
;;;1359   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001230  f1040462          ADD      r4,r4,#0x62
001234  f44f7027          MOV      r0,#0x29c
001238  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00123c  f7fffffe          BL       lc640_write_int
;;;1360   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
001240  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001244  f44f702a          MOV      r0,#0x2a8
001248  f7fffffe          BL       lc640_write_int
;;;1361   	vz_cnt_h_=0;
00124c  f04f0000          MOV      r0,#0
001250  80e0              STRH     r0,[r4,#6]
;;;1362   	vz_cnt_s=0;
001252  8020              STRH     r0,[r4,#0]
;;;1363   	vz_cnt_s_=0;
001254  8060              STRH     r0,[r4,#2]
;;;1364   	out=1;
001256  f04f0601          MOV      r6,#1
;;;1365   	vz_mem_hndl(1);
00125a  f04f0001          MOV      r0,#1
00125e  f7fffffe          BL       vz_mem_hndl
                  |L1.4706|
;;;1366   	}
;;;1367   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1368   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1369   //plazma=out;	
;;;1370   return out;
001262  4630              MOV      r0,r6
;;;1371   }
001264  bd70              POP      {r4-r6,pc}
;;;1372   
                          ENDP

                  vz_stop PROC
;;;1373   //-----------------------------------------------
;;;1374   void vz_stop(void)
001266  b510              PUSH     {r4,lr}
;;;1375   {
;;;1376   if(spc_stat==spcVZ)
001268  4cff              LDR      r4,|L1.5736|
00126a  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
00126e  2802              CMP      r0,#2
001270  d113              BNE      |L1.4762|
;;;1377        {
;;;1378   vz_mem_hndl(vz_cnt_h);          
001272  f1040430          ADD      r4,r4,#0x30
001276  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001278  f7fffffe          BL       vz_mem_hndl
;;;1379   vz_cnt_s=0;
00127c  f04f0000          MOV      r0,#0
001280  8660              STRH     r0,[r4,#0x32]
;;;1380   vz_cnt_h=0;
001282  86e0              STRH     r0,[r4,#0x36]
;;;1381   vz_cnt_h_=0;
001284  8720              STRH     r0,[r4,#0x38]
;;;1382   spc_stat=spcOFF;
001286  f8040c10          STRB     r0,[r4,#-0x10]
;;;1383   
;;;1384   		__ee_spc_stat=spcOFF;
00128a  87e0              STRH     r0,[r4,#0x3e]
;;;1385   		lc640_write_int(EE_SPC_STAT,spcOFF);
00128c  4601              MOV      r1,r0
00128e  e8bd4010          POP      {r4,lr}
001292  f240209a          MOV      r0,#0x29a
001296  f7ffbffe          B.W      lc640_write_int
                  |L1.4762|
;;;1386        }
;;;1387   
;;;1388   }
00129a  bd10              POP      {r4,pc}
;;;1389   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1391   //-----------------------------------------------
;;;1392   void amper_chas_cnt_drv(char in)
00129c  b570              PUSH     {r4-r6,lr}
;;;1393   {
00129e  4604              MOV      r4,r0
;;;1394   
;;;1395   amper_chas_cnt_drv_cnter[in]++;
0012a0  48f1              LDR      r0,|L1.5736|
0012a2  f1000088          ADD      r0,r0,#0x88
0012a6  5d01              LDRB     r1,[r0,r4]
0012a8  f1010101          ADD      r1,r1,#1
0012ac  5501              STRB     r1,[r0,r4]
;;;1396   
;;;1397   amper_chas_cnt_drv_summ[in]+=(long)Ib_ips_termokompensat[in];
0012ae  4aef              LDR      r2,|L1.5740|
0012b0  f10001a4          ADD      r1,r0,#0xa4
0012b4  f8510024          LDR      r0,[r1,r4,LSL #2]
0012b8  f9322014          LDRSH    r2,[r2,r4,LSL #1]
0012bc  4410              ADD      r0,r0,r2
0012be  f8410024          STR      r0,[r1,r4,LSL #2]
;;;1398   amper_chas_cnt_drv_summ_[in]+=444;
0012c2  f1010208          ADD      r2,r1,#8
0012c6  f8523024          LDR      r3,[r2,r4,LSL #2]
0012ca  f50373de          ADD      r3,r3,#0x1bc
0012ce  f8423024          STR      r3,[r2,r4,LSL #2]
;;;1399   
;;;1400   if(amper_chas_cnt_drv_summ[in]>=36000L)
0012d2  f64842a0          MOV      r2,#0x8ca0
;;;1401   	{
;;;1402   	amper_chas_cnt_drv_summ[in]-=36000L;
;;;1403   	lc640_write_int(EE_AMPER_CHAS_CNT_ADR[in],lc640_read_int(EE_AMPER_CHAS_CNT_ADR[in])+1);
0012d6  4de6              LDR      r5,|L1.5744|
0012d8  4290              CMP      r0,r2                 ;1400
0012da  db0f              BLT      |L1.4860|
0012dc  eba00002          SUB      r0,r0,r2              ;1402
0012e0  f8410024          STR      r0,[r1,r4,LSL #2]     ;1402
0012e4  f8350014          LDRH     r0,[r5,r4,LSL #1]
0012e8  f7fffffe          BL       lc640_read_int
0012ec  1c40              ADDS     r0,r0,#1
0012ee  b201              SXTH     r1,r0
0012f0  f9350014          LDRSH    r0,[r5,r4,LSL #1]
0012f4  e8bd4070          POP      {r4-r6,lr}
0012f8  f7ffbffe          B.W      lc640_write_int
                  |L1.4860|
;;;1404   	}
;;;1405   else if(amper_chas_cnt_drv_summ[in]<=-36000L)
0012fc  4bdd              LDR      r3,|L1.5748|
0012fe  4298              CMP      r0,r3
001300  dc0e              BGT      |L1.4896|
;;;1406   	{
;;;1407   	amper_chas_cnt_drv_summ[in]+=36000L;
001302  4410              ADD      r0,r0,r2
001304  f8410024          STR      r0,[r1,r4,LSL #2]
;;;1408   	lc640_write_int(EE_AMPER_CHAS_CNT_ADR[in],lc640_read_int(EE_AMPER_CHAS_CNT_ADR[in])-1);
001308  f8350014          LDRH     r0,[r5,r4,LSL #1]
00130c  f7fffffe          BL       lc640_read_int
001310  1e40              SUBS     r0,r0,#1
001312  b201              SXTH     r1,r0
001314  f9350014          LDRSH    r0,[r5,r4,LSL #1]
001318  e8bd4070          POP      {r4-r6,lr}
00131c  f7ffbffe          B.W      lc640_write_int
                  |L1.4896|
;;;1409   	}
;;;1410   }
001320  bd70              POP      {r4-r6,pc}
;;;1411   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1413   //-----------------------------------------------
;;;1414   void avz_next_date_hndl(void)
001322  b570              PUSH     {r4-r6,lr}
;;;1415   {
;;;1416   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
001324  4cd4              LDR      r4,|L1.5752|
001326  f8940038          LDRB     r0,[r4,#0x38]
00132a  4dd4              LDR      r5,|L1.5756|
00132c  7829              LDRB     r1,[r5,#0]  ; AVZ
00132e  4408              ADD      r0,r0,r1
001330  280c              CMP      r0,#0xc
001332  d906              BLS      |L1.4930|
001334  8fa0              LDRH     r0,[r4,#0x3c]
001336  1c40              ADDS     r0,r0,#1
001338  b201              SXTH     r1,r0
00133a  20b8              MOVS     r0,#0xb8
00133c  f7fffffe          BL       lc640_write_int
001340  e004              B        |L1.4940|
                  |L1.4930|
;;;1417   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
001342  f9b4103c          LDRSH    r1,[r4,#0x3c]
001346  20b8              MOVS     r0,#0xb8
001348  f7fffffe          BL       lc640_write_int
                  |L1.4940|
;;;1418   
;;;1419   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1420   
;;;1421   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00134c  f8941038          LDRB     r1,[r4,#0x38]
001350  7828              LDRB     r0,[r5,#0]  ; AVZ
001352  4401              ADD      r1,r1,r0
001354  290c              CMP      r1,#0xc
001356  d907              BLS      |L1.4968|
001358  f8941038          LDRB     r1,[r4,#0x38]
00135c  380c              SUBS     r0,r0,#0xc
00135e  4401              ADD      r1,r1,r0
001360  20b6              MOVS     r0,#0xb6
001362  f7fffffe          BL       lc640_write_int
001366  e005              B        |L1.4980|
                  |L1.4968|
;;;1422   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
001368  f8941038          LDRB     r1,[r4,#0x38]
00136c  4401              ADD      r1,r1,r0
00136e  20b6              MOVS     r0,#0xb6
001370  f7fffffe          BL       lc640_write_int
                  |L1.4980|
;;;1423   
;;;1424   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1425   
;;;1426   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
001374  f894002c          LDRB     r0,[r4,#0x2c]
001378  281c              CMP      r0,#0x1c
00137a  d904              BLS      |L1.4998|
00137c  211c              MOVS     r1,#0x1c
00137e  20b4              MOVS     r0,#0xb4
001380  f7fffffe          BL       lc640_write_int
001384  e004              B        |L1.5008|
                  |L1.4998|
;;;1427   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001386  f894102c          LDRB     r1,[r4,#0x2c]
00138a  20b4              MOVS     r0,#0xb4
00138c  f7fffffe          BL       lc640_write_int
                  |L1.5008|
;;;1428   
;;;1429   //lc640_write_int(EE_DATE_AVZ,4);
;;;1430   
;;;1431   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001390  f1040420          ADD      r4,r4,#0x20
001394  7a21              LDRB     r1,[r4,#8]
001396  f04f00ae          MOV      r0,#0xae
00139a  f7fffffe          BL       lc640_write_int
;;;1432   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
00139e  7921              LDRB     r1,[r4,#4]
0013a0  20b0              MOVS     r0,#0xb0
0013a2  f7fffffe          BL       lc640_write_int
;;;1433   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0013a6  7821              LDRB     r1,[r4,#0]
0013a8  e8bd4070          POP      {r4-r6,lr}
0013ac  20b2              MOVS     r0,#0xb2
0013ae  f7ffbffe          B.W      lc640_write_int
;;;1434   
;;;1435   }
;;;1436   
                          ENDP

                  avz_drv PROC
;;;1437   //-----------------------------------------------
;;;1438   void avz_drv(void)                               
0013b2  b510              PUSH     {r4,lr}
;;;1439   {                
;;;1440   if(AVZ!=AVZ_OFF)
0013b4  48b1              LDR      r0,|L1.5756|
;;;1441   	{
;;;1442   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1443   		{
;;;1444   		bAVZ=1;
0013b6  4cac              LDR      r4,|L1.5736|
0013b8  7800              LDRB     r0,[r0,#0]            ;1440  ; AVZ
0013ba  b338              CBZ      r0,|L1.5132|
0013bc  48ae              LDR      r0,|L1.5752|
0013be  8f82              LDRH     r2,[r0,#0x3c]         ;1442
0013c0  49af              LDR      r1,|L1.5760|
0013c2  8809              LDRH     r1,[r1,#0]            ;1442  ; YEAR_AVZ
0013c4  428a              CMP      r2,r1                 ;1442
0013c6  d121              BNE      |L1.5132|
0013c8  f8902038          LDRB     r2,[r0,#0x38]         ;1442
0013cc  49ad              LDR      r1,|L1.5764|
0013ce  8809              LDRH     r1,[r1,#0]            ;1442  ; MONTH_AVZ
0013d0  428a              CMP      r2,r1                 ;1442
0013d2  d11b              BNE      |L1.5132|
0013d4  f890102c          LDRB     r1,[r0,#0x2c]         ;1442
0013d8  4aab              LDR      r2,|L1.5768|
0013da  8812              LDRH     r2,[r2,#0]            ;1442  ; DATE_AVZ
0013dc  4291              CMP      r1,r2                 ;1442
0013de  d115              BNE      |L1.5132|
0013e0  f8901028          LDRB     r1,[r0,#0x28]         ;1442
0013e4  4aa9              LDR      r2,|L1.5772|
0013e6  8812              LDRH     r2,[r2,#0]            ;1442  ; HOUR_AVZ
0013e8  4291              CMP      r1,r2                 ;1442
0013ea  d10f              BNE      |L1.5132|
0013ec  f8901024          LDRB     r1,[r0,#0x24]         ;1442
0013f0  4aa7              LDR      r2,|L1.5776|
0013f2  8812              LDRH     r2,[r2,#0]            ;1442  ; MIN_AVZ
0013f4  4291              CMP      r1,r2                 ;1442
0013f6  d109              BNE      |L1.5132|
0013f8  f8900020          LDRB     r0,[r0,#0x20]         ;1442
0013fc  49a5              LDR      r1,|L1.5780|
0013fe  8809              LDRH     r1,[r1,#0]            ;1442  ; SEC_AVZ
001400  4288              CMP      r0,r1                 ;1442
001402  d103              BNE      |L1.5132|
001404  f04f0001          MOV      r0,#1
001408  f8840023          STRB     r0,[r4,#0x23]
                  |L1.5132|
;;;1445   		}
;;;1446   	}
;;;1447   if(bAVZ)
00140c  f8940023          LDRB     r0,[r4,#0x23]  ; bAVZ
001410  2800              CMP      r0,#0
001412  d00d              BEQ      |L1.5168|
;;;1448   	{
;;;1449   	if(vz_start(AVZ_TIME))
001414  48a0              LDR      r0,|L1.5784|
001416  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001418  b2c0              UXTB     r0,r0
00141a  f7fffffe          BL       vz_start
00141e  2800              CMP      r0,#0
001420  d006              BEQ      |L1.5168|
;;;1450   		{
;;;1451   		bAVZ=0;
001422  f04f0000          MOV      r0,#0
001426  f8840023          STRB     r0,[r4,#0x23]
;;;1452   		avz_next_date_hndl();
00142a  e8bd4010          POP      {r4,lr}
00142e  e7fe              B        avz_next_date_hndl
                  |L1.5168|
;;;1453   		}
;;;1454   	}	
;;;1455   
;;;1456   }
001430  bd10              POP      {r4,pc}
;;;1457   
                          ENDP

                  vz_drv PROC
;;;1458   //-----------------------------------------------
;;;1459   void vz_drv(void)
001432  b538              PUSH     {r3-r5,lr}
;;;1460   { 
;;;1461   if(spc_stat==spcVZ)
001434  4c8c              LDR      r4,|L1.5736|
001436  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
00143a  2802              CMP      r0,#2
00143c  d11d              BNE      |L1.5242|
;;;1462   	{
;;;1463   #ifndef UKU_6U
;;;1464   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
00143e  4897              LDR      r0,|L1.5788|
001440  7800              LDRB     r0,[r0,#0]  ; sk_stat
001442  2801              CMP      r0,#1
001444  d01a              BEQ      |L1.5244|
001446  4896              LDR      r0,|L1.5792|
001448  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
00144a  2800              CMP      r0,#0
00144c  d016              BEQ      |L1.5244|
;;;1465   #endif //UKU_6U
;;;1466   		{
;;;1467   
;;;1468   		if(vz_cnt_s_<3600)
;;;1469   			{
;;;1470   			vz_cnt_s_++;
;;;1471   			if(vz_cnt_s_>=3600)
;;;1472   				{
;;;1473   				vz_cnt_s_=0;
;;;1474   				if(vz_cnt_h)
;;;1475   					{
;;;1476   					vz_cnt_h--;
;;;1477   					vz_cnt_h_++;
;;;1478   					}
;;;1479   				}
;;;1480   			}
;;;1481   	
;;;1482   	
;;;1483   		if(vz_cnt_s<60)
;;;1484   			{
;;;1485   			vz_cnt_s++;
;;;1486   			if(vz_cnt_s>=60)
;;;1487   				{
;;;1488   				vz_cnt_s=0;
;;;1489   				
;;;1490   				__ee_vz_cnt--;
;;;1491   				lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1492   				if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1493   					{
;;;1494   					spc_stat=spcOFF;
;;;1495   							__ee_spc_stat=spcOFF;
;;;1496   			lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1497   	
;;;1498   	//				hv_vz_stat=hvsOFF;
;;;1499   	//		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1500   					vz_mem_hndl(0);
;;;1501   					}
;;;1502   				}
;;;1503   			}
;;;1504   		vz_error=0; 
;;;1505   		}
;;;1506   #ifndef UKU_6U
;;;1507   	else 
;;;1508   		{
;;;1509   		vz_error=1; 
00144e  f04f0001          MOV      r0,#1
001452  7060              STRB     r0,[r4,#1]
;;;1510   		if(((LPC_RTC->SEC)%10)==0)
001454  4893              LDR      r0,|L1.5796|
001456  7800              LDRB     r0,[r0,#0]
001458  f04f010a          MOV      r1,#0xa
00145c  fbb0f2f1          UDIV     r2,r0,r1
001460  fb010012          MLS      r0,r1,r2,r0
001464  2800              CMP      r0,#0
001466  d108              BNE      |L1.5242|
;;;1511   			{
;;;1512   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
001468  f2413088          MOV      r0,#0x1388
00146c  9000              STR      r0,[sp,#0]
00146e  a38e              ADR      r3,|L1.5800|
001470  a293              ADR      r2,|L1.5824|
001472  a199              ADR      r1,|L1.5848|
001474  a09e              ADR      r0,|L1.5872|
001476  f7fffffe          BL       show_mess
                  |L1.5242|
;;;1513   						"    ЗАБЛОКИРОВАН    ",
;;;1514   						"     НЕИСПРАВНА     ",
;;;1515   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1516   						5000);			
;;;1517   			}
;;;1518   		}
;;;1519   #endif //UKU_6U
;;;1520   /*	if(vz_cnt_s_>=3)
;;;1521   		{
;;;1522   		if(sk_stat[0]==0)
;;;1523   		} */
;;;1524   
;;;1525   	}
;;;1526   
;;;1527   
;;;1528   } 
00147a  bd38              POP      {r3-r5,pc}
                  |L1.5244|
00147c  f8b40064          LDRH     r0,[r4,#0x64]         ;1468  ; vz_cnt_s_
001480  f44f6161          MOV      r1,#0xe10             ;1468
001484  2500              MOVS     r5,#0                 ;1464
001486  4288              CMP      r0,r1                 ;1468
001488  d215              BCS      |L1.5302|
00148a  f1000001          ADD      r0,r0,#1              ;1470
00148e  b280              UXTH     r0,r0                 ;1470
001490  f8a40064          STRH     r0,[r4,#0x64]         ;1470
001494  4288              CMP      r0,r1                 ;1471
001496  d30e              BCC      |L1.5302|
001498  f8a45064          STRH     r5,[r4,#0x64]         ;1473
00149c  f8b40066          LDRH     r0,[r4,#0x66]         ;1474  ; vz_cnt_h
0014a0  b148              CBZ      r0,|L1.5302|
0014a2  f1a00001          SUB      r0,r0,#1              ;1476
0014a6  f8240f66          STRH     r0,[r4,#0x66]!        ;1476
0014aa  8860              LDRH     r0,[r4,#2]            ;1477  ; vz_cnt_h_
0014ac  f1000001          ADD      r0,r0,#1              ;1477
0014b0  8060              STRH     r0,[r4,#2]            ;1477
0014b2  f1a40466          SUB      r4,r4,#0x66           ;1477
                  |L1.5302|
0014b6  f8b40062          LDRH     r0,[r4,#0x62]         ;1483  ; vz_cnt_s
0014ba  283c              CMP      r0,#0x3c              ;1483
0014bc  d225              BCS      |L1.5386|
0014be  f1000001          ADD      r0,r0,#1              ;1485
0014c2  b280              UXTH     r0,r0                 ;1485
0014c4  f8a40062          STRH     r0,[r4,#0x62]         ;1485
0014c8  283c              CMP      r0,#0x3c              ;1486
0014ca  d31e              BCC      |L1.5386|
0014cc  f8245f62          STRH     r5,[r4,#0x62]!        ;1488
0014d0  8960              LDRH     r0,[r4,#0xa]          ;1490  ; __ee_vz_cnt
0014d2  f1a00001          SUB      r0,r0,#1              ;1490
0014d6  b201              SXTH     r1,r0                 ;1490
0014d8  8161              STRH     r1,[r4,#0xa]          ;1490
0014da  f44f7027          MOV      r0,#0x29c             ;1491
0014de  f7fffffe          BL       lc640_write_int
0014e2  8960              LDRH     r0,[r4,#0xa]          ;1492  ; __ee_vz_cnt
0014e4  f1a40462          SUB      r4,r4,#0x62           ;1492
0014e8  b118              CBZ      r0,|L1.5362|
0014ea  4887              LDR      r0,|L1.5896|
0014ec  8800              LDRH     r0,[r0,#0]            ;1492  ; speedChrgBlckStat
0014ee  2801              CMP      r0,#1                 ;1492
0014f0  d10b              BNE      |L1.5386|
                  |L1.5362|
0014f2  f8845020          STRB     r5,[r4,#0x20]         ;1494
0014f6  f8a4506e          STRH     r5,[r4,#0x6e]         ;1495
0014fa  2100              MOVS     r1,#0                 ;1496
0014fc  f240209a          MOV      r0,#0x29a             ;1496
001500  f7fffffe          BL       lc640_write_int
001504  2000              MOVS     r0,#0                 ;1500
001506  f7fffffe          BL       vz_mem_hndl
                  |L1.5386|
00150a  7065              STRB     r5,[r4,#1]            ;1504
00150c  bd38              POP      {r3-r5,pc}
;;;1529   
                          ENDP

                  vz1_drv PROC
;;;1531   //драйвер уравнительного заряда
;;;1532   void vz1_drv(void)
00150e  e92d4ff8          PUSH     {r3-r11,lr}
;;;1533   {
;;;1534   if(volt_region_cnt)volt_region_cnt--;
001512  f8df8154          LDR      r8,|L1.5736|
001516  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
00151a  b118              CBZ      r0,|L1.5412|
00151c  f1a00001          SUB      r0,r0,#1
001520  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.5412|
;;;1535   if(vz1_stat==vz1sOFF)
001524  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001528  b928              CBNZ     r0,|L1.5430|
;;;1536   	{
;;;1537   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00152a  2314              MOVS     r3,#0x14
00152c  2200              MOVS     r2,#0
00152e  2164              MOVS     r1,#0x64
001530  20d2              MOVS     r0,#0xd2
001532  f7fffffe          BL       mess_send
                  |L1.5430|
;;;1538   	}
;;;1539   if(vz1_stat==vz1sSTEP1)
001536  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1540   	{
;;;1541   	if(vz1_stat_old!=vz1_stat)
;;;1542   		{
;;;1543   		vz1_stat_cnt=5;
;;;1544   		}
;;;1545   	if(vz1_stat_cnt)
;;;1546   		{
;;;1547   		vz1_stat_cnt--;
;;;1548   		if(vz1_stat_cnt==0)
;;;1549   			{
;;;1550   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1551   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1552   			}
;;;1553   		}
;;;1554   	if(sk_stat[0]==1)
00153a  4d58              LDR      r5,|L1.5788|
00153c  f44f7bc9          MOV      r11,#0x192            ;1551
001540  2801              CMP      r0,#1                 ;1539
001542  d139              BNE      |L1.5560|
001544  f8980006          LDRB     r0,[r8,#6]            ;1541  ; vz1_stat_old
001548  2801              CMP      r0,#1                 ;1541
00154a  d003              BEQ      |L1.5460|
00154c  f04f0005          MOV      r0,#5                 ;1543
001550  f8a8007a          STRH     r0,[r8,#0x7a]         ;1543
                  |L1.5460|
001554  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1545  ; vz1_stat_cnt
001558  b168              CBZ      r0,|L1.5494|
00155a  f1a00001          SUB      r0,r0,#1              ;1547
00155e  b200              SXTH     r0,r0                 ;1547
001560  f8a8007a          STRH     r0,[r8,#0x7a]         ;1547
001564  b938              CBNZ     r0,|L1.5494|
001566  f04f000b          MOV      r0,#0xb               ;1550
00156a  f8880005          STRB     r0,[r8,#5]            ;1550
00156e  4601              MOV      r1,r0                 ;1551
001570  4658              MOV      r0,r11                ;1551
001572  f7fffffe          BL       lc640_write
                  |L1.5494|
001576  7828              LDRB     r0,[r5,#0]  ; sk_stat
001578  2801              CMP      r0,#1
00157a  d117              BNE      |L1.5548|
;;;1555   		{
;;;1556   		vz1_stat=vz1sSTEP2;
00157c  f04f0002          MOV      r0,#2
001580  f8880005          STRB     r0,[r8,#5]
;;;1557   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
001584  4601              MOV      r1,r0
001586  4658              MOV      r0,r11
001588  f7fffffe          BL       lc640_write
;;;1558   		tree_up(iVZ1_STEP2_2,1,0,0);
00158c  2300              MOVS     r3,#0
00158e  461a              MOV      r2,r3
001590  2101              MOVS     r1,#1
001592  20f4              MOVS     r0,#0xf4
001594  f7fffffe          BL       tree_up
;;;1559   		tree_up(iVZ1_STEP2_1,0,0,0);
001598  2300              MOVS     r3,#0
00159a  461a              MOV      r2,r3
00159c  4619              MOV      r1,r3
00159e  20f3              MOVS     r0,#0xf3
0015a0  f7fffffe          BL       tree_up
;;;1560   		ret(1200);
0015a4  f44f6096          MOV      r0,#0x4b0
0015a8  f7fffffe          BL       ||ret||
                  |L1.5548|
;;;1561   		}
;;;1562   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015ac  2314              MOVS     r3,#0x14
0015ae  2200              MOVS     r2,#0
0015b0  2164              MOVS     r1,#0x64
0015b2  20d2              MOVS     r0,#0xd2
0015b4  f7fffffe          BL       mess_send
                  |L1.5560|
;;;1563   	}
;;;1564   
;;;1565   if(vz1_stat==vz1sSTEP2)
0015b8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1566   	{
;;;1567   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1568   		{
;;;1569   		vz1_stat_cnt=15;
0015bc  f04f090f          MOV      r9,#0xf
0015c0  2802              CMP      r0,#2                 ;1565
0015c2  d118              BNE      |L1.5622|
0015c4  f8980006          LDRB     r0,[r8,#6]            ;1567  ; vz1_stat_old
0015c8  2802              CMP      r0,#2                 ;1567
0015ca  d102              BNE      |L1.5586|
0015cc  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1567  ; vz1_stat_cnt
0015d0  b908              CBNZ     r0,|L1.5590|
                  |L1.5586|
0015d2  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5590|
;;;1570   		}
;;;1571   	vz1_stat_cnt--;
0015d6  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0015da  f1a00001          SUB      r0,r0,#1
0015de  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1572   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015e2  f04f0314          MOV      r3,#0x14
0015e6  f04f0200          MOV      r2,#0
0015ea  f04f0164          MOV      r1,#0x64
0015ee  f04f00d2          MOV      r0,#0xd2
0015f2  f7fffffe          BL       mess_send
                  |L1.5622|
;;;1573   	}
;;;1574   
;;;1575   if(vz1_stat==vz1sSTEP3)
0015f6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1576   	{
;;;1577   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1578   		{
;;;1579   		vz1_stat_cnt=10;
0015fa  240a              MOVS     r4,#0xa
0015fc  2600              MOVS     r6,#0                 ;1534
0015fe  f04f0a01          MOV      r10,#1                ;1535
;;;1580   
;;;1581   		}
;;;1582   	vz1_stat_cnt--;
;;;1583   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1584   		{
;;;1585   		show_mess(	"     ВКЛЮЧИТЕ       ",
001602  f2413788          MOV      r7,#0x1388
001606  2803              CMP      r0,#3                 ;1575
001608  d12d              BNE      |L1.5734|
00160a  f8980006          LDRB     r0,[r8,#6]            ;1577  ; vz1_stat_old
00160e  2803              CMP      r0,#3                 ;1577
001610  d102              BNE      |L1.5656|
001612  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1577  ; vz1_stat_cnt
001616  b908              CBNZ     r0,|L1.5660|
                  |L1.5656|
001618  f8a8407a          STRH     r4,[r8,#0x7a]         ;1579
                  |L1.5660|
00161c  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1582  ; vz1_stat_cnt
001620  f1a00001          SUB      r0,r0,#1              ;1582
001624  b200              SXTH     r0,r0                 ;1582
001626  f8a8007a          STRH     r0,[r8,#0x7a]         ;1582
00162a  280a              CMP      r0,#0xa               ;1583
00162c  d001              BEQ      |L1.5682|
00162e  2809              CMP      r0,#9                 ;1583
001630  d106              BNE      |L1.5696|
                  |L1.5682|
001632  a336              ADR      r3,|L1.5900|
001634  a23b              ADR      r2,|L1.5924|
001636  a141              ADR      r1,|L1.5948|
001638  a046              ADR      r0,|L1.5972|
00163a  9700              STR      r7,[sp,#0]
00163c  f7fffffe          BL       show_mess
                  |L1.5696|
;;;1586   					"      ТУМБЛЕР       ",
;;;1587   					"     ВЫСОКОГО       ",
;;;1588   					"    НАПРЯЖЕНИЯ      ",
;;;1589   					5000);
;;;1590   		}
;;;1591   	if(sk_stat[1]==1)
001640  7868              LDRB     r0,[r5,#1]  ; sk_stat
001642  2801              CMP      r0,#1
001644  d10d              BNE      |L1.5730|
;;;1592   		{
;;;1593   		vz1_stat=vz1sWRK;
001646  f8884005          STRB     r4,[r8,#5]
;;;1594   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00164a  210a              MOVS     r1,#0xa
00164c  4658              MOV      r0,r11
00164e  f7fffffe          BL       lc640_write
;;;1595   		volt_region=1;
001652  f888a02d          STRB     r10,[r8,#0x2d]
;;;1596   		cntrl_stat=0;
001656  f8a86030          STRH     r6,[r8,#0x30]
;;;1597   		cntrl_stat_new=0;
00165a  f8a8604c          STRH     r6,[r8,#0x4c]
;;;1598   		cntrl_stat_old=0;
00165e  f8a86032          STRH     r6,[r8,#0x32]
                  |L1.5730|
;;;1599   		}
;;;1600   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001662  2314              MOVS     r3,#0x14
001664  e082              B        |L1.5996|
                  |L1.5734|
001666  e086              B        |L1.6006|
                  |L1.5736|
                          DCD      ||area_number.25||
                  |L1.5740|
                          DCD      Ib_ips_termokompensat
                  |L1.5744|
                          DCD      EE_AMPER_CHAS_CNT_ADR
                  |L1.5748|
                          DCD      0xffff7360
                  |L1.5752|
                          DCD      0x40024000
                  |L1.5756|
                          DCD      AVZ
                  |L1.5760|
                          DCD      YEAR_AVZ
                  |L1.5764|
                          DCD      MONTH_AVZ
                  |L1.5768|
                          DCD      DATE_AVZ
                  |L1.5772|
                          DCD      HOUR_AVZ
                  |L1.5776|
                          DCD      MIN_AVZ
                  |L1.5780|
                          DCD      SEC_AVZ
                  |L1.5784|
                          DCD      AVZ_TIME
                  |L1.5788|
                          DCD      sk_stat
                  |L1.5792|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5796|
                          DCD      0x40024020
                  |L1.5800|
0016a8  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
0016ac  c2c5cdd2
0016b0  c8cbdfd6
0016b4  c8df2121
0016b8  21202020
0016bc  00      
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016c4  20cdc5c8
0016c8  d1cfd0c0
0016cc  c2cdc020
0016d0  20202020
0016d4  00      
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
0016d8  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016dc  c7c0c1cb
0016e0  cecac8d0
0016e4  cec2c0cd
0016e8  20      
0016e9  20202000          DCB      "   ",0
0016ed  00                DCB      0
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
0016f0  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016f4  c2cdc8c2
0016f8  c0ded9c8
0016fc  c920c7  
0016ff  c0d0dfc4          DCB      192,208,223,196," ",0
001703  2000    
001705  00                DCB      0
001706  00                DCB      0
001707  00                DCB      0
                  |L1.5896|
                          DCD      speedChrgBlckStat
                  |L1.5900|
00170c  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
001710  cdc0cfd0
001714  dfc6c5cd
001718  c8df2020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001728  20c2dbd1
00172c  cecacec3
001730  ce202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
00173c  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001740  2020d2d3
001744  ccc1cbc5
001748  d0202020
00174c  20202020
001750  00      
001751  00                DCB      0
001752  00                DCB      0
001753  00                DCB      0
                  |L1.5972|
001754  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001758  20c2cacb
00175c  ded7c8d2
001760  c5202020
001764  20202020
001768  00      
001769  00                DCB      0
00176a  00                DCB      0
00176b  00                DCB      0
                  |L1.5996|
00176c  2200              MOVS     r2,#0
00176e  2164              MOVS     r1,#0x64
001770  20d2              MOVS     r0,#0xd2
001772  f7fffffe          BL       mess_send
                  |L1.6006|
;;;1601   	}
;;;1602   
;;;1603   if(vz1_stat==vz1sWRK)
001776  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00177a  280a              CMP      r0,#0xa
00177c  d17d              BNE      |L1.6266|
;;;1604   	{
;;;1605   	if(vz1_stat_old!=vz1_stat)
00177e  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1606   		{
;;;1607   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001782  49ff              LDR      r1,|L1.7040|
001784  280a              CMP      r0,#0xa               ;1605
001786  d008              BEQ      |L1.6042|
001788  48fe              LDR      r0,|L1.7044|
00178a  f44f6261          MOV      r2,#0xe10
00178e  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
001792  fb00f002          MUL      r0,r0,r2
001796  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1608   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1609   		vz1_up_cnt=0L;
001798  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.6042|
;;;1610   
;;;1611   		}
;;;1612   	vz1_wrk_cnt--;
00179a  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
00179c  f1a00001          SUB      r0,r0,#1
0017a0  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1613   	vz1_up_cnt++;
0017a2  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
0017a4  f1020201          ADD      r2,r2,#1
0017a8  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1614   
;;;1615   	if(vz1_wrk_cnt==0)
0017aa  b940              CBNZ     r0,|L1.6078|
;;;1616   		{
;;;1617   		vz1_stat=vz1sFINE;
0017ac  f8889005          STRB     r9,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sFINE);
0017b0  210f              MOVS     r1,#0xf
0017b2  4658              MOV      r0,r11
0017b4  f7fffffe          BL       lc640_write
;;;1619   		uz_mem_hndl(0);
0017b8  2000              MOVS     r0,#0
0017ba  f7fffffe          BL       uz_mem_hndl
                  |L1.6078|
;;;1620   		}
;;;1621   	if(sk_stat[0]==0)
0017be  7828              LDRB     r0,[r5,#0]  ; sk_stat
0017c0  b938              CBNZ     r0,|L1.6098|
;;;1622   		{
;;;1623   		vz1_stat=vz1sERR2;
0017c2  f04f000c          MOV      r0,#0xc
0017c6  f8880005          STRB     r0,[r8,#5]
;;;1624   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0017ca  4601              MOV      r1,r0
0017cc  4658              MOV      r0,r11
0017ce  f7fffffe          BL       lc640_write
                  |L1.6098|
;;;1625   		}
;;;1626   	if(sk_stat[1]==0)
0017d2  7868              LDRB     r0,[r5,#1]  ; sk_stat
0017d4  b938              CBNZ     r0,|L1.6118|
;;;1627   		{
;;;1628   		vz1_stat=vz1sERR3;
0017d6  f04f000d          MOV      r0,#0xd
0017da  f8880005          STRB     r0,[r8,#5]
;;;1629   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0017de  4601              MOV      r1,r0
0017e0  4658              MOV      r0,r11
0017e2  f7fffffe          BL       lc640_write
                  |L1.6118|
;;;1630   		}
;;;1631   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017e6  f9b8004e          LDRSH    r0,[r8,#0x4e]  ; Ibmax
0017ea  f8b81050          LDRH     r1,[r8,#0x50]  ; IZMAX_
0017ee  fb90f0f4          SDIV     r0,r0,r4
;;;1632   		{
;;;1633   		volt_region=0;
;;;1634   		cntrl_stat=1000;
0017f2  f44f727a          MOV      r2,#0x3e8
0017f6  4288              CMP      r0,r1                 ;1631
0017f8  dd16              BLE      |L1.6184|
0017fa  f9b83030          LDRSH    r3,[r8,#0x30]         ;1631  ; cntrl_stat
0017fe  2b14              CMP      r3,#0x14              ;1631
001800  dc12              BGT      |L1.6184|
001802  f898302d          LDRB     r3,[r8,#0x2d]         ;1631  ; volt_region
001806  2b01              CMP      r3,#1                 ;1631
001808  d10e              BNE      |L1.6184|
00180a  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1631  ; volt_region_cnt
00180e  b95b              CBNZ     r3,|L1.6184|
001810  f888602d          STRB     r6,[r8,#0x2d]         ;1633
001814  f8a82030          STRH     r2,[r8,#0x30]
;;;1635   		cntrl_stat_new=1000;
001818  f8a8204c          STRH     r2,[r8,#0x4c]
;;;1636   		cntrl_stat_old=1000;
00181c  f8a82032          STRH     r2,[r8,#0x32]
;;;1637   		volt_region_cnt=110;
001820  f04f036e          MOV      r3,#0x6e
001824  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.6184|
;;;1638   		}
;;;1639   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001828  4288              CMP      r0,r1
00182a  da13              BGE      |L1.6228|
00182c  f9b80030          LDRSH    r0,[r8,#0x30]  ; cntrl_stat
001830  4290              CMP      r0,r2
001832  db0f              BLT      |L1.6228|
001834  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
001838  b960              CBNZ     r0,|L1.6228|
00183a  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
00183e  b948              CBNZ     r0,|L1.6228|
;;;1640   		{
;;;1641   		volt_region=1;
001840  f888a02d          STRB     r10,[r8,#0x2d]
;;;1642   		cntrl_stat=10;
001844  f8a84030          STRH     r4,[r8,#0x30]
;;;1643   		cntrl_stat_new=10;
001848  f8a8404c          STRH     r4,[r8,#0x4c]
;;;1644   		cntrl_stat_old=10;
00184c  f8a84032          STRH     r4,[r8,#0x32]
;;;1645   		volt_region_cnt=10;
001850  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.6228|
;;;1646   		}
;;;1647   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001854  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
001858  b110              CBZ      r0,|L1.6240|
;;;1648   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
00185a  2801              CMP      r0,#1
00185c  d007              BEQ      |L1.6254|
00185e  e00c              B        |L1.6266|
                  |L1.6240|
001860  2314              MOVS     r3,#0x14              ;1647
001862  2200              MOVS     r2,#0                 ;1647
001864  2164              MOVS     r1,#0x64              ;1647
001866  20d2              MOVS     r0,#0xd2              ;1647
001868  f7fffffe          BL       mess_send
00186c  e005              B        |L1.6266|
                  |L1.6254|
00186e  2314              MOVS     r3,#0x14
001870  2201              MOVS     r2,#1
001872  2164              MOVS     r1,#0x64
001874  20d2              MOVS     r0,#0xd2
001876  f7fffffe          BL       mess_send
                  |L1.6266|
;;;1649   	}
;;;1650   
;;;1651   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
00187a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00187e  280b              CMP      r0,#0xb
001880  d120              BNE      |L1.6340|
;;;1652   	{
;;;1653   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001882  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001886  280b              CMP      r0,#0xb
001888  d102              BNE      |L1.6288|
00188a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00188e  b908              CBNZ     r0,|L1.6292|
                  |L1.6288|
;;;1654   		{
;;;1655   		vz1_stat_cnt=10;
001890  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6292|
;;;1656   		}
;;;1657   	vz1_stat_cnt--;
001894  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001898  f1a00001          SUB      r0,r0,#1
00189c  b200              SXTH     r0,r0
00189e  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1658   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018a2  280a              CMP      r0,#0xa
0018a4  d001              BEQ      |L1.6314|
0018a6  2809              CMP      r0,#9
0018a8  d106              BNE      |L1.6328|
                  |L1.6314|
;;;1659   		{
;;;1660   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018aa  a3b7              ADR      r3,|L1.7048|
0018ac  a2bc              ADR      r2,|L1.7072|
0018ae  a1c2              ADR      r1,|L1.7096|
0018b0  a0c7              ADR      r0,|L1.7120|
0018b2  9700              STR      r7,[sp,#0]
0018b4  f7fffffe          BL       show_mess
                  |L1.6328|
;;;1661   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1662   					"      ВКЛЮЧЕН       ",
;;;1663   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1664   					5000);
;;;1665   		}
;;;1666   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018b8  2314              MOVS     r3,#0x14
0018ba  2200              MOVS     r2,#0
0018bc  2164              MOVS     r1,#0x64
0018be  20d2              MOVS     r0,#0xd2
0018c0  f7fffffe          BL       mess_send
                  |L1.6340|
;;;1667   	}
;;;1668   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
0018c4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018c8  280c              CMP      r0,#0xc
0018ca  d12c              BNE      |L1.6438|
;;;1669   	{
;;;1670   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018cc  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018d0  280c              CMP      r0,#0xc
0018d2  d102              BNE      |L1.6362|
0018d4  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0018d8  b908              CBNZ     r0,|L1.6366|
                  |L1.6362|
;;;1671   		{
;;;1672   		vz1_stat_cnt=10;
0018da  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6366|
;;;1673   		}
;;;1674   	vz1_stat_cnt--;
0018de  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0018e2  f1a00001          SUB      r0,r0,#1
0018e6  b200              SXTH     r0,r0
0018e8  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1675   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018ec  280a              CMP      r0,#0xa
0018ee  d001              BEQ      |L1.6388|
0018f0  2809              CMP      r0,#9
0018f2  d109              BNE      |L1.6408|
                  |L1.6388|
;;;1676   		{
;;;1677   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018f4  f2af2350          ADR      r3,|L1.5800|
0018f8  f2af223c          ADR      r2,|L1.5824|
0018fc  f2af2128          ADR      r1,|L1.5848|
001900  a0b3              ADR      r0,|L1.7120|
001902  9700              STR      r7,[sp,#0]
001904  f7fffffe          BL       show_mess
                  |L1.6408|
;;;1678   					"    ЗАБЛОКИРОВАН    ",
;;;1679   					"     НЕИСПРАВНА     ",
;;;1680   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1681   					5000);
;;;1682   		}
;;;1683   	if(sk_stat[0]==1)
001908  7828              LDRB     r0,[r5,#0]  ; sk_stat
00190a  2801              CMP      r0,#1
00190c  d105              BNE      |L1.6426|
;;;1684   		{
;;;1685   		vz1_stat=vz1sWRK;
00190e  f8884005          STRB     r4,[r8,#5]
;;;1686   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001912  210a              MOVS     r1,#0xa
001914  4658              MOV      r0,r11
001916  f7fffffe          BL       lc640_write
                  |L1.6426|
;;;1687   		}
;;;1688   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00191a  2314              MOVS     r3,#0x14
00191c  2200              MOVS     r2,#0
00191e  2164              MOVS     r1,#0x64
001920  20d2              MOVS     r0,#0xd2
001922  f7fffffe          BL       mess_send
                  |L1.6438|
;;;1689   	}
;;;1690   
;;;1691   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001926  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00192a  280d              CMP      r0,#0xd
00192c  d129              BNE      |L1.6530|
;;;1692   	{
;;;1693   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00192e  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001932  280d              CMP      r0,#0xd
001934  d102              BNE      |L1.6460|
001936  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00193a  b908              CBNZ     r0,|L1.6464|
                  |L1.6460|
;;;1694   		{
;;;1695   		vz1_stat_cnt=10;
00193c  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6464|
;;;1696   		}
;;;1697   	vz1_stat_cnt--;
001940  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001944  f1a00001          SUB      r0,r0,#1
001948  b200              SXTH     r0,r0
00194a  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1698   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00194e  280a              CMP      r0,#0xa
001950  d001              BEQ      |L1.6486|
001952  2809              CMP      r0,#9
001954  d106              BNE      |L1.6500|
                  |L1.6486|
;;;1699   		{
;;;1700   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001956  a3a4              ADR      r3,|L1.7144|
001958  a2a9              ADR      r2,|L1.7168|
00195a  a1af              ADR      r1,|L1.7192|
00195c  a09c              ADR      r0,|L1.7120|
00195e  9700              STR      r7,[sp,#0]
001960  f7fffffe          BL       show_mess
                  |L1.6500|
;;;1701   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1702   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1703   					"*   ТУМБЛЕРА!!!     ",
;;;1704   					5000);
;;;1705   		}
;;;1706   	if(sk_stat[1]==1)
001964  7868              LDRB     r0,[r5,#1]  ; sk_stat
001966  2801              CMP      r0,#1
001968  d105              BNE      |L1.6518|
;;;1707   		{
;;;1708   		vz1_stat=vz1sWRK;
00196a  f8884005          STRB     r4,[r8,#5]
;;;1709   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00196e  210a              MOVS     r1,#0xa
001970  4658              MOV      r0,r11
001972  f7fffffe          BL       lc640_write
                  |L1.6518|
;;;1710   		}
;;;1711   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001976  2314              MOVS     r3,#0x14
001978  2200              MOVS     r2,#0
00197a  2164              MOVS     r1,#0x64
00197c  20d2              MOVS     r0,#0xd2
00197e  f7fffffe          BL       mess_send
                  |L1.6530|
;;;1712   	}
;;;1713   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001982  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001986  280e              CMP      r0,#0xe
001988  d12d              BNE      |L1.6630|
;;;1714   	{
;;;1715   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00198a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00198e  280e              CMP      r0,#0xe
001990  d102              BNE      |L1.6552|
001992  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001996  b908              CBNZ     r0,|L1.6556|
                  |L1.6552|
;;;1716   		{
;;;1717   		vz1_stat_cnt=10;
001998  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6556|
;;;1718   		}
;;;1719   	vz1_stat_cnt--;
00199c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0019a0  f1a00001          SUB      r0,r0,#1
0019a4  b200              SXTH     r0,r0
0019a6  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1720   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0019aa  280a              CMP      r0,#0xa
0019ac  d001              BEQ      |L1.6578|
0019ae  2809              CMP      r0,#9
0019b0  d109              BNE      |L1.6598|
                  |L1.6578|
;;;1721   		{
;;;1722   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
0019b2  f2af23a8          ADR      r3,|L1.5900|
0019b6  f2af2294          ADR      r2,|L1.5924|
0019ba  f2af2180          ADR      r1,|L1.5948|
0019be  a09c              ADR      r0,|L1.7216|
0019c0  9700              STR      r7,[sp,#0]
0019c2  f7fffffe          BL       show_mess
                  |L1.6598|
;;;1723   					"      ТУМБЛЕР       ",
;;;1724   					"     ВЫСОКОГО       ",
;;;1725   					"    НАПРЯЖЕНИЯ      ",
;;;1726   					5000);
;;;1727   		}
;;;1728   	if(sk_stat[1]==0)
0019c6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0019c8  b938              CBNZ     r0,|L1.6618|
;;;1729   		{
;;;1730   		vz1_stat=vz1sOFF;
0019ca  f8886005          STRB     r6,[r8,#5]
;;;1731   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0019ce  2100              MOVS     r1,#0
0019d0  4658              MOV      r0,r11
0019d2  f7fffffe          BL       lc640_write
;;;1732   		vz_stop();
0019d6  f7fffffe          BL       vz_stop
                  |L1.6618|
;;;1733   
;;;1734   		}
;;;1735   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0019da  2314              MOVS     r3,#0x14
0019dc  2201              MOVS     r2,#1
0019de  2164              MOVS     r1,#0x64
0019e0  20d2              MOVS     r0,#0xd2
0019e2  f7fffffe          BL       mess_send
                  |L1.6630|
;;;1736   	}
;;;1737   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019e6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1738   	{
;;;1739   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1740   		{
;;;1741   		vz1_stat_cnt=10;
;;;1742   		}
;;;1743   	vz1_stat_cnt--;
;;;1744   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1745   		{
;;;1746   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019ea  f64037b8          MOV      r7,#0xbb8
0019ee  280f              CMP      r0,#0xf               ;1737
0019f0  d138              BNE      |L1.6756|
0019f2  f8980006          LDRB     r0,[r8,#6]            ;1739  ; vz1_stat_old
0019f6  280f              CMP      r0,#0xf               ;1739
0019f8  d102              BNE      |L1.6656|
0019fa  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1739  ; vz1_stat_cnt
0019fe  b908              CBNZ     r0,|L1.6660|
                  |L1.6656|
001a00  f8a8407a          STRH     r4,[r8,#0x7a]         ;1741
                  |L1.6660|
001a04  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1743  ; vz1_stat_cnt
001a08  f1a00001          SUB      r0,r0,#1              ;1743
001a0c  b200              SXTH     r0,r0                 ;1743
001a0e  f8a8007a          STRH     r0,[r8,#0x7a]         ;1743
001a12  280a              CMP      r0,#0xa               ;1744
001a14  d001              BEQ      |L1.6682|
001a16  2809              CMP      r0,#9                 ;1744
001a18  d106              BNE      |L1.6696|
                  |L1.6682|
001a1a  a38b              ADR      r3,|L1.7240|
001a1c  a290              ADR      r2,|L1.7264|
001a1e  a196              ADR      r1,|L1.7288|
001a20  a09b              ADR      r0,|L1.7312|
001a22  9700              STR      r7,[sp,#0]
001a24  f7fffffe          BL       show_mess
                  |L1.6696|
;;;1747   					"       ЗАРЯД        ",
;;;1748   					"      УСПЕШНО       ",
;;;1749   					"     ЗАВЕРШЕН       ",
;;;1750   					3000);
;;;1751   		}
;;;1752   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a28  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001a2c  2806              CMP      r0,#6
001a2e  d001              BEQ      |L1.6708|
001a30  2805              CMP      r0,#5
001a32  d109              BNE      |L1.6728|
                  |L1.6708|
;;;1753   		{
;;;1754   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a34  f2af332c          ADR      r3,|L1.5900|
001a38  f2af3218          ADR      r2,|L1.5924|
001a3c  f2af3104          ADR      r1,|L1.5948|
001a40  a099              ADR      r0,|L1.7336|
001a42  9700              STR      r7,[sp,#0]
001a44  f7fffffe          BL       show_mess
                  |L1.6728|
;;;1755   					"      ТУМБЛЕР       ",
;;;1756   					"     ВЫСОКОГО       ",
;;;1757   					"    НАПРЯЖЕНИЯ      ",
;;;1758   					3000);
;;;1759   		}
;;;1760   	if(sk_stat[1]==0)
001a48  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a4a  b928              CBNZ     r0,|L1.6744|
;;;1761   		{
;;;1762   		vz1_stat=vz1sOFF;
001a4c  f8886005          STRB     r6,[r8,#5]
;;;1763   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a50  2100              MOVS     r1,#0
001a52  4658              MOV      r0,r11
001a54  f7fffffe          BL       lc640_write
                  |L1.6744|
;;;1764   		}
;;;1765   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a58  2314              MOVS     r3,#0x14
001a5a  2200              MOVS     r2,#0
001a5c  2164              MOVS     r1,#0x64
001a5e  20d2              MOVS     r0,#0xd2
001a60  f7fffffe          BL       mess_send
                  |L1.6756|
;;;1766   	}
;;;1767   
;;;1768   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a64  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a68  2810              CMP      r0,#0x10
001a6a  d138              BNE      |L1.6878|
;;;1769   	{
;;;1770   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a6c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a70  2810              CMP      r0,#0x10
001a72  d102              BNE      |L1.6778|
001a74  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a78  b908              CBNZ     r0,|L1.6782|
                  |L1.6778|
;;;1771   		{
;;;1772   		vz1_stat_cnt=10;
001a7a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6782|
;;;1773   		}
;;;1774   	vz1_stat_cnt--;
001a7e  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a82  f1a00001          SUB      r0,r0,#1
001a86  b200              SXTH     r0,r0
001a88  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1775   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a8c  280a              CMP      r0,#0xa
001a8e  d001              BEQ      |L1.6804|
001a90  2809              CMP      r0,#9
001a92  d106              BNE      |L1.6818|
                  |L1.6804|
;;;1776   		{
;;;1777   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a94  a38a              ADR      r3,|L1.7360|
001a96  a290              ADR      r2,|L1.7384|
001a98  a177              ADR      r1,|L1.7288|
001a9a  a07d              ADR      r0,|L1.7312|
001a9c  9700              STR      r7,[sp,#0]
001a9e  f7fffffe          BL       show_mess
                  |L1.6818|
;;;1778   					"       ЗАРЯД        ",
;;;1779   					"     ПРЕКРАЩЕН      ",
;;;1780   					"                    ",
;;;1781   					3000);
;;;1782   		}
;;;1783   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001aa2  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001aa6  2806              CMP      r0,#6
001aa8  d001              BEQ      |L1.6830|
001aaa  2805              CMP      r0,#5
001aac  d109              BNE      |L1.6850|
                  |L1.6830|
;;;1784   		{
;;;1785   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001aae  f2af33a4          ADR      r3,|L1.5900|
001ab2  f2af3290          ADR      r2,|L1.5924|
001ab6  f2af317c          ADR      r1,|L1.5948|
001aba  a07b              ADR      r0,|L1.7336|
001abc  9700              STR      r7,[sp,#0]
001abe  f7fffffe          BL       show_mess
                  |L1.6850|
;;;1786   					"      ТУМБЛЕР       ",
;;;1787   					"     ВЫСОКОГО       ",
;;;1788   					"    НАПРЯЖЕНИЯ      ",
;;;1789   					3000);
;;;1790   		}
;;;1791   	if(sk_stat[1]==0)
001ac2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001ac4  b928              CBNZ     r0,|L1.6866|
;;;1792   		{
;;;1793   		vz1_stat=vz1sOFF;
001ac6  f8886005          STRB     r6,[r8,#5]
;;;1794   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001aca  2100              MOVS     r1,#0
001acc  4658              MOV      r0,r11
001ace  f7fffffe          BL       lc640_write
                  |L1.6866|
;;;1795   		}
;;;1796   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ad2  2314              MOVS     r3,#0x14
001ad4  2200              MOVS     r2,#0
001ad6  2164              MOVS     r1,#0x64
001ad8  20d2              MOVS     r0,#0xd2
001ada  f7fffffe          BL       mess_send
                  |L1.6878|
;;;1797   	}
;;;1798   
;;;1799   vz1_stat_old=vz1_stat;
001ade  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001ae2  f8880006          STRB     r0,[r8,#6]
;;;1800   
;;;1801   
;;;1802   
;;;1803   }
001ae6  e8bd8ff8          POP      {r3-r11,pc}
;;;1804   
                          ENDP

                  vz1_start PROC
;;;1806   //старт уравнительног заряда
;;;1807   char vz1_start(char hour)
001aea  b510              PUSH     {r4,lr}
;;;1808   {          
;;;1809   char out;
;;;1810   out=0;
001aec  f04f0000          MOV      r0,#0
;;;1811   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001af0  4923              LDR      r1,|L1.7040|
001af2  f1a10180          SUB      r1,r1,#0x80
001af6  f8912020          LDRB     r2,[r1,#0x20]  ; spc_stat
001afa  2a00              CMP      r2,#0
001afc  d110              BNE      |L1.6944|
001afe  4a7c              LDR      r2,|L1.7408|
001b00  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001b02  2a01              CMP      r2,#1
001b04  d00c              BEQ      |L1.6944|
001b06  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001b08  2a00              CMP      r2,#0
001b0a  d109              BNE      |L1.6944|
;;;1812   	{
;;;1813   	if(vz1_stat==vz1sOFF)
;;;1814   		{
;;;1815   		vz1_stat=vz1sSTEP1;
001b0c  f04f0001          MOV      r0,#1
001b10  7148              STRB     r0,[r1,#5]
;;;1816   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001b12  4601              MOV      r1,r0
001b14  f44f70c9          MOV      r0,#0x192
001b18  f7fffffe          BL       lc640_write
;;;1817   		out=1;
001b1c  f04f0001          MOV      r0,#1
                  |L1.6944|
;;;1818   		
;;;1819   		}
;;;1820   /*	spc_stat=spcVZ;
;;;1821   	__ee_spc_stat=spcVZ; 
;;;1822   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1823   	vz_cnt_h=hour;
;;;1824   	__ee_vz_cnt=hour*60;
;;;1825   	if(hour==0)__ee_vz_cnt=30;
;;;1826   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1827   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1828   	vz_cnt_h_=0;
;;;1829   	vz_cnt_s=0;
;;;1830   	vz_cnt_s_=0;
;;;1831   	
;;;1832   		*/
;;;1833   	}
;;;1834   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1835   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1836   //plazma=out;	
;;;1837   return out;
;;;1838   }
001b20  bd10              POP      {r4,pc}
;;;1839   
                          ENDP

                  vz1_stop PROC
;;;1841   //стоп уравнительног заряда
;;;1842   void vz1_stop(void)
001b22  4817              LDR      r0,|L1.7040|
;;;1843   {
;;;1844   if(vz1_stat!=vz1sOFF)
001b24  3880              SUBS     r0,r0,#0x80
001b26  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001b28  2900              CMP      r1,#0
001b2a  d006              BEQ      |L1.6970|
;;;1845   	{
;;;1846   	vz1_stat=vz1sSTOP;
001b2c  f04f0110          MOV      r1,#0x10
001b30  7141              STRB     r1,[r0,#5]
;;;1847   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001b32  f44f70c9          MOV      r0,#0x192
001b36  f7ffbffe          B.W      lc640_write
                  |L1.6970|
;;;1848   	}
;;;1849   }
001b3a  4770              BX       lr
;;;1850   
                          ENDP

                  vz2_drv PROC
;;;1852   //драйвер формовочного заряда
;;;1853   void vz2_drv(void)
001b3c  e92d4ff8          PUSH     {r3-r11,lr}
;;;1854   {
;;;1855   
;;;1856   if(vz2_stat==vz2sSTEP1)
001b40  f8df803c          LDR      r8,|L1.7040|
;;;1857   	{
;;;1858   	if(vz2_stat_old!=vz2_stat)
;;;1859   		{
;;;1860   		vz2_stat_cnt=5;
;;;1861   		}
;;;1862   	if(vz2_stat_cnt)
;;;1863   		{
;;;1864   		vz2_stat_cnt--;
;;;1865   		if(vz2_stat_cnt==0)
;;;1866   			{
;;;1867   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1868   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1869   			}
;;;1870   		}
;;;1871   	if(sk_stat[0]==1)
001b44  4d6b              LDR      r5,|L1.7412|
001b46  f1a80880          SUB      r8,r8,#0x80           ;1856
001b4a  f8980007          LDRB     r0,[r8,#7]            ;1856  ; vz2_stat
001b4e  2801              CMP      r0,#1                 ;1856
001b50  d114              BNE      |L1.7036|
001b52  f8980008          LDRB     r0,[r8,#8]            ;1858  ; vz2_stat_old
001b56  2801              CMP      r0,#1                 ;1858
001b58  d003              BEQ      |L1.7010|
001b5a  f04f0005          MOV      r0,#5                 ;1860
001b5e  f8a8007e          STRH     r0,[r8,#0x7e]         ;1860
                  |L1.7010|
001b62  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1862  ; vz2_stat_cnt
001b66  b140              CBZ      r0,|L1.7034|
001b68  f1a00001          SUB      r0,r0,#1              ;1864
001b6c  b200              SXTH     r0,r0                 ;1864
001b6e  f8a8007e          STRH     r0,[r8,#0x7e]         ;1864
001b72  b910              CBNZ     r0,|L1.7034|
001b74  f04f000c          MOV      r0,#0xc               ;1867
001b78  e0be              B        |L1.7416|
                  |L1.7034|
001b7a  e0c4              B        |L1.7430|
                  |L1.7036|
001b7c  e0e5              B        |L1.7498|
001b7e  0000              DCW      0x0000
                  |L1.7040|
                          DCD      ||area_number.25||+0x80
                  |L1.7044|
                          DCD      UZ_T
                  |L1.7048|
001b88  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001b8c  c720c2c5
001b90  cdd2c8cb
001b94  dfd6c8  
001b97  c8212120          DCB      200,"!!  ",0
001b9b  2000    
001b9d  00                DCB      0
001b9e  00                DCB      0
001b9f  00                DCB      0
                  |L1.7072|
001ba0  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001ba4  2020c2ca
001ba8  cbded7c5
001bac  cd202020
001bb0  20202020
001bb4  00      
001bb5  00                DCB      0
001bb6  00                DCB      0
001bb7  00                DCB      0
                  |L1.7096|
001bb8  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001bbc  c520ccce
001bc0  c6c5d220
001bc4  c1dbd2dc
001bc8  20202020          DCB      "    ",0
001bcc  00      
001bcd  00                DCB      0
001bce  00                DCB      0
001bcf  00                DCB      0
                  |L1.7120|
001bd0  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001bd4  cdc8d2c5
001bd8  cbdccddb
001bdc  c920c7  
001bdf  c0d0dfc4          DCB      192,208,223,196," ",0
001be3  2000    
001be5  00                DCB      0
001be6  00                DCB      0
001be7  00                DCB      0
                  |L1.7144|
001be8  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001bec  d2d3ccc1
001bf0  cbc5d0c0
001bf4  21212120
001bf8  20202020
001bfc  00      
001bfd  00                DCB      0
001bfe  00                DCB      0
001bff  00                DCB      0
                  |L1.7168|
001c00  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001c04  d1cbc520
001c08  c2cacbde
001c0c  d7c5cd  
001c0f  c8df2020          DCB      200,223,"   ",0
001c13  2000    
001c15  00                DCB      0
001c16  00                DCB      0
001c17  00                DCB      0
                  |L1.7192|
001c18  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001c1c  c4c5d220
001c20  cfd0cec4
001c24  cecbc6  
001c27  c5cd2020          DCB      197,205,"   ",0
001c2b  2000    
001c2d  00                DCB      0
001c2e  00                DCB      0
001c2f  00                DCB      0
                  |L1.7216|
001c30  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001c34  20c2dbca
001c38  cbded7c8
001c3c  d2c52020
001c40  20202020
001c44  00      
001c45  00                DCB      0
001c46  00                DCB      0
001c47  00                DCB      0
                  |L1.7240|
001c48  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001c4c  20c7c0c2
001c50  c5d0d8c5
001c54  cd202020
001c58  20202020
001c5c  00      
001c5d  00                DCB      0
001c5e  00                DCB      0
001c5f  00                DCB      0
                  |L1.7264|
001c60  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001c64  2020d3d1
001c68  cfc5d8cd
001c6c  ce202020
001c70  20202020
001c74  00      
001c75  00                DCB      0
001c76  00                DCB      0
001c77  00                DCB      0
                  |L1.7288|
001c78  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001c7c  202020c7
001c80  c0d0dfc4
001c84  20202020
001c88  20202020
001c8c  00      
001c8d  00                DCB      0
001c8e  00                DCB      0
001c8f  00                DCB      0
                  |L1.7312|
001c90  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001c94  d0c0c2cd
001c98  c8d2c5cb
001c9c  dccddbc9
001ca0  20202020          DCB      "    ",0
001ca4  00      
001ca5  00                DCB      0
001ca6  00                DCB      0
001ca7  00                DCB      0
                  |L1.7336|
001ca8  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001cac  20c2dbca
001cb0  cbded7c8
001cb4  d2c52020
001cb8  20202020
001cbc  00      
001cbd  00                DCB      0
001cbe  00                DCB      0
001cbf  00                DCB      0
                  |L1.7360|
001cc0  20202020          DCB      "                    ",0
001cc4  20202020
001cc8  20202020
001ccc  20202020
001cd0  20202020
001cd4  00      
001cd5  00                DCB      0
001cd6  00                DCB      0
001cd7  00                DCB      0
                  |L1.7384|
001cd8  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001cdc  20cfd0c5
001ce0  cad0c0d9
001ce4  c5cd2020
001ce8  20202020
001cec  00      
001ced  00                DCB      0
001cee  00                DCB      0
001cef  00                DCB      0
                  |L1.7408|
                          DCD      speedChrgBlckStat
                  |L1.7412|
                          DCD      sk_stat
                  |L1.7416|
001cf8  f8880007          STRB     r0,[r8,#7]            ;1867
001cfc  4601              MOV      r1,r0                 ;1868
001cfe  f44f70ca          MOV      r0,#0x194             ;1868
001d02  f7fffffe          BL       lc640_write
                  |L1.7430|
001d06  7828              LDRB     r0,[r5,#0]  ; sk_stat
001d08  2801              CMP      r0,#1
001d0a  d118              BNE      |L1.7486|
;;;1872   		{
;;;1873   		vz2_stat=vz2sSTEP2;
001d0c  f04f0002          MOV      r0,#2
001d10  f8880007          STRB     r0,[r8,#7]
;;;1874   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001d14  4601              MOV      r1,r0
001d16  f44f70ca          MOV      r0,#0x194
001d1a  f7fffffe          BL       lc640_write
;;;1875   		tree_up(iVZ2_STEP2_2,1,0,0);
001d1e  2300              MOVS     r3,#0
001d20  461a              MOV      r2,r3
001d22  2101              MOVS     r1,#1
001d24  20f6              MOVS     r0,#0xf6
001d26  f7fffffe          BL       tree_up
;;;1876   		tree_up(iVZ2_STEP2_1,0,0,0);
001d2a  2300              MOVS     r3,#0
001d2c  461a              MOV      r2,r3
001d2e  4619              MOV      r1,r3
001d30  20f5              MOVS     r0,#0xf5
001d32  f7fffffe          BL       tree_up
;;;1877   		ret(1200);
001d36  f44f6096          MOV      r0,#0x4b0
001d3a  f7fffffe          BL       ||ret||
                  |L1.7486|
;;;1878   		}
;;;1879   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d3e  2314              MOVS     r3,#0x14
001d40  2200              MOVS     r2,#0
001d42  2164              MOVS     r1,#0x64
001d44  20d2              MOVS     r0,#0xd2
001d46  f7fffffe          BL       mess_send
                  |L1.7498|
;;;1880   	}
;;;1881   
;;;1882   if(vz2_stat==vz2sSTEP2)
001d4a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001d4e  2802              CMP      r0,#2
001d50  d11a              BNE      |L1.7560|
;;;1883   	{
;;;1884   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001d52  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001d56  2802              CMP      r0,#2
001d58  d102              BNE      |L1.7520|
001d5a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001d5e  b918              CBNZ     r0,|L1.7528|
                  |L1.7520|
;;;1885   		{
;;;1886   		vz2_stat_cnt=15;
001d60  f04f000f          MOV      r0,#0xf
001d64  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7528|
;;;1887   		}
;;;1888   	vz2_stat_cnt--;
001d68  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001d6c  f1a00001          SUB      r0,r0,#1
001d70  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1889   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d74  f04f0314          MOV      r3,#0x14
001d78  f04f0200          MOV      r2,#0
001d7c  f04f0164          MOV      r1,#0x64
001d80  f04f00d2          MOV      r0,#0xd2
001d84  f7fffffe          BL       mess_send
                  |L1.7560|
;;;1890   	}
;;;1891   
;;;1892   if(vz2_stat==vz2sSTEP3)
001d88  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1893   	{
;;;1894   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1895   		{
;;;1896   		vz2_stat_cnt=10;
001d8c  240a              MOVS     r4,#0xa
001d8e  2600              MOVS     r6,#0
;;;1897   		cntrl_stat=0;
;;;1898   		cntrl_stat_new=0;
;;;1899   		cntrl_stat_old=0;
;;;1900   		}
;;;1901   	vz2_stat_cnt--;
;;;1902   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1903   		{
;;;1904   		show_mess(	"     ВКЛЮЧИТЕ       ",
001d90  f2413788          MOV      r7,#0x1388
001d94  2803              CMP      r0,#3                 ;1892
001d96  d13e              BNE      |L1.7702|
001d98  f8980008          LDRB     r0,[r8,#8]            ;1894  ; vz2_stat_old
001d9c  2803              CMP      r0,#3                 ;1894
001d9e  d102              BNE      |L1.7590|
001da0  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1894  ; vz2_stat_cnt
001da4  b938              CBNZ     r0,|L1.7606|
                  |L1.7590|
001da6  f8a8407e          STRH     r4,[r8,#0x7e]         ;1896
001daa  f8a86030          STRH     r6,[r8,#0x30]         ;1897
001dae  f8a8604c          STRH     r6,[r8,#0x4c]         ;1898
001db2  f8a86032          STRH     r6,[r8,#0x32]         ;1899
                  |L1.7606|
001db6  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1901  ; vz2_stat_cnt
001dba  f1a00001          SUB      r0,r0,#1              ;1901
001dbe  b200              SXTH     r0,r0                 ;1901
001dc0  f8a8007e          STRH     r0,[r8,#0x7e]         ;1901
001dc4  280a              CMP      r0,#0xa               ;1902
001dc6  d001              BEQ      |L1.7628|
001dc8  2809              CMP      r0,#9                 ;1902
001dca  d10a              BNE      |L1.7650|
                  |L1.7628|
001dcc  f2af63c4          ADR      r3,|L1.5900|
001dd0  f2af62b0          ADR      r2,|L1.5924|
001dd4  f2af619c          ADR      r1,|L1.5948|
001dd8  f2af6088          ADR      r0,|L1.5972|
001ddc  9700              STR      r7,[sp,#0]
001dde  f7fffffe          BL       show_mess
                  |L1.7650|
;;;1905   					"      ТУМБЛЕР       ",
;;;1906   					"     ВЫСОКОГО       ",
;;;1907   					"    НАПРЯЖЕНИЯ      ",
;;;1908   					5000);
;;;1909   		}
;;;1910   	if(sk_stat[1]==1)
001de2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001de4  2801              CMP      r0,#1
001de6  d110              BNE      |L1.7690|
;;;1911   		{
;;;1912   		vz2_stat=vz2sWRK1;
001de8  f8884007          STRB     r4,[r8,#7]
;;;1913   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001dec  210a              MOVS     r1,#0xa
001dee  f44f70ca          MOV      r0,#0x194
001df2  f7fffffe          BL       lc640_write
;;;1914   		volt_region=1;
001df6  f04f0001          MOV      r0,#1
001dfa  f888002d          STRB     r0,[r8,#0x2d]
;;;1915   		cntrl_stat=0;
001dfe  f8a86030          STRH     r6,[r8,#0x30]
;;;1916   		cntrl_stat_new=0;
001e02  f8a8604c          STRH     r6,[r8,#0x4c]
;;;1917   		cntrl_stat_old=0;
001e06  f8a86032          STRH     r6,[r8,#0x32]
                  |L1.7690|
;;;1918   		}
;;;1919   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001e0a  2314              MOVS     r3,#0x14
001e0c  2200              MOVS     r2,#0
001e0e  2164              MOVS     r1,#0x64
001e10  20d2              MOVS     r0,#0xd2
001e12  f7fffffe          BL       mess_send
                  |L1.7702|
;;;1920   	}
;;;1921   
;;;1922   if(vz2_stat==vz2sWRK1)
001e16  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1923   	{
;;;1924   
;;;1925   	if(vz2_stat_old!=vz2_stat)
;;;1926   		{
;;;1927   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001e1a  f8df9410          LDR      r9,|L1.8748|
;;;1928   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1929   		vz2_up_cnt=0L;
;;;1930   
;;;1931   		}
;;;1932   	vz2_wrk_cnt--;
;;;1933   	vz2_up_cnt++;
;;;1934   
;;;1935   	if(vz2_wrk_cnt==0)
;;;1936   		{
;;;1937   		vz2_stat=vz2sWRK2;
;;;1938   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1939   		}
;;;1940   	if(sk_stat[0]==0)
;;;1941   		{
;;;1942   		vz2_stat=vz2sERR2;
;;;1943   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1944   		}
;;;1945   	if(sk_stat[1]==0)
;;;1946   		{
;;;1947   		vz2_stat=vz2sERR3;
;;;1948   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1949   		}
;;;1950   	//if(abs(out_U-FZ_U1)<10)
;;;1951   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1952   		{
;;;1953   		if((Ib_ips_termokompensat[0]/10)<FZ_ISW12)
;;;1954   			{
;;;1955   			if(vz2_stat_ph2_cnt)
;;;1956   				{
;;;1957   				vz2_stat_ph2_cnt--;
;;;1958   				if(vz2_stat_ph2_cnt==0)
;;;1959   					{
;;;1960   					vz2_stat=vz2sWRK2;
;;;1961   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1962   					}
;;;1963   				}
;;;1964   			}
;;;1965   		else
;;;1966   			{
;;;1967   			vz2_stat_ph2_cnt=60;
;;;1968   			}
;;;1969   		}
;;;1970   	else
;;;1971   		{
;;;1972   		vz2_stat_ph2_cnt=60;
;;;1973   		}
;;;1974   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1975   		{
;;;1976   		volt_region=0;
;;;1977   		cntrl_stat=1000;
001e1e  f44f7b7a          MOV      r11,#0x3e8
001e22  f04f0a0b          MOV      r10,#0xb              ;1937
001e26  280a              CMP      r0,#0xa               ;1922
001e28  d17e              BNE      |L1.7976|
001e2a  f8980008          LDRB     r0,[r8,#8]            ;1925  ; vz2_stat_old
001e2e  280a              CMP      r0,#0xa               ;1925
001e30  d00a              BEQ      |L1.7752|
001e32  48ff              LDR      r0,|L1.8752|
001e34  f44f6161          MOV      r1,#0xe10             ;1927
001e38  f9b00000          LDRSH    r0,[r0,#0]            ;1927  ; FZ_T1
001e3c  fb00f001          MUL      r0,r0,r1              ;1927
001e40  f8c90044          STR      r0,[r9,#0x44]         ;1927  ; vz2_wrk_cnt
001e44  f8c96048          STR      r6,[r9,#0x48]         ;1929  ; vz2_up_cnt
                  |L1.7752|
001e48  f8d90044          LDR      r0,[r9,#0x44]         ;1932  ; vz2_wrk_cnt
001e4c  f1a00001          SUB      r0,r0,#1              ;1932
001e50  f8c90044          STR      r0,[r9,#0x44]         ;1932  ; vz2_wrk_cnt
001e54  f8d91048          LDR      r1,[r9,#0x48]         ;1933  ; vz2_up_cnt
001e58  f1010101          ADD      r1,r1,#1              ;1933
001e5c  f8c91048          STR      r1,[r9,#0x48]         ;1933  ; vz2_up_cnt
001e60  b930              CBNZ     r0,|L1.7792|
001e62  f888a007          STRB     r10,[r8,#7]           ;1937
001e66  210b              MOVS     r1,#0xb               ;1938
001e68  f44f70ca          MOV      r0,#0x194             ;1938
001e6c  f7fffffe          BL       lc640_write
                  |L1.7792|
001e70  7828              LDRB     r0,[r5,#0]            ;1940  ; sk_stat
001e72  b940              CBNZ     r0,|L1.7814|
001e74  f04f000d          MOV      r0,#0xd               ;1942
001e78  f8880007          STRB     r0,[r8,#7]            ;1942
001e7c  4601              MOV      r1,r0                 ;1943
001e7e  f44f70ca          MOV      r0,#0x194             ;1943
001e82  f7fffffe          BL       lc640_write
                  |L1.7814|
001e86  7868              LDRB     r0,[r5,#1]            ;1945  ; sk_stat
001e88  b940              CBNZ     r0,|L1.7836|
001e8a  f04f000e          MOV      r0,#0xe               ;1947
001e8e  f8880007          STRB     r0,[r8,#7]            ;1947
001e92  4601              MOV      r1,r0                 ;1948
001e94  f44f70ca          MOV      r0,#0x194             ;1948
001e98  f7fffffe          BL       lc640_write
                  |L1.7836|
001e9c  49e6              LDR      r1,|L1.8760|
001e9e  48e5              LDR      r0,|L1.8756|
001ea0  233c              MOVS     r3,#0x3c              ;1967
001ea2  f9b11000          LDRSH    r1,[r1,#0]            ;1951  ; FZ_U1
001ea6  f9b00000          LDRSH    r0,[r0,#0]            ;1951  ; out_U
001eaa  f101021e          ADD      r2,r1,#0x1e           ;1951
001eae  4290              CMP      r0,r2                 ;1951
001eb0  da20              BGE      |L1.7924|
001eb2  390a              SUBS     r1,r1,#0xa            ;1951
001eb4  4288              CMP      r0,r1                 ;1951
001eb6  dd1d              BLE      |L1.7924|
001eb8  48e0              LDR      r0,|L1.8764|
001eba  49e1              LDR      r1,|L1.8768|
001ebc  f9b00000          LDRSH    r0,[r0,#0]            ;1953  ; Ib_ips_termokompensat
001ec0  f9b11000          LDRSH    r1,[r1,#0]            ;1953  ; FZ_ISW12
001ec4  fb90f0f4          SDIV     r0,r0,r4              ;1953
001ec8  4288              CMP      r0,r1                 ;1953
001eca  da10              BGE      |L1.7918|
001ecc  f9b90000          LDRSH    r0,[r9,#0]            ;1955  ; vz2_stat_ph2_cnt
001ed0  b190              CBZ      r0,|L1.7928|
001ed2  f1a00001          SUB      r0,r0,#1              ;1957
001ed6  b200              SXTH     r0,r0                 ;1957
001ed8  f8a90000          STRH     r0,[r9,#0]            ;1957
001edc  b960              CBNZ     r0,|L1.7928|
001ede  f888a007          STRB     r10,[r8,#7]           ;1960
001ee2  210b              MOVS     r1,#0xb               ;1961
001ee4  f44f70ca          MOV      r0,#0x194             ;1961
001ee8  f7fffffe          BL       lc640_write
001eec  e004              B        |L1.7928|
                  |L1.7918|
001eee  f8a93000          STRH     r3,[r9,#0]            ;1967
001ef2  e001              B        |L1.7928|
                  |L1.7924|
001ef4  f8a93000          STRH     r3,[r9,#0]            ;1972
                  |L1.7928|
001ef8  f9b8004e          LDRSH    r0,[r8,#0x4e]         ;1974  ; Ibmax
001efc  f8b81050          LDRH     r1,[r8,#0x50]         ;1974  ; IZMAX_
001f00  fb90f0f4          SDIV     r0,r0,r4              ;1974
001f04  4288              CMP      r0,r1                 ;1974
001f06  dd18              BLE      |L1.7994|
001f08  f9b82030          LDRSH    r2,[r8,#0x30]         ;1974  ; cntrl_stat
001f0c  2a14              CMP      r2,#0x14              ;1974
001f0e  dc14              BGT      |L1.7994|
001f10  f898202d          LDRB     r2,[r8,#0x2d]         ;1974  ; volt_region
001f14  2a01              CMP      r2,#1                 ;1974
001f16  d110              BNE      |L1.7994|
001f18  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1974  ; volt_region_cnt
001f1c  b96a              CBNZ     r2,|L1.7994|
001f1e  f888602d          STRB     r6,[r8,#0x2d]         ;1976
001f22  f8a8b030          STRH     r11,[r8,#0x30]
;;;1978   		cntrl_stat_new=1000;
001f26  e000              B        |L1.7978|
                  |L1.7976|
001f28  e032              B        |L1.8080|
                  |L1.7978|
001f2a  f8a8b04c          STRH     r11,[r8,#0x4c]
;;;1979   		cntrl_stat_old=1000;
001f2e  f8a8b032          STRH     r11,[r8,#0x32]
;;;1980   		volt_region_cnt=110;
001f32  f04f026e          MOV      r2,#0x6e
001f36  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7994|
;;;1981   		}
;;;1982   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001f3a  4288              CMP      r0,r1
001f3c  da15              BGE      |L1.8042|
001f3e  f9b80030          LDRSH    r0,[r8,#0x30]  ; cntrl_stat
001f42  4558              CMP      r0,r11
001f44  db11              BLT      |L1.8042|
001f46  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
001f4a  b970              CBNZ     r0,|L1.8042|
001f4c  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001f50  b958              CBNZ     r0,|L1.8042|
;;;1983   		{
;;;1984   		volt_region=1;
001f52  f04f0001          MOV      r0,#1
001f56  f888002d          STRB     r0,[r8,#0x2d]
;;;1985   		cntrl_stat=10;
001f5a  f8a84030          STRH     r4,[r8,#0x30]
;;;1986   		cntrl_stat_new=10;
001f5e  f8a8404c          STRH     r4,[r8,#0x4c]
;;;1987   		cntrl_stat_old=10;
001f62  f8a84032          STRH     r4,[r8,#0x32]
;;;1988   		volt_region_cnt=10;
001f66  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.8042|
;;;1989   		}
;;;1990   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f6a  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
001f6e  b110              CBZ      r0,|L1.8054|
;;;1991   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f70  2801              CMP      r0,#1
001f72  d007              BEQ      |L1.8068|
001f74  e00c              B        |L1.8080|
                  |L1.8054|
001f76  2314              MOVS     r3,#0x14              ;1990
001f78  2200              MOVS     r2,#0                 ;1990
001f7a  2164              MOVS     r1,#0x64              ;1990
001f7c  20d2              MOVS     r0,#0xd2              ;1990
001f7e  f7fffffe          BL       mess_send
001f82  e005              B        |L1.8080|
                  |L1.8068|
001f84  2314              MOVS     r3,#0x14
001f86  2201              MOVS     r2,#1
001f88  2164              MOVS     r1,#0x64
001f8a  20d2              MOVS     r0,#0xd2
001f8c  f7fffffe          BL       mess_send
                  |L1.8080|
;;;1992   	}
;;;1993   
;;;1994   if(vz2_stat==vz2sWRK2)
001f90  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f94  280b              CMP      r0,#0xb
001f96  d177              BNE      |L1.8328|
;;;1995   	{
;;;1996   	if(vz2_stat_old!=vz2_stat)
001f98  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001f9c  280b              CMP      r0,#0xb
001f9e  d008              BEQ      |L1.8114|
;;;1997   		{
;;;1998   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001fa0  48a8              LDR      r0,|L1.8772|
001fa2  f44f6161          MOV      r1,#0xe10
001fa6  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001faa  fb00f001          MUL      r0,r0,r1
001fae  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.8114|
;;;1999   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;2000   		//vz2_up_cnt=0L;
;;;2001   		}
;;;2002   	vz2_wrk_cnt--;
001fb2  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001fb6  f1a00001          SUB      r0,r0,#1
001fba  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;2003   	vz2_up_cnt++;
001fbe  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001fc2  f1010101          ADD      r1,r1,#1
001fc6  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;2004   
;;;2005   	if(vz2_wrk_cnt==0)
001fca  b958              CBNZ     r0,|L1.8164|
;;;2006   		{
;;;2007   		vz2_stat=vz2sFINE;
001fcc  f04f0012          MOV      r0,#0x12
001fd0  f8880007          STRB     r0,[r8,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001fd4  4601              MOV      r1,r0
001fd6  f44f70ca          MOV      r0,#0x194
001fda  f7fffffe          BL       lc640_write
;;;2009   		fz_mem_hndl(0);
001fde  2000              MOVS     r0,#0
001fe0  f7fffffe          BL       fz_mem_hndl
                  |L1.8164|
;;;2010   		}
;;;2011   	if(sk_stat[0]==0)
001fe4  7828              LDRB     r0,[r5,#0]  ; sk_stat
001fe6  b940              CBNZ     r0,|L1.8186|
;;;2012   		{
;;;2013   		vz2_stat=vz2sERR5;
001fe8  f04f0010          MOV      r0,#0x10
001fec  f8880007          STRB     r0,[r8,#7]
;;;2014   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001ff0  4601              MOV      r1,r0
001ff2  f44f70ca          MOV      r0,#0x194
001ff6  f7fffffe          BL       lc640_write
                  |L1.8186|
;;;2015   		}
;;;2016   	if(sk_stat[1]==0)
001ffa  7868              LDRB     r0,[r5,#1]  ; sk_stat
001ffc  b940              CBNZ     r0,|L1.8208|
;;;2017   		{
;;;2018   		vz2_stat=vz2sERR6;
001ffe  f04f0011          MOV      r0,#0x11
002002  f8880007          STRB     r0,[r8,#7]
;;;2019   		lc640_write(EE_VZ2_STAT,vz2sERR6);
002006  4601              MOV      r1,r0
002008  f44f70ca          MOV      r0,#0x194
00200c  f7fffffe          BL       lc640_write
                  |L1.8208|
;;;2020   		}
;;;2021   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
002010  f9b8004e          LDRSH    r0,[r8,#0x4e]  ; Ibmax
002014  f8b81050          LDRH     r1,[r8,#0x50]  ; IZMAX_
002018  fb90f0f4          SDIV     r0,r0,r4
00201c  4288              CMP      r0,r1
00201e  dd16              BLE      |L1.8270|
002020  f9b82030          LDRSH    r2,[r8,#0x30]  ; cntrl_stat
002024  2a14              CMP      r2,#0x14
002026  dc12              BGT      |L1.8270|
002028  f898202d          LDRB     r2,[r8,#0x2d]  ; volt_region
00202c  2a01              CMP      r2,#1
00202e  d10e              BNE      |L1.8270|
002030  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
002034  b95a              CBNZ     r2,|L1.8270|
;;;2022   		{
;;;2023   		volt_region=0;
002036  f888602d          STRB     r6,[r8,#0x2d]
;;;2024   		cntrl_stat=1000;
00203a  f8a8b030          STRH     r11,[r8,#0x30]
;;;2025   		cntrl_stat_new=1000;
00203e  f8a8b04c          STRH     r11,[r8,#0x4c]
;;;2026   		cntrl_stat_old=1000;
002042  f8a8b032          STRH     r11,[r8,#0x32]
;;;2027   		volt_region_cnt=110;
002046  f04f026e          MOV      r2,#0x6e
00204a  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.8270|
;;;2028   		}
;;;2029   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00204e  4288              CMP      r0,r1
002050  da15              BGE      |L1.8318|
002052  f9b80030          LDRSH    r0,[r8,#0x30]  ; cntrl_stat
002056  4558              CMP      r0,r11
002058  db11              BLT      |L1.8318|
00205a  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
00205e  b970              CBNZ     r0,|L1.8318|
002060  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
002064  b958              CBNZ     r0,|L1.8318|
;;;2030   		{
;;;2031   		volt_region=1;
002066  f04f0001          MOV      r0,#1
00206a  f888002d          STRB     r0,[r8,#0x2d]
;;;2032   		cntrl_stat=10;
00206e  f8a84030          STRH     r4,[r8,#0x30]
;;;2033   		cntrl_stat_new=10;
002072  f8a8404c          STRH     r4,[r8,#0x4c]
;;;2034   		cntrl_stat_old=10;
002076  f8a84032          STRH     r4,[r8,#0x32]
;;;2035   		volt_region_cnt=10;
00207a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.8318|
;;;2036   		}
;;;2037   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00207e  f898002d          LDRB     r0,[r8,#0x2d]  ; volt_region
002082  b110              CBZ      r0,|L1.8330|
;;;2038   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002084  2801              CMP      r0,#1
002086  d007              BEQ      |L1.8344|
                  |L1.8328|
002088  e00c              B        |L1.8356|
                  |L1.8330|
00208a  2314              MOVS     r3,#0x14              ;2037
00208c  2200              MOVS     r2,#0                 ;2037
00208e  2164              MOVS     r1,#0x64              ;2037
002090  20d2              MOVS     r0,#0xd2              ;2037
002092  f7fffffe          BL       mess_send
002096  e005              B        |L1.8356|
                  |L1.8344|
002098  2314              MOVS     r3,#0x14
00209a  2201              MOVS     r2,#1
00209c  2164              MOVS     r1,#0x64
00209e  20d2              MOVS     r0,#0xd2
0020a0  f7fffffe          BL       mess_send
                  |L1.8356|
;;;2039   	}
;;;2040   
;;;2041   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
0020a4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020a8  280c              CMP      r0,#0xc
0020aa  d123              BNE      |L1.8436|
;;;2042   	{
;;;2043   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020ac  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020b0  280c              CMP      r0,#0xc
0020b2  d102              BNE      |L1.8378|
0020b4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020b8  b908              CBNZ     r0,|L1.8382|
                  |L1.8378|
;;;2044   		{
;;;2045   		vz2_stat_cnt=10;
0020ba  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8382|
;;;2046   		}
;;;2047   	vz2_stat_cnt--;
0020be  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020c2  f1a00001          SUB      r0,r0,#1
0020c6  b200              SXTH     r0,r0
0020c8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2048   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020cc  280a              CMP      r0,#0xa
0020ce  d001              BEQ      |L1.8404|
0020d0  2809              CMP      r0,#9
0020d2  d109              BNE      |L1.8424|
                  |L1.8404|
;;;2049   		{
;;;2050   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020d4  f2af5350          ADR      r3,|L1.7048|
0020d8  f2af523c          ADR      r2,|L1.7072|
0020dc  f2af5128          ADR      r1,|L1.7096|
0020e0  a059              ADR      r0,|L1.8776|
0020e2  9700              STR      r7,[sp,#0]
0020e4  f7fffffe          BL       show_mess
                  |L1.8424|
;;;2051   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2052   					"      ВКЛЮЧЕН       ",
;;;2053   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2054   					5000);
;;;2055   		}
;;;2056   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020e8  2314              MOVS     r3,#0x14
0020ea  2200              MOVS     r2,#0
0020ec  2164              MOVS     r1,#0x64
0020ee  20d2              MOVS     r0,#0xd2
0020f0  f7fffffe          BL       mess_send
                  |L1.8436|
;;;2057   	}
;;;2058   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
0020f4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020f8  280d              CMP      r0,#0xd
0020fa  d12d              BNE      |L1.8536|
;;;2059   	{
;;;2060   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020fc  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002100  280d              CMP      r0,#0xd
002102  d102              BNE      |L1.8458|
002104  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002108  b908              CBNZ     r0,|L1.8462|
                  |L1.8458|
;;;2061   		{
;;;2062   		vz2_stat_cnt=10;
00210a  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8462|
;;;2063   		}
;;;2064   	vz2_stat_cnt--;
00210e  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002112  f1a00001          SUB      r0,r0,#1
002116  b200              SXTH     r0,r0
002118  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2065   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00211c  280a              CMP      r0,#0xa
00211e  d001              BEQ      |L1.8484|
002120  2809              CMP      r0,#9
002122  d109              BNE      |L1.8504|
                  |L1.8484|
;;;2066   		{
;;;2067   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002124  f6af2380          ADR      r3,|L1.5800|
002128  f6af226c          ADR      r2,|L1.5824|
00212c  f6af2158          ADR      r1,|L1.5848|
002130  a045              ADR      r0,|L1.8776|
002132  9700              STR      r7,[sp,#0]
002134  f7fffffe          BL       show_mess
                  |L1.8504|
;;;2068   					"    ЗАБЛОКИРОВАН    ",
;;;2069   					"     НЕИСПРАВНА     ",
;;;2070   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2071   					5000);
;;;2072   		}
;;;2073   	if(sk_stat[0]==1)
002138  7828              LDRB     r0,[r5,#0]  ; sk_stat
00213a  2801              CMP      r0,#1
00213c  d106              BNE      |L1.8524|
;;;2074   		{
;;;2075   		vz2_stat=vz2sWRK1;
00213e  f8884007          STRB     r4,[r8,#7]
;;;2076   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
002142  210a              MOVS     r1,#0xa
002144  f44f70ca          MOV      r0,#0x194
002148  f7fffffe          BL       lc640_write
                  |L1.8524|
;;;2077   		}
;;;2078   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00214c  2314              MOVS     r3,#0x14
00214e  2200              MOVS     r2,#0
002150  2164              MOVS     r1,#0x64
002152  20d2              MOVS     r0,#0xd2
002154  f7fffffe          BL       mess_send
                  |L1.8536|
;;;2079   	}
;;;2080   
;;;2081   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
002158  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00215c  280e              CMP      r0,#0xe
00215e  d12c              BNE      |L1.8634|
;;;2082   	{
;;;2083   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002160  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002164  280e              CMP      r0,#0xe
002166  d102              BNE      |L1.8558|
002168  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00216c  b908              CBNZ     r0,|L1.8562|
                  |L1.8558|
;;;2084   		{
;;;2085   		vz2_stat_cnt=10;
00216e  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8562|
;;;2086   		}
;;;2087   	vz2_stat_cnt--;
002172  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002176  f1a00001          SUB      r0,r0,#1
00217a  b200              SXTH     r0,r0
00217c  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2088   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002180  280a              CMP      r0,#0xa
002182  d001              BEQ      |L1.8584|
002184  2809              CMP      r0,#9
002186  d108              BNE      |L1.8602|
                  |L1.8584|
;;;2089   		{
;;;2090   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002188  a335              ADR      r3,|L1.8800|
00218a  f2af528c          ADR      r2,|L1.7168|
00218e  f2af5178          ADR      r1,|L1.7192|
002192  a02d              ADR      r0,|L1.8776|
002194  9700              STR      r7,[sp,#0]
002196  f7fffffe          BL       show_mess
                  |L1.8602|
;;;2091   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2092   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2093   					"    ТУМБЛЕРА!!!     ",
;;;2094   					5000);
;;;2095   		}
;;;2096   	if(sk_stat[1]==1)
00219a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00219c  2801              CMP      r0,#1
00219e  d106              BNE      |L1.8622|
;;;2097   		{
;;;2098   		vz2_stat=vz2sWRK1;
0021a0  f8884007          STRB     r4,[r8,#7]
;;;2099   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0021a4  210a              MOVS     r1,#0xa
0021a6  f44f70ca          MOV      r0,#0x194
0021aa  f7fffffe          BL       lc640_write
                  |L1.8622|
;;;2100   		}
;;;2101   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021ae  2314              MOVS     r3,#0x14
0021b0  2200              MOVS     r2,#0
0021b2  2164              MOVS     r1,#0x64
0021b4  20d2              MOVS     r0,#0xd2
0021b6  f7fffffe          BL       mess_send
                  |L1.8634|
;;;2102   	}
;;;2103   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
0021ba  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0021be  2810              CMP      r0,#0x10
0021c0  d12d              BNE      |L1.8734|
;;;2104   	{
;;;2105   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0021c2  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0021c6  2810              CMP      r0,#0x10
0021c8  d102              BNE      |L1.8656|
0021ca  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021ce  b908              CBNZ     r0,|L1.8660|
                  |L1.8656|
;;;2106   		{
;;;2107   		vz2_stat_cnt=10;
0021d0  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8660|
;;;2108   		}
;;;2109   	vz2_stat_cnt--;
0021d4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021d8  f1a00001          SUB      r0,r0,#1
0021dc  b200              SXTH     r0,r0
0021de  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2110   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021e2  280a              CMP      r0,#0xa
0021e4  d001              BEQ      |L1.8682|
0021e6  2809              CMP      r0,#9
0021e8  d109              BNE      |L1.8702|
                  |L1.8682|
;;;2111   		{
;;;2112   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021ea  f6af3344          ADR      r3,|L1.5800|
0021ee  f6af3230          ADR      r2,|L1.5824|
0021f2  f6af311c          ADR      r1,|L1.5848|
0021f6  a014              ADR      r0,|L1.8776|
0021f8  9700              STR      r7,[sp,#0]
0021fa  f7fffffe          BL       show_mess
                  |L1.8702|
;;;2113   					"    ЗАБЛОКИРОВАН    ",
;;;2114   					"     НЕИСПРАВНА     ",
;;;2115   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2116   					5000);
;;;2117   		}
;;;2118   	if(sk_stat[0]==1)
0021fe  7828              LDRB     r0,[r5,#0]  ; sk_stat
002200  2801              CMP      r0,#1
002202  d106              BNE      |L1.8722|
;;;2119   		{
;;;2120   		vz2_stat=vz2sWRK2;
002204  f888a007          STRB     r10,[r8,#7]
;;;2121   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002208  210b              MOVS     r1,#0xb
00220a  f44f70ca          MOV      r0,#0x194
00220e  f7fffffe          BL       lc640_write
                  |L1.8722|
;;;2122   		}
;;;2123   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002212  2314              MOVS     r3,#0x14
002214  2200              MOVS     r2,#0
002216  2164              MOVS     r1,#0x64
002218  20d2              MOVS     r0,#0xd2
00221a  f7fffffe          BL       mess_send
                  |L1.8734|
;;;2124   	}
;;;2125   
;;;2126   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00221e  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002222  2811              CMP      r0,#0x11
002224  d155              BNE      |L1.8914|
;;;2127   	{
;;;2128   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002226  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
00222a  e025              B        |L1.8824|
                  |L1.8748|
                          DCD      ||area_number.25||+0x80
                  |L1.8752|
                          DCD      FZ_T1
                  |L1.8756|
                          DCD      out_U
                  |L1.8760|
                          DCD      FZ_U1
                  |L1.8764|
                          DCD      Ib_ips_termokompensat
                  |L1.8768|
                          DCD      FZ_ISW12
                  |L1.8772|
                          DCD      FZ_T2
                  |L1.8776|
002248  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
00224c  cccec2ce
002250  d7cddbc9
002254  20c7c0  
002257  d0dfc420          DCB      208,223,196,"  ",0
00225b  2000    
00225d  00                DCB      0
00225e  00                DCB      0
00225f  00                DCB      0
                  |L1.8800|
002260  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002264  d2d3ccc1
002268  cbc5d0c0
00226c  21212120
002270  20202020
002274  00      
002275  00                DCB      0
002276  00                DCB      0
002277  00                DCB      0
                  |L1.8824|
002278  2811              CMP      r0,#0x11
00227a  d102              BNE      |L1.8834|
00227c  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002280  b908              CBNZ     r0,|L1.8838|
                  |L1.8834|
;;;2129   		{
;;;2130   		vz2_stat_cnt=10;
002282  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8838|
;;;2131   		}
;;;2132   	vz2_stat_cnt--;
002286  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00228a  f1a00001          SUB      r0,r0,#1
00228e  b200              SXTH     r0,r0
002290  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2133   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002294  280a              CMP      r0,#0xa
002296  d001              BEQ      |L1.8860|
002298  2809              CMP      r0,#9
00229a  d10a              BNE      |L1.8882|
                  |L1.8860|
;;;2134   		{
;;;2135   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00229c  f2af0340          ADR      r3,|L1.8800|
0022a0  f2af62a4          ADR      r2,|L1.7168|
0022a4  f2af6190          ADR      r1,|L1.7192|
0022a8  f2af0064          ADR      r0,|L1.8776|
0022ac  9700              STR      r7,[sp,#0]
0022ae  f7fffffe          BL       show_mess
                  |L1.8882|
;;;2136   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2137   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2138   					"    ТУМБЛЕРА!!!     ",
;;;2139   					5000);
;;;2140   		}
;;;2141   	if(sk_stat[1]==1)
0022b2  7868              LDRB     r0,[r5,#1]  ; sk_stat
0022b4  2801              CMP      r0,#1
0022b6  d106              BNE      |L1.8902|
;;;2142   		{
;;;2143   		vz2_stat=vz2sWRK2;
0022b8  f888a007          STRB     r10,[r8,#7]
;;;2144   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0022bc  210b              MOVS     r1,#0xb
0022be  f44f70ca          MOV      r0,#0x194
0022c2  f7fffffe          BL       lc640_write
                  |L1.8902|
;;;2145   		}
;;;2146   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0022c6  2314              MOVS     r3,#0x14
0022c8  2200              MOVS     r2,#0
0022ca  2164              MOVS     r1,#0x64
0022cc  20d2              MOVS     r0,#0xd2
0022ce  f7fffffe          BL       mess_send
                  |L1.8914|
;;;2147   	}
;;;2148   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0022d2  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0022d6  280f              CMP      r0,#0xf
0022d8  d12f              BNE      |L1.9018|
;;;2149   	{
;;;2150   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0022da  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0022de  280f              CMP      r0,#0xf
0022e0  d102              BNE      |L1.8936|
0022e2  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0022e6  b908              CBNZ     r0,|L1.8940|
                  |L1.8936|
;;;2151   		{
;;;2152   		vz2_stat_cnt=10;
0022e8  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8940|
;;;2153   		}
;;;2154   	vz2_stat_cnt--;
0022ec  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0022f0  f1a00001          SUB      r0,r0,#1
0022f4  b200              SXTH     r0,r0
0022f6  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2155   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0022fa  280a              CMP      r0,#0xa
0022fc  d001              BEQ      |L1.8962|
0022fe  2809              CMP      r0,#9
002300  d10a              BNE      |L1.8984|
                  |L1.8962|
;;;2156   		{
;;;2157   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002302  f6af33f8          ADR      r3,|L1.5900|
002306  f6af32e4          ADR      r2,|L1.5924|
00230a  f6af31d0          ADR      r1,|L1.5948|
00230e  f2af6068          ADR      r0,|L1.7336|
002312  9700              STR      r7,[sp,#0]
002314  f7fffffe          BL       show_mess
                  |L1.8984|
;;;2158   					"      ТУМБЛЕР       ",
;;;2159   					"     ВЫСОКОГО       ",
;;;2160   					"    НАПРЯЖЕНИЯ      ",
;;;2161   					5000);
;;;2162   		}
;;;2163   	if(sk_stat[1]==0)
002318  7868              LDRB     r0,[r5,#1]  ; sk_stat
00231a  b940              CBNZ     r0,|L1.9006|
;;;2164   		{
;;;2165   		vz2_stat=vz2sOFF;
00231c  f8886007          STRB     r6,[r8,#7]
;;;2166   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002320  2100              MOVS     r1,#0
002322  f44f70ca          MOV      r0,#0x194
002326  f7fffffe          BL       lc640_write
;;;2167   		vz_stop();
00232a  f7fffffe          BL       vz_stop
                  |L1.9006|
;;;2168   
;;;2169   		}
;;;2170   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00232e  2314              MOVS     r3,#0x14
002330  2200              MOVS     r2,#0
002332  2164              MOVS     r1,#0x64
002334  20d2              MOVS     r0,#0xd2
002336  f7fffffe          BL       mess_send
                  |L1.9018|
;;;2171   	}
;;;2172   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
00233a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2173   	{
;;;2174   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2175   		{
;;;2176   		vz2_stat_cnt=10;
;;;2177   		}
;;;2178   	vz2_stat_cnt--;
;;;2179   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2180   		{
;;;2181   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00233e  f64037b8          MOV      r7,#0xbb8
002342  2812              CMP      r0,#0x12              ;2172
002344  d13d              BNE      |L1.9154|
002346  f8980008          LDRB     r0,[r8,#8]            ;2174  ; vz2_stat_old
00234a  2812              CMP      r0,#0x12              ;2174
00234c  d102              BNE      |L1.9044|
00234e  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2174  ; vz2_stat_cnt
002352  b908              CBNZ     r0,|L1.9048|
                  |L1.9044|
002354  f8a8407e          STRH     r4,[r8,#0x7e]         ;2176
                  |L1.9048|
002358  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2178  ; vz2_stat_cnt
00235c  f1a00001          SUB      r0,r0,#1              ;2178
002360  b200              SXTH     r0,r0                 ;2178
002362  f8a8007e          STRH     r0,[r8,#0x7e]         ;2178
002366  280a              CMP      r0,#0xa               ;2179
002368  d001              BEQ      |L1.9070|
00236a  2809              CMP      r0,#9                 ;2179
00236c  d109              BNE      |L1.9090|
                  |L1.9070|
00236e  f2af7328          ADR      r3,|L1.7240|
002372  f2af7214          ADR      r2,|L1.7264|
002376  f2af7100          ADR      r1,|L1.7288|
00237a  a0ff              ADR      r0,|L1.10104|
00237c  9700              STR      r7,[sp,#0]
00237e  f7fffffe          BL       show_mess
                  |L1.9090|
;;;2182   					"       ЗАРЯД        ",
;;;2183   					"      УСПЕШНО       ",
;;;2184   					"     ЗАВЕРШЕН       ",
;;;2185   					3000);
;;;2186   		}
;;;2187   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002382  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
002386  2806              CMP      r0,#6
002388  d001              BEQ      |L1.9102|
00238a  2805              CMP      r0,#5
00238c  d10a              BNE      |L1.9124|
                  |L1.9102|
;;;2188   		{
;;;2189   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00238e  f6af4384          ADR      r3,|L1.5900|
002392  f6af4270          ADR      r2,|L1.5924|
002396  f6af415c          ADR      r1,|L1.5948|
00239a  f2af60f4          ADR      r0,|L1.7336|
00239e  9700              STR      r7,[sp,#0]
0023a0  f7fffffe          BL       show_mess
                  |L1.9124|
;;;2190   					"      ТУМБЛЕР       ",
;;;2191   					"     ВЫСОКОГО       ",
;;;2192   					"    НАПРЯЖЕНИЯ      ",
;;;2193   					3000);
;;;2194   		}
;;;2195   	if(sk_stat[1]==0)
0023a4  7868              LDRB     r0,[r5,#1]  ; sk_stat
0023a6  b930              CBNZ     r0,|L1.9142|
;;;2196   		{
;;;2197   		vz2_stat=vz2sOFF;
0023a8  f8886007          STRB     r6,[r8,#7]
;;;2198   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0023ac  2100              MOVS     r1,#0
0023ae  f44f70ca          MOV      r0,#0x194
0023b2  f7fffffe          BL       lc640_write
                  |L1.9142|
;;;2199   		}
;;;2200   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023b6  2314              MOVS     r3,#0x14
0023b8  2200              MOVS     r2,#0
0023ba  2164              MOVS     r1,#0x64
0023bc  20d2              MOVS     r0,#0xd2
0023be  f7fffffe          BL       mess_send
                  |L1.9154|
;;;2201   	}
;;;2202   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0023c2  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0023c6  2813              CMP      r0,#0x13
0023c8  d13d              BNE      |L1.9286|
;;;2203   	{
;;;2204   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0023ca  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0023ce  2813              CMP      r0,#0x13
0023d0  d102              BNE      |L1.9176|
0023d2  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0023d6  b908              CBNZ     r0,|L1.9180|
                  |L1.9176|
;;;2205   		{
;;;2206   		vz2_stat_cnt=10;
0023d8  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9180|
;;;2207   		}
;;;2208   	vz2_stat_cnt--;
0023dc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0023e0  f1a00001          SUB      r0,r0,#1
0023e4  b200              SXTH     r0,r0
0023e6  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2209   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0023ea  280a              CMP      r0,#0xa
0023ec  d001              BEQ      |L1.9202|
0023ee  2809              CMP      r0,#9
0023f0  d109              BNE      |L1.9222|
                  |L1.9202|
;;;2210   		{
;;;2211   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0023f2  f2af7334          ADR      r3,|L1.7360|
0023f6  f2af7220          ADR      r2,|L1.7384|
0023fa  f2af7184          ADR      r1,|L1.7288|
0023fe  a0de              ADR      r0,|L1.10104|
002400  9700              STR      r7,[sp,#0]
002402  f7fffffe          BL       show_mess
                  |L1.9222|
;;;2212   					"       ЗАРЯД        ",
;;;2213   					"     ПРЕКРАЩЕН      ",
;;;2214   					"                    ",
;;;2215   					3000);
;;;2216   		}
;;;2217   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002406  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
00240a  2806              CMP      r0,#6
00240c  d001              BEQ      |L1.9234|
00240e  2805              CMP      r0,#5
002410  d10a              BNE      |L1.9256|
                  |L1.9234|
;;;2218   		{
;;;2219   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002412  f6af5308          ADR      r3,|L1.5900|
002416  f6af42f4          ADR      r2,|L1.5924|
00241a  f6af41e0          ADR      r1,|L1.5948|
00241e  f2af7078          ADR      r0,|L1.7336|
002422  9700              STR      r7,[sp,#0]
002424  f7fffffe          BL       show_mess
                  |L1.9256|
;;;2220   					"      ТУМБЛЕР       ",
;;;2221   					"     ВЫСОКОГО       ",
;;;2222   					"    НАПРЯЖЕНИЯ      ",
;;;2223   					3000);
;;;2224   		}
;;;2225   	if(sk_stat[1]==0)
002428  7868              LDRB     r0,[r5,#1]  ; sk_stat
00242a  b930              CBNZ     r0,|L1.9274|
;;;2226   		{
;;;2227   		vz2_stat=vz2sOFF;
00242c  f8886007          STRB     r6,[r8,#7]
;;;2228   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002430  2100              MOVS     r1,#0
002432  f44f70ca          MOV      r0,#0x194
002436  f7fffffe          BL       lc640_write
                  |L1.9274|
;;;2229   		}
;;;2230   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00243a  2314              MOVS     r3,#0x14
00243c  2200              MOVS     r2,#0
00243e  2164              MOVS     r1,#0x64
002440  20d2              MOVS     r0,#0xd2
002442  f7fffffe          BL       mess_send
                  |L1.9286|
;;;2231   	}
;;;2232   vz2_stat_old=vz2_stat;
002446  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00244a  f8880008          STRB     r0,[r8,#8]
;;;2233   
;;;2234   }
00244e  e8bd8ff8          POP      {r3-r11,pc}
;;;2235   
                          ENDP

                  vz2_start PROC
;;;2237   //старт уравнительног заряда
;;;2238   char vz2_start(char hour)
002452  b510              PUSH     {r4,lr}
;;;2239   {          
;;;2240   char out;
;;;2241   out=0;
002454  f04f0000          MOV      r0,#0
;;;2242   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
002458  49cd              LDR      r1,|L1.10128|
00245a  f8912020          LDRB     r2,[r1,#0x20]  ; spc_stat
00245e  2a00              CMP      r2,#0
002460  d110              BNE      |L1.9348|
002462  4acc              LDR      r2,|L1.10132|
002464  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002466  2a01              CMP      r2,#1
002468  d00c              BEQ      |L1.9348|
00246a  794a              LDRB     r2,[r1,#5]  ; vz1_stat
00246c  2a00              CMP      r2,#0
00246e  d109              BNE      |L1.9348|
;;;2243   	{
;;;2244   	if(vz1_stat==vz1sOFF)
;;;2245   		{
;;;2246   		vz2_stat=vz2sSTEP1;
002470  f04f0001          MOV      r0,#1
002474  71c8              STRB     r0,[r1,#7]
;;;2247   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002476  4601              MOV      r1,r0
002478  f44f70ca          MOV      r0,#0x194
00247c  f7fffffe          BL       lc640_write
;;;2248   		out=1;
002480  f04f0001          MOV      r0,#1
                  |L1.9348|
;;;2249   		
;;;2250   		}
;;;2251   /*	spc_stat=spcVZ;
;;;2252   	__ee_spc_stat=spcVZ; 
;;;2253   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2254   	vz_cnt_h=hour;
;;;2255   	__ee_vz_cnt=hour*60;
;;;2256   	if(hour==0)__ee_vz_cnt=30;
;;;2257   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2258   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2259   	vz_cnt_h_=0;
;;;2260   	vz_cnt_s=0;
;;;2261   	vz_cnt_s_=0;
;;;2262   	
;;;2263   		*/
;;;2264   	}
;;;2265   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2266   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2267   //plazma=out;	
;;;2268   return out;
;;;2269   }
002484  bd10              POP      {r4,pc}
;;;2270   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2271   //стоп формовочного заряда
;;;2272   void vz2_stop(void)
002486  48c2              LDR      r0,|L1.10128|
;;;2273   {
;;;2274   if(vz2_stat!=vz2sOFF)
002488  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
00248a  2900              CMP      r1,#0
00248c  d006              BEQ      |L1.9372|
;;;2275   	{
;;;2276   	vz2_stat=vz2sSTOP;
00248e  f04f0113          MOV      r1,#0x13
002492  71c1              STRB     r1,[r0,#7]
;;;2277   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
002494  f44f70ca          MOV      r0,#0x194
002498  f7ffbffe          B.W      lc640_write
                  |L1.9372|
;;;2278   	}
;;;2279   }
00249c  4770              BX       lr
;;;2280   
                          ENDP

                  kb_init PROC
;;;2281   //-----------------------------------------------
;;;2282   void kb_init(void)
00249e  48be              LDR      r0,|L1.10136|
;;;2283   {
;;;2284   main_kb_cnt=(TBAT*60)-60/*120*/;
0024a0  f06f013b          MVN      r1,#0x3b
0024a4  8800              LDRH     r0,[r0,#0]  ; TBAT
0024a6  ebc01000          RSB      r0,r0,r0,LSL #4
0024aa  eb010080          ADD      r0,r1,r0,LSL #2
0024ae  49b8              LDR      r1,|L1.10128|
0024b0  f8a10056          STRH     r0,[r1,#0x56]
;;;2285   }
0024b4  4770              BX       lr
;;;2286   
                          ENDP

                  kb_hndl PROC
;;;2287   //-----------------------------------------------
;;;2288   void kb_hndl(void)
0024b6  e92d5ff0          PUSH     {r4-r12,lr}
;;;2289   {
;;;2290   
;;;2291   static signed short ibat[2],ibat_[2];
;;;2292   #ifdef UKU_TELECORE2015
;;;2293   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2294   #else 
;;;2295   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0024ba  f8df82d4          LDR      r8,|L1.10128|
;;;2296   #endif
;;;2297   	{
;;;2298   	main_kb_cnt=0;
;;;2299   	
;;;2300   	kb_start[0]=0;
;;;2301   	kb_start[1]=0;
;;;2302   	kb_start_ips=0;
;;;2303   
;;;2304   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2305   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2306   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2307   	if( (!ips_bat_av_vzvod[0])                      && ((abs(Ib_ips_termokompensat[0])<IKB) || (bat_ips[0]._av&1) ) ) kb_start_ips=1;
0024be  f8dfa2dc          LDR      r10,|L1.10140|
0024c2  2500              MOVS     r5,#0                 ;2295
0024c4  f8b80056          LDRH     r0,[r8,#0x56]         ;2295  ; main_kb_cnt
0024c8  4eb5              LDR      r6,|L1.10144|
0024ca  1c40              ADDS     r0,r0,#1              ;2295
0024cc  b201              SXTH     r1,r0                 ;2295
0024ce  48b2              LDR      r0,|L1.10136|
0024d0  f8a81056          STRH     r1,[r8,#0x56]         ;2295
0024d4  f8df92cc          LDR      r9,|L1.10148|
0024d8  f9b00000          LDRSH    r0,[r0,#0]            ;2295  ; TBAT
;;;2308   #endif	
;;;2309   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2310   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2311   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2312   #endif
;;;2313   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2314    
;;;2315   		{
;;;2316   		kb_start[0]=0;
;;;2317   		kb_start[1]=0;
;;;2318   		kb_start_ips=0;
;;;2319   		}
;;;2320   
;;;2321   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2322   		{
;;;2323   		kb_cnt_1lev=10;
0024dc  270a              MOVS     r7,#0xa
0024de  ebc01200          RSB      r2,r0,r0,LSL #4       ;2295
0024e2  f04f0b01          MOV      r11,#1                ;2304
0024e6  f108045c          ADD      r4,r8,#0x5c           ;2300
0024ea  ebb10f82          CMP      r1,r2,LSL #2          ;2295
0024ee  db6c              BLT      |L1.9674|
0024f0  2800              CMP      r0,#0                 ;2295
0024f2  d06a              BEQ      |L1.9674|
0024f4  f8a85056          STRH     r5,[r8,#0x56]         ;2298
0024f8  7025              STRB     r5,[r4,#0]            ;2300
0024fa  7065              STRB     r5,[r4,#1]            ;2301
0024fc  f888501a          STRB     r5,[r8,#0x1a]         ;2302
002500  48a9              LDR      r0,|L1.10152|
002502  7800              LDRB     r0,[r0,#0]            ;2304  ; BAT_IS_ON
002504  2855              CMP      r0,#0x55              ;2304
002506  d111              BNE      |L1.9516|
002508  f9b60002          LDRSH    r0,[r6,#2]            ;2304  ; bat
00250c  2850              CMP      r0,#0x50              ;2304
00250e  dd0d              BLE      |L1.9516|
002510  f9b60008          LDRSH    r0,[r6,#8]            ;2304  ; bat
002514  f7fffffe          BL       abs
002518  f9b91000          LDRSH    r1,[r9,#0]            ;2304  ; IKB
00251c  4288              CMP      r0,r1                 ;2304
00251e  db03              BLT      |L1.9512|
002520  f8960041          LDRB     r0,[r6,#0x41]         ;2304  ; bat
002524  07c0              LSLS     r0,r0,#31             ;2304
002526  d001              BEQ      |L1.9516|
                  |L1.9512|
002528  f884b000          STRB     r11,[r4,#0]           ;2304
                  |L1.9516|
00252c  489e              LDR      r0,|L1.10152|
00252e  7840              LDRB     r0,[r0,#1]            ;2305  ; BAT_IS_ON
002530  2855              CMP      r0,#0x55              ;2305
002532  d111              BNE      |L1.9560|
002534  f9b60052          LDRSH    r0,[r6,#0x52]         ;2305  ; bat
002538  2850              CMP      r0,#0x50              ;2305
00253a  dd0d              BLE      |L1.9560|
00253c  f9b60058          LDRSH    r0,[r6,#0x58]         ;2305  ; bat
002540  f7fffffe          BL       abs
002544  f9b91000          LDRSH    r1,[r9,#0]            ;2305  ; IKB
002548  4288              CMP      r0,r1                 ;2305
00254a  db03              BLT      |L1.9556|
00254c  f8960091          LDRB     r0,[r6,#0x91]         ;2305  ; bat
002550  07c0              LSLS     r0,r0,#31             ;2305
002552  d001              BEQ      |L1.9560|
                  |L1.9556|
002554  f884b001          STRB     r11,[r4,#1]           ;2305
                  |L1.9560|
002558  4894              LDR      r0,|L1.10156|
00255a  7800              LDRB     r0,[r0,#0]            ;2307  ; ips_bat_av_vzvod
00255c  b970              CBNZ     r0,|L1.9596|
00255e  f9ba0000          LDRSH    r0,[r10,#0]           ;2307  ; Ib_ips_termokompensat
002562  f7fffffe          BL       abs
002566  f9b91000          LDRSH    r1,[r9,#0]            ;2307  ; IKB
00256a  4288              CMP      r0,r1                 ;2307
00256c  db04              BLT      |L1.9592|
00256e  4890              LDR      r0,|L1.10160|
002570  f8900041          LDRB     r0,[r0,#0x41]         ;2307  ; bat_ips
002574  07c0              LSLS     r0,r0,#31             ;2307
002576  d001              BEQ      |L1.9596|
                  |L1.9592|
002578  f888b01a          STRB     r11,[r8,#0x1a]        ;2307
                  |L1.9596|
00257c  488d              LDR      r0,|L1.10164|
00257e  7800              LDRB     r0,[r0,#0]            ;2309  ; net_av
002580  b998              CBNZ     r0,|L1.9642|
002582  f898001b          LDRB     r0,[r8,#0x1b]         ;2309  ; num_of_wrks_bps
002586  b180              CBZ      r0,|L1.9642|
002588  f8980020          LDRB     r0,[r8,#0x20]         ;2309  ; spc_stat
00258c  b108              CBZ      r0,|L1.9618|
00258e  2802              CMP      r0,#2                 ;2309
002590  d10b              BNE      |L1.9642|
                  |L1.9618|
002592  f8980005          LDRB     r0,[r8,#5]            ;2311  ; vz1_stat
002596  f8981007          LDRB     r1,[r8,#7]            ;2311  ; vz2_stat
00259a  4308              ORRS     r0,r0,r1              ;2311
00259c  d002              BEQ      |L1.9636|
00259e  4886              LDR      r0,|L1.10168|
0025a0  8800              LDRH     r0,[r0,#0]            ;2311  ; SMART_SPC
0025a2  b910              CBNZ     r0,|L1.9642|
                  |L1.9636|
0025a4  4885              LDR      r0,|L1.10172|
0025a6  7800              LDRB     r0,[r0,#0]            ;2313  ; sp_ch_stat
0025a8  b118              CBZ      r0,|L1.9650|
                  |L1.9642|
0025aa  7025              STRB     r5,[r4,#0]            ;2316
0025ac  7065              STRB     r5,[r4,#1]            ;2317
0025ae  f888501a          STRB     r5,[r8,#0x1a]         ;2318
                  |L1.9650|
0025b2  7820              LDRB     r0,[r4,#0]            ;2321  ; kb_start
0025b4  2801              CMP      r0,#1                 ;2321
0025b6  d020              BEQ      |L1.9722|
0025b8  7860              LDRB     r0,[r4,#1]            ;2321  ; kb_start
0025ba  2801              CMP      r0,#1                 ;2321
0025bc  d01d              BEQ      |L1.9722|
0025be  f898001a          LDRB     r0,[r8,#0x1a]         ;2321  ; kb_start_ips
0025c2  2801              CMP      r0,#1                 ;2321
0025c4  d019              BEQ      |L1.9722|
;;;2324   		}
;;;2325   	else kb_cnt_1lev=0;
0025c6  f8a85058          STRH     r5,[r8,#0x58]
                  |L1.9674|
;;;2326   	}
;;;2327   
;;;2328   if(kb_cnt_1lev)
0025ca  4641              MOV      r1,r8
0025cc  f9b80058          LDRSH    r0,[r8,#0x58]  ; kb_cnt_1lev
;;;2329   	{
;;;2330   	kb_cnt_1lev--;
;;;2331   
;;;2332   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2333   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2334   
;;;2335   
;;;2336   	if(kb_cnt_1lev==5)
;;;2337   		{
;;;2338   		ibat[0]=abs(bat[0]._Ib);
0025d0  f8df81bc          LDR      r8,|L1.10128|
0025d4  2800              CMP      r0,#0                 ;2328
0025d6  f108088c          ADD      r8,r8,#0x8c
0025da  d07e              BEQ      |L1.9946|
0025dc  f1a00001          SUB      r0,r0,#1              ;2330
0025e0  b200              SXTH     r0,r0                 ;2330
0025e2  468b              MOV      r11,r1                ;2330
0025e4  f8a10058          STRH     r0,[r1,#0x58]         ;2330
0025e8  2805              CMP      r0,#5                 ;2332
0025ea  dd09              BLE      |L1.9728|
0025ec  230f              MOVS     r3,#0xf               ;2332
0025ee  221e              MOVS     r2,#0x1e              ;2332
0025f0  2164              MOVS     r1,#0x64              ;2332
0025f2  20e1              MOVS     r0,#0xe1              ;2332
0025f4  f7fffffe          BL       mess_send
0025f8  e00a              B        |L1.9744|
                  |L1.9722|
0025fa  f8a87058          STRH     r7,[r8,#0x58]         ;2323
0025fe  e7e4              B        |L1.9674|
                  |L1.9728|
002600  2800              CMP      r0,#0                 ;2333
002602  dd05              BLE      |L1.9744|
002604  230f              MOVS     r3,#0xf               ;2333
002606  221e              MOVS     r2,#0x1e              ;2333
002608  2169              MOVS     r1,#0x69              ;2333
00260a  20e1              MOVS     r0,#0xe1              ;2333
00260c  f7fffffe          BL       mess_send
                  |L1.9744|
002610  f8bb0058          LDRH     r0,[r11,#0x58]        ;2336  ; kb_cnt_1lev
002614  2805              CMP      r0,#5                 ;2336
002616  d111              BNE      |L1.9788|
002618  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00261c  f7fffffe          BL       abs
002620  f8a80000          STRH     r0,[r8,#0]
;;;2339   		ibat[1]=abs(bat[1]._Ib);
002624  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
002628  f7fffffe          BL       abs
00262c  f8a80002          STRH     r0,[r8,#2]
;;;2340   		ibat_ips=abs(Ib_ips_termokompensat[0]);
002630  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002634  f7fffffe          BL       abs
002638  f8ab005e          STRH     r0,[r11,#0x5e]
                  |L1.9788|
;;;2341   		}
;;;2342   	
;;;2343   	if(kb_cnt_1lev==0)
00263c  4854              LDR      r0,|L1.10128|
00263e  f8b00058          LDRH     r0,[r0,#0x58]  ; kb_cnt_1lev
002642  2800              CMP      r0,#0
002644  d158              BNE      |L1.9976|
;;;2344   		{
;;;2345   		ibat_[0]=abs(bat[0]._Ib);
002646  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00264a  f7fffffe          BL       abs
00264e  f8dfb140          LDR      r11,|L1.10128|
002652  f10b0b90          ADD      r11,r11,#0x90
002656  f8ab0000          STRH     r0,[r11,#0]
;;;2346   		ibat_[1]=abs(bat[1]._Ib);
00265a  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
00265e  f7fffffe          BL       abs
002662  f8ab0002          STRH     r0,[r11,#2]
;;;2347   		ibat_ips_=abs(Ib_ips_termokompensat[0]);
002666  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00266a  f7fffffe          BL       abs
00266e  f8dfa120          LDR      r10,|L1.10128|
002672  f8aa0060          STRH     r0,[r10,#0x60]
;;;2348   
;;;2349   		kb_cnt_2lev=0;
002676  f8aa505a          STRH     r5,[r10,#0x5a]
;;;2350   
;;;2351   
;;;2352   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
00267a  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
00267e  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
002682  4408              ADD      r0,r0,r1
002684  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002688  4288              CMP      r0,r1
00268a  da02              BGE      |L1.9874|
00268c  7820              LDRB     r0,[r4,#0]  ; kb_start
00268e  2801              CMP      r0,#1
002690  d034              BEQ      |L1.9980|
                  |L1.9874|
;;;2353   			{
;;;2354   			kb_cnt_2lev=10;  
;;;2355   			}
;;;2356   		else if(bat[0]._Ub>200)
002692  f9b60002          LDRSH    r0,[r6,#2]  ; bat
002696  28c8              CMP      r0,#0xc8
002698  dd04              BLE      |L1.9892|
;;;2357   			{
;;;2358   			kb_start[0]=0;
00269a  7025              STRB     r5,[r4,#0]
;;;2359   			avar_bat_hndl(0,0);
00269c  2100              MOVS     r1,#0
00269e  4608              MOV      r0,r1
0026a0  f7fffffe          BL       avar_bat_hndl
                  |L1.9892|
;;;2360   			}
;;;2361   		
;;;2362   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0026a4  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0026a8  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0026ac  4408              ADD      r0,r0,r1
0026ae  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0026b2  4288              CMP      r0,r1
0026b4  da02              BGE      |L1.9916|
0026b6  7860              LDRB     r0,[r4,#1]  ; kb_start
0026b8  2801              CMP      r0,#1
0026ba  d022              BEQ      |L1.9986|
                  |L1.9916|
;;;2363   			{
;;;2364   			kb_cnt_2lev=10;     
;;;2365   			}
;;;2366   		else  if(bat[1]._Ub>200)
0026bc  f9b60052          LDRSH    r0,[r6,#0x52]  ; bat
0026c0  28c8              CMP      r0,#0xc8
0026c2  dd04              BLE      |L1.9934|
;;;2367   			{
;;;2368   			kb_start[1]=0;
0026c4  7065              STRB     r5,[r4,#1]
;;;2369   			avar_bat_hndl(1,0);
0026c6  2100              MOVS     r1,#0
0026c8  2001              MOVS     r0,#1
0026ca  f7fffffe          BL       avar_bat_hndl
                  |L1.9934|
;;;2370   			}
;;;2371   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2372   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
0026ce  f9ba005e          LDRSH    r0,[r10,#0x5e]  ; ibat_ips
0026d2  f9ba1060          LDRSH    r1,[r10,#0x60]  ; ibat_ips_
0026d6  4408              ADD      r0,r0,r1
0026d8  e000              B        |L1.9948|
                  |L1.9946|
0026da  e01b              B        |L1.10004|
                  |L1.9948|
0026dc  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0026e0  4288              CMP      r0,r1
0026e2  da09              BGE      |L1.9976|
0026e4  f89a001a          LDRB     r0,[r10,#0x1a]  ; kb_start_ips
0026e8  2801              CMP      r0,#1
0026ea  d105              BNE      |L1.9976|
;;;2373   			{
;;;2374   			if(KB_ALGORITM==1)
0026ec  4834              LDR      r0,|L1.10176|
0026ee  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
0026f0  2801              CMP      r0,#1
0026f2  d009              BEQ      |L1.9992|
;;;2375   				{
;;;2376   				avar_bat_ips_hndl(1);
;;;2377   				kb_start_ips=0;
;;;2378   				}
;;;2379   			else
;;;2380   				{
;;;2381   				kb_cnt_2lev=10;     
0026f4  f8aa705a          STRH     r7,[r10,#0x5a]
                  |L1.9976|
;;;2382   				}
;;;2383   			}
;;;2384   #endif
;;;2385   		}	
;;;2386   
;;;2387   
;;;2388   	}
;;;2389   else if(kb_cnt_2lev)
;;;2390   	{
;;;2391   	kb_cnt_2lev--;
;;;2392   
;;;2393   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2394   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2395   
;;;2396   
;;;2397   	if(kb_cnt_2lev==5)
;;;2398   		{
;;;2399   		ibat[0]=abs(bat[0]._Ib);
;;;2400   		ibat[1]=abs(bat[1]._Ib);
;;;2401   		ibat_ips=abs(Ib_ips_termokompensat[0]);
;;;2402   		}
;;;2403   	
;;;2404   	if(kb_cnt_2lev==0)
;;;2405   		{
;;;2406   		ibat_[0]=abs(bat[0]._Ib);
;;;2407   		ibat_[1]=abs(bat[1]._Ib);
;;;2408   		ibat_ips_=abs(Ib_ips_termokompensat[0]);
;;;2409   
;;;2410   		kb_full_ver=0;
;;;2411   
;;;2412   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2413   			{
;;;2414   			kb_full_ver=1;  
;;;2415   			}
;;;2416   		else if(bat[0]._Ub>200)			
;;;2417   			{
;;;2418   			kb_start[0]=0;
;;;2419   			avar_bat_hndl(0,0);
;;;2420   			}
;;;2421   
;;;2422   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2423   			{
;;;2424   			kb_full_ver=1;     
;;;2425   			}
;;;2426   		else	if(bat[1]._Ub>200)		
;;;2427   			{
;;;2428   			kb_start[1]=0;
;;;2429   			avar_bat_hndl(1,0);
;;;2430   			}
;;;2431   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2432   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2433   			{
;;;2434   			if(KB_ALGORITM==2)
;;;2435   				{
;;;2436   				avar_bat_ips_hndl(1);
;;;2437   				kb_start_ips=0;
;;;2438   				}
;;;2439   			else
;;;2440   				{
;;;2441   				kb_full_ver=1;     
;;;2442   				}
;;;2443   			}
;;;2444   #endif
;;;2445   		}	
;;;2446   	}
;;;2447   
;;;2448   else if(kb_full_ver)
;;;2449   	{
;;;2450   	
;;;2451   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2452   
;;;2453   	if( abs(bat[0]._Ib) > IKB ) 
;;;2454   		{
;;;2455   		if(kb_start[0]==1)
;;;2456   			{
;;;2457   			kb_start[0]=0;
;;;2458   			avar_bat_hndl(0,0);
;;;2459   			}
;;;2460   		}
;;;2461   
;;;2462   	if( abs(bat[1]._Ib) > IKB ) 
;;;2463   		{
;;;2464   		if(kb_start[1]==1)
;;;2465   			{
;;;2466   			kb_start[1]=0;
;;;2467   			avar_bat_hndl(1,0);
;;;2468   			}
;;;2469   		}
;;;2470   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2471   	if( abs(Ib_ips_termokompensat[0]) > IKB ) 
;;;2472   		{
;;;2473   		if(kb_start_ips==1)
;;;2474   			{
;;;2475   			kb_start_ips=0;
;;;2476   			avar_bat_ips_hndl(0);
;;;2477   			}
;;;2478   		}
;;;2479   #endif
;;;2480   
;;;2481   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2482   		{
;;;2483   		kb_full_ver=0;
;;;2484   		}
;;;2485   
;;;2486   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2487   		{
;;;2488   		kb_full_ver=0;
;;;2489   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2490   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2491   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2492   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips[0]._av&0x01))) avar_bat_ips_hndl(1);
;;;2493   #endif
;;;2494   		}
;;;2495   	}
;;;2496   
;;;2497   }
0026f8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9980|
0026fc  f8aa705a          STRH     r7,[r10,#0x5a]        ;2354
002700  e7d0              B        |L1.9892|
                  |L1.9986|
002702  f8aa705a          STRH     r7,[r10,#0x5a]        ;2364
002706  e7e2              B        |L1.9934|
                  |L1.9992|
002708  2001              MOVS     r0,#1                 ;2376
00270a  f7fffffe          BL       avar_bat_ips_hndl
00270e  f88a501a          STRB     r5,[r10,#0x1a]        ;2377
                  |L1.10002|
002712  e7f1              B        |L1.9976|
                  |L1.10004|
002714  f9b1005a          LDRSH    r0,[r1,#0x5a]         ;2389  ; kb_cnt_2lev
002718  b368              CBZ      r0,|L1.10102|
00271a  f1a00001          SUB      r0,r0,#1              ;2391
00271e  b200              SXTH     r0,r0                 ;2391
002720  460f              MOV      r7,r1                 ;2391
002722  f8a1005a          STRH     r0,[r1,#0x5a]         ;2391
002726  2805              CMP      r0,#5                 ;2393
002728  dd06              BLE      |L1.10040|
00272a  230f              MOVS     r3,#0xf               ;2393
00272c  22c8              MOVS     r2,#0xc8              ;2393
00272e  2164              MOVS     r1,#0x64              ;2393
002730  20e1              MOVS     r0,#0xe1              ;2393
002732  f7fffffe          BL       mess_send
002736  e007              B        |L1.10056|
                  |L1.10040|
002738  2800              CMP      r0,#0                 ;2394
00273a  dd05              BLE      |L1.10056|
00273c  230f              MOVS     r3,#0xf               ;2394
00273e  22c8              MOVS     r2,#0xc8              ;2394
002740  2169              MOVS     r1,#0x69              ;2394
002742  20e1              MOVS     r0,#0xe1              ;2394
002744  f7fffffe          BL       mess_send
                  |L1.10056|
002748  f8b7005a          LDRH     r0,[r7,#0x5a]         ;2397  ; kb_cnt_2lev
00274c  2805              CMP      r0,#5                 ;2397
00274e  d111              BNE      |L1.10100|
002750  f9b60008          LDRSH    r0,[r6,#8]            ;2399  ; bat
002754  f7fffffe          BL       abs
002758  f8a80000          STRH     r0,[r8,#0]            ;2399
00275c  f9b60058          LDRSH    r0,[r6,#0x58]         ;2400  ; bat
002760  f7fffffe          BL       abs
002764  f8a80002          STRH     r0,[r8,#2]            ;2400
002768  f9ba0000          LDRSH    r0,[r10,#0]           ;2401  ; Ib_ips_termokompensat
00276c  f7fffffe          BL       abs
002770  f8a7005e          STRH     r0,[r7,#0x5e]         ;2401
                  |L1.10100|
002774  e026              B        |L1.10180|
                  |L1.10102|
002776  e08b              B        |L1.10384|
                  |L1.10104|
002778  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
00277c  d4ced0cc
002780  cec2ced7
002784  cddbc920
002788  202020  
00278b  2000              DCB      " ",0
00278d  00                DCB      0
00278e  00                DCB      0
00278f  00                DCB      0
                  |L1.10128|
                          DCD      ||area_number.25||
                  |L1.10132|
                          DCD      speedChrgBlckStat
                  |L1.10136|
                          DCD      TBAT
                  |L1.10140|
                          DCD      Ib_ips_termokompensat
                  |L1.10144|
                          DCD      bat
                  |L1.10148|
                          DCD      IKB
                  |L1.10152|
                          DCD      BAT_IS_ON
                  |L1.10156|
                          DCD      ips_bat_av_vzvod
                  |L1.10160|
                          DCD      bat_ips
                  |L1.10164|
                          DCD      net_av
                  |L1.10168|
                          DCD      SMART_SPC
                  |L1.10172|
                          DCD      sp_ch_stat
                  |L1.10176|
                          DCD      KB_ALGORITM
                  |L1.10180|
0027c4  48fa              LDR      r0,|L1.11184|
0027c6  f8b0005a          LDRH     r0,[r0,#0x5a]         ;2404  ; kb_cnt_2lev
0027ca  2800              CMP      r0,#0                 ;2404
                  |L1.10188|
0027cc  d194              BNE      |L1.9976|
0027ce  f9b60008          LDRSH    r0,[r6,#8]            ;2406  ; bat
0027d2  f7fffffe          BL       abs
0027d6  4ff6              LDR      r7,|L1.11184|
0027d8  3790              ADDS     r7,r7,#0x90           ;2406
0027da  8038              STRH     r0,[r7,#0]            ;2406
0027dc  f9b60058          LDRSH    r0,[r6,#0x58]         ;2407  ; bat
0027e0  f7fffffe          BL       abs
0027e4  8078              STRH     r0,[r7,#2]            ;2407
0027e6  f9ba0000          LDRSH    r0,[r10,#0]           ;2408  ; Ib_ips_termokompensat
0027ea  f7fffffe          BL       abs
0027ee  f8dfa3c0          LDR      r10,|L1.11184|
0027f2  f8aa0060          STRH     r0,[r10,#0x60]        ;2408
0027f6  f88a5019          STRB     r5,[r10,#0x19]        ;2410
0027fa  f9b80000          LDRSH    r0,[r8,#0]            ;2412  ; ibat
0027fe  f9b71000          LDRSH    r1,[r7,#0]            ;2412  ; ibat_
002802  4408              ADD      r0,r0,r1              ;2412
002804  f9b91000          LDRSH    r1,[r9,#0]            ;2412  ; IKB
002808  4288              CMP      r0,r1                 ;2412
00280a  da02              BGE      |L1.10258|
00280c  7820              LDRB     r0,[r4,#0]            ;2412  ; kb_start
00280e  2801              CMP      r0,#1                 ;2412
002810  d032              BEQ      |L1.10360|
                  |L1.10258|
002812  f9b60002          LDRSH    r0,[r6,#2]            ;2416  ; bat
002816  28c8              CMP      r0,#0xc8              ;2416
002818  dd04              BLE      |L1.10276|
00281a  7025              STRB     r5,[r4,#0]            ;2418
00281c  2100              MOVS     r1,#0                 ;2419
00281e  4608              MOV      r0,r1                 ;2419
002820  f7fffffe          BL       avar_bat_hndl
                  |L1.10276|
002824  f9b80002          LDRSH    r0,[r8,#2]            ;2422  ; ibat
002828  f9b71002          LDRSH    r1,[r7,#2]            ;2422  ; ibat_
00282c  4408              ADD      r0,r0,r1              ;2422
00282e  f9b91000          LDRSH    r1,[r9,#0]            ;2422  ; IKB
002832  4288              CMP      r0,r1                 ;2422
002834  da02              BGE      |L1.10300|
002836  7860              LDRB     r0,[r4,#1]            ;2422  ; kb_start
002838  2801              CMP      r0,#1                 ;2422
00283a  d020              BEQ      |L1.10366|
                  |L1.10300|
00283c  f9b60052          LDRSH    r0,[r6,#0x52]         ;2426  ; bat
002840  28c8              CMP      r0,#0xc8              ;2426
002842  dd04              BLE      |L1.10318|
002844  7065              STRB     r5,[r4,#1]            ;2428
002846  2100              MOVS     r1,#0                 ;2429
002848  2001              MOVS     r0,#1                 ;2429
00284a  f7fffffe          BL       avar_bat_hndl
                  |L1.10318|
00284e  f9ba005e          LDRSH    r0,[r10,#0x5e]        ;2432  ; ibat_ips
002852  f9ba1060          LDRSH    r1,[r10,#0x60]        ;2432  ; ibat_ips_
002856  4408              ADD      r0,r0,r1              ;2432
002858  f9b91000          LDRSH    r1,[r9,#0]            ;2432  ; IKB
00285c  4288              CMP      r0,r1                 ;2432
00285e  f6bfaf58          BGE      |L1.10002|
002862  f89a001a          LDRB     r0,[r10,#0x1a]        ;2432  ; kb_start_ips
002866  2801              CMP      r0,#1                 ;2432
002868  d1b0              BNE      |L1.10188|
00286a  48d2              LDR      r0,|L1.11188|
00286c  8800              LDRH     r0,[r0,#0]            ;2434  ; KB_ALGORITM
00286e  2802              CMP      r0,#2                 ;2434
002870  d008              BEQ      |L1.10372|
002872  f88ab019          STRB     r11,[r10,#0x19]       ;2441
                  |L1.10358|
002876  e73f              B        |L1.9976|
                  |L1.10360|
002878  f88ab019          STRB     r11,[r10,#0x19]       ;2414
00287c  e7d2              B        |L1.10276|
                  |L1.10366|
00287e  f88ab019          STRB     r11,[r10,#0x19]       ;2424
002882  e7e4              B        |L1.10318|
                  |L1.10372|
002884  2001              MOVS     r0,#1                 ;2436
002886  f7fffffe          BL       avar_bat_ips_hndl
00288a  f88a501a          STRB     r5,[r10,#0x1a]        ;2437
00288e  e733              B        |L1.9976|
                  |L1.10384|
002890  7e48              LDRB     r0,[r1,#0x19]         ;2448  ; kb_full_ver
002892  4688              MOV      r8,r1                 ;2448
002894  2800              CMP      r0,#0                 ;2448
002896  d0ee              BEQ      |L1.10358|
002898  230f              MOVS     r3,#0xf               ;2451
00289a  2200              MOVS     r2,#0                 ;2451
00289c  216e              MOVS     r1,#0x6e              ;2451
00289e  20e1              MOVS     r0,#0xe1              ;2451
0028a0  f7fffffe          BL       mess_send
0028a4  f9b60008          LDRSH    r0,[r6,#8]            ;2453  ; bat
0028a8  f7fffffe          BL       abs
0028ac  f9b91000          LDRSH    r1,[r9,#0]            ;2453  ; IKB
0028b0  4288              CMP      r0,r1                 ;2453
0028b2  dd07              BLE      |L1.10436|
0028b4  7820              LDRB     r0,[r4,#0]            ;2455  ; kb_start
0028b6  2801              CMP      r0,#1                 ;2455
0028b8  d104              BNE      |L1.10436|
0028ba  7025              STRB     r5,[r4,#0]            ;2457
0028bc  2100              MOVS     r1,#0                 ;2458
0028be  4608              MOV      r0,r1                 ;2458
0028c0  f7fffffe          BL       avar_bat_hndl
                  |L1.10436|
0028c4  f9b60058          LDRSH    r0,[r6,#0x58]         ;2462  ; bat
0028c8  f7fffffe          BL       abs
0028cc  f9b91000          LDRSH    r1,[r9,#0]            ;2462  ; IKB
0028d0  4288              CMP      r0,r1                 ;2462
0028d2  dd06              BLE      |L1.10466|
0028d4  7860              LDRB     r0,[r4,#1]            ;2464  ; kb_start
0028d6  2801              CMP      r0,#1                 ;2464
0028d8  d103              BNE      |L1.10466|
0028da  7065              STRB     r5,[r4,#1]            ;2466
0028dc  2100              MOVS     r1,#0                 ;2467
0028de  f7fffffe          BL       avar_bat_hndl
                  |L1.10466|
0028e2  f9ba0000          LDRSH    r0,[r10,#0]           ;2471  ; Ib_ips_termokompensat
0028e6  f7fffffe          BL       abs
0028ea  f9b91000          LDRSH    r1,[r9,#0]            ;2471  ; IKB
0028ee  4288              CMP      r0,r1                 ;2471
0028f0  dd08              BLE      |L1.10500|
0028f2  f898001a          LDRB     r0,[r8,#0x1a]         ;2473  ; kb_start_ips
0028f6  2801              CMP      r0,#1                 ;2473
0028f8  d104              BNE      |L1.10500|
0028fa  f888501a          STRB     r5,[r8,#0x1a]         ;2475
0028fe  2000              MOVS     r0,#0                 ;2476
002900  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10500|
002904  7820              LDRB     r0,[r4,#0]            ;2481  ; kb_start
002906  b930              CBNZ     r0,|L1.10518|
002908  7860              LDRB     r0,[r4,#1]            ;2481  ; kb_start
00290a  b920              CBNZ     r0,|L1.10518|
00290c  f898001a          LDRB     r0,[r8,#0x1a]         ;2481  ; kb_start_ips
002910  b908              CBNZ     r0,|L1.10518|
002912  f8885019          STRB     r5,[r8,#0x19]         ;2483
                  |L1.10518|
002916  20e6              MOVS     r0,#0xe6              ;2486
002918  f7fffffe          BL       mess_find
00291c  b118              CBZ      r0,|L1.10534|
00291e  48a6              LDR      r0,|L1.11192|
002920  6800              LDR      r0,[r0,#0]            ;2486  ; mess_data
002922  28e7              CMP      r0,#0xe7              ;2486
002924  d00a              BEQ      |L1.10556|
                  |L1.10534|
002926  48a5              LDR      r0,|L1.11196|
002928  49a5              LDR      r1,|L1.11200|
00292a  f9b00000          LDRSH    r0,[r0,#0]            ;2486  ; USIGN
00292e  f9b11000          LDRSH    r1,[r1,#0]            ;2486  ; load_U
002932  eb000080          ADD      r0,r0,r0,LSL #2       ;2486
002936  ebb10f40          CMP      r1,r0,LSL #1          ;2486
                  |L1.10554|
00293a  da9c              BGE      |L1.10358|
                  |L1.10556|
00293c  f8885019          STRB     r5,[r8,#0x19]         ;2488
002940  7820              LDRB     r0,[r4,#0]            ;2489  ; kb_start
002942  4da0              LDR      r5,|L1.11204|
002944  2801              CMP      r0,#1                 ;2489
002946  d10f              BNE      |L1.10600|
002948  f9b90000          LDRSH    r0,[r9,#0]            ;2489  ; IKB
00294c  f9b51000          LDRSH    r1,[r5,#0]            ;2489  ; load_I
002950  0040              LSLS     r0,r0,#1              ;2489
002952  fb90f0f7          SDIV     r0,r0,r7              ;2489
002956  4288              CMP      r0,r1                 ;2489
002958  da06              BGE      |L1.10600|
00295a  f8960041          LDRB     r0,[r6,#0x41]         ;2489  ; bat
00295e  07c0              LSLS     r0,r0,#31             ;2489
002960  d102              BNE      |L1.10600|
002962  2101              MOVS     r1,#1                 ;2489
002964  f7fffffe          BL       avar_bat_hndl
                  |L1.10600|
002968  7860              LDRB     r0,[r4,#1]            ;2490  ; kb_start
00296a  2801              CMP      r0,#1                 ;2490
00296c  d110              BNE      |L1.10640|
00296e  f9b90000          LDRSH    r0,[r9,#0]            ;2490  ; IKB
002972  f9b51000          LDRSH    r1,[r5,#0]            ;2490  ; load_I
002976  0040              LSLS     r0,r0,#1              ;2490
002978  fb90f0f7          SDIV     r0,r0,r7              ;2490
00297c  4288              CMP      r0,r1                 ;2490
00297e  da07              BGE      |L1.10640|
002980  f8960091          LDRB     r0,[r6,#0x91]         ;2490  ; bat
002984  07c0              LSLS     r0,r0,#31             ;2490
002986  d103              BNE      |L1.10640|
002988  2101              MOVS     r1,#1                 ;2490
00298a  4608              MOV      r0,r1                 ;2490
00298c  f7fffffe          BL       avar_bat_hndl
                  |L1.10640|
002990  f898001a          LDRB     r0,[r8,#0x1a]         ;2492  ; kb_start_ips
002994  2801              CMP      r0,#1                 ;2492
                  |L1.10646|
002996  f47faebc          BNE      |L1.10002|
00299a  f9b90000          LDRSH    r0,[r9,#0]            ;2492  ; IKB
00299e  f9b51000          LDRSH    r1,[r5,#0]            ;2492  ; load_I
0029a2  0040              LSLS     r0,r0,#1              ;2492
0029a4  fb90f0f7          SDIV     r0,r0,r7              ;2492
0029a8  4288              CMP      r0,r1                 ;2492
0029aa  dac6              BGE      |L1.10554|
0029ac  4886              LDR      r0,|L1.11208|
0029ae  f8900041          LDRB     r0,[r0,#0x41]         ;2492  ; bat_ips
0029b2  07c0              LSLS     r0,r0,#31             ;2492
0029b4  d1ef              BNE      |L1.10646|
0029b6  e8bd5ff0          POP      {r4-r12,lr}           ;2492
0029ba  2001              MOVS     r0,#1                 ;2492
0029bc  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2498   
                          ENDP

                  samokalibr_hndl PROC
;;;2507   //-----------------------------------------------
;;;2508   void samokalibr_hndl(void)
0029c0  4770              BX       lr
;;;2509   {
;;;2510   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2511   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2512   
;;;2513   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2514   	{
;;;2515   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2516   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2517   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2518   	} 
;;;2519   
;;;2520   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2521   	{
;;;2522   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2523   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2524   	
;;;2525   	}
;;;2526   #endif	 	
;;;2527   }
;;;2528   
                          ENDP

                  ubat_old_drv PROC
;;;2531   //-----------------------------------------------
;;;2532   void ubat_old_drv(void)
0029c2  b510              PUSH     {r4,lr}
;;;2533   {        
;;;2534   bat_u_old_cnt++;
0029c4  4c81              LDR      r4,|L1.11212|
0029c6  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0029c8  f1000001          ADD      r0,r0,#1
0029cc  8020              STRH     r0,[r4,#0]
;;;2535   gran_ring(&bat_u_old_cnt,0,8);
0029ce  f04f0208          MOV      r2,#8
0029d2  f04f0100          MOV      r1,#0
0029d6  4620              MOV      r0,r4
0029d8  f7fffffe          BL       gran_ring
;;;2536   
;;;2537   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
0029dc  497c              LDR      r1,|L1.11216|
0029de  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
0029e2  eb010040          ADD      r0,r1,r0,LSL #1
0029e6  884a              LDRH     r2,[r1,#2]  ; bat
0029e8  8482              STRH     r2,[r0,#0x24]
;;;2538   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
0029ea  f8b11052          LDRH     r1,[r1,#0x52]  ; bat
0029ee  f8a01074          STRH     r1,[r0,#0x74]
;;;2539   }
0029f2  bd10              POP      {r4,pc}
;;;2540   
                          ENDP

                  unet_drv PROC
;;;2541   //-----------------------------------------------
;;;2542   void unet_drv(void)
0029f4  e92d41f0          PUSH     {r4-r8,lr}
;;;2543   {
;;;2544   if(net_av_2min_timer)net_av_2min_timer--;
0029f8  4976              LDR      r1,|L1.11220|
0029fa  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
0029fe  b110              CBZ      r0,|L1.10758|
002a00  f1a00001          SUB      r0,r0,#1
002a04  8008              STRH     r0,[r1,#0]
                  |L1.10758|
;;;2545   
;;;2546   if(net_U<UMN)
002a06  f8df81d0          LDR      r8,|L1.11224|
002a0a  4874              LDR      r0,|L1.11228|
;;;2547   	{
;;;2548   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002a0c  4a75              LDR      r2,|L1.11236|
002a0e  f9b81000          LDRSH    r1,[r8,#0]            ;2546  ; net_U
002a12  f9b03000          LDRSH    r3,[r0,#0]            ;2546  ; UMN
002a16  4e72              LDR      r6,|L1.11232|
002a18  f9920000          LDRSB    r0,[r2,#0]
;;;2549   		{
;;;2550   		unet_drv_cnt++;
;;;2551   		if(unet_drv_cnt>=10)
;;;2552   			{
;;;2553   			net_Ustore=net_U;
;;;2554   		 	avar_unet_hndl(1);
;;;2555   			
;;;2556   			}
;;;2557   		}
;;;2558   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
002a1c  250a              MOVS     r5,#0xa
;;;2559   
;;;2560   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2561   	}
;;;2562   
;;;2563   else if(net_U>UMN)
;;;2564   	{                 
;;;2565   	if(unet_drv_cnt)
;;;2566   		{
;;;2567   		unet_drv_cnt--;
;;;2568   		if(unet_drv_cnt<=0)
;;;2569   			{
;;;2570   			avar_unet_hndl(0);
;;;2571   			avar_bps_reset_cnt=10;
002a1e  4c64              LDR      r4,|L1.11184|
002a20  4299              CMP      r1,r3                 ;2546
002a22  da1c              BGE      |L1.10846|
002a24  4f70              LDR      r7,|L1.11240|
002a26  280a              CMP      r0,#0xa               ;2548
002a28  da0e              BGE      |L1.10824|
002a2a  f9b63000          LDRSH    r3,[r6,#0]            ;2548  ; main_1Hz_cnt
002a2e  2b0f              CMP      r3,#0xf               ;2548
002a30  dd0a              BLE      |L1.10824|
002a32  f1000001          ADD      r0,r0,#1              ;2550
002a36  b240              SXTB     r0,r0                 ;2550
002a38  7010              STRB     r0,[r2,#0]            ;2550
002a3a  280a              CMP      r0,#0xa               ;2551
002a3c  db07              BLT      |L1.10830|
002a3e  8039              STRH     r1,[r7,#0]            ;2553
002a40  2001              MOVS     r0,#1                 ;2554
002a42  f7fffffe          BL       avar_unet_hndl
002a46  e002              B        |L1.10830|
                  |L1.10824|
002a48  280a              CMP      r0,#0xa               ;2558
002a4a  db00              BLT      |L1.10830|
002a4c  7015              STRB     r5,[r2,#0]            ;2558
                  |L1.10830|
002a4e  f9b80000          LDRSH    r0,[r8,#0]            ;2560  ; net_U
002a52  f9b71000          LDRSH    r1,[r7,#0]            ;2560  ; net_Ustore
002a56  4288              CMP      r0,r1                 ;2560
002a58  da0e              BGE      |L1.10872|
002a5a  8038              STRH     r0,[r7,#0]            ;2560
002a5c  e00c              B        |L1.10872|
                  |L1.10846|
002a5e  dd0b              BLE      |L1.10872|
002a60  b150              CBZ      r0,|L1.10872|
002a62  f1a00001          SUB      r0,r0,#1              ;2567
002a66  b240              SXTB     r0,r0                 ;2567
002a68  7010              STRB     r0,[r2,#0]            ;2567
002a6a  2800              CMP      r0,#0                 ;2568
002a6c  dc04              BGT      |L1.10872|
002a6e  2000              MOVS     r0,#0                 ;2570
002a70  f7fffffe          BL       avar_unet_hndl
002a74  f884502e          STRB     r5,[r4,#0x2e]
                  |L1.10872|
;;;2572   			}
;;;2573   		}
;;;2574   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2575   	
;;;2576   	}
;;;2577   //#ifdef UKU_6U || UKU_ZVU
;;;2578   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2579   if(net_Umax>UMAXN) //o_11
002a78  f8df8170          LDR      r8,|L1.11244|
002a7c  485c              LDR      r0,|L1.11248|
;;;2580   	{
;;;2581   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
002a7e  4a5d              LDR      r2,|L1.11252|
002a80  f9b81000          LDRSH    r1,[r8,#0]            ;2579  ; net_Umax
002a84  f9b00000          LDRSH    r0,[r0,#0]            ;2579  ; UMAXN
002a88  4281              CMP      r1,r0                 ;2579
002a8a  dd1e              BLE      |L1.10954|
002a8c  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
;;;2582   		{
;;;2583   		unet_max_drv_cnt++;
;;;2584   		if(unet_max_drv_cnt>=10)
;;;2585   			{
;;;2586   			net_Ustore_max=net_Umax; //o_11
002a90  4f59              LDR      r7,|L1.11256|
002a92  280a              CMP      r0,#0xa               ;2581
002a94  da0e              BGE      |L1.10932|
002a96  f9b63000          LDRSH    r3,[r6,#0]            ;2581  ; main_1Hz_cnt
002a9a  2b0f              CMP      r3,#0xf               ;2581
002a9c  dd0a              BLE      |L1.10932|
002a9e  f1000001          ADD      r0,r0,#1              ;2583
002aa2  b240              SXTB     r0,r0                 ;2583
002aa4  7010              STRB     r0,[r2,#0]            ;2583
002aa6  280a              CMP      r0,#0xa               ;2584
002aa8  db07              BLT      |L1.10938|
002aaa  8039              STRH     r1,[r7,#0]
;;;2587   		 	avar_unet_hndl(2);
002aac  2002              MOVS     r0,#2
002aae  f7fffffe          BL       avar_unet_hndl
002ab2  e002              B        |L1.10938|
                  |L1.10932|
;;;2588   			
;;;2589   			}
;;;2590   		}
;;;2591   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002ab4  280a              CMP      r0,#0xa
002ab6  db00              BLT      |L1.10938|
002ab8  7015              STRB     r5,[r2,#0]
                  |L1.10938|
;;;2592   
;;;2593   	if(net_Umax>net_Ustore_max) net_Ustore_max=net_Umax; //o_11	
002aba  f9b80000          LDRSH    r0,[r8,#0]  ; net_Umax
002abe  f9b71000          LDRSH    r1,[r7,#0]  ; net_Ustore_max
002ac2  4288              CMP      r0,r1
002ac4  dd10              BLE      |L1.10984|
002ac6  8038              STRH     r0,[r7,#0]
002ac8  e00e              B        |L1.10984|
                  |L1.10954|
;;;2594   	}
;;;2595   
;;;2596   else if(net_Umax<UMAXN) //o_11
002aca  da0d              BGE      |L1.10984|
;;;2597   	{                 
;;;2598   	if(unet_max_drv_cnt)
002acc  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002ad0  b150              CBZ      r0,|L1.10984|
;;;2599   		{
;;;2600   		unet_max_drv_cnt--;
002ad2  f1a00001          SUB      r0,r0,#1
002ad6  b240              SXTB     r0,r0
002ad8  7010              STRB     r0,[r2,#0]
;;;2601   		if(unet_max_drv_cnt<=0)
002ada  2800              CMP      r0,#0
002adc  dc04              BGT      |L1.10984|
;;;2602   			{
;;;2603   			avar_unet_hndl(4); //o_11
002ade  2004              MOVS     r0,#4
002ae0  f7fffffe          BL       avar_unet_hndl
;;;2604   			avar_bps_reset_cnt=10;
002ae4  f884502e          STRB     r5,[r4,#0x2e]
                  |L1.10984|
;;;2605   			}
;;;2606   		}
;;;2607   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2608   	
;;;2609   	}
;;;2610   #endif /*UKU_6U*/
;;;2611   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002ae8  f894002e          LDRB     r0,[r4,#0x2e]  ; avar_bps_reset_cnt
002aec  2800              CMP      r0,#0
002aee  d003              BEQ      |L1.11000|
002af0  f1a00001          SUB      r0,r0,#1
002af4  f884002e          STRB     r0,[r4,#0x2e]
                  |L1.11000|
;;;2612   }
002af8  e8bd81f0          POP      {r4-r8,pc}
;;;2613   
                          ENDP

                  matemat PROC
;;;2615   //-----------------------------------------------
;;;2616   void matemat(void)
002afc  e92d5fff          PUSH     {r0-r12,lr}
;;;2617   {
;;;2618   //signed short temp_SS;
;;;2619   signed long temp_SL/*,temp_SL_*/;
;;;2620   char /*temp,*/i;
;;;2621   //signed short temp_SS;
;;;2622   
;;;2623   #ifdef UKU_MGTS
;;;2624   //напряжение сети
;;;2625   temp_SL=(signed long)net_buff_;
;;;2626   temp_SL*=Kunet;
;;;2627   temp_SL/=110000L;
;;;2628   net_U=(signed short)temp_SL;
;;;2629   #endif
;;;2630   
;;;2631   #ifdef UKU_RSTKM
;;;2632   //напряжение сети
;;;2633   temp_SL=(signed long)net_buff_;
;;;2634   temp_SL*=Kunet;
;;;2635   temp_SL/=110000L;
;;;2636   net_U=(signed short)temp_SL;
;;;2637   #endif
;;;2638   
;;;2639   #ifdef UKU_3U
;;;2640   //напряжение сети
;;;2641   temp_SL=(signed long)net_buff_;
;;;2642   temp_SL*=Kunet;
;;;2643   temp_SL/=36000L;
;;;2644   net_U=(signed short)temp_SL;
;;;2645   #endif
;;;2646   
;;;2647   #ifdef UKU_6U
;;;2648   //напряжение сети
;;;2649   
;;;2650   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2651   	{
;;;2652   
;;;2653   	if(bps[11]._device==dNET_METR)
;;;2654   		{
;;;2655   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2656   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2657   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2658   
;;;2659   		temp_SL=(signed long)net_metr_buff_[0];
;;;2660   		temp_SL*=KunetA;
;;;2661   		temp_SL/=6000L;
;;;2662   		net_Ua=(signed short)temp_SL;
;;;2663   	
;;;2664   		temp_SL=(signed long)net_metr_buff_[1];
;;;2665   		temp_SL*=KunetB;
;;;2666   		temp_SL/=6000L;
;;;2667   		net_Ub=(signed short)temp_SL;
;;;2668   	
;;;2669   		temp_SL=(signed long)net_metr_buff_[2];
;;;2670   		temp_SL*=KunetC;
;;;2671   		temp_SL/=6000L;
;;;2672   		net_Uc=(signed short)temp_SL;
;;;2673   		}
;;;2674   	else
;;;2675   		{
;;;2676   		temp_SL=(signed long)net_buff_;
;;;2677   		temp_SL*=KunetA;
;;;2678   		temp_SL/=110000L;
;;;2679   		net_Ua=(signed short)temp_SL;
;;;2680   	
;;;2681   		temp_SL=(signed long)adc_buff_[3];
;;;2682   		temp_SL*=KunetB;
;;;2683   		temp_SL/=6000L;
;;;2684   		net_Ub=(signed short)temp_SL;
;;;2685   	
;;;2686   		temp_SL=(signed long)adc_buff_[10];
;;;2687   		temp_SL*=KunetC;
;;;2688   		temp_SL/=6000L;
;;;2689   		net_Uc=(signed short)temp_SL;
;;;2690   		}
;;;2691   
;;;2692   	net_U=net_Ua;
;;;2693   	if(net_Ub<net_U)net_U=net_Ub;
;;;2694   	if(net_Uc<net_U)net_U=net_Uc;
;;;2695   	//o_10_s
;;;2696   	net_Umax=net_Ua;
;;;2697   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2698   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2699   	//o_10_e
;;;2700   	}
;;;2701   else 
;;;2702   	{
;;;2703   	temp_SL=(signed long)net_buff_;
;;;2704   	temp_SL*=Kunet;
;;;2705   	temp_SL/=110000L;
;;;2706   	net_U=(signed short)temp_SL;
;;;2707   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2708   	}
;;;2709   
;;;2710   
;;;2711   
;;;2712   
;;;2713   #endif
;;;2714   
;;;2715   #ifdef UKU_GLONASS
;;;2716   //напряжение сети
;;;2717   temp_SL=(signed long)net_buff_;
;;;2718   temp_SL*=Kunet;
;;;2719   temp_SL/=110000L;
;;;2720   net_U=(signed short)temp_SL;
;;;2721   #endif
;;;2722   
;;;2723   #ifdef UKU_KONTUR
;;;2724   //напряжение сети
;;;2725   temp_SL=(signed long)net_buff_;
;;;2726   temp_SL*=Kunet;
;;;2727   temp_SL/=110000L;
;;;2728   net_U=(signed short)temp_SL;
;;;2729   #endif
;;;2730   
;;;2731   #ifdef IPS_SGEP_GAZPROM
;;;2732   //напряжение сети
;;;2733   temp_SL=(signed long)net_buff_;
;;;2734   temp_SL*=Kunet;
;;;2735   temp_SL/=110000L;
;;;2736   net_U=(signed short)temp_SL;
;;;2737   #endif
;;;2738   
;;;2739   #ifdef UKU_220_V2
;;;2740   //напряжение сети
;;;2741   
;;;2742   if(AUSW_MAIN==22033)
;;;2743   	{
;;;2744   	temp_SL=(signed long)net_buff_;
;;;2745   	temp_SL*=KunetA;
;;;2746   	temp_SL/=6000L;
;;;2747   	net_Ua=(signed short)temp_SL;
;;;2748   
;;;2749   	temp_SL=(signed long)adc_buff_[3];
;;;2750   	temp_SL*=KunetB;
;;;2751   	temp_SL/=6000L;
;;;2752   	net_Ub=(signed short)temp_SL;
;;;2753   
;;;2754   	temp_SL=(signed long)adc_buff_[10];
;;;2755   	temp_SL*=KunetC;
;;;2756   	temp_SL/=6000L;
;;;2757   	net_Uc=(signed short)temp_SL;
;;;2758   
;;;2759   	net_U=net_Ua;
;;;2760   	if(net_Ub<net_U)net_U=net_Ub;
;;;2761   	if(net_Uc<net_U)net_U=net_Uc;
;;;2762   	}
;;;2763   else
;;;2764   	{
;;;2765   	temp_SL=(signed long)net_buff_;
;;;2766   	temp_SL*=Kunet;
;;;2767   	temp_SL/=5000L;
;;;2768   	net_U=(signed short)temp_SL;
;;;2769   	}
;;;2770   #endif
;;;2771   
;;;2772   
;;;2773   #ifdef UKU_220
;;;2774   //напряжение сети
;;;2775   
;;;2776   if(AUSW_MAIN==22035)
;;;2777   	{
;;;2778   	temp_SL=(signed long)net_buff_;
;;;2779   	temp_SL*=KunetA;
;;;2780   	temp_SL/=6000L;
;;;2781   	net_Ua=(signed short)temp_SL;
;;;2782   
;;;2783   	temp_SL=(signed long)adc_buff_[3];
;;;2784   	temp_SL*=KunetB;
;;;2785   	temp_SL/=6000L;
;;;2786   	net_Ub=(signed short)temp_SL;
;;;2787   
;;;2788   	temp_SL=(signed long)adc_buff_[10];
;;;2789   	temp_SL*=KunetC;
;;;2790   	temp_SL/=6000L;
;;;2791   	net_Uc=(signed short)temp_SL;
;;;2792   
;;;2793   	net_U=net_Ua;
;;;2794   	if(net_Ub<net_U)net_U=net_Ub;
;;;2795   	if(net_Uc<net_U)net_U=net_Uc;
;;;2796   	}
;;;2797   else
;;;2798   	{
;;;2799   	temp_SL=(signed long)net_buff_;
;;;2800   	temp_SL*=Kunet;
;;;2801   	#ifdef _ACDC_
;;;2802   	temp_SL/=500L;
;;;2803   	#else
;;;2804   	temp_SL/=5000L;
;;;2805   	#endif
;;;2806   	net_U=(signed short)temp_SL;
;;;2807   	
;;;2808   	}
;;;2809   #endif
;;;2810   
;;;2811   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2812   //напряжение сети
;;;2813   
;;;2814   
;;;2815   	if(bps[11]._device==dNET_METR)
002b00  483e              LDR      r0,|L1.11260|
;;;2816   		{
;;;2817   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2818   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2819   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2820   
;;;2821   		temp_SL=(signed long)net_metr_buff_[2];
;;;2822   		temp_SL*=KunetA;
002b02  4a3f              LDR      r2,|L1.11264|
;;;2823   		temp_SL/=6000L;
;;;2824   		net_Ua=(signed short)temp_SL;
;;;2825   	
;;;2826   		temp_SL=(signed long)net_metr_buff_[1];
;;;2827   		temp_SL*=KunetB;
002b04  493f              LDR      r1,|L1.11268|
002b06  f890544c          LDRB     r5,[r0,#0x44c]        ;2815  ; bps
;;;2828   		temp_SL/=6000L;
;;;2829   		net_Ub=(signed short)temp_SL;
;;;2830   	
;;;2831   		temp_SL=(signed long)net_metr_buff_[0];
;;;2832   		temp_SL*=KunetC;
002b0a  483f              LDR      r0,|L1.11272|
002b0c  f9b29000          LDRSH    r9,[r2,#0]            ;2822
002b10  f9b12000          LDRSH    r2,[r1,#0]            ;2827
002b14  f9b00000          LDRSH    r0,[r0,#0]
002b18  f8df80f0          LDR      r8,|L1.11276|
002b1c  4f3c              LDR      r7,|L1.11280|
;;;2833   		temp_SL/=6000L;
;;;2834   		net_Uc=(signed short)temp_SL;
002b1e  4c3d              LDR      r4,|L1.11284|
;;;2835   
;;;2836   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2837   
;;;2838   		net_U=net_Ua;
;;;2839   		if(net_Ub<net_U)net_U=net_Ub;
;;;2840   		if(net_Uc<net_U)net_U=net_Uc;
;;;2841   		//o_10_s
;;;2842   		net_Umax=net_Ua;
002b20  4b32              LDR      r3,|L1.11244|
;;;2843   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2844   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2845   		//o_10_e
;;;2846   		}
;;;2847   	  else if(AUSW_MAIN==22033)
;;;2848   	{
;;;2849   	temp_SL=(signed long)net_buff_;
002b22  4e23              LDR      r6,|L1.11184|
002b24  9003              STR      r0,[sp,#0xc]          ;2815
002b26  2d07              CMP      r5,#7                 ;2815
002b28  d07b              BEQ      |L1.11298|
002b2a  4631              MOV      r1,r6
;;;2850   	temp_SL*=KunetA;
;;;2851   	temp_SL/=4000L;
;;;2852   	net_Ua=(signed short)temp_SL;
;;;2853   
;;;2854   	temp_SL=(signed long)adc_buff_[3];
002b2c  f8dfa0ec          LDR      r10,|L1.11292|
002b30  f8b1c03e          LDRH     r12,[r1,#0x3e]        ;2849
002b34  4932              LDR      r1,|L1.11264|
002b36  4a33              LDR      r2,|L1.11268|
002b38  f2417b70          MOV      r11,#0x1770           ;2823
002b3c  f9b11000          LDRSH    r1,[r1,#0]            ;2822
002b40  f9b22000          LDRSH    r2,[r2,#0]            ;2827
002b44  fb0cfc01          MUL      r12,r12,r1            ;2850
002b48  f9ba1006          LDRSH    r1,[r10,#6]
002b4c  4832              LDR      r0,|L1.11288|
;;;2855   	temp_SL*=KunetB;
002b4e  4351              MULS     r1,r2,r1
;;;2856   	temp_SL/=6000L;
002b50  fb91f1fb          SDIV     r1,r1,r11
;;;2857   	net_Ub=(signed short)temp_SL;
002b54  b20a              SXTH     r2,r1
;;;2858   
;;;2859   	temp_SL=(signed long)adc_buff_[10];
002b56  f9ba1014          LDRSH    r1,[r10,#0x14]
002b5a  f8dfa0ac          LDR      r10,|L1.11272|
002b5e  8800              LDRH     r0,[r0,#0]            ;2847  ; AUSW_MAIN
002b60  f2456911          MOV      r9,#0x5611            ;2847
002b64  f9baa000          LDRSH    r10,[r10,#0]          ;2832
002b68  4548              CMP      r0,r9                 ;2847
;;;2860   	temp_SL*=KunetC;
002b6a  fb01f10a          MUL      r1,r1,r10
;;;2861   	temp_SL/=6000L;
002b6e  fb91f1fb          SDIV     r1,r1,r11
;;;2862   	net_Uc=(signed short)temp_SL;
002b72  b209              SXTH     r1,r1
002b74  d17d              BNE      |L1.11378|
002b76  f44f607a          MOV      r0,#0xfa0             ;2851
002b7a  fb9cf0f0          SDIV     r0,r12,r0             ;2851
002b7e  b200              SXTH     r0,r0                 ;2852
002b80  f8a80000          STRH     r0,[r8,#0]            ;2852
002b84  803a              STRH     r2,[r7,#0]            ;2857
002b86  8021              STRH     r1,[r4,#0]
;;;2863   
;;;2864   	net_U=net_Ua;
002b88  4c13              LDR      r4,|L1.11224|
002b8a  8020              STRH     r0,[r4,#0]
;;;2865   	if(net_Ub<net_U)net_U=net_Ub;
002b8c  4282              CMP      r2,r0
002b8e  da00              BGE      |L1.11154|
002b90  8022              STRH     r2,[r4,#0]
                  |L1.11154|
;;;2866   	if(net_Uc<net_U)net_U=net_Uc;
002b92  f9b47000          LDRSH    r7,[r4,#0]  ; net_U
002b96  42b9              CMP      r1,r7
002b98  da00              BGE      |L1.11164|
002b9a  8021              STRH     r1,[r4,#0]
                  |L1.11164|
;;;2867   	//o_10_s
;;;2868   	net_Umax=net_Ua;
002b9c  8018              STRH     r0,[r3,#0]
;;;2869   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002b9e  4282              CMP      r2,r0
002ba0  dd00              BLE      |L1.11172|
002ba2  801a              STRH     r2,[r3,#0]
                  |L1.11172|
;;;2870   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002ba4  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002ba8  4281              CMP      r1,r0
002baa  dd00              BLE      |L1.11182|
002bac  8019              STRH     r1,[r3,#0]
                  |L1.11182|
002bae  e0d6              B        |L1.11614|
                  |L1.11184|
                          DCD      ||area_number.25||
                  |L1.11188|
                          DCD      KB_ALGORITM
                  |L1.11192|
                          DCD      mess_data
                  |L1.11196|
                          DCD      USIGN
                  |L1.11200|
                          DCD      load_U
                  |L1.11204|
                          DCD      load_I
                  |L1.11208|
                          DCD      bat_ips
                  |L1.11212|
                          DCD      bat_u_old_cnt
                  |L1.11216|
                          DCD      bat
                  |L1.11220|
                          DCD      net_av_2min_timer
                  |L1.11224|
                          DCD      net_U
                  |L1.11228|
                          DCD      UMN
                  |L1.11232|
                          DCD      main_1Hz_cnt
                  |L1.11236|
                          DCD      unet_drv_cnt
                  |L1.11240|
                          DCD      net_Ustore
                  |L1.11244|
                          DCD      net_Umax
                  |L1.11248|
                          DCD      UMAXN
                  |L1.11252|
                          DCD      unet_max_drv_cnt
                  |L1.11256|
                          DCD      net_Ustore_max
                  |L1.11260|
                          DCD      bps
                  |L1.11264|
                          DCD      KunetA
                  |L1.11268|
                          DCD      KunetB
                  |L1.11272|
                          DCD      KunetC
                  |L1.11276|
                          DCD      net_Ua
                  |L1.11280|
                          DCD      net_Ub
                  |L1.11284|
                          DCD      net_Uc
                  |L1.11288|
                          DCD      AUSW_MAIN
                  |L1.11292|
                          DCD      ||.bss||+0x40c
002c20  e7ff              B        |L1.11298|
                  |L1.11298|
002c22  49fc              LDR      r1,|L1.12308|
002c24  7808              LDRB     r0,[r1,#0]            ;2817  ; bps
002c26  f891c001          LDRB     r12,[r1,#1]           ;2817  ; bps
002c2a  eb00200c          ADD      r0,r0,r12,LSL #8      ;2817
002c2e  f8dfc3e8          LDR      r12,|L1.12312|
002c32  b280              UXTH     r0,r0                 ;2817
002c34  f8ac0000          STRH     r0,[r12,#0]           ;2817
002c38  f891a002          LDRB     r10,[r1,#2]           ;2818  ; bps
002c3c  f891b003          LDRB     r11,[r1,#3]           ;2818  ; bps
002c40  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2818
002c44  fa1ffa8a          UXTH     r10,r10               ;2818
002c48  f8aca002          STRH     r10,[r12,#2]          ;2818
002c4c  f891b004          LDRB     r11,[r1,#4]           ;2819  ; bps
002c50  f891e005          LDRB     lr,[r1,#5]            ;2819  ; bps
002c54  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2819
002c58  fa1ffb8b          UXTH     r11,r11               ;2819
002c5c  f8acb004          STRH     r11,[r12,#4]          ;2819
002c60  fb0bfb09          MUL      r11,r11,r9            ;2822
002c64  f2417970          MOV      r9,#0x1770            ;2823
002c68  fb9bfcf9          SDIV     r12,r11,r9            ;2823
002c6c  fa0ffc8c          SXTH     r12,r12               ;2824
002c70  e000              B        |L1.11380|
                  |L1.11378|
002c72  e02a              B        |L1.11466|
                  |L1.11380|
002c74  f8a8c000          STRH     r12,[r8,#0]           ;2824
002c78  fb0afa02          MUL      r10,r10,r2            ;2827
002c7c  fb9af2f9          SDIV     r2,r10,r9             ;2828
002c80  b212              SXTH     r2,r2                 ;2829
002c82  803a              STRH     r2,[r7,#0]            ;2829
002c84  9f03              LDR      r7,[sp,#0xc]          ;2832
002c86  fb00f007          MUL      r0,r0,r7              ;2832
002c8a  fb90f0f9          SDIV     r0,r0,r9              ;2833
002c8e  b200              SXTH     r0,r0                 ;2834
002c90  8020              STRH     r0,[r4,#0]            ;2834
002c92  798c              LDRB     r4,[r1,#6]            ;2836  ; bps
002c94  79c9              LDRB     r1,[r1,#7]            ;2836  ; bps
002c96  eb042101          ADD      r1,r4,r1,LSL #8       ;2836
002c9a  4ce0              LDR      r4,|L1.12316|
002c9c  8021              STRH     r1,[r4,#0]            ;2836
002c9e  49e0              LDR      r1,|L1.12320|
002ca0  f8a1c000          STRH     r12,[r1,#0]           ;2838
002ca4  4562              CMP      r2,r12                ;2839
002ca6  da00              BGE      |L1.11434|
002ca8  800a              STRH     r2,[r1,#0]            ;2839
                  |L1.11434|
002caa  f9b14000          LDRSH    r4,[r1,#0]            ;2840  ; net_U
002cae  42a0              CMP      r0,r4                 ;2840
002cb0  da00              BGE      |L1.11444|
002cb2  8008              STRH     r0,[r1,#0]            ;2840
                  |L1.11444|
002cb4  f8a3c000          STRH     r12,[r3,#0]           ;2842
002cb8  4562              CMP      r2,r12                ;2843
002cba  dd00              BLE      |L1.11454|
002cbc  801a              STRH     r2,[r3,#0]            ;2843
                  |L1.11454|
002cbe  f9b31000          LDRSH    r1,[r3,#0]            ;2844  ; net_Umax
002cc2  4288              CMP      r0,r1                 ;2844
002cc4  dd4b              BLE      |L1.11614|
002cc6  8018              STRH     r0,[r3,#0]            ;2844
002cc8  e049              B        |L1.11614|
                  |L1.11466|
;;;2871   	//o_10_e
;;;2872   	}
;;;2873   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002cca  f5a049ac          SUB      r9,r0,#0x5600
002cce  f1b9092f          SUBS     r9,r9,#0x2f
002cd2  d00b              BEQ      |L1.11500|
002cd4  f1190928          ADDS     r9,r9,#0x28
002cd8  d008              BEQ      |L1.11500|
002cda  f1b90914          SUBS     r9,r9,#0x14
002cde  d005              BEQ      |L1.11500|
002ce0  f1b90901          SUBS     r9,r9,#1
002ce4  d002              BEQ      |L1.11500|
002ce6  f119091a          ADDS     r9,r9,#0x1a
002cea  d11c              BNE      |L1.11558|
                  |L1.11500|
;;;2874   	{
;;;2875   	temp_SL=(signed long)net_buff_;
;;;2876   	temp_SL*=KunetA;
;;;2877   	temp_SL/=40000L;
002cec  f6494040          MOV      r0,#0x9c40
002cf0  fb9cf0f0          SDIV     r0,r12,r0
;;;2878   	net_Ua=(signed short)temp_SL;
002cf4  b200              SXTH     r0,r0
002cf6  f8a80000          STRH     r0,[r8,#0]
;;;2879   
;;;2880   	temp_SL=(signed long)adc_buff_[3];
;;;2881   	temp_SL*=KunetB;
;;;2882   	temp_SL/=6000L;
;;;2883   	net_Ub=(signed short)temp_SL;
002cfa  803a              STRH     r2,[r7,#0]
;;;2884   
;;;2885   	temp_SL=(signed long)adc_buff_[10];
;;;2886   	temp_SL*=KunetC;
;;;2887   	temp_SL/=6000L;
;;;2888   	net_Uc=(signed short)temp_SL;
002cfc  8021              STRH     r1,[r4,#0]
;;;2889   
;;;2890   	net_U=net_Ua;
002cfe  4cc8              LDR      r4,|L1.12320|
002d00  8020              STRH     r0,[r4,#0]
;;;2891   	if(net_Ub<net_U)net_U=net_Ub;
002d02  4282              CMP      r2,r0
002d04  da00              BGE      |L1.11528|
002d06  8022              STRH     r2,[r4,#0]
                  |L1.11528|
;;;2892   	if(net_Uc<net_U)net_U=net_Uc;
002d08  f9b47000          LDRSH    r7,[r4,#0]  ; net_U
002d0c  42b9              CMP      r1,r7
002d0e  da00              BGE      |L1.11538|
002d10  8021              STRH     r1,[r4,#0]
                  |L1.11538|
;;;2893   	//o_10_s
;;;2894   	net_Umax=net_Ua;
002d12  8018              STRH     r0,[r3,#0]
;;;2895   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002d14  4282              CMP      r2,r0
002d16  dd00              BLE      |L1.11546|
002d18  801a              STRH     r2,[r3,#0]
                  |L1.11546|
;;;2896   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002d1a  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002d1e  4281              CMP      r1,r0
002d20  dd1d              BLE      |L1.11614|
002d22  8019              STRH     r1,[r3,#0]
002d24  e01b              B        |L1.11614|
                  |L1.11558|
;;;2897   	//o_10_e
;;;2898   	}
;;;2899   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2900   	{
;;;2901   	temp_SL=(signed long)net_buff_;
;;;2902   	temp_SL*=Kunet;
002d26  49bf              LDR      r1,|L1.12324|
002d28  f5a044aa          SUB      r4,r0,#0x5500         ;2899
002d2c  f9b12000          LDRSH    r2,[r1,#0]
002d30  49b9              LDR      r1,|L1.12312|
002d32  39e0              SUBS     r1,r1,#0xe0           ;2849
002d34  8fc9              LDRH     r1,[r1,#0x3e]         ;2849
002d36  4351              MULS     r1,r2,r1
002d38  3cfa              SUBS     r4,r4,#0xfa           ;2899
002d3a  d001              BEQ      |L1.11584|
002d3c  1e62              SUBS     r2,r4,#1              ;2899
002d3e  d107              BNE      |L1.11600|
                  |L1.11584|
;;;2903   	temp_SL/=35000L;
002d40  f64800b8          MOV      r0,#0x88b8
002d44  fb91f0f0          SDIV     r0,r1,r0
;;;2904   	net_U=(signed short)temp_SL;
002d48  49b5              LDR      r1,|L1.12320|
002d4a  8008              STRH     r0,[r1,#0]
;;;2905   	net_Umax=net_U; //o_10
002d4c  8018              STRH     r0,[r3,#0]
002d4e  e006              B        |L1.11614|
                  |L1.11600|
;;;2906   	}
;;;2907   else
;;;2908   	{
;;;2909   	temp_SL=(signed long)net_buff_;
;;;2910   	temp_SL*=Kunet;
;;;2911   	#ifdef _ACDC_
;;;2912   	temp_SL/=500L;
002d50  f44f70fa          MOV      r0,#0x1f4
002d54  fb91f0f0          SDIV     r0,r1,r0
;;;2913   	#else
;;;2914   	temp_SL/=5000L;
;;;2915   	#endif
;;;2916   	net_U=(signed short)temp_SL;
002d58  49b1              LDR      r1,|L1.12320|
002d5a  8008              STRH     r0,[r1,#0]
;;;2917   	net_Umax=net_U; //o_10
002d5c  8018              STRH     r0,[r3,#0]
                  |L1.11614|
;;;2918   	
;;;2919   	}
;;;2920   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002d5e  2d07              CMP      r5,#7
002d60  d003              BEQ      |L1.11626|
002d62  48b1              LDR      r0,|L1.12328|
002d64  8801              LDRH     r1,[r0,#0]  ; net_F
002d66  48ad              LDR      r0,|L1.12316|
002d68  8001              STRH     r1,[r0,#0]
                  |L1.11626|
;;;2921   #endif
;;;2922   
;;;2923   #ifdef UKU_TELECORE2015
;;;2924   //напряжение сети
;;;2925   temp_SL=(signed long)net_buff_;
;;;2926   temp_SL*=Kunet;
;;;2927   temp_SL/=110000L;
;;;2928   net_U=(signed short)temp_SL;
;;;2929   #endif
;;;2930   
;;;2931   #ifdef UKU_TELECORE2017
;;;2932   //напряжение сети
;;;2933   temp_SL=(signed long)net_buff_;
;;;2934   temp_SL*=Kunet;
;;;2935   temp_SL/=110000L;
;;;2936   net_U=(signed short)temp_SL;
;;;2937   #endif
;;;2938   
;;;2939   
;;;2940   #ifdef UKU_FSO
;;;2941   //напряжение сети
;;;2942   if(NUMPHASE==1)
;;;2943   	{
;;;2944   	temp_SL=(signed long)net_buff_;
;;;2945   	temp_SL*=Kunet;
;;;2946   	temp_SL/=110000L;
;;;2947   	net_U=(signed short)temp_SL;
;;;2948   	net_Umax=net_U;
;;;2949   	}
;;;2950   else
;;;2951   	{
;;;2952   	temp_SL=(signed long)net_buff_;
;;;2953   	temp_SL*=KunetA;
;;;2954   	temp_SL/=40000L;
;;;2955   	net_Ua=(signed short)temp_SL;
;;;2956   
;;;2957   	temp_SL=(signed long)adc_buff_[3];
;;;2958   	temp_SL*=KunetB;
;;;2959   	temp_SL/=6000L;
;;;2960   	net_Ub=(signed short)temp_SL;
;;;2961   
;;;2962   	temp_SL=(signed long)adc_buff_[10];
;;;2963   	temp_SL*=KunetC;
;;;2964   	temp_SL/=6000L;
;;;2965   	net_Uc=(signed short)temp_SL;
;;;2966   
;;;2967   	net_U=net_Ua;
;;;2968   	if(net_Ub<net_U)net_U=net_Ub;
;;;2969   	if(net_Uc<net_U)net_U=net_Uc;
;;;2970   	//o_10_s
;;;2971   	net_Umax=net_Ua;
;;;2972   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2973   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2974   	}
;;;2975   #endif	//UKU_FSO
;;;2976   
;;;2977   //Напряжения батарей
;;;2978   temp_SL=(signed long)adc_buff_[0];
002d6a  f8df92c0          LDR      r9,|L1.12332|
002d6e  f9b92000          LDRSH    r2,[r9,#0]  ; adc_buff_
;;;2979   temp_SL*=Kubat[0];
002d72  49af              LDR      r1,|L1.12336|
002d74  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002d78  4350              MULS     r0,r2,r0
;;;2980   temp_SL/=2000L;
002d7a  f44f64fa          MOV      r4,#0x7d0
002d7e  fb90f0f4          SDIV     r0,r0,r4
;;;2981   bat[0]._Ub=(signed short)temp_SL;
002d82  4dac              LDR      r5,|L1.12340|
002d84  8068              STRH     r0,[r5,#2]
;;;2982   
;;;2983   #ifdef UKU_220
;;;2984   //Напряжения батарей
;;;2985   temp_SL=(signed long)adc_buff_[0];
;;;2986   temp_SL*=Kubat[0];
;;;2987   temp_SL/=400L;
;;;2988   bat[0]._Ub=(signed short)temp_SL;
;;;2989   #endif
;;;2990   
;;;2991   #ifdef UKU_220_V2
;;;2992   //Напряжения батарей
;;;2993   temp_SL=(signed long)adc_buff_[0];
;;;2994   temp_SL*=Kubat[0];
;;;2995   temp_SL/=400L;
;;;2996   bat[0]._Ub=(signed short)temp_SL;
;;;2997   #endif
;;;2998   
;;;2999   //adc_buff_[4]=300;
;;;3000   
;;;3001   temp_SL=(signed long)adc_buff_[4];
002d86  f9b92008          LDRSH    r2,[r9,#8]  ; adc_buff_
;;;3002   temp_SL*=Kubatm[0];
002d8a  4bab              LDR      r3,|L1.12344|
002d8c  f9b30000          LDRSH    r0,[r3,#0]  ; Kubatm
002d90  fb00f002          MUL      r0,r0,r2
;;;3003   temp_SL/=700L;
002d94  f44f722f          MOV      r2,#0x2bc
002d98  fb90f0f2          SDIV     r0,r0,r2
;;;3004   bat[0]._Ubm=(signed short)temp_SL;
002d9c  80a8              STRH     r0,[r5,#4]
;;;3005   
;;;3006   #ifdef UKU_KONTUR
;;;3007   temp_SL=(signed long)adc_buff_[4];
;;;3008   temp_SL*=Kubatm[0];
;;;3009   temp_SL/=2000L;
;;;3010   bat[0]._Ubm=(signed short)temp_SL;
;;;3011   #endif
;;;3012   
;;;3013   #ifdef UKU_6U
;;;3014   temp_SL=(signed long)adc_buff_[4];
;;;3015   temp_SL*=Kubatm[0];
;;;3016   temp_SL/=2000L;
;;;3017   bat[0]._Ubm=(signed short)temp_SL;
;;;3018   #endif
;;;3019   
;;;3020   temp_SL=(signed long)adc_buff_[12];
002d9e  f9b90018          LDRSH    r0,[r9,#0x18]  ; adc_buff_
;;;3021   temp_SL*=Kubat[1];
002da2  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002da6  fb01f100          MUL      r1,r1,r0
;;;3022   temp_SL/=2000L;
002daa  fb91f0f4          SDIV     r0,r1,r4
;;;3023   bat[1]._Ub=(signed short)temp_SL;
002dae  f8a50052          STRH     r0,[r5,#0x52]
;;;3024   
;;;3025   #ifdef UKU_220
;;;3026   temp_SL=(signed long)adc_buff_[12];
;;;3027   temp_SL*=Kubat[1];
;;;3028   temp_SL/=400L;
;;;3029   bat[1]._Ub=(signed short)temp_SL;
;;;3030   #endif
;;;3031   
;;;3032   #ifdef UKU_220_V2
;;;3033   temp_SL=(signed long)adc_buff_[12];
;;;3034   temp_SL*=Kubat[1];
;;;3035   temp_SL/=400L;
;;;3036   bat[1]._Ub=(signed short)temp_SL;
;;;3037   #endif
;;;3038   
;;;3039   //adc_buff_[1]=300;
;;;3040   
;;;3041   temp_SL=(signed long)adc_buff_[1];
002db2  f9b91002          LDRSH    r1,[r9,#2]  ; adc_buff_
;;;3042   temp_SL*=Kubatm[1];
002db6  f9b30002          LDRSH    r0,[r3,#2]  ; Kubatm
002dba  fb00f001          MUL      r0,r0,r1
;;;3043   temp_SL/=700L;
002dbe  fb90f0f2          SDIV     r0,r0,r2
;;;3044   bat[1]._Ubm=(signed short)temp_SL;
002dc2  f8a50054          STRH     r0,[r5,#0x54]
;;;3045   #ifdef UKU_KONTUR
;;;3046   temp_SL=(signed long)adc_buff_[1];
;;;3047   temp_SL*=Kubatm[1];
;;;3048   temp_SL/=2000L;
;;;3049   bat[1]._Ubm=(signed short)temp_SL;
;;;3050   #endif
;;;3051   #ifdef UKU_6U
;;;3052   temp_SL=(signed long)adc_buff_[1];
;;;3053   temp_SL*=Kubatm[1];
;;;3054   temp_SL/=2000L;
;;;3055   bat[1]._Ubm=(signed short)temp_SL;
;;;3056   #endif
;;;3057   
;;;3058   #ifdef UKU_TELECORE2015
;;;3059   temp_SL=(signed long)adc_buff_[2];
;;;3060   temp_SL*=Kubat[0];
;;;3061   temp_SL/=2000L;
;;;3062   bat[0]._Ub=(signed short)temp_SL;
;;;3063   #endif
;;;3064   
;;;3065   /*
;;;3066   //Токи батарей
;;;3067   if(!mess_find_unvol(MESS2MATEMAT))
;;;3068   	{
;;;3069   	temp_SL=(signed long)ad7705_buff_[0];
;;;3070   	temp_SL-=(signed long)Kibat0[0];
;;;3071   	temp_SL*=(signed long)Kibat1[0];
;;;3072   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3073   	else temp_SL/=1000L;
;;;3074   	bat[0]._Ib=(signed short)temp_SL;
;;;3075   
;;;3076   	temp_SL=(signed long)ad7705_buff_[1];
;;;3077   	temp_SL-=(signed long)Kibat0[1];
;;;3078   	temp_SL*=(signed long)Kibat1[1];
;;;3079   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3080   	else temp_SL/=1000L;
;;;3081   	bat[1]._Ib=(signed short)temp_SL;
;;;3082   	}
;;;3083   */
;;;3084   
;;;3085   
;;;3086   //Токи батарей
;;;3087   if(!mess_find_unvol(MESS2MATEMAT))
002dc6  f04f00dc          MOV      r0,#0xdc
002dca  f7fffffe          BL       mess_find_unvol
;;;3088   	{
;;;3089   	temp_SL=(signed long)ad7705_buff_[0];
;;;3090   	temp_SL-=(signed long)Kibat0[0];
;;;3091   	temp_SL*=(signed long)Kibat1[0];
;;;3092   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3093   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002dce  f2456713          MOV      r7,#0x5613
002dd2  bbf0              CBNZ     r0,|L1.11858|
002dd4  4899              LDR      r0,|L1.12348|
002dd6  8800              LDRH     r0,[r0,#0]            ;3089  ; ad7705_buff_
002dd8  4999              LDR      r1,|L1.12352|
002dda  f8b18000          LDRH     r8,[r1,#0]            ;3090  ; Kibat0
002dde  eba00008          SUB      r0,r0,r8              ;3090
002de2  f8dfe260          LDR      lr,|L1.12356|
002de6  f9be1000          LDRSH    r1,[lr,#0]            ;3091  ; Kibat1
002dea  fb01fa00          MUL      r10,r1,r0             ;3091
002dee  4896              LDR      r0,|L1.12360|
002df0  f6456292          MOV      r2,#0x5e92            ;3092
002df4  f44f7396          MOV      r3,#0x12c             ;3092
002df8  8800              LDRH     r0,[r0,#0]            ;3092  ; AUSW_MAIN
;;;3094   	else temp_SL/=1000L;
002dfa  f44f7c7a          MOV      r12,#0x3e8
002dfe  f5a04bb0          SUB      r11,r0,#0x5800        ;3092
002e02  f5bb6bc7          SUBS     r11,r11,#0x638        ;3092
002e06  d001              BEQ      |L1.11788|
002e08  4290              CMP      r0,r2                 ;3092
002e0a  d102              BNE      |L1.11794|
                  |L1.11788|
002e0c  fb9afaf3          SDIV     r10,r10,r3            ;3092
002e10  e00e              B        |L1.11824|
                  |L1.11794|
002e12  f5a04ba8          SUB      r11,r0,#0x5400        ;3093
002e16  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3093
002e1a  d004              BEQ      |L1.11814|
002e1c  42b8              CMP      r0,r7                 ;3093
002e1e  d002              BEQ      |L1.11814|
002e20  f1bb0b17          SUBS     r11,r11,#0x17         ;3093
002e24  d102              BNE      |L1.11820|
                  |L1.11814|
002e26  fb9afaf4          SDIV     r10,r10,r4            ;3093
002e2a  e001              B        |L1.11824|
                  |L1.11820|
002e2c  fb9afafc          SDIV     r10,r10,r12
                  |L1.11824|
;;;3095   	#ifdef UKU_TELECORE2015
;;;3096   	temp_SL/=2L;
;;;3097   	//temp_SL=-temp_SL;
;;;3098   	#endif
;;;3099   	//#ifdef UKU_TELECORE2017
;;;3100   	//temp_SL/=-2L;
;;;3101   	//temp_SL=-temp_SL;
;;;3102   	//#endif
;;;3103   	bat[0]._Ib=(signed short)temp_SL;
002e30  f8a5a008          STRH     r10,[r5,#8]
;;;3104   
;;;3105   	temp_SL=(signed long)ad7705_buff[0];
002e34  f8dfa214          LDR      r10,|L1.12364|
;;;3106   	temp_SL-=(signed long)Kibat0[0];
002e38  ebaa0808          SUB      r8,r10,r8
;;;3107   	temp_SL*=(signed long)Kibat1[0];
002e3c  fb01f108          MUL      r1,r1,r8
;;;3108   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002e40  f6456b38          MOV      r11,#0x5e38
002e44  4558              CMP      r0,r11
002e46  d001              BEQ      |L1.11852|
002e48  4290              CMP      r0,r2
002e4a  d103              BNE      |L1.11860|
                  |L1.11852|
002e4c  fb91f1f3          SDIV     r1,r1,r3
002e50  e00f              B        |L1.11890|
                  |L1.11858|
002e52  e051              B        |L1.12024|
                  |L1.11860|
;;;3109   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002e54  f5a048a8          SUB      r8,r0,#0x5400
002e58  f5b878fd          SUBS     r8,r8,#0x1fa
002e5c  d004              BEQ      |L1.11880|
002e5e  42b8              CMP      r0,r7
002e60  d002              BEQ      |L1.11880|
002e62  f1b80817          SUBS     r8,r8,#0x17
002e66  d102              BNE      |L1.11886|
                  |L1.11880|
002e68  fb91f1f4          SDIV     r1,r1,r4
002e6c  e001              B        |L1.11890|
                  |L1.11886|
;;;3110   	else temp_SL/=1000L;
002e6e  fb91f1fc          SDIV     r1,r1,r12
                  |L1.11890|
;;;3111   	#ifdef UKU_TELECORE2015
;;;3112   	temp_SL/=2L;
;;;3113   	#endif
;;;3114   	bat[0]._Ib_=(signed short)temp_SL;
002e72  8169              STRH     r1,[r5,#0xa]
;;;3115   
;;;3116   
;;;3117   	temp_SL=(signed long)ad7705_buff_[1];
002e74  4971              LDR      r1,|L1.12348|
002e76  8849              LDRH     r1,[r1,#2]  ; ad7705_buff_
;;;3118   	temp_SL-=(signed long)Kibat0[1];
002e78  f8df81c4          LDR      r8,|L1.12352|
002e7c  f8b88002          LDRH     r8,[r8,#2]  ; Kibat0
002e80  eba10a08          SUB      r10,r1,r8
;;;3119   	temp_SL*=(signed long)Kibat1[1];
002e84  f9be1002          LDRSH    r1,[lr,#2]  ; Kibat1
002e88  fb01fa0a          MUL      r10,r1,r10
;;;3120   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002e8c  4558              CMP      r0,r11
002e8e  d001              BEQ      |L1.11924|
002e90  4290              CMP      r0,r2
002e92  d102              BNE      |L1.11930|
                  |L1.11924|
002e94  fb9afaf3          SDIV     r10,r10,r3
002e98  e00e              B        |L1.11960|
                  |L1.11930|
;;;3121   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002e9a  f5a04ea8          SUB      lr,r0,#0x5400
002e9e  f5be7efd          SUBS     lr,lr,#0x1fa
002ea2  d004              BEQ      |L1.11950|
002ea4  42b8              CMP      r0,r7
002ea6  d002              BEQ      |L1.11950|
002ea8  f1be0e17          SUBS     lr,lr,#0x17
002eac  d102              BNE      |L1.11956|
                  |L1.11950|
002eae  fb9afaf4          SDIV     r10,r10,r4
002eb2  e001              B        |L1.11960|
                  |L1.11956|
;;;3122   	else temp_SL/=1000L;
002eb4  fb9afafc          SDIV     r10,r10,r12
                  |L1.11960|
;;;3123   	bat[1]._Ib=(signed short)temp_SL;
002eb8  f8a5a058          STRH     r10,[r5,#0x58]
;;;3124   
;;;3125   	temp_SL=(signed long)ad7705_buff[1];
002ebc  f8dfa18c          LDR      r10,|L1.12364|
002ec0  f10a0a20          ADD      r10,r10,#0x20
;;;3126   	temp_SL-=(signed long)Kibat0[1];
002ec4  ebaa0808          SUB      r8,r10,r8
;;;3127   	temp_SL*=(signed long)Kibat1[1];
002ec8  fb01f108          MUL      r1,r1,r8
;;;3128   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002ecc  4558              CMP      r0,r11
002ece  d001              BEQ      |L1.11988|
002ed0  4290              CMP      r0,r2
002ed2  d102              BNE      |L1.11994|
                  |L1.11988|
002ed4  fb91f0f3          SDIV     r0,r1,r3
002ed8  e00c              B        |L1.12020|
                  |L1.11994|
;;;3129   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002eda  f5a042aa          SUB      r2,r0,#0x5500
002ede  3afa              SUBS     r2,r2,#0xfa
002ee0  d003              BEQ      |L1.12010|
002ee2  42b8              CMP      r0,r7
002ee4  d001              BEQ      |L1.12010|
002ee6  3a17              SUBS     r2,r2,#0x17
002ee8  d102              BNE      |L1.12016|
                  |L1.12010|
002eea  fb91f0f4          SDIV     r0,r1,r4
002eee  e001              B        |L1.12020|
                  |L1.12016|
;;;3130   	else temp_SL/=1000L;
002ef0  fb91f0fc          SDIV     r0,r1,r12
                  |L1.12020|
;;;3131   	bat[1]._Ib_=(signed short)temp_SL;
002ef4  f8a5005a          STRH     r0,[r5,#0x5a]
                  |L1.12024|
;;;3132   	}
;;;3133   
;;;3134   
;;;3135   
;;;3136   
;;;3137   
;;;3138   //Температуры батарей
;;;3139   
;;;3140   #ifdef UKU_KONTUR
;;;3141   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3142   else bat[0]._nd=1;
;;;3143   temp_SL=(signed long)adc_buff_[6];
;;;3144   temp_SL*=Ktbat[0];
;;;3145   temp_SL/=20000L;
;;;3146   temp_SL-=273L;
;;;3147   bat[0]._Tb=(signed short)temp_SL;
;;;3148   #else
;;;3149   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002ef8  f9b9000c          LDRSH    r0,[r9,#0xc]  ; adc_buff_
002efc  f6403eb7          MOV      lr,#0xbb7
002f00  4680              MOV      r8,r0
002f02  f2a03021          SUB      r0,r0,#0x321
002f06  2300              MOVS     r3,#0
;;;3150   else bat[0]._nd=1;
002f08  f04f0c01          MOV      r12,#1
002f0c  9002              STR      r0,[sp,#8]            ;3149
002f0e  4570              CMP      r0,lr                 ;3149
002f10  d201              BCS      |L1.12054|
002f12  73ab              STRB     r3,[r5,#0xe]          ;3149
002f14  e001              B        |L1.12058|
                  |L1.12054|
002f16  f885c00e          STRB     r12,[r5,#0xe]
                  |L1.12058|
;;;3151   temp_SL=(signed long)adc_buff_[6];
;;;3152   temp_SL*=Ktbat[0];
002f1a  484d              LDR      r0,|L1.12368|
002f1c  f9b00000          LDRSH    r0,[r0,#0]  ; Ktbat
002f20  fb00f008          MUL      r0,r0,r8
;;;3153   temp_SL/=20000L;
002f24  f6446120          MOV      r1,#0x4e20
002f28  fb90f0f1          SDIV     r0,r0,r1
;;;3154   temp_SL-=273L;
002f2c  f2a01011          SUB      r0,r0,#0x111
;;;3155   bat[0]._Tb=(signed short)temp_SL;
002f30  b200              SXTH     r0,r0
002f32  81a8              STRH     r0,[r5,#0xc]
;;;3156   #endif
;;;3157   
;;;3158   #ifdef UKU_KONTUR
;;;3159   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3160   else bat[1]._nd=1;
;;;3161   temp_SL=(signed long)adc_buff_[7];
;;;3162   temp_SL*=Ktbat[1];
;;;3163   temp_SL/=20000L;
;;;3164   temp_SL-=273L;
;;;3165   bat[1]._Tb=(signed short)temp_SL;
;;;3166   #else
;;;3167   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002f34  f9b9200e          LDRSH    r2,[r9,#0xe]  ; adc_buff_
002f38  f2a23221          SUB      r2,r2,#0x321
002f3c  4572              CMP      r2,lr
002f3e  d202              BCS      |L1.12102|
002f40  f885305e          STRB     r3,[r5,#0x5e]
002f44  e001              B        |L1.12106|
                  |L1.12102|
;;;3168   else bat[1]._nd=1;
002f46  f885c05e          STRB     r12,[r5,#0x5e]
                  |L1.12106|
;;;3169   temp_SL=(signed long)adc_buff_[7];
;;;3170   temp_SL*=Ktbat[1];
;;;3171   temp_SL/=20000L;
;;;3172   temp_SL-=273L;
;;;3173   bat[1]._Tb=(signed short)temp_SL;
002f4a  493a              LDR      r1,|L1.12340|
;;;3174   #ifdef UKU_ZVU
;;;3175   bat[1]._nd=bat[0]._nd;
002f4c  7b8a              LDRB     r2,[r1,#0xe]  ; bat
002f4e  f881205e          STRB     r2,[r1,#0x5e]
;;;3176   bat[1]._Tb=bat[0]._Tb;
002f52  f8a1005c          STRH     r0,[r1,#0x5c]
;;;3177   #endif
;;;3178   #endif
;;;3179   
;;;3180   #ifdef UKU_6U
;;;3181   
;;;3182   if(NUMMAKB==2)
;;;3183   	{
;;;3184   	if(makb[0]._cnt<5)
;;;3185   		{
;;;3186   		if(makb[0]._T_nd[0]==0)
;;;3187   			{
;;;3188   			bat[0]._Tb=makb[0]._T[0];
;;;3189   			bat[0]._nd=0;
;;;3190   			}
;;;3191   		}
;;;3192   
;;;3193   	if(makb[1]._cnt<5)
;;;3194   		{
;;;3195   		if(makb[1]._T_nd[0]==0)
;;;3196   			{
;;;3197   			bat[1]._Tb=makb[1]._T[0];
;;;3198   			bat[1]._nd=0;
;;;3199   			}
;;;3200   		}
;;;3201   
;;;3202   	}
;;;3203   else if(NUMMAKB==4)
;;;3204   	{
;;;3205   	signed short temp_t;
;;;3206   	temp_t=-20;
;;;3207   	if(makb[0]._cnt<5)
;;;3208   		{
;;;3209   		if(makb[0]._T_nd[0]==0)
;;;3210   			{
;;;3211   			temp_t=makb[0]._T[0];
;;;3212   			bat[0]._nd=0;
;;;3213   			}
;;;3214   		}
;;;3215   	if(makb[1]._cnt<5)
;;;3216   		{
;;;3217   		if(makb[1]._T_nd[0]==0)
;;;3218   			{
;;;3219   			if(temp_t<makb[1]._T[0])
;;;3220   				{
;;;3221   				bat[0]._nd=0;
;;;3222   				temp_t=makb[1]._T[0];
;;;3223   				}
;;;3224   			}
;;;3225   		}
;;;3226   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3227   
;;;3228    	temp_t=-20;
;;;3229   	if(makb[2]._cnt<5)
;;;3230   		{
;;;3231   		if(makb[2]._T_nd[0]==0)
;;;3232   			{
;;;3233   			temp_t=makb[2]._T[0];
;;;3234   			bat[1]._nd=0;
;;;3235   			}
;;;3236   		}
;;;3237   	if(makb[3]._cnt<5)
;;;3238   		{
;;;3239   		if(makb[3]._T_nd[0]==0)
;;;3240   			{
;;;3241   			if(temp_t<makb[3]._T[0])
;;;3242   				{
;;;3243   				bat[1]._nd=0;
;;;3244   				temp_t=makb[3]._T[0];
;;;3245   				}
;;;3246   			}
;;;3247   		}
;;;3248   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3249   	}
;;;3250   
;;;3251   #endif
;;;3252   
;;;3253   
;;;3254   //Напряжение нагрузки
;;;3255   temp_SL=(signed long)adc_buff_[2];
002f56  f9b91004          LDRSH    r1,[r9,#4]  ; adc_buff_
;;;3256   temp_SL*=Kuload;
002f5a  483e              LDR      r0,|L1.12372|
002f5c  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002f60  4348              MULS     r0,r1,r0
;;;3257   temp_SL/=2000L;
002f62  f44f62fa          MOV      r2,#0x7d0
002f66  fb90f0f2          SDIV     r0,r0,r2
;;;3258   load_U=(signed short)temp_SL;
002f6a  f8dfb0ec          LDR      r11,|L1.12376|
002f6e  f8ab0000          STRH     r0,[r11,#0]
;;;3259   
;;;3260   #ifdef UKU_220 
;;;3261   //Напряжение нагрузки
;;;3262   temp_SL=(signed long)adc_buff_[2];
;;;3263   temp_SL*=Kuload;
;;;3264   temp_SL/=350L;
;;;3265   load_U=(signed short)temp_SL;
;;;3266   #endif
;;;3267   
;;;3268   #ifdef UKU_220_V2 
;;;3269   //Напряжение нагрузки
;;;3270   temp_SL=(signed long)adc_buff_[2];
;;;3271   temp_SL*=Kuload;
;;;3272   temp_SL/=350L;
;;;3273   load_U=(signed short)temp_SL;
;;;3274   #endif
;;;3275   
;;;3276   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3277   //Напряжение шины
;;;3278   temp_SL=(signed long)adc_buff_[1];
002f72  f9b92002          LDRSH    r2,[r9,#2]  ; adc_buff_
;;;3279   temp_SL*=Kuout;
002f76  4839              LDR      r0,|L1.12380|
002f78  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002f7c  fb02f200          MUL      r2,r2,r0
;;;3280   if(AUSW_MAIN==22010)temp_SL/=400L;
002f80  4831              LDR      r0,|L1.12360|
002f82  f24554fa          MOV      r4,#0x55fa
002f86  f44f75c8          MOV      r5,#0x190
002f8a  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002f8c  42a0              CMP      r0,r4
002f8e  d102              BNE      |L1.12182|
002f90  fb92f2f5          SDIV     r2,r2,r5
002f94  e003              B        |L1.12190|
                  |L1.12182|
;;;3281   else temp_SL/=500L;
002f96  f44f7afa          MOV      r10,#0x1f4
002f9a  fb92f2fa          SDIV     r2,r2,r10
                  |L1.12190|
;;;3282   out_U=(signed short)temp_SL;
002f9e  fa0ffa82          SXTH     r10,r2
002fa2  4a2f              LDR      r2,|L1.12384|
002fa4  f8a2a000          STRH     r10,[r2,#0]
;;;3283   load_U=out_U;
002fa8  f8aba000          STRH     r10,[r11,#0]
;;;3284   
;;;3285   //Напряжение выпрямителей
;;;3286   temp_SL=(signed long)adc_buff_[2];
;;;3287   temp_SL*=Kubps;
002fac  4a2d              LDR      r2,|L1.12388|
002fae  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002fb2  fb01f102          MUL      r1,r1,r2
;;;3288   if(AUSW_MAIN==22010)temp_SL/=400L;
002fb6  d102              BNE      |L1.12222|
002fb8  fb91f1f5          SDIV     r1,r1,r5
002fbc  e003              B        |L1.12230|
                  |L1.12222|
;;;3289   else temp_SL/=500L;
002fbe  f44f72fa          MOV      r2,#0x1f4
002fc2  fb91f1f2          SDIV     r1,r1,r2
                  |L1.12230|
;;;3290   bps_U=(signed short)temp_SL;
002fc6  4d28              LDR      r5,|L1.12392|
002fc8  b209              SXTH     r1,r1
002fca  8029              STRH     r1,[r5,#0]
;;;3291   
;;;3292   if(bps_U<100)
002fcc  2964              CMP      r1,#0x64
002fce  da18              BGE      |L1.12290|
;;;3293   	{
;;;3294   	char i;
;;;3295   	for(i=0;i<NUMIST;i++)
002fd0  f04f0100          MOV      r1,#0
002fd4  4a25              LDR      r2,|L1.12396|
002fd6  f8dfb098          LDR      r11,|L1.12400|
002fda  f9b29000          LDRSH    r9,[r2,#0]
002fde  e00e              B        |L1.12286|
                  |L1.12256|
;;;3296   		{
;;;3297   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002fe0  eb0102c1          ADD      r2,r1,r1,LSL #3
002fe4  eb021201          ADD      r2,r2,r1,LSL #4
002fe8  eb0b0282          ADD      r2,r11,r2,LSL #2
002fec  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002ff0  6a12              LDR      r2,[r2,#0x20]
002ff2  42a2              CMP      r2,r4
002ff4  dd00              BLE      |L1.12280|
002ff6  802a              STRH     r2,[r5,#0]
                  |L1.12280|
002ff8  f1010101          ADD      r1,r1,#1              ;3295
002ffc  b2c9              UXTB     r1,r1                 ;3295
                  |L1.12286|
002ffe  4549              CMP      r1,r9                 ;3295
003000  dbee              BLT      |L1.12256|
                  |L1.12290|
;;;3298   		}
;;;3299   	}
;;;3300   
;;;3301   //Суммарный ток выпрямителей
;;;3302   temp_SL=0;
003002  f04f0500          MOV      r5,#0
;;;3303   for (i=0;i<NUMIST;i++)
003006  4629              MOV      r1,r5
003008  4a18              LDR      r2,|L1.12396|
00300a  4c19              LDR      r4,|L1.12400|
00300c  f9b22000          LDRSH    r2,[r2,#0]            ;3295
003010  e03c              B        |L1.12428|
003012  0000              DCW      0x0000
                  |L1.12308|
                          DCD      bps+0x452
                  |L1.12312|
                          DCD      ||area_number.25||+0xe0
                  |L1.12316|
                          DCD      net_F3
                  |L1.12320|
                          DCD      net_U
                  |L1.12324|
                          DCD      Kunet
                  |L1.12328|
                          DCD      net_F
                  |L1.12332|
                          DCD      ||.bss||+0x40c
                  |L1.12336|
                          DCD      Kubat
                  |L1.12340|
                          DCD      bat
                  |L1.12344|
                          DCD      Kubatm
                  |L1.12348|
                          DCD      ad7705_buff_
                  |L1.12352|
                          DCD      Kibat0
                  |L1.12356|
                          DCD      Kibat1
                  |L1.12360|
                          DCD      AUSW_MAIN
                  |L1.12364|
                          DCD      ad7705_buff
                  |L1.12368|
                          DCD      Ktbat
                  |L1.12372|
                          DCD      Kuload
                  |L1.12376|
                          DCD      load_U
                  |L1.12380|
                          DCD      Kuout
                  |L1.12384|
                          DCD      out_U
                  |L1.12388|
                          DCD      Kubps
                  |L1.12392|
                          DCD      bps_U
                  |L1.12396|
                          DCD      NUMIST
                  |L1.12400|
                          DCD      bps
                  |L1.12404|
;;;3304   	{
;;;3305   	temp_SL+=((signed long)bps[i]._Ii);
003074  eb0109c1          ADD      r9,r1,r1,LSL #3
003078  eb091901          ADD      r9,r9,r1,LSL #4
00307c  eb040989          ADD      r9,r4,r9,LSL #2
003080  f8d99024          LDR      r9,[r9,#0x24]
003084  444d              ADD      r5,r5,r9
003086  f1010101          ADD      r1,r1,#1              ;3303
00308a  b2c9              UXTB     r1,r1                 ;3303
                  |L1.12428|
00308c  4291              CMP      r1,r2                 ;3303
00308e  dbf1              BLT      |L1.12404|
;;;3306   	}
;;;3307   bps_I=(signed short)temp_SL;
003090  49ff              LDR      r1,|L1.13456|
003092  800d              STRH     r5,[r1,#0]
;;;3308   
;;;3309   
;;;3310   #endif
;;;3311   
;;;3312   
;;;3313   #ifdef UKU_KONTUR
;;;3314   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3315   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3316   else ND_EXT[0]=1;
;;;3317   temp_SL=(signed long)adc_buff_[5];
;;;3318   temp_SL*=Ktext[0];
;;;3319   temp_SL/=20000L;
;;;3320   temp_SL-=273L;
;;;3321   t_ext[0]=(signed short)temp_SL;
;;;3322   #else 
;;;3323   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3324   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
003094  49ff              LDR      r1,|L1.13460|
003096  f6403bb7          MOV      r11,#0xbb7
00309a  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
00309e  49fe              LDR      r1,|L1.13464|
0030a0  f2a53921          SUB      r9,r5,#0x321
0030a4  f8cd9004          STR      r9,[sp,#4]
0030a8  45d9              CMP      r9,r11
0030aa  d201              BCS      |L1.12464|
0030ac  700b              STRB     r3,[r1,#0]
0030ae  e001              B        |L1.12468|
                  |L1.12464|
;;;3325   else ND_EXT[0]=1;
0030b0  f881c000          STRB     r12,[r1,#0]
                  |L1.12468|
;;;3326   temp_SL=(signed long)adc_buff_[5];
;;;3327   temp_SL*=Ktext[0];
0030b4  f8df93e4          LDR      r9,|L1.13468|
0030b8  f9b99000          LDRSH    r9,[r9,#0]  ; Ktext
0030bc  fb09fb05          MUL      r11,r9,r5
;;;3328   temp_SL/=20000L;
0030c0  f6446e20          MOV      lr,#0x4e20
0030c4  fb9bfbfe          SDIV     r11,r11,lr
;;;3329   temp_SL-=273L;
0030c8  f2ab1b11          SUB      r11,r11,#0x111
;;;3330   t_ext[0]=(signed short)temp_SL;
0030cc  f8dfe3d0          LDR      lr,|L1.13472|
0030d0  f8aeb000          STRH     r11,[lr,#0]
;;;3331   /*
;;;3332   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3333   else ND_EXT[1]=1;
;;;3334   temp_SL=(signed long)adc_buff_[6];
;;;3335   temp_SL*=Ktext[1];
;;;3336   temp_SL/=20000L;
;;;3337   temp_SL-=273L;
;;;3338   t_ext[1]=(signed short)temp_SL;	*/
;;;3339   #endif
;;;3340   
;;;3341   #ifdef UKU_220
;;;3342   
;;;3343   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3344   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3345   else ND_EXT[1]=1;
;;;3346   temp_SL=(signed long)adc_buff_[3];
;;;3347   temp_SL*=Ktext[1];
;;;3348   temp_SL/=20000L;
;;;3349   temp_SL-=273L;
;;;3350   t_ext[1]=(signed short)temp_SL;
;;;3351   
;;;3352   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3353   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3354   else ND_EXT[2]=1;
;;;3355   temp_SL=(signed long)adc_buff_[10];
;;;3356   temp_SL*=Ktext[2];
;;;3357   temp_SL/=20000L;
;;;3358   temp_SL-=273L;
;;;3359   t_ext[2]=(signed short)temp_SL;
;;;3360   
;;;3361   #else
;;;3362   
;;;3363   
;;;3364   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3365   
;;;3366   //Внешний датчик температуры 
;;;3367   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
0030d4  f8dde008          LDR      lr,[sp,#8]
0030d8  f6403bb7          MOV      r11,#0xbb7
0030dc  45de              CMP      lr,r11
0030de  d201              BCS      |L1.12516|
0030e0  700b              STRB     r3,[r1,#0]
0030e2  e001              B        |L1.12520|
                  |L1.12516|
;;;3368   else ND_EXT[0]=1;
0030e4  f881c000          STRB     r12,[r1,#0]
                  |L1.12520|
;;;3369   temp_SL=(signed long)adc_buff_[6];
;;;3370   temp_SL*=Ktext[0];
0030e8  fb09f908          MUL      r9,r9,r8
;;;3371   temp_SL/=20000L;
0030ec  f6446e20          MOV      lr,#0x4e20
0030f0  fb99f9fe          SDIV     r9,r9,lr
;;;3372   temp_SL-=273L;
0030f4  f2a91911          SUB      r9,r9,#0x111
;;;3373   t_ext[0]=(signed short)temp_SL;
0030f8  f8df83a4          LDR      r8,|L1.13472|
0030fc  f8a89000          STRH     r9,[r8,#0]
;;;3374   
;;;3375   //Внешний датчик температуры №2
;;;3376   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
003100  f8dd9004          LDR      r9,[sp,#4]
003104  45d9              CMP      r9,r11
003106  d201              BCS      |L1.12556|
003108  704b              STRB     r3,[r1,#1]
00310a  e001              B        |L1.12560|
                  |L1.12556|
;;;3377   else ND_EXT[1]=1;
00310c  f881c001          STRB     r12,[r1,#1]
                  |L1.12560|
;;;3378   temp_SL=(signed long)adc_buff_[5];
;;;3379   temp_SL*=Ktext[1];
003110  f8dfc388          LDR      r12,|L1.13468|
003114  f9bcc002          LDRSH    r12,[r12,#2]  ; Ktext
003118  fb0cfc05          MUL      r12,r12,r5
;;;3380   temp_SL/=20000L;
00311c  fb9cf5fe          SDIV     r5,r12,lr
;;;3381   temp_SL-=273L;
003120  f2a51511          SUB      r5,r5,#0x111
;;;3382   t_ext[1]=(signed short)temp_SL;
003124  f8dfc378          LDR      r12,|L1.13472|
003128  b22d              SXTH     r5,r5
00312a  f8ac5002          STRH     r5,[r12,#2]
00312e  9500              STR      r5,[sp,#0]
;;;3383   #else
;;;3384   
;;;3385   
;;;3386   
;;;3387   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3388   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3389   else ND_EXT[1]=1;
;;;3390   temp_SL=(signed long)adc_buff_[6];
;;;3391   temp_SL*=Ktext[1];
;;;3392   temp_SL/=20000L;
;;;3393   temp_SL-=273L;
;;;3394   t_ext[1]=(signed short)temp_SL;
;;;3395   
;;;3396   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3397   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3398   else ND_EXT[2]=1;
;;;3399   temp_SL=(signed long)adc_buff_[3];
;;;3400   temp_SL*=Ktext[2];
;;;3401   temp_SL/=20000L;
;;;3402   temp_SL-=273L;
;;;3403   t_ext[2]=(signed short)temp_SL;
;;;3404   
;;;3405   #endif
;;;3406   #endif
;;;3407   
;;;3408   #ifdef UKU_220_V2
;;;3409   
;;;3410   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3411   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3412   else ND_EXT[1]=1;
;;;3413   temp_SL=(signed long)adc_buff_[3];
;;;3414   temp_SL*=Ktext[1];
;;;3415   temp_SL/=20000L;
;;;3416   temp_SL-=273L;
;;;3417   t_ext[1]=(signed short)temp_SL;
;;;3418   
;;;3419   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3420   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3421   else ND_EXT[2]=1;
;;;3422   temp_SL=(signed long)adc_buff_[10];
;;;3423   temp_SL*=Ktext[2];
;;;3424   temp_SL/=20000L;
;;;3425   temp_SL-=273L;
;;;3426   t_ext[2]=(signed short)temp_SL;
;;;3427   
;;;3428   #else
;;;3429   
;;;3430   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3431   //Ток батареи
;;;3432   
;;;3433   if(bps[8]._device==dIBAT_METR)
003130  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3434   	{
;;;3435   	ibat_metr_buff_[0][0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3436   	ibat_metr_buff_[0][1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3437   	bIBAT_SMKLBR[0]=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3438   	if(bIBAT_SMKLBR[0]) bIBAT_SMKLBR_cnt[0]=50;
;;;3439   	if(!bIBAT_SMKLBR[0])
;;;3440   		{
;;;3441   		signed long temp_SL;
;;;3442   		temp_SL=(signed long)ibat_metr_buff_[0][0];
;;;3443   		temp_SL-=(signed long)ibat_metr_buff_[0][1];
;;;3444   		temp_SL*=(signed long)Kibat1[0];
;;;3445   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3446   	
;;;3447   		Ib_ips_termokompensat[0] =(signed short)temp_SL;
003134  f8dfc36c          LDR      r12,|L1.13476|
003138  2d09              CMP      r5,#9                 ;3433
00313a  d15a              BNE      |L1.12786|
00313c  f8945326          LDRB     r5,[r4,#0x326]        ;3435  ; bps
003140  f8948327          LDRB     r8,[r4,#0x327]        ;3435  ; bps
003144  f8df9360          LDR      r9,|L1.13480|
003148  eb052508          ADD      r5,r5,r8,LSL #8       ;3435
00314c  f8c95000          STR      r5,[r9,#0]            ;3435  ; ibat_metr_buff_
003150  f8948328          LDRB     r8,[r4,#0x328]        ;3436  ; bps
003154  f894b329          LDRB     r11,[r4,#0x329]       ;3436  ; bps
003158  eb08280b          ADD      r8,r8,r11,LSL #8      ;3436
00315c  f8c98004          STR      r8,[r9,#4]            ;3436  ; ibat_metr_buff_
003160  f894932a          LDRB     r9,[r4,#0x32a]        ;3437  ; bps
003164  f894b32b          LDRB     r11,[r4,#0x32b]       ;3437  ; bps
003168  eb09290b          ADD      r9,r9,r11,LSL #8      ;3437
00316c  fa0ffb89          SXTH     r11,r9                ;3437
003170  f8df9338          LDR      r9,|L1.13484|
003174  f8a9b000          STRH     r11,[r9,#0]           ;3437
003178  f8df9334          LDR      r9,|L1.13488|
00317c  f1bb0f00          CMP      r11,#0                ;3438
003180  d003              BEQ      |L1.12682|
003182  f04f0b32          MOV      r11,#0x32             ;3438
003186  f8a9b000          STRH     r11,[r9,#0]           ;3438
                  |L1.12682|
00318a  d132              BNE      |L1.12786|
00318c  eba50808          SUB      r8,r5,r8              ;3443
003190  4dc8              LDR      r5,|L1.13492|
003192  f9b55000          LDRSH    r5,[r5,#0]            ;3444  ; Kibat1
003196  fb05f508          MUL      r5,r5,r8              ;3444
00319a  f5a048a8          SUB      r8,r0,#0x5400         ;3445
00319e  f5b878fd          SUBS     r8,r8,#0x1fa          ;3445
0031a2  d00f              BEQ      |L1.12740|
0031a4  f1b80801          SUBS     r8,r8,#1              ;3445
0031a8  d00c              BEQ      |L1.12740|
0031aa  42b8              CMP      r0,r7                 ;3445
0031ac  d00a              BEQ      |L1.12740|
0031ae  f1b80716          SUBS     r7,r8,#0x16           ;3445
0031b2  d007              BEQ      |L1.12740|
0031b4  3f1e              SUBS     r7,r7,#0x1e           ;3445
0031b6  d005              BEQ      |L1.12740|
0031b8  3728              ADDS     r7,r7,#0x28           ;3445
0031ba  d003              BEQ      |L1.12740|
0031bc  3f14              SUBS     r7,r7,#0x14           ;3445
0031be  d001              BEQ      |L1.12740|
0031c0  1e7f              SUBS     r7,r7,#1              ;3445
0031c2  d103              BNE      |L1.12748|
                  |L1.12740|
0031c4  f44f67fa          MOV      r7,#0x7d0             ;3445
0031c8  fb95f5f7          SDIV     r5,r5,r7              ;3445
                  |L1.12748|
0031cc  b22f              SXTH     r7,r5
0031ce  f8ac7000          STRH     r7,[r12,#0]
;;;3448   		if(bIBAT_SMKLBR_cnt[0])
0031d2  f9b95000          LDRSH    r5,[r9,#0]  ; bIBAT_SMKLBR_cnt
;;;3449   			{
;;;3450   			bIBAT_SMKLBR_cnt[0]--;
;;;3451   			Ib_ips_termokompensat[0]=Ib_ips_termokompensat_temp[0];
0031d6  f8df82e0          LDR      r8,|L1.13496|
0031da  b145              CBZ      r5,|L1.12782|
0031dc  f1a50501          SUB      r5,r5,#1              ;3450
0031e0  f8a95000          STRH     r5,[r9,#0]            ;3450
0031e4  f8b85000          LDRH     r5,[r8,#0]  ; Ib_ips_termokompensat_temp
0031e8  f8ac5000          STRH     r5,[r12,#0]
0031ec  e001              B        |L1.12786|
                  |L1.12782|
;;;3452   			}
;;;3453   		else 
;;;3454   			{
;;;3455   			Ib_ips_termokompensat_temp[0]=Ib_ips_termokompensat[0];
0031ee  f8a87000          STRH     r7,[r8,#0]
                  |L1.12786|
;;;3456   			}
;;;3457   		}
;;;3458   	}
;;;3459   
;;;3460   bat[0]._Ub=load_U;
0031f2  4db2              LDR      r5,|L1.13500|
0031f4  f8a5a002          STRH     r10,[r5,#2]
;;;3461   if(AUSW_MAIN==22018) Ib_ips_termokompensat[0]=bat[0]._Ib;
0031f8  f5a047ac          SUB      r7,r0,#0x5600
0031fc  3f02              SUBS     r7,#2
0031fe  d103              BNE      |L1.12808|
003200  8928              LDRH     r0,[r5,#8]  ; bat
003202  f8ac0000          STRH     r0,[r12,#0]
003206  e002              B        |L1.12814|
                  |L1.12808|
;;;3462   else bat[0]._Ib=Ib_ips_termokompensat[0];
003208  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
00320c  8128              STRH     r0,[r5,#8]
                  |L1.12814|
;;;3463   
;;;3464   #endif
;;;3465   #endif
;;;3466   
;;;3467   
;;;3468   #ifdef UKU_TELECORE2015
;;;3469   
;;;3470   //Внешний датчик температуры №1
;;;3471   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3472   else ND_EXT[0]=1;
;;;3473   temp_SL=(signed long)adc_buff_[7];
;;;3474   temp_SL*=Ktext[0];
;;;3475   temp_SL/=20000L;
;;;3476   temp_SL-=273L;
;;;3477   t_ext[0]=(signed short)temp_SL;
;;;3478   
;;;3479   
;;;3480   //Внешний датчик температуры №2
;;;3481   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3482   else ND_EXT[1]=1;
;;;3483   temp_SL=(signed long)adc_buff_[6];
;;;3484   temp_SL*=Ktext[1];
;;;3485   temp_SL/=20000L;
;;;3486   temp_SL-=273L;
;;;3487   t_ext[1]=(signed short)temp_SL;
;;;3488   
;;;3489   #endif
;;;3490   
;;;3491   #ifdef UKU_TELECORE2017
;;;3492   
;;;3493   //Внешний датчик температуры №1
;;;3494   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3495   else ND_EXT[0]=1;
;;;3496   temp_SL=(signed long)adc_buff_[7];
;;;3497   temp_SL*=Ktext[0];
;;;3498   temp_SL/=20000L;
;;;3499   temp_SL-=273L;
;;;3500   t_ext[0]=(signed short)temp_SL;
;;;3501   
;;;3502   
;;;3503   //Внешний датчик температуры №2
;;;3504   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3505   else ND_EXT[1]=1;
;;;3506   temp_SL=(signed long)adc_buff_[6];
;;;3507   temp_SL*=Ktext[1];
;;;3508   temp_SL/=20000L;
;;;3509   temp_SL-=273L;
;;;3510   t_ext[1]=(signed short)temp_SL;
;;;3511   
;;;3512   #endif
;;;3513   
;;;3514   //напряжение ввода
;;;3515   temp_SL=(signed long)adc_buff_ext_[0];
00320e  f8df82b0          LDR      r8,|L1.13504|
003212  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3516   temp_SL*=Kunet_ext[0];
003216  f8df92ac          LDR      r9,|L1.13508|
00321a  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
00321e  4378              MULS     r0,r7,r0
;;;3517   temp_SL/=4000L;
003220  f44f6b7a          MOV      r11,#0xfa0
003224  fb90f0fb          SDIV     r0,r0,r11
;;;3518   Uvv[0]=(signed short)temp_SL;
003228  4fa7              LDR      r7,|L1.13512|
00322a  b280              UXTH     r0,r0
00322c  8038              STRH     r0,[r7,#0]
;;;3519   if(Uvv[0]<100) Uvv0=Uvv[0];
00322e  f8dfe29c          LDR      lr,|L1.13516|
003232  2864              CMP      r0,#0x64
003234  d202              BCS      |L1.12860|
003236  f8ae0000          STRH     r0,[lr,#0]
00323a  e003              B        |L1.12868|
                  |L1.12860|
;;;3520   else Uvv0=net_U;
00323c  48a4              LDR      r0,|L1.13520|
00323e  8800              LDRH     r0,[r0,#0]  ; net_U
003240  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12868|
;;;3521   
;;;3522   //напряжение пэс
;;;3523   temp_SL=(signed long)adc_buff_ext_[1];
003244  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3524   temp_SL*=Kunet_ext[1];
003248  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
00324c  fb00f008          MUL      r0,r0,r8
;;;3525   temp_SL/=4000L;
003250  fb90f0fb          SDIV     r0,r0,r11
;;;3526   Uvv[1]=(signed short)temp_SL;
003254  8078              STRH     r0,[r7,#2]
;;;3527   
;;;3528   
;;;3529   //напряжение ввода трехфазное
;;;3530   temp_SL=(signed long)eb2_data_short[0];
003256  4f9f              LDR      r7,|L1.13524|
003258  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3531   temp_SL*=Kvv_eb2[0];
00325c  f8df8278          LDR      r8,|L1.13528|
003260  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
003264  fb09f900          MUL      r9,r9,r0
;;;3532   temp_SL/=6000L;
003268  f2417070          MOV      r0,#0x1770
00326c  fb99fbf0          SDIV     r11,r9,r0
;;;3533   Uvv_eb2[0]=(signed short)temp_SL;
003270  f8df9268          LDR      r9,|L1.13532|
003274  f8a9b000          STRH     r11,[r9,#0]
;;;3534   
;;;3535   temp_SL=(signed long)eb2_data_short[1];
003278  f9b7e002          LDRSH    lr,[r7,#2]  ; eb2_data_short
;;;3536   temp_SL*=Kvv_eb2[1];
00327c  f9b8b002          LDRSH    r11,[r8,#2]  ; Kvv_eb2
003280  fb0bfb0e          MUL      r11,r11,lr
;;;3537   temp_SL/=6000L;
003284  fb9bfbf0          SDIV     r11,r11,r0
;;;3538   Uvv_eb2[1]=(signed short)temp_SL;
003288  f8a9b002          STRH     r11,[r9,#2]
;;;3539   
;;;3540   temp_SL=(signed long)eb2_data_short[2];
00328c  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3541   temp_SL*=Kvv_eb2[2];
003290  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
003294  fb08f80b          MUL      r8,r8,r11
;;;3542   temp_SL/=6000L;
003298  fb98f8f0          SDIV     r8,r8,r0
;;;3543   Uvv_eb2[2]=(signed short)temp_SL;
00329c  f8a98004          STRH     r8,[r9,#4]
;;;3544   
;;;3545   //напряжение пэс трехфазное
;;;3546   temp_SL=(signed long)eb2_data_short[3];
0032a0  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3547   temp_SL*=Kpes_eb2[0];
0032a4  f8df8238          LDR      r8,|L1.13536|
0032a8  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
0032ac  fb09f90b          MUL      r9,r9,r11
;;;3548   temp_SL/=6000L;
0032b0  fb99fbf0          SDIV     r11,r9,r0
;;;3549   Upes_eb2[0]=(signed short)temp_SL;
0032b4  f8df922c          LDR      r9,|L1.13540|
0032b8  f8a9b000          STRH     r11,[r9,#0]
;;;3550   
;;;3551   temp_SL=(signed long)eb2_data_short[4];
0032bc  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3552   temp_SL*=Kpes_eb2[1];
0032c0  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
0032c4  fb0bfb0e          MUL      r11,r11,lr
;;;3553   temp_SL/=6000L;
0032c8  fb9bfbf0          SDIV     r11,r11,r0
;;;3554   Upes_eb2[1]=(signed short)temp_SL;
0032cc  f8a9b002          STRH     r11,[r9,#2]
;;;3555   
;;;3556   temp_SL=(signed long)eb2_data_short[5];
0032d0  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3557   temp_SL*=Kpes_eb2[2];
0032d4  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
0032d8  fb07f70b          MUL      r7,r7,r11
;;;3558   temp_SL/=6000L;
0032dc  fb97f0f0          SDIV     r0,r7,r0
;;;3559   Upes_eb2[2]=(signed short)temp_SL;
0032e0  f8a90004          STRH     r0,[r9,#4]
;;;3560   
;;;3561   //Вычисление температуры шкафа
;;;3562   
;;;3563   ibt._T[0]=t_ext[1]+273;
0032e4  9f00              LDR      r7,[sp,#0]
0032e6  f8dfb200          LDR      r11,|L1.13544|
0032ea  f2071711          ADD      r7,r7,#0x111
0032ee  486c              LDR      r0,|L1.13472|
0032f0  fa0ff887          SXTH     r8,r7
0032f4  f8ab8000          STRH     r8,[r11,#0]
;;;3564   ibt._T[1]=t_ext[2]+273;
0032f8  8880              LDRH     r0,[r0,#4]  ; t_ext
0032fa  f2001011          ADD      r0,r0,#0x111
0032fe  fa0ff980          SXTH     r9,r0
003302  f8ab9002          STRH     r9,[r11,#2]
;;;3565   
;;;3566   ibt._nd[0]=ND_EXT[1];
003306  784f              LDRB     r7,[r1,#1]  ; ND_EXT
003308  f88b7008          STRB     r7,[r11,#8]
;;;3567   ibt._nd[1]=ND_EXT[2];
00330c  7888              LDRB     r0,[r1,#2]  ; ND_EXT
00330e  f88b0009          STRB     r0,[r11,#9]
;;;3568   
;;;3569   #ifndef UKU_TELECORE2015
;;;3570   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3571   	{
;;;3572   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003312  4976              LDR      r1,|L1.13548|
003314  b907              CBNZ     r7,|L1.13080|
003316  b110              CBZ      r0,|L1.13086|
                  |L1.13080|
;;;3573   	}
;;;3574   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
003318  2f01              CMP      r7,#1
00331a  d00a              BEQ      |L1.13106|
00331c  e00a              B        |L1.13108|
                  |L1.13086|
00331e  eb080009          ADD      r0,r8,r9              ;3572
003322  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3572
003326  f46f7788          MVN      r7,#0x110             ;3572
00332a  eb070060          ADD      r0,r7,r0,ASR #1       ;3572
00332e  8008              STRH     r0,[r1,#0]            ;3572
003330  e01e              B        |L1.13168|
                  |L1.13106|
003332  b108              CBZ      r0,|L1.13112|
                  |L1.13108|
;;;3575   	{
;;;3576   	t_box=ibt._T[1]-273;
;;;3577   	}
;;;3578   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003334  b12f              CBZ      r7,|L1.13122|
003336  e006              B        |L1.13126|
                  |L1.13112|
003338  f2a91911          SUB      r9,r9,#0x111          ;3576
00333c  f8a19000          STRH     r9,[r1,#0]            ;3576
003340  e016              B        |L1.13168|
                  |L1.13122|
003342  2801              CMP      r0,#1
003344  d002              BEQ      |L1.13132|
                  |L1.13126|
;;;3579   	{
;;;3580   	t_box=ibt._T[0]-273;
;;;3581   	}
;;;3582   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003346  2f01              CMP      r7,#1
003348  d005              BEQ      |L1.13142|
00334a  e011              B        |L1.13168|
                  |L1.13132|
00334c  f2a81811          SUB      r8,r8,#0x111          ;3580
003350  f8a18000          STRH     r8,[r1,#0]            ;3580
003354  e00c              B        |L1.13168|
                  |L1.13142|
003356  2801              CMP      r0,#1
003358  d10a              BNE      |L1.13168|
;;;3583   	{
;;;3584   	if(t_ext_can_nd<5)t_box= t_ext_can;
00335a  4865              LDR      r0,|L1.13552|
00335c  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
00335e  2805              CMP      r0,#5
003360  d203              BCS      |L1.13162|
003362  4864              LDR      r0,|L1.13556|
003364  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003366  8008              STRH     r0,[r1,#0]
003368  e002              B        |L1.13168|
                  |L1.13162|
;;;3585   	else t_box=20;
00336a  f04f0014          MOV      r0,#0x14
00336e  8008              STRH     r0,[r1,#0]
                  |L1.13168|
;;;3586   	}
;;;3587   #endif
;;;3588   /*
;;;3589   //Вычисление температуры шкафа
;;;3590   
;;;3591   ibt._T[0]=bat[0]._Tb+273;
;;;3592   ibt._T[1]=bat[1]._Tb+273;
;;;3593   ibt._T[2]=t_ext[1]+273;
;;;3594   ibt._T[3]=t_ext[2]+273;
;;;3595   
;;;3596   ibt._nd[0]=bat[0]._nd;
;;;3597   ibt._nd[1]=bat[1]._nd;
;;;3598   ibt._nd[2]=ND_EXT[1];
;;;3599   ibt._nd[3]=ND_EXT[2];
;;;3600   
;;;3601   ibt._avg1=0;
;;;3602   ibt._avg_cnt=4;
;;;3603   
;;;3604   if(ibt._nd[0]==0)
;;;3605   	{
;;;3606   	ibt._avg1+=ibt._T[0];
;;;3607   	}
;;;3608   else 
;;;3609   	{
;;;3610   	ibt._avg_cnt--;
;;;3611   	}
;;;3612   
;;;3613   if(ibt._nd[1]==0)
;;;3614   	{
;;;3615   	ibt._avg1+=ibt._T[1];
;;;3616   	}
;;;3617   else 
;;;3618   	{
;;;3619   	ibt._avg_cnt--;
;;;3620   	}
;;;3621   
;;;3622   if(ibt._nd[2]==0)
;;;3623   	{
;;;3624   	ibt._avg1+=ibt._T[2];
;;;3625   	}
;;;3626   else 
;;;3627   	{
;;;3628   	ibt._avg_cnt--;
;;;3629   	}
;;;3630   
;;;3631   if(ibt._nd[3]==0)
;;;3632   	{
;;;3633   	ibt._avg1+=ibt._T[3];
;;;3634   	}
;;;3635   else 
;;;3636   	{
;;;3637   	ibt._avg_cnt--;
;;;3638   	}
;;;3639   
;;;3640   if(ibt._avg_cnt==0)
;;;3641   	{
;;;3642   	}
;;;3643   else
;;;3644   	{
;;;3645   	ibt._avg1/=ibt._avg_cnt;
;;;3646   	}
;;;3647   
;;;3648   
;;;3649   if(ibt._nd[0]!=0)
;;;3650   	{
;;;3651   	ibt._T_dispers[0]=0;
;;;3652   	}
;;;3653   else 
;;;3654   	{
;;;3655   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3656   	}
;;;3657   
;;;3658   if(ibt._nd[1]!=0)
;;;3659   	{
;;;3660   	ibt._T_dispers[1]=0;
;;;3661   	}
;;;3662   else 
;;;3663   	{
;;;3664   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3665   	}
;;;3666   
;;;3667   if(ibt._nd[2]!=0)
;;;3668   	{
;;;3669   	ibt._T_dispers[2]=0;
;;;3670   	}
;;;3671   else 
;;;3672   	{
;;;3673   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3674   	}
;;;3675   
;;;3676   if(ibt._nd[3]!=0)
;;;3677   	{
;;;3678   	ibt._T_dispers[3]=0;
;;;3679   	}
;;;3680   else 
;;;3681   	{
;;;3682   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3683   	}
;;;3684   
;;;3685   if(	ibt._nd[0]&&
;;;3686   	ibt._nd[1]&&
;;;3687   	ibt._nd[2]&&
;;;3688   	ibt._nd[3]
;;;3689   	)
;;;3690   	{
;;;3691   	t_box=(bps[0]._Ti);
;;;3692   	}
;;;3693   
;;;3694   else if(	ibt._nd[0]||
;;;3695   	ibt._nd[1]||
;;;3696   	ibt._nd[2]||
;;;3697   	ibt._nd[3]
;;;3698   	)
;;;3699   	{
;;;3700   	t_box=(ibt._avg1-273);
;;;3701   	}
;;;3702   else 
;;;3703   	{
;;;3704   	ibt._max_dispers_num=0;
;;;3705   	ibt._max_dispers=ibt._T_dispers[0];
;;;3706   
;;;3707   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3708   		{
;;;3709   		ibt._max_dispers_num=1;
;;;3710   		ibt._max_dispers=ibt._T_dispers[1];
;;;3711   		}
;;;3712   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3713   		{
;;;3714   		ibt._max_dispers_num=2;
;;;3715   		ibt._max_dispers=ibt._T_dispers[2];
;;;3716   		}
;;;3717   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3718   		{
;;;3719   		ibt._max_dispers_num=3;
;;;3720   		ibt._max_dispers=ibt._T_dispers[3];
;;;3721   		}
;;;3722   
;;;3723   	ibt._avg2=0;
;;;3724   
;;;3725   	if(ibt._max_dispers_num!=0)
;;;3726   		{
;;;3727   		ibt._avg2+=ibt._T[0];
;;;3728   		}
;;;3729   	if(ibt._max_dispers_num!=1)
;;;3730   		{
;;;3731   		ibt._avg2+=ibt._T[1];
;;;3732   		}
;;;3733   	if(ibt._max_dispers_num!=2)
;;;3734   		{
;;;3735   		ibt._avg2+=ibt._T[2];
;;;3736   		}
;;;3737   	if(ibt._max_dispers_num!=3)
;;;3738   		{
;;;3739   		ibt._avg2+=ibt._T[3];
;;;3740   		}
;;;3741   
;;;3742   	t_box=(ibt._avg2/3)-273;
;;;3743   
;;;3744   	}*/
;;;3745   
;;;3746   
;;;3747   //*********************************************
;;;3748   
;;;3749   #ifndef TELECORE
;;;3750   if(((BAT_IS_ON[0]==bisON)||(NUMBAT>0))&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
003370  4961              LDR      r1,|L1.13560|
003372  4862              LDR      r0,|L1.13564|
003374  780f              LDRB     r7,[r1,#0]  ; BAT_IS_ON
003376  2f55              CMP      r7,#0x55
003378  d003              BEQ      |L1.13186|
00337a  f9b07000          LDRSH    r7,[r0,#0]  ; NUMBAT
00337e  2f00              CMP      r7,#0
003380  dd05              BLE      |L1.13198|
                  |L1.13186|
003382  f1ba0fc8          CMP      r10,#0xc8
003386  dd02              BLE      |L1.13198|
003388  892f              LDRH     r7,[r5,#8]  ; bat
00338a  f8a6704e          STRH     r7,[r6,#0x4e]
                  |L1.13198|
;;;3751   if(((BAT_IS_ON[1]==bisON)||(NUMBAT>1))&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
00338e  7849              LDRB     r1,[r1,#1]  ; BAT_IS_ON
003390  2955              CMP      r1,#0x55
003392  d003              BEQ      |L1.13212|
003394  f9b00000          LDRSH    r0,[r0,#0]  ; NUMBAT
003398  2801              CMP      r0,#1
00339a  dd0b              BLE      |L1.13236|
                  |L1.13212|
00339c  f9b50052          LDRSH    r0,[r5,#0x52]  ; bat
0033a0  28c8              CMP      r0,#0xc8
0033a2  dd07              BLE      |L1.13236|
0033a4  f9b50058          LDRSH    r0,[r5,#0x58]  ; bat
0033a8  f9b51008          LDRSH    r1,[r5,#8]  ; bat
0033ac  4288              CMP      r0,r1
0033ae  dd01              BLE      |L1.13236|
0033b0  f8a6004e          STRH     r0,[r6,#0x4e]
                  |L1.13236|
;;;3752   #endif
;;;3753   
;;;3754   #ifdef TELECORE
;;;3755   Ibmax=0;
;;;3756   /*
;;;3757   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3758   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3759   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3760   */
;;;3761   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3762   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3763   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3764   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3765   #endif
;;;3766   
;;;3767   #ifdef UKU_FSO
;;;3768   Ibmax=0;
;;;3769   if((NUMBAT_FSO>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3770   if((NUMBAT_FSO>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3771   Ibmax_=0;
;;;3772   if((NUMBAT_FSO>0)&&(bat[0]._Ib_/10>Ibmax_))Ibmax_=bat[0]._Ib_/10;
;;;3773   if((NUMBAT_FSO>1)&&(bat[1]._Ib_/10>Ibmax_))Ibmax_=bat[1]._Ib_/10;
;;;3774   #endif
;;;3775   
;;;3776   #ifdef UKU_TELECORE2017
;;;3777   Ibmax=0;
;;;3778   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3779   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3780   #endif
;;;3781   
;;;3782   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3783   Ibmax=Ib_ips_termokompensat[0];
0033b4  f9bc0000          LDRSH    r0,[r12,#0]  ; Ib_ips_termokompensat
0033b8  f8a6004e          STRH     r0,[r6,#0x4e]
;;;3784   if(Ib_ips_termokompensat[1]>Ibmax)Ibmax=Ib_ips_termokompensat[1];
0033bc  f9bc1002          LDRSH    r1,[r12,#2]  ; Ib_ips_termokompensat
0033c0  4281              CMP      r1,r0
0033c2  dd01              BLE      |L1.13256|
0033c4  f8a6104e          STRH     r1,[r6,#0x4e]
                  |L1.13256|
;;;3785   #endif
;;;3786   for(i=0;i<NUMIST;i++)
0033c8  f04f0100          MOV      r1,#0
0033cc  e02f              B        |L1.13358|
                  |L1.13262|
;;;3787   	{
;;;3788   	if(bps[i]._cnt<25)
0033ce  eb0100c1          ADD      r0,r1,r1,LSL #3
0033d2  eb001001          ADD      r0,r0,r1,LSL #4
0033d6  eb040080          ADD      r0,r4,r0,LSL #2
0033da  78c6              LDRB     r6,[r0,#3]
0033dc  2e19              CMP      r6,#0x19
0033de  d21c              BCS      |L1.13338|
;;;3789        	{
;;;3790        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0033e0  7986              LDRB     r6,[r0,#6]
0033e2  79c7              LDRB     r7,[r0,#7]
0033e4  eb062607          ADD      r6,r6,r7,LSL #8
0033e8  6246              STR      r6,[r0,#0x24]
;;;3791        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0033ea  7a06              LDRB     r6,[r0,#8]
0033ec  7a47              LDRB     r7,[r0,#9]
0033ee  eb062607          ADD      r6,r6,r7,LSL #8
0033f2  6206              STR      r6,[r0,#0x20]
;;;3792        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0033f4  7a86              LDRB     r6,[r0,#0xa]
0033f6  7ac7              LDRB     r7,[r0,#0xb]
0033f8  eb062607          ADD      r6,r6,r7,LSL #8
0033fc  61c6              STR      r6,[r0,#0x1c]
;;;3793        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0033fe  7b06              LDRB     r6,[r0,#0xc]
003400  6286              STR      r6,[r0,#0x28]
;;;3794        	bps[i]._adr_ee=bps[i]._buff[7];
003402  7b46              LDRB     r6,[r0,#0xd]
003404  f8806056          STRB     r6,[r0,#0x56]
;;;3795        	bps[i]._flags_tm=bps[i]._buff[8];
003408  7b86              LDRB     r6,[r0,#0xe]
00340a  f8806042          STRB     r6,[r0,#0x42]
;;;3796   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
00340e  7c06              LDRB     r6,[r0,#0x10]
003410  7c47              LDRB     r7,[r0,#0x11]
003412  eb062607          ADD      r6,r6,r7,LSL #8
003416  6506              STR      r6,[r0,#0x50]
003418  e006              B        |L1.13352|
                  |L1.13338|
;;;3797        	} 
;;;3798   	else 
;;;3799        	{
;;;3800        	bps[i]._Uii=0; 
00341a  61c3              STR      r3,[r0,#0x1c]
;;;3801        	bps[i]._Ii=0;
00341c  6243              STR      r3,[r0,#0x24]
;;;3802        	bps[i]._Uin=0;
00341e  6203              STR      r3,[r0,#0x20]
;;;3803        	bps[i]._Ti=0;
003420  6283              STR      r3,[r0,#0x28]
;;;3804        	bps[i]._flags_tm=0; 
003422  f8803042          STRB     r3,[r0,#0x42]
;;;3805   	     bps[i]._rotor=0;    
003426  6503              STR      r3,[r0,#0x50]
                  |L1.13352|
003428  f1010101          ADD      r1,r1,#1              ;3786
00342c  b2c9              UXTB     r1,r1                 ;3786
                  |L1.13358|
00342e  4291              CMP      r1,r2                 ;3786
003430  dbcd              BLT      |L1.13262|
;;;3806        	}
;;;3807        
;;;3808        }
;;;3809   
;;;3810   load_I=0;
003432  4e33              LDR      r6,|L1.13568|
;;;3811   #ifdef TELECORE
;;;3812   
;;;3813   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3814   	{
;;;3815   	load_I-=lakb[i]._ch_curr/10;
;;;3816   	}*/
;;;3817   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3818   #elif UKU_TELECORE2017
;;;3819   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3820   #else
;;;3821   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003434  f9b51008          LDRSH    r1,[r5,#8]  ; bat
003438  f04f000a          MOV      r0,#0xa
00343c  fb91f1f0          SDIV     r1,r1,r0
003440  f9b55058          LDRSH    r5,[r5,#0x58]  ; bat
003444  fb95f0f0          SDIV     r0,r5,r0
003448  4408              ADD      r0,r0,r1
00344a  f1c00000          RSB      r0,r0,#0
00344e  b207              SXTH     r7,r0
003450  8037              STRH     r7,[r6,#0]
;;;3822   #endif
;;;3823   Isumm=0;
003452  4d2c              LDR      r5,|L1.13572|
003454  802b              STRH     r3,[r5,#0]
;;;3824   
;;;3825   for(i=0;i<NUMIST;i++)
003456  f04f0000          MOV      r0,#0
00345a  e012              B        |L1.13442|
                  |L1.13404|
;;;3826        {
;;;3827        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00345c  eb0001c0          ADD      r1,r0,r0,LSL #3
003460  eb011100          ADD      r1,r1,r0,LSL #4
003464  eb040181          ADD      r1,r4,r1,LSL #2
003468  f891c003          LDRB     r12,[r1,#3]
00346c  f1bc0f05          CMP      r12,#5
003470  d204              BCS      |L1.13436|
003472  6a49              LDR      r1,[r1,#0x24]
003474  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
003478  4461              ADD      r1,r1,r12
00347a  8029              STRH     r1,[r5,#0]
                  |L1.13436|
00347c  f1000001          ADD      r0,r0,#1              ;3825
003480  b2c0              UXTB     r0,r0                 ;3825
                  |L1.13442|
003482  4290              CMP      r0,r2                 ;3825
003484  dbea              BLT      |L1.13404|
;;;3828        }  
;;;3829        
;;;3830   load_I=load_I+Isumm;
003486  8828              LDRH     r0,[r5,#0]  ; Isumm
003488  4438              ADD      r0,r0,r7
00348a  b200              SXTH     r0,r0
00348c  8030              STRH     r0,[r6,#0]
;;;3831   if(load_I<0)load_I=0;
00348e  e03b              B        |L1.13576|
                  |L1.13456|
                          DCD      bps_I
                  |L1.13460|
                          DCD      ||.bss||+0x40c
                  |L1.13464|
                          DCD      ND_EXT
                  |L1.13468|
                          DCD      Ktext
                  |L1.13472|
                          DCD      t_ext
                  |L1.13476|
                          DCD      Ib_ips_termokompensat
                  |L1.13480|
                          DCD      ibat_metr_buff_
                  |L1.13484|
                          DCD      bIBAT_SMKLBR
                  |L1.13488|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13492|
                          DCD      Kibat1
                  |L1.13496|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13500|
                          DCD      bat
                  |L1.13504|
                          DCD      adc_buff_ext_
                  |L1.13508|
                          DCD      Kunet_ext
                  |L1.13512|
                          DCD      Uvv
                  |L1.13516|
                          DCD      Uvv0
                  |L1.13520|
                          DCD      net_U
                  |L1.13524|
                          DCD      eb2_data_short
                  |L1.13528|
                          DCD      Kvv_eb2
                  |L1.13532|
                          DCD      Uvv_eb2
                  |L1.13536|
                          DCD      Kpes_eb2
                  |L1.13540|
                          DCD      Upes_eb2
                  |L1.13544|
                          DCD      ibt
                  |L1.13548|
                          DCD      t_box
                  |L1.13552|
                          DCD      t_ext_can_nd
                  |L1.13556|
                          DCD      t_ext_can
                  |L1.13560|
                          DCD      BAT_IS_ON
                  |L1.13564|
                          DCD      NUMBAT
                  |L1.13568|
                          DCD      load_I
                  |L1.13572|
                          DCD      Isumm
                  |L1.13576|
003508  2800              CMP      r0,#0
00350a  da00              BGE      |L1.13582|
00350c  8033              STRH     r3,[r6,#0]
                  |L1.13582|
;;;3832   
;;;3833   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3834   load_I=0;
00350e  8033              STRH     r3,[r6,#0]
;;;3835   
;;;3836   Isumm=0;
003510  802b              STRH     r3,[r5,#0]
;;;3837   
;;;3838   for(i=0;i<NUMIST;i++)
003512  f04f0000          MOV      r0,#0
003516  e00f              B        |L1.13624|
                  |L1.13592|
;;;3839        {
;;;3840        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003518  eb0001c0          ADD      r1,r0,r0,LSL #3
00351c  eb011100          ADD      r1,r1,r0,LSL #4
003520  eb040181          ADD      r1,r4,r1,LSL #2
003524  78cf              LDRB     r7,[r1,#3]
003526  2f05              CMP      r7,#5
003528  d203              BCS      |L1.13618|
00352a  6a49              LDR      r1,[r1,#0x24]
00352c  882f              LDRH     r7,[r5,#0]  ; Isumm
00352e  4439              ADD      r1,r1,r7
003530  8029              STRH     r1,[r5,#0]
                  |L1.13618|
003532  f1000001          ADD      r0,r0,#1              ;3838
003536  b2c0              UXTB     r0,r0                 ;3838
                  |L1.13624|
003538  4290              CMP      r0,r2                 ;3838
00353a  dbed              BLT      |L1.13592|
;;;3841        }  
;;;3842        
;;;3843   load_I=load_I+Isumm;
00353c  8829              LDRH     r1,[r5,#0]  ; Isumm
00353e  eb030001          ADD      r0,r3,r1
003542  b200              SXTH     r0,r0
003544  8030              STRH     r0,[r6,#0]
;;;3844   if(load_I<0)load_I=0;
003546  2800              CMP      r0,#0
003548  da00              BGE      |L1.13644|
00354a  8033              STRH     r3,[r6,#0]
                  |L1.13644|
;;;3845   
;;;3846   #endif
;;;3847   #ifdef IPS_SGEP_GAZPROM
;;;3848   load_I=Isumm;
;;;3849   #endif
;;;3850   
;;;3851   
;;;3852   #ifdef UKU_GLONASS
;;;3853   inv[0]._Uio=6;
;;;3854   if (NUMINV)
;;;3855   	{
;;;3856   	for(i=0;i<NUMINV;i++)
;;;3857   		{
;;;3858   		if(bps[i+first_inv_slot]._cnt<25)
;;;3859        		{
;;;3860        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3861        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3862        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3863        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3864        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3865   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3866   			inv[i]._cnt=0;    
;;;3867        		} 
;;;3868   		else 
;;;3869        		{
;;;3870        		inv[i]._Uio=0; 
;;;3871        		inv[i]._Ii=0;
;;;3872        		inv[i]._Uin=0;
;;;3873        		inv[i]._Ti=0;
;;;3874        		inv[i]._flags_tm=0; 
;;;3875   //	     	inv[i]._rotor0;
;;;3876   			inv[i]._cnt=25;    
;;;3877        		}
;;;3878        	}
;;;3879      	}
;;;3880   #endif
;;;3881   
;;;3882   #ifndef UKU_GLONASS
;;;3883   if (NUMINV)
00354c  48ff              LDR      r0,|L1.14668|
00354e  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
003552  2d00              CMP      r5,#0
003554  d066              BEQ      |L1.13860|
;;;3884   	{
;;;3885   	for(i=0;i<NUMINV;i++)
003556  f04f0200          MOV      r2,#0
;;;3886   		{
;;;3887   		if(bps[i+20]._cnt<25)
;;;3888        		{
;;;3889        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
00355a  4efd              LDR      r6,|L1.14672|
00355c  e060              B        |L1.13856|
                  |L1.13662|
00355e  f1020014          ADD      r0,r2,#0x14           ;3887
003562  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3887
003566  eb011000          ADD      r0,r1,r0,LSL #4       ;3887
00356a  eb040080          ADD      r0,r4,r0,LSL #2       ;3887
00356e  78c1              LDRB     r1,[r0,#3]            ;3887
003570  2919              CMP      r1,#0x19              ;3887
003572  d239              BCS      |L1.13800|
003574  7981              LDRB     r1,[r0,#6]
003576  79c7              LDRB     r7,[r0,#7]
003578  eb012707          ADD      r7,r1,r7,LSL #8
00357c  eb020142          ADD      r1,r2,r2,LSL #1
003580  eb061141          ADD      r1,r6,r1,LSL #5
003584  61cf              STR      r7,[r1,#0x1c]
;;;3890        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003586  7a07              LDRB     r7,[r0,#8]
003588  f890c009          LDRB     r12,[r0,#9]
00358c  eb07270c          ADD      r7,r7,r12,LSL #8
003590  62cf              STR      r7,[r1,#0x2c]
;;;3891        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003592  7a87              LDRB     r7,[r0,#0xa]
003594  f890c00b          LDRB     r12,[r0,#0xb]
003598  eb07270c          ADD      r7,r7,r12,LSL #8
00359c  618f              STR      r7,[r1,#0x18]
;;;3892        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00359e  7b07              LDRB     r7,[r0,#0xc]
0035a0  620f              STR      r7,[r1,#0x20]
;;;3893        		inv[i]._flags_tm=bps[i+20]._buff[7];
0035a2  7b47              LDRB     r7,[r0,#0xd]
0035a4  f8817046          STRB     r7,[r1,#0x46]
;;;3894        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0035a8  7b87              LDRB     r7,[r0,#0xe]
0035aa  f890c00f          LDRB     r12,[r0,#0xf]
0035ae  eb07270c          ADD      r7,r7,r12,LSL #8
0035b2  628f              STR      r7,[r1,#0x28]
;;;3895        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0035b4  7c07              LDRB     r7,[r0,#0x10]
0035b6  f890c011          LDRB     r12,[r0,#0x11]
0035ba  eb07270c          ADD      r7,r7,r12,LSL #8
0035be  624f              STR      r7,[r1,#0x24]
;;;3896   			inv[i]._cnt=0;
0035c0  708b              STRB     r3,[r1,#2]
;;;3897   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0035c2  7c87              LDRB     r7,[r0,#0x12]
0035c4  f8817059          STRB     r7,[r1,#0x59]
;;;3898   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0035c8  7cc7              LDRB     r7,[r0,#0x13]
0035ca  f881705a          STRB     r7,[r1,#0x5a]
;;;3899   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0035ce  7d07              LDRB     r7,[r0,#0x14]
0035d0  f8817058          STRB     r7,[r1,#0x58]
;;;3900   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0035d4  7d47              LDRB     r7,[r0,#0x15]
0035d6  f881705b          STRB     r7,[r1,#0x5b]
;;;3901   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0035da  7d87              LDRB     r7,[r0,#0x16]
0035dc  f881705c          STRB     r7,[r1,#0x5c]
;;;3902   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0035e0  7dc0              LDRB     r0,[r0,#0x17]
0035e2  f881005d          STRB     r0,[r1,#0x5d]
0035e6  e018              B        |L1.13850|
                  |L1.13800|
;;;3903        		} 
;;;3904   		else 
;;;3905        		{
;;;3906         		inv[i]._Ii=0;
0035e8  eb020042          ADD      r0,r2,r2,LSL #1
0035ec  eb061040          ADD      r0,r6,r0,LSL #5
0035f0  61c3              STR      r3,[r0,#0x1c]
;;;3907   			inv[i]._Pio=0;
0035f2  62c3              STR      r3,[r0,#0x2c]
;;;3908   			inv[i]._Uio=0;
0035f4  6183              STR      r3,[r0,#0x18]
;;;3909        		inv[i]._Ti=0;
0035f6  6203              STR      r3,[r0,#0x20]
;;;3910        		inv[i]._flags_tm=0; 
0035f8  f8803046          STRB     r3,[r0,#0x46]
;;;3911        		inv[i]._Uil=0;
0035fc  6243              STR      r3,[r0,#0x24]
;;;3912        		inv[i]._Uin=0;
0035fe  6283              STR      r3,[r0,#0x28]
;;;3913   			inv[i]._cnt=25; 
003600  f04f0119          MOV      r1,#0x19
003604  7081              STRB     r1,[r0,#2]
;;;3914   			inv[i]._Uoutmin=0; 
003606  f8803059          STRB     r3,[r0,#0x59]
;;;3915   			inv[i]._Uoutmax=0; 
00360a  f880305a          STRB     r3,[r0,#0x5a]
;;;3916   			inv[i]._Pnom=0; 
00360e  f8803058          STRB     r3,[r0,#0x58]
;;;3917   			inv[i]._net_contr_en=0;
003612  f880305b          STRB     r3,[r0,#0x5b]
;;;3918   			inv[i]._pwm_en=0;   
003616  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13850|
00361a  f1020201          ADD      r2,r2,#1              ;3885
00361e  b2d2              UXTB     r2,r2                 ;3885
                  |L1.13856|
003620  42aa              CMP      r2,r5                 ;3885
003622  db9c              BLT      |L1.13662|
                  |L1.13860|
;;;3919   			   
;;;3920        		}
;;;3921        	}
;;;3922      	}
;;;3923   #endif
;;;3924   
;;;3925   #ifdef GLADKOV
;;;3926   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3927   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3928   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3929   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3930   inv[0]._flags_tm=bps[4]._buff[7];
;;;3931   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3932   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3933   inv[0]._cnt=0;    
;;;3934   
;;;3935   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3936   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3937   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3938   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3939   inv[1]._flags_tm=bps[21]._buff[7];
;;;3940   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3941   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3942   inv[1]._cnt=0;    
;;;3943   #endif
;;;3944   
;;;3945   /*
;;;3946   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3947   	{
;;;3948   	lakb[0]._battCommState=0;
;;;3949   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3950   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3951   	
;;;3952   	if(lakb[0]._battCommState==0)
;;;3953   		{	
;;;3954   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3955   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3956   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3957   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3958   		}
;;;3959   	}
;;;3960   */
;;;3961   
;;;3962   /*
;;;3963   #ifdef UKU_FSO	//для батареи без модбаса
;;;3964   
;;;3965   		lakb[numOfPacks_]._ch_curr=((ascii2halFhex(liBatteryInBuff[105]))<<12)+
;;;3966   					 		((ascii2halFhex(liBatteryInBuff[106]))<<8)+
;;;3967   							((ascii2halFhex(liBatteryInBuff[107]))<<4)+
;;;3968   							((ascii2halFhex(liBatteryInBuff[108])));
;;;3969   		
;;;3970   	
;;;3971   		lakb[numOfPacks_]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[109]))<<12)+
;;;3972   							((ascii2halFhex(liBatteryInBuff[110]))<<8)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[111]))<<4)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[112]))))/10;
;;;3975   
;;;3976   
;;;3977   		lakb[numOfPacks_]._cell_temp_1= (signed char)((((ascii2halFhex(liBatteryInBuff[81]))<<12)+
;;;3978   							((ascii2halFhex(liBatteryInBuff[82]))<<8)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[83]))<<4)+
;;;3980   							((ascii2halFhex(liBatteryInBuff[84]))))/100);
;;;3981   		lakb[numOfPacks_]._cell_temp_2= (signed char)((((ascii2halFhex(liBatteryInBuff[85]))<<12)+
;;;3982   							((ascii2halFhex(liBatteryInBuff[86]))<<8)+
;;;3983   							((ascii2halFhex(liBatteryInBuff[87]))<<4)+
;;;3984   							((ascii2halFhex(liBatteryInBuff[88]))))/100);
;;;3985   		lakb[numOfPacks_]._cell_temp_3= (signed char)((((ascii2halFhex(liBatteryInBuff[89]))<<12)+
;;;3986   							((ascii2halFhex(liBatteryInBuff[90]))<<8)+
;;;3987   							((ascii2halFhex(liBatteryInBuff[91]))<<4)+
;;;3988   							((ascii2halFhex(liBatteryInBuff[92]))))/100);
;;;3989   		lakb[numOfPacks_]._cell_temp_4= (signed char)((((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3990   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3991   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3992   							((ascii2halFhex(liBatteryInBuff[96]))))/100);
;;;3993   		lakb[numOfPacks_]._cell_temp_ambient= (signed char)((((ascii2halFhex(liBatteryInBuff[97]))<<12)+
;;;3994   							((ascii2halFhex(liBatteryInBuff[98]))<<8)+
;;;3995   							((ascii2halFhex(liBatteryInBuff[99]))<<4)+
;;;3996   							((ascii2halFhex(liBatteryInBuff[100]))))/100);
;;;3997   		lakb[numOfPacks_]._cell_temp_power= (signed char)((((ascii2halFhex(liBatteryInBuff[101]))<<12)+
;;;3998   							((ascii2halFhex(liBatteryInBuff[102]))<<8)+
;;;3999   							((ascii2halFhex(liBatteryInBuff[103]))<<4)+
;;;4000   							((ascii2halFhex(liBatteryInBuff[104]))))/100);
;;;4001   	
;;;4002   		lakb[numOfPacks_]._s_o_c=		(unsigned short)((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4003   							((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4004   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4005   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4006   	
;;;4007   		lakb[numOfPacks_]._s_o_h=		(unsigned short)((ascii2halFhex(liBatteryInBuff[119]))<<12)+
;;;4008   							((ascii2halFhex(liBatteryInBuff[120]))<<8)+
;;;4009   							((ascii2halFhex(liBatteryInBuff[121]))<<4)+
;;;4010   							((ascii2halFhex(liBatteryInBuff[122])));
;;;4011   
;;;4012   		if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;4013   
;;;4014   		temp_SL=((signed long)lakb[numOfPacks_]._s_o_c)*100L;
;;;4015   		temp_SL/=(signed long)lakb[numOfPacks_]._s_o_h;
;;;4016   		lakb[numOfPacks_]._s_o_c_percent=(signed short)temp_SL;
;;;4017   			
;;;4018   
;;;4019   		lakb[numOfPacks_]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4020   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4021   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4022   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4023   	
;;;4024   		if(sTARKSilentCnt[numOfPacks_]==10)
;;;4025   			{
;;;4026   			lakb[numOfPacks_]._ch_curr=0;
;;;4027   			lakb[numOfPacks_]._tot_bat_volt=0;
;;;4028   			lakb[numOfPacks_]._cell_temp_1=0;
;;;4029   			lakb[numOfPacks_]._cell_temp_2=0;
;;;4030   			lakb[numOfPacks_]._cell_temp_3=0;
;;;4031   			lakb[numOfPacks_]._cell_temp_4=0;
;;;4032   			lakb[numOfPacks_]._cell_temp_ambient=0;
;;;4033   			lakb[numOfPacks_]._cell_temp_power=0;
;;;4034   			lakb[numOfPacks_]._s_o_c=0;
;;;4035   			lakb[numOfPacks_]._s_o_h=0;
;;;4036   			if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;4037   			lakb[numOfPacks_]._s_o_c_percent=0;
;;;4038   			lakb[numOfPacks_]._rat_cap=0;
;;;4039   			}
;;;4040   
;;;4041   
;;;4042   //Внешний датчик температуры 
;;;4043   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
;;;4044   else ND_EXT[0]=1;
;;;4045   temp_SL=(signed long)adc_buff_[6];
;;;4046   temp_SL*=Ktext[0];
;;;4047   temp_SL/=20000L;
;;;4048   temp_SL-=273L;
;;;4049   t_ext[0]=(signed short)temp_SL;
;;;4050   
;;;4051   
;;;4052   	
;;;4053   #endif //UKU_FSO	
;;;4054   */
;;;4055   
;;;4056   #ifdef UKU_FSO	   //для батареи с модбасом
;;;4057   
;;;4058   	//if(BAT_TYPE==2)
;;;4059   		//{
;;;4060   		lakb[0]._ch_curr=		(unsigned short)((((short)liBatteryInBuff[3])<<8)  +  ((short)liBatteryInBuff[4]));
;;;4061   		lakb[1]._ch_curr=		(unsigned short)((((short)liBatteryInBuff[203])<<8)  +  ((short)liBatteryInBuff[204]));
;;;4062   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;4063   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;4064   	
;;;4065   		lakb[0]._tot_bat_volt=	((unsigned short)((((short)liBatteryInBuff[5])<<8)  +  ((short)liBatteryInBuff[6])))/10;
;;;4066   		lakb[1]._tot_bat_volt=	((unsigned short)((((short)liBatteryInBuff[205])<<8)  +  ((short)liBatteryInBuff[206])))/10;
;;;4067   
;;;4068   		lakb[0]._cell_temp_1= 	((signed short)((((signed short)liBatteryInBuff[65])<<8)  +  ((signed short)liBatteryInBuff[66])))/10;
;;;4069   		lakb[1]._cell_temp_1= 	((signed short)((((signed short)liBatteryInBuff[265])<<8)  +  ((signed short)liBatteryInBuff[266])))/10;
;;;4070   		lakb[0]._cell_temp_2= 	((unsigned short)((((short)liBatteryInBuff[67])<<8)  +  ((short)liBatteryInBuff[68])))/10;
;;;4071   		lakb[1]._cell_temp_2= 	((unsigned short)((((short)liBatteryInBuff[267])<<8)  +  ((short)liBatteryInBuff[268])))/10;
;;;4072   		lakb[0]._cell_temp_3= 	((unsigned short)((((short)liBatteryInBuff[69])<<8)  +  ((short)liBatteryInBuff[70])))/10;
;;;4073   		lakb[1]._cell_temp_3= 	((unsigned short)((((short)liBatteryInBuff[269])<<8)  +  ((short)liBatteryInBuff[270])))/10;
;;;4074   		lakb[0]._cell_temp_4= 	((unsigned short)((((short)liBatteryInBuff[71])<<8)  +  ((short)liBatteryInBuff[72])))/10;
;;;4075   		lakb[1]._cell_temp_4= 	((unsigned short)((((short)liBatteryInBuff[271])<<8)  +  ((short)liBatteryInBuff[272])))/10;
;;;4076   		lakb[0]._cell_temp_power= 		((unsigned short)((((short)liBatteryInBuff[73])<<8)  +  ((short)liBatteryInBuff[74])))/10;
;;;4077   		lakb[1]._cell_temp_power= 		((unsigned short)((((short)liBatteryInBuff[273])<<8)  +  ((short)liBatteryInBuff[274])))/10;
;;;4078   		lakb[0]._cell_temp_ambient= 	((unsigned short)((((short)liBatteryInBuff[75])<<8)  +  ((short)liBatteryInBuff[76])))/10;
;;;4079   		lakb[1]._cell_temp_ambient= 	((unsigned short)((((short)liBatteryInBuff[275])<<8)  +  ((short)liBatteryInBuff[276])))/10;
;;;4080   /*		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;4081   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;4082   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;4083   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;	*/
;;;4084   
;;;4085   		lakb[0]._s_o_c_percent=		((unsigned short)((((short)liBatteryInBuff[7])<<8)  +  ((short)liBatteryInBuff[8])));
;;;4086   		lakb[1]._s_o_c_percent=		((unsigned short)((((short)liBatteryInBuff[207])<<8)  +  ((short)liBatteryInBuff[208])));
;;;4087   			
;;;4088   		lakb[0]._s_o_c=		((unsigned short)((((short)liBatteryInBuff[11])<<8)  +  ((short)liBatteryInBuff[12])));
;;;4089   		lakb[1]._s_o_c=		((unsigned short)((((short)liBatteryInBuff[211])<<8)  +  ((short)liBatteryInBuff[212])));
;;;4090   	
;;;4091   		lakb[0]._s_o_h=		((unsigned short)((((short)liBatteryInBuff[13])<<8)  +  ((short)liBatteryInBuff[14])));
;;;4092   		lakb[1]._s_o_h=		((unsigned short)((((short)liBatteryInBuff[213])<<8)  +  ((short)liBatteryInBuff[214])));
;;;4093   
;;;4094   		if(lakb[0]._s_o_h==0)lakb[0]._s_o_h=1;
;;;4095   		if(lakb[1]._s_o_h==0)lakb[1]._s_o_h=1;
;;;4096   
;;;4097   		temp_SL=((signed long)lakb[numOfPacks_]._s_o_c)*100L;
;;;4098   		temp_SL/=(signed long)lakb[numOfPacks_]._s_o_h;
;;;4099   		lakb[numOfPacks_]._s_o_c_percent=(signed short)temp_SL;
;;;4100   			
;;;4101   
;;;4102   		lakb[numOfPacks_]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4103   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4104   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4105   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4106   	
;;;4107   		//lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4108   
;;;4109   		if(sTARKSilentCnt[0]==10)
;;;4110   			{
;;;4111   		lakb[0]._ch_curr=0;
;;;4112   		lakb[0]._tot_bat_volt=0;
;;;4113   		lakb[0]._cell_temp_1=0;
;;;4114   		lakb[0]._cell_temp_2=0;
;;;4115   		lakb[0]._cell_temp_3=0;
;;;4116   		lakb[0]._cell_temp_4=0;
;;;4117   		lakb[0]._cell_temp_ambient=0;
;;;4118   		lakb[0]._cell_temp_power=0;
;;;4119   		lakb[0]._s_o_c=0;
;;;4120   		lakb[0]._s_o_h=0;
;;;4121   		if(lakb[0]._s_o_h==0)lakb[0]._s_o_h=1;
;;;4122   		lakb[0]._s_o_c_percent=0;
;;;4123   		lakb[0]._rat_cap=0;
;;;4124   			}
;;;4125   
;;;4126   		if(sTARKSilentCnt[1]==10)
;;;4127   			{
;;;4128   		lakb[1]._ch_curr=0;
;;;4129   		lakb[1]._tot_bat_volt=0;
;;;4130   		lakb[1]._cell_temp_1=0;
;;;4131   		lakb[1]._cell_temp_2=0;
;;;4132   		lakb[1]._cell_temp_3=0;
;;;4133   		lakb[1]._cell_temp_4=0;
;;;4134   		lakb[1]._cell_temp_ambient=0;
;;;4135   		lakb[1]._cell_temp_power=0;
;;;4136   		lakb[1]._s_o_c=0;
;;;4137   		lakb[1]._s_o_h=0;
;;;4138   		if(lakb[1]._s_o_h==0)lakb[1]._s_o_h=1;
;;;4139   		lakb[1]._s_o_c_percent=0;
;;;4140   		lakb[1]._rat_cap=0;
;;;4141   			}
;;;4142   
;;;4143   //Внешний датчик температуры 
;;;4144   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
;;;4145   else ND_EXT[0]=1;
;;;4146   temp_SL=(signed long)adc_buff_[6];
;;;4147   temp_SL*=Ktext[0];
;;;4148   temp_SL/=20000L;
;;;4149   temp_SL-=273L;
;;;4150   t_ext[0]=(signed short)temp_SL;
;;;4151   
;;;4152   
;;;4153   	
;;;4154   #endif //UKU_FSO
;;;4155   
;;;4156   
;;;4157   #ifdef UKU_TELECORE2015
;;;4158   
;;;4159   	if(BAT_TYPE==2)
;;;4160   		{
;;;4161   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4162   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4163   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4164   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4165   		
;;;4166   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;4167   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;4168   	
;;;4169   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;4170   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;4171   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;4172   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;4173   	
;;;4174   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;4175   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;4176   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;4177   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;4178   	
;;;4179   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;4180   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;4181   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;4182   							((ascii2halFhex(liBatteryInBuff[124])));
;;;4183   	
;;;4184   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4185   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4186   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4187   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4188   	
;;;4189   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4190   	
;;;4191   	
;;;4192   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4193   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4194   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4195   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;4196   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;4197   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4198   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;4199   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4200   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;4201   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;4202   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4203   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;4204   	
;;;4205   		if(lakb[i]._rat_cap==0)
;;;4206   			{
;;;4207   			if(lakb[i]._isOnCnt)
;;;4208   				{
;;;4209   				lakb[i]._isOnCnt--;
;;;4210   				if(lakb[i]._isOnCnt==0)
;;;4211   					{
;;;4212   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4213   					}
;;;4214   				}
;;;4215   			}
;;;4216   		else 
;;;4217   			{
;;;4218   			if(lakb[i]._isOnCnt<50)
;;;4219   				{
;;;4220   				lakb[i]._isOnCnt++;
;;;4221   				if(lakb[i]._isOnCnt==50)
;;;4222   					{
;;;4223   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4224   					}
;;;4225   				}
;;;4226   			}
;;;4227   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;4228   		}
;;;4229   	else if(BAT_TYPE==3)
;;;4230   		{
;;;4231   		//short numOfPacks;
;;;4232   		//short numOfCells, numOfTemperCells, baseOfData;
;;;4233   		
;;;4234   		#ifndef UKU_TELECORE2016
;;;4235   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;4236   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;4237   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;4238   		if(numOfPacks)numOfPacks-=1;
;;;4239   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;4240   		plazma_numOfCells=numOfCells;
;;;4241   		plazma_numOfTemperCells=numOfTemperCells;
;;;4242   		plazma_numOfPacks=numOfPacks;
;;;4243   
;;;4244   
;;;4245   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;4246   
;;;4247   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;4248   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;4249   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;4250   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;4251   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;4252   							);	  
;;;4253   
;;;4254   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;4255   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;4256   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;4257   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;4258   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;4259   							)/10;
;;;4260   
;;;4261   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;4262   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;4263   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;4264   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;4265   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;4266   							)-2730;
;;;4267   
;;;4268   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;4269   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;4270   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;4271   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;4272   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;4273   							)/10;
;;;4274   
;;;4275   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;4276   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4277   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4278   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4279   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4280   							)/10;
;;;4281   		#endif
;;;4282   		
;;;4283   		#ifdef UKU_TELECORE2016
;;;4284   		{
;;;4285   		char i;
;;;4286   		
;;;4287   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4288   			{
;;;4289   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4290   			}
;;;4291   		}
;;;4292   		#endif
;;;4293   		
;;;4294   										  
;;;4295   		}
;;;4296   	
;;;4297   if(sacredSunSilentCnt<3) 
;;;4298   	{
;;;4299       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4300       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4301      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4302   	}
;;;4303   else 
;;;4304   	{
;;;4305       	//bat[0]._Ub=0;
;;;4306       	//bat[0]._Tb=0;
;;;4307      	//bat[0]._Ib=0;
;;;4308   	}
;;;4309   
;;;4310   if(BAT_TYPE==1)
;;;4311   	{
;;;4312   	char i;
;;;4313   	for(i=0;i<1;i++)
;;;4314   		{
;;;4315   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4316   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4317   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4318   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4319   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4320   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4321   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4322   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4323   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4324   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4325   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4326   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4327   		lakb[i]._flags1= lakb_damp[i][34];
;;;4328   		lakb[i]._flags2= lakb_damp[i][35];
;;;4329   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4330   
;;;4331   /*		if(lakb[i]._rat_cap==0)
;;;4332   			{
;;;4333   			if(lakb[i]._isOnCnt)
;;;4334   				{
;;;4335   				lakb[i]._isOnCnt--;
;;;4336   				if(lakb[i]._isOnCnt==0)
;;;4337   					{
;;;4338   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4339   					}
;;;4340   				}
;;;4341   			}
;;;4342   		else 
;;;4343   			{
;;;4344   			if(lakb[i]._isOnCnt<50)
;;;4345   				{
;;;4346   				lakb[i]._isOnCnt++;
;;;4347   				if(lakb[i]._isOnCnt==50)
;;;4348   					{
;;;4349   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4350   					}
;;;4351   				}
;;;4352   			} */
;;;4353   		gran(&lakb[i]._isOnCnt,0,50);
;;;4354   	 	}
;;;4355   
;;;4356   	if(lakb_damp[0][41]==100)
;;;4357   		{
;;;4358   		li_bat._485Error=1;
;;;4359   		}
;;;4360   	if(lakb_damp[0][41]==0)
;;;4361   		{
;;;4362   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4363   		li_bat._485Error=0;
;;;4364   		}
;;;4365   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4366   
;;;4367   
;;;4368   	}
;;;4369   
;;;4370   
;;;4371   #endif
;;;4372   
;;;4373   		#ifdef UKU_TELECORE2017
;;;4374   		{
;;;4375   		char i;
;;;4376   		
;;;4377   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4378   			{
;;;4379   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4380   			}
;;;4381   		}
;;;4382   		#endif
;;;4383   #ifdef UKU_TELECORE2015
;;;4384   //вычисление параметров работы батареи
;;;4385   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4386   li_bat._batStat=bsOK;
;;;4387   if(BAT_TYPE==1) //COSLIGHT
;;;4388   	{
;;;4389   	if(li_bat._batStat==bsOK)
;;;4390   		{
;;;4391   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4392   
;;;4393   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4394   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4395   	
;;;4396   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4397   		li_bat._soc=lakb[0]._s_o_c;
;;;4398   		li_bat._soh=lakb[0]._s_o_h;
;;;4399   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4400   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4401   		li_bat._rbt=lakb[0]._r_b_t;
;;;4402   		}
;;;4403   	else 
;;;4404   		{
;;;4405   		li_bat._Ub=bat[0]._Ub;
;;;4406   		li_bat._Ib=bat[0]._Ib/10;
;;;4407   		li_bat._Tb=bat[0]._Tb;
;;;4408   		}
;;;4409   
;;;4410   	if((li_bat._485Error)||(li_bat._canError))
;;;4411   		{
;;;4412   		li_bat._batStat=bsOFF;
;;;4413   		}
;;;4414   	else li_bat._batStat=bsOK;
;;;4415   	}
;;;4416   else if(BAT_TYPE==2) //SACRED SUN
;;;4417   	{
;;;4418   	}
;;;4419   else if(BAT_TYPE==3) //ZTT
;;;4420   	{
;;;4421   	if(li_bat._batStat==bsOK)
;;;4422   		{
;;;4423   
;;;4424   		}
;;;4425   	}
;;;4426   #endif
;;;4427   
;;;4428   
;;;4429   /*
;;;4430   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4431   	{
;;;4432   
;;;4433   
;;;4434   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4435   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4436   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4437   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4438   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4439   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4440   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4441   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4442   
;;;4443   	tempSS=0;
;;;4444   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4445   
;;;4446   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4447   
;;;4448   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4449   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4450   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4451   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4452   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4453   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4454   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4455   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4456   
;;;4457   	tempSS=0;
;;;4458   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4459   
;;;4460   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4461   
;;;4462   
;;;4463   	}*/
;;;4464   }
003624  e8bd9fff          POP      {r0-r12,pc}
;;;4465   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4525   //-----------------------------------------------
;;;4526   void mnemo_hndl(void)
003628  4aca              LDR      r2,|L1.14676|
;;;4527   {
;;;4528   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4529   	{
;;;4530   	if(mnemo_cnt)mnemo_cnt--;
00362a  49cb              LDR      r1,|L1.14680|
00362c  7810              LDRB     r0,[r2,#0]            ;4528  ; a_ind
00362e  2804              CMP      r0,#4                 ;4528
003630  d001              BEQ      |L1.13878|
003632  2801              CMP      r0,#1                 ;4528
003634  d105              BNE      |L1.13890|
                  |L1.13878|
003636  7850              LDRB     r0,[r2,#1]            ;4528  ; a_ind
003638  b918              CBNZ     r0,|L1.13890|
00363a  48c8              LDR      r0,|L1.14684|
00363c  7800              LDRB     r0,[r0,#0]            ;4528  ; MNEMO_ON
00363e  2855              CMP      r0,#0x55              ;4528
003640  d003              BEQ      |L1.13898|
                  |L1.13890|
;;;4531   	}
;;;4532   else mnemo_cnt=MNEMO_TIME;
003642  48c7              LDR      r0,|L1.14688|
003644  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003646  7008              STRB     r0,[r1,#0]
                  |L1.13896|
;;;4533   }
003648  4770              BX       lr
                  |L1.13898|
00364a  7808              LDRB     r0,[r1,#0]            ;4530  ; mnemo_cnt
00364c  2800              CMP      r0,#0                 ;4530
00364e  d0fb              BEQ      |L1.13896|
003650  f1a00001          SUB      r0,r0,#1              ;4530
003654  7008              STRB     r0,[r1,#0]            ;4530
003656  4770              BX       lr
;;;4534   
                          ENDP

                  apv_start PROC
;;;4535   //-----------------------------------------------
;;;4536   void apv_start(char in)
003658  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4537   {
;;;4538   if(	(bps[in]._apv_timer_1_lev==0)&&
00365c  eb011100          ADD      r1,r1,r0,LSL #4
003660  48c0              LDR      r0,|L1.14692|
003662  eb000081          ADD      r0,r0,r1,LSL #2
003666  f890105e          LDRB     r1,[r0,#0x5e]
00366a  2900              CMP      r1,#0
00366c  d115              BNE      |L1.13978|
;;;4539   	(bps[in]._apv_cnt_1_lev==0)&&
00366e  f890105f          LDRB     r1,[r0,#0x5f]
003672  2900              CMP      r1,#0
003674  d111              BNE      |L1.13978|
;;;4540   	(bps[in]._apv_timer_2_lev==0) )
003676  f8b01060          LDRH     r1,[r0,#0x60]
00367a  2900              CMP      r1,#0
00367c  d10d              BNE      |L1.13978|
;;;4541   		{
;;;4542    		bps[in]._apv_timer_1_lev=60;
00367e  f04f013c          MOV      r1,#0x3c
003682  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4543   		bps[in]._apv_cnt_1_lev=3;
003686  f04f0103          MOV      r1,#3
00368a  7041              STRB     r1,[r0,#1]
;;;4544   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00368c  49b6              LDR      r1,|L1.14696|
00368e  f44f6261          MOV      r2,#0xe10
003692  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003694  fb01f102          MUL      r1,r1,r2
003698  8041              STRH     r1,[r0,#2]
                  |L1.13978|
;;;4545   		}
;;;4546   }
00369a  4770              BX       lr
;;;4547   
                          ENDP

                  apv_stop PROC
;;;4548   //-----------------------------------------------
;;;4549   void apv_stop(char in)
00369c  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4550   {
;;;4551   bps[in]._apv_timer_1_lev=0;
0036a0  eb021200          ADD      r2,r2,r0,LSL #4
0036a4  48af              LDR      r0,|L1.14692|
0036a6  f04f0100          MOV      r1,#0
0036aa  eb000082          ADD      r0,r0,r2,LSL #2
0036ae  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4552   bps[in]._apv_cnt_1_lev=0;
0036b2  7041              STRB     r1,[r0,#1]
;;;4553   bps[in]._apv_timer_2_lev=0;
0036b4  8041              STRH     r1,[r0,#2]
;;;4554   }
0036b6  4770              BX       lr
;;;4555   
                          ENDP

                  apv_drv PROC
;;;4556   //-----------------------------------------------
;;;4557   void apv_drv(void)		//1 Гц
0036b8  e92d43f0          PUSH     {r4-r9,lr}
;;;4558   {
;;;4559   for(i=0;i<NUMIST;i++)
0036bc  4eab              LDR      r6,|L1.14700|
0036be  f04f0300          MOV      r3,#0
0036c2  7533              STRB     r3,[r6,#0x14]
;;;4560   	{
;;;4561   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4562   		{
;;;4563   		bps[i]._apv_timer_1_lev=0;
;;;4564   		bps[i]._apv_cnt_1_lev=0;
;;;4565   		bps[i]._apv_timer_2_lev=0;
;;;4566   		}
;;;4567   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
0036c4  4caa              LDR      r4,|L1.14704|
;;;4568   		{
;;;4569   		bps[i]._apv_timer_2_lev=0;
;;;4570   		}
;;;4571   
;;;4572   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4573   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4574   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4575   			{
;;;4576   			if(bps[i]._state==bsWRK)
;;;4577   				{
;;;4578   				if(bps[i]._apv_succes_timer<60)
;;;4579   					{
;;;4580   					bps[i]._apv_succes_timer++;
;;;4581   					if(bps[i]._apv_succes_timer>=60)
;;;4582   						{
;;;4583   						apv_stop(i);
;;;4584   						}
;;;4585   					}
;;;4586   				}
;;;4587   			else bps[i]._apv_succes_timer=0;
;;;4588   			}
;;;4589   
;;;4590   	if(bps[i]._apv_timer_1_lev)
;;;4591   		{
;;;4592   		bps[i]._apv_timer_2_lev=0;
;;;4593   		bps[i]._apv_timer_1_lev--;
;;;4594   		if(bps[i]._apv_timer_1_lev==0)
;;;4595   			{
;;;4596   			if(bps[i]._apv_cnt_1_lev)
;;;4597   				{
;;;4598   				bps[i]._apv_cnt_1_lev--;
;;;4599   				bps[i]._apv_timer_1_lev=60;
0036c6  f04f073c          MOV      r7,#0x3c
;;;4600   				bps[i]._apv_reset_av_timer=2;
0036ca  f04f0802          MOV      r8,#2
0036ce  4da5              LDR      r5,|L1.14692|
0036d0  f8df92a0          LDR      r9,|L1.14708|
0036d4  e079              B        |L1.14282|
                  |L1.14038|
0036d6  49a8              LDR      r1,|L1.14712|
0036d8  7809              LDRB     r1,[r1,#0]            ;4561  ; APV_ON1
0036da  b949              CBNZ     r1,|L1.14064|
0036dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4563
0036e0  eb011100          ADD      r1,r1,r0,LSL #4       ;4563
0036e4  eb050181          ADD      r1,r5,r1,LSL #2       ;4563
0036e8  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4563
0036ec  704b              STRB     r3,[r1,#1]            ;4564
0036ee  804b              STRH     r3,[r1,#2]            ;4565
                  |L1.14064|
0036f0  7821              LDRB     r1,[r4,#0]            ;4567  ; APV_ON2
0036f2  b939              CBNZ     r1,|L1.14084|
0036f4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4569
0036f8  eb011100          ADD      r1,r1,r0,LSL #4       ;4569
0036fc  eb050181          ADD      r1,r5,r1,LSL #2       ;4569
003700  f8a13060          STRH     r3,[r1,#0x60]         ;4569
                  |L1.14084|
003704  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4572
003708  eb011100          ADD      r1,r1,r0,LSL #4       ;4572
00370c  eb050181          ADD      r1,r5,r1,LSL #2       ;4572
003710  f891205e          LDRB     r2,[r1,#0x5e]         ;4572
003714  b92a              CBNZ     r2,|L1.14114|
003716  f891205f          LDRB     r2,[r1,#0x5f]         ;4573
00371a  b912              CBNZ     r2,|L1.14114|
00371c  f8b12060          LDRH     r2,[r1,#0x60]         ;4574
003720  b122              CBZ      r2,|L1.14124|
                  |L1.14114|
003722  788a              LDRB     r2,[r1,#2]            ;4576
003724  2a01              CMP      r2,#1                 ;4576
003726  d014              BEQ      |L1.14162|
003728  f8813063          STRB     r3,[r1,#0x63]         ;4587
                  |L1.14124|
00372c  7d31              LDRB     r1,[r6,#0x14]         ;4590  ; i
00372e  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4590
003732  eb001001          ADD      r0,r0,r1,LSL #4       ;4590
003736  eb050080          ADD      r0,r5,r0,LSL #2       ;4590
00373a  f890205e          LDRB     r2,[r0,#0x5e]         ;4590
00373e  b30a              CBZ      r2,|L1.14212|
003740  f8a03060          STRH     r3,[r0,#0x60]         ;4592
003744  f1a20201          SUB      r2,r2,#1              ;4593
003748  b2d2              UXTB     r2,r2                 ;4593
00374a  f880205e          STRB     r2,[r0,#0x5e]         ;4593
00374e  b172              CBZ      r2,|L1.14190|
003750  e024              B        |L1.14236|
                  |L1.14162|
003752  f8912063          LDRB     r2,[r1,#0x63]         ;4578
003756  2a3c              CMP      r2,#0x3c              ;4578
003758  d2e8              BCS      |L1.14124|
00375a  f1020201          ADD      r2,r2,#1              ;4580
00375e  b2d2              UXTB     r2,r2                 ;4580
003760  f8812063          STRB     r2,[r1,#0x63]         ;4580
003764  2a3c              CMP      r2,#0x3c              ;4581
003766  d3e1              BCC      |L1.14124|
003768  f7fffffe          BL       apv_stop
00376c  e7de              B        |L1.14124|
                  |L1.14190|
00376e  f890205f          LDRB     r2,[r0,#0x5f]         ;4596
003772  b142              CBZ      r2,|L1.14214|
003774  f1a20201          SUB      r2,r2,#1              ;4598
003778  f880205f          STRB     r2,[r0,#0x5f]         ;4598
00377c  f880705e          STRB     r7,[r0,#0x5e]         ;4599
003780  f8808062          STRB     r8,[r0,#0x62]
                  |L1.14212|
003784  e00a              B        |L1.14236|
                  |L1.14214|
;;;4601   				}
;;;4602   			else
;;;4603   				{
;;;4604   				if(APV_ON2==apvON)
003786  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003788  2a01              CMP      r2,#1
00378a  d107              BNE      |L1.14236|
;;;4605   					{
;;;4606   					bps[i]._apv_timer_1_lev=0;
;;;4607   					bps[i]._apv_cnt_1_lev=0;
;;;4608   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00378c  4a76              LDR      r2,|L1.14696|
00378e  f44f6c61          MOV      r12,#0xe10
003792  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003794  fb02f20c          MUL      r2,r2,r12
003798  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.14236|
;;;4609   					}
;;;4610   				}
;;;4611   			
;;;4612   			}
;;;4613   		}
;;;4614   	if(bps[i]._apv_timer_2_lev)
00379c  f8b02060          LDRH     r2,[r0,#0x60]
0037a0  b14a              CBZ      r2,|L1.14262|
;;;4615   		{
;;;4616   		bps[i]._apv_timer_2_lev--;
0037a2  f1a20201          SUB      r2,r2,#1
0037a6  b292              UXTH     r2,r2
0037a8  f8a02060          STRH     r2,[r0,#0x60]
;;;4617   		if(bps[i]._apv_timer_2_lev==0)
0037ac  b91a              CBNZ     r2,|L1.14262|
;;;4618   			{
;;;4619   			bps[i]._apv_cnt_1_lev=2;
0037ae  f880805f          STRB     r8,[r0,#0x5f]
;;;4620   			bps[i]._apv_timer_1_lev=60;
0037b2  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.14262|
;;;4621   			}
;;;4622   		}
;;;4623   
;;;4624   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
0037b6  f8902062          LDRB     r2,[r0,#0x62]
0037ba  b11a              CBZ      r2,|L1.14276|
0037bc  f1a20201          SUB      r2,r2,#1
0037c0  f8802062          STRB     r2,[r0,#0x62]
                  |L1.14276|
0037c4  f1010101          ADD      r1,r1,#1              ;4559
0037c8  7531              STRB     r1,[r6,#0x14]         ;4559
                  |L1.14282|
0037ca  7d30              LDRB     r0,[r6,#0x14]         ;4559  ; i
0037cc  f9b91000          LDRSH    r1,[r9,#0]            ;4559  ; NUMIST
0037d0  4288              CMP      r0,r1                 ;4559
0037d2  db80              BLT      |L1.14038|
;;;4625   	} 
;;;4626   /*char i;
;;;4627   for(i=0;i<2;i++) 
;;;4628   	{
;;;4629   	if(apv_cnt_sec[i])
;;;4630   		{
;;;4631   		apv_cnt_sec[i]--;
;;;4632   		if(apv_cnt_sec[i]==0)
;;;4633   			{
;;;4634   			cnt_av_umax[i]=0;
;;;4635   			cnt_av_umin[i]=0;
;;;4636   			reset_apv_cnt[i]=600;
;;;4637   			}
;;;4638   		}
;;;4639   	
;;;4640   	if(reset_apv_cnt[i])
;;;4641   		{
;;;4642   		reset_apv_cnt[i]--;
;;;4643   		if(reset_apv_cnt[i]==0)
;;;4644   			{
;;;4645   			apv_cnt[i]=0;
;;;4646   			}
;;;4647   		}	
;;;4648   		
;;;4649   	if(hour_apv_cnt[i])
;;;4650   		{
;;;4651   		hour_apv_cnt[i]--;
;;;4652   		if(hour_apv_cnt[i]==0)
;;;4653   			{
;;;4654   			apv_cnt[i]=0;
;;;4655   			avar_src_reset(i);
;;;4656   			}
;;;4657   		}			
;;;4658   	}
;;;4659   
;;;4660   
;;;4661   
;;;4662   
;;;4663   if(apv_cnt_1)
;;;4664   	{
;;;4665   	apv_cnt_1--;
;;;4666   	if(!apv_cnt_1) 
;;;4667   		{
;;;4668   		avar_src_reset(0);
;;;4669   		avar_src_reset(1);
;;;4670   		//cntrl_stat=0;
;;;4671   		}
;;;4672   	}*/		
;;;4673   }
0037d4  e8bd83f0          POP      {r4-r9,pc}
;;;4674   
                          ENDP

                  adc_init PROC
;;;4675   //-----------------------------------------------
;;;4676   void adc_init(void)
0037d8  4868              LDR      r0,|L1.14716|
;;;4677   {
;;;4678   
;;;4679   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0037da  6841              LDR      r1,[r0,#4]
0037dc  f4212140          BIC      r1,r1,#0xc0000
0037e0  f4412180          ORR      r1,r1,#0x40000
0037e4  6041              STR      r1,[r0,#4]
;;;4680   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0037e6  6841              LDR      r1,[r0,#4]
0037e8  f4213140          BIC      r1,r1,#0x30000
0037ec  f4413180          ORR      r1,r1,#0x10000
0037f0  6041              STR      r1,[r0,#4]
;;;4681   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0037f2  6841              LDR      r1,[r0,#4]
0037f4  f4214140          BIC      r1,r1,#0xc000
0037f8  f4414180          ORR      r1,r1,#0x4000
0037fc  6041              STR      r1,[r0,#4]
;;;4682   
;;;4683   
;;;4684   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0037fe  6c41              LDR      r1,[r0,#0x44]
003800  f4212140          BIC      r1,r1,#0xc0000
003804  f4412100          ORR      r1,r1,#0x80000
003808  6441              STR      r1,[r0,#0x44]
;;;4685   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
00380a  6c41              LDR      r1,[r0,#0x44]
00380c  f4213140          BIC      r1,r1,#0x30000
003810  f4413100          ORR      r1,r1,#0x20000
003814  6441              STR      r1,[r0,#0x44]
;;;4686   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
003816  6c41              LDR      r1,[r0,#0x44]
003818  f4214140          BIC      r1,r1,#0xc000
00381c  f4414100          ORR      r1,r1,#0x8000
003820  6441              STR      r1,[r0,#0x44]
;;;4687   
;;;4688   SET_REG(LPC_ADC->ADCR,0,24,3);
003822  4857              LDR      r0,|L1.14720|
003824  6801              LDR      r1,[r0,#0]
003826  f02161e0          BIC      r1,r1,#0x7000000
00382a  6001              STR      r1,[r0,#0]
;;;4689   
;;;4690   SET_REG(LPC_ADC->ADCR,1,21,1);
00382c  6801              LDR      r1,[r0,#0]
00382e  f4411100          ORR      r1,r1,#0x200000
003832  6001              STR      r1,[r0,#0]
;;;4691   SET_REG(LPC_ADC->ADCR,0,16,1);
003834  6801              LDR      r1,[r0,#0]
003836  f4213180          BIC      r1,r1,#0x10000
00383a  6001              STR      r1,[r0,#0]
;;;4692   SET_REG(LPC_ADC->ADCR,1,8,8);
00383c  6801              LDR      r1,[r0,#0]
00383e  f421417f          BIC      r1,r1,#0xff00
003842  f4417180          ORR      r1,r1,#0x100
003846  6001              STR      r1,[r0,#0]
;;;4693   
;;;4694   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4695   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4696   	
;;;4697   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4698        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4699        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4700   
;;;4701   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003848  f44f7180          MOV      r1,#0x100
00384c  60c1              STR      r1,[r0,#0xc]
00384e  484d              LDR      r0,|L1.14724|
003850  f44f0180          MOV      r1,#0x400000
003854  6001              STR      r1,[r0,#0]
;;;4702   
;;;4703   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4704   
;;;4705   
;;;4706   }
003856  4770              BX       lr
;;;4707   
                          ENDP

                  adc_drv7 PROC
;;;4708   //-----------------------------------------------
;;;4709   void adc_drv7(void) //(Uсети - постоянка)
003858  e92d41f0          PUSH     {r4-r8,lr}
;;;4710   {
;;;4711   //int temp_S;
;;;4712   //char i;
;;;4713   //signed short temp_SS;
;;;4714   
;;;4715   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00385c  4c43              LDR      r4,|L1.14700|
00385e  34e6              ADDS     r4,r4,#0xe6
003860  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003862  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003864  1a40              SUBS     r0,r0,r1
003866  b200              SXTH     r0,r0
003868  f7fffffe          BL       abs_pal
00386c  1da6              ADDS     r6,r4,#6
00386e  8030              STRH     r0,[r6,#0]
;;;4716   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003870  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003872  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003874  1a40              SUBS     r0,r0,r1
003876  b200              SXTH     r0,r0
003878  f7fffffe          BL       abs_pal
00387c  8070              STRH     r0,[r6,#2]
;;;4717   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00387e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003880  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003882  1a40              SUBS     r0,r0,r1
003884  b200              SXTH     r0,r0
003886  f7fffffe          BL       abs_pal
00388a  80b0              STRH     r0,[r6,#4]
;;;4718   
;;;4719   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4720   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4721   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4722   
;;;4723   
;;;4724   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00388c  f44f7196          MOV      r1,#0x12c
;;;4725   	{
;;;4726   	adc_result=adc_self_ch_buff[2];
003890  4d36              LDR      r5,|L1.14700|
003892  4288              CMP      r0,r1                 ;4724
003894  da03              BGE      |L1.14494|
003896  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003898  f8a50040          STRH     r0,[r5,#0x40]
00389c  e00e              B        |L1.14524|
                  |L1.14494|
;;;4727   	} 
;;;4728   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00389e  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0038a2  4288              CMP      r0,r1
0038a4  da03              BGE      |L1.14510|
;;;4729   	{
;;;4730   	adc_result=adc_self_ch_buff[1];
0038a6  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0038a8  f8a50040          STRH     r0,[r5,#0x40]
0038ac  e006              B        |L1.14524|
                  |L1.14510|
;;;4731   	}
;;;4732   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0038ae  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0038b2  4288              CMP      r0,r1
0038b4  da02              BGE      |L1.14524|
;;;4733   	{
;;;4734   	adc_result=adc_self_ch_buff[0];
0038b6  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0038b8  f8a50040          STRH     r0,[r5,#0x40]
                  |L1.14524|
;;;4735   	}
;;;4736       //adc_result=92;
;;;4737   
;;;4738   if(adc_ch_net)
0038bc  7baf              LDRB     r7,[r5,#0xe]  ; adc_ch_net
0038be  2600              MOVS     r6,#0
0038c0  b347              CBZ      r7,|L1.14612|
;;;4739   	{
;;;4740   
;;;4741   	main_power_buffer[0]+=(long)(adc_result);
0038c2  4831              LDR      r0,|L1.14728|
0038c4  f9b51040          LDRSH    r1,[r5,#0x40]  ; adc_result
0038c8  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0038ca  440a              ADD      r2,r2,r1
0038cc  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4742   	main_power_buffer[1]+=(long)(adc_result);
0038ce  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0038d0  440a              ADD      r2,r2,r1
0038d2  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4743   	main_power_buffer[2]+=(long)(adc_result);
0038d4  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0038d6  440a              ADD      r2,r2,r1
0038d8  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4744   	main_power_buffer[3]+=(long)(adc_result);
0038da  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0038dc  4411              ADD      r1,r1,r2
0038de  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4745   
;;;4746   	adc_net_buff_cnt++;
0038e0  f8b51048          LDRH     r1,[r5,#0x48]  ; adc_net_buff_cnt
0038e4  f1010101          ADD      r1,r1,#1
0038e8  b209              SXTH     r1,r1
0038ea  f8a51048          STRH     r1,[r5,#0x48]
;;;4747   	if(adc_net_buff_cnt>=0x1000)
0038ee  f5b15f80          CMP      r1,#0x1000
0038f2  db01              BLT      |L1.14584|
;;;4748   		{
;;;4749   		adc_net_buff_cnt=0;
0038f4  f8a56048          STRH     r6,[r5,#0x48]
                  |L1.14584|
;;;4750   		}
;;;4751   	if((adc_net_buff_cnt&0x03ff)==0)
0038f8  f9b51048          LDRSH    r1,[r5,#0x48]  ; adc_net_buff_cnt
0038fc  058a              LSLS     r2,r1,#22
0038fe  d154              BNE      |L1.14762|
;;;4752   		{
;;;4753   		#ifdef UKU_220
;;;4754   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4755   		#else
;;;4756   		#ifdef UKU_220_V2
;;;4757   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4758   		#else
;;;4759   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
003900  ea4f21a1          ASR      r1,r1,#10
003904  f8502021          LDR      r2,[r0,r1,LSL #2]
003908  ea4f2222          ASR      r2,r2,#8
00390c  87ea              STRH     r2,[r5,#0x3e]
;;;4760   		#endif
;;;4761   		#endif
;;;4762   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00390e  f8406021          STR      r6,[r0,r1,LSL #2]
003912  e04a              B        |L1.14762|
                  |L1.14612|
;;;4763   		}
;;;4764   
;;;4765   
;;;4766   	} 
;;;4767   else if(!adc_ch_net)
;;;4768   	{
;;;4769   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
003914  481d              LDR      r0,|L1.14732|
003916  7bec              LDRB     r4,[r5,#0xf]  ; adc_ch
003918  7c2a              LDRB     r2,[r5,#0x10]  ; adc_ch_cnt
00391a  eb001384          ADD      r3,r0,r4,LSL #6
00391e  f9b51040          LDRSH    r1,[r5,#0x40]  ; adc_result
003922  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4770   	
;;;4771   	if((adc_ch_cnt&0x03)==0)
003926  0790              LSLS     r0,r2,#30
003928  d10f              BNE      |L1.14666|
;;;4772   		{
;;;4773   		long temp_L;
;;;4774   		char i;
;;;4775   		temp_L=0;
00392a  4601              MOV      r1,r0
                  |L1.14636|
;;;4776   		for(i=0;i<16;i++)
;;;4777   			{
;;;4778   			temp_L+=adc_buff[adc_ch][i];
00392c  f853c020          LDR      r12,[r3,r0,LSL #2]
003930  4461              ADD      r1,r1,r12
003932  f1000001          ADD      r0,r0,#1              ;4776
003936  b2c0              UXTB     r0,r0                 ;4776
003938  2810              CMP      r0,#0x10              ;4776
00393a  d3f7              BCC      |L1.14636|
;;;4779   			}
;;;4780   		adc_buff_[adc_ch]= (short)(temp_L>>4);
00393c  ea4f1021          ASR      r0,r1,#4
003940  4911              LDR      r1,|L1.14728|
003942  f1a10120          SUB      r1,r1,#0x20
003946  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14666|
;;;4781   
;;;4782   		//adc_buff_[3]=346;
;;;4783   		}
;;;4784   	if(++adc_ch>=16) 
00394a  e021              B        |L1.14736|
                  |L1.14668|
                          DCD      NUMINV
                  |L1.14672|
                          DCD      inv
                  |L1.14676|
                          DCD      a_ind
                  |L1.14680|
                          DCD      mnemo_cnt
                  |L1.14684|
                          DCD      MNEMO_ON
                  |L1.14688|
                          DCD      MNEMO_TIME
                  |L1.14692|
                          DCD      bps
                  |L1.14696|
                          DCD      APV_ON2_TIME
                  |L1.14700|
                          DCD      ||area_number.25||
                  |L1.14704|
                          DCD      APV_ON2
                  |L1.14708|
                          DCD      NUMIST
                  |L1.14712|
                          DCD      APV_ON1
                  |L1.14716|
                          DCD      0x4002c000
                  |L1.14720|
                          DCD      0x40034000
                  |L1.14724|
                          DCD      0xe000e100
                  |L1.14728|
                          DCD      ||.bss||+0x42c
                  |L1.14732|
                          DCD      ||.bss||+0xc
                  |L1.14736|
003990  1c64              ADDS     r4,r4,#1
003992  b2e0              UXTB     r0,r4
003994  73e8              STRB     r0,[r5,#0xf]
003996  2810              CMP      r0,#0x10
003998  d307              BCC      |L1.14762|
;;;4785   		{
;;;4786   		adc_ch=0;
00399a  73ee              STRB     r6,[r5,#0xf]
;;;4787   		adc_ch_cnt++;
00399c  f1020201          ADD      r2,r2,#1
0039a0  b2d0              UXTB     r0,r2
0039a2  7428              STRB     r0,[r5,#0x10]
;;;4788   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0039a4  2810              CMP      r0,#0x10
0039a6  d300              BCC      |L1.14762|
0039a8  742e              STRB     r6,[r5,#0x10]
                  |L1.14762|
;;;4789   		}
;;;4790   	}
;;;4791   
;;;4792   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4793   
;;;4794   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4795   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4796   /*
;;;4797   	{
;;;4798   	if((adc_cnt1&0x03)==0)
;;;4799   		{
;;;4800   		temp_S=0;
;;;4801   		for(i=0;i<16;i++)
;;;4802   			{
;;;4803   			temp_S+=adc_buff[adc_ch][i];
;;;4804   			} 
;;;4805            	adc_buff_[adc_ch]=temp_S>>4;
;;;4806             }
;;;4807   	}*/
;;;4808   
;;;4809   
;;;4810   		  
;;;4811   
;;;4812   adc_self_ch_cnt=0;
0039aa  736e              STRB     r6,[r5,#0xd]
;;;4813   
;;;4814   adc_ch_net++;
0039ac  f1070701          ADD      r7,r7,#1
;;;4815   adc_ch_net&=1;
0039b0  f0070001          AND      r0,r7,#1
0039b4  73a8              STRB     r0,[r5,#0xe]
;;;4816   
;;;4817   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4818   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4819   
;;;4820   if(adc_ch_net)
;;;4821   	{
;;;4822   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4823   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4824   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0039b6  4aff              LDR      r2,|L1.15796|
0039b8  b130              CBZ      r0,|L1.14792|
0039ba  6810              LDR      r0,[r2,#0]
0039bc  f02000ff          BIC      r0,r0,#0xff
0039c0  f1000004          ADD      r0,r0,#4
0039c4  6010              STR      r0,[r2,#0]
0039c6  e03d              B        |L1.14916|
                  |L1.14792|
;;;4825   	}
;;;4826   else
;;;4827   	{
;;;4828   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4829   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4830   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0039c8  7be9              LDRB     r1,[r5,#0xf]  ; adc_ch
0039ca  0708              LSLS     r0,r1,#28
0039cc  d406              BMI      |L1.14812|
0039ce  6810              LDR      r0,[r2,#0]
0039d0  f02000ff          BIC      r0,r0,#0xff
0039d4  f1000001          ADD      r0,r0,#1
0039d8  6010              STR      r0,[r2,#0]
0039da  e005              B        |L1.14824|
                  |L1.14812|
;;;4831   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0039dc  6810              LDR      r0,[r2,#0]
0039de  f02000ff          BIC      r0,r0,#0xff
0039e2  f1000002          ADD      r0,r0,#2
0039e6  6010              STR      r0,[r2,#0]
                  |L1.14824|
;;;4832   
;;;4833   
;;;4834   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0039e8  48f3              LDR      r0,|L1.15800|
0039ea  6803              LDR      r3,[r0,#0]
0039ec  f0435380          ORR      r3,r3,#0x10000000
0039f0  6003              STR      r3,[r0,#0]
;;;4835   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0039f2  6a03              LDR      r3,[r0,#0x20]
0039f4  f0434380          ORR      r3,r3,#0x40000000
0039f8  6203              STR      r3,[r0,#0x20]
;;;4836   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0039fa  6e03              LDR      r3,[r0,#0x60]
0039fc  f0436380          ORR      r3,r3,#0x4000000
003a00  6603              STR      r3,[r0,#0x60]
;;;4837   
;;;4838   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003a02  07cb              LSLS     r3,r1,#31
003a04  d00a              BEQ      |L1.14876|
;;;4839   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003a06  6943              LDR      r3,[r0,#0x14]
003a08  f0435380          ORR      r3,r3,#0x10000000
003a0c  6143              STR      r3,[r0,#0x14]
                  |L1.14862|
;;;4840   
;;;4841   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003a0e  078b              LSLS     r3,r1,#30
003a10  d409              BMI      |L1.14886|
003a12  6b43              LDR      r3,[r0,#0x34]
003a14  f0234380          BIC      r3,r3,#0x40000000
003a18  6343              STR      r3,[r0,#0x34]
003a1a  e008              B        |L1.14894|
                  |L1.14876|
003a1c  6943              LDR      r3,[r0,#0x14]         ;4838
003a1e  f0235380          BIC      r3,r3,#0x10000000     ;4838
003a22  6143              STR      r3,[r0,#0x14]         ;4838
003a24  e7f3              B        |L1.14862|
                  |L1.14886|
;;;4842   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003a26  6b43              LDR      r3,[r0,#0x34]
003a28  f0434380          ORR      r3,r3,#0x40000000
003a2c  6343              STR      r3,[r0,#0x34]
                  |L1.14894|
;;;4843   
;;;4844   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003a2e  0749              LSLS     r1,r1,#29
003a30  d404              BMI      |L1.14908|
003a32  6f41              LDR      r1,[r0,#0x74]
003a34  f0216180          BIC      r1,r1,#0x4000000
003a38  6741              STR      r1,[r0,#0x74]
003a3a  e003              B        |L1.14916|
                  |L1.14908|
;;;4845   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003a3c  6f41              LDR      r1,[r0,#0x74]
003a3e  f0416180          ORR      r1,r1,#0x4000000
003a42  6741              STR      r1,[r0,#0x74]
                  |L1.14916|
;;;4846   	}
;;;4847   	
;;;4848   
;;;4849   
;;;4850   
;;;4851   LPC_ADC->ADCR |=  (1<<24);
003a44  6810              LDR      r0,[r2,#0]
003a46  f0407080          ORR      r0,r0,#0x1000000
003a4a  6010              STR      r0,[r2,#0]
                  |L1.14924|
;;;4852   
;;;4853   }
003a4c  e8bd81f0          POP      {r4-r8,pc}
;;;4854   
                          ENDP

                  avg_hndl PROC
;;;5111   //-----------------------------------------------
;;;5112   void avg_hndl(void)
003a50  e92d41f0          PUSH     {r4-r8,lr}
;;;5113   { 
;;;5114   char i;
;;;5115   
;;;5116   //#define AVGCNTMAX	5
;;;5117   if(avg_main_cnt)
003a54  4dd9              LDR      r5,|L1.15804|
003a56  f9b50034          LDRSH    r0,[r5,#0x34]  ; avg_main_cnt
003a5a  b118              CBZ      r0,|L1.14948|
;;;5118   	{
;;;5119   	avg_main_cnt--;
003a5c  f1a00001          SUB      r0,r0,#1
003a60  86a8              STRH     r0,[r5,#0x34]
;;;5120   	//goto avg_hndl_end;
;;;5121   	return;
;;;5122   	}                 
;;;5123   
;;;5124   avg_main_cnt=5;
;;;5125   avg_num=0;
;;;5126   
;;;5127   for(i=0;i<NUMIST;i++)
;;;5128   	{
;;;5129   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;5130   	}
;;;5131   
;;;5132   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;5133   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;5134   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;5135   
;;;5136   if(avg_vektor) avg_vektor=0;
;;;5137   else avg_vektor=1;
;;;5138   	
;;;5139   if(avg_num<2)
;;;5140   	{
;;;5141   	//goto avg_hndl_end;
;;;5142   	return;
;;;5143   	}
;;;5144   	
;;;5145   else
;;;5146   	{
;;;5147   	i_avg_min=5000;
;;;5148   	i_avg_max=0;
;;;5149   	i_avg_summ=0;
;;;5150   	for(i=0;i<NUMIST;i++)
;;;5151   		{
;;;5152   		if(bps[i]._state==bsWRK)
;;;5153   			{
;;;5154   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;5155   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;5156   			
;;;5157   			i_avg_summ+=bps[i]._Ii;
;;;5158   			}
;;;5159   		}
;;;5160   	i_avg=i_avg_summ/avg_num;	
;;;5161   	
;;;5162   	if(i_avg_min==0)i_avg_min=1;
;;;5163   
;;;5164   	avg=i_avg_max;
;;;5165   	avg*=100;
;;;5166   	avg/=i_avg_min;
;;;5167   
;;;5168   	if(avg>130) bAVG=1;
;;;5169   	if(avg<110) bAVG=0;
;;;5170   
;;;5171   	if(bAVG==1)
;;;5172   		{
;;;5173   		for(i=0;i<NUMIST;i++)
;;;5174   			{
;;;5175   			if(bps[i]._state==bsWRK)
;;;5176   				{
;;;5177   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;5178   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;5179   			
;;;5180   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;5181   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;5182   				}
;;;5183   			}		
;;;5184   		}			
;;;5185   	}   	 
;;;5186   
;;;5187   
;;;5188   avg_hndl_end:
;;;5189   __nop();  
;;;5190   }
003a62  e7f3              B        |L1.14924|
                  |L1.14948|
003a64  f04f0005          MOV      r0,#5                 ;5124
003a68  86a8              STRH     r0,[r5,#0x34]         ;5124
003a6a  f04f0700          MOV      r7,#0                 ;5125
003a6e  75ef              STRB     r7,[r5,#0x17]         ;5125
003a70  f04f0000          MOV      r0,#0                 ;5127
003a74  49d3              LDR      r1,|L1.15812|
003a76  4cd2              LDR      r4,|L1.15808|
003a78  f9b12000          LDRSH    r2,[r1,#0]            ;5127
003a7c  e012              B        |L1.15012|
                  |L1.14974|
003a7e  eb0001c0          ADD      r1,r0,r0,LSL #3       ;5129
003a82  eb011100          ADD      r1,r1,r0,LSL #4       ;5129
003a86  eb040181          ADD      r1,r4,r1,LSL #2       ;5129
003a8a  788b              LDRB     r3,[r1,#2]            ;5129
003a8c  2b01              CMP      r3,#1                 ;5129
003a8e  d106              BNE      |L1.15006|
003a90  78c9              LDRB     r1,[r1,#3]            ;5129
003a92  2914              CMP      r1,#0x14              ;5129
003a94  d203              BCS      |L1.15006|
003a96  7de9              LDRB     r1,[r5,#0x17]         ;5129  ; avg_num
003a98  f1010101          ADD      r1,r1,#1              ;5129
003a9c  75e9              STRB     r1,[r5,#0x17]         ;5129
                  |L1.15006|
003a9e  f1000001          ADD      r0,r0,#1              ;5127
003aa2  b2c0              UXTB     r0,r0                 ;5127
                  |L1.15012|
003aa4  4290              CMP      r0,r2                 ;5127
003aa6  dbea              BLT      |L1.14974|
003aa8  7e28              LDRB     r0,[r5,#0x18]         ;5136  ; avg_vektor
003aaa  f04f0c01          MOV      r12,#1                ;5129
003aae  b108              CBZ      r0,|L1.15028|
003ab0  762f              STRB     r7,[r5,#0x18]         ;5136
003ab2  e001              B        |L1.15032|
                  |L1.15028|
003ab4  f885c018          STRB     r12,[r5,#0x18]        ;5137
                  |L1.15032|
003ab8  7dee              LDRB     r6,[r5,#0x17]         ;5139  ; avg_num
003aba  2e02              CMP      r6,#2                 ;5139
003abc  d3c6              BCC      |L1.14924|
003abe  4bbf              LDR      r3,|L1.15804|
003ac0  f2413088          MOV      r0,#0x1388            ;5147
003ac4  f1030380          ADD      r3,r3,#0x80           ;5147
003ac8  6198              STR      r0,[r3,#0x18]         ;5147  ; i_avg_min
003aca  615f              STR      r7,[r3,#0x14]         ;5148  ; i_avg_max
003acc  61df              STR      r7,[r3,#0x1c]         ;5149  ; i_avg_summ
003ace  f04f0100          MOV      r1,#0                 ;5150
003ad2  e01c              B        |L1.15118|
                  |L1.15060|
003ad4  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5152
003ad8  eb001001          ADD      r0,r0,r1,LSL #4       ;5152
003adc  eb040080          ADD      r0,r4,r0,LSL #2       ;5152
003ae0  f8908002          LDRB     r8,[r0,#2]            ;5152
003ae4  f1b80f01          CMP      r8,#1                 ;5152
003ae8  d10e              BNE      |L1.15112|
003aea  6a40              LDR      r0,[r0,#0x24]         ;5154
003aec  f8d38014          LDR      r8,[r3,#0x14]         ;5154  ; i_avg_max
003af0  4540              CMP      r0,r8                 ;5154
003af2  dd00              BLE      |L1.15094|
003af4  6158              STR      r0,[r3,#0x14]         ;5154  ; i_avg_max
                  |L1.15094|
003af6  f8d38018          LDR      r8,[r3,#0x18]         ;5155  ; i_avg_min
003afa  4540              CMP      r0,r8                 ;5155
003afc  da00              BGE      |L1.15104|
003afe  6198              STR      r0,[r3,#0x18]         ;5155  ; i_avg_min
                  |L1.15104|
003b00  f8d3801c          LDR      r8,[r3,#0x1c]         ;5157  ; i_avg_summ
003b04  4440              ADD      r0,r0,r8              ;5157
003b06  61d8              STR      r0,[r3,#0x1c]         ;5157  ; i_avg_summ
                  |L1.15112|
003b08  f1010101          ADD      r1,r1,#1              ;5150
003b0c  b2c9              UXTB     r1,r1                 ;5150
                  |L1.15118|
003b0e  4291              CMP      r1,r2                 ;5150
003b10  dbe0              BLT      |L1.15060|
003b12  69d8              LDR      r0,[r3,#0x1c]         ;5160  ; i_avg_summ
003b14  fb90f6f6          SDIV     r6,r0,r6              ;5160
003b18  621e              STR      r6,[r3,#0x20]         ;5160  ; i_avg
003b1a  6998              LDR      r0,[r3,#0x18]         ;5162  ; i_avg_min
003b1c  b908              CBNZ     r0,|L1.15138|
003b1e  f8c3c018          STR      r12,[r3,#0x18]        ;5162  ; i_avg_min
                  |L1.15138|
003b22  6958              LDR      r0,[r3,#0x14]         ;5164  ; i_avg_max
003b24  f04f0164          MOV      r1,#0x64              ;5165
003b28  fb00f001          MUL      r0,r0,r1              ;5165
003b2c  6999              LDR      r1,[r3,#0x18]         ;5166  ; i_avg_min
003b2e  fb90f0f1          SDIV     r0,r0,r1              ;5166
003b32  6258              STR      r0,[r3,#0x24]         ;5166  ; avg
003b34  2882              CMP      r0,#0x82              ;5168
003b36  dd01              BLE      |L1.15164|
003b38  f885c016          STRB     r12,[r5,#0x16]        ;5168
                  |L1.15164|
003b3c  286e              CMP      r0,#0x6e              ;5169
003b3e  da00              BGE      |L1.15170|
003b40  75af              STRB     r7,[r5,#0x16]         ;5169
                  |L1.15170|
003b42  7da8              LDRB     r0,[r5,#0x16]         ;5171  ; bAVG
003b44  2801              CMP      r0,#1                 ;5171
003b46  d138              BNE      |L1.15290|
003b48  f04f0100          MOV      r1,#0                 ;5173
003b4c  f06f0731          MVN      r7,#0x31              ;5180
003b50  e031              B        |L1.15286|
                  |L1.15186|
003b52  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5175
003b56  eb001001          ADD      r0,r0,r1,LSL #4       ;5175
003b5a  eb040080          ADD      r0,r4,r0,LSL #2       ;5175
003b5e  7883              LDRB     r3,[r0,#2]            ;5175
003b60  2b01              CMP      r3,#1                 ;5175
003b62  d125              BNE      |L1.15280|
003b64  6a43              LDR      r3,[r0,#0x24]         ;5177
003b66  42b3              CMP      r3,r6                 ;5177
003b68  dd0a              BLE      |L1.15232|
003b6a  f895c018          LDRB     r12,[r5,#0x18]        ;5177  ; avg_vektor
003b6e  f1bc0f00          CMP      r12,#0                ;5177
003b72  d105              BNE      |L1.15232|
003b74  f8b0c054          LDRH     r12,[r0,#0x54]        ;5177
003b78  f1ac0c01          SUB      r12,r12,#1            ;5177
003b7c  f8a0c054          STRH     r12,[r0,#0x54]        ;5177
                  |L1.15232|
003b80  42b3              CMP      r3,r6                 ;5178
003b82  da07              BGE      |L1.15252|
003b84  7e2b              LDRB     r3,[r5,#0x18]         ;5178  ; avg_vektor
003b86  b12b              CBZ      r3,|L1.15252|
003b88  f8b03054          LDRH     r3,[r0,#0x54]         ;5178
003b8c  f1030301          ADD      r3,r3,#1              ;5178
003b90  f8a03054          STRH     r3,[r0,#0x54]         ;5178
                  |L1.15252|
003b94  f9b03054          LDRSH    r3,[r0,#0x54]         ;5180
003b98  42bb              CMP      r3,r7                 ;5180
003b9a  da01              BGE      |L1.15264|
003b9c  f8a07054          STRH     r7,[r0,#0x54]         ;5180
                  |L1.15264|
003ba0  f9b03054          LDRSH    r3,[r0,#0x54]         ;5181
003ba4  2b32              CMP      r3,#0x32              ;5181
003ba6  dd03              BLE      |L1.15280|
003ba8  f04f0332          MOV      r3,#0x32              ;5181
003bac  f8a03054          STRH     r3,[r0,#0x54]         ;5181
                  |L1.15280|
003bb0  f1010101          ADD      r1,r1,#1              ;5173
003bb4  b2c9              UXTB     r1,r1                 ;5173
                  |L1.15286|
003bb6  4291              CMP      r1,r2                 ;5173
003bb8  dbcb              BLT      |L1.15186|
                  |L1.15290|
003bba  bf00              NOP                            ;5189
003bbc  e746              B        |L1.14924|
;;;5191   
                          ENDP

                  rele_hndl PROC
;;;5204   //*************-----------------------------------------------
;;;5205   void rele_hndl(void)
003bbe  e92d5ff0          PUSH     {r4-r12,lr}
;;;5206   {
;;;5207   //static char cnt_rel_sam;
;;;5208   //char temp;
;;;5209   
;;;5210   //temp=0;
;;;5211   
;;;5212   
;;;5213   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003bc2  4881              LDR      r0,|L1.15816|
003bc4  6801              LDR      r1,[r0,#0]
003bc6  4a81              LDR      r2,|L1.15820|
003bc8  ea010102          AND      r1,r1,r2
003bcc  6001              STR      r1,[r0,#0]
;;;5214   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003bce  4c7a              LDR      r4,|L1.15800|
003bd0  6821              LDR      r1,[r4,#0]
003bd2  f441717c          ORR      r1,r1,#0x3f0
003bd6  6021              STR      r1,[r4,#0]
;;;5215   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003bd8  69c1              LDR      r1,[r0,#0x1c]
003bda  f4212140          BIC      r1,r1,#0xc0000
003bde  61c1              STR      r1,[r0,#0x1c]
;;;5216   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003be0  6e21              LDR      r1,[r4,#0x60]
003be2  f0417100          ORR      r1,r1,#0x2000000
003be6  6621              STR      r1,[r4,#0x60]
;;;5217   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003be8  6841              LDR      r1,[r0,#4]
003bea  f0216140          BIC      r1,r1,#0xc000000
003bee  6041              STR      r1,[r0,#4]
;;;5218   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003bf0  6820              LDR      r0,[r4,#0]
003bf2  f0405000          ORR      r0,r0,#0x20000000
003bf6  6020              STR      r0,[r4,#0]
;;;5219   
;;;5220   
;;;5221   
;;;5222   
;;;5223   
;;;5224   
;;;5225   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003bf8  4876              LDR      r0,|L1.15828|
003bfa  4d75              LDR      r5,|L1.15824|
003bfc  4977              LDR      r1,|L1.15836|
003bfe  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003c00  4875              LDR      r0,|L1.15832|
003c02  f8953040          LDRB     r3,[r5,#0x40]  ; bat
003c06  f9b11000          LDRSH    r1,[r1,#0]
003c0a  7800              LDRB     r0,[r0,#0]
003c0c  4313              ORRS     r3,r3,r2
003c0e  d007              BEQ      |L1.15392|
003c10  b130              CBZ      r0,|L1.15392|
003c12  2905              CMP      r1,#5
003c14  dd04              BLE      |L1.15392|
;;;5226   	{
;;;5227   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003c16  69a3              LDR      r3,[r4,#0x18]
003c18  f4437380          ORR      r3,r3,#0x100
003c1c  61a3              STR      r3,[r4,#0x18]
003c1e  e003              B        |L1.15400|
                  |L1.15392|
;;;5228   	}
;;;5229   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003c20  69e3              LDR      r3,[r4,#0x1c]
003c22  f4437380          ORR      r3,r3,#0x100
003c26  61e3              STR      r3,[r4,#0x1c]
                  |L1.15400|
;;;5230   
;;;5231   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003c28  f8953090          LDRB     r3,[r5,#0x90]  ; bat
003c2c  4313              ORRS     r3,r3,r2
003c2e  d007              BEQ      |L1.15424|
003c30  b130              CBZ      r0,|L1.15424|
003c32  2905              CMP      r1,#5
003c34  dd04              BLE      |L1.15424|
;;;5232   	{
;;;5233   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003c36  69a0              LDR      r0,[r4,#0x18]
003c38  f0400040          ORR      r0,r0,#0x40
003c3c  61a0              STR      r0,[r4,#0x18]
003c3e  e003              B        |L1.15432|
                  |L1.15424|
;;;5234   	}
;;;5235   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003c40  69e0              LDR      r0,[r4,#0x1c]
003c42  f0400040          ORR      r0,r0,#0x40
003c46  61e0              STR      r0,[r4,#0x1c]
                  |L1.15432|
;;;5236   
;;;5237   
;;;5238   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003c48  20d2              MOVS     r0,#0xd2
003c4a  f7fffffe          BL       mess_find_unvol
003c4e  4d64              LDR      r5,|L1.15840|
003c50  b110              CBZ      r0,|L1.15448|
003c52  6828              LDR      r0,[r5,#0]  ; mess_data
003c54  2864              CMP      r0,#0x64
003c56  d043              BEQ      |L1.15584|
                  |L1.15448|
;;;5239   	{
;;;5240   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;5241   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;5242   	}
;;;5243   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003c58  69e0              LDR      r0,[r4,#0x1c]
003c5a  f0405000          ORR      r0,r0,#0x20000000
003c5e  61e0              STR      r0,[r4,#0x1c]
                  |L1.15456|
;;;5244   
;;;5245   
;;;5246   #ifndef UKU2071x
;;;5247   //Реле аварии сети
;;;5248   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5249   	{
;;;5250   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5251   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5252   	}
;;;5253   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5254   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5255   #endif
;;;5256   #ifdef UKU2071x
;;;5257   //Реле аварии сети
;;;5258   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c60  20d2              MOVS     r0,#0xd2
003c62  f7fffffe          BL       mess_find_unvol
;;;5259   	{
;;;5260   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;5261   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5262   	}
;;;5263   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003c66  4e5f              LDR      r6,|L1.15844|
003c68  b110              CBZ      r0,|L1.15472|
003c6a  6828              LDR      r0,[r5,#0]            ;5258  ; mess_data
003c6c  2866              CMP      r0,#0x66              ;5258
003c6e  d046              BEQ      |L1.15614|
                  |L1.15472|
003c70  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c72  07c0              LSLS     r0,r0,#31
003c74  d04f              BEQ      |L1.15638|
;;;5264   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c76  6fa0              LDR      r0,[r4,#0x78]
003c78  f0407000          ORR      r0,r0,#0x2000000
003c7c  67a0              STR      r0,[r4,#0x78]
                  |L1.15486|
;;;5265   #endif
;;;5266   
;;;5267   #ifdef UKU_3U
;;;5268   //Реле аварий батарей
;;;5269   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5270   	{
;;;5271   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5272   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5273        }
;;;5274   else 
;;;5275   	{
;;;5276   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5277        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5278   	} 
;;;5279   
;;;5280   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5281   	{
;;;5282   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5283   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5284        }
;;;5285   else 
;;;5286   	{
;;;5287   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5288        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5289   	} 
;;;5290   
;;;5291   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5292   	{
;;;5293   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5294   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5295        }
;;;5296   else 
;;;5297   	{
;;;5298   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5299        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5300   	} 
;;;5301   
;;;5302   #endif
;;;5303   
;;;5304   
;;;5305   #ifdef UKU_GLONASS
;;;5306   //Реле аварий батарей
;;;5307   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5308   	{
;;;5309   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5310   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5311        }
;;;5312   else 
;;;5313   	{
;;;5314   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5315        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5316   	} 
;;;5317   
;;;5318   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5319   	{
;;;5320   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5321   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5322        }
;;;5323   else 
;;;5324   	{
;;;5325   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5326        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5327   	} 
;;;5328   
;;;5329   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5330   	{
;;;5331   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5332   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5333        }
;;;5334   else 
;;;5335   	{
;;;5336   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5337        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5338   	} 
;;;5339   
;;;5340   #endif
;;;5341   
;;;5342   #ifdef U 
;;;5343   
;;;5344   #endif
;;;5345   
;;;5346   #ifdef UKU_RSTKM
;;;5347   
;;;5348   //Реле общей аварии
;;;5349   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5350   	{
;;;5351   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5352   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5353   	}
;;;5354   else 
;;;5355   	{
;;;5356        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5357             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5358             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5359             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5360             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5361        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5362   	}
;;;5363   	
;;;5364   
;;;5365   //Реле освещения
;;;5366   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5367   	{
;;;5368   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5369   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5370        }
;;;5371   else 
;;;5372   	{
;;;5373   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5374        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5375   	}
;;;5376   
;;;5377   
;;;5378   //Реле выключения нагрузки
;;;5379   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5380   	{
;;;5381   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5382   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5383        }
;;;5384   else if(tloaddisable_cmnd==0)
;;;5385   	{
;;;5386   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5387   	}
;;;5388   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5389   	{
;;;5390   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5391   	}
;;;5392   
;;;5393   else 
;;;5394   	{
;;;5395   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5396        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5397   	} 
;;;5398   
;;;5399   //Реле осевого вентилятора
;;;5400   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5401   	{
;;;5402   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5403   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5404   	}
;;;5405   else 
;;;5406   	{
;;;5407   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5408        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5409   	} 
;;;5410   
;;;5411   #endif
;;;5412   
;;;5413   #ifdef UKU_KONTUR
;;;5414   
;;;5415   //Реле общей аварии
;;;5416   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5417   	{
;;;5418   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5419   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5420   	}
;;;5421   else 
;;;5422   	{
;;;5423        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5424             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5425             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5426             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5427             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5428        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5429   	}
;;;5430   
;;;5431   	
;;;5432   //rel_warm_plazma=0;
;;;5433   //Реле освещения   
;;;5434   /*
;;;5435   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5436   	{
;;;5437   	if(mess_data[1]==0)
;;;5438   		{
;;;5439   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5440   		rel_warm_plazma=1;
;;;5441   		}
;;;5442   	else if(mess_data[1]==1) 
;;;5443   		{
;;;5444   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5445   		rel_warm_plazma=2;
;;;5446   		}
;;;5447        }
;;;5448   else 
;;;5449   	{
;;;5450   	if(warm_stat_k==wsOFF) 
;;;5451   		{
;;;5452   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5453   		rel_warm_plazma=3;
;;;5454   		}
;;;5455        else 
;;;5456   		{
;;;5457   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5458   		rel_warm_plazma=4;
;;;5459   		}
;;;5460   	}
;;;5461   */
;;;5462   //Реле освещения
;;;5463   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5464   	{
;;;5465   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5466   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5467        }
;;;5468   else 
;;;5469   	{
;;;5470   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5471        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5472   	}
;;;5473   
;;;5474   
;;;5475   
;;;5476   //Реле выключения нагрузки
;;;5477   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5478   	{
;;;5479   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5480   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5481        }
;;;5482   else if(tloaddisable_cmnd==0)
;;;5483   	{
;;;5484   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5485   	}
;;;5486   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5487   	{
;;;5488   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5489   	}
;;;5490   
;;;5491   else 
;;;5492   	{
;;;5493   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5494        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5495   	} 
;;;5496   
;;;5497   //Реле осевого вентилятора или отопителя
;;;5498   if(RELE_LOG)
;;;5499   	{
;;;5500   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5501   		{
;;;5502   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5503   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5504   		}
;;;5505   	else 
;;;5506   		{
;;;5507   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5508   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5509   		} 
;;;5510   
;;;5511   	}
;;;5512   else 
;;;5513   	{
;;;5514   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5515   		{
;;;5516   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5517   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5518   		}
;;;5519   	else 
;;;5520   		{
;;;5521   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5522   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5523   		} 
;;;5524   	}
;;;5525   #endif
;;;5526   
;;;5527   #ifdef UKU_6U
;;;5528   //Реле аварий батарей
;;;5529   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5530   	{
;;;5531   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5532   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5533        }
;;;5534   else 
;;;5535   	{
;;;5536   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5537        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5538   	} 
;;;5539   
;;;5540   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5541   	{
;;;5542   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5543   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5544       }
;;;5545   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5546   	{
;;;5547   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5548   		{
;;;5549   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5550   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5551        	}
;;;5552   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5553   	}
;;;5554   else 
;;;5555   	{
;;;5556   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5557       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5558   	} 
;;;5559   
;;;5560   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5561   	{
;;;5562   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5563   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5564        }
;;;5565   else 
;;;5566   	{
;;;5567   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5568        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5569   	} 
;;;5570   
;;;5571   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5572   	{
;;;5573   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5574   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5575   	}
;;;5576   else if((NPN_OUT==npnoRELEVENT))
;;;5577   	{
;;;5578   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5579   		{
;;;5580   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5581   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5582       	}
;;;5583   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5584   	}
;;;5585   else 
;;;5586   	{
;;;5587   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5588   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5589   	}
;;;5590   
;;;5591   #endif
;;;5592   
;;;5593   #ifdef UKU_220
;;;5594   //Реле аварий батарей
;;;5595   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5596   	{
;;;5597   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5598   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5599        }
;;;5600   else 
;;;5601   	{
;;;5602   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5603        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5604   	} 
;;;5605   
;;;5606   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5607   	{
;;;5608   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5609   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5610        }
;;;5611   else 
;;;5612   	{
;;;5613   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5614        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5615   	} 
;;;5616   
;;;5617   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5618   	{
;;;5619   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5620   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5621   	}
;;;5622   else 
;;;5623   	{
;;;5624   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5625   		{
;;;5626   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5627   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5628   		}
;;;5629   	else 
;;;5630   		{
;;;5631   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5632        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5633   		}
;;;5634   	}
;;;5635   
;;;5636   #endif
;;;5637   
;;;5638   #ifdef UKU_220_V2
;;;5639   //Реле аварий батарей
;;;5640   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5641   	{
;;;5642   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5643   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5644        }
;;;5645   else 
;;;5646   	{
;;;5647   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5648        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5649   	} 
;;;5650   
;;;5651   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5652   	{
;;;5653   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5654   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5655        }
;;;5656   else 
;;;5657   	{
;;;5658   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5659        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5660   	} 
;;;5661   
;;;5662   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5663   	{
;;;5664   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5665   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5666   	}
;;;5667   else 
;;;5668   	{
;;;5669   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5670   		{
;;;5671   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5672   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5673   		}
;;;5674   	else 
;;;5675   		{
;;;5676   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5677        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5678   		}
;;;5679   	}
;;;5680   
;;;5681   #endif
;;;5682   
;;;5683   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5684   
;;;5685   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003c7e  485a              LDR      r0,|L1.15848|
;;;5686   	{
;;;5687   	#ifndef UKU2071x
;;;5688   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5689   		{
;;;5690   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5691   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5692   		}
;;;5693   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5694   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5695   	#endif
;;;5696   
;;;5697   	#ifdef UKU2071x
;;;5698   		#ifndef APSENERGIA
;;;5699   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5700   			{
;;;5701   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5702   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5703   			}
;;;5704   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5705   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5706   		#endif
;;;5707   
;;;5708   		#ifdef APSENERGIA
;;;5709   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5710   			{
;;;5711   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5712   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5713   			}
;;;5714   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5715   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5716   		#endif
;;;5717   
;;;5718   	#endif
;;;5719   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5720   		{
;;;5721   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5722   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5723   	     }
;;;5724   	else 
;;;5725   		{
;;;5726   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003c80  4f5a              LDR      r7,|L1.15852|
003c82  8800              LDRH     r0,[r0,#0]            ;5685  ; AUSW_MAIN
003c84  f5a041aa          SUB      r1,r0,#0x5500         ;5685
003c88  39fa              SUBS     r1,r1,#0xfa           ;5685
003c8a  d001              BEQ      |L1.15504|
003c8c  1e49              SUBS     r1,r1,#1              ;5685
003c8e  d17b              BNE      |L1.15752|
                  |L1.15504|
003c90  20d2              MOVS     r0,#0xd2              ;5699
003c92  f7fffffe          BL       mess_find_unvol
003c96  b110              CBZ      r0,|L1.15518|
003c98  6828              LDR      r0,[r5,#0]            ;5699  ; mess_data
003c9a  2866              CMP      r0,#0x66              ;5699
003c9c  d040              BEQ      |L1.15648|
                  |L1.15518|
003c9e  6830              LDR      r0,[r6,#0]            ;5704  ; avar_ind_stat
003ca0  07c0              LSLS     r0,r0,#31             ;5704
003ca2  d049              BEQ      |L1.15672|
003ca4  6fa0              LDR      r0,[r4,#0x78]         ;5705
003ca6  f0407000          ORR      r0,r0,#0x2000000      ;5705
003caa  67a0              STR      r0,[r4,#0x78]         ;5705
                  |L1.15532|
003cac  20d2              MOVS     r0,#0xd2              ;5719
003cae  f7fffffe          BL       mess_find_unvol
003cb2  b110              CBZ      r0,|L1.15546|
003cb4  6828              LDR      r0,[r5,#0]            ;5719  ; mess_data
003cb6  286a              CMP      r0,#0x6a              ;5719
003cb8  d043              BEQ      |L1.15682|
                  |L1.15546|
003cba  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003cbc  4238              TST      r0,r7
003cbe  d04e              BEQ      |L1.15710|
;;;5727   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003cc0  69a0              LDR      r0,[r4,#0x18]
003cc2  f0400080          ORR      r0,r0,#0x80
003cc6  61a0              STR      r0,[r4,#0x18]
                  |L1.15560|
;;;5728   		} 
;;;5729   
;;;5730   	//Реле аварий батарей
;;;5731   	#ifndef APSENERGIA
;;;5732   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003cc8  20d2              MOVS     r0,#0xd2
003cca  f7fffffe          BL       mess_find_unvol
003cce  b110              CBZ      r0,|L1.15574|
003cd0  6828              LDR      r0,[r5,#0]  ; mess_data
003cd2  2867              CMP      r0,#0x67
003cd4  d048              BEQ      |L1.15720|
                  |L1.15574|
;;;5733   		{
;;;5734   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5735   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5736        	}
;;;5737   	else 
;;;5738   		{
;;;5739   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5740        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003cd6  69a0              LDR      r0,[r4,#0x18]
003cd8  f0400010          ORR      r0,r0,#0x10
003cdc  61a0              STR      r0,[r4,#0x18]
003cde  e1d2              B        |L1.16518|
                  |L1.15584|
003ce0  6868              LDR      r0,[r5,#4]            ;5240  ; mess_data
003ce2  2801              CMP      r0,#1                 ;5240
003ce4  d006              BEQ      |L1.15604|
003ce6  2800              CMP      r0,#0                 ;5241
003ce8  d1ba              BNE      |L1.15456|
003cea  69e0              LDR      r0,[r4,#0x1c]         ;5241
003cec  f0405000          ORR      r0,r0,#0x20000000     ;5241
003cf0  61e0              STR      r0,[r4,#0x1c]         ;5241
003cf2  e7b5              B        |L1.15456|
                  |L1.15604|
003cf4  69a0              LDR      r0,[r4,#0x18]         ;5240
003cf6  f0405000          ORR      r0,r0,#0x20000000     ;5240
003cfa  61a0              STR      r0,[r4,#0x18]         ;5240
003cfc  e7b0              B        |L1.15456|
                  |L1.15614|
003cfe  6868              LDR      r0,[r5,#4]            ;5260  ; mess_data
003d00  b120              CBZ      r0,|L1.15628|
003d02  6fa0              LDR      r0,[r4,#0x78]         ;5261
003d04  f0407000          ORR      r0,r0,#0x2000000      ;5261
003d08  67a0              STR      r0,[r4,#0x78]         ;5261
003d0a  e7b8              B        |L1.15486|
                  |L1.15628|
003d0c  6fe0              LDR      r0,[r4,#0x7c]         ;5260
003d0e  f0407000          ORR      r0,r0,#0x2000000      ;5260
003d12  67e0              STR      r0,[r4,#0x7c]         ;5260
003d14  e7b3              B        |L1.15486|
                  |L1.15638|
003d16  6fe0              LDR      r0,[r4,#0x7c]         ;5263
003d18  f0407000          ORR      r0,r0,#0x2000000      ;5263
003d1c  67e0              STR      r0,[r4,#0x7c]         ;5263
003d1e  e7ae              B        |L1.15486|
                  |L1.15648|
003d20  6868              LDR      r0,[r5,#4]            ;5701  ; mess_data
003d22  b120              CBZ      r0,|L1.15662|
003d24  6fa0              LDR      r0,[r4,#0x78]         ;5702
003d26  f0407000          ORR      r0,r0,#0x2000000      ;5702
003d2a  67a0              STR      r0,[r4,#0x78]         ;5702
003d2c  e7be              B        |L1.15532|
                  |L1.15662|
003d2e  6fe0              LDR      r0,[r4,#0x7c]         ;5701
003d30  f0407000          ORR      r0,r0,#0x2000000      ;5701
003d34  67e0              STR      r0,[r4,#0x7c]         ;5701
003d36  e7b9              B        |L1.15532|
                  |L1.15672|
003d38  6fe0              LDR      r0,[r4,#0x7c]         ;5704
003d3a  f0407000          ORR      r0,r0,#0x2000000      ;5704
003d3e  67e0              STR      r0,[r4,#0x7c]         ;5704
003d40  e7b4              B        |L1.15532|
                  |L1.15682|
003d42  6868              LDR      r0,[r5,#4]            ;5721  ; mess_data
003d44  b130              CBZ      r0,|L1.15700|
003d46  2801              CMP      r0,#1                 ;5722
003d48  d1be              BNE      |L1.15560|
003d4a  69a0              LDR      r0,[r4,#0x18]         ;5722
003d4c  f0400080          ORR      r0,r0,#0x80           ;5722
003d50  61a0              STR      r0,[r4,#0x18]         ;5722
003d52  e7b9              B        |L1.15560|
                  |L1.15700|
003d54  69e0              LDR      r0,[r4,#0x1c]         ;5721
003d56  f0400080          ORR      r0,r0,#0x80           ;5721
003d5a  61e0              STR      r0,[r4,#0x1c]         ;5721
003d5c  e7b4              B        |L1.15560|
                  |L1.15710|
003d5e  69e0              LDR      r0,[r4,#0x1c]         ;5726
003d60  f0400080          ORR      r0,r0,#0x80           ;5726
003d64  61e0              STR      r0,[r4,#0x1c]         ;5726
003d66  e7af              B        |L1.15560|
                  |L1.15720|
003d68  6868              LDR      r0,[r5,#4]            ;5734  ; mess_data
003d6a  b118              CBZ      r0,|L1.15732|
003d6c  2801              CMP      r0,#1                 ;5735
003d6e  d006              BEQ      |L1.15742|
003d70  e189              B        |L1.16518|
003d72  e009              B        |L1.15752|
                  |L1.15732|
003d74  69e0              LDR      r0,[r4,#0x1c]         ;5734
003d76  f0400010          ORR      r0,r0,#0x10           ;5734
003d7a  61e0              STR      r0,[r4,#0x1c]         ;5734
003d7c  e183              B        |L1.16518|
                  |L1.15742|
003d7e  69a0              LDR      r0,[r4,#0x18]         ;5735
003d80  f0400010          ORR      r0,r0,#0x10           ;5735
003d84  61a0              STR      r0,[r4,#0x18]         ;5735
003d86  e17e              B        |L1.16518|
                  |L1.15752|
;;;5741   		}
;;;5742   	#endif
;;;5743   	#ifdef APSENERGIA
;;;5744   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5745   		{
;;;5746   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5747   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5748        	}
;;;5749   	else 
;;;5750   		{
;;;5751   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5752   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5753   		}
;;;5754   	#endif
;;;5755   	}
;;;5756   
;;;5757   else	if(AUSW_MAIN==22023)
003d88  f5a041ac          SUB      r1,r0,#0x5600
003d8c  3907              SUBS     r1,#7
003d8e  d17a              BNE      |L1.16006|
;;;5758   	{
;;;5759   
;;;5760   	//Реле аварий батарей
;;;5761   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003d90  20d2              MOVS     r0,#0xd2
003d92  f7fffffe          BL       mess_find_unvol
003d96  b110              CBZ      r0,|L1.15774|
003d98  6828              LDR      r0,[r5,#0]  ; mess_data
003d9a  2867              CMP      r0,#0x67
003d9c  d03f              BEQ      |L1.15902|
                  |L1.15774|
;;;5762   		{
;;;5763   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5764   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5765        	}
;;;5766   	else 
;;;5767   		{
;;;5768   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5769        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003d9e  69a0              LDR      r0,[r4,#0x18]
003da0  f0400010          ORR      r0,r0,#0x10
003da4  61a0              STR      r0,[r4,#0x18]
                  |L1.15782|
;;;5770   		} 
;;;5771   
;;;5772   
;;;5773   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5774   	#ifndef UKU2071x
;;;5775   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5776   		{
;;;5777   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5778   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5779   		}
;;;5780   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5781   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5782   	#endif
;;;5783   	#ifdef UKU2071x
;;;5784   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003da6  20d2              MOVS     r0,#0xd2
003da8  f7fffffe          BL       mess_find_unvol
003dac  b308              CBZ      r0,|L1.15858|
003dae  6828              LDR      r0,[r5,#0]  ; mess_data
003db0  2866              CMP      r0,#0x66
003db2  e01d              B        |L1.15856|
                  |L1.15796|
                          DCD      0x40034000
                  |L1.15800|
                          DCD      0x2009c000
                  |L1.15804|
                          DCD      ||area_number.25||
                  |L1.15808|
                          DCD      bps
                  |L1.15812|
                          DCD      NUMIST
                  |L1.15816|
                          DCD      0x4002c000
                  |L1.15820|
                          DCD      0xfff000ff
                  |L1.15824|
                          DCD      bat
                  |L1.15828|
                          DCD      tbatdisable_stat
                  |L1.15832|
                          DCD      tbatdisable_cmnd
                  |L1.15836|
                          DCD      main_1Hz_cnt
                  |L1.15840|
                          DCD      mess_data
                  |L1.15844|
                          DCD      avar_ind_stat
                  |L1.15848|
                          DCD      AUSW_MAIN
                  |L1.15852|
                          DCD      0x100007f8
                  |L1.15856|
003df0  d023              BEQ      |L1.15930|
                  |L1.15858|
;;;5785   		{
;;;5786   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5787   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5788   		}
;;;5789   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003df2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003df4  07c0              LSLS     r0,r0,#31
003df6  d02c              BEQ      |L1.15954|
;;;5790   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003df8  6fa0              LDR      r0,[r4,#0x78]
003dfa  f0407000          ORR      r0,r0,#0x2000000
003dfe  67a0              STR      r0,[r4,#0x78]
                  |L1.15872|
;;;5791   	#endif
;;;5792   
;;;5793   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e00  20d2              MOVS     r0,#0xd2
003e02  f7fffffe          BL       mess_find_unvol
003e06  b110              CBZ      r0,|L1.15886|
003e08  6828              LDR      r0,[r5,#0]  ; mess_data
003e0a  286a              CMP      r0,#0x6a
003e0c  d026              BEQ      |L1.15964|
                  |L1.15886|
;;;5794   		{
;;;5795   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5796   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5797   	     }
;;;5798   	else 
;;;5799   		{
;;;5800   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003e0e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e10  4238              TST      r0,r7
003e12  d033              BEQ      |L1.15996|
;;;5801   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003e14  69a0              LDR      r0,[r4,#0x18]
003e16  f0400080          ORR      r0,r0,#0x80
003e1a  61a0              STR      r0,[r4,#0x18]
003e1c  e133              B        |L1.16518|
                  |L1.15902|
003e1e  6868              LDR      r0,[r5,#4]            ;5763  ; mess_data
003e20  b130              CBZ      r0,|L1.15920|
003e22  2801              CMP      r0,#1                 ;5764
003e24  d1bf              BNE      |L1.15782|
003e26  69a0              LDR      r0,[r4,#0x18]         ;5764
003e28  f0400010          ORR      r0,r0,#0x10           ;5764
003e2c  61a0              STR      r0,[r4,#0x18]         ;5764
003e2e  e7ba              B        |L1.15782|
                  |L1.15920|
003e30  69e0              LDR      r0,[r4,#0x1c]         ;5763
003e32  f0400010          ORR      r0,r0,#0x10           ;5763
003e36  61e0              STR      r0,[r4,#0x1c]         ;5763
003e38  e7b5              B        |L1.15782|
                  |L1.15930|
003e3a  6868              LDR      r0,[r5,#4]            ;5786  ; mess_data
003e3c  b120              CBZ      r0,|L1.15944|
003e3e  69e0              LDR      r0,[r4,#0x1c]         ;5787
003e40  f0407000          ORR      r0,r0,#0x2000000      ;5787
003e44  61e0              STR      r0,[r4,#0x1c]         ;5787
003e46  e7db              B        |L1.15872|
                  |L1.15944|
003e48  69a0              LDR      r0,[r4,#0x18]         ;5786
003e4a  f0407000          ORR      r0,r0,#0x2000000      ;5786
003e4e  61a0              STR      r0,[r4,#0x18]         ;5786
003e50  e7d6              B        |L1.15872|
                  |L1.15954|
003e52  6ba0              LDR      r0,[r4,#0x38]         ;5789
003e54  f0407000          ORR      r0,r0,#0x2000000      ;5789
003e58  63a0              STR      r0,[r4,#0x38]         ;5789
003e5a  e7d1              B        |L1.15872|
                  |L1.15964|
003e5c  6868              LDR      r0,[r5,#4]            ;5795  ; mess_data
003e5e  b110              CBZ      r0,|L1.15974|
003e60  2801              CMP      r0,#1                 ;5796
003e62  d006              BEQ      |L1.15986|
003e64  e10f              B        |L1.16518|
                  |L1.15974|
003e66  69e0              LDR      r0,[r4,#0x1c]         ;5795
003e68  f0400080          ORR      r0,r0,#0x80           ;5795
003e6c  61e0              STR      r0,[r4,#0x1c]         ;5795
003e6e  e10a              B        |L1.16518|
003e70  e009              B        |L1.16006|
                  |L1.15986|
003e72  69a0              LDR      r0,[r4,#0x18]         ;5796
003e74  f0400080          ORR      r0,r0,#0x80           ;5796
003e78  61a0              STR      r0,[r4,#0x18]         ;5796
003e7a  e104              B        |L1.16518|
                  |L1.15996|
003e7c  69e0              LDR      r0,[r4,#0x1c]         ;5800
003e7e  f0400080          ORR      r0,r0,#0x80           ;5800
003e82  61e0              STR      r0,[r4,#0x1c]         ;5800
003e84  e0ff              B        |L1.16518|
                  |L1.16006|
;;;5802   		} 
;;;5803   	}
;;;5804   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003e86  f5a041ac          SUB      r1,r0,#0x5600
003e8a  391b              SUBS     r1,r1,#0x1b
003e8c  d001              BEQ      |L1.16018|
003e8e  1e49              SUBS     r1,r1,#1
003e90  d17c              BNE      |L1.16268|
                  |L1.16018|
;;;5805   	{
;;;5806   	//Реле аварий батарей
;;;5807   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003e92  20d2              MOVS     r0,#0xd2
003e94  f7fffffe          BL       mess_find_unvol
003e98  b110              CBZ      r0,|L1.16032|
003e9a  6828              LDR      r0,[r5,#0]  ; mess_data
003e9c  2867              CMP      r0,#0x67
003e9e  d02e              BEQ      |L1.16126|
                  |L1.16032|
;;;5808   		{
;;;5809   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5810   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5811        	}
;;;5812   	else 
;;;5813   		{
;;;5814   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5815        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ea0  69a0              LDR      r0,[r4,#0x18]
003ea2  f0400010          ORR      r0,r0,#0x10
003ea6  61a0              STR      r0,[r4,#0x18]
                  |L1.16040|
;;;5816   		} 
;;;5817   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5818   	#ifndef UKU2071x 
;;;5819   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5820   		{
;;;5821   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5822   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5823   		}
;;;5824   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5825   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5826   	#endif
;;;5827   	#ifdef UKU2071x 
;;;5828   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ea8  20d2              MOVS     r0,#0xd2
003eaa  f7fffffe          BL       mess_find_unvol
003eae  b110              CBZ      r0,|L1.16054|
003eb0  6828              LDR      r0,[r5,#0]  ; mess_data
003eb2  2866              CMP      r0,#0x66
003eb4  d031              BEQ      |L1.16154|
                  |L1.16054|
;;;5829   		{
;;;5830   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5831   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5832   		}
;;;5833   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003eb6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003eb8  07c0              LSLS     r0,r0,#31
003eba  d03a              BEQ      |L1.16178|
;;;5834   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ebc  6fa0              LDR      r0,[r4,#0x78]
003ebe  f0407000          ORR      r0,r0,#0x2000000
003ec2  67a0              STR      r0,[r4,#0x78]
                  |L1.16068|
;;;5835   	#endif
;;;5836   
;;;5837   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ec4  20d2              MOVS     r0,#0xd2
003ec6  f7fffffe          BL       mess_find_unvol
003eca  b110              CBZ      r0,|L1.16082|
003ecc  6828              LDR      r0,[r5,#0]  ; mess_data
003ece  286a              CMP      r0,#0x6a
003ed0  d034              BEQ      |L1.16188|
                  |L1.16082|
;;;5838   		{
;;;5839   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5840   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5841   	     }
;;;5842   	else 
;;;5843   		{
;;;5844   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003ed2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ed4  4238              TST      r0,r7
003ed6  d03f              BEQ      |L1.16216|
;;;5845   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003ed8  69a0              LDR      r0,[r4,#0x18]
003eda  f0400080          ORR      r0,r0,#0x80
003ede  61a0              STR      r0,[r4,#0x18]
                  |L1.16096|
;;;5846   		}
;;;5847   	//Реле аварии БПС
;;;5848   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ee0  20d2              MOVS     r0,#0xd2
003ee2  f7fffffe          BL       mess_find_unvol
003ee6  b110              CBZ      r0,|L1.16110|
003ee8  6828              LDR      r0,[r5,#0]  ; mess_data
003eea  286a              CMP      r0,#0x6a
003eec  d039              BEQ      |L1.16226|
                  |L1.16110|
;;;5849   		{
;;;5850   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5851   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5852        	}
;;;5853   	else 
;;;5854   		{
;;;5855   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003eee  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ef0  4238              TST      r0,r7
003ef2  d046              BEQ      |L1.16258|
;;;5856        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003ef4  69a0              LDR      r0,[r4,#0x18]
003ef6  f0400020          ORR      r0,r0,#0x20
003efa  61a0              STR      r0,[r4,#0x18]
003efc  e0c3              B        |L1.16518|
                  |L1.16126|
003efe  6868              LDR      r0,[r5,#4]            ;5809  ; mess_data
003f00  b130              CBZ      r0,|L1.16144|
003f02  2801              CMP      r0,#1                 ;5810
003f04  d1d0              BNE      |L1.16040|
003f06  69a0              LDR      r0,[r4,#0x18]         ;5810
003f08  f0400010          ORR      r0,r0,#0x10           ;5810
003f0c  61a0              STR      r0,[r4,#0x18]         ;5810
003f0e  e7cb              B        |L1.16040|
                  |L1.16144|
003f10  69e0              LDR      r0,[r4,#0x1c]         ;5809
003f12  f0400010          ORR      r0,r0,#0x10           ;5809
003f16  61e0              STR      r0,[r4,#0x1c]         ;5809
003f18  e7c6              B        |L1.16040|
                  |L1.16154|
003f1a  6868              LDR      r0,[r5,#4]            ;5830  ; mess_data
003f1c  b120              CBZ      r0,|L1.16168|
003f1e  69e0              LDR      r0,[r4,#0x1c]         ;5831
003f20  f0407000          ORR      r0,r0,#0x2000000      ;5831
003f24  61e0              STR      r0,[r4,#0x1c]         ;5831
003f26  e7cd              B        |L1.16068|
                  |L1.16168|
003f28  69a0              LDR      r0,[r4,#0x18]         ;5830
003f2a  f0407000          ORR      r0,r0,#0x2000000      ;5830
003f2e  61a0              STR      r0,[r4,#0x18]         ;5830
003f30  e7c8              B        |L1.16068|
                  |L1.16178|
003f32  6ba0              LDR      r0,[r4,#0x38]         ;5833
003f34  f0407000          ORR      r0,r0,#0x2000000      ;5833
003f38  63a0              STR      r0,[r4,#0x38]         ;5833
003f3a  e7c3              B        |L1.16068|
                  |L1.16188|
003f3c  6868              LDR      r0,[r5,#4]            ;5839  ; mess_data
003f3e  b130              CBZ      r0,|L1.16206|
003f40  2801              CMP      r0,#1                 ;5840
003f42  d1cd              BNE      |L1.16096|
003f44  69a0              LDR      r0,[r4,#0x18]         ;5840
003f46  f0400080          ORR      r0,r0,#0x80           ;5840
003f4a  61a0              STR      r0,[r4,#0x18]         ;5840
003f4c  e7c8              B        |L1.16096|
                  |L1.16206|
003f4e  69e0              LDR      r0,[r4,#0x1c]         ;5839
003f50  f0400080          ORR      r0,r0,#0x80           ;5839
003f54  61e0              STR      r0,[r4,#0x1c]         ;5839
003f56  e7c3              B        |L1.16096|
                  |L1.16216|
003f58  69e0              LDR      r0,[r4,#0x1c]         ;5844
003f5a  f0400080          ORR      r0,r0,#0x80           ;5844
003f5e  61e0              STR      r0,[r4,#0x1c]         ;5844
003f60  e7be              B        |L1.16096|
                  |L1.16226|
003f62  6868              LDR      r0,[r5,#4]            ;5850  ; mess_data
003f64  b110              CBZ      r0,|L1.16236|
003f66  2801              CMP      r0,#1                 ;5851
003f68  d006              BEQ      |L1.16248|
003f6a  e08c              B        |L1.16518|
                  |L1.16236|
003f6c  69e0              LDR      r0,[r4,#0x1c]         ;5850
003f6e  f0400020          ORR      r0,r0,#0x20           ;5850
003f72  61e0              STR      r0,[r4,#0x1c]         ;5850
003f74  e087              B        |L1.16518|
003f76  e009              B        |L1.16268|
                  |L1.16248|
003f78  69a0              LDR      r0,[r4,#0x18]         ;5851
003f7a  f0400020          ORR      r0,r0,#0x20           ;5851
003f7e  61a0              STR      r0,[r4,#0x18]         ;5851
003f80  e081              B        |L1.16518|
                  |L1.16258|
003f82  69e0              LDR      r0,[r4,#0x1c]         ;5855
003f84  f0400020          ORR      r0,r0,#0x20           ;5855
003f88  61e0              STR      r0,[r4,#0x1c]         ;5855
003f8a  e07c              B        |L1.16518|
                  |L1.16268|
;;;5857   		} 
;;;5858   	}
;;;5859   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003f8c  f5a041ac          SUB      r1,r0,#0x5600
003f90  3911              SUBS     r1,r1,#0x11
003f92  d001              BEQ      |L1.16280|
003f94  310f              ADDS     r1,r1,#0xf
003f96  d15a              BNE      |L1.16462|
                  |L1.16280|
;;;5860   	{
;;;5861   	#ifndef UKU2071x 
;;;5862   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5863   		{
;;;5864   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5865   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5866   		}
;;;5867   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5868   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5869   	#endif
;;;5870   	#ifdef UKU2071x 
;;;5871   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003f98  20d2              MOVS     r0,#0xd2
003f9a  f7fffffe          BL       mess_find_unvol
003f9e  b110              CBZ      r0,|L1.16294|
003fa0  6828              LDR      r0,[r5,#0]  ; mess_data
003fa2  2866              CMP      r0,#0x66
003fa4  d020              BEQ      |L1.16360|
                  |L1.16294|
;;;5872   		{
;;;5873   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5874   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5875   		}
;;;5876   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003fa6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fa8  07c0              LSLS     r0,r0,#31
003faa  d029              BEQ      |L1.16384|
;;;5877   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003fac  6fa0              LDR      r0,[r4,#0x78]
003fae  f0407000          ORR      r0,r0,#0x2000000
003fb2  67a0              STR      r0,[r4,#0x78]
                  |L1.16308|
;;;5878   	#endif
;;;5879   	
;;;5880   	
;;;5881   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003fb4  20d2              MOVS     r0,#0xd2
003fb6  f7fffffe          BL       mess_find_unvol
003fba  b110              CBZ      r0,|L1.16322|
003fbc  6828              LDR      r0,[r5,#0]  ; mess_data
003fbe  286a              CMP      r0,#0x6a
003fc0  d023              BEQ      |L1.16394|
                  |L1.16322|
;;;5882   		{
;;;5883   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5884   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5885   	     }
;;;5886   	else 
;;;5887   		{
;;;5888   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003fc2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fc4  4238              TST      r0,r7
003fc6  d02e              BEQ      |L1.16422|
;;;5889   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003fc8  69a0              LDR      r0,[r4,#0x18]
003fca  f0400080          ORR      r0,r0,#0x80
003fce  61a0              STR      r0,[r4,#0x18]
                  |L1.16336|
;;;5890   		} 
;;;5891   
;;;5892   	//Реле аварий батарей
;;;5893   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003fd0  20d2              MOVS     r0,#0xd2
003fd2  f7fffffe          BL       mess_find_unvol
003fd6  b110              CBZ      r0,|L1.16350|
003fd8  6828              LDR      r0,[r5,#0]  ; mess_data
003fda  2867              CMP      r0,#0x67
003fdc  d028              BEQ      |L1.16432|
                  |L1.16350|
;;;5894   		{
;;;5895   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5896   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5897        	}
;;;5898   	else 
;;;5899   		{
;;;5900   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5901        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003fde  69a0              LDR      r0,[r4,#0x18]
003fe0  f0400010          ORR      r0,r0,#0x10
003fe4  61a0              STR      r0,[r4,#0x18]
003fe6  e04e              B        |L1.16518|
                  |L1.16360|
003fe8  6868              LDR      r0,[r5,#4]            ;5873  ; mess_data
003fea  b120              CBZ      r0,|L1.16374|
003fec  6fa0              LDR      r0,[r4,#0x78]         ;5874
003fee  f0407000          ORR      r0,r0,#0x2000000      ;5874
003ff2  67a0              STR      r0,[r4,#0x78]         ;5874
003ff4  e7de              B        |L1.16308|
                  |L1.16374|
003ff6  6fe0              LDR      r0,[r4,#0x7c]         ;5873
003ff8  f0407000          ORR      r0,r0,#0x2000000      ;5873
003ffc  67e0              STR      r0,[r4,#0x7c]         ;5873
003ffe  e7d9              B        |L1.16308|
                  |L1.16384|
004000  6fe0              LDR      r0,[r4,#0x7c]         ;5876
004002  f0407000          ORR      r0,r0,#0x2000000      ;5876
004006  67e0              STR      r0,[r4,#0x7c]         ;5876
004008  e7d4              B        |L1.16308|
                  |L1.16394|
00400a  6868              LDR      r0,[r5,#4]            ;5883  ; mess_data
00400c  b130              CBZ      r0,|L1.16412|
00400e  2801              CMP      r0,#1                 ;5884
004010  d1de              BNE      |L1.16336|
004012  69a0              LDR      r0,[r4,#0x18]         ;5884
004014  f0400080          ORR      r0,r0,#0x80           ;5884
004018  61a0              STR      r0,[r4,#0x18]         ;5884
00401a  e7d9              B        |L1.16336|
                  |L1.16412|
00401c  69e0              LDR      r0,[r4,#0x1c]         ;5883
00401e  f0400080          ORR      r0,r0,#0x80           ;5883
004022  61e0              STR      r0,[r4,#0x1c]         ;5883
004024  e7d4              B        |L1.16336|
                  |L1.16422|
004026  69e0              LDR      r0,[r4,#0x1c]         ;5888
004028  f0400080          ORR      r0,r0,#0x80           ;5888
00402c  61e0              STR      r0,[r4,#0x1c]         ;5888
00402e  e7cf              B        |L1.16336|
                  |L1.16432|
004030  6868              LDR      r0,[r5,#4]            ;5895  ; mess_data
004032  b110              CBZ      r0,|L1.16442|
004034  2801              CMP      r0,#1                 ;5896
004036  d005              BEQ      |L1.16452|
004038  e025              B        |L1.16518|
                  |L1.16442|
00403a  69e0              LDR      r0,[r4,#0x1c]         ;5895
00403c  f0400010          ORR      r0,r0,#0x10           ;5895
004040  61e0              STR      r0,[r4,#0x1c]         ;5895
004042  e020              B        |L1.16518|
                  |L1.16452|
004044  69a0              LDR      r0,[r4,#0x18]         ;5896
004046  f0400010          ORR      r0,r0,#0x10           ;5896
00404a  61a0              STR      r0,[r4,#0x18]         ;5896
00404c  e01b              B        |L1.16518|
                  |L1.16462|
;;;5902   		} 
;;;5903   	} 	 
;;;5904   else	
;;;5905   	{
;;;5906   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5907   	#ifndef UKU2071x 
;;;5908   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5909   		{
;;;5910   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5911   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5912   		}
;;;5913   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5914   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5915   	#endif
;;;5916   	#ifdef UKU2071x 
;;;5917   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
00404e  20d2              MOVS     r0,#0xd2
004050  f7fffffe          BL       mess_find_unvol
004054  b110              CBZ      r0,|L1.16476|
004056  6828              LDR      r0,[r5,#0]  ; mess_data
004058  2866              CMP      r0,#0x66
00405a  d026              BEQ      |L1.16554|
                  |L1.16476|
;;;5918   		{
;;;5919   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5920   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5921   		}
;;;5922   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
00405c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00405e  07c0              LSLS     r0,r0,#31
004060  d02f              BEQ      |L1.16578|
;;;5923   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
004062  6fa0              LDR      r0,[r4,#0x78]
004064  f0407000          ORR      r0,r0,#0x2000000
004068  67a0              STR      r0,[r4,#0x78]
                  |L1.16490|
;;;5924   	#endif
;;;5925   
;;;5926   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
00406a  20d2              MOVS     r0,#0xd2
00406c  f7fffffe          BL       mess_find_unvol
004070  b110              CBZ      r0,|L1.16504|
004072  6828              LDR      r0,[r5,#0]  ; mess_data
004074  286a              CMP      r0,#0x6a
004076  d029              BEQ      |L1.16588|
                  |L1.16504|
;;;5927   		{
;;;5928   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5929   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5930        	}
;;;5931   	else 
;;;5932   		{
;;;5933   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
004078  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00407a  4238              TST      r0,r7
00407c  d034              BEQ      |L1.16616|
;;;5934        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
00407e  69a0              LDR      r0,[r4,#0x18]
004080  f0400020          ORR      r0,r0,#0x20
004084  61a0              STR      r0,[r4,#0x18]
                  |L1.16518|
;;;5935   		}
;;;5936   	}
;;;5937   //Дополнительное реле УКУ 
;;;5938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
004086  20d2              MOVS     r0,#0xd2
004088  f7fffffe          BL       mess_find_unvol
;;;5939   	{
;;;5940   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5941   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5942   	}
;;;5943   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5944   	{
;;;5945   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
00408c  f8df83f8          LDR      r8,|L1.17544|
004090  4ffe              LDR      r7,|L1.17548|
004092  4eff              LDR      r6,|L1.17552|
004094  b110              CBZ      r0,|L1.16540|
004096  6828              LDR      r0,[r5,#0]            ;5938  ; mess_data
004098  2871              CMP      r0,#0x71              ;5938
00409a  d02a              BEQ      |L1.16626|
                  |L1.16540|
00409c  48fd              LDR      r0,|L1.17556|
00409e  f9b00000          LDRSH    r0,[r0,#0]            ;5943  ; DOP_RELE_FUNC
0040a2  b380              CBZ      r0,|L1.16646|
;;;5946   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5947   	}
;;;5948   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
0040a4  2801              CMP      r0,#1
0040a6  d066              BEQ      |L1.16758|
0040a8  e070              B        |L1.16780|
                  |L1.16554|
0040aa  6868              LDR      r0,[r5,#4]            ;5919  ; mess_data
0040ac  b120              CBZ      r0,|L1.16568|
0040ae  69e0              LDR      r0,[r4,#0x1c]         ;5920
0040b0  f0407000          ORR      r0,r0,#0x2000000      ;5920
0040b4  61e0              STR      r0,[r4,#0x1c]         ;5920
0040b6  e7d8              B        |L1.16490|
                  |L1.16568|
0040b8  69a0              LDR      r0,[r4,#0x18]         ;5919
0040ba  f0407000          ORR      r0,r0,#0x2000000      ;5919
0040be  61a0              STR      r0,[r4,#0x18]         ;5919
0040c0  e7d3              B        |L1.16490|
                  |L1.16578|
0040c2  6ba0              LDR      r0,[r4,#0x38]         ;5922
0040c4  f0407000          ORR      r0,r0,#0x2000000      ;5922
0040c8  63a0              STR      r0,[r4,#0x38]         ;5922
0040ca  e7ce              B        |L1.16490|
                  |L1.16588|
0040cc  6868              LDR      r0,[r5,#4]            ;5928  ; mess_data
0040ce  b130              CBZ      r0,|L1.16606|
0040d0  2801              CMP      r0,#1                 ;5929
0040d2  d1d8              BNE      |L1.16518|
0040d4  69a0              LDR      r0,[r4,#0x18]         ;5929
0040d6  f0400020          ORR      r0,r0,#0x20           ;5929
0040da  61a0              STR      r0,[r4,#0x18]         ;5929
0040dc  e7d3              B        |L1.16518|
                  |L1.16606|
0040de  69e0              LDR      r0,[r4,#0x1c]         ;5928
0040e0  f0400020          ORR      r0,r0,#0x20           ;5928
0040e4  61e0              STR      r0,[r4,#0x1c]         ;5928
0040e6  e7ce              B        |L1.16518|
                  |L1.16616|
0040e8  69e0              LDR      r0,[r4,#0x1c]         ;5933
0040ea  f0400020          ORR      r0,r0,#0x20           ;5933
0040ee  61e0              STR      r0,[r4,#0x1c]         ;5933
0040f0  e7c9              B        |L1.16518|
                  |L1.16626|
0040f2  6868              LDR      r0,[r5,#4]            ;5940  ; mess_data
0040f4  b110              CBZ      r0,|L1.16636|
0040f6  2801              CMP      r0,#1                 ;5941
0040f8  d006              BEQ      |L1.16648|
0040fa  e047              B        |L1.16780|
                  |L1.16636|
0040fc  69e0              LDR      r0,[r4,#0x1c]         ;5940
0040fe  f4407000          ORR      r0,r0,#0x200          ;5940
004102  61e0              STR      r0,[r4,#0x1c]         ;5940
004104  e042              B        |L1.16780|
                  |L1.16646|
004106  e004              B        |L1.16658|
                  |L1.16648|
004108  69a0              LDR      r0,[r4,#0x18]         ;5941
00410a  f4407000          ORR      r0,r0,#0x200          ;5941
00410e  61a0              STR      r0,[r4,#0x18]         ;5941
004110  e03c              B        |L1.16780|
                  |L1.16658|
004112  48e1              LDR      r0,|L1.17560|
004114  49e1              LDR      r1,|L1.17564|
004116  f9b00000          LDRSH    r0,[r0,#0]            ;5945  ; speedChIsOn
00411a  b9d0              CBNZ     r0,|L1.16722|
00411c  f8962020          LDRB     r2,[r6,#0x20]         ;5945  ; spc_stat
004120  2a02              CMP      r2,#2                 ;5945
004122  d016              BEQ      |L1.16722|
004124  780a              LDRB     r2,[r1,#0]            ;5945  ; hv_vz_stat
004126  b9a2              CBNZ     r2,|L1.16722|
004128  783a              LDRB     r2,[r7,#0]            ;5945  ; sp_ch_stat
00412a  b992              CBNZ     r2,|L1.16722|
00412c  7972              LDRB     r2,[r6,#5]            ;5945  ; vz1_stat
00412e  b982              CBNZ     r2,|L1.16722|
004130  79f2              LDRB     r2,[r6,#7]            ;5945  ; vz2_stat
004132  b972              CBNZ     r2,|L1.16722|
004134  f9b82000          LDRSH    r2,[r8,#0]            ;5945  ; load_U
004138  230a              MOVS     r3,#0xa               ;5945
00413a  fb92f2f3          SDIV     r2,r2,r3              ;5945
00413e  4bd8              LDR      r3,|L1.17568|
004140  f9b33000          LDRSH    r3,[r3,#0]            ;5945  ; UVENTOFF
004144  429a              CMP      r2,r3                 ;5945
004146  da04              BGE      |L1.16722|
004148  69e0              LDR      r0,[r4,#0x1c]         ;5945
00414a  f4407000          ORR      r0,r0,#0x200          ;5945
00414e  61e0              STR      r0,[r4,#0x1c]         ;5945
004150  e01c              B        |L1.16780|
                  |L1.16722|
004152  b958              CBNZ     r0,|L1.16748|
004154  f8960020          LDRB     r0,[r6,#0x20]         ;5946  ; spc_stat
004158  2802              CMP      r0,#2                 ;5946
00415a  d007              BEQ      |L1.16748|
00415c  7808              LDRB     r0,[r1,#0]            ;5946  ; hv_vz_stat
00415e  b928              CBNZ     r0,|L1.16748|
004160  7838              LDRB     r0,[r7,#0]            ;5946  ; sp_ch_stat
004162  b918              CBNZ     r0,|L1.16748|
004164  7970              LDRB     r0,[r6,#5]            ;5946  ; vz1_stat
004166  b908              CBNZ     r0,|L1.16748|
004168  79f0              LDRB     r0,[r6,#7]            ;5946  ; vz2_stat
00416a  b178              CBZ      r0,|L1.16780|
                  |L1.16748|
00416c  69a0              LDR      r0,[r4,#0x18]         ;5946
00416e  f4407000          ORR      r0,r0,#0x200          ;5946
004172  61a0              STR      r0,[r4,#0x18]         ;5946
004174  e00a              B        |L1.16780|
                  |L1.16758|
;;;5949   	{
;;;5950   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
004176  20d2              MOVS     r0,#0xd2
004178  f7fffffe          BL       mess_find_unvol
00417c  b110              CBZ      r0,|L1.16772|
00417e  6828              LDR      r0,[r5,#0]  ; mess_data
004180  2872              CMP      r0,#0x72
004182  d017              BEQ      |L1.16820|
                  |L1.16772|
;;;5951   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
004184  69a0              LDR      r0,[r4,#0x18]
004186  f4407000          ORR      r0,r0,#0x200
00418a  61a0              STR      r0,[r4,#0x18]
                  |L1.16780|
;;;5952   	}
;;;5953   
;;;5954   #endif //o_9
;;;5955   
;;;5956   #ifdef UKU_FSO	
;;;5957   #ifndef UKU_FSO_MINI
;;;5958   //Реле аварий батарей
;;;5959   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5960   	{
;;;5961   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5962   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5963        }
;;;5964   else 
;;;5965   	{
;;;5966   	if(!(vent_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5967       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5968   	} 
;;;5969   #endif //!UKU_FSO_MINI
;;;5970   
;;;5971   #ifdef UKU_FSO_MINI
;;;5972   //Реле D1
;;;5973   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D1))
;;;5974   	{
;;;5975   	if(mess_data[1]==0)  		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5976   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5977        }
;;;5978   else 
;;;5979   	{
;;;5980   	if(uku_fso_D1_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5981       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5982   	} 
;;;5983   
;;;5984   //Реле D2
;;;5985   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D2))
;;;5986   	{
;;;5987   	if(mess_data[1]==0) 	 	SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5988   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5989        }
;;;5990   else 
;;;5991   	{
;;;5992   	if(uku_fso_D2_stat) 		SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5993       else 						SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5994   	}
;;;5995   
;;;5996   //Реле D5
;;;5997   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D5))
;;;5998   	{
;;;5999   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;6000   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;6001        }
;;;6002   else 
;;;6003   	{
;;;6004   	if(uku_fso_D5_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;6005       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;6006   	}
;;;6007   
;;;6008   //Реле SYSOK
;;;6009   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_SYSOK))
;;;6010   	{
;;;6011   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;6012   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;6013        }
;;;6014   else 
;;;6015   	{
;;;6016   	if(uku_fso_SYSOK_stat) 	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;6017       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;6018   	}/**/
;;;6019   #endif //UKU_FSO_MINI
;;;6020   #endif //UKU_FSO
;;;6021   
;;;6022   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;6023   //Блок выносной реле
;;;6024   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
00418c  20d2              MOVS     r0,#0xd2
00418e  f7fffffe          BL       mess_find_unvol
;;;6025   	{
;;;6026   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
004192  f8df9310          LDR      r9,|L1.17572|
;;;6027   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;6028   	}
;;;6029   else 
;;;6030   	{
;;;6031   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
004196  4cc4              LDR      r4,|L1.17576|
004198  b110              CBZ      r0,|L1.16800|
00419a  6828              LDR      r0,[r5,#0]            ;6024  ; mess_data
00419c  2875              CMP      r0,#0x75              ;6024
00419e  d00e              BEQ      |L1.16830|
                  |L1.16800|
0041a0  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0041a2  07c0              LSLS     r0,r0,#31
0041a4  d01e              BEQ      |L1.16868|
0041a6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041aa  f0400001          ORR      r0,r0,#1
0041ae  f8890000          STRB     r0,[r9,#0]
0041b2  e01d              B        |L1.16880|
                  |L1.16820|
0041b4  69e0              LDR      r0,[r4,#0x1c]         ;5950
0041b6  f4407000          ORR      r0,r0,#0x200          ;5950
0041ba  61e0              STR      r0,[r4,#0x1c]         ;5950
0041bc  e7e6              B        |L1.16780|
                  |L1.16830|
0041be  6868              LDR      r0,[r5,#4]            ;6026  ; mess_data
0041c0  b110              CBZ      r0,|L1.16840|
0041c2  2801              CMP      r0,#1                 ;6027
0041c4  d007              BEQ      |L1.16854|
0041c6  e013              B        |L1.16880|
                  |L1.16840|
0041c8  f8990000          LDRB     r0,[r9,#0]            ;6026  ; bdr_transmit_stat
0041cc  f00000fe          AND      r0,r0,#0xfe           ;6026
0041d0  f8890000          STRB     r0,[r9,#0]            ;6026
0041d4  e00c              B        |L1.16880|
                  |L1.16854|
0041d6  f8990000          LDRB     r0,[r9,#0]            ;6027  ; bdr_transmit_stat
0041da  f0400001          ORR      r0,r0,#1              ;6027
0041de  f8890000          STRB     r0,[r9,#0]            ;6027
0041e2  e005              B        |L1.16880|
                  |L1.16868|
;;;6032   	else 						bdr_transmit_stat&=0xfe;
0041e4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041e8  f00000fe          AND      r0,r0,#0xfe
0041ec  f8890000          STRB     r0,[r9,#0]
                  |L1.16880|
;;;6033   	}	
;;;6034   
;;;6035   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
0041f0  20d2              MOVS     r0,#0xd2
0041f2  f7fffffe          BL       mess_find_unvol
0041f6  b110              CBZ      r0,|L1.16894|
0041f8  6828              LDR      r0,[r5,#0]  ; mess_data
0041fa  2876              CMP      r0,#0x76
0041fc  d009              BEQ      |L1.16914|
                  |L1.16894|
;;;6036   	{
;;;6037   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;6038   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;6039   	}
;;;6040   else 
;;;6041   	{
;;;6042   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
0041fe  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004200  0780              LSLS     r0,r0,#30
004202  d519              BPL      |L1.16952|
004204  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004208  f0400002          ORR      r0,r0,#2
00420c  f8890000          STRB     r0,[r9,#0]
004210  e018              B        |L1.16964|
                  |L1.16914|
004212  6868              LDR      r0,[r5,#4]            ;6037  ; mess_data
004214  b110              CBZ      r0,|L1.16924|
004216  2801              CMP      r0,#1                 ;6038
004218  d007              BEQ      |L1.16938|
00421a  e013              B        |L1.16964|
                  |L1.16924|
00421c  f8990000          LDRB     r0,[r9,#0]            ;6037  ; bdr_transmit_stat
004220  f00000fd          AND      r0,r0,#0xfd           ;6037
004224  f8890000          STRB     r0,[r9,#0]            ;6037
004228  e00c              B        |L1.16964|
                  |L1.16938|
00422a  f8990000          LDRB     r0,[r9,#0]            ;6038  ; bdr_transmit_stat
00422e  f0400002          ORR      r0,r0,#2              ;6038
004232  f8890000          STRB     r0,[r9,#0]            ;6038
004236  e005              B        |L1.16964|
                  |L1.16952|
;;;6043   	else 						bdr_transmit_stat&=0xfd;
004238  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00423c  f00000fd          AND      r0,r0,#0xfd
004240  f8890000          STRB     r0,[r9,#0]
                  |L1.16964|
;;;6044   	}	
;;;6045   	
;;;6046   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
004244  20d2              MOVS     r0,#0xd2
004246  f7fffffe          BL       mess_find_unvol
00424a  b110              CBZ      r0,|L1.16978|
00424c  6828              LDR      r0,[r5,#0]  ; mess_data
00424e  2877              CMP      r0,#0x77
004250  d009              BEQ      |L1.16998|
                  |L1.16978|
;;;6047   	{
;;;6048   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;6049   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;6050   	}
;;;6051   else 
;;;6052   	{
;;;6053   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
004252  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004254  0740              LSLS     r0,r0,#29
004256  d519              BPL      |L1.17036|
004258  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00425c  f0400004          ORR      r0,r0,#4
004260  f8890000          STRB     r0,[r9,#0]
004264  e018              B        |L1.17048|
                  |L1.16998|
004266  6868              LDR      r0,[r5,#4]            ;6048  ; mess_data
004268  b110              CBZ      r0,|L1.17008|
00426a  2801              CMP      r0,#1                 ;6049
00426c  d007              BEQ      |L1.17022|
00426e  e013              B        |L1.17048|
                  |L1.17008|
004270  f8990000          LDRB     r0,[r9,#0]            ;6048  ; bdr_transmit_stat
004274  f00000fb          AND      r0,r0,#0xfb           ;6048
004278  f8890000          STRB     r0,[r9,#0]            ;6048
00427c  e00c              B        |L1.17048|
                  |L1.17022|
00427e  f8990000          LDRB     r0,[r9,#0]            ;6049  ; bdr_transmit_stat
004282  f0400004          ORR      r0,r0,#4              ;6049
004286  f8890000          STRB     r0,[r9,#0]            ;6049
00428a  e005              B        |L1.17048|
                  |L1.17036|
;;;6054   	else 						bdr_transmit_stat&=0xfb;
00428c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004290  f00000fb          AND      r0,r0,#0xfb
004294  f8890000          STRB     r0,[r9,#0]
                  |L1.17048|
;;;6055   	}	
;;;6056   	
;;;6057   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
004298  20d2              MOVS     r0,#0xd2
00429a  f7fffffe          BL       mess_find_unvol
00429e  b110              CBZ      r0,|L1.17062|
0042a0  6828              LDR      r0,[r5,#0]  ; mess_data
0042a2  2878              CMP      r0,#0x78
0042a4  d009              BEQ      |L1.17082|
                  |L1.17062|
;;;6058   	{
;;;6059   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;6060   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;6061   	}
;;;6062   else 
;;;6063   	{
;;;6064   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
0042a6  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0042a8  0700              LSLS     r0,r0,#28
0042aa  d519              BPL      |L1.17120|
0042ac  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042b0  f0400008          ORR      r0,r0,#8
0042b4  f8890000          STRB     r0,[r9,#0]
0042b8  e018              B        |L1.17132|
                  |L1.17082|
0042ba  6868              LDR      r0,[r5,#4]            ;6059  ; mess_data
0042bc  b110              CBZ      r0,|L1.17092|
0042be  2801              CMP      r0,#1                 ;6060
0042c0  d007              BEQ      |L1.17106|
0042c2  e013              B        |L1.17132|
                  |L1.17092|
0042c4  f8990000          LDRB     r0,[r9,#0]            ;6059  ; bdr_transmit_stat
0042c8  f00000f7          AND      r0,r0,#0xf7           ;6059
0042cc  f8890000          STRB     r0,[r9,#0]            ;6059
0042d0  e00c              B        |L1.17132|
                  |L1.17106|
0042d2  f8990000          LDRB     r0,[r9,#0]            ;6060  ; bdr_transmit_stat
0042d6  f0400008          ORR      r0,r0,#8              ;6060
0042da  f8890000          STRB     r0,[r9,#0]            ;6060
0042de  e005              B        |L1.17132|
                  |L1.17120|
;;;6065   	else 						bdr_transmit_stat&=0xf7;
0042e0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042e4  f00000f7          AND      r0,r0,#0xf7
0042e8  f8890000          STRB     r0,[r9,#0]
                  |L1.17132|
;;;6066   	}	
;;;6067   					 	
;;;6068   #endif
;;;6069   
;;;6070   #ifdef UKU_KONTUR
;;;6071   
;;;6072   //Реле общей аварии
;;;6073   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;6074   	{
;;;6075   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;6076   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;6077   	}
;;;6078   else 
;;;6079   	{
;;;6080        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;6081             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;6082             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;6083             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;6084             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;6085        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;6086   	}
;;;6087   
;;;6088   	
;;;6089   //rel_warm_plazma=0;
;;;6090   //Реле освещения   
;;;6091   /*
;;;6092   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;6093   	{
;;;6094   	if(mess_data[1]==0)
;;;6095   		{
;;;6096   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6097   		rel_warm_plazma=1;
;;;6098   		}
;;;6099   	else if(mess_data[1]==1) 
;;;6100   		{
;;;6101   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6102   		rel_warm_plazma=2;
;;;6103   		}
;;;6104        }
;;;6105   else 
;;;6106   	{
;;;6107   	if(warm_stat_k==wsOFF) 
;;;6108   		{
;;;6109   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6110   		rel_warm_plazma=3;
;;;6111   		}
;;;6112        else 
;;;6113   		{
;;;6114   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6115   		rel_warm_plazma=4;
;;;6116   		}
;;;6117   	}
;;;6118   */
;;;6119   //Реле освещения
;;;6120   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6121   	{
;;;6122   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6123   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6124        }
;;;6125   else 
;;;6126   	{
;;;6127   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6128        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6129   	}
;;;6130   
;;;6131   
;;;6132   
;;;6133   //Реле выключения нагрузки
;;;6134   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6135   	{
;;;6136   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6137   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6138        }
;;;6139   else if(tloaddisable_cmnd==0)
;;;6140   	{
;;;6141   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6142   	}
;;;6143   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6144   	{
;;;6145   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6146   	}
;;;6147   
;;;6148   else 
;;;6149   	{
;;;6150   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6152   	} 
;;;6153   
;;;6154   //Реле осевого вентилятора или отопителя
;;;6155   if(RELE_LOG)
;;;6156   	{
;;;6157   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6158   		{
;;;6159   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6160   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6161   		}
;;;6162   	else 
;;;6163   		{
;;;6164   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6165   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6166   		} 
;;;6167   
;;;6168   	}
;;;6169   else 
;;;6170   	{
;;;6171   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6172   		{
;;;6173   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6174   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6175   		}
;;;6176   	else 
;;;6177   		{
;;;6178   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6179   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6180   		} 
;;;6181   	}
;;;6182   #endif
;;;6183   
;;;6184   
;;;6185   #ifdef UKU_TELECORE2015
;;;6186   //Реле аварии сети
;;;6187   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6188   	{
;;;6189   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6190   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6191   	}
;;;6192   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6193   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6194   
;;;6195   
;;;6196   //Реле освещения
;;;6197   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6198   	{
;;;6199   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6200   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6201        }
;;;6202   else 
;;;6203   	{
;;;6204   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6205        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6206   	}
;;;6207   
;;;6208   //Реле отопителя
;;;6209   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6210   	{
;;;6211   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6212   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6213   	}
;;;6214   else 
;;;6215   	{
;;;6216   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6218   	} 
;;;6219   //Реле вентилятора
;;;6220   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6221   	{
;;;6222   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6223   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6224   	}
;;;6225   else 
;;;6226   	{
;;;6227   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6228        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6229   	} 
;;;6230   
;;;6231   //Реле внутреннего вентилятора
;;;6232   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6233   	{
;;;6234   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6235   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6236   	}
;;;6237   else 
;;;6238   	{
;;;6239   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6240        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6241   	} 
;;;6242   
;;;6243   #endif
;;;6244   
;;;6245   #ifdef UKU_TELECORE2017
;;;6246   //Реле аварии сети
;;;6247   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6248   	{
;;;6249   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6250   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6251   	}
;;;6252   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6253   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6254   
;;;6255   
;;;6256   //Реле освещения
;;;6257   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6258   	{
;;;6259   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6260   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6261        }
;;;6262   else 
;;;6263   	{
;;;6264   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6265        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6266   	}
;;;6267   
;;;6268   //Реле отопителя
;;;6269   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6270   	{
;;;6271   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6272   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6273   	}
;;;6274   else 
;;;6275   	{
;;;6276   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6277        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6278   	} 
;;;6279   //Реле вентилятора
;;;6280   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6281   	{
;;;6282   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6283   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6284   	}
;;;6285   else 
;;;6286   	{
;;;6287   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6288        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6289   	} 
;;;6290   
;;;6291   //Реле внутреннего вентилятора
;;;6292   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6293   	{
;;;6294   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6295   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6296   	}
;;;6297   else 
;;;6298   	{
;;;6299   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6300        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6301   	} 
;;;6302   
;;;6303   //Реле выключения нагрузки
;;;6304   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6305   	{
;;;6306   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6307   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6308        }
;;;6309   else if(tloaddisable_cmnd==0)
;;;6310   	{
;;;6311   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6312   	}
;;;6313   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6314   	{
;;;6315   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6316   	}
;;;6317   
;;;6318   else 
;;;6319   	{
;;;6320   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6321        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6322   	} 
;;;6323   
;;;6324   
;;;6325   #endif
;;;6326   
;;;6327   #ifdef IPS_SGEP_GAZPROM
;;;6328   rele_hndl_plazma[0]++;
;;;6329   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;6330   	{
;;;6331   	rele_hndl_plazma[1]++;
;;;6332   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6333   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6334        }
;;;6335   else 
;;;6336   	{
;;;6337   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6338        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6339   	} 
;;;6340   
;;;6341   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6342   	{
;;;6343   	rele_hndl_plazma[2]++;
;;;6344   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6345   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6346   	}
;;;6347   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6348   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6349   #endif
;;;6350   
;;;6351   if(NUMBDR==1)
0042ec  486f              LDR      r0,|L1.17580|
0042ee  8800              LDRH     r0,[r0,#0]  ; NUMBDR
0042f0  2801              CMP      r0,#1
0042f2  d17e              BNE      |L1.17394|
;;;6352   	{
;;;6353   	char ii_;
;;;6354   	char bdr_avar_stat_temp=0;
0042f4  f04f0000          MOV      r0,#0
;;;6355   	for	(ii_=0;ii_<4;ii_++)
0042f8  4601              MOV      r1,r0
;;;6356   		{
;;;6357   	//o_9_s
;;;6358   	#ifdef UKU_6U
;;;6359   		 //АБ разряжена
;;;6360   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6361   			( (bat[0]._Ub<(USIGN*10) && (BAT_IS_ON[0]==bisON) ) || 
;;;6362   			(bat[1]._Ub<(USIGN*10) && (BAT_IS_ON[1]==bisON) ) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6363   		//Выравнивающий заряд
;;;6364   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6365   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6366   	   	//Общая авария ИБЭП
;;;6367   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6368   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6369   		//Ток АКБ<-0,5А
;;;6370   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6371   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6372   	   	//отключение НПН
;;;6373   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6374   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6375   		//контроль емкости АКБ1
;;;6376   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6377   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6378   		//контроль емкости АКБ2
;;;6379   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6380   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6381   	#else
;;;6382   	//o_9_e		//АБ разряжена
;;;6383   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6384   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6385   		//Ускоренный заряд
;;;6386   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6387   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6388   		//Выравнивающий заряд
;;;6389   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6390   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6391   		//Общая авария ЗВУ
;;;6392   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6393   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6394   		//Uвых завышено
;;;6395   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6396   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
0042fa  f8dfa1b4          LDR      r10,|L1.17584|
;;;6397   		//Uвых занижено
;;;6398   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6399   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6400   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6401   			(
;;;6402   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
0042fe  f8df91b4          LDR      r9,|L1.17588|
004302  4d6d              LDR      r5,|L1.17592|
004304  f8dfb1b4          LDR      r11,|L1.17596|
004308  f04f0301          MOV      r3,#1                 ;5240
                  |L1.17164|
00430c  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6383
004310  ea5f7cc2          LSLS     r12,r2,#31            ;6383
004314  d010              BEQ      |L1.17208|
004316  f8dfc1a8          LDR      r12,|L1.17600|
00431a  f9b8e000          LDRSH    lr,[r8,#0]            ;6384  ; load_U
00431e  f9bcc000          LDRSH    r12,[r12,#0]          ;6384  ; USIGN
004322  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6384
004326  ebbe0f4c          CMP      lr,r12,LSL #1         ;6384
00432a  da05              BGE      |L1.17208|
00432c  fa03fc01          LSL      r12,r3,r1             ;6384
004330  ea4c0c00          ORR      r12,r12,r0            ;6384
004334  f00c00ff          AND      r0,r12,#0xff          ;6384
                  |L1.17208|
004338  ea5f7c82          LSLS     r12,r2,#30            ;6386
00433c  d50a              BPL      |L1.17236|
00433e  f897c000          LDRB     r12,[r7,#0]           ;6387  ; sp_ch_stat
004342  f1bc0f02          CMP      r12,#2                ;6387
004346  d105              BNE      |L1.17236|
004348  fa03fc01          LSL      r12,r3,r1             ;6387
00434c  ea4c0c00          ORR      r12,r12,r0            ;6387
004350  f00c00ff          AND      r0,r12,#0xff          ;6387
                  |L1.17236|
004354  ea5f7c42          LSLS     r12,r2,#29            ;6389
004358  d50a              BPL      |L1.17264|
00435a  f896c020          LDRB     r12,[r6,#0x20]        ;6390  ; spc_stat
00435e  f1bc0f02          CMP      r12,#2                ;6390
004362  d105              BNE      |L1.17264|
004364  fa03fc01          LSL      r12,r3,r1             ;6390
004368  ea4c0c00          ORR      r12,r12,r0            ;6390
00436c  f00c00ff          AND      r0,r12,#0xff          ;6390
                  |L1.17264|
004370  ea5f7c02          LSLS     r12,r2,#28            ;6392
004374  d50c              BPL      |L1.17296|
004376  f8dfc14c          LDR      r12,|L1.17604|
00437a  f8dcc000          LDR      r12,[r12,#0]          ;6393  ; avar_stat
00437e  f1bc0f00          CMP      r12,#0                ;6393
004382  d005              BEQ      |L1.17296|
004384  fa03fc01          LSL      r12,r3,r1             ;6393
004388  ea4c0c00          ORR      r12,r12,r0            ;6393
00438c  f00c00ff          AND      r0,r12,#0xff          ;6393
                  |L1.17296|
004390  ea5f6cc2          LSLS     r12,r2,#27            ;6395
004394  d50a              BPL      |L1.17324|
004396  f89ac000          LDRB     r12,[r10,#0]          ;6396  ; uout_av
00439a  f1bc0f01          CMP      r12,#1                ;6396
00439e  d105              BNE      |L1.17324|
0043a0  fa03fc01          LSL      r12,r3,r1             ;6396
0043a4  ea4c0c00          ORR      r12,r12,r0            ;6396
0043a8  f00c00ff          AND      r0,r12,#0xff          ;6396
                  |L1.17324|
0043ac  ea5f6c82          LSLS     r12,r2,#26            ;6398
0043b0  d50a              BPL      |L1.17352|
0043b2  f89ac000          LDRB     r12,[r10,#0]          ;6399  ; uout_av
0043b6  f1bc0f02          CMP      r12,#2                ;6399
0043ba  d105              BNE      |L1.17352|
0043bc  fa03fc01          LSL      r12,r3,r1             ;6399
0043c0  ea4c0c00          ORR      r12,r12,r0            ;6399
0043c4  f00c00ff          AND      r0,r12,#0xff          ;6399
                  |L1.17352|
0043c8  ea5f6c42          LSLS     r12,r2,#25            ;6400
0043cc  d525              BPL      |L1.17434|
0043ce  f899c001          LDRB     r12,[r9,#1]  ; bps
0043d2  ea5f6ccc          LSLS     r12,r12,#27
0043d6  d504              BPL      |L1.17378|
0043d8  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0043dc  f1bc0f01          CMP      r12,#1
0043e0  da15              BGE      |L1.17422|
                  |L1.17378|
;;;6403   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0043e2  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0043e6  ea5f6ccc          LSLS     r12,r12,#27
0043ea  d506              BPL      |L1.17402|
0043ec  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0043f0  e000              B        |L1.17396|
                  |L1.17394|
0043f2  e047              B        |L1.17540|
                  |L1.17396|
0043f4  f1bc0f02          CMP      r12,#2
0043f8  da09              BGE      |L1.17422|
                  |L1.17402|
;;;6404   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0043fa  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0043fe  ea5f6ccc          LSLS     r12,r12,#27
004402  d50a              BPL      |L1.17434|
004404  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004408  f1bc0f03          CMP      r12,#3
00440c  db05              BLT      |L1.17434|
                  |L1.17422|
;;;6405   			))bdr_avar_stat_temp|=(1<<ii_);
00440e  fa03fc01          LSL      r12,r3,r1
004412  ea4c0c00          ORR      r12,r12,r0
004416  f00c00ff          AND      r0,r12,#0xff
                  |L1.17434|
;;;6406   		if((RELE_SET_MASK[ii_]&0x80)&&
00441a  ea5f6c02          LSLS     r12,r2,#24
00441e  d523              BPL      |L1.17512|
;;;6407   			(
;;;6408   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004420  f899c001          LDRB     r12,[r9,#1]  ; bps
004424  ea5f7c0c          LSLS     r12,r12,#28
004428  d004              BEQ      |L1.17460|
00442a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00442e  f1bc0f01          CMP      r12,#1
004432  da13              BGE      |L1.17500|
                  |L1.17460|
;;;6409   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004434  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004438  ea5f7c0c          LSLS     r12,r12,#28
00443c  d004              BEQ      |L1.17480|
00443e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004442  f1bc0f02          CMP      r12,#2
004446  da09              BGE      |L1.17500|
                  |L1.17480|
;;;6410   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004448  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00444c  ea5f7c0c          LSLS     r12,r12,#28
004450  d00a              BEQ      |L1.17512|
004452  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004456  f1bc0f03          CMP      r12,#3
00445a  db05              BLT      |L1.17512|
                  |L1.17500|
;;;6411   			))bdr_avar_stat_temp|=(1<<ii_);
00445c  fa03fc01          LSL      r12,r3,r1
004460  ea4c0c00          ORR      r12,r12,r0
004464  f00c00ff          AND      r0,r12,#0xff
                  |L1.17512|
;;;6412   	  #endif											 //o_9
;;;6413   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004468  0412              LSLS     r2,r2,#16
00446a  d404              BMI      |L1.17526|
00446c  fa03f201          LSL      r2,r3,r1
004470  ea820200          EOR      r2,r2,r0
004474  b2d0              UXTB     r0,r2
                  |L1.17526|
004476  f1010101          ADD      r1,r1,#1              ;6355
00447a  b2c9              UXTB     r1,r1                 ;6355
00447c  2904              CMP      r1,#4                 ;6355
00447e  f4ffaf45          BCC      |L1.17164|
;;;6414   		}
;;;6415   	bdr_avar_stat=bdr_avar_stat_temp;
004482  7020              STRB     r0,[r4,#0]
                  |L1.17540|
;;;6416   	}
;;;6417   }
004484  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17544|
                          DCD      load_U
                  |L1.17548|
                          DCD      sp_ch_stat
                  |L1.17552|
                          DCD      ||area_number.25||
                  |L1.17556|
                          DCD      DOP_RELE_FUNC
                  |L1.17560|
                          DCD      speedChIsOn
                  |L1.17564|
                          DCD      hv_vz_stat
                  |L1.17568|
                          DCD      UVENTOFF
                  |L1.17572|
                          DCD      bdr_transmit_stat
                  |L1.17576|
                          DCD      bdr_avar_stat
                  |L1.17580|
                          DCD      NUMBDR
                  |L1.17584|
                          DCD      uout_av
                  |L1.17588|
                          DCD      bps
                  |L1.17592|
                          DCD      NUMIST
                  |L1.17596|
                          DCD      RELE_SET_MASK
                  |L1.17600|
                          DCD      USIGN
                  |L1.17604|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6420   //-----------------------------------------------
;;;6421   void bps_hndl(void)
0044c8  e92d5ff0          PUSH     {r4-r12,lr}
;;;6422   {
;;;6423   char ptr__,i;
;;;6424   unsigned short tempUS;
;;;6425   
;;;6426   if(sh_cnt0<10)
0044cc  f8dfb40c          LDR      r11,|L1.18652|
;;;6427   	{
;;;6428   	sh_cnt0++;
;;;6429   	if(sh_cnt0>=10)
;;;6430   		{
;;;6431   		sh_cnt0=0;
0044d0  2600              MOVS     r6,#0
;;;6432   		b1Hz_sh=1;
0044d2  f04f0a01          MOV      r10,#1
0044d6  f89b001e          LDRB     r0,[r11,#0x1e]        ;6426  ; sh_cnt0
0044da  280a              CMP      r0,#0xa               ;6426
0044dc  d20a              BCS      |L1.17652|
0044de  f1000001          ADD      r0,r0,#1              ;6428
0044e2  b2c0              UXTB     r0,r0                 ;6428
0044e4  f88b001e          STRB     r0,[r11,#0x1e]        ;6428
0044e8  280a              CMP      r0,#0xa               ;6429
0044ea  d303              BCC      |L1.17652|
0044ec  f88b601e          STRB     r6,[r11,#0x1e]        ;6431
0044f0  f88ba01f          STRB     r10,[r11,#0x1f]
                  |L1.17652|
;;;6433   		}
;;;6434   	}
;;;6435   
;;;6436   /*if(sh_cnt1<5)
;;;6437   	{
;;;6438   	sh_cnt1++;
;;;6439   	if(sh_cnt1==5)
;;;6440   		{
;;;6441   		sh_cnt1=0;
;;;6442   		b2Hz_sh=1;
;;;6443   		}
;;;6444   	} */
;;;6445   
;;;6446   
;;;6447   /*
;;;6448   if(mess_find(MESS_SRC_ON_OFF))
;;;6449   	{
;;;6450   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6451   		{
;;;6452   		char i;
;;;6453   		for(i=0;i<NUMIST;i++)
;;;6454   			{
;;;6455   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6456   			}
;;;6457   		
;;;6458   		}
;;;6459   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6460   		{
;;;6461   		char i;
;;;6462   		for(i=0;i<NUMIST;i++)
;;;6463   			{
;;;6464   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6465   			}
;;;6466   		
;;;6467   		}
;;;6468   	}
;;;6469   	
;;;6470   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6471   	{				
;;;6472   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6473   		{
;;;6474   		char i;
;;;6475   		for(i=0;i<NUMIST;i++)
;;;6476   			{
;;;6477   			if(mess_data[1]&(1<<i))
;;;6478   				{
;;;6479   				src[i]._ist_blok_cnt=0;
;;;6480   				src[i]._flags_tu=2;
;;;6481   				}
;;;6482   			}
;;;6483   		
;;;6484   		}				
;;;6485   	}*/
;;;6486   
;;;6487   
;;;6488   
;;;6489   /*else*/ 
;;;6490   bps_on_mask=0;
0044f4  4ff9              LDR      r7,|L1.18652|
0044f6  3780              ADDS     r7,r7,#0x80
0044f8  62be              STR      r6,[r7,#0x28]  ; bps_on_mask
;;;6491   bps_off_mask=0;
0044fa  62fe              STR      r6,[r7,#0x2c]  ; bps_off_mask
;;;6492   
;;;6493   if(mess_find_unvol(MESS2BPS_HNDL))
0044fc  20cd              MOVS     r0,#0xcd
0044fe  f7fffffe          BL       mess_find_unvol
;;;6494   	{
;;;6495   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6496   		{
;;;6497   		bps_off_mask=0xffff;
;;;6498   		}
;;;6499   
;;;6500   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6501   		{
;;;6502   		bps_off_mask=mess_data[1];
;;;6503   		}
;;;6504   
;;;6505   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6506   		{
;;;6507   		bps_on_mask=mess_data[1];
;;;6508   		}
;;;6509   
;;;6510   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6511   		{
;;;6512   		bps_on_mask=0xffff;
;;;6513   		}
;;;6514   
;;;6515   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6516   		{
;;;6517   		bps_on_mask=(unsigned)mess_data[1];
;;;6518   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6519   		}
;;;6520   
;;;6521    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6522   		{
;;;6523   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6524   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6525   		}
;;;6526   
;;;6527   	for(i=0;i<=NUMIST;i++)
;;;6528   		{
;;;6529   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004502  f8df83dc          LDR      r8,|L1.18656|
004506  b3b8              CBZ      r0,|L1.17784|
004508  4af6              LDR      r2,|L1.18660|
00450a  f64f71ff          MOV      r1,#0xffff            ;6497
00450e  6810              LDR      r0,[r2,#0]            ;6495  ; mess_data
004510  28ce              CMP      r0,#0xce              ;6495
004512  d100              BNE      |L1.17686|
004514  62f9              STR      r1,[r7,#0x2c]         ;6497  ; bps_off_mask
                  |L1.17686|
004516  28cf              CMP      r0,#0xcf              ;6500
004518  d101              BNE      |L1.17694|
00451a  6853              LDR      r3,[r2,#4]            ;6502  ; mess_data
00451c  62fb              STR      r3,[r7,#0x2c]         ;6502  ; bps_off_mask
                  |L1.17694|
00451e  28d1              CMP      r0,#0xd1              ;6505
004520  d101              BNE      |L1.17702|
004522  6853              LDR      r3,[r2,#4]            ;6507  ; mess_data
004524  62bb              STR      r3,[r7,#0x28]         ;6507  ; bps_on_mask
                  |L1.17702|
004526  28d2              CMP      r0,#0xd2              ;6510
004528  d100              BNE      |L1.17708|
00452a  62b9              STR      r1,[r7,#0x28]         ;6512  ; bps_on_mask
                  |L1.17708|
00452c  28d0              CMP      r0,#0xd0              ;6515
00452e  d104              BNE      |L1.17722|
004530  6851              LDR      r1,[r2,#4]            ;6517  ; mess_data
004532  62b9              STR      r1,[r7,#0x28]         ;6517  ; bps_on_mask
004534  ea6f0101          MVN      r1,r1                 ;6518
004538  62f9              STR      r1,[r7,#0x2c]         ;6518  ; bps_off_mask
                  |L1.17722|
00453a  f5b07f9a          CMP      r0,#0x134             ;6521
00453e  d106              BNE      |L1.17742|
004540  6851              LDR      r1,[r2,#4]            ;6523  ; mess_data
004542  fa0af001          LSL      r0,r10,r1             ;6523
004546  62b8              STR      r0,[r7,#0x28]         ;6523  ; bps_on_mask
004548  ea6f0000          MVN      r0,r0                 ;6524
00454c  62f8              STR      r0,[r7,#0x2c]         ;6524  ; bps_off_mask
                  |L1.17742|
00454e  f04f0400          MOV      r4,#0                 ;6527
004552  e035              B        |L1.17856|
                  |L1.17748|
004554  6af8              LDR      r0,[r7,#0x2c]  ; bps_off_mask
004556  fa0af904          LSL      r9,r10,r4
00455a  ea190f00          TST      r9,r0
00455e  d00c              BEQ      |L1.17786|
004560  eb0400c4          ADD      r0,r4,r4,LSL #3
004564  eb001004          ADD      r0,r0,r4,LSL #4
004568  eb080080          ADD      r0,r8,r0,LSL #2
00456c  f8301f40          LDRH     r1,[r0,#0x40]!
004570  f1010101          ADD      r1,r1,#1
004574  8001              STRH     r1,[r0,#0]
004576  e008              B        |L1.17802|
                  |L1.17784|
004578  e028              B        |L1.17868|
                  |L1.17786|
;;;6530   		else bps[i]._blok_cnt=0;
00457a  eb0400c4          ADD      r0,r4,r4,LSL #3
00457e  eb001004          ADD      r0,r0,r4,LSL #4
004582  eb080080          ADD      r0,r8,r0,LSL #2
004586  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17802|
;;;6531   		gran(&bps[i]._blok_cnt,0,50);
00458a  eb0400c4          ADD      r0,r4,r4,LSL #3
00458e  eb001004          ADD      r0,r0,r4,LSL #4
004592  eb080580          ADD      r5,r8,r0,LSL #2
004596  f1050040          ADD      r0,r5,#0x40
00459a  2232              MOVS     r2,#0x32
00459c  2100              MOVS     r1,#0
00459e  f7fffffe          BL       gran
;;;6532   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0045a2  f9b50040          LDRSH    r0,[r5,#0x40]
0045a6  2814              CMP      r0,#0x14
0045a8  dd01              BLE      |L1.17838|
0045aa  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17838|
;;;6533   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0045ae  6ab8              LDR      r0,[r7,#0x28]  ; bps_on_mask
0045b0  ea190f00          TST      r9,r0
0045b4  d001              BEQ      |L1.17850|
0045b6  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17850|
0045ba  f1040401          ADD      r4,r4,#1              ;6527
0045be  b2e4              UXTB     r4,r4                 ;6527
                  |L1.17856|
0045c0  48c9              LDR      r0,|L1.18664|
0045c2  f9b00000          LDRSH    r0,[r0,#0]            ;6527  ; NUMIST
0045c6  4284              CMP      r4,r0                 ;6527
0045c8  ddc4              BLE      |L1.17748|
0045ca  e08e              B        |L1.18154|
                  |L1.17868|
;;;6534   	     }
;;;6535   
;;;6536   	
;;;6537   /*
;;;6538   
;;;6539   	if(bps_all_off_cnt>20)
;;;6540   		{
;;;6541   		for(i=0;i<=NUMIST;i++)
;;;6542   			{
;;;6543   	     	bps[i]._flags_tu=1;
;;;6544   	     	}
;;;6545   		}
;;;6546   	else if(bps_mask_off_cnt>20)
;;;6547   		{
;;;6548   		for(i=0;i<=NUMIST;i++)
;;;6549   			{
;;;6550   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6551   	     	}
;;;6552   		}	
;;;6553   		
;;;6554   	else if(bps_mask_on_off_cnt>20)
;;;6555   		{
;;;6556   		for(i=0;i<=NUMIST;i++)
;;;6557   			{
;;;6558   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6559   			else bps[i]._flags_tu=0;
;;;6560   	     	}
;;;6561   		}
;;;6562   		
;;;6563   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6564   		{
;;;6565   		for(i=0;i<=NUMIST;i++)
;;;6566   			{
;;;6567   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6568   	     	}
;;;6569   		}
;;;6570   */										
;;;6571   	}
;;;6572   
;;;6573   
;;;6574   else if(b1Hz_sh)
0045cc  f89b001f          LDRB     r0,[r11,#0x1f]  ; b1Hz_sh
0045d0  b3f0              CBZ      r0,|L1.18000|
;;;6575   	{
;;;6576   	ptr__=0;
0045d2  f04f0400          MOV      r4,#0
;;;6577        for(i=0;i<=NUMIST;i++)
0045d6  4621              MOV      r1,r4
0045d8  48c3              LDR      r0,|L1.18664|
0045da  f9b00000          LDRSH    r0,[r0,#0]            ;6527
0045de  e00a              B        |L1.17910|
                  |L1.17888|
;;;6578   		{
;;;6579   	     bps[i]._flags_tu=1;
0045e0  eb0102c1          ADD      r2,r1,r1,LSL #3
0045e4  eb021201          ADD      r2,r2,r1,LSL #4
0045e8  eb080282          ADD      r2,r8,r2,LSL #2
0045ec  f882a02c          STRB     r10,[r2,#0x2c]
0045f0  f1010101          ADD      r1,r1,#1              ;6577
0045f4  b2c9              UXTB     r1,r1                 ;6577
                  |L1.17910|
0045f6  4281              CMP      r1,r0                 ;6577
0045f8  ddf2              BLE      |L1.17888|
;;;6580   	     }	
;;;6581     	     
;;;6582     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0045fa  f04f0100          MOV      r1,#0
0045fe  e023              B        |L1.17992|
                  |L1.17920|
;;;6583     		{
;;;6584   		char ii,iii;
;;;6585   
;;;6586   		ii=(char)NUMIST;
004600  b2c2              UXTB     r2,r0
;;;6587   		//if(ii<0)ii=0;
;;;6588   		if(ii>32)ii=32;
004602  2a20              CMP      r2,#0x20
004604  d901              BLS      |L1.17930|
004606  f04f0220          MOV      r2,#0x20
                  |L1.17930|
;;;6589   		iii=numOfForvardBps;
00460a  f89b3025          LDRB     r3,[r11,#0x25]  ; numOfForvardBps
;;;6590   		//if(iii<0)iii=0;
;;;6591   		if(iii>=NUMIST)iii=0;
00460e  4283              CMP      r3,r0
004610  db01              BLT      |L1.17942|
004612  f04f0300          MOV      r3,#0
                  |L1.17942|
;;;6592   		iii+=i;
004616  440b              ADD      r3,r3,r1
004618  b2db              UXTB     r3,r3
;;;6593   		iii=iii%ii;
00461a  fbb3f5f2          UDIV     r5,r3,r2
00461e  fb023215          MLS      r2,r2,r5,r3
;;;6594   		
;;;6595     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004622  eb0203c2          ADD      r3,r2,r2,LSL #3
004626  eb031202          ADD      r2,r3,r2,LSL #4
00462a  eb080282          ADD      r2,r8,r2,LSL #2
00462e  7893              LDRB     r3,[r2,#2]
004630  2b02              CMP      r3,#2
004632  d001              BEQ      |L1.17976|
004634  2b01              CMP      r3,#1
004636  d104              BNE      |L1.17986|
                  |L1.17976|
;;;6596     	         	{
;;;6597     	         	bps[iii]._flags_tu=0;
004638  f882602c          STRB     r6,[r2,#0x2c]
;;;6598     	         	ptr__++;
00463c  f1040401          ADD      r4,r4,#1
004640  b2e4              UXTB     r4,r4
                  |L1.17986|
004642  f1010101          ADD      r1,r1,#1              ;6582
004646  b2c9              UXTB     r1,r1                 ;6582
                  |L1.17992|
004648  4281              CMP      r1,r0                 ;6582
00464a  da06              BGE      |L1.18010|
00464c  4aa7              LDR      r2,|L1.18668|
00464e  e000              B        |L1.18002|
                  |L1.18000|
004650  e04b              B        |L1.18154|
                  |L1.18002|
004652  f9b22000          LDRSH    r2,[r2,#0]            ;6582  ; num_necc
004656  4294              CMP      r4,r2                 ;6582
004658  dbd2              BLT      |L1.17920|
                  |L1.18010|
;;;6599     	         	}
;;;6600   			
;;;6601     	     }
;;;6602   	bps[numOfForvardBps_old]._flags_tu=0;
00465a  f89b1026          LDRB     r1,[r11,#0x26]  ; numOfForvardBps_old
00465e  eb0102c1          ADD      r2,r1,r1,LSL #3
004662  eb021101          ADD      r1,r2,r1,LSL #4
004666  eb080181          ADD      r1,r8,r1,LSL #2
00466a  f881602c          STRB     r6,[r1,#0x2c]
;;;6603   
;;;6604   	if(main_1Hz_cnt<60)
00466e  49a0              LDR      r1,|L1.18672|
004670  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004674  293c              CMP      r1,#0x3c
004676  da0f              BGE      |L1.18072|
;;;6605   		{
;;;6606        	for(i=0;i<=NUMIST;i++)
004678  f04f0100          MOV      r1,#0
00467c  e00a              B        |L1.18068|
                  |L1.18046|
;;;6607   			{
;;;6608   	     	bps[i]._flags_tu=0;
00467e  eb0102c1          ADD      r2,r1,r1,LSL #3
004682  eb021201          ADD      r2,r2,r1,LSL #4
004686  eb080282          ADD      r2,r8,r2,LSL #2
00468a  f882602c          STRB     r6,[r2,#0x2c]
00468e  f1010101          ADD      r1,r1,#1              ;6606
004692  b2c9              UXTB     r1,r1                 ;6606
                  |L1.18068|
004694  4281              CMP      r1,r0                 ;6606
004696  ddf2              BLE      |L1.18046|
                  |L1.18072|
;;;6609   	     	}	
;;;6610   		}
;;;6611   	if(ipsBlckStat)
004698  4996              LDR      r1,|L1.18676|
00469a  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00469c  b179              CBZ      r1,|L1.18110|
;;;6612   		{
;;;6613        	for(i=0;i<=NUMIST;i++)
00469e  f04f0100          MOV      r1,#0
0046a2  e00a              B        |L1.18106|
                  |L1.18084|
;;;6614   			{
;;;6615   	     	bps[i]._flags_tu=1;
0046a4  eb0102c1          ADD      r2,r1,r1,LSL #3
0046a8  eb021201          ADD      r2,r2,r1,LSL #4
0046ac  eb080282          ADD      r2,r8,r2,LSL #2
0046b0  f882a02c          STRB     r10,[r2,#0x2c]
0046b4  f1010101          ADD      r1,r1,#1              ;6613
0046b8  b2c9              UXTB     r1,r1                 ;6613
                  |L1.18106|
0046ba  4281              CMP      r1,r0                 ;6613
0046bc  ddf2              BLE      |L1.18084|
                  |L1.18110|
;;;6616   	     	}
;;;6617   		}
;;;6618   
;;;6619        for(i=0;i<=NUMIST;i++)
0046be  f04f0100          MOV      r1,#0
;;;6620   		{
;;;6621   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0046c2  f06f0331          MVN      r3,#0x31
0046c6  e00e              B        |L1.18150|
                  |L1.18120|
0046c8  eb0102c1          ADD      r2,r1,r1,LSL #3
0046cc  eb021201          ADD      r2,r2,r1,LSL #4
0046d0  eb080282          ADD      r2,r8,r2,LSL #2
0046d4  f892402c          LDRB     r4,[r2,#0x2c]
0046d8  2c01              CMP      r4,#1
0046da  d101              BNE      |L1.18144|
0046dc  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.18144|
0046e0  f1010101          ADD      r1,r1,#1              ;6619
0046e4  b2c9              UXTB     r1,r1                 ;6619
                  |L1.18150|
0046e6  4281              CMP      r1,r0                 ;6619
0046e8  ddee              BLE      |L1.18120|
                  |L1.18154|
;;;6622   	   	}	
;;;6623   		 
;;;6624     	}
;;;6625   
;;;6626   
;;;6627   for(i=0;i<NUMIST;i++)
0046ea  f04f0000          MOV      r0,#0
0046ee  497e              LDR      r1,|L1.18664|
;;;6628        {
;;;6629        if(bps[i]._ist_blok_host_cnt!=0)
;;;6630             {
;;;6631             bps[i]._flags_tu=99;
0046f0  f04f0463          MOV      r4,#0x63
0046f4  f9b11000          LDRSH    r1,[r1,#0]            ;6527
0046f8  e00f              B        |L1.18202|
                  |L1.18170|
0046fa  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6629
0046fe  eb021200          ADD      r2,r2,r0,LSL #4       ;6629
004702  eb080282          ADD      r2,r8,r2,LSL #2       ;6629
004706  6bd3              LDR      r3,[r2,#0x3c]         ;6629
004708  b123              CBZ      r3,|L1.18196|
00470a  f882402c          STRB     r4,[r2,#0x2c]
;;;6632   	     bps[i]._ist_blok_host_cnt--;
00470e  f1a30301          SUB      r3,r3,#1
004712  63d3              STR      r3,[r2,#0x3c]
                  |L1.18196|
004714  f1000001          ADD      r0,r0,#1              ;6627
004718  b2c0              UXTB     r0,r0                 ;6627
                  |L1.18202|
00471a  4288              CMP      r0,r1                 ;6627
00471c  dbed              BLT      |L1.18170|
;;;6633             }
;;;6634        }
;;;6635   
;;;6636   
;;;6637   
;;;6638   
;;;6639   b1Hz_sh=0;
00471e  f88b601f          STRB     r6,[r11,#0x1f]
;;;6640   
;;;6641   
;;;6642   num_of_wrks_bps=0;
004722  f88b601b          STRB     r6,[r11,#0x1b]
;;;6643   tempUS=0;
004726  f04f0200          MOV      r2,#0
;;;6644   for(i=0;i<NUMIST;i++)
00472a  4610              MOV      r0,r2
00472c  e015              B        |L1.18266|
                  |L1.18222|
;;;6645   	{
;;;6646   	if(bps[i]._state==bsWRK)
00472e  eb0003c0          ADD      r3,r0,r0,LSL #3
004732  eb031300          ADD      r3,r3,r0,LSL #4
004736  eb080383          ADD      r3,r8,r3,LSL #2
00473a  789c              LDRB     r4,[r3,#2]
00473c  2c01              CMP      r4,#1
00473e  d109              BNE      |L1.18260|
;;;6647   		{
;;;6648   		num_of_wrks_bps++;
004740  f89b401b          LDRB     r4,[r11,#0x1b]  ; num_of_wrks_bps
004744  f1040401          ADD      r4,r4,#1
004748  f88b401b          STRB     r4,[r11,#0x1b]
;;;6649   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00474c  69db              LDR      r3,[r3,#0x1c]
00474e  4293              CMP      r3,r2
004750  dd00              BLE      |L1.18260|
004752  b29a              UXTH     r2,r3
                  |L1.18260|
004754  f1000001          ADD      r0,r0,#1              ;6644
004758  b2c0              UXTB     r0,r0                 ;6644
                  |L1.18266|
00475a  4288              CMP      r0,r1                 ;6644
00475c  dbe7              BLT      |L1.18222|
;;;6650   		}
;;;6651   	}
;;;6652   Ubpsmax=tempUS;
00475e  f8ab2052          STRH     r2,[r11,#0x52]
;;;6653   
;;;6654   bPARALLEL_ENOUG=0;
004762  f88b6029          STRB     r6,[r11,#0x29]
;;;6655   bPARALLEL_NOT_ENOUG=1;
004766  f88ba028          STRB     r10,[r11,#0x28]
;;;6656   
;;;6657   for(i=0;i<NUMIST;i++)
00476a  f04f0000          MOV      r0,#0
;;;6658   	{
;;;6659   	if(bps[i]._Ti>=TSIGN)
00476e  4a62              LDR      r2,|L1.18680|
004770  f9b23000          LDRSH    r3,[r2,#0]
;;;6660   		{
;;;6661   		bPARALLEL_ENOUG=1;
;;;6662   		}
;;;6663   	if(bps[i]._Ti>=(TSIGN-5))
004774  f1a30405          SUB      r4,r3,#5
004778  e011              B        |L1.18334|
                  |L1.18298|
00477a  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6659
00477e  eb021200          ADD      r2,r2,r0,LSL #4       ;6659
004782  eb080282          ADD      r2,r8,r2,LSL #2       ;6659
004786  6a92              LDR      r2,[r2,#0x28]         ;6659
004788  429a              CMP      r2,r3                 ;6659
00478a  db01              BLT      |L1.18320|
00478c  f88ba029          STRB     r10,[r11,#0x29]       ;6661
                  |L1.18320|
004790  42a2              CMP      r2,r4
004792  db01              BLT      |L1.18328|
;;;6664   		{
;;;6665   		bPARALLEL_NOT_ENOUG=0;
004794  f88b6028          STRB     r6,[r11,#0x28]
                  |L1.18328|
004798  f1000001          ADD      r0,r0,#1              ;6657
00479c  b2c0              UXTB     r0,r0                 ;6657
                  |L1.18334|
00479e  4288              CMP      r0,r1                 ;6657
0047a0  dbeb              BLT      |L1.18298|
;;;6666   		}
;;;6667   	}
;;;6668   
;;;6669   if(bPARALLEL_ENOUG==1)
0047a2  f89b0029          LDRB     r0,[r11,#0x29]  ; bPARALLEL_ENOUG
0047a6  2801              CMP      r0,#1
0047a8  d00a              BEQ      |L1.18368|
;;;6670   	{
;;;6671   	bPARALLEL=1;
;;;6672   	}
;;;6673   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0047aa  f89b002a          LDRB     r0,[r11,#0x2a]  ; bPARALLEL
0047ae  2800              CMP      r0,#0
0047b0  d005              BEQ      |L1.18366|
0047b2  f89b0028          LDRB     r0,[r11,#0x28]  ; bPARALLEL_NOT_ENOUG
0047b6  2800              CMP      r0,#0
0047b8  d001              BEQ      |L1.18366|
;;;6674   	{
;;;6675   	bPARALLEL=0;
0047ba  f88b602a          STRB     r6,[r11,#0x2a]
                  |L1.18366|
;;;6676   	}
;;;6677   }
0047be  e661              B        |L1.17540|
                  |L1.18368|
0047c0  f88ba02a          STRB     r10,[r11,#0x2a]       ;6671
0047c4  e65e              B        |L1.17540|
;;;6678   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6685   //-----------------------------------------------
;;;6686   void powerAntiAliasingHndl(void)
0047c6  b570              PUSH     {r4-r6,lr}
;;;6687   {
;;;6688   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0047c8  230a              MOVS     r3,#0xa
0047ca  4c4d              LDR      r4,|L1.18688|
0047cc  484b              LDR      r0,|L1.18684|
;;;6689   	{
;;;6690   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6691   	if(powerSummaryCnt>=10)
;;;6692   		{
;;;6693   		power_summary=power_summary_tempo;
;;;6694   		}
;;;6695   	}
;;;6696   else powerSummaryCnt=0;
0047ce  2500              MOVS     r5,#0
0047d0  6822              LDR      r2,[r4,#0]            ;6688  ; power_summary_tempo_old
0047d2  6800              LDR      r0,[r0,#0]            ;6688  ; power_summary_tempo
0047d4  fbb2f6f3          UDIV     r6,r2,r3              ;6688
0047d8  fbb0f1f3          UDIV     r1,r0,r3              ;6688
0047dc  4a49              LDR      r2,|L1.18692|
0047de  42b1              CMP      r1,r6                 ;6688
0047e0  d10b              BNE      |L1.18426|
0047e2  7811              LDRB     r1,[r2,#0]            ;6690  ; powerSummaryCnt
0047e4  290f              CMP      r1,#0xf               ;6690
0047e6  d202              BCS      |L1.18414|
0047e8  f1010101          ADD      r1,r1,#1              ;6690
0047ec  7011              STRB     r1,[r2,#0]            ;6690
                  |L1.18414|
0047ee  7811              LDRB     r1,[r2,#0]            ;6691  ; powerSummaryCnt
0047f0  290a              CMP      r1,#0xa               ;6691
0047f2  d303              BCC      |L1.18428|
0047f4  4944              LDR      r1,|L1.18696|
0047f6  6008              STR      r0,[r1,#0]            ;6693  ; power_summary
0047f8  e000              B        |L1.18428|
                  |L1.18426|
0047fa  7015              STRB     r5,[r2,#0]
                  |L1.18428|
;;;6697   power_summary_tempo_old=power_summary_tempo;
0047fc  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6698   
;;;6699   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0047fe  4843              LDR      r0,|L1.18700|
004800  4c43              LDR      r4,|L1.18704|
004802  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
004806  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
00480a  fbb0f1f3          UDIV     r1,r0,r3
00480e  fbb2f3f3          UDIV     r3,r2,r3
;;;6700   	{
;;;6701   	if(powerCurrentCnt<15)powerCurrentCnt++;
004812  4a40              LDR      r2,|L1.18708|
004814  4299              CMP      r1,r3                 ;6699
004816  d10b              BNE      |L1.18480|
004818  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00481a  290f              CMP      r1,#0xf
00481c  d202              BCS      |L1.18468|
00481e  f1010101          ADD      r1,r1,#1
004822  7011              STRB     r1,[r2,#0]
                  |L1.18468|
;;;6702   	if(powerCurrentCnt>=10)
004824  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004826  290a              CMP      r1,#0xa
004828  d303              BCC      |L1.18482|
;;;6703   		{
;;;6704   		power_current=power_current_tempo;
00482a  493b              LDR      r1,|L1.18712|
00482c  8008              STRH     r0,[r1,#0]
00482e  e000              B        |L1.18482|
                  |L1.18480|
;;;6705   		}
;;;6706   	}
;;;6707   else powerCurrentCnt=0;
004830  7015              STRB     r5,[r2,#0]
                  |L1.18482|
;;;6708   power_current_tempo_old=power_current_tempo;
004832  8020              STRH     r0,[r4,#0]
;;;6709   }
004834  bd70              POP      {r4-r6,pc}
;;;6710   
                          ENDP

                  energometr_hndl PROC
;;;6820   //-----------------------------------------------
;;;6821   void energometr_hndl(void)
004836  4770              BX       lr
;;;6822   {
;;;6823   //2F 3F 21 0D 0A 
;;;6824   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6825   //2F 3F 21 0D 0A 
;;;6826   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6827   //06 30 35 31 0D 0A 
;;;6828   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6829   
;;;6830   #ifdef CE102M_ENABLED
;;;6831   /*if
;;;6832   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6833   
;;;6834   if(read_power_cnt_main_cnt)
;;;6835   	{
;;;6836   	read_power_cnt_main_cnt--;
;;;6837   	if(read_power_cnt_main_cnt==0)
;;;6838   		{
;;;6839   		rx_read_power_cnt_phase=0;
;;;6840   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6841   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6842   		else bENERGOMETR_UIP=0;
;;;6843   		//bENERGOMETR_UIP=2;
;;;6844   		}
;;;6845   	}
;;;6846   
;;;6847   if (rx_read_power_cnt_phase==0)
;;;6848   	{
;;;6849   	char command_with_crc[20];
;;;6850   	
;;;6851      	command_with_crc[0]=0xaf;  // /
;;;6852   	command_with_crc[1]=0x3f;  // ?
;;;6853   	command_with_crc[2]=0x21;  // !
;;;6854   	command_with_crc[3]=0x8d;  // CR
;;;6855   	command_with_crc[4]=0x0a;  // LF
;;;6856   
;;;6857   	uart_out__adr1(command_with_crc,5);
;;;6858   
;;;6859   	rx_wr_index1=0;
;;;6860   	rx_read_power_cnt_phase=1;
;;;6861   
;;;6862   	read_power_cnt_main_cnt=50;
;;;6863   	}
;;;6864   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6865   	{
;;;6866   	char command_with_crc[20];
;;;6867   	
;;;6868   	command_with_crc[0]=0x06;  //  
;;;6869   	command_with_crc[1]=0x30;  // 0
;;;6870   	command_with_crc[2]=0x35;  // 5
;;;6871   	command_with_crc[3]=0xb1;  // 1
;;;6872   	command_with_crc[4]=0x8d;  // CR
;;;6873   	command_with_crc[5]=0x0a;  // LF
;;;6874   	
;;;6875   	uart_out__adr1(command_with_crc,6);
;;;6876   	
;;;6877   	rx_wr_index1=0;
;;;6878   	rx_read_power_cnt_phase=3;
;;;6879   
;;;6880   	read_power_cnt_main_cnt=50;
;;;6881   	}  
;;;6882   
;;;6883   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6884   	{
;;;6885   	char command_with_crc[20];
;;;6886   	
;;;6887   	command_with_crc[0]=0x81;  //  
;;;6888   	command_with_crc[1]=0xd2;  // 0
;;;6889   	command_with_crc[2]=0xb1;  // 5
;;;6890   	command_with_crc[3]=0x82;  // 1
;;;6891   	command_with_crc[4]=0x56;  // CR
;;;6892   	command_with_crc[5]=0xcf;  // LF
;;;6893   	command_with_crc[6]=0xcc;  // 1
;;;6894   	command_with_crc[7]=0xd4;  // CR
;;;6895   	command_with_crc[8]=0x41;  // LF
;;;6896   	command_with_crc[9]=0x28;  // 1
;;;6897   	command_with_crc[10]=0xa9;  // CR
;;;6898   	command_with_crc[11]=0x03;  // LF
;;;6899   	command_with_crc[12]=0x5f;  // LF
;;;6900   		
;;;6901   	uart_out__adr1(command_with_crc,13);
;;;6902   	
;;;6903   	rx_wr_index1=0;
;;;6904   	rx_read_power_cnt_phase=5;
;;;6905   
;;;6906   	read_power_cnt_main_cnt=50;
;;;6907   	}  
;;;6908   
;;;6909   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6910   	{
;;;6911   	char command_with_crc[20];
;;;6912   	
;;;6913   	command_with_crc[0]=0x81;  //  
;;;6914   	command_with_crc[1]=0xd2;  // 0
;;;6915   	command_with_crc[2]=0xb1;  // 5
;;;6916   	command_with_crc[3]=0x82;  // 1
;;;6917   	command_with_crc[4]=0xc3;  // CR
;;;6918   	command_with_crc[5]=0x55;  // LF
;;;6919   	command_with_crc[6]=0xd2;  // 1
;;;6920   	command_with_crc[7]=0xd2;  // CR
;;;6921   	command_with_crc[8]=0xc5;  // LF
;;;6922   	command_with_crc[9]=0x28;  // 1
;;;6923   	command_with_crc[10]=0xa9;  // CR
;;;6924   	command_with_crc[11]=0x03;  // LF
;;;6925   	command_with_crc[12]=0x5a;  // LF
;;;6926   		
;;;6927   	uart_out__adr1(command_with_crc,13);
;;;6928   	
;;;6929   	rx_wr_index1=0;
;;;6930   	rx_read_power_cnt_phase=9;
;;;6931   
;;;6932   	read_power_cnt_main_cnt=50;
;;;6933   	}  
;;;6934   
;;;6935   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6936   	{
;;;6937   	char command_with_crc[20];
;;;6938   	
;;;6939   	command_with_crc[0]=0x81;  //  		01
;;;6940   	command_with_crc[1]=0xd2;  // R		52
;;;6941   	command_with_crc[2]=0xb1;  // 1		31
;;;6942   	command_with_crc[3]=0x82;  // 		02
;;;6943   	command_with_crc[4]=0x50;  // P		50
;;;6944   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6945   	command_with_crc[6]=0xd7;  // W		57
;;;6946   	command_with_crc[7]=0xc5;  // E		45
;;;6947   	command_with_crc[8]=0x50;  // P		50
;;;6948   	command_with_crc[9]=0x28;  // (		28
;;;6949   	command_with_crc[10]=0xa9;  // )	29
;;;6950   	command_with_crc[11]=0x03;  // 		03
;;;6951   	command_with_crc[12]=0xe4;  // d	64
;;;6952   		
;;;6953   	uart_out__adr1(command_with_crc,13);
;;;6954   	
;;;6955   	rx_wr_index1=0;
;;;6956   	rx_read_power_cnt_phase=21;
;;;6957   
;;;6958   	read_power_cnt_main_cnt=50;
;;;6959   	}  
;;;6960   
;;;6961   
;;;6962   #endif
;;;6963   }
;;;6964   
                          ENDP

                  ips_current_average_hndl PROC
;;;6965   //-----------------------------------------------
;;;6966   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004838  e92d4ff0          PUSH     {r4-r11,lr}
;;;6967   {
00483c  b089              SUB      sp,sp,#0x24
;;;6968   
;;;6969   if(++ica_timer_cnt>=10) 
00483e  4e37              LDR      r6,|L1.18716|
;;;6970   	{
;;;6971   	ica_timer_cnt=0;
004840  2400              MOVS     r4,#0
004842  7830              LDRB     r0,[r6,#0]            ;6969  ; ica_timer_cnt
004844  1c40              ADDS     r0,r0,#1              ;6969
004846  b2c0              UXTB     r0,r0                 ;6969
004848  7030              STRB     r0,[r6,#0]            ;6969
00484a  280a              CMP      r0,#0xa               ;6969
00484c  d300              BCC      |L1.18512|
00484e  7034              STRB     r4,[r6,#0]
                  |L1.18512|
;;;6972   	}
;;;6973   
;;;6974   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004850  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004852  4f33              LDR      r7,|L1.18720|
;;;6975   	{
;;;6976   	
;;;6977   	ica_plazma[0]++;
;;;6978   
;;;6979   	ica_my_current=bps_I;
;;;6980   
;;;6981   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004854  f8dfb0cc          LDR      r11,|L1.18724|
004858  4d20              LDR      r5,|L1.18652|
00485a  bbe8              CBNZ     r0,|L1.18648|
00485c  7ee8              LDRB     r0,[r5,#0x1b]         ;6974  ; num_of_wrks_bps
00485e  b3d8              CBZ      r0,|L1.18648|
004860  f8950020          LDRB     r0,[r5,#0x20]         ;6974  ; spc_stat
004864  7969              LDRB     r1,[r5,#5]            ;6974  ; vz1_stat
004866  4308              ORRS     r0,r0,r1              ;6974
004868  79e9              LDRB     r1,[r5,#7]            ;6974  ; vz2_stat
00486a  4308              ORRS     r0,r0,r1              ;6974
00486c  7839              LDRB     r1,[r7,#0]            ;6974  ; sp_ch_stat
00486e  4308              ORRS     r0,r0,r1              ;6974
004870  d17f              BNE      |L1.18802|
004872  f8df90b4          LDR      r9,|L1.18728|
004876  f8990000          LDRB     r0,[r9,#0]            ;6977  ; ica_plazma
00487a  f1000001          ADD      r0,r0,#1              ;6977
00487e  f8890000          STRB     r0,[r9,#0]            ;6977
004882  482a              LDR      r0,|L1.18732|
004884  f9b01000          LDRSH    r1,[r0,#0]            ;6979  ; bps_I
004888  4829              LDR      r0,|L1.18736|
00488a  8001              STRH     r1,[r0,#0]            ;6979
00488c  4829              LDR      r0,|L1.18740|
;;;6982   		{
;;;6983   		ica_plazma[1]++;
;;;6984   		ica_u_necc--;
00488e  f8dfa0a8          LDR      r10,|L1.18744|
004892  f9b02000          LDRSH    r2,[r0,#0]            ;6981  ; ica_your_current
004896  4648              MOV      r0,r9                 ;6977
004898  f9bac000          LDRSH    r12,[r10,#0]
00489c  7843              LDRB     r3,[r0,#1]            ;6983
00489e  4827              LDR      r0,|L1.18748|
0048a0  4291              CMP      r1,r2                 ;6981
0048a2  f9b08000          LDRSH    r8,[r0,#0]            ;6981
0048a6  4658              MOV      r0,r11                ;6981
0048a8  f9b00000          LDRSH    r0,[r0,#0]            ;6981
0048ac  dd48              BLE      |L1.18752|
0048ae  eba10e02          SUB      lr,r1,r2              ;6981
0048b2  f1be0f05          CMP      lr,#5                 ;6981
0048b6  db43              BLT      |L1.18752|
0048b8  2801              CMP      r0,#1                 ;6981
0048ba  d004              BEQ      |L1.18630|
0048bc  2802              CMP      r0,#2                 ;6981
0048be  d13f              BNE      |L1.18752|
0048c0  f1b80f05          CMP      r8,#5                 ;6981
0048c4  dd3c              BLE      |L1.18752|
                  |L1.18630|
0048c6  f1030301          ADD      r3,r3,#1              ;6983
0048ca  f8893001          STRB     r3,[r9,#1]            ;6983
0048ce  f1ac0c01          SUB      r12,r12,#1
0048d2  f8aac000          STRH     r12,[r10,#0]
0048d6  e047              B        |L1.18792|
                  |L1.18648|
0048d8  e04b              B        |L1.18802|
0048da  0000              DCW      0x0000
                  |L1.18652|
                          DCD      ||area_number.25||
                  |L1.18656|
                          DCD      bps
                  |L1.18660|
                          DCD      mess_data
                  |L1.18664|
                          DCD      NUMIST
                  |L1.18668|
                          DCD      num_necc
                  |L1.18672|
                          DCD      main_1Hz_cnt
                  |L1.18676|
                          DCD      ipsBlckStat
                  |L1.18680|
                          DCD      TSIGN
                  |L1.18684|
                          DCD      power_summary_tempo
                  |L1.18688|
                          DCD      power_summary_tempo_old
                  |L1.18692|
                          DCD      powerSummaryCnt
                  |L1.18696|
                          DCD      power_summary
                  |L1.18700|
                          DCD      power_current_tempo
                  |L1.18704|
                          DCD      power_current_tempo_old
                  |L1.18708|
                          DCD      powerCurrentCnt
                  |L1.18712|
                          DCD      power_current
                  |L1.18716|
                          DCD      ica_timer_cnt
                  |L1.18720|
                          DCD      sp_ch_stat
                  |L1.18724|
                          DCD      ICA_EN
                  |L1.18728|
                          DCD      ica_plazma
                  |L1.18732|
                          DCD      bps_I
                  |L1.18736|
                          DCD      ica_my_current
                  |L1.18740|
                          DCD      ica_your_current
                  |L1.18744|
                          DCD      ica_u_necc
                  |L1.18748|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18752|
;;;6985   		}
;;;6986   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004940  4291              CMP      r1,r2
004942  da11              BGE      |L1.18792|
004944  1a51              SUBS     r1,r2,r1
004946  2905              CMP      r1,#5
004948  db0e              BLT      |L1.18792|
00494a  2801              CMP      r0,#1
00494c  d004              BEQ      |L1.18776|
00494e  2802              CMP      r0,#2
004950  d10a              BNE      |L1.18792|
004952  f1b80f05          CMP      r8,#5
004956  dd07              BLE      |L1.18792|
                  |L1.18776|
;;;6987   		{
;;;6988   		ica_plazma[1]--;
004958  f1a30301          SUB      r3,r3,#1
00495c  f8893001          STRB     r3,[r9,#1]
;;;6989   		ica_u_necc++;
004960  f10c0c01          ADD      r12,r12,#1
004964  f8aac000          STRH     r12,[r10,#0]
                  |L1.18792|
;;;6990   		}
;;;6991   	gran(&ica_u_necc,-100,100);
004968  2264              MOVS     r2,#0x64
00496a  4251              RSBS     r1,r2,#0
00496c  48f8              LDR      r0,|L1.19792|
00496e  f7fffffe          BL       gran
                  |L1.18802|
;;;6992   	}
;;;6993   
;;;6994   
;;;6995   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004972  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
004976  2801              CMP      r0,#1
004978  d169              BNE      |L1.19022|
00497a  f8950020          LDRB     r0,[r5,#0x20]  ; spc_stat
00497e  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004980  4308              ORRS     r0,r0,r1
004982  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004984  4308              ORRS     r0,r0,r1
004986  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004988  4308              ORRS     r0,r0,r1
00498a  d160              BNE      |L1.19022|
00498c  7ee8              LDRB     r0,[r5,#0x1b]  ; num_of_wrks_bps
00498e  2800              CMP      r0,#0
004990  d05d              BEQ      |L1.19022|
;;;6996   	{
;;;6997   	
;;;6998   //	ica_connect_cnt++;
;;;6999   
;;;7000   	if(ica_timer_cnt==8)
004992  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;7001   		{
;;;7002   		char modbus_buff[20],i;
;;;7003   		short crc_temp;
;;;7004   	
;;;7005   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004994  4bef              LDR      r3,|L1.19796|
;;;7006   		modbus_buff[1] = 4;
;;;7007   		modbus_buff[2] = 0;
;;;7008   		modbus_buff[3] = 2;
;;;7009   		modbus_buff[4] = 0;	
;;;7010   		modbus_buff[5] = 1;
;;;7011   	
;;;7012   		crc_temp= CRC16_2(modbus_buff,6);
;;;7013   	
;;;7014   		modbus_buff[6]= (char)crc_temp;
;;;7015   		modbus_buff[7]= (char)(crc_temp>>8);
;;;7016   	
;;;7017   		if(ICA_CH==0)
004996  4ff0              LDR      r7,|L1.19800|
004998  2808              CMP      r0,#8                 ;7000
00499a  d05b              BEQ      |L1.19028|
;;;7018   			{
;;;7019   			for (i=0;i<8;i++)
;;;7020   				{
;;;7021   				putchar_sc16is700(modbus_buff[i]);
;;;7022   				}
;;;7023   			}
;;;7024   		else if(ICA_CH==2)
;;;7025   			{
;;;7026   			uart_out1 (5,4,0,2,0,1,0);
;;;7027   			}
;;;7028   		}
;;;7029   	else
;;;7030   		{
;;;7031   		char modbus_buff[20],i;
;;;7032   		short crc_temp, tempSSSS;
;;;7033   
;;;7034   		tempSSSS=cntrl_stat_old;
00499c  f9b56032          LDRSH    r6,[r5,#0x32]  ; cntrl_stat_old
;;;7035   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0049a0  48ee              LDR      r0,|L1.19804|
0049a2  f06f0214          MVN      r2,#0x14
0049a6  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0049aa  ebc01100          RSB      r1,r0,r0,LSL #4
0049ae  eb020c81          ADD      r12,r2,r1,LSL #2
0049b2  f9b52056          LDRSH    r2,[r5,#0x56]  ; main_kb_cnt
0049b6  4594              CMP      r12,r2
0049b8  d00b              BEQ      |L1.18898|
0049ba  f06f0513          MVN      r5,#0x13
0049be  eb050581          ADD      r5,r5,r1,LSL #2
0049c2  4295              CMP      r5,r2
0049c4  d005              BEQ      |L1.18898|
0049c6  f06f0512          MVN      r5,#0x12
0049ca  eb050181          ADD      r1,r5,r1,LSL #2
0049ce  4291              CMP      r1,r2
0049d0  d101              BNE      |L1.18902|
                  |L1.18898|
0049d2  f4404680          ORR      r6,r0,#0x4000
                  |L1.18902|
;;;7036   
;;;7037   
;;;7038   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0049d6  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0049d8  f88d0010          STRB     r0,[sp,#0x10]
;;;7039   		modbus_buff[1] = 6;
0049dc  f04f0006          MOV      r0,#6
0049e0  f88d0011          STRB     r0,[sp,#0x11]
;;;7040   		modbus_buff[2] = 0;
0049e4  f88d4012          STRB     r4,[sp,#0x12]
;;;7041   		modbus_buff[3] = 100;
0049e8  f04f0064          MOV      r0,#0x64
0049ec  f88d0013          STRB     r0,[sp,#0x13]
;;;7042   		modbus_buff[4] = (char)(tempSSSS/256);	
0049f0  ea4f70e6          ASR      r0,r6,#31
0049f4  eb066010          ADD      r0,r6,r0,LSR #24
0049f8  ea4f2120          ASR      r1,r0,#8
0049fc  f88d1014          STRB     r1,[sp,#0x14]
;;;7043   		modbus_buff[5] = (char)(tempSSSS%256);
004a00  4630              MOV      r0,r6
004a02  f88d0015          STRB     r0,[sp,#0x15]
;;;7044   	
;;;7045   		crc_temp= CRC16_2(modbus_buff,6);
004a06  f04f0106          MOV      r1,#6
004a0a  a804              ADD      r0,sp,#0x10
004a0c  f7fffffe          BL       CRC16_2
;;;7046   	
;;;7047   		modbus_buff[6]= (char)crc_temp;
004a10  f88d0016          STRB     r0,[sp,#0x16]
;;;7048   		modbus_buff[7]= (char)(crc_temp>>8);
004a14  ea4f2020          ASR      r0,r0,#8
004a18  f88d0017          STRB     r0,[sp,#0x17]
;;;7049   	
;;;7050   		crc_temp= CRC16_2(modbus_buff,6);
004a1c  f04f0106          MOV      r1,#6
004a20  a804              ADD      r0,sp,#0x10
004a22  f7fffffe          BL       CRC16_2
;;;7051   	
;;;7052   		plazma_ica1=tempSSSS;
004a26  48ce              LDR      r0,|L1.19808|
004a28  8046              STRH     r6,[r0,#2]
;;;7053   		if(ICA_CH==0)
004a2a  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004a2e  b3f0              CBZ      r0,|L1.19118|
;;;7054   			{
;;;7055   			for (i=0;i<8;i++)
;;;7056   				{
;;;7057   				putchar_sc16is700(modbus_buff[i]);
;;;7058   				}
;;;7059   			}
;;;7060   		else if(ICA_CH==2)
004a30  2802              CMP      r0,#2
004a32  d10c              BNE      |L1.19022|
;;;7061   			{
;;;7062   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004a34  f89d0015          LDRB     r0,[sp,#0x15]
004a38  f89d1014          LDRB     r1,[sp,#0x14]
004a3c  e9cd0401          STRD     r0,r4,[sp,#4]
004a40  9100              STR      r1,[sp,#0]
004a42  2364              MOVS     r3,#0x64
004a44  2200              MOVS     r2,#0
004a46  2106              MOVS     r1,#6
004a48  2005              MOVS     r0,#5
004a4a  f7fffffe          BL       uart_out1
                  |L1.19022|
;;;7063   			}
;;;7064   		}
;;;7065   	}
;;;7066   }
004a4e  b009              ADD      sp,sp,#0x24
004a50  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.19028|
004a54  8818              LDRH     r0,[r3,#0]            ;7005  ; ICA_MODBUS_ADDRESS
004a56  f88d0010          STRB     r0,[sp,#0x10]         ;7005
004a5a  f04f0004          MOV      r0,#4                 ;7006
004a5e  f88d0011          STRB     r0,[sp,#0x11]         ;7006
004a62  f88d4012          STRB     r4,[sp,#0x12]         ;7007
004a66  f04f0002          MOV      r0,#2                 ;7008
004a6a  f88d0013          STRB     r0,[sp,#0x13]         ;7008
004a6e  f88d4014          STRB     r4,[sp,#0x14]         ;7009
004a72  f04f0501          MOV      r5,#1                 ;7010
004a76  f88d5015          STRB     r5,[sp,#0x15]         ;7010
004a7a  f04f0106          MOV      r1,#6                 ;7012
004a7e  a804              ADD      r0,sp,#0x10           ;7012
004a80  f7fffffe          BL       CRC16_2
004a84  f88d0016          STRB     r0,[sp,#0x16]         ;7014
004a88  ea4f2020          ASR      r0,r0,#8              ;7015
004a8c  f88d0017          STRB     r0,[sp,#0x17]         ;7015
004a90  f9b70000          LDRSH    r0,[r7,#0]            ;7017  ; ICA_CH
004a94  b160              CBZ      r0,|L1.19120|
004a96  2802              CMP      r0,#2                 ;7024
004a98  d1d9              BNE      |L1.19022|
004a9a  e9cd4500          STRD     r4,r5,[sp,#0]         ;7026
004a9e  2302              MOVS     r3,#2                 ;7026
004aa0  2200              MOVS     r2,#0                 ;7026
004aa2  2104              MOVS     r1,#4                 ;7026
004aa4  2005              MOVS     r0,#5                 ;7026
004aa6  9402              STR      r4,[sp,#8]            ;7026
004aa8  f7fffffe          BL       uart_out1
004aac  e7cf              B        |L1.19022|
                  |L1.19118|
004aae  e00b              B        |L1.19144|
                  |L1.19120|
004ab0  f04f0400          MOV      r4,#0                 ;7019
004ab4  ad04              ADD      r5,sp,#0x10           ;7002
                  |L1.19126|
004ab6  5d28              LDRB     r0,[r5,r4]            ;7021
004ab8  f7fffffe          BL       putchar_sc16is700
004abc  f1040401          ADD      r4,r4,#1              ;7019
004ac0  b2e4              UXTB     r4,r4                 ;7019
004ac2  2c08              CMP      r4,#8                 ;7019
004ac4  d3f7              BCC      |L1.19126|
004ac6  e7c2              B        |L1.19022|
                  |L1.19144|
004ac8  f04f0400          MOV      r4,#0                 ;7055
004acc  ad04              ADD      r5,sp,#0x10           ;7031
                  |L1.19150|
004ace  5d28              LDRB     r0,[r5,r4]            ;7057
004ad0  f7fffffe          BL       putchar_sc16is700
004ad4  f1040401          ADD      r4,r4,#1              ;7055
004ad8  b2e4              UXTB     r4,r4                 ;7055
004ada  2c08              CMP      r4,#8                 ;7055
004adc  d3f7              BCC      |L1.19150|
004ade  e7b6              B        |L1.19022|
;;;7067   
                          ENDP

                  ipsBlckHndl PROC
;;;7150   //-----------------------------------------------
;;;7151   void ipsBlckHndl(char in)
004ae0  b510              PUSH     {r4,lr}
;;;7152   {
;;;7153   
;;;7154   ipsBlckStat=0;
004ae2  4ba0              LDR      r3,|L1.19812|
004ae4  f04f0000          MOV      r0,#0
004ae8  8018              STRH     r0,[r3,#0]
;;;7155   if(ipsBlckSrc==1)
004aea  489f              LDR      r0,|L1.19816|
004aec  f04f0401          MOV      r4,#1
;;;7156   	{
;;;7157   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004af0  f44f62fa          MOV      r2,#0x7d0
004af4  f9b01000          LDRSH    r1,[r0,#0]            ;7155  ; ipsBlckSrc
004af8  489c              LDR      r0,|L1.19820|
004afa  2901              CMP      r1,#1                 ;7155
004afc  f9b00000          LDRSH    r0,[r0,#0]
004b00  d006              BEQ      |L1.19216|
;;;7158   	}
;;;7159   else if(ipsBlckSrc==2)
004b02  2902              CMP      r1,#2
004b04  d10f              BNE      |L1.19238|
004b06  499a              LDR      r1,|L1.19824|
;;;7160   	{
;;;7161   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
004b08  f9b1101a          LDRSH    r1,[r1,#0x1a]
004b0c  b160              CBZ      r0,|L1.19240|
004b0e  e00d              B        |L1.19244|
                  |L1.19216|
004b10  4997              LDR      r1,|L1.19824|
004b12  f9b11016          LDRSH    r1,[r1,#0x16]         ;7157
004b16  b908              CBNZ     r0,|L1.19228|
004b18  4291              CMP      r1,r2                 ;7157
004b1a  dc03              BGT      |L1.19236|
                  |L1.19228|
004b1c  2801              CMP      r0,#1                 ;7157
004b1e  d102              BNE      |L1.19238|
004b20  4291              CMP      r1,r2                 ;7157
004b22  da00              BGE      |L1.19238|
                  |L1.19236|
004b24  801c              STRH     r4,[r3,#0]            ;7157
                  |L1.19238|
;;;7162   	}
;;;7163   }
004b26  bd10              POP      {r4,pc}
                  |L1.19240|
004b28  4291              CMP      r1,r2                 ;7161
004b2a  dc03              BGT      |L1.19252|
                  |L1.19244|
004b2c  2801              CMP      r0,#1                 ;7161
004b2e  d1fa              BNE      |L1.19238|
004b30  4291              CMP      r1,r2                 ;7161
004b32  daf8              BGE      |L1.19238|
                  |L1.19252|
004b34  801c              STRH     r4,[r3,#0]            ;7161
004b36  bd10              POP      {r4,pc}
;;;7164   
                          ENDP

                  bps_drv PROC
;;;7165   //-----------------------------------------------
;;;7166   void bps_drv(char in)
004b38  e92d41f0          PUSH     {r4-r8,lr}
;;;7167   {
004b3c  4606              MOV      r6,r0
;;;7168   char temp;
;;;7169   
;;;7170   if (bps[in]._device!=dSRC) return;
004b3e  eb0600c6          ADD      r0,r6,r6,LSL #3
004b42  498c              LDR      r1,|L1.19828|
004b44  eb001006          ADD      r0,r0,r6,LSL #4
004b48  f8112020          LDRB     r2,[r1,r0,LSL #2]
004b4c  2a03              CMP      r2,#3
004b4e  d17d              BNE      |L1.19532|
;;;7171   temp=bps[in]._flags_tm;
004b50  eb010480          ADD      r4,r1,r0,LSL #2
004b54  f8945042          LDRB     r5,[r4,#0x42]
;;;7172   if(temp&(1<<AV_T))
004b58  07a8              LSLS     r0,r5,#30
004b5a  d517              BPL      |L1.19340|
;;;7173   	{
;;;7174   	if(bps[in]._temp_av_cnt<1200) 
004b5c  f9b41046          LDRSH    r1,[r4,#0x46]
004b60  f44f6296          MOV      r2,#0x4b0
004b64  4291              CMP      r1,r2
004b66  da22              BGE      |L1.19374|
;;;7175   		{
;;;7176   		bps[in]._temp_av_cnt++;
004b68  f1010101          ADD      r1,r1,#1
004b6c  b208              SXTH     r0,r1
004b6e  f8a40046          STRH     r0,[r4,#0x46]
;;;7177   		if(bps[in]._temp_av_cnt>=1200)
004b72  4290              CMP      r0,r2
004b74  db1b              BLT      |L1.19374|
;;;7178   			{
;;;7179   			bps[in]._temp_av_cnt=1200;
004b76  f8a42046          STRH     r2,[r4,#0x46]
;;;7180   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004b7a  7860              LDRB     r0,[r4,#1]
004b7c  07c0              LSLS     r0,r0,#31
004b7e  d116              BNE      |L1.19374|
004b80  2201              MOVS     r2,#1
004b82  2100              MOVS     r1,#0
004b84  4630              MOV      r0,r6
004b86  f7fffffe          BL       avar_bps_hndl
004b8a  e010              B        |L1.19374|
                  |L1.19340|
;;;7181   			}
;;;7182   		}
;;;7183   	}
;;;7184   
;;;7185   else if(!(temp&(1<<AV_T)))
;;;7186   	{
;;;7187   	if(bps[in]._temp_av_cnt) 
004b8c  f9b41046          LDRSH    r1,[r4,#0x46]
004b90  b169              CBZ      r1,|L1.19374|
;;;7188   		{
;;;7189   		bps[in]._temp_av_cnt--;
004b92  f1a10101          SUB      r1,r1,#1
004b96  b208              SXTH     r0,r1
004b98  f8a40046          STRH     r0,[r4,#0x46]
;;;7190   		if(!bps[in]._temp_av_cnt)
004b9c  b938              CBNZ     r0,|L1.19374|
;;;7191   			{
;;;7192   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004b9e  7860              LDRB     r0,[r4,#1]
004ba0  07c0              LSLS     r0,r0,#31
004ba2  d004              BEQ      |L1.19374|
004ba4  2200              MOVS     r2,#0
004ba6  4611              MOV      r1,r2
004ba8  4630              MOV      r0,r6
004baa  f7fffffe          BL       avar_bps_hndl
                  |L1.19374|
;;;7193   			}
;;;7194   		} 	
;;;7195   
;;;7196   	}
;;;7197   
;;;7198   if((temp&(1<<AVUMAX)))
004bae  0728              LSLS     r0,r5,#28
;;;7199   	{
;;;7200   	if(bps[in]._umax_av_cnt<10) 
;;;7201   		{
;;;7202   		bps[in]._umax_av_cnt++;
;;;7203   		if(bps[in]._umax_av_cnt>=10)
;;;7204   			{ 
;;;7205   			bps[in]._umax_av_cnt=10;
004bb0  f04f080a          MOV      r8,#0xa
004bb4  f04f0700          MOV      r7,#0                 ;7180
004bb8  d518              BPL      |L1.19436|
004bba  f9b41048          LDRSH    r1,[r4,#0x48]         ;7200
004bbe  290a              CMP      r1,#0xa               ;7200
004bc0  da29              BGE      |L1.19478|
004bc2  f1010101          ADD      r1,r1,#1              ;7202
004bc6  b208              SXTH     r0,r1                 ;7202
004bc8  f8a40048          STRH     r0,[r4,#0x48]         ;7202
004bcc  280a              CMP      r0,#0xa               ;7203
004bce  db22              BLT      |L1.19478|
004bd0  f8a48048          STRH     r8,[r4,#0x48]
;;;7206   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004bd4  7860              LDRB     r0,[r4,#1]
004bd6  0780              LSLS     r0,r0,#30
004bd8  d404              BMI      |L1.19428|
004bda  2201              MOVS     r2,#1
004bdc  4611              MOV      r1,r2
004bde  4630              MOV      r0,r6
004be0  f7fffffe          BL       avar_bps_hndl
                  |L1.19428|
;;;7207   			apv_start(in);
004be4  4630              MOV      r0,r6
004be6  f7fffffe          BL       apv_start
004bea  e014              B        |L1.19478|
                  |L1.19436|
;;;7208   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;7209   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7210   				{
;;;7211   				apv_cnt[in,0]=APV_INIT;
;;;7212   				apv_cnt[in,1]=APV_INIT;
;;;7213   				apv_cnt[in,2]=APV_INIT;
;;;7214   				apv_flags[in]=afOFF;
;;;7215   				}				*/
;;;7216   						
;;;7217   			}
;;;7218   		} 
;;;7219   	}		
;;;7220   else if(!(temp&(1<<AVUMAX)))
;;;7221   	{
;;;7222   	if(bps[in]._umax_av_cnt>0) 
004bec  f9b41048          LDRSH    r1,[r4,#0x48]
004bf0  2900              CMP      r1,#0
004bf2  dd0d              BLE      |L1.19472|
;;;7223   		{
;;;7224   		bps[in]._umax_av_cnt--;
004bf4  f1a10101          SUB      r1,r1,#1
004bf8  b208              SXTH     r0,r1
004bfa  f8a40048          STRH     r0,[r4,#0x48]
;;;7225   		if(bps[in]._umax_av_cnt==0)
004bfe  b950              CBNZ     r0,|L1.19478|
;;;7226   			{
;;;7227   			bps[in]._umax_av_cnt=0;
;;;7228   			avar_bps_hndl(in,1,0);
004c00  f04f0200          MOV      r2,#0
004c04  f04f0101          MOV      r1,#1
004c08  4630              MOV      r0,r6
004c0a  f7fffffe          BL       avar_bps_hndl
004c0e  e002              B        |L1.19478|
                  |L1.19472|
;;;7229   			//apv_stop(in);
;;;7230   	 //		apv_cnt[in,0]=0;
;;;7231   	//		apv_cnt[in,1]=0;
;;;7232   	 //		apv_cnt[in,2]=0;			
;;;7233   			}
;;;7234   		}
;;;7235   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004c10  da01              BGE      |L1.19478|
004c12  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19478|
;;;7236   	}
;;;7237   
;;;7238   if(temp&(1<<AVUMIN))
004c16  06e8              LSLS     r0,r5,#27
004c18  d519              BPL      |L1.19534|
;;;7239   	{
;;;7240   	if(bps[in]._umin_av_cnt<10) 
004c1a  f9b4104a          LDRSH    r1,[r4,#0x4a]
004c1e  290a              CMP      r1,#0xa
004c20  da23              BGE      |L1.19562|
;;;7241   		{
;;;7242   		bps[in]._umin_av_cnt++;
004c22  f1010101          ADD      r1,r1,#1
004c26  b208              SXTH     r0,r1
004c28  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7243   		if(bps[in]._umin_av_cnt>=10)
004c2c  280a              CMP      r0,#0xa
004c2e  db1c              BLT      |L1.19562|
;;;7244   			{ 
;;;7245   			bps[in]._umin_av_cnt=10;
004c30  f8a4804a          STRH     r8,[r4,#0x4a]
;;;7246   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004c34  7860              LDRB     r0,[r4,#1]
004c36  0740              LSLS     r0,r0,#29
004c38  d404              BMI      |L1.19524|
004c3a  2201              MOVS     r2,#1
004c3c  2102              MOVS     r1,#2
004c3e  4630              MOV      r0,r6
004c40  f7fffffe          BL       avar_bps_hndl
                  |L1.19524|
;;;7247   			apv_start(in);
004c44  4630              MOV      r0,r6
004c46  f7fffffe          BL       apv_start
004c4a  e00e              B        |L1.19562|
                  |L1.19532|
004c4c  e0b3              B        |L1.19894|
                  |L1.19534|
;;;7248   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7249   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7250   				{
;;;7251   				apv_cnt[in,0]=APV_INIT;
;;;7252   				apv_cnt[in,1]=APV_INIT;
;;;7253   				apv_cnt[in,2]=APV_INIT;
;;;7254   				apv_flags[in]=afOFF;
;;;7255   				}*/				
;;;7256   			}
;;;7257   		} 
;;;7258   	}	
;;;7259   	
;;;7260   else if(!(temp&(1<<AVUMIN)))
;;;7261   	{
;;;7262   	if(bps[in]._umin_av_cnt) 
004c4e  f9b4004a          LDRSH    r0,[r4,#0x4a]
004c52  b150              CBZ      r0,|L1.19562|
;;;7263   		{
;;;7264   		bps[in]._umin_av_cnt--;
004c54  f1a00001          SUB      r0,r0,#1
004c58  b200              SXTH     r0,r0
004c5a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7265   		if(bps[in]._umin_av_cnt==0)
004c5e  b920              CBNZ     r0,|L1.19562|
;;;7266   			{
;;;7267   			bps[in]._umin_av_cnt=0;
;;;7268   			avar_bps_hndl(in,2,0);
004c60  2200              MOVS     r2,#0
004c62  2102              MOVS     r1,#2
004c64  4630              MOV      r0,r6
004c66  f7fffffe          BL       avar_bps_hndl
                  |L1.19562|
;;;7269   			//apv_stop(in);
;;;7270   		//	apv_cnt[in,0]=0;
;;;7271   		//	apv_cnt[in,1]=0;
;;;7272   		//	apv_cnt[in,2]=0;
;;;7273   			}
;;;7274   		}
;;;7275   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;7276   	}
;;;7277   
;;;7278   if((bps[in]._Uii<(UB20-DU)))
004c6a  4843              LDR      r0,|L1.19832|
004c6c  69e1              LDR      r1,[r4,#0x1c]
004c6e  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004c72  4842              LDR      r0,|L1.19836|
004c74  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004c78  1a10              SUBS     r0,r2,r0
004c7a  4281              CMP      r1,r0
004c7c  da1d              BGE      |L1.19642|
;;;7279   	{
;;;7280   	if(bps[in]._state==bsWRK)
004c7e  78a0              LDRB     r0,[r4,#2]
004c80  2801              CMP      r0,#1
004c82  d128              BNE      |L1.19670|
;;;7281   		{
;;;7282   		if(bps[in]._umin_av_cnt_uku<300) 
004c84  f9b4004c          LDRSH    r0,[r4,#0x4c]
004c88  f44f7196          MOV      r1,#0x12c
004c8c  4288              CMP      r0,r1
004c8e  da11              BGE      |L1.19636|
;;;7283   			{
;;;7284   			bps[in]._umin_av_cnt_uku++;
004c90  f1000001          ADD      r0,r0,#1
004c94  b200              SXTH     r0,r0
004c96  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7285   			if(bps[in]._umin_av_cnt_uku>=300)
004c9a  4288              CMP      r0,r1
004c9c  db1b              BLT      |L1.19670|
;;;7286   				{ 
;;;7287   				bps[in]._umin_av_cnt_uku=300;
004c9e  f8a4104c          STRH     r1,[r4,#0x4c]
;;;7288   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004ca2  7860              LDRB     r0,[r4,#1]
004ca4  0740              LSLS     r0,r0,#29
004ca6  d416              BMI      |L1.19670|
004ca8  2201              MOVS     r2,#1
004caa  2102              MOVS     r1,#2
004cac  4630              MOV      r0,r6
004cae  f7fffffe          BL       avar_bps_hndl
004cb2  e010              B        |L1.19670|
                  |L1.19636|
;;;7289   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7290   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7291   					{
;;;7292   					apv_cnt[in,0]=APV_INIT;
;;;7293   					apv_cnt[in,1]=APV_INIT;
;;;7294   					apv_cnt[in,2]=APV_INIT;
;;;7295   					apv_flags[in]=afOFF;
;;;7296   					}*/				
;;;7297   				}
;;;7298   			}
;;;7299   		else
;;;7300   			{
;;;7301   			bps[in]._umin_av_cnt_uku=0;
004cb4  f8a4704c          STRH     r7,[r4,#0x4c]
004cb8  e00d              B        |L1.19670|
                  |L1.19642|
;;;7302   			} 
;;;7303   		}
;;;7304   	}	
;;;7305   	
;;;7306   else if(bps[in]._Uii>=(UB20-DU))
;;;7307   	{
;;;7308   	if(bps[in]._umin_av_cnt_uku) 
004cba  f9b4004c          LDRSH    r0,[r4,#0x4c]
004cbe  b150              CBZ      r0,|L1.19670|
;;;7309   		{
;;;7310   		bps[in]._umin_av_cnt_uku--;
004cc0  f1a00001          SUB      r0,r0,#1
004cc4  b200              SXTH     r0,r0
004cc6  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7311   		if(bps[in]._umin_av_cnt_uku==0)
004cca  b920              CBNZ     r0,|L1.19670|
;;;7312   			{
;;;7313   			bps[in]._umin_av_cnt_uku=0;
;;;7314   			avar_bps_hndl(in,2,0);
004ccc  2200              MOVS     r2,#0
004cce  2102              MOVS     r1,#2
004cd0  4630              MOV      r0,r6
004cd2  f7fffffe          BL       avar_bps_hndl
                  |L1.19670|
;;;7315   		//	apv_cnt[in,0]=0;
;;;7316   		//	apv_cnt[in,1]=0;
;;;7317   		//	apv_cnt[in,2]=0;
;;;7318   			}
;;;7319   		}
;;;7320   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;7321   	}
;;;7322   
;;;7323   //bps[in]._state=bsOFF;
;;;7324   
;;;7325   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004cd6  7860              LDRB     r0,[r4,#1]
004cd8  0700              LSLS     r0,r0,#28
004cda  d003              BEQ      |L1.19684|
004cdc  f04f0004          MOV      r0,#4
004ce0  70a0              STRB     r0,[r4,#2]
004ce2  e017              B        |L1.19732|
                  |L1.19684|
;;;7326   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004ce4  4826              LDR      r0,|L1.19840|
004ce6  7800              LDRB     r0,[r0,#0]  ; net_av
004ce8  b130              CBZ      r0,|L1.19704|
004cea  78e0              LDRB     r0,[r4,#3]
004cec  2814              CMP      r0,#0x14
004cee  d903              BLS      |L1.19704|
;;;7327   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004cf0  f04f0005          MOV      r0,#5
004cf4  70a0              STRB     r0,[r4,#2]
004cf6  e00d              B        |L1.19732|
                  |L1.19704|
;;;7328   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004cf8  f8940042          LDRB     r0,[r4,#0x42]
004cfc  0680              LSLS     r0,r0,#26
004cfe  d503              BPL      |L1.19720|
004d00  f04f0002          MOV      r0,#2
004d04  70a0              STRB     r0,[r4,#2]
004d06  e005              B        |L1.19732|
                  |L1.19720|
;;;7329   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004d08  78e0              LDRB     r0,[r4,#3]
004d0a  2814              CMP      r0,#0x14
004d0c  d202              BCS      |L1.19732|
004d0e  f04f0001          MOV      r0,#1
004d12  70a0              STRB     r0,[r4,#2]
                  |L1.19732|
;;;7330   
;;;7331   
;;;7332   
;;;7333   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;7334   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;7335   //else bps[0]._state=ssNOT;
;;;7336   
;;;7337   //bps[in]._is_ready=0;
;;;7338   //bps[in]._is_wrk=0;
;;;7339   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;7340   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;7341   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;7342   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;7343   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7344   //	{
;;;7345   //	bps[in]._flags_bp='B';// заблокирован
;;;7346   //	bps[in]._is_ready=1;
;;;7347   //	}
;;;7348   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7349   //     {
;;;7350   //     bps[in]._flags_bp='W';// работает
;;;7351   //     bps[in]._is_ready=1;
;;;7352   //     bps[in]._is_wrk=1;
;;;7353        
;;;7354   //     }
;;;7355   //else bps[in]._is_ready=1;     
;;;7356   
;;;7357   
;;;7358   
;;;7359   
;;;7360   
;;;7361   /*
;;;7362   bps[in]._flags_tu&=BIN8(11111110);
;;;7363   if(bps[in]._ist_blok_cnt)
;;;7364   	{
;;;7365   	bps[in]._ist_blok_cnt--;
;;;7366   	bps[in]._flags_tu|=BIN8(1);
;;;7367   	}
;;;7368   
;;;7369   	   */ 
;;;7370   
;;;7371   //Пересброс БПСа при потере связи
;;;7372   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004d14  78e0              LDRB     r0,[r4,#3]
004d16  280a              CMP      r0,#0xa
004d18  d306              BCC      |L1.19752|
004d1a  f894002c          LDRB     r0,[r4,#0x2c]
004d1e  f0400080          ORR      r0,r0,#0x80
004d22  f884002c          STRB     r0,[r4,#0x2c]
004d26  e005              B        |L1.19764|
                  |L1.19752|
;;;7373   else bps[in]._flags_tu&=BIN8(1111111);
004d28  f894002c          LDRB     r0,[r4,#0x2c]
004d2c  f000007f          AND      r0,r0,#0x7f
004d30  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19764|
;;;7374   
;;;7375   if(avar_bps_reset_cnt) 
004d34  480a              LDR      r0,|L1.19808|
004d36  3880              SUBS     r0,r0,#0x80
004d38  f890102e          LDRB     r1,[r0,#0x2e]  ; avar_bps_reset_cnt
004d3c  b139              CBZ      r1,|L1.19790|
;;;7376   	{
;;;7377   	bps[in]._flags_tu|=BIN8(10);
004d3e  f894102c          LDRB     r1,[r4,#0x2c]
004d42  f0410102          ORR      r1,r1,#2
004d46  f884102c          STRB     r1,[r4,#0x2c]
;;;7378   	bps[in]._av=0;
004d4a  7067              STRB     r7,[r4,#1]
004d4c  e02a              B        |L1.19876|
                  |L1.19790|
004d4e  e019              B        |L1.19844|
                  |L1.19792|
                          DCD      ica_u_necc
                  |L1.19796|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19800|
                          DCD      ICA_CH
                  |L1.19804|
                          DCD      TBAT
                  |L1.19808|
                          DCD      ||area_number.25||+0x80
                  |L1.19812|
                          DCD      ipsBlckStat
                  |L1.19816|
                          DCD      ipsBlckSrc
                  |L1.19820|
                          DCD      ipsBlckLog
                  |L1.19824|
                          DCD      ||.bss||+0x40c
                  |L1.19828|
                          DCD      bps
                  |L1.19832|
                          DCD      UB20
                  |L1.19836|
                          DCD      ||DU||
                  |L1.19840|
                          DCD      net_av
                  |L1.19844|
;;;7379   	}
;;;7380   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004d84  f8941062          LDRB     r1,[r4,#0x62]
004d88  b131              CBZ      r1,|L1.19864|
004d8a  f894102c          LDRB     r1,[r4,#0x2c]
004d8e  f0410102          ORR      r1,r1,#2
004d92  f884102c          STRB     r1,[r4,#0x2c]
004d96  e005              B        |L1.19876|
                  |L1.19864|
;;;7381   else bps[in]._flags_tu&=BIN8(11111101);
004d98  f894102c          LDRB     r1,[r4,#0x2c]
004d9c  f00101fd          AND      r1,r1,#0xfd
004da0  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19876|
;;;7382   	
;;;7383   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004da4  f9b41054          LDRSH    r1,[r4,#0x54]
004da8  f9b00030          LDRSH    r0,[r0,#0x30]  ; cntrl_stat
004dac  4408              ADD      r0,r0,r1
004dae  6320              STR      r0,[r4,#0x30]
;;;7384   bps[in]._vol_i=1000;
004db0  f44f707a          MOV      r0,#0x3e8
004db4  6360              STR      r0,[r4,#0x34]
                  |L1.19894|
;;;7385   //bps[0]._vol_u=500;
;;;7386   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7387   }
004db6  e8bd81f0          POP      {r4-r8,pc}
;;;7388   
                          ENDP

                  avt_hndl PROC
;;;7389   //-----------------------------------------------
;;;7390   void avt_hndl(void)
004dba  b570              PUSH     {r4-r6,lr}
;;;7391   {
;;;7392   char i;
;;;7393   for(i=0;i<12;i++)
004dbc  f04f0000          MOV      r0,#0
;;;7394   	{
;;;7395   	if(eb2_data_short[6]&(1<<i))
004dc0  49f8              LDR      r1,|L1.20900|
;;;7396   		{
;;;7397   		avt_stat[i]=avtON;
004dc2  4df9              LDR      r5,|L1.20904|
004dc4  f04f0401          MOV      r4,#1                 ;7395
004dc8  f9b1200c          LDRSH    r2,[r1,#0xc]          ;7395
004dcc  4603              MOV      r3,r0                 ;7393
                  |L1.19918|
004dce  fa04f100          LSL      r1,r4,r0              ;7395
004dd2  420a              TST      r2,r1                 ;7395
004dd4  d001              BEQ      |L1.19930|
004dd6  542c              STRB     r4,[r5,r0]
004dd8  e000              B        |L1.19932|
                  |L1.19930|
;;;7398   		}
;;;7399   	else avt_stat[i]=avtOFF;
004dda  542b              STRB     r3,[r5,r0]
                  |L1.19932|
004ddc  f1000001          ADD      r0,r0,#1              ;7393
004de0  b2c0              UXTB     r0,r0                 ;7393
004de2  280c              CMP      r0,#0xc               ;7393
004de4  d3f3              BCC      |L1.19918|
;;;7400   	}
;;;7401   
;;;7402   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004de6  4ef1              LDR      r6,|L1.20908|
004de8  7828              LDRB     r0,[r5,#0]  ; avt_stat
004dea  4cf1              LDR      r4,|L1.20912|
004dec  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004dee  4281              CMP      r1,r0
004df0  d00b              BEQ      |L1.19978|
004df2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004df6  2901              CMP      r1,#1
004df8  db07              BLT      |L1.19978|
;;;7403   	{
;;;7404   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004dfa  2801              CMP      r0,#1
004dfc  d07e              BEQ      |L1.20220|
;;;7405   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004dfe  2300              MOVS     r3,#0
004e00  2201              MOVS     r2,#1
004e02  210b              MOVS     r1,#0xb
004e04  a0eb              ADR      r0,|L1.20916|
004e06  f7fffffe          BL       snmp_trap_send
                  |L1.19978|
;;;7406   	}
;;;7407   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004e0a  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004e0c  7868              LDRB     r0,[r5,#1]  ; avt_stat
004e0e  4281              CMP      r1,r0
004e10  d00b              BEQ      |L1.20010|
004e12  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e16  2902              CMP      r1,#2
004e18  db07              BLT      |L1.20010|
;;;7408   	{
;;;7409   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004e1a  2801              CMP      r0,#1
004e1c  d06f              BEQ      |L1.20222|
;;;7410   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004e1e  2300              MOVS     r3,#0
004e20  2202              MOVS     r2,#2
004e22  210b              MOVS     r1,#0xb
004e24  a0e8              ADR      r0,|L1.20936|
004e26  f7fffffe          BL       snmp_trap_send
                  |L1.20010|
;;;7411   	}
;;;7412   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004e2a  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004e2c  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004e2e  4281              CMP      r1,r0
004e30  d00b              BEQ      |L1.20042|
004e32  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e36  2903              CMP      r1,#3
004e38  db07              BLT      |L1.20042|
;;;7413   	{
;;;7414   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004e3a  2801              CMP      r0,#1
004e3c  d072              BEQ      |L1.20260|
;;;7415   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004e3e  2300              MOVS     r3,#0
004e40  2203              MOVS     r2,#3
004e42  210b              MOVS     r1,#0xb
004e44  a0e5              ADR      r0,|L1.20956|
004e46  f7fffffe          BL       snmp_trap_send
                  |L1.20042|
;;;7416   	}
;;;7417   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004e4a  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004e4c  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004e4e  4281              CMP      r1,r0
004e50  d00b              BEQ      |L1.20074|
004e52  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e56  2904              CMP      r1,#4
004e58  db07              BLT      |L1.20074|
;;;7418   	{
;;;7419   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004e5a  2801              CMP      r0,#1
004e5c  d079              BEQ      |L1.20306|
;;;7420   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004e5e  2300              MOVS     r3,#0
004e60  2204              MOVS     r2,#4
004e62  210b              MOVS     r1,#0xb
004e64  a0e2              ADR      r0,|L1.20976|
004e66  f7fffffe          BL       snmp_trap_send
                  |L1.20074|
;;;7421   	}
;;;7422   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004e6a  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004e6c  7928              LDRB     r0,[r5,#4]  ; avt_stat
004e6e  4281              CMP      r1,r0
004e70  d00b              BEQ      |L1.20106|
004e72  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e76  2905              CMP      r1,#5
004e78  db07              BLT      |L1.20106|
;;;7423   	{
;;;7424   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004e7a  2801              CMP      r0,#1
004e7c  d071              BEQ      |L1.20322|
;;;7425   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004e7e  2300              MOVS     r3,#0
004e80  2205              MOVS     r2,#5
004e82  210b              MOVS     r1,#0xb
004e84  a0df              ADR      r0,|L1.20996|
004e86  f7fffffe          BL       snmp_trap_send
                  |L1.20106|
;;;7426   	}
;;;7427   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004e8a  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004e8c  7968              LDRB     r0,[r5,#5]  ; avt_stat
004e8e  4281              CMP      r1,r0
004e90  d00b              BEQ      |L1.20138|
004e92  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e96  2906              CMP      r1,#6
004e98  db07              BLT      |L1.20138|
;;;7428   	{
;;;7429   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004e9a  2801              CMP      r0,#1
004e9c  d068              BEQ      |L1.20336|
;;;7430   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004e9e  2300              MOVS     r3,#0
004ea0  2206              MOVS     r2,#6
004ea2  210b              MOVS     r1,#0xb
004ea4  a0dc              ADR      r0,|L1.21016|
004ea6  f7fffffe          BL       snmp_trap_send
                  |L1.20138|
;;;7431   	}
;;;7432   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004eaa  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004eac  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004eae  4281              CMP      r1,r0
004eb0  d00b              BEQ      |L1.20170|
004eb2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004eb6  2907              CMP      r1,#7
004eb8  db07              BLT      |L1.20170|
;;;7433   	{
;;;7434   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004eba  2801              CMP      r0,#1
004ebc  d05f              BEQ      |L1.20350|
;;;7435   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004ebe  2300              MOVS     r3,#0
004ec0  2207              MOVS     r2,#7
004ec2  210b              MOVS     r1,#0xb
004ec4  a0d9              ADR      r0,|L1.21036|
004ec6  f7fffffe          BL       snmp_trap_send
                  |L1.20170|
;;;7436   	}
;;;7437   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004eca  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004ecc  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004ece  4281              CMP      r1,r0
004ed0  d00b              BEQ      |L1.20202|
004ed2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ed6  2908              CMP      r1,#8
004ed8  db07              BLT      |L1.20202|
;;;7438   	{
;;;7439   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004eda  2801              CMP      r0,#1
004edc  d056              BEQ      |L1.20364|
;;;7440   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004ede  2300              MOVS     r3,#0
004ee0  2208              MOVS     r2,#8
004ee2  210b              MOVS     r1,#0xb
004ee4  a0d6              ADR      r0,|L1.21056|
004ee6  f7fffffe          BL       snmp_trap_send
                  |L1.20202|
;;;7441   	}
;;;7442   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004eea  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004eec  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004eee  4281              CMP      r1,r0
004ef0  d00e              BEQ      |L1.20240|
004ef2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ef6  2909              CMP      r1,#9
004ef8  db0a              BLT      |L1.20240|
;;;7443   	{
;;;7444   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004efa  e001              B        |L1.20224|
                  |L1.20220|
004efc  e013              B        |L1.20262|
                  |L1.20222|
004efe  e019              B        |L1.20276|
                  |L1.20224|
004f00  2801              CMP      r0,#1
004f02  d04a              BEQ      |L1.20378|
;;;7445   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004f04  2300              MOVS     r3,#0
004f06  2209              MOVS     r2,#9
004f08  210b              MOVS     r1,#0xb
004f0a  a0d2              ADR      r0,|L1.21076|
004f0c  f7fffffe          BL       snmp_trap_send
                  |L1.20240|
;;;7446   	}
;;;7447   
;;;7448   for(i=0;i<12;i++)
004f10  f04f0000          MOV      r0,#0
                  |L1.20244|
;;;7449   	{
;;;7450   	avt_stat_old[i]=avt_stat[i];
004f14  5c29              LDRB     r1,[r5,r0]
004f16  5431              STRB     r1,[r6,r0]
004f18  f1000001          ADD      r0,r0,#1              ;7448
004f1c  b2c0              UXTB     r0,r0                 ;7448
004f1e  280c              CMP      r0,#0xc               ;7448
004f20  d3f8              BCC      |L1.20244|
                  |L1.20258|
;;;7451   	}
;;;7452   }
004f22  bd70              POP      {r4-r6,pc}
                  |L1.20260|
004f24  e00e              B        |L1.20292|
                  |L1.20262|
004f26  2301              MOVS     r3,#1                 ;7404
004f28  461a              MOV      r2,r3                 ;7404
004f2a  210b              MOVS     r1,#0xb               ;7404
004f2c  a0ce              ADR      r0,|L1.21096|
004f2e  f7fffffe          BL       snmp_trap_send
004f32  e76a              B        |L1.19978|
                  |L1.20276|
004f34  2301              MOVS     r3,#1                 ;7409
004f36  2202              MOVS     r2,#2                 ;7409
004f38  210b              MOVS     r1,#0xb               ;7409
004f3a  a0d0              ADR      r0,|L1.21116|
004f3c  f7fffffe          BL       snmp_trap_send
004f40  e773              B        |L1.20010|
004f42  e006              B        |L1.20306|
                  |L1.20292|
004f44  2301              MOVS     r3,#1                 ;7414
004f46  2203              MOVS     r2,#3                 ;7414
004f48  210b              MOVS     r1,#0xb               ;7414
004f4a  a0d1              ADR      r0,|L1.21136|
004f4c  f7fffffe          BL       snmp_trap_send
004f50  e77b              B        |L1.20042|
                  |L1.20306|
004f52  2301              MOVS     r3,#1                 ;7419
004f54  2204              MOVS     r2,#4                 ;7419
004f56  210b              MOVS     r1,#0xb               ;7419
004f58  a0d2              ADR      r0,|L1.21156|
004f5a  f7fffffe          BL       snmp_trap_send
004f5e  e784              B        |L1.20074|
004f60  e7ff              B        |L1.20322|
                  |L1.20322|
004f62  2301              MOVS     r3,#1                 ;7424
004f64  2205              MOVS     r2,#5                 ;7424
004f66  210b              MOVS     r1,#0xb               ;7424
004f68  a0d3              ADR      r0,|L1.21176|
004f6a  f7fffffe          BL       snmp_trap_send
004f6e  e78c              B        |L1.20106|
                  |L1.20336|
004f70  2301              MOVS     r3,#1                 ;7429
004f72  2206              MOVS     r2,#6                 ;7429
004f74  210b              MOVS     r1,#0xb               ;7429
004f76  a0d5              ADR      r0,|L1.21196|
004f78  f7fffffe          BL       snmp_trap_send
004f7c  e795              B        |L1.20138|
                  |L1.20350|
004f7e  2301              MOVS     r3,#1                 ;7434
004f80  2207              MOVS     r2,#7                 ;7434
004f82  210b              MOVS     r1,#0xb               ;7434
004f84  a0d6              ADR      r0,|L1.21216|
004f86  f7fffffe          BL       snmp_trap_send
004f8a  e79e              B        |L1.20170|
                  |L1.20364|
004f8c  2301              MOVS     r3,#1                 ;7439
004f8e  2208              MOVS     r2,#8                 ;7439
004f90  210b              MOVS     r1,#0xb               ;7439
004f92  a0d8              ADR      r0,|L1.21236|
004f94  f7fffffe          BL       snmp_trap_send
004f98  e7a7              B        |L1.20202|
                  |L1.20378|
004f9a  2301              MOVS     r3,#1                 ;7444
004f9c  2209              MOVS     r2,#9                 ;7444
004f9e  210b              MOVS     r1,#0xb               ;7444
004fa0  a0d9              ADR      r0,|L1.21256|
004fa2  f7fffffe          BL       snmp_trap_send
004fa6  e7b3              B        |L1.20240|
;;;7453   
                          ENDP

                  bat_hndl PROC
;;;7454   //-----------------------------------------------
;;;7455   void bat_hndl(void)
004fa8  b570              PUSH     {r4-r6,lr}
;;;7456   {
;;;7457   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7458   	{
;;;7459   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7460   		{
;;;7461   		char i;
;;;7462   		for(i=0;i<2;i++)
;;;7463   			{
;;;7464   			if(mess_data[1]&(1<<i))
;;;7465   				{
;;;7466   				bat[i]._cnt_to_block=0;
;;;7467        			bat[i]._rel_stat=0;
;;;7468        			}
;;;7469   			}
;;;7470   		}
;;;7471   	}
;;;7472   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7473   	{		
;;;7474   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7475   		{
;;;7476   		char i;
;;;7477   		for(i=0;i<2;i++)
;;;7478   			{
;;;7479   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7480   				{
;;;7481   				bat[i]._cnt_to_block=20;
;;;7482   				bat[i]._rel_stat=1;
;;;7483        			}
;;;7484   			}
;;;7485   		
;;;7486   		}		
;;;7487   	}*/
;;;7488   
;;;7489   if(mess_find_unvol(MESS2BAT_HNDL))
004faa  20c8              MOVS     r0,#0xc8
004fac  f7fffffe          BL       mess_find_unvol
;;;7490   	{ 
;;;7491   	char i;
;;;7492   	
;;;7493   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7494   		{
;;;7495   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7496   			{
;;;7497   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004fb0  4bda              LDR      r3,|L1.21276|
004fb2  2400              MOVS     r4,#0                 ;7495
004fb4  b378              CBZ      r0,|L1.20502|
004fb6  49da              LDR      r1,|L1.21280|
;;;7498   			}
;;;7499   		}
;;;7500   
;;;7501   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7502   		{
;;;7503   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7504   			{
;;;7505   			if(mess_data[1]&(1<<i))
004fb8  2501              MOVS     r5,#1
004fba  6808              LDR      r0,[r1,#0]            ;7493  ; mess_data
004fbc  28c9              CMP      r0,#0xc9              ;7493
004fbe  d018              BEQ      |L1.20466|
004fc0  28ca              CMP      r0,#0xca              ;7501
004fc2  d029              BEQ      |L1.20504|
;;;7506   				{
;;;7507   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7508   				}
;;;7509   			else bat[i]._cnt_to_block=0;
;;;7510   			}
;;;7511   		}
;;;7512   	else 
;;;7513   	 	{
;;;7514   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004fc4  4620              MOV      r0,r4
                  |L1.20422|
;;;7515   			{
;;;7516   			bat[i]._cnt_to_block=0;
004fc6  eb000180          ADD      r1,r0,r0,LSL #2
004fca  eb031101          ADD      r1,r3,r1,LSL #4
004fce  700c              STRB     r4,[r1,#0]
004fd0  f1000001          ADD      r0,r0,#1              ;7514
004fd4  b2c0              UXTB     r0,r0                 ;7514
004fd6  2802              CMP      r0,#2                 ;7514
004fd8  d3f5              BCC      |L1.20422|
                  |L1.20442|
;;;7517   			}
;;;7518   
;;;7519   		}
;;;7520   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004fda  f04f0000          MOV      r0,#0
                  |L1.20446|
;;;7521   		{
;;;7522   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004fde  eb000180          ADD      r1,r0,r0,LSL #2
004fe2  eb031101          ADD      r1,r3,r1,LSL #4
004fe6  780a              LDRB     r2,[r1,#0]
004fe8  2a14              CMP      r2,#0x14
004fea  d932              BLS      |L1.20562|
004fec  f8815040          STRB     r5,[r1,#0x40]
004ff0  e031              B        |L1.20566|
                  |L1.20466|
004ff2  f04f0000          MOV      r0,#0                 ;7495
                  |L1.20470|
004ff6  eb000180          ADD      r1,r0,r0,LSL #2       ;7497
004ffa  eb031201          ADD      r2,r3,r1,LSL #4       ;7497
004ffe  7811              LDRB     r1,[r2,#0]            ;7497
005000  2932              CMP      r1,#0x32              ;7497
005002  d202              BCS      |L1.20490|
005004  f1010101          ADD      r1,r1,#1              ;7497
005008  7011              STRB     r1,[r2,#0]            ;7497
                  |L1.20490|
00500a  f1000001          ADD      r0,r0,#1              ;7495
00500e  b2c0              UXTB     r0,r0                 ;7495
005010  2802              CMP      r0,#2                 ;7495
005012  d3f0              BCC      |L1.20470|
005014  e7e1              B        |L1.20442|
                  |L1.20502|
005016  e024              B        |L1.20578|
                  |L1.20504|
005018  f04f0000          MOV      r0,#0                 ;7503
00501c  684e              LDR      r6,[r1,#4]            ;7505
                  |L1.20510|
00501e  fa05f100          LSL      r1,r5,r0              ;7505
005022  420e              TST      r6,r1                 ;7505
005024  d00a              BEQ      |L1.20540|
005026  eb000180          ADD      r1,r0,r0,LSL #2       ;7507
00502a  eb031201          ADD      r2,r3,r1,LSL #4       ;7507
00502e  7811              LDRB     r1,[r2,#0]            ;7507
005030  2932              CMP      r1,#0x32              ;7507
005032  d208              BCS      |L1.20550|
005034  f1010101          ADD      r1,r1,#1              ;7507
005038  7011              STRB     r1,[r2,#0]            ;7507
00503a  e004              B        |L1.20550|
                  |L1.20540|
00503c  eb000180          ADD      r1,r0,r0,LSL #2       ;7509
005040  eb031101          ADD      r1,r3,r1,LSL #4       ;7509
005044  700c              STRB     r4,[r1,#0]            ;7509
                  |L1.20550|
005046  f1000001          ADD      r0,r0,#1              ;7503
00504a  b2c0              UXTB     r0,r0                 ;7503
00504c  2802              CMP      r0,#2                 ;7503
00504e  d3e6              BCC      |L1.20510|
005050  e7c3              B        |L1.20442|
                  |L1.20562|
;;;7523   		else bat[i]._rel_stat=0;
005052  f8814040          STRB     r4,[r1,#0x40]
                  |L1.20566|
005056  f1000001          ADD      r0,r0,#1              ;7520
00505a  b2c0              UXTB     r0,r0                 ;7520
00505c  2802              CMP      r0,#2                 ;7520
00505e  d3be              BCC      |L1.20446|
;;;7524   		}
;;;7525   
;;;7526   	}
;;;7527   
;;;7528   else 
;;;7529   	{
;;;7530   	char i;
;;;7531   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7532   		{
;;;7533   		bat[i]._cnt_to_block=0;
;;;7534   		bat[i]._rel_stat=0;
;;;7535   		}
;;;7536   
;;;7537   	}
;;;7538   
;;;7539   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7540   	{
;;;7541   	if(PARAM_BAT_ON)
;;;7542   		{
;;;7543   		char i;
;;;7544   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7545   			{
;;;7546   			if(mess_data[1]&(1<<i))
;;;7547   				{
;;;7548   				bat[i]._cnt_to_block=0;
;;;7549   				bat[i]._rel_stat=0;
;;;7550   				}
;;;7551   			}
;;;7552   		}
;;;7553   	} */
;;;7554   }
005060  e75f              B        |L1.20258|
                  |L1.20578|
005062  f04f0000          MOV      r0,#0                 ;7531
                  |L1.20582|
005066  eb000180          ADD      r1,r0,r0,LSL #2       ;7533
00506a  eb031101          ADD      r1,r3,r1,LSL #4       ;7533
00506e  700c              STRB     r4,[r1,#0]            ;7533
005070  f8814040          STRB     r4,[r1,#0x40]         ;7534
005074  f1000001          ADD      r0,r0,#1              ;7531
005078  b2c0              UXTB     r0,r0                 ;7531
00507a  2802              CMP      r0,#2                 ;7531
00507c  d3f3              BCC      |L1.20582|
00507e  e750              B        |L1.20258|
;;;7555   
                          ENDP

                  bat_drv PROC
;;;8193   //-----------------------------------------------
;;;8194   void bat_drv(char in)
005080  e92d5ffc          PUSH     {r2-r12,lr}
;;;8195   {
005084  4605              MOV      r5,r0
;;;8196   unsigned short /*tempUS,*/tempUS_;
;;;8197   unsigned long tempUL,tempUL_;
;;;8198   unsigned short b_zar;
;;;8199   //static unsigned short time_cnt[2];
;;;8200   
;;;8201   
;;;8202   
;;;8203   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
005086  49a7              LDR      r1,|L1.21284|
005088  f9310015          LDRSH    r0,[r1,r5,LSL #1]
00508c  b118              CBZ      r0,|L1.20630|
00508e  f1a00001          SUB      r0,r0,#1
005092  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20630|
;;;8204   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
005096  4aa3              LDR      r2,|L1.21284|
005098  1d12              ADDS     r2,r2,#4
00509a  f9320015          LDRSH    r0,[r2,r5,LSL #1]
00509e  b118              CBZ      r0,|L1.20648|
0050a0  f1a00001          SUB      r0,r0,#1
0050a4  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20648|
;;;8205   
;;;8206   
;;;8207   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
0050a8  489c              LDR      r0,|L1.21276|
0050aa  eb050385          ADD      r3,r5,r5,LSL #2
0050ae  eb001403          ADD      r4,r0,r3,LSL #4
0050b2  4b9d              LDR      r3,|L1.21288|
0050b4  f9b40008          LDRSH    r0,[r4,#8]
0050b8  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
0050bc  2364              MOVS     r3,#0x64
0050be  42b0              CMP      r0,r6
0050c0  dd01              BLE      |L1.20678|
0050c2  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20678|
;;;8208   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
0050c6  2800              CMP      r0,#0
0050c8  da01              BGE      |L1.20686|
0050ca  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20686|
;;;8209   
;;;8210   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;8211        {
;;;8212        if(!cntrl_stat_blok_cnt_)
0050ce  4895              LDR      r0,|L1.21284|
0050d0  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;8210
0050d4  38b0              SUBS     r0,r0,#0xb0
0050d6  2700              MOVS     r7,#0
0050d8  b14b              CBZ      r3,|L1.20718|
0050da  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;8210
0050de  b133              CBZ      r3,|L1.20718|
0050e0  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
0050e4  b1a3              CBZ      r3,|L1.20752|
;;;8213             {
;;;8214             cntrl_stat_blok_cnt_=600; 
;;;8215             cntrl_stat_blok_cnt_plus[in]=0;
;;;8216             cntrl_stat_blok_cnt_minus[in]=0;
;;;8217             }
;;;8218        else cntrl_stat_blok_cnt=3000;
0050e6  f64031b8          MOV      r1,#0xbb8
0050ea  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.20718|
;;;8219        }
;;;8220   cntrl_stat_blok_cnt=0;
0050ee  f8a07074          STRH     r7,[r0,#0x74]
;;;8221   
;;;8222   if(++(bat[in]._time_cnt)>=10)
0050f2  f8940042          LDRB     r0,[r4,#0x42]
0050f6  1c40              ADDS     r0,r0,#1
0050f8  b2c0              UXTB     r0,r0
0050fa  f8840042          STRB     r0,[r4,#0x42]
0050fe  280a              CMP      r0,#0xa
005100  d301              BCC      |L1.20742|
;;;8223   	{
;;;8224   	bat[in]._time_cnt=0;
005102  f8847042          STRB     r7,[r4,#0x42]
                  |L1.20742|
;;;8225   	//bat[in]._zar_cnt++;
;;;8226   	}
;;;8227   
;;;8228   if(main_10Hz_cnt==50)
005106  4e89              LDR      r6,|L1.21292|
005108  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
00510a  2832              CMP      r0,#0x32
00510c  d009              BEQ      |L1.20770|
00510e  e017              B        |L1.20800|
                  |L1.20752|
005110  f44f7316          MOV      r3,#0x258             ;8214
005114  f8a03076          STRH     r3,[r0,#0x76]         ;8214
005118  f8217015          STRH     r7,[r1,r5,LSL #1]     ;8215
00511c  f8227015          STRH     r7,[r2,r5,LSL #1]     ;8216
005120  e7e5              B        |L1.20718|
                  |L1.20770|
;;;8229   	{
;;;8230   	if(!bat[in]._rel_stat)
005122  f8940040          LDRB     r0,[r4,#0x40]
005126  b958              CBNZ     r0,|L1.20800|
;;;8231   		{
;;;8232   		
;;;8233   		if(bat[in]._Ub<80) 
005128  f9b40002          LDRSH    r0,[r4,#2]
00512c  2850              CMP      r0,#0x50
00512e  da07              BGE      |L1.20800|
;;;8234   			{
;;;8235   			
;;;8236   			if(!(bat[in]._av&1))
005130  f8940041          LDRB     r0,[r4,#0x41]
005134  07c0              LSLS     r0,r0,#31
005136  d103              BNE      |L1.20800|
;;;8237   				{
;;;8238   				avar_bat_hndl(in,1);
005138  2101              MOVS     r1,#1
00513a  4628              MOV      r0,r5
00513c  f7fffffe          BL       avar_bat_hndl
                  |L1.20800|
;;;8239   				//if(in==0)plazma_bat++;
;;;8240   				}
;;;8241   			}				
;;;8242   
;;;8243   		}
;;;8244   	}
;;;8245   
;;;8246   if(main_10Hz_cnt>200)
005140  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;8247   	{
;;;8248   	if(abs(bat[in]._Ib)>IKB) 
005144  4e7a              LDR      r6,|L1.21296|
005146  28c8              CMP      r0,#0xc8              ;8246
005148  dd0f              BLE      |L1.20842|
00514a  f9b40008          LDRSH    r0,[r4,#8]
00514e  f7fffffe          BL       abs
005152  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005156  4288              CMP      r0,r1
005158  dd07              BLE      |L1.20842|
;;;8249   		{
;;;8250   		if((bat[in]._av&1))avar_bat_hndl(in,0);
00515a  f8940041          LDRB     r0,[r4,#0x41]
00515e  07c0              LSLS     r0,r0,#31
005160  d003              BEQ      |L1.20842|
005162  2100              MOVS     r1,#0
005164  4628              MOV      r0,r5
005166  f7fffffe          BL       avar_bat_hndl
                  |L1.20842|
;;;8251   		}
;;;8252   	}
;;;8253   
;;;8254   #ifdef APSENERGIA
;;;8255   //if(bat[in]._Ib>(-IKB))
;;;8256   
;;;8257   
;;;8258   #endif
;;;8259   
;;;8260   if(bat[in]._Ib>(-IKB))
00516a  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
00516e  f9b40008          LDRSH    r0,[r4,#8]
005172  4249              RSBS     r1,r1,#0
005174  4288              CMP      r0,r1
005176  dd14              BLE      |L1.20898|
;;;8261   	{
;;;8262   	if(bat[in]._cnt_wrk<10)
005178  7be0              LDRB     r0,[r4,#0xf]
00517a  280a              CMP      r0,#0xa
00517c  d20d              BCS      |L1.20890|
;;;8263   		{
;;;8264   		bat[in]._cnt_wrk++;
00517e  f1000001          ADD      r0,r0,#1
005182  b2c0              UXTB     r0,r0
005184  73e0              STRB     r0,[r4,#0xf]
;;;8265   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
005186  280a              CMP      r0,#0xa
005188  d306              BCC      |L1.20888|
00518a  7c20              LDRB     r0,[r4,#0x10]
00518c  2800              CMP      r0,#0
00518e  d003              BEQ      |L1.20888|
;;;8266   			{
;;;8267   			bat[in]._wrk=0;
005190  7427              STRB     r7,[r4,#0x10]
;;;8268   			//beep_init(0x7L,'O');
;;;8269   			//wrk_mem_hndl(0);
;;;8270   			wrk_mem_hndl(in);
005192  4628              MOV      r0,r5
005194  f7fffffe          BL       wrk_mem_hndl
                  |L1.20888|
005198  e132              B        |L1.21504|
                  |L1.20890|
;;;8271   			//plazma++;
;;;8272   			}
;;;8273   		}
;;;8274   	else bat[in]._cnt_wrk=10;	
00519a  f04f000a          MOV      r0,#0xa
00519e  73e0              STRB     r0,[r4,#0xf]
0051a0  e12e              B        |L1.21504|
                  |L1.20898|
0051a2  e0c7              B        |L1.21300|
                  |L1.20900|
                          DCD      eb2_data_short
                  |L1.20904|
                          DCD      avt_stat
                  |L1.20908|
                          DCD      avt_stat_old
                  |L1.20912|
                          DCD      NUMAVT
                  |L1.20916|
0051b4  4176746f          DCB      "Avtomat #1 is OFF",0
0051b8  6d617420
0051bc  23312069
0051c0  73204f46
0051c4  4600    
0051c6  00                DCB      0
0051c7  00                DCB      0
                  |L1.20936|
0051c8  4176746f          DCB      "Avtomat #2 is OFF",0
0051cc  6d617420
0051d0  23322069
0051d4  73204f46
0051d8  4600    
0051da  00                DCB      0
0051db  00                DCB      0
                  |L1.20956|
0051dc  4176746f          DCB      "Avtomat #3 is OFF",0
0051e0  6d617420
0051e4  23332069
0051e8  73204f46
0051ec  4600    
0051ee  00                DCB      0
0051ef  00                DCB      0
                  |L1.20976|
0051f0  4176746f          DCB      "Avtomat #4 is OFF",0
0051f4  6d617420
0051f8  23342069
0051fc  73204f46
005200  4600    
005202  00                DCB      0
005203  00                DCB      0
                  |L1.20996|
005204  4176746f          DCB      "Avtomat #5 is OFF",0
005208  6d617420
00520c  23352069
005210  73204f46
005214  4600    
005216  00                DCB      0
005217  00                DCB      0
                  |L1.21016|
005218  4176746f          DCB      "Avtomat #6 is OFF",0
00521c  6d617420
005220  23362069
005224  73204f46
005228  4600    
00522a  00                DCB      0
00522b  00                DCB      0
                  |L1.21036|
00522c  4176746f          DCB      "Avtomat #7 is OFF",0
005230  6d617420
005234  23372069
005238  73204f46
00523c  4600    
00523e  00                DCB      0
00523f  00                DCB      0
                  |L1.21056|
005240  4176746f          DCB      "Avtomat #8 is OFF",0
005244  6d617420
005248  23382069
00524c  73204f46
005250  4600    
005252  00                DCB      0
005253  00                DCB      0
                  |L1.21076|
005254  4176746f          DCB      "Avtomat #9 is OFF",0
005258  6d617420
00525c  23392069
005260  73204f46
005264  4600    
005266  00                DCB      0
005267  00                DCB      0
                  |L1.21096|
005268  4176746f          DCB      "Avtomat #1 is ON ",0
00526c  6d617420
005270  23312069
005274  73204f4e
005278  2000    
00527a  00                DCB      0
00527b  00                DCB      0
                  |L1.21116|
00527c  4176746f          DCB      "Avtomat #2 is ON ",0
005280  6d617420
005284  23322069
005288  73204f4e
00528c  2000    
00528e  00                DCB      0
00528f  00                DCB      0
                  |L1.21136|
005290  4176746f          DCB      "Avtomat #3 is ON ",0
005294  6d617420
005298  23332069
00529c  73204f4e
0052a0  2000    
0052a2  00                DCB      0
0052a3  00                DCB      0
                  |L1.21156|
0052a4  4176746f          DCB      "Avtomat #4 is ON ",0
0052a8  6d617420
0052ac  23342069
0052b0  73204f4e
0052b4  2000    
0052b6  00                DCB      0
0052b7  00                DCB      0
                  |L1.21176|
0052b8  4176746f          DCB      "Avtomat #5 is ON ",0
0052bc  6d617420
0052c0  23352069
0052c4  73204f4e
0052c8  2000    
0052ca  00                DCB      0
0052cb  00                DCB      0
                  |L1.21196|
0052cc  4176746f          DCB      "Avtomat #6 is ON ",0
0052d0  6d617420
0052d4  23362069
0052d8  73204f4e
0052dc  2000    
0052de  00                DCB      0
0052df  00                DCB      0
                  |L1.21216|
0052e0  4176746f          DCB      "Avtomat #7 is ON ",0
0052e4  6d617420
0052e8  23372069
0052ec  73204f4e
0052f0  2000    
0052f2  00                DCB      0
0052f3  00                DCB      0
                  |L1.21236|
0052f4  4176746f          DCB      "Avtomat #8 is ON ",0
0052f8  6d617420
0052fc  23382069
005300  73204f4e
005304  2000    
005306  00                DCB      0
005307  00                DCB      0
                  |L1.21256|
005308  4176746f          DCB      "Avtomat #9 is ON ",0
00530c  6d617420
005310  23392069
005314  73204f4e
005318  2000    
00531a  00                DCB      0
00531b  00                DCB      0
                  |L1.21276|
                          DCD      bat
                  |L1.21280|
                          DCD      mess_data
                  |L1.21284|
                          DCD      ||area_number.25||+0xb0
                  |L1.21288|
                          DCD      IZMAX
                  |L1.21292|
                          DCD      main_10Hz_cnt
                  |L1.21296|
                          DCD      IKB
                  |L1.21300|
;;;8275   	}	
;;;8276   
;;;8277   else if(bat[in]._Ib<(-IKB))
005334  da64              BGE      |L1.21504|
;;;8278   	{
;;;8279   	if(bat[in]._cnt_wrk)
005336  7be0              LDRB     r0,[r4,#0xf]
005338  b3f0              CBZ      r0,|L1.21432|
;;;8280   		{
;;;8281   		bat[in]._cnt_wrk--;
00533a  f1a00001          SUB      r0,r0,#1
00533e  b2c0              UXTB     r0,r0
005340  73e0              STRB     r0,[r4,#0xf]
;;;8282   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005342  bbc8              CBNZ     r0,|L1.21432|
005344  7c20              LDRB     r0,[r4,#0x10]
005346  bbb8              CBNZ     r0,|L1.21432|
;;;8283   			{
;;;8284   			bat[in]._wrk=1;
005348  f04f0001          MOV      r0,#1
00534c  7420              STRB     r0,[r4,#0x10]
;;;8285   
;;;8286   				{
;;;8287   				char temp;
;;;8288   				signed short temp_temp;
;;;8289   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
00534e  48ff              LDR      r0,|L1.22348|
005350  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005352  f1000001          ADD      r0,r0,#1
005356  f0000007          AND      r0,r0,#7
00535a  eb040040          ADD      r0,r4,r0,LSL #1
00535e  8c80              LDRH     r0,[r0,#0x24]
005360  9000              STR      r0,[sp,#0]
;;;8290   			 
;;;8291   				temp=LPC_RTC->YEAR;
005362  4efb              LDR      r6,|L1.22352|
005364  8bb0              LDRH     r0,[r6,#0x1c]
005366  9001              STR      r0,[sp,#4]
;;;8292   				gran_char((signed char*)&temp,1,99);
005368  f04f0263          MOV      r2,#0x63
00536c  f04f0101          MOV      r1,#1
005370  a801              ADD      r0,sp,#4
005372  f7fffffe          BL       gran_char
;;;8293   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005376  f1040420          ADD      r4,r4,#0x20
00537a  f89d0004          LDRB     r0,[sp,#4]
00537e  7620              STRB     r0,[r4,#0x18]
;;;8294   			
;;;8295   				temp=LPC_RTC->MONTH;
005380  7e30              LDRB     r0,[r6,#0x18]
005382  9001              STR      r0,[sp,#4]
;;;8296   				gran_char((signed char*)&temp,1,12);
005384  f04f020c          MOV      r2,#0xc
005388  f04f0101          MOV      r1,#1
00538c  a801              ADD      r0,sp,#4
00538e  f7fffffe          BL       gran_char
;;;8297   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
005392  f89d0004          LDRB     r0,[sp,#4]
005396  7660              STRB     r0,[r4,#0x19]
;;;8298   			
;;;8299   				temp=LPC_RTC->DOM;
005398  7b30              LDRB     r0,[r6,#0xc]
00539a  9001              STR      r0,[sp,#4]
;;;8300   				gran_char((signed char*)&temp,1,31);
00539c  221f              MOVS     r2,#0x1f
00539e  2101              MOVS     r1,#1
0053a0  a801              ADD      r0,sp,#4
0053a2  f7fffffe          BL       gran_char
;;;8301   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0053a6  f89d0004          LDRB     r0,[sp,#4]
0053aa  76a0              STRB     r0,[r4,#0x1a]
;;;8302   				
;;;8303   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0053ac  f89d0000          LDRB     r0,[sp,#0]
0053b0  76e0              STRB     r0,[r4,#0x1b]
;;;8304   
;;;8305   				temp=LPC_RTC->HOUR;
0053b2  7a30              LDRB     r0,[r6,#8]
0053b4  9001              STR      r0,[sp,#4]
;;;8306   				gran_char((signed char*)&temp,0,23);
0053b6  e000              B        |L1.21434|
                  |L1.21432|
0053b8  e022              B        |L1.21504|
                  |L1.21434|
0053ba  2217              MOVS     r2,#0x17
0053bc  2100              MOVS     r1,#0
0053be  a801              ADD      r0,sp,#4
0053c0  f7fffffe          BL       gran_char
;;;8307   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0053c4  f89d0004          LDRB     r0,[sp,#4]
0053c8  7720              STRB     r0,[r4,#0x1c]
;;;8308                  	
;;;8309   				temp=LPC_RTC->MIN;
0053ca  7930              LDRB     r0,[r6,#4]
0053cc  9001              STR      r0,[sp,#4]
;;;8310   				gran_char((signed char*)&temp,0,59);
0053ce  223b              MOVS     r2,#0x3b
0053d0  2100              MOVS     r1,#0
0053d2  a801              ADD      r0,sp,#4
0053d4  f7fffffe          BL       gran_char
;;;8311   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0053d8  f89d0004          LDRB     r0,[sp,#4]
0053dc  7760              STRB     r0,[r4,#0x1d]
;;;8312   	          
;;;8313   				temp=LPC_RTC->SEC;
0053de  7830              LDRB     r0,[r6,#0]
0053e0  9001              STR      r0,[sp,#4]
;;;8314   				gran_char((signed char*)&temp,0,59);
0053e2  223b              MOVS     r2,#0x3b
0053e4  2100              MOVS     r1,#0
0053e6  a801              ADD      r0,sp,#4
0053e8  f7fffffe          BL       gran_char
;;;8315   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
0053ec  f89d0004          LDRB     r0,[sp,#4]
0053f0  77a0              STRB     r0,[r4,#0x1e]
;;;8316   			
;;;8317   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
0053f2  f89d0001          LDRB     r0,[sp,#1]
0053f6  77e0              STRB     r0,[r4,#0x1f]
;;;8318   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0053f8  8027              STRH     r7,[r4,#0]
;;;8319   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
0053fa  8067              STRH     r7,[r4,#2]
0053fc  f1a40420          SUB      r4,r4,#0x20
                  |L1.21504|
;;;8320   				}
;;;8321   	
;;;8322   			}
;;;8323   
;;;8324   		}
;;;8325   	else bat[in]._cnt_wrk=0;	 
;;;8326   	
;;;8327   	}					
;;;8328   
;;;8329   /*
;;;8330   if(Ibat>=(-IKB))
;;;8331   	{
;;;8332   	if(cnt_wrk<10)
;;;8333   		{
;;;8334   		cnt_wrk++;
;;;8335   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;8336   			{
;;;8337   			wrk=wrkOFF;
;;;8338   			//beep_init(0x7L,'O');
;;;8339   			wrk_mem_hndl(ibat_integr);
;;;8340   			}
;;;8341   		}
;;;8342   	else cnt_wrk=10;	
;;;8343   	}	
;;;8344   
;;;8345   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8346   	{
;;;8347   	if(cnt_wrk)
;;;8348   		{
;;;8349   		cnt_wrk--;
;;;8350   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8351   			{
;;;8352   			char temp;
;;;8353   			signed short temp_temp;
;;;8354   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8355   			 
;;;8356   			wrk=wrkON;
;;;8357   			
;;;8358   			temp=_year;
;;;8359   			gran_char(&temp,1,99);
;;;8360   			*((char*)(&(wrk_date[0])))=temp;
;;;8361   			
;;;8362   			temp=_month;
;;;8363   			gran_char(&temp,1,12);
;;;8364   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8365   			
;;;8366   			temp=_date;
;;;8367   			gran_char(&temp,1,31);
;;;8368   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8369   				
;;;8370   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8371   
;;;8372   			temp=_hour;
;;;8373   			gran_char(&temp,0,23);
;;;8374   			*((char*)(&(wrk_date[1])))=temp;
;;;8375                  
;;;8376   			temp=_min;
;;;8377   			gran_char(&temp,0,59);
;;;8378   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8379   	          
;;;8380   			temp=_sec;
;;;8381   			gran_char(&temp,0,59);
;;;8382   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8383   			
;;;8384   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8385   
;;;8386   			
;;;8387   			//beep_init(0xFL,'O'); 
;;;8388   			ibat_integr=0;
;;;8389   			ibat_integr_=0;
;;;8390   			}
;;;8391   		}
;;;8392   	else cnt_wrk=0;	 
;;;8393   	
;;;8394   	}
;;;8395   if(wrk==wrkON)
;;;8396   	{
;;;8397   	ibat_integr_+=-Ibat;
;;;8398   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8399   		{
;;;8400   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8401   		ibat_integr++;
;;;8402   		}
;;;8403   	}
;;;8404   
;;;8405   */
;;;8406   
;;;8407   
;;;8408   /*if(bat[in]._cnt_to_block)
;;;8409   	{
;;;8410   	bat[in]._cnt_to_block--;
;;;8411   	if(!(bat[in]._cnt_to_block))
;;;8412   		{
;;;8413   		//bat[in]._rel_stat=1;
;;;8414   		}
;;;8415   	}
;;;8416   */
;;;8417   
;;;8418   
;;;8419   
;;;8420   
;;;8421   //unsigned int tempUI,tempUI_;
;;;8422   //unsigned int b_zar; 
;;;8423   //char i;
;;;8424   //Ibat[0]=5000;                     
;;;8425   
;;;8426   
;;;8427                               
;;;8428   if(bat[in]._time_cnt==0)
;;;8429   	{
;;;8430   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8431   	
;;;8432   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005400  f64848a0          MOV      r8,#0x8ca0
005404  f8940042          LDRB     r0,[r4,#0x42]         ;8428
005408  bba8              CBNZ     r0,|L1.21622|
00540a  f9b41008          LDRSH    r1,[r4,#8]            ;8430
00540e  69a0              LDR      r0,[r4,#0x18]         ;8430
005410  4408              ADD      r0,r0,r1              ;8430
005412  61a0              STR      r0,[r4,#0x18]         ;8430
;;;8433   		{
;;;8434   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8435   		else tempUS_=BAT_C_REAL[in];
;;;8436   		
;;;8437   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005414  f8df933c          LDR      r9,|L1.22356|
005418  f8dfa33c          LDR      r10,|L1.22360|
00541c  f2455b55          MOV      r11,#0x5555           ;8434
005420  4540              CMP      r0,r8                 ;8432
005422  db29              BLT      |L1.21624|
005424  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8434
005428  4558              CMP      r0,r11                ;8434
00542a  d103              BNE      |L1.21556|
00542c  48cb              LDR      r0,|L1.22364|
00542e  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8434
005432  e001              B        |L1.21560|
                  |L1.21556|
005434  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8435
                  |L1.21560|
005438  f8390015          LDRH     r0,[r9,r5,LSL #1]
00543c  f7fffffe          BL       lc640_read_int
005440  b280              UXTH     r0,r0
;;;8438   
;;;8439   		if(b_zar<(tempUS_/**10*/))
005442  42b0              CMP      r0,r6
005444  d20e              BCS      |L1.21604|
;;;8440   			{
;;;8441   			bat[in]._zar_cnt-=AH_CONSTANT;
005446  69a1              LDR      r1,[r4,#0x18]
005448  f5a14100          SUB      r1,r1,#0x8000
00544c  f5a1614a          SUB      r1,r1,#0xca0
005450  61a1              STR      r1,[r4,#0x18]
;;;8442   
;;;8443   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005452  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005456  f1000001          ADD      r0,r0,#1
00545a  b201              SXTH     r1,r0
00545c  4610              MOV      r0,r2
00545e  f7fffffe          BL       lc640_write_int
005462  e032              B        |L1.21706|
                  |L1.21604|
;;;8444   			}
;;;8445   		else if(b_zar>(tempUS_/**10*/))  
005464  d931              BLS      |L1.21706|
;;;8446   			{
;;;8447   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005466  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00546a  b231              SXTH     r1,r6
00546c  f7fffffe          BL       lc640_write_int
;;;8448   			bat[in]._zar_cnt=AH_CONSTANT;
005470  f8c48018          STR      r8,[r4,#0x18]
005474  e029              B        |L1.21706|
                  |L1.21622|
005476  e057              B        |L1.21800|
                  |L1.21624|
;;;8449   
;;;8450   			}
;;;8451   
;;;8452   		}
;;;8453   
;;;8454   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005478  49b9              LDR      r1,|L1.22368|
00547a  4288              CMP      r0,r1
00547c  dc25              BGT      |L1.21706|
;;;8455   		{
;;;8456   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
00547e  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005482  4558              CMP      r0,r11
005484  d103              BNE      |L1.21646|
005486  48b5              LDR      r0,|L1.22364|
005488  f8306015          LDRH     r6,[r0,r5,LSL #1]
00548c  e001              B        |L1.21650|
                  |L1.21646|
;;;8457   		else tempUS_=BAT_C_REAL[in];
00548e  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21650|
;;;8458   		
;;;8459   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005492  f8390015          LDRH     r0,[r9,r5,LSL #1]
005496  f7fffffe          BL       lc640_read_int
00549a  b280              UXTH     r0,r0
;;;8460   
;;;8461   		if(b_zar>tempUS_)
00549c  42b0              CMP      r0,r6
00549e  d905              BLS      |L1.21676|
;;;8462   			{
;;;8463   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0054a0  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0054a4  b231              SXTH     r1,r6
0054a6  f7fffffe          BL       lc640_write_int
;;;8464   			b_zar=tempUS_;
0054aa  4630              MOV      r0,r6
                  |L1.21676|
;;;8465   			}
;;;8466   		if(b_zar)
0054ac  b158              CBZ      r0,|L1.21702|
;;;8467   			{
;;;8468   			bat[in]._zar_cnt+=AH_CONSTANT;
0054ae  69a1              LDR      r1,[r4,#0x18]
0054b0  4441              ADD      r1,r1,r8
0054b2  61a1              STR      r1,[r4,#0x18]
;;;8469   
;;;8470   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0054b4  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0054b8  f1a00001          SUB      r0,r0,#1
0054bc  b201              SXTH     r1,r0
0054be  4610              MOV      r0,r2
0054c0  f7fffffe          BL       lc640_write_int
0054c4  e001              B        |L1.21706|
                  |L1.21702|
;;;8471   			}
;;;8472   		else 
;;;8473   			{
;;;8474   			bat[in]._zar_cnt=-AH_CONSTANT;
0054c6  48a6              LDR      r0,|L1.22368|
0054c8  61a0              STR      r0,[r4,#0x18]
                  |L1.21706|
;;;8475   			}
;;;8476   
;;;8477   		}
;;;8478   
;;;8479   			
;;;8480   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0054ca  f8390015          LDRH     r0,[r9,r5,LSL #1]
0054ce  f7fffffe          BL       lc640_read_int
0054d2  4601              MOV      r1,r0
;;;8481   	
;;;8482   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0054d4  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0054d8  4558              CMP      r0,r11
0054da  d102              BNE      |L1.21730|
0054dc  489f              LDR      r0,|L1.22364|
0054de  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21730|
;;;8483   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8484   		           	
;;;8485   	tempUL*=1000L;
0054e2  f44f727a          MOV      r2,#0x3e8
0054e6  fb01f102          MUL      r1,r1,r2
;;;8486   
;;;8487   
;;;8488   	if(tempUL_==0) tempUL=0;
0054ea  b158              CBZ      r0,|L1.21764|
;;;8489   	else tempUL/=tempUL_;
0054ec  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21744|
;;;8490   
;;;8491   	tempUL/=10L;
0054f0  f04f010a          MOV      r1,#0xa
0054f4  fbb0f0f1          UDIV     r0,r0,r1
;;;8492   
;;;8493   	bat[in]._zar=(unsigned short)tempUL;
0054f8  8260              STRH     r0,[r4,#0x12]
;;;8494   
;;;8495   	if(BAT_TYPE==1)
0054fa  489a              LDR      r0,|L1.22372|
0054fc  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
0054fe  2801              CMP      r0,#1
005500  d003              BEQ      |L1.21770|
005502  e00b              B        |L1.21788|
                  |L1.21764|
005504  f04f0000          MOV      r0,#0                 ;8488
005508  e7f2              B        |L1.21744|
                  |L1.21770|
;;;8496   		{
;;;8497   		bat[in]._zar=lakb[in]._s_o_c;
00550a  f04f002b          MOV      r0,#0x2b
00550e  4996              LDR      r1,|L1.22376|
005510  fb05f000          MUL      r0,r5,r0
005514  eb010040          ADD      r0,r1,r0,LSL #1
005518  8a40              LDRH     r0,[r0,#0x12]
00551a  8260              STRH     r0,[r4,#0x12]
                  |L1.21788|
;;;8498   		}
;;;8499   	
;;;8500   	gran((signed short*)&bat[in]._zar,0,100);
00551c  f1040012          ADD      r0,r4,#0x12
005520  2264              MOVS     r2,#0x64
005522  2100              MOVS     r1,#0
005524  f7fffffe          BL       gran
                  |L1.21800|
;;;8501        }
;;;8502   
;;;8503   
;;;8504   //Подсчет тока разряда батареи      
;;;8505   if(bat[in]._wrk==1)
005528  7c20              LDRB     r0,[r4,#0x10]
00552a  2801              CMP      r0,#1
00552c  d113              BNE      |L1.21846|
;;;8506   	{
;;;8507   	if(bat[in]._Iintegr<36000)
00552e  8c20              LDRH     r0,[r4,#0x20]
005530  4540              CMP      r0,r8
005532  d20f              BCS      |L1.21844|
;;;8508   		{          
;;;8509   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005534  f9b40008          LDRSH    r0,[r4,#8]
005538  f7fffffe          BL       abs
00553c  8c21              LDRH     r1,[r4,#0x20]
00553e  4408              ADD      r0,r0,r1
005540  b280              UXTH     r0,r0
005542  8420              STRH     r0,[r4,#0x20]
;;;8510   		if(bat[in]._Iintegr>=36000)
005544  4540              CMP      r0,r8
005546  d306              BCC      |L1.21846|
;;;8511   			{
;;;8512   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005548  8427              STRH     r7,[r4,#0x20]
;;;8513   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00554a  8c60              LDRH     r0,[r4,#0x22]
00554c  f1000001          ADD      r0,r0,#1
005550  8460              STRH     r0,[r4,#0x22]
005552  e000              B        |L1.21846|
                  |L1.21844|
;;;8514   			}
;;;8515   		}
;;;8516   	else 
;;;8517   		{
;;;8518   		bat[in]._Iintegr=0;
005554  8427              STRH     r7,[r4,#0x20]
                  |L1.21846|
;;;8519   		}	
;;;8520   	} 
;;;8521   	    
;;;8522   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8523   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
005556  4e85              LDR      r6,|L1.22380|
005558  4985              LDR      r1,|L1.22384|
00555a  f8df9218          LDR      r9,|L1.22388|
00555e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005562  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
005566  4288              CMP      r0,r1
005568  dd02              BLE      |L1.21872|
00556a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00556e  b380              CBZ      r0,|L1.21970|
                  |L1.21872|
;;;8524   	{
;;;8525   	bat[in]._sign_temper_cnt++;
;;;8526   	}
;;;8527   else 
;;;8528   	{
;;;8529   	bat[in]._sign_temper_cnt--;
005570  f8b40044          LDRH     r0,[r4,#0x44]
005574  f1a00001          SUB      r0,r0,#1
005578  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.21884|
;;;8530   	}
;;;8531   #else
;;;8532   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8533   	{
;;;8534   	bat[in]._sign_temper_cnt++;
;;;8535   	}
;;;8536   else 
;;;8537   	{
;;;8538   	bat[in]._sign_temper_cnt--;
;;;8539   	}
;;;8540   #endif
;;;8541   gran(&bat[in]._sign_temper_cnt,0,600);
00557c  f44f7b16          MOV      r11,#0x258
005580  f1040044          ADD      r0,r4,#0x44
005584  465a              MOV      r2,r11
005586  2100              MOVS     r1,#0
005588  f7fffffe          BL       gran
;;;8542   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
00558c  f9b40044          LDRSH    r0,[r4,#0x44]
005590  f2402a4e          MOV      r10,#0x24e
005594  4550              CMP      r0,r10
005596  db05              BLT      |L1.21924|
005598  f8941043          LDRB     r1,[r4,#0x43]
00559c  f0410101          ORR      r1,r1,#1
0055a0  f8841043          STRB     r1,[r4,#0x43]
                  |L1.21924|
;;;8543   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0055a4  280a              CMP      r0,#0xa
0055a6  dc05              BGT      |L1.21940|
0055a8  f8940043          LDRB     r0,[r4,#0x43]
0055ac  f0200001          BIC      r0,r0,#1
0055b0  f8840043          STRB     r0,[r4,#0x43]
                  |L1.21940|
;;;8544   
;;;8545   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0055b4  f8940043          LDRB     r0,[r4,#0x43]
0055b8  07c1              LSLS     r1,r0,#31
0055ba  d005              BEQ      |L1.21960|
0055bc  06c0              LSLS     r0,r0,#27
0055be  d403              BMI      |L1.21960|
0055c0  2101              MOVS     r1,#1
0055c2  4628              MOV      r0,r5
0055c4  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21960|
;;;8546   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0055c8  f8940043          LDRB     r0,[r4,#0x43]
0055cc  07c1              LSLS     r1,r0,#31
0055ce  d008              BEQ      |L1.21986|
0055d0  e00d              B        |L1.21998|
                  |L1.21970|
0055d2  e7ff              B        |L1.21972|
                  |L1.21972|
0055d4  f8b40044          LDRH     r0,[r4,#0x44]         ;8525
0055d8  f1000001          ADD      r0,r0,#1              ;8525
0055dc  f8a40044          STRH     r0,[r4,#0x44]         ;8525
0055e0  e7cc              B        |L1.21884|
                  |L1.21986|
0055e2  06c0              LSLS     r0,r0,#27
0055e4  d503              BPL      |L1.21998|
0055e6  2100              MOVS     r1,#0
0055e8  4628              MOV      r0,r5
0055ea  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21998|
;;;8547   
;;;8548   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
0055ee  f8940043          LDRB     r0,[r4,#0x43]
0055f2  07c1              LSLS     r1,r0,#31
0055f4  d004              BEQ      |L1.22016|
0055f6  f0400010          ORR      r0,r0,#0x10
0055fa  f8840043          STRB     r0,[r4,#0x43]
0055fe  e003              B        |L1.22024|
                  |L1.22016|
;;;8549   else 								bat[in]._temper_stat&=~(1<<4);
005600  f0200010          BIC      r0,r0,#0x10
005604  f8840043          STRB     r0,[r4,#0x43]
                  |L1.22024|
;;;8550   
;;;8551   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8552   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005608  495b              LDR      r1,|L1.22392|
00560a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00560e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005612  4288              CMP      r0,r1
005614  dd02              BLE      |L1.22044|
005616  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00561a  b3d0              CBZ      r0,|L1.22162|
                  |L1.22044|
;;;8553   	{
;;;8554   	bat[in]._max_temper_cnt++;
;;;8555   	}
;;;8556   else 
;;;8557   	{
;;;8558   	bat[in]._max_temper_cnt--;
00561c  f8b40046          LDRH     r0,[r4,#0x46]
005620  f1a00001          SUB      r0,r0,#1
005624  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.22056|
;;;8559   	}
;;;8560   #else
;;;8561   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8562   	{
;;;8563   	bat[in]._max_temper_cnt++;
;;;8564   	}
;;;8565   else 
;;;8566   	{
;;;8567   	bat[in]._max_temper_cnt--;
;;;8568   	}
;;;8569   #endif
;;;8570   
;;;8571   gran(&bat[in]._max_temper_cnt,0,600);
005628  f1040046          ADD      r0,r4,#0x46
00562c  465a              MOV      r2,r11
00562e  2100              MOVS     r1,#0
005630  f7fffffe          BL       gran
;;;8572   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005634  f9b40046          LDRSH    r0,[r4,#0x46]
005638  4550              CMP      r0,r10
00563a  db05              BLT      |L1.22088|
00563c  f8941043          LDRB     r1,[r4,#0x43]
005640  f0410102          ORR      r1,r1,#2
005644  f8841043          STRB     r1,[r4,#0x43]
                  |L1.22088|
;;;8573   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005648  280a              CMP      r0,#0xa
00564a  dc05              BGT      |L1.22104|
00564c  f8940043          LDRB     r0,[r4,#0x43]
005650  f0200002          BIC      r0,r0,#2
005654  f8840043          STRB     r0,[r4,#0x43]
                  |L1.22104|
;;;8574   
;;;8575   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005658  f8940043          LDRB     r0,[r4,#0x43]
00565c  0781              LSLS     r1,r0,#30
00565e  d505              BPL      |L1.22124|
005660  0680              LSLS     r0,r0,#26
005662  d403              BMI      |L1.22124|
005664  2103              MOVS     r1,#3
005666  4628              MOV      r0,r5
005668  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22124|
;;;8576   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
00566c  f8940043          LDRB     r0,[r4,#0x43]
005670  0781              LSLS     r1,r0,#30
005672  d405              BMI      |L1.22144|
005674  0680              LSLS     r0,r0,#26
005676  d503              BPL      |L1.22144|
005678  2102              MOVS     r1,#2
00567a  4628              MOV      r0,r5
00567c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22144|
;;;8577   
;;;8578   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005680  f8940043          LDRB     r0,[r4,#0x43]
005684  0781              LSLS     r1,r0,#30
005686  d50c              BPL      |L1.22178|
005688  f0400020          ORR      r0,r0,#0x20
00568c  f8840043          STRB     r0,[r4,#0x43]
005690  e00b              B        |L1.22186|
                  |L1.22162|
005692  e7ff              B        |L1.22164|
                  |L1.22164|
005694  f8b40046          LDRH     r0,[r4,#0x46]         ;8554
005698  f1000001          ADD      r0,r0,#1              ;8554
00569c  f8a40046          STRH     r0,[r4,#0x46]         ;8554
0056a0  e7c2              B        |L1.22056|
                  |L1.22178|
;;;8579   else 								bat[in]._temper_stat&=~(1<<5);
0056a2  f0200020          BIC      r0,r0,#0x20
0056a6  f8840043          STRB     r0,[r4,#0x43]
                  |L1.22186|
;;;8580   
;;;8581   //Подсчет наработки батареи
;;;8582   if(bat[in]._resurs_cnt<36000)
0056aa  6ca0              LDR      r0,[r4,#0x48]
0056ac  4540              CMP      r0,r8
0056ae  da12              BGE      |L1.22230|
;;;8583   	{               
;;;8584   	bat[in]._resurs_cnt++;
0056b0  f1000001          ADD      r0,r0,#1
0056b4  64a0              STR      r0,[r4,#0x48]
;;;8585   	if(bat[in]._resurs_cnt>=36000)
0056b6  4540              CMP      r0,r8
0056b8  db0e              BLT      |L1.22232|
;;;8586   		{
;;;8587   		bat[in]._resurs_cnt=0;
0056ba  64a7              STR      r7,[r4,#0x48]
;;;8588   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0056bc  4c2f              LDR      r4,|L1.22396|
0056be  f8340015          LDRH     r0,[r4,r5,LSL #1]
0056c2  f7fffffe          BL       lc640_read_int
0056c6  1c40              ADDS     r0,r0,#1
0056c8  b201              SXTH     r1,r0
0056ca  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0056ce  e8bd5ffc          POP      {r2-r12,lr}
0056d2  f7ffbffe          B.W      lc640_write_int
                  |L1.22230|
;;;8589   		}
;;;8590   	}
;;;8591   else bat[in]._resurs_cnt=0;
0056d6  64a7              STR      r7,[r4,#0x48]
                  |L1.22232|
;;;8592   
;;;8593   
;;;8594   #ifndef UKU_220_V2
;;;8595   #ifndef UKU_GLONASS
;;;8596   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8597   //#ifndef UKU_6U
;;;8598   //#ifndef UKU_220
;;;8599   if(UBM_AV)
;;;8600        {
;;;8601        signed short temp_SS;
;;;8602   #ifdef UKU_220
;;;8603   temp_SS=bat[in]._Ub/2;
;;;8604   #else
;;;8605        if(U0B<600)
;;;8606             {
;;;8607   
;;;8608             temp_SS=bat[in]._Ub/4;
;;;8609             }
;;;8610        else temp_SS=bat[in]._Ub/5;
;;;8611   	
;;;8612   	temp_SS+=temp_SS;     
;;;8613   #endif
;;;8614        temp_SS-=(bat[in]._Ubm);
;;;8615   
;;;8616        temp_SS=abs(temp_SS);
;;;8617   
;;;8618        temp_SS*=10;
;;;8619   
;;;8620        temp_SS/=12;
;;;8621   
;;;8622        bat[in]._dUbm=temp_SS;
;;;8623   
;;;8624   
;;;8625        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8626   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8627   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8628   		(!(bat[in]._av & 2))  )
;;;8629   		{
;;;8630   		bat[in]._cnt_as++;
;;;8631   		if(bat[in]._cnt_as==3000)
;;;8632   			{
;;;8633   			avar_bat_as_hndl(in,1);
;;;8634   			}
;;;8635   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8636   		}
;;;8637   	else 
;;;8638   		{
;;;8639   		if(bat[in]._cnt_as)
;;;8640   			{
;;;8641   			bat[in]._cnt_as--;
;;;8642   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8643   			}
;;;8644   		}
;;;8645        
;;;8646        }
;;;8647   //#endif 
;;;8648   #endif 
;;;8649   #endif
;;;8650   #endif
;;;8651   
;;;8652   }
0056d8  e8bd9ffc          POP      {r2-r12,pc}
;;;8653   
                          ENDP

                  bat_hndl_zvu PROC
;;;8655   //-----------------------------------------------
;;;8656   void bat_hndl_zvu(char in)
0056dc  e92d4ff0          PUSH     {r4-r11,lr}
;;;8657   {
0056e0  b08d              SUB      sp,sp,#0x34
0056e2  4604              MOV      r4,r0
;;;8658   char i;
;;;8659   short bat_hndl_i_temp;
;;;8660   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0056e4  f04f021c          MOV      r2,#0x1c
0056e8  4925              LDR      r1,|L1.22400|
0056ea  4668              MOV      r0,sp
0056ec  f7fffffe          BL       __aeabi_memcpy4
;;;8661   
;;;8662   //Ib_ips_termokompensat[0]=-500;
;;;8663   //Ib_ips_termokompensat[1]=-1000;
;;;8664   
;;;8665   bat_hndl_zvu_cnter[in]++;
0056f0  4924              LDR      r1,|L1.22404|
0056f2  5d08              LDRB     r0,[r1,r4]
0056f4  f1000001          ADD      r0,r0,#1
0056f8  5508              STRB     r0,[r1,r4]
;;;8666   //Ib_ips_termokompensat=-17000;
;;;8667    
;;;8668   if(bat_hndl_zvu_init[in]==0)
0056fa  f1a10854          SUB      r8,r1,#0x54
;;;8669   	{
;;;8670   	//Инициализация при включении системы
;;;8671   	bat_hndl_zvu_Q[in]=(long)lc640_read_int(EE_BAT_ZAR_CNT[in]);
0056fe  f8df9088          LDR      r9,|L1.22408|
005702  f8180004          LDRB     r0,[r8,r4]            ;8668
;;;8672   	if((bat_hndl_zvu_Q[in]>100L)||(bat_hndl_zvu_Q[in]<0L)) bat_hndl_zvu_Q[in]=100L;
;;;8673   	bat_hndl_zvu_Q[in]*=10000L;
;;;8674   
;;;8675   	bat_hndl_zvu_init[in]=1;
;;;8676   	}
;;;8677   else 
;;;8678   	{
;;;8679   	if(Ib_ips_termokompensat[in]<-IKB)
;;;8680   		{
;;;8681   		bat_hndl_i_vector[in]=0;
;;;8682   		bat_hndl_i_zar_price[in]=0L;
;;;8683   			
;;;8684   		bat_hndl_i[in]=-Ib_ips_termokompensat[in];
;;;8685   		I_from_t_table[in][0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8686   		I_from_t_table[in][1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8687   		I_from_t_table[in][2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8688   		I_from_t_table[in][3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8689   		I_from_t_table[in][4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8690   		I_from_t_table[in][5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8691   		I_from_t_table[in][6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8692   		
;;;8693   		I_from_t_table[in][0]=(short)((((long)I_from_t_table[in][0])*((long)BAT_K_OLD))/100L);
;;;8694   		I_from_t_table[in][1]=(short)((((long)I_from_t_table[in][1])*((long)BAT_K_OLD))/100L);
;;;8695   		I_from_t_table[in][2]=(short)((((long)I_from_t_table[in][2])*((long)BAT_K_OLD))/100L);
;;;8696   		I_from_t_table[in][3]=(short)((((long)I_from_t_table[in][3])*((long)BAT_K_OLD))/100L);
;;;8697   		I_from_t_table[in][4]=(short)((((long)I_from_t_table[in][4])*((long)BAT_K_OLD))/100L);
;;;8698   		I_from_t_table[in][5]=(short)((((long)I_from_t_table[in][5])*((long)BAT_K_OLD))/100L);
;;;8699   		I_from_t_table[in][6]=(short)((((long)I_from_t_table[in][6])*((long)BAT_K_OLD))/100L);
;;;8700   
;;;8701   		bat_hndl_i_temp=bat_hndl_i[in]/10;
;;;8702   		for(i=0;i<7;i++)
;;;8703   			{
;;;8704   			if(bat_hndl_i_temp>=I_from_t_table[in][i])
;;;8705   				{
;;;8706   				break;
;;;8707   				}
;;;8708   			}
;;;8709   		 if(i==0) bat_hndl_t_razr[in]=bat_hndl_t_razr_const[0];
;;;8710   		 else if((i>=1)&&(i<7))
;;;8711   		 	{
;;;8712   			short i1,i2;
;;;8713   			i1=I_from_t_table[in][i-1]-bat_hndl_i_temp;
;;;8714   			i2=I_from_t_table[in][i-1]-I_from_t_table[in][i];
;;;8715   			bat_hndl_t_razr[in]=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8716   			bat_hndl_t_razr[in]*=(long)i1;
;;;8717   			bat_hndl_t_razr[in]/=(long)i2;
;;;8718   			bat_hndl_t_razr[in]+=bat_hndl_t_razr_const[i-1];
;;;8719   			}
;;;8720   		else if(i>=7)
;;;8721   			{
;;;8722   			bat_hndl_t_razr[in]=bat_hndl_t_razr_const[6];
;;;8723   			}
;;;8724   		bat_hndl_proc_razr[in]=1000000L/bat_hndl_t_razr[in];
005706  4f21              LDR      r7,|L1.22412|
005708  f04f0b01          MOV      r11,#1                ;8675
00570c  f04f0600          MOV      r6,#0                 ;8668
005710  f101058a          ADD      r5,r1,#0x8a           ;8671
005714  2800              CMP      r0,#0                 ;8668
005716  d07d              BEQ      |L1.22548|
005718  481d              LDR      r0,|L1.22416|
00571a  f1a50348          SUB      r3,r5,#0x48           ;8684
00571e  f1030828          ADD      r8,r3,#0x28           ;8682
005722  f9301014          LDRSH    r1,[r0,r4,LSL #1]     ;8679
005726  481b              LDR      r0,|L1.22420|
005728  f1a30a94          SUB      r10,r3,#0x94          ;8681
00572c  f9b02000          LDRSH    r2,[r0,#0]            ;8679  ; IKB
005730  4819              LDR      r0,|L1.22424|
005732  f1c20c00          RSB      r12,r2,#0             ;8679
005736  4561              CMP      r1,r12                ;8679
005738  f9b00000          LDRSH    r0,[r0,#0]            ;8691
00573c  da6b              BGE      |L1.22550|
00573e  f80a6004          STRB     r6,[r10,r4]           ;8681
005742  f8486024          STR      r6,[r8,r4,LSL #2]     ;8682
005746  f1c10100          RSB      r1,r1,#0              ;8684
00574a  e027              B        |L1.22428|
                  |L1.22348|
                          DCD      bat_u_old_cnt
                  |L1.22352|
                          DCD      0x40024020
                  |L1.22356|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22360|
                          DCD      BAT_C_REAL
                  |L1.22364|
                          DCD      BAT_C_NOM
                  |L1.22368|
                          DCD      0xffff7360
                  |L1.22372|
                          DCD      BAT_TYPE
                  |L1.22376|
                          DCD      lakb
                  |L1.22380|
                          DCD      t_ext
                  |L1.22384|
                          DCD      TBATSIGN
                  |L1.22388|
                          DCD      ND_EXT
                  |L1.22392|
                          DCD      TBATMAX
                  |L1.22396|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22400|
                          DCD      ||area_number.19||+0x20
                  |L1.22404|
                          DCD      ||area_number.25||+0x8a
                  |L1.22408|
                          DCD      EE_BAT_ZAR_CNT
                  |L1.22412|
                          DCD      0x000f4240
                  |L1.22416|
                          DCD      Ib_ips_termokompensat
                  |L1.22420|
                          DCD      IKB
                  |L1.22424|
                          DCD      BAT_C_POINT_20
                  |L1.22428|
00579c  b20a              SXTH     r2,r1                 ;8684
00579e  f8232014          STRH     r2,[r3,r4,LSL #1]     ;8684
0057a2  920c              STR      r2,[sp,#0x30]         ;8684
0057a4  49fd              LDR      r1,|L1.23452|
0057a6  ebc403c4          RSB      r3,r4,r4,LSL #3       ;8685
0057aa  8809              LDRH     r1,[r1,#0]            ;8685  ; BAT_C_POINT_1_6
0057ac  eb010141          ADD      r1,r1,r1,LSL #1       ;8685
0057b0  ea4f0141          LSL      r1,r1,#1              ;8685
0057b4  fa0ffb81          SXTH     r11,r1                ;8685
0057b8  49f9              LDR      r1,|L1.23456|
0057ba  8809              LDRH     r1,[r1,#0]            ;8686  ; BAT_C_POINT_1_2
0057bc  ea4f0141          LSL      r1,r1,#1              ;8686
0057c0  fa0ffe81          SXTH     lr,r1                 ;8686
0057c4  49f7              LDR      r1,|L1.23460|
0057c6  f8cde02c          STR      lr,[sp,#0x2c]         ;8686
0057ca  eb010143          ADD      r1,r1,r3,LSL #1       ;8686
0057ce  4af6              LDR      r2,|L1.23464|
0057d0  f9b2c000          LDRSH    r12,[r2,#0]           ;8687  ; BAT_C_POINT_1
0057d4  4af5              LDR      r2,|L1.23468|
0057d6  f04f0e03          MOV      lr,#3                 ;8688
0057da  f9b22000          LDRSH    r2,[r2,#0]            ;8688  ; BAT_C_POINT_3
0057de  fb92f2fe          SDIV     r2,r2,lr              ;8688
0057e2  fa0ffe82          SXTH     lr,r2                 ;8688
0057e6  f8cde028          STR      lr,[sp,#0x28]         ;8688
0057ea  4af1              LDR      r2,|L1.23472|
0057ec  f04f0e05          MOV      lr,#5                 ;8689
0057f0  f9b22000          LDRSH    r2,[r2,#0]            ;8689  ; BAT_C_POINT_5
0057f4  fb92f2fe          SDIV     r2,r2,lr              ;8689
0057f8  fa0ffe82          SXTH     lr,r2                 ;8689
0057fc  f8cde024          STR      lr,[sp,#0x24]         ;8689
005800  4aec              LDR      r2,|L1.23476|
005802  f9b2e000          LDRSH    lr,[r2,#0]            ;8690  ; BAT_C_POINT_10
005806  f04f020a          MOV      r2,#0xa               ;8690
00580a  fb9ef2f2          SDIV     r2,lr,r2              ;8690
00580e  fa0ffe82          SXTH     lr,r2                 ;8690
005812  e001              B        |L1.22552|
                  |L1.22548|
005814  e06d              B        |L1.22770|
                  |L1.22550|
005816  e0c0              B        |L1.22938|
                  |L1.22552|
005818  f8cde020          STR      lr,[sp,#0x20]         ;8690
00581c  f04f0214          MOV      r2,#0x14              ;8691
005820  fb90f0f2          SDIV     r0,r0,r2              ;8691
005824  fa0ffe80          SXTH     lr,r0                 ;8691
005828  f8cde01c          STR      lr,[sp,#0x1c]         ;8691
00582c  48e2              LDR      r0,|L1.23480|
00582e  f04f0264          MOV      r2,#0x64              ;8693
005832  f8dfe370          LDR      lr,|L1.23460|
005836  f9b00000          LDRSH    r0,[r0,#0]            ;8693  ; BAT_K_OLD
00583a  fb0bfb00          MUL      r11,r11,r0            ;8693
00583e  fb9bfbf2          SDIV     r11,r11,r2            ;8693
005842  f82eb013          STRH     r11,[lr,r3,LSL #1]    ;8693
005846  f8dde02c          LDR      lr,[sp,#0x2c]         ;8694
00584a  fb0efe00          MUL      lr,lr,r0              ;8694
00584e  fb9ef3f2          SDIV     r3,lr,r2              ;8694
005852  804b              STRH     r3,[r1,#2]            ;8694
005854  fb0cfc00          MUL      r12,r12,r0            ;8695
005858  fb9cf3f2          SDIV     r3,r12,r2             ;8695
00585c  808b              STRH     r3,[r1,#4]            ;8695
00585e  f8dde028          LDR      lr,[sp,#0x28]         ;8696
005862  fb0efe00          MUL      lr,lr,r0              ;8696
005866  fb9ef3f2          SDIV     r3,lr,r2              ;8696
00586a  80cb              STRH     r3,[r1,#6]            ;8696
00586c  f8dde024          LDR      lr,[sp,#0x24]         ;8697
005870  fb0efe00          MUL      lr,lr,r0              ;8697
005874  fb9ef3f2          SDIV     r3,lr,r2              ;8697
005878  810b              STRH     r3,[r1,#8]            ;8697
00587a  f8dde020          LDR      lr,[sp,#0x20]         ;8698
00587e  fb0efe00          MUL      lr,lr,r0              ;8698
005882  fb9ef3f2          SDIV     r3,lr,r2              ;8698
005886  814b              STRH     r3,[r1,#0xa]          ;8698
005888  f8dde01c          LDR      lr,[sp,#0x1c]         ;8699
00588c  fb0efe00          MUL      lr,lr,r0              ;8699
005890  fb9ef0f2          SDIV     r0,lr,r2              ;8699
005894  8188              STRH     r0,[r1,#0xc]          ;8699
005896  9a0c              LDR      r2,[sp,#0x30]         ;8701
005898  f04f000a          MOV      r0,#0xa               ;8701
00589c  fb92f0f0          SDIV     r0,r2,r0              ;8701
0058a0  b202              SXTH     r2,r0                 ;8701
0058a2  4630              MOV      r0,r6                 ;8702
                  |L1.22692|
0058a4  f9313010          LDRSH    r3,[r1,r0,LSL #1]     ;8704
0058a8  4293              CMP      r3,r2                 ;8704
0058aa  dd04              BLE      |L1.22710|
0058ac  f1000001          ADD      r0,r0,#1              ;8702
0058b0  b2c0              UXTB     r0,r0                 ;8702
0058b2  2807              CMP      r0,#7                 ;8702
0058b4  d3f6              BCC      |L1.22692|
                  |L1.22710|
0058b6  f8dfb304          LDR      r11,|L1.23484|
0058ba  b388              CBZ      r0,|L1.22816|
0058bc  1e43              SUBS     r3,r0,#1              ;8710
0058be  2b06              CMP      r3,#6                 ;8710
0058c0  d233              BCS      |L1.22826|
0058c2  f831c013          LDRH     r12,[r1,r3,LSL #1]    ;8713
0058c6  ebac0202          SUB      r2,r12,r2             ;8713
0058ca  b212              SXTH     r2,r2                 ;8713
0058cc  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;8714
0058d0  ebac0101          SUB      r1,r12,r1             ;8714
0058d4  b209              SXTH     r1,r1                 ;8714
0058d6  f85d0020          LDR      r0,[sp,r0,LSL #2]     ;8715
0058da  f85d3023          LDR      r3,[sp,r3,LSL #2]     ;8715
0058de  eba00003          SUB      r0,r0,r3              ;8715
0058e2  fb00f002          MUL      r0,r0,r2              ;8716
0058e6  fb90f0f1          SDIV     r0,r0,r1              ;8717
0058ea  4418              ADD      r0,r0,r3              ;8718
0058ec  f84b0024          STR      r0,[r11,r4,LSL #2]    ;8718
0058f0  e020              B        |L1.22836|
                  |L1.22770|
0058f2  f8390014          LDRH     r0,[r9,r4,LSL #1]     ;8671
0058f6  f7fffffe          BL       lc640_read_int
0058fa  f8450024          STR      r0,[r5,r4,LSL #2]     ;8671
0058fe  2865              CMP      r0,#0x65              ;8672
005900  d303              BCC      |L1.22794|
005902  f04f0064          MOV      r0,#0x64              ;8672
005906  f8450024          STR      r0,[r5,r4,LSL #2]     ;8672
                  |L1.22794|
00590a  f8550024          LDR      r0,[r5,r4,LSL #2]     ;8673
00590e  f2427110          MOV      r1,#0x2710            ;8673
005912  fb00f001          MUL      r0,r0,r1              ;8673
005916  f8450024          STR      r0,[r5,r4,LSL #2]     ;8673
00591a  f808b004          STRB     r11,[r8,r4]           ;8675
00591e  e0a4              B        |L1.23146|
                  |L1.22816|
005920  e7ff              B        |L1.22818|
                  |L1.22818|
005922  9800              LDR      r0,[sp,#0]            ;8709
005924  f84b0024          STR      r0,[r11,r4,LSL #2]    ;8709
005928  e004              B        |L1.22836|
                  |L1.22826|
00592a  2807              CMP      r0,#7                 ;8720
00592c  d302              BCC      |L1.22836|
00592e  9806              LDR      r0,[sp,#0x18]         ;8722
005930  f84b0024          STR      r0,[r11,r4,LSL #2]    ;8722
                  |L1.22836|
005934  f85b0024          LDR      r0,[r11,r4,LSL #2]
005938  49a0              LDR      r1,|L1.23484|
00593a  fb97f0f0          SDIV     r0,r7,r0
00593e  3118              ADDS     r1,r1,#0x18
005940  f8410024          STR      r0,[r1,r4,LSL #2]
;;;8725   
;;;8726   		if(bat_hndl_zvu_Q[in]>bat_hndl_proc_razr[in])bat_hndl_zvu_Q[in]-=bat_hndl_proc_razr[in];
005944  f8551024          LDR      r1,[r5,r4,LSL #2]
005948  4281              CMP      r1,r0
00594a  dd04              BLE      |L1.22870|
00594c  eba10000          SUB      r0,r1,r0
005950  f8450024          STR      r0,[r5,r4,LSL #2]
005954  e001              B        |L1.22874|
                  |L1.22870|
;;;8727   		else bat_hndl_zvu_Q[in]=0L;
005956  f8456024          STR      r6,[r5,r4,LSL #2]
                  |L1.22874|
;;;8728   
;;;8729   		bat_hndl_t_razr_hour[in]=(short)(bat_hndl_remain_time[in]/3600L);
00595a  4898              LDR      r0,|L1.23484|
00595c  f44f6161          MOV      r1,#0xe10
005960  3020              ADDS     r0,r0,#0x20
005962  4a96              LDR      r2,|L1.23484|
005964  f8500024          LDR      r0,[r0,r4,LSL #2]
005968  f1a20234          SUB      r2,r2,#0x34
00596c  fb90f1f1          SDIV     r1,r0,r1
005970  f8221014          STRH     r1,[r2,r4,LSL #1]
;;;8730   		bat_hndl_t_razr_min[in]=(short)(bat_hndl_remain_time[in]/60L);
005974  f04f013c          MOV      r1,#0x3c
005978  fb90f0f1          SDIV     r0,r0,r1
00597c  f1020204          ADD      r2,r2,#4
005980  b200              SXTH     r0,r0
005982  f8220014          STRH     r0,[r2,r4,LSL #1]
;;;8731   		bat_hndl_t_razr_mininhour[in]=bat_hndl_t_razr_min[in]%60L;
005986  fb90f2f1          SDIV     r2,r0,r1
00598a  fb010012          MLS      r0,r1,r2,r0
00598e  498b              LDR      r1,|L1.23484|
005990  f1a1012c          SUB      r1,r1,#0x2c
005994  f8210014          STRH     r0,[r1,r4,LSL #1]
005998  e024              B        |L1.23012|
                  |L1.22938|
;;;8732   
;;;8733   		}
;;;8734   	else if(Ib_ips_termokompensat[in]>IKB)
00599a  4291              CMP      r1,r2
00599c  dd22              BLE      |L1.23012|
;;;8735   		{
;;;8736   		bat_hndl_i_vector[in]=1;
00599e  f80ab004          STRB     r11,[r10,r4]
;;;8737   
;;;8738   		bat_hndl_i[in]=Ib_ips_termokompensat[in];
0059a2  f8231014          STRH     r1,[r3,r4,LSL #1]
;;;8739   		bat_hndl_i_summ[in]+=(long)(bat_hndl_i[in]);
0059a6  4a85              LDR      r2,|L1.23484|
0059a8  3238              ADDS     r2,r2,#0x38
0059aa  f8523024          LDR      r3,[r2,r4,LSL #2]
0059ae  4419              ADD      r1,r1,r3
0059b0  f8421024          STR      r1,[r2,r4,LSL #2]
;;;8740   		if(bat_hndl_i_summ[in]>=36000L)
0059b4  f64843a0          MOV      r3,#0x8ca0
0059b8  4299              CMP      r1,r3
0059ba  db13              BLT      |L1.23012|
;;;8741   
;;;8742   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8743   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8744   			{
;;;8745   			bat_hndl_i_zar_price[0] = 1000000L;
;;;8746   			bat_hndl_i_zar_price[0] /= (long)BAT_C_POINT_20;
0059bc  fb97f0f0          SDIV     r0,r7,r0
0059c0  f8c80000          STR      r0,[r8,#0]  ; bat_hndl_i_zar_price
;;;8747   			bat_hndl_i_summ[in]-=36000L;
0059c4  eba10103          SUB      r1,r1,r3
0059c8  f8421024          STR      r1,[r2,r4,LSL #2]
;;;8748   			if(bat_hndl_zvu_Q[in]<1000000L)bat_hndl_zvu_Q[in]+=bat_hndl_i_zar_price[in];
0059cc  f8550024          LDR      r0,[r5,r4,LSL #2]
0059d0  42b8              CMP      r0,r7
0059d2  da05              BGE      |L1.23008|
0059d4  f8581024          LDR      r1,[r8,r4,LSL #2]
0059d8  4408              ADD      r0,r0,r1
0059da  f8450024          STR      r0,[r5,r4,LSL #2]
0059de  e001              B        |L1.23012|
                  |L1.23008|
;;;8749   			else bat_hndl_zvu_Q[in]=1000000L; 
0059e0  f8457024          STR      r7,[r5,r4,LSL #2]
                  |L1.23012|
;;;8750   			}
;;;8751   		}
;;;8752   
;;;8753   
;;;8754   	if(bat_hndl_i_vector[in]!=bat_hndl_i_vector_old[in])
0059e4  f8dfb1d4          LDR      r11,|L1.23484|
0059e8  f81a0004          LDRB     r0,[r10,r4]
0059ec  f1ab0bca          SUB      r11,r11,#0xca
0059f0  f81b1004          LDRB     r1,[r11,r4]
0059f4  4288              CMP      r0,r1
0059f6  d013              BEQ      |L1.23072|
;;;8755   		{
;;;8756   		if(bat_hndl_i_vector[in]==1)
0059f8  2801              CMP      r0,#1
0059fa  d111              BNE      |L1.23072|
;;;8757   			{
;;;8758   			signed short tempSS;
;;;8759   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT_ADR[in]);
0059fc  4870              LDR      r0,|L1.23488|
0059fe  f8300014          LDRH     r0,[r0,r4,LSL #1]
005a02  f7fffffe          BL       lc640_read_int
005a06  b200              SXTH     r0,r0
;;;8760   			bat_hndl_i_zar_price[in]=(bat_hndl_zvu_Q[in]-1000000L)/((long)tempSS);
005a08  f8551024          LDR      r1,[r5,r4,LSL #2]
005a0c  4a6d              LDR      r2,|L1.23492|
005a0e  4411              ADD      r1,r1,r2
005a10  fb91f0f0          SDIV     r0,r1,r0
005a14  f8480024          STR      r0,[r8,r4,LSL #2]
;;;8761   			bat_hndl_i_summ[in]=0;
005a18  f50b7081          ADD      r0,r11,#0x102
005a1c  f8406024          STR      r6,[r0,r4,LSL #2]
                  |L1.23072|
;;;8762   			}
;;;8763   		}
;;;8764   	bat_hndl_i_vector_old[in]=bat_hndl_i_vector[in];
005a20  f81a0004          LDRB     r0,[r10,r4]
005a24  f80b0004          STRB     r0,[r11,r4]
;;;8765   
;;;8766   	if((bat_hndl_zvu_Q[in]/10000L)!=lc640_read_int(EE_BAT_ZAR_CNT[in])) lc640_write_int(EE_BAT_ZAR_CNT[in],bat_hndl_zvu_Q[in]/10000L);
005a28  f8550024          LDR      r0,[r5,r4,LSL #2]
005a2c  f2427a10          MOV      r10,#0x2710
005a30  fb90f8fa          SDIV     r8,r0,r10
005a34  f8390014          LDRH     r0,[r9,r4,LSL #1]
005a38  f7fffffe          BL       lc640_read_int
005a3c  4580              CMP      r8,r0
005a3e  d008              BEQ      |L1.23122|
005a40  f8550024          LDR      r0,[r5,r4,LSL #2]
005a44  fb90f0fa          SDIV     r0,r0,r10
005a48  b201              SXTH     r1,r0
005a4a  f9390014          LDRSH    r0,[r9,r4,LSL #1]
005a4e  f7fffffe          BL       lc640_write_int
                  |L1.23122|
;;;8767   	bat_hndl_remain_time[in]=bat_hndl_zvu_Q[in]/bat_hndl_proc_razr[in];
005a52  485a              LDR      r0,|L1.23484|
005a54  f8551024          LDR      r1,[r5,r4,LSL #2]
005a58  3018              ADDS     r0,r0,#0x18
005a5a  f8500024          LDR      r0,[r0,r4,LSL #2]
005a5e  fb91f1f0          SDIV     r1,r1,r0
005a62  4856              LDR      r0,|L1.23484|
005a64  3020              ADDS     r0,r0,#0x20
005a66  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L1.23146|
;;;8768   	}
;;;8769   
;;;8770   if(bat_hndl_zvu_Q[in]>1000000L)	bat_hndl_zvu_Q[in]=1000000L;
005a6a  f8550024          LDR      r0,[r5,r4,LSL #2]
005a6e  42b8              CMP      r0,r7
005a70  dd02              BLE      |L1.23160|
005a72  f8457024          STR      r7,[r5,r4,LSL #2]
005a76  e003              B        |L1.23168|
                  |L1.23160|
;;;8771   else if(bat_hndl_zvu_Q[in]<0L)	bat_hndl_zvu_Q[in]=0L;
005a78  2800              CMP      r0,#0
005a7a  da01              BGE      |L1.23168|
005a7c  f8456024          STR      r6,[r5,r4,LSL #2]
                  |L1.23168|
;;;8772   
;;;8773   if((Ib_ips_termokompensat[in]/10<(2*IKB))&&(Ib_ips_termokompensat[in]/10>(-2*IKB))&&(!(bat[in]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005a80  4851              LDR      r0,|L1.23496|
;;;8774   	{
;;;8775   	if(bat_hndl_zvu_Q_cnt[in]<60)
005a82  4a4e              LDR      r2,|L1.23484|
005a84  f9301014          LDRSH    r1,[r0,r4,LSL #1]     ;8773
005a88  200a              MOVS     r0,#0xa               ;8773
005a8a  fb91f0f0          SDIV     r0,r1,r0              ;8773
005a8e  494f              LDR      r1,|L1.23500|
005a90  3a7e              SUBS     r2,r2,#0x7e
005a92  f9b11000          LDRSH    r1,[r1,#0]            ;8773  ; IKB
005a96  ebb00f41          CMP      r0,r1,LSL #1          ;8773
005a9a  da34              BGE      |L1.23302|
005a9c  4249              RSBS     r1,r1,#0              ;8773
005a9e  ebb00f41          CMP      r0,r1,LSL #1          ;8773
005aa2  dd30              BLE      |L1.23302|
005aa4  494a              LDR      r1,|L1.23504|
005aa6  eb040084          ADD      r0,r4,r4,LSL #2       ;8773
005aaa  eb011000          ADD      r0,r1,r0,LSL #4       ;8773
005aae  f8900041          LDRB     r0,[r0,#0x41]         ;8773
005ab2  07c0              LSLS     r0,r0,#31             ;8773
005ab4  d127              BNE      |L1.23302|
005ab6  4847              LDR      r0,|L1.23508|
005ab8  4947              LDR      r1,|L1.23512|
005aba  f9b00000          LDRSH    r0,[r0,#0]            ;8773  ; out_U
005abe  f9b11000          LDRSH    r1,[r1,#0]            ;8773  ; u_necc_up
005ac2  4288              CMP      r0,r1                 ;8773
005ac4  dc1f              BGT      |L1.23302|
005ac6  4945              LDR      r1,|L1.23516|
005ac8  f9b11000          LDRSH    r1,[r1,#0]            ;8773  ; u_necc_dn
005acc  4288              CMP      r0,r1                 ;8773
005ace  dd1a              BLE      |L1.23302|
005ad0  f1a20086          SUB      r0,r2,#0x86           ;8773
005ad4  f9b00056          LDRSH    r0,[r0,#0x56]         ;8773  ; main_kb_cnt
005ad8  280a              CMP      r0,#0xa               ;8773
005ada  db14              BLT      |L1.23302|
005adc  28c8              CMP      r0,#0xc8              ;8773
005ade  dc12              BGT      |L1.23302|
005ae0  5d10              LDRB     r0,[r2,r4]
005ae2  283c              CMP      r0,#0x3c
005ae4  d20c              BCS      |L1.23296|
;;;8776   		{
;;;8777   		bat_hndl_zvu_Q_cnt[in]++;
005ae6  f1000001          ADD      r0,r0,#1
005aea  b2c0              UXTB     r0,r0
005aec  5510              STRB     r0,[r2,r4]
;;;8778   		if(bat_hndl_zvu_Q_cnt[in]>=60)
005aee  283c              CMP      r0,#0x3c
005af0  d306              BCC      |L1.23296|
;;;8779   			{
;;;8780   			lc640_write_int(EE_BAT_ZAR_CNT[in],100);
005af2  f9390014          LDRSH    r0,[r9,r4,LSL #1]
005af6  2164              MOVS     r1,#0x64
005af8  f7fffffe          BL       lc640_write_int
;;;8781   			bat_hndl_zvu_Q[in]=1000000L;
005afc  f8457024          STR      r7,[r5,r4,LSL #2]
                  |L1.23296|
;;;8782   
;;;8783   
;;;8784   			}
;;;8785   		}
;;;8786   	}
;;;8787   else 
;;;8788   	{
;;;8789   	bat_hndl_zvu_Q_cnt[in]=0;
;;;8790   	}
;;;8791   
;;;8792   
;;;8793   
;;;8794   };
005b00  b00d              ADD      sp,sp,#0x34
005b02  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.23302|
005b06  5516              STRB     r6,[r2,r4]            ;8789
005b08  e7fa              B        |L1.23296|
;;;8795   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8799   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8800   void u_avt_set_hndl(void)
005b0a  e92d5fff          PUSH     {r0-r12,lr}
;;;8801   {
;;;8802   if(uavt_set_stat==uassSTEP1)
005b0e  4d34              LDR      r5,|L1.23520|
;;;8803   	{
;;;8804   	char i,find_succes;
;;;8805   
;;;8806   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8807   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8808   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8809   		{
;;;8810   		uavt_set_error_cnt=60;
005b10  4e34              LDR      r6,|L1.23524|
005b12  f8df80d4          LDR      r8,|L1.23528|
005b16  7828              LDRB     r0,[r5,#0]            ;8802  ; uavt_set_stat
;;;8811   		}
;;;8812   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8813   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8814   	find_succes=0;
;;;8815   /*	for(i=0;i<NUMIST;i++)
;;;8816   		{
;;;8817   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8818   		else
;;;8819   			{
;;;8820   			find_succes=0;
;;;8821   			break;
;;;8822   			}
;;;8823   		}*/
;;;8824   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
005b18  f8dfa0d0          LDR      r10,|L1.23532|
005b1c  2400              MOVS     r4,#0                 ;8813
;;;8825   
;;;8826   	if(find_succes==1)
;;;8827   		{
;;;8828   		uavt_set_stat=uassSTEP2;
005b1e  f04f0902          MOV      r9,#2
;;;8829   		}
;;;8830   	if(uavt_set_error_cnt)
;;;8831   		{
;;;8832   		uavt_set_error_cnt--;
;;;8833   		if(!uavt_set_error_cnt)
;;;8834   			{
;;;8835   			uavt_set_stat=uassOFF;
;;;8836   			uavt_set_result_stat=uasrsERR;
;;;8837   			avt_error_bps=100;
005b22  f04f0b64          MOV      r11,#0x64
005b26  2801              CMP      r0,#1                 ;8802
005b28  d12e              BNE      |L1.23432|
005b2a  f8980000          LDRB     r0,[r8,#0]            ;8808  ; uavt_set_stat_old
005b2e  2801              CMP      r0,#1                 ;8808
005b30  d002              BEQ      |L1.23352|
005b32  f04f003c          MOV      r0,#0x3c              ;8810
005b36  7030              STRB     r0,[r6,#0]            ;8810
                  |L1.23352|
005b38  230a              MOVS     r3,#0xa               ;8813
005b3a  2200              MOVS     r2,#0                 ;8813
005b3c  21e6              MOVS     r1,#0xe6              ;8813
005b3e  20e1              MOVS     r0,#0xe1              ;8813
005b40  f7fffffe          BL       mess_send
005b44  f04f0000          MOV      r0,#0                 ;8814
005b48  4929              LDR      r1,|L1.23536|
005b4a  f9b12000          LDRSH    r2,[r1,#0]            ;8824  ; bps_U
005b4e  f9ba1000          LDRSH    r1,[r10,#0]           ;8824  ; U_AVT
005b52  f1a10301          SUB      r3,r1,#1              ;8824
005b56  429a              CMP      r2,r3                 ;8824
005b58  db04              BLT      |L1.23396|
005b5a  1c49              ADDS     r1,r1,#1              ;8824
005b5c  428a              CMP      r2,r1                 ;8824
005b5e  dc01              BGT      |L1.23396|
005b60  f04f0001          MOV      r0,#1                 ;8824
                  |L1.23396|
005b64  2801              CMP      r0,#1                 ;8826
005b66  d101              BNE      |L1.23404|
005b68  f8859000          STRB     r9,[r5,#0]            ;8828
                  |L1.23404|
005b6c  7830              LDRB     r0,[r6,#0]            ;8830  ; uavt_set_error_cnt
005b6e  b158              CBZ      r0,|L1.23432|
005b70  f1a00001          SUB      r0,r0,#1              ;8832
005b74  b2c0              UXTB     r0,r0                 ;8832
005b76  7030              STRB     r0,[r6,#0]            ;8832
005b78  b930              CBNZ     r0,|L1.23432|
005b7a  702c              STRB     r4,[r5,#0]            ;8835
005b7c  481d              LDR      r0,|L1.23540|
005b7e  f8809000          STRB     r9,[r0,#0]            ;8836
005b82  481d              LDR      r0,|L1.23544|
005b84  f880b000          STRB     r11,[r0,#0]
                  |L1.23432|
;;;8838   			}
;;;8839   		}
;;;8840   	}
;;;8841   if(uavt_set_stat==uassSTEP2)
005b88  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8842   	{
;;;8843   	char i,find_succes;
;;;8844   
;;;8845   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005b8a  491c              LDR      r1,|L1.23548|
;;;8846   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005b8c  481c              LDR      r0,|L1.23552|
;;;8847   
;;;8848   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8849   		{
;;;8850   		uavt_set_error_cnt=60;
;;;8851   		}
;;;8852   
;;;8853   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8854   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8855   	find_succes=1;
;;;8856   
;;;8857   	for(i=0;i<NUMIST;i++)
;;;8858   		{
;;;8859   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8860   		else
;;;8861   			{
;;;8862   			find_succes=0;
;;;8863   			avt_error_bps=i+1;
;;;8864   			break;
;;;8865   			}
;;;8866   		}
;;;8867   
;;;8868   	if(find_succes==1)
;;;8869   		{
;;;8870   		uavt_set_stat=uassSTEP3;
;;;8871   		uavt_bps_pntr=0;
005b8e  4f1d              LDR      r7,|L1.23556|
005b90  2a02              CMP      r2,#2                 ;8841
005b92  d039              BEQ      |L1.23560|
;;;8872   		avt_plazma=0;
;;;8873   		}
;;;8874   
;;;8875   	if(uavt_set_error_cnt)
;;;8876   		{
;;;8877   		uavt_set_error_cnt--;
;;;8878   		if(!uavt_set_error_cnt)
;;;8879   			{
;;;8880   			uavt_set_stat=uassOFF;
;;;8881   			uavt_set_result_stat=uasrsERR;
;;;8882   			}
;;;8883   		}
;;;8884   	}
;;;8885   else if(uavt_set_stat==uassSTEP3)
005b94  2a03              CMP      r2,#3
005b96  d07c              BEQ      |L1.23698|
005b98  e102              B        |L1.23968|
005b9a  0000              DCW      0x0000
                  |L1.23452|
                          DCD      BAT_C_POINT_1_6
                  |L1.23456|
                          DCD      BAT_C_POINT_1_2
                  |L1.23460|
                          DCD      ||.bss||+0x44c
                  |L1.23464|
                          DCD      BAT_C_POINT_1
                  |L1.23468|
                          DCD      BAT_C_POINT_3
                  |L1.23472|
                          DCD      BAT_C_POINT_5
                  |L1.23476|
                          DCD      BAT_C_POINT_10
                  |L1.23480|
                          DCD      BAT_K_OLD
                  |L1.23484|
                          DCD      ||area_number.25||+0x104
                  |L1.23488|
                          DCD      EE_AMPER_CHAS_CNT_ADR
                  |L1.23492|
                          DCD      0xfff0bdc0
                  |L1.23496|
                          DCD      Ib_ips_termokompensat
                  |L1.23500|
                          DCD      IKB
                  |L1.23504|
                          DCD      bat
                  |L1.23508|
                          DCD      out_U
                  |L1.23512|
                          DCD      u_necc_up
                  |L1.23516|
                          DCD      u_necc_dn
                  |L1.23520|
                          DCD      uavt_set_stat
                  |L1.23524|
                          DCD      uavt_set_error_cnt
                  |L1.23528|
                          DCD      uavt_set_stat_old
                  |L1.23532|
                          DCD      U_AVT
                  |L1.23536|
                          DCD      bps_U
                  |L1.23540|
                          DCD      uavt_set_result_stat
                  |L1.23544|
                          DCD      avt_error_bps
                  |L1.23548|
                          DCD      u_max_temp
                  |L1.23552|
                          DCD      u_min_temp
                  |L1.23556|
                          DCD      uavt_bps_pntr
                  |L1.23560|
005c08  f9ba2000          LDRSH    r2,[r10,#0]           ;8845  ; U_AVT
005c0c  f04f0365          MOV      r3,#0x65              ;8845
005c10  fb02f303          MUL      r3,r2,r3              ;8845
005c14  fbb3f3fb          UDIV     r3,r3,r11             ;8845
005c18  468a              MOV      r10,r1                ;8845
005c1a  800b              STRH     r3,[r1,#0]            ;8845
005c1c  eb021142          ADD      r1,r2,r2,LSL #5       ;8846
005c20  eb010141          ADD      r1,r1,r1,LSL #1       ;8846
005c24  fbb1f1fb          UDIV     r1,r1,r11             ;8846
005c28  4683              MOV      r11,r0                ;8846
005c2a  8001              STRH     r1,[r0,#0]            ;8846
005c2c  f8980000          LDRB     r0,[r8,#0]            ;8848  ; uavt_set_stat_old
005c30  2802              CMP      r0,#2                 ;8848
005c32  d002              BEQ      |L1.23610|
005c34  f04f003c          MOV      r0,#0x3c              ;8850
005c38  7030              STRB     r0,[r6,#0]            ;8850
                  |L1.23610|
005c3a  230a              MOVS     r3,#0xa               ;8853
005c3c  21bf              MOVS     r1,#0xbf              ;8853
005c3e  20be              MOVS     r0,#0xbe              ;8853
005c40  f7fffffe          BL       mess_send
005c44  230a              MOVS     r3,#0xa               ;8854
005c46  2200              MOVS     r2,#0                 ;8854
005c48  21e6              MOVS     r1,#0xe6              ;8854
005c4a  20e1              MOVS     r0,#0xe1              ;8854
005c4c  f7fffffe          BL       mess_send
005c50  f04f0201          MOV      r2,#1                 ;8855
005c54  f04f0000          MOV      r0,#0                 ;8857
005c58  f9ba3000          LDRSH    r3,[r10,#0]           ;8857
005c5c  f8dfe400          LDR      lr,|L1.24672|
005c60  f9bbc000          LDRSH    r12,[r11,#0]          ;8859
005c64  49ff              LDR      r1,|L1.24676|
005c66  f9b1a000          LDRSH    r10,[r1,#0]           ;8857
005c6a  e00d              B        |L1.23688|
                  |L1.23660|
005c6c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8859
005c70  eb011100          ADD      r1,r1,r0,LSL #4       ;8859
005c74  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8859
005c78  69c9              LDR      r1,[r1,#0x1c]         ;8859
005c7a  4299              CMP      r1,r3                 ;8859
005c7c  da0a              BGE      |L1.23700|
005c7e  4561              CMP      r1,r12                ;8859
005c80  dd08              BLE      |L1.23700|
005c82  f1000001          ADD      r0,r0,#1              ;8857
005c86  b2c0              UXTB     r0,r0                 ;8857
                  |L1.23688|
005c88  4550              CMP      r0,r10                ;8857
005c8a  dbef              BLT      |L1.23660|
                  |L1.23692|
005c8c  2a01              CMP      r2,#1                 ;8868
005c8e  d008              BEQ      |L1.23714|
005c90  e00d              B        |L1.23726|
                  |L1.23698|
005c92  e018              B        |L1.23750|
                  |L1.23700|
005c94  f04f0200          MOV      r2,#0                 ;8862
005c98  49f3              LDR      r1,|L1.24680|
005c9a  f1000001          ADD      r0,r0,#1              ;8863
005c9e  7008              STRB     r0,[r1,#0]            ;8863
005ca0  e7f4              B        |L1.23692|
                  |L1.23714|
005ca2  f04f0003          MOV      r0,#3                 ;8870
005ca6  7028              STRB     r0,[r5,#0]            ;8870
005ca8  703c              STRB     r4,[r7,#0]            ;8871
005caa  48f0              LDR      r0,|L1.24684|
005cac  7004              STRB     r4,[r0,#0]            ;8872
                  |L1.23726|
005cae  7830              LDRB     r0,[r6,#0]            ;8875  ; uavt_set_error_cnt
005cb0  b3d0              CBZ      r0,|L1.23848|
005cb2  f1a00001          SUB      r0,r0,#1              ;8877
005cb6  b2c0              UXTB     r0,r0                 ;8877
005cb8  7030              STRB     r0,[r6,#0]            ;8877
005cba  bba8              CBNZ     r0,|L1.23848|
005cbc  702c              STRB     r4,[r5,#0]            ;8880
005cbe  48ec              LDR      r0,|L1.24688|
005cc0  f8809000          STRB     r9,[r0,#0]            ;8881
005cc4  e06c              B        |L1.23968|
                  |L1.23750|
;;;8886   	{
;;;8887   	char i,find_succes;
;;;8888   
;;;8889   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005cc6  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005cca  f04f0365          MOV      r3,#0x65
005cce  fb02f303          MUL      r3,r2,r3
005cd2  fbb3f3fb          UDIV     r3,r3,r11
005cd6  468a              MOV      r10,r1
005cd8  800b              STRH     r3,[r1,#0]
;;;8890   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005cda  eb021142          ADD      r1,r2,r2,LSL #5
005cde  eb010141          ADD      r1,r1,r1,LSL #1
005ce2  fbb1f1fb          UDIV     r1,r1,r11
005ce6  4683              MOV      r11,r0
005ce8  8001              STRH     r1,[r0,#0]
;;;8891   	
;;;8892   	if(uavt_set_stat_old!=uavt_set_stat)
005cea  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005cee  2803              CMP      r0,#3
005cf0  d000              BEQ      |L1.23796|
;;;8893   		{
;;;8894   		uavt_bps_pntr=0;
005cf2  703c              STRB     r4,[r7,#0]
                  |L1.23796|
;;;8895   		}
;;;8896   
;;;8897   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005cf4  230a              MOVS     r3,#0xa
005cf6  21bf              MOVS     r1,#0xbf
005cf8  20be              MOVS     r0,#0xbe
005cfa  f7fffffe          BL       mess_send
;;;8898   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005cfe  230a              MOVS     r3,#0xa
005d00  2200              MOVS     r2,#0
005d02  21e6              MOVS     r1,#0xe6
005d04  20e1              MOVS     r0,#0xe1
005d06  f7fffffe          BL       mess_send
;;;8899   
;;;8900   	find_succes=1;
005d0a  f04f0601          MOV      r6,#1
;;;8901   	for(i=0;i<NUMIST;i++)
005d0e  f04f0000          MOV      r0,#0
005d12  f8df9350          LDR      r9,|L1.24676|
005d16  f9ba2000          LDRSH    r2,[r10,#0]
005d1a  f8dfc344          LDR      r12,|L1.24672|
005d1e  f9bb3000          LDRSH    r3,[r11,#0]           ;8859
005d22  f9b9a000          LDRSH    r10,[r9,#0]           ;8857
005d26  e00e              B        |L1.23878|
                  |L1.23848|
005d28  e03a              B        |L1.23968|
                  |L1.23850|
;;;8902   		{
;;;8903   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005d2a  eb0001c0          ADD      r1,r0,r0,LSL #3
005d2e  eb011100          ADD      r1,r1,r0,LSL #4
005d32  eb0c0181          ADD      r1,r12,r1,LSL #2
005d36  69c9              LDR      r1,[r1,#0x1c]
005d38  4291              CMP      r1,r2
005d3a  da0f              BGE      |L1.23900|
005d3c  4299              CMP      r1,r3
005d3e  dd0d              BLE      |L1.23900|
005d40  f1000001          ADD      r0,r0,#1              ;8901
005d44  b2c0              UXTB     r0,r0                 ;8901
                  |L1.23878|
005d46  4550              CMP      r0,r10                ;8901
005d48  dbef              BLT      |L1.23850|
                  |L1.23882|
;;;8904   		else
;;;8905   			{
;;;8906   			find_succes=0;
;;;8907   			break;
;;;8908   			}
;;;8909   		}
;;;8910   
;;;8911   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005d4a  20d7              MOVS     r0,#0xd7
005d4c  f7fffffe          BL       mess_find
005d50  b1a0              CBZ      r0,|L1.23932|
005d52  48c8              LDR      r0,|L1.24692|
005d54  6800              LDR      r0,[r0,#0]  ; mess_data
005d56  28d9              CMP      r0,#0xd9
005d58  d003              BEQ      |L1.23906|
005d5a  e00f              B        |L1.23932|
                  |L1.23900|
005d5c  f04f0600          MOV      r6,#0                 ;8906
005d60  e7f3              B        |L1.23882|
                  |L1.23906|
;;;8912   		{
;;;8913   		if(++uavt_bps_pntr>=NUMIST)
005d62  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005d64  1c40              ADDS     r0,r0,#1
005d66  b2c0              UXTB     r0,r0
005d68  7038              STRB     r0,[r7,#0]
005d6a  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005d6e  4288              CMP      r0,r1
005d70  db04              BLT      |L1.23932|
;;;8914   			{
;;;8915   			uavt_set_stat=uassOFF;
005d72  702c              STRB     r4,[r5,#0]
;;;8916   			uavt_set_result_stat=uasrsSUCCESS;
005d74  49be              LDR      r1,|L1.24688|
005d76  f04f0003          MOV      r0,#3
005d7a  7008              STRB     r0,[r1,#0]
                  |L1.23932|
;;;8917   			}
;;;8918   		//uavt_bps_pntr++;
;;;8919   		//if()
;;;8920   		}
;;;8921   	if(find_succes==1)
005d7c  2e01              CMP      r6,#1
005d7e  d10f              BNE      |L1.23968|
;;;8922   		{
;;;8923   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005d80  20ee              MOVS     r0,#0xee
005d82  e9cd0400          STRD     r0,r4,[sp,#0]
005d86  9402              STR      r4,[sp,#8]
005d88  9403              STR      r4,[sp,#0xc]
005d8a  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005d8c  4603              MOV      r3,r0
005d8e  2216              MOVS     r2,#0x16
005d90  4608              MOV      r0,r1
005d92  f7fffffe          BL       mcp2515_transmit
;;;8924   		avt_plazma++;
005d96  48b5              LDR      r0,|L1.24684|
005d98  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005d9a  f1010101          ADD      r1,r1,#1
005d9e  7001              STRB     r1,[r0,#0]
                  |L1.23968|
;;;8925   		}
;;;8926   	}
;;;8927   
;;;8928   
;;;8929   
;;;8930   uavt_set_stat_old=uavt_set_stat;
005da0  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005da2  f8880000          STRB     r0,[r8,#0]
;;;8931   
;;;8932   }
005da6  e8bd9fff          POP      {r0-r12,pc}
;;;8933   
                          ENDP

                  u_necc_hndl PROC
;;;9008   //-----------------------------------------------
;;;9009   void u_necc_hndl(void)
005daa  b5f8              PUSH     {r3-r7,lr}
;;;9010   {
;;;9011   signed long temp_L;
;;;9012   signed long temp_SL;
;;;9013   //signed short temp_SS;
;;;9014   
;;;9015   //char i;
;;;9016   
;;;9017   //temp_SS=0;
;;;9018   signed short t[2];
;;;9019   
;;;9020   
;;;9021   
;;;9022   
;;;9023   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9024   
;;;9025   if(!TERMOKOMPENS)
005dac  48b2              LDR      r0,|L1.24696|
;;;9026   	{
;;;9027   	//u_necc=U0B;
;;;9028   	u_necc=UB20;
;;;9029   	}
;;;9030   else
;;;9031   	{
;;;9032   	if(ND_EXT[0])t[0]=20;
;;;9033   	else t[0]=t_ext[0];
;;;9034   
;;;9035   	mat_temper=t[0];
;;;9036   			
;;;9037   	if(mat_temper<0)temp_SL=UB0; 
;;;9038   	else 
;;;9039   		{
;;;9040   		if(mat_temper>40)mat_temper=40; 
;;;9041   		temp_SL=(UB20-UB0)*10;
;;;9042   		temp_SL*=mat_temper;
;;;9043   		temp_SL/=200;
;;;9044   		temp_SL+=UB0;
;;;9045   		}
;;;9046   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005dae  4db5              LDR      r5,|L1.24708|
005db0  4cb5              LDR      r4,|L1.24712|
005db2  8801              LDRH     r1,[r0,#0]            ;9025  ; TERMOKOMPENS
005db4  48b1              LDR      r0,|L1.24700|
005db6  f9b03000          LDRSH    r3,[r0,#0]            ;9028
;;;9047   		{
;;;9048   		temp_SL=UVZ;
005dba  48b1              LDR      r0,|L1.24704|
005dbc  f9b02000          LDRSH    r2,[r0,#0]
005dc0  b139              CBZ      r1,|L1.24018|
005dc2  48b2              LDR      r0,|L1.24716|
005dc4  7800              LDRB     r0,[r0,#0]            ;9032  ; ND_EXT
005dc6  b130              CBZ      r0,|L1.24022|
005dc8  f04f0014          MOV      r0,#0x14              ;9032
005dcc  f8ad0000          STRH     r0,[sp,#0]            ;9032
005dd0  e005              B        |L1.24030|
                  |L1.24018|
005dd2  8023              STRH     r3,[r4,#0]            ;9028
005dd4  e02c              B        |L1.24112|
                  |L1.24022|
005dd6  48ae              LDR      r0,|L1.24720|
005dd8  8800              LDRH     r0,[r0,#0]            ;9033  ; t_ext
005dda  f8ad0000          STRH     r0,[sp,#0]            ;9033
                  |L1.24030|
005dde  4ead              LDR      r6,|L1.24724|
005de0  f9bd1000          LDRSH    r1,[sp,#0]            ;9035
005de4  6031              STR      r1,[r6,#0]            ;9035  ; mat_temper
005de6  48ac              LDR      r0,|L1.24728|
005de8  2900              CMP      r1,#0                 ;9037
005dea  f9b00000          LDRSH    r0,[r0,#0]            ;9037
005dee  db12              BLT      |L1.24086|
005df0  2928              CMP      r1,#0x28              ;9040
005df2  dd02              BLE      |L1.24058|
005df4  f04f0128          MOV      r1,#0x28              ;9040
005df8  6031              STR      r1,[r6,#0]            ;9040  ; mat_temper
                  |L1.24058|
005dfa  eba30100          SUB      r1,r3,r0              ;9041
005dfe  eb010181          ADD      r1,r1,r1,LSL #2       ;9041
005e02  ea4f0141          LSL      r1,r1,#1              ;9041
005e06  6833              LDR      r3,[r6,#0]            ;9042  ; mat_temper
005e08  fb01f103          MUL      r1,r1,r3              ;9042
005e0c  f04f03c8          MOV      r3,#0xc8              ;9043
005e10  fb91f1f3          SDIV     r1,r1,r3              ;9043
005e14  4408              ADD      r0,r0,r1              ;9044
                  |L1.24086|
005e16  f8951020          LDRB     r1,[r5,#0x20]         ;9046  ; spc_stat
005e1a  2902              CMP      r1,#2                 ;9046
005e1c  d107              BNE      |L1.24110|
005e1e  499f              LDR      r1,|L1.24732|
005e20  7809              LDRB     r1,[r1,#0]            ;9046  ; sk_stat
005e22  2901              CMP      r1,#1                 ;9046
005e24  d002              BEQ      |L1.24108|
005e26  499e              LDR      r1,|L1.24736|
005e28  8809              LDRH     r1,[r1,#0]            ;9046  ; VZ_CH_VENT_BLOK
005e2a  b901              CBNZ     r1,|L1.24110|
                  |L1.24108|
005e2c  4610              MOV      r0,r2
                  |L1.24110|
;;;9049   		}
;;;9050   	u_necc=(unsigned int)temp_SL;
005e2e  8020              STRH     r0,[r4,#0]
                  |L1.24112|
;;;9051   	///u_necc=3456;
;;;9052   	}  
;;;9053   
;;;9054   //u_necc=2355;
;;;9055   
;;;9056   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005e30  489c              LDR      r0,|L1.24740|
005e32  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005e34  b918              CBNZ     r0,|L1.24126|
005e36  489c              LDR      r0,|L1.24744|
005e38  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005e3a  2802              CMP      r0,#2
005e3c  d102              BNE      |L1.24132|
                  |L1.24126|
;;;9057   	{
;;;9058   	u_necc=speedChrgVolt;
005e3e  489b              LDR      r0,|L1.24748|
005e40  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005e42  8020              STRH     r0,[r4,#0]
                  |L1.24132|
;;;9059   	}
;;;9060   if(hv_vz_stat==hvsWRK)
005e44  489a              LDR      r0,|L1.24752|
005e46  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005e48  2805              CMP      r0,#5
005e4a  d100              BNE      |L1.24142|
;;;9061   	{
;;;9062   	u_necc=UVZ;
005e4c  8022              STRH     r2,[r4,#0]
                  |L1.24142|
;;;9063   	}
;;;9064   if(vz1_stat==vz1sWRK)
005e4e  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005e50  280a              CMP      r0,#0xa
005e52  d102              BNE      |L1.24154|
;;;9065   	{
;;;9066   	u_necc=UZ_U;
005e54  4897              LDR      r0,|L1.24756|
005e56  8800              LDRH     r0,[r0,#0]  ; UZ_U
005e58  8020              STRH     r0,[r4,#0]
                  |L1.24154|
;;;9067   	}
;;;9068   if(vz2_stat==vz2sWRK1)
005e5a  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005e5c  280a              CMP      r0,#0xa
005e5e  d102              BNE      |L1.24166|
;;;9069   	{
;;;9070   	u_necc=FZ_U1;
005e60  4995              LDR      r1,|L1.24760|
005e62  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005e64  8021              STRH     r1,[r4,#0]
                  |L1.24166|
;;;9071   	}
;;;9072   if(vz2_stat==vz2sWRK2)
005e66  280b              CMP      r0,#0xb
005e68  d102              BNE      |L1.24176|
;;;9073   	{
;;;9074   	u_necc=FZ_U2;
005e6a  4894              LDR      r0,|L1.24764|
005e6c  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005e6e  8020              STRH     r0,[r4,#0]
                  |L1.24176|
;;;9075   	}
;;;9076   
;;;9077   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005e70  4893              LDR      r0,|L1.24768|
005e72  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005e74  2801              CMP      r0,#1
005e76  d001              BEQ      |L1.24188|
005e78  2802              CMP      r0,#2
005e7a  d102              BNE      |L1.24194|
                  |L1.24188|
;;;9078   	{
;;;9079   	u_necc=U_AVT;
005e7c  4891              LDR      r0,|L1.24772|
005e7e  8800              LDRH     r0,[r0,#0]  ; U_AVT
005e80  8020              STRH     r0,[r4,#0]
                  |L1.24194|
;;;9080   	}
;;;9081   
;;;9082   if(mess_find_unvol(MESS2UNECC_HNDL))
005e82  20be              MOVS     r0,#0xbe
005e84  f7fffffe          BL       mess_find_unvol
005e88  b128              CBZ      r0,|L1.24214|
;;;9083   	{		
;;;9084   	if(mess_data[0]==PARAM_UNECC_SET)
005e8a  487a              LDR      r0,|L1.24692|
005e8c  6801              LDR      r1,[r0,#0]  ; mess_data
005e8e  29bf              CMP      r1,#0xbf
005e90  d101              BNE      |L1.24214|
;;;9085   		{
;;;9086   		u_necc=mess_data[1];
005e92  6840              LDR      r0,[r0,#4]  ; mess_data
005e94  8020              STRH     r0,[r4,#0]
                  |L1.24214|
;;;9087   		}		
;;;9088   	} 
;;;9089   
;;;9090   //if(ICA_EN)u_necc+=ica_u_necc;
;;;9091   #endif
;;;9092   
;;;9093   
;;;9094   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9095   
;;;9096   #ifndef UKU_TELECORE2015
;;;9097   #ifndef UKU_TELECORE2017
;;;9098   if(unh_cnt0<10)
;;;9099   	{
;;;9100   	unh_cnt0++;
;;;9101   	if(unh_cnt0>=10)
;;;9102   		{
;;;9103   		unh_cnt0=0;
;;;9104   		b1Hz_unh=1;
;;;9105   		}
;;;9106   	}
;;;9107   
;;;9108   if(unh_cnt1<5)
;;;9109   	{
;;;9110   	unh_cnt1++;
;;;9111   	if(unh_cnt1==5)
;;;9112   		{
;;;9113   		unh_cnt1=0;
;;;9114   //		b2Hz_unh=1;
;;;9115   		}
;;;9116   	} 
;;;9117   
;;;9118   
;;;9119   
;;;9120   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9121   	{		
;;;9122   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9123   		{
;;;9124   		u_necc=mess_data[1];
;;;9125   		}		
;;;9126   	}
;;;9127   
;;;9128   
;;;9129   else if(b1Hz_unh)
;;;9130   	{
;;;9131   	
;;;9132   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;9133   		{
;;;9134   		
;;;9135   		u_necc=U0B;
;;;9136   		#ifdef IPS_SGEP_GAZPROM
;;;9137   		u_necc=UB0;
;;;9138   		#endif
;;;9139   		}
;;;9140   	else 
;;;9141   		{
;;;9142   		if(BAT_TYPE==0) //если батарея обычная
;;;9143   			{
;;;9144   			for(i=0;i<2;i++)
;;;9145   				{
;;;9146   				if(BAT_IS_ON[i]==bisON)
;;;9147   					{
;;;9148   					if(bat[i]._nd)t[i]=20;
;;;9149   					else t[i]=bat[i]._Tb;
;;;9150   					}
;;;9151   				else
;;;9152   					{
;;;9153   					t[i]=-20;
;;;9154   					}
;;;9155   				}
;;;9156   			if(t[0]>t[1])mat_temper=t[0];
;;;9157   			else mat_temper=t[1];
;;;9158   			
;;;9159   		
;;;9160   			if(mat_temper<0)temp_SL=UB0; 
;;;9161   			else 
;;;9162   				{
;;;9163   				if(mat_temper>40)mat_temper=40; 
;;;9164   				temp_SL=(UB20-UB0)*10;
;;;9165   				temp_SL*=mat_temper;
;;;9166   				temp_SL/=200;
;;;9167   				temp_SL+=UB0;
;;;9168   				}
;;;9169   			if((spc_stat==spcVZ)
;;;9170   #ifndef UKU_6U			
;;;9171   			&&(sk_stat[0]==1)
;;;9172   #endif //UKU_6U
;;;9173   			)
;;;9174   				{
;;;9175   				temp_SL=UVZ;
;;;9176   				}
;;;9177   			u_necc=(unsigned int)temp_SL;
;;;9178   			}
;;;9179   		else if(BAT_TYPE==1) //если батарея китайская
;;;9180   			{
;;;9181   			u_necc=U0B;
;;;9182   					
;;;9183   			u_necc=bat[0]._Ub+10;
;;;9184   
;;;9185   			
;;;9186   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9187   				{
;;;9188   				u_necc=UVZ;
;;;9189   				}
;;;9190   			if(u_necc>=UB0) u_necc=UB0;
;;;9191   			if(u_necc>=UB20) u_necc=UB20;
;;;9192   			}
;;;9193   		}  
;;;9194   	}
;;;9195   #endif
;;;9196   #endif
;;;9197   
;;;9198   #ifdef UKU_TELECORE2015
;;;9199   
;;;9200   if(unh_cnt0<10)
;;;9201   	{
;;;9202   	unh_cnt0++;
;;;9203   	if(unh_cnt0>=10)
;;;9204   		{
;;;9205   		unh_cnt0=0;
;;;9206   		b1Hz_unh=1;
;;;9207   		}
;;;9208   	}
;;;9209   
;;;9210   if(unh_cnt1<5)
;;;9211   	{
;;;9212   	unh_cnt1++;
;;;9213   	if(unh_cnt1==5)
;;;9214   		{
;;;9215   		unh_cnt1=0;
;;;9216   //		b2Hz_unh=1;
;;;9217   		}
;;;9218   	} 
;;;9219   
;;;9220   
;;;9221   
;;;9222   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9223   	{		
;;;9224   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9225   		{
;;;9226   		u_necc=mess_data[1];
;;;9227   		}		
;;;9228   	}
;;;9229   
;;;9230   
;;;9231   else if(b1Hz_unh)
;;;9232   	{
;;;9233   	b1Hz_unh=0;
;;;9234   
;;;9235   	if(BAT_TYPE==0)
;;;9236   		{
;;;9237   		if(bat[0]._nd)mat_temper=20;
;;;9238   		else mat_temper=bat[0]._Tb;
;;;9239   
;;;9240   			
;;;9241   		if(mat_temper<0)temp_SL=UB0; 
;;;9242   		else 
;;;9243   			{
;;;9244   			if(mat_temper>40)mat_temper=40; 
;;;9245   			temp_SL=(UB20-UB0)*10;
;;;9246   			temp_SL*=mat_temper;
;;;9247   			temp_SL/=200;
;;;9248   			temp_SL+=UB0;
;;;9249   			}
;;;9250   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9251   			{
;;;9252   			temp_SL=UVZ;
;;;9253   			}
;;;9254   		u_necc=(unsigned int)temp_SL;
;;;9255   	///u_necc=3456;
;;;9256   		}
;;;9257   	else if(BAT_TYPE==1)
;;;9258   		{
;;;9259   		
;;;9260   		gran(&DU_LI_BAT,1,30);
;;;9261   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9262   		gran(&u_necc,0,UB0);
;;;9263   		gran(&u_necc,0,UB20);
;;;9264   		gran(&u_necc,0,540);		
;;;9265   
;;;9266   
;;;9267   		if(li_bat._batStat!=bsOK)
;;;9268   			{
;;;9269   			u_necc=U0B;
;;;9270   			}
;;;9271   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9272   			{
;;;9273   			u_necc=UVZ;
;;;9274   			}
;;;9275   		/* 
;;;9276   		u_necc=U0B;
;;;9277   		
;;;9278   
;;;9279   	
;;;9280   		u_necc=UB0;
;;;9281   		u_necc=li_bat._Ub+10;
;;;9282   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;9283   			{
;;;9284   			lakb_error_cnt++;
;;;9285   			if(lakb_error_cnt>=30)
;;;9286   				{
;;;9287   				lakb_error_cnt=30;
;;;9288   				u_necc=U0B;
;;;9289   				}
;;;9290   			}
;;;9291   		else lakb_error_cnt=0;*/
;;;9292   		}
;;;9293   	else if(BAT_TYPE==2)
;;;9294   		{
;;;9295   		u_necc=U0B;
;;;9296   		
;;;9297   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9298   			{
;;;9299   			u_necc=UVZ;
;;;9300   			}
;;;9301   	
;;;9302   		u_necc=UB0;
;;;9303   		}
;;;9304   
;;;9305   	else if(BAT_TYPE==3)
;;;9306   		{
;;;9307   		u_necc=U0B;
;;;9308   		
;;;9309   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9310   			{
;;;9311   			u_necc=UVZ;
;;;9312   			}
;;;9313   
;;;9314   		gran(&DU_LI_BAT,1,30);
;;;9315   
;;;9316   
;;;9317   		if(lakbNotErrorNum==0)
;;;9318   			{
;;;9319   			u_necc=U0B;
;;;9320   			}
;;;9321   		else 
;;;9322   			{
;;;9323   			signed short i;
;;;9324   			//signed short u_necc_max;
;;;9325   			//u_necc_max=0;
;;;9326   			char soc_flag=0;
;;;9327   
;;;9328   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9329   				{
;;;9330   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9331   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9332   				}
;;;9333   
;;;9334   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9335   			}
;;;9336   		gran(&u_necc,0,UB0);
;;;9337   		//gran(&u_necc,0,UB20);
;;;9338   		gran(&u_necc,0,540);
;;;9339   		}
;;;9340   	}
;;;9341   
;;;9342   #endif 
;;;9343   
;;;9344   #ifdef UKU_TELECORE2017
;;;9345   
;;;9346   if(unh_cnt0<10)
;;;9347   	{
;;;9348   	unh_cnt0++;
;;;9349   	if(unh_cnt0>=10)
;;;9350   		{
;;;9351   		unh_cnt0=0;
;;;9352   		b1Hz_unh=1;
;;;9353   		}
;;;9354   	}
;;;9355   
;;;9356   if(unh_cnt1<5)
;;;9357   	{
;;;9358   	unh_cnt1++;
;;;9359   	if(unh_cnt1==5)
;;;9360   		{
;;;9361   		unh_cnt1=0;
;;;9362   //		b2Hz_unh=1;
;;;9363   		}
;;;9364   	} 
;;;9365   
;;;9366   
;;;9367   
;;;9368   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9369   	{		
;;;9370   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9371   		{
;;;9372   		u_necc=mess_data[1];
;;;9373   		}		
;;;9374   	}
;;;9375   
;;;9376   
;;;9377   else if(b1Hz_unh)
;;;9378   	{
;;;9379   	b1Hz_unh=0;
;;;9380   
;;;9381   	if(BAT_TYPE==0)
;;;9382   		{
;;;9383   		if(bat[0]._nd)mat_temper=20;
;;;9384   		else mat_temper=bat[0]._Tb;
;;;9385   
;;;9386   			
;;;9387   		if(mat_temper<0)temp_SL=UB0; 
;;;9388   		else 
;;;9389   			{
;;;9390   			if(mat_temper>40)mat_temper=40; 
;;;9391   			temp_SL=(UB20-UB0)*10;
;;;9392   			temp_SL*=mat_temper;
;;;9393   			temp_SL/=200;
;;;9394   			temp_SL+=UB0;
;;;9395   			}
;;;9396   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9397   			{
;;;9398   			temp_SL=UVZ;
;;;9399   			}
;;;9400   		u_necc=(unsigned int)temp_SL;
;;;9401   	///u_necc=3456;
;;;9402   		}
;;;9403   	else if(BAT_TYPE==1)
;;;9404   		{
;;;9405   		
;;;9406   		gran(&DU_LI_BAT,1,30);
;;;9407   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9408   		gran(&u_necc,0,UB0);
;;;9409   		gran(&u_necc,0,UB20);
;;;9410   		gran(&u_necc,0,540);		
;;;9411   
;;;9412   
;;;9413   		if(li_bat._batStat!=bsOK)
;;;9414   			{
;;;9415   			u_necc=U0B;
;;;9416   			}
;;;9417   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9418   			{
;;;9419   			u_necc=UVZ;
;;;9420   			}
;;;9421   		}
;;;9422   	else if(BAT_TYPE==2)
;;;9423   		{
;;;9424   		u_necc=U0B;
;;;9425   		
;;;9426   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9427   			{
;;;9428   			u_necc=UVZ;
;;;9429   			}
;;;9430   	
;;;9431   		u_necc=UB0;
;;;9432   		}
;;;9433   
;;;9434   	else if(BAT_TYPE==3)
;;;9435   		{
;;;9436   		u_necc=U0B;
;;;9437   		
;;;9438   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9439   			{
;;;9440   			u_necc=UVZ;
;;;9441   			}
;;;9442   
;;;9443   		gran(&DU_LI_BAT,1,30);
;;;9444   
;;;9445   
;;;9446   		if(lakbNotErrorNum==0)
;;;9447   			{
;;;9448   			u_necc=U0B;
;;;9449   			}
;;;9450   		else 
;;;9451   			{
;;;9452   			signed short i;
;;;9453   			//signed short u_necc_max;
;;;9454   			//u_necc_max=0;
;;;9455   			char soc_flag=0;
;;;9456   
;;;9457   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9458   				{
;;;9459   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9460   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9461   				}
;;;9462   
;;;9463   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9464   			}
;;;9465   		gran(&u_necc,0,UB0);
;;;9466   		//gran(&u_necc,0,UB20);
;;;9467   		gran(&u_necc,0,540);
;;;9468   		}
;;;9469   	}
;;;9470   
;;;9471   #endif 
;;;9472   //u_necc=2356;
;;;9473   
;;;9474   #ifdef UKU_FSO
;;;9475   
;;;9476   if(unh_cnt0<10)
;;;9477   	{
;;;9478   	unh_cnt0++;
;;;9479   	if(unh_cnt0>=10)
;;;9480   		{
;;;9481   		unh_cnt0=0;
;;;9482   		b1Hz_unh=1;
;;;9483   		}
;;;9484   	}
;;;9485   
;;;9486   if(unh_cnt1<5)
;;;9487   	{
;;;9488   	unh_cnt1++;
;;;9489   	if(unh_cnt1==5)
;;;9490   		{
;;;9491   		unh_cnt1=0;
;;;9492   //		b2Hz_unh=1;
;;;9493   		}
;;;9494   	} 
;;;9495   
;;;9496   
;;;9497   
;;;9498   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9499   	{		
;;;9500   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9501   		{
;;;9502   		u_necc=mess_data[1];
;;;9503   		}		
;;;9504   	}
;;;9505   
;;;9506   
;;;9507   else if(b1Hz_unh)
;;;9508   	{
;;;9509   	b1Hz_unh=0;
;;;9510   
;;;9511   	if(BAT_TYPE==4)
;;;9512   		{
;;;9513   		u_necc=TELECORE2017_ULINECC;
;;;9514   		
;;;9515   	/**	if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9516   			{
;;;9517   			u_necc=UVZ;
;;;9518   			}*/
;;;9519   
;;;9520   		gran(&DU_LI_BAT,1,30);
;;;9521   
;;;9522   		/*
;;;9523   		if(lakbNotErrorNum==0)
;;;9524   			{
;;;9525   			u_necc=U0B;
;;;9526   			}
;;;9527   		else 
;;;9528   			{
;;;9529   			signed short i;
;;;9530   			//signed short u_necc_max;
;;;9531   			//u_necc_max=0;
;;;9532   			char soc_flag=0;
;;;9533   
;;;9534   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9535   				{
;;;9536   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9537   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9538   				}
;;;9539   
;;;9540   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9541   			}
;;;9542   		*/
;;;9543   		//u_necc=512;
;;;9544   		gran(&u_necc,0,UB0);
;;;9545   		//gran(&u_necc,0,UB20);
;;;9546   		gran(&u_necc,0,560);
;;;9547   		}
;;;9548   	}
;;;9549   
;;;9550   #endif //UKU_FSO
;;;9551   
;;;9552   
;;;9553   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9554   	{
;;;9555   	u_necc=speedChrgVolt;
;;;9556   	}
;;;9557   #endif//gran(&u_necc,400,UMAX);
;;;9558   
;;;9559   
;;;9560   
;;;9561   temp_L=(signed long) u_necc;
005e96  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9562   temp_L*=98L;
005e9a  f04f0162          MOV      r1,#0x62
005e9e  fb00f101          MUL      r1,r0,r1
;;;9563   temp_L/=100L;
005ea2  f04f0264          MOV      r2,#0x64
005ea6  fb91f1f2          SDIV     r1,r1,r2
;;;9564   u_necc_dn=(signed short)temp_L;
005eaa  4b87              LDR      r3,|L1.24776|
005eac  8019              STRH     r1,[r3,#0]
;;;9565   
;;;9566   temp_L=(signed long) u_necc;
;;;9567   temp_L*=102L;
005eae  f04f0166          MOV      r1,#0x66
005eb2  fb00f001          MUL      r0,r0,r1
;;;9568   temp_L/=100L;
005eb6  fb90f0f2          SDIV     r0,r0,r2
;;;9569   u_necc_up=(signed short)temp_L;
005eba  4984              LDR      r1,|L1.24780|
005ebc  8008              STRH     r0,[r1,#0]
;;;9570   /*
;;;9571   #ifdef IPS_SGEP_GAZPROM
;;;9572   u_necc=248;
;;;9573   #endif */
;;;9574   }
005ebe  bdf8              POP      {r3-r7,pc}
;;;9575   
                          ENDP

                  num_necc_hndl PROC
;;;9577   //-----------------------------------------------
;;;9578   void num_necc_hndl(void)
005ec0  e92d41f0          PUSH     {r4-r8,lr}
;;;9579   {
;;;9580   
;;;9581   static short num_necc_block_cnt;
;;;9582   if(num_necc_block_cnt) num_necc_block_cnt--;
005ec4  4c6f              LDR      r4,|L1.24708|
005ec6  f9b4003c          LDRSH    r0,[r4,#0x3c]  ; num_necc_block_cnt
005eca  b110              CBZ      r0,|L1.24274|
005ecc  f1a00001          SUB      r0,r0,#1
005ed0  87a0              STRH     r0,[r4,#0x3c]
                  |L1.24274|
;;;9583   
;;;9584   Isumm_=Isumm;
005ed2  487f              LDR      r0,|L1.24784|
005ed4  4d7f              LDR      r5,|L1.24788|
005ed6  8800              LDRH     r0,[r0,#0]  ; Isumm
005ed8  8028              STRH     r0,[r5,#0]
;;;9585   
;;;9586   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005eda  4e7f              LDR      r6,|L1.24792|
005edc  270a              MOVS     r7,#0xa
005ede  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005ee2  2800              CMP      r0,#0
005ee4  da06              BGE      |L1.24308|
005ee6  f7fffffe          BL       abs
005eea  fb90f0f7          SDIV     r0,r0,r7
005eee  8829              LDRH     r1,[r5,#0]  ; Isumm_
005ef0  4408              ADD      r0,r0,r1
005ef2  8028              STRH     r0,[r5,#0]
                  |L1.24308|
;;;9587   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005ef4  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
005ef8  2800              CMP      r0,#0
005efa  da06              BGE      |L1.24330|
005efc  f7fffffe          BL       abs
005f00  fb90f0f7          SDIV     r0,r0,r7
005f04  8829              LDRH     r1,[r5,#0]  ; Isumm_
005f06  4408              ADD      r0,r0,r1
005f08  8028              STRH     r0,[r5,#0]
                  |L1.24330|
;;;9588   
;;;9589   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005f0a  4974              LDR      r1,|L1.24796|
005f0c  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005f10  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005f14  fb90f1f1          SDIV     r1,r0,r1
005f18  f1010101          ADD      r1,r1,#1
005f1c  b2c9              UXTB     r1,r1
005f1e  7721              STRB     r1,[r4,#0x1c]
;;;9590   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9591   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9592   
;;;9593   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005f20  4a6f              LDR      r2,|L1.24800|
005f22  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005f26  fb90f0f2          SDIV     r0,r0,r2
005f2a  f1000001          ADD      r0,r0,#1
005f2e  b2c2              UXTB     r2,r0
005f30  7762              STRB     r2,[r4,#0x1d]
;;;9594   
;;;9595   if(num_necc_up>num_necc)
005f32  486c              LDR      r0,|L1.24804|
;;;9596   	{
;;;9597   	num_necc=num_necc_up;
;;;9598   	num_necc_block_cnt=60;
005f34  f04f053c          MOV      r5,#0x3c
005f38  f9b03000          LDRSH    r3,[r0,#0]            ;9595  ; num_necc
005f3c  4299              CMP      r1,r3                 ;9595
005f3e  dd02              BLE      |L1.24390|
005f40  8001              STRH     r1,[r0,#0]            ;9597
005f42  87a5              STRH     r5,[r4,#0x3c]
005f44  e005              B        |L1.24402|
                  |L1.24390|
;;;9599   	}
;;;9600   else if(num_necc_down<num_necc)
005f46  429a              CMP      r2,r3
005f48  da03              BGE      |L1.24402|
;;;9601   	{
;;;9602   	if(!num_necc_block_cnt)
005f4a  8fa1              LDRH     r1,[r4,#0x3c]  ; num_necc_block_cnt
005f4c  b909              CBNZ     r1,|L1.24402|
;;;9603   		{
;;;9604   		num_necc=num_necc_down;
005f4e  8002              STRH     r2,[r0,#0]
;;;9605   		num_necc_block_cnt=60;
005f50  87a5              STRH     r5,[r4,#0x3c]
                  |L1.24402|
;;;9606   		}
;;;9607   	}
;;;9608   
;;;9609   if(PAR) num_necc=NUMIST;
005f52  4965              LDR      r1,|L1.24808|
005f54  880a              LDRH     r2,[r1,#0]  ; PAR
005f56  4943              LDR      r1,|L1.24676|
005f58  b10a              CBZ      r2,|L1.24414|
005f5a  880a              LDRH     r2,[r1,#0]  ; NUMIST
005f5c  8002              STRH     r2,[r0,#0]
                  |L1.24414|
;;;9610   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9611   if(bPARALLEL) num_necc=NUMIST;
005f5e  f894202a          LDRB     r2,[r4,#0x2a]  ; bPARALLEL
005f62  b10a              CBZ      r2,|L1.24424|
005f64  880a              LDRH     r2,[r1,#0]  ; NUMIST
005f66  8002              STRH     r2,[r0,#0]
                  |L1.24424|
;;;9612   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005f68  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005f6a  2a0a              CMP      r2,#0xa
005f6c  d101              BNE      |L1.24434|
005f6e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005f70  8002              STRH     r2,[r0,#0]
                  |L1.24434|
;;;9613   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005f72  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005f74  2a0a              CMP      r2,#0xa
005f76  d001              BEQ      |L1.24444|
005f78  2a0b              CMP      r2,#0xb
005f7a  d101              BNE      |L1.24448|
                  |L1.24444|
005f7c  880a              LDRH     r2,[r1,#0]  ; NUMIST
005f7e  8002              STRH     r2,[r0,#0]
                  |L1.24448|
;;;9614   #endif
;;;9615   
;;;9616   gran(&num_necc,1,NUMIST);
005f80  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005f84  e8bd41f0          POP      {r4-r8,lr}
005f88  2101              MOVS     r1,#1
005f8a  4856              LDR      r0,|L1.24804|
005f8c  f7ffbffe          B.W      gran
;;;9617   
;;;9618   }
;;;9619   
                          ENDP

                  cntrl_hndl PROC
;;;9622   //-----------------------------------------------
;;;9623   void cntrl_hndl(void)
005f90  e92d47f0          PUSH     {r4-r10,lr}
;;;9624   {
;;;9625   cntrl_hndl_plazma=200;
005f94  4c3b              LDR      r4,|L1.24708|
005f96  f04f00c8          MOV      r0,#0xc8
005f9a  f104042a          ADD      r4,r4,#0x2a
005f9e  7060              STRB     r0,[r4,#1]
;;;9626   cntrl_hndl_plazma_++;
005fa0  78a0              LDRB     r0,[r4,#2]  ; cntrl_hndl_plazma_
005fa2  f1000001          ADD      r0,r0,#1
005fa6  70a0              STRB     r0,[r4,#2]
;;;9627   
;;;9628   
;;;9629   IZMAX_=IZMAX;
005fa8  4850              LDR      r0,|L1.24812|
005faa  8800              LDRH     r0,[r0,#0]  ; IZMAX
005fac  84e0              STRH     r0,[r4,#0x26]
005fae  f1a4042a          SUB      r4,r4,#0x2a
;;;9630   
;;;9631   //cntrl_hndl_plazma=10;
;;;9632   
;;;9633   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005fb2  483c              LDR      r0,|L1.24740|
005fb4  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005fb6  b918              CBNZ     r0,|L1.24512|
005fb8  483b              LDR      r0,|L1.24744|
005fba  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005fbc  2802              CMP      r0,#2
005fbe  d103              BNE      |L1.24520|
                  |L1.24512|
005fc0  484b              LDR      r0,|L1.24816|
005fc2  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005fc4  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.24520|
;;;9634   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005fc8  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005fca  280a              CMP      r0,#0xa
005fcc  d103              BNE      |L1.24534|
005fce  4849              LDR      r0,|L1.24820|
005fd0  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005fd2  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.24534|
;;;9635   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005fd6  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005fd8  280a              CMP      r0,#0xa
005fda  d103              BNE      |L1.24548|
005fdc  4946              LDR      r1,|L1.24824|
005fde  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005fe0  f8a41050          STRH     r1,[r4,#0x50]
                  |L1.24548|
;;;9636   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005fe4  280b              CMP      r0,#0xb
005fe6  d103              BNE      |L1.24560|
005fe8  4844              LDR      r0,|L1.24828|
005fea  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005fec  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.24560|
;;;9637   if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
005ff0  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
005ff4  2802              CMP      r0,#2
005ff6  d103              BNE      |L1.24576|
005ff8  4841              LDR      r0,|L1.24832|
005ffa  8800              LDRH     r0,[r0,#0]  ; IMAX_VZ
005ffc  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.24576|
;;;9638   
;;;9639   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
006000  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
006004  b118              CBZ      r0,|L1.24590|
006006  f1a00001          SUB      r0,r0,#1
00600a  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.24590|
;;;9640   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
00600e  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
006012  b118              CBZ      r0,|L1.24604|
006014  f1a00001          SUB      r0,r0,#1
006018  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.24604|
;;;9641   
;;;9642   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
00601c  482e              LDR      r0,|L1.24792|
00601e  f04f080a          MOV      r8,#0xa               ;9634
006022  f8901043          LDRB     r1,[r0,#0x43]  ; bat
006026  0789              LSLS     r1,r1,#30
006028  d103              BNE      |L1.24626|
00602a  f8900093          LDRB     r0,[r0,#0x93]  ; bat
00602e  0780              LSLS     r0,r0,#30
006030  d005              BEQ      |L1.24638|
                  |L1.24626|
006032  f8b40050          LDRH     r0,[r4,#0x50]  ; IZMAX_
006036  fbb0f0f8          UDIV     r0,r0,r8
00603a  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.24638|
;;;9643   cntrl_hndl_plazma=199;
;;;9644   
;;;9645   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9646   cntrl_hndl_plazma=198;
00603e  f04f00c6          MOV      r0,#0xc6
006042  f884002b          STRB     r0,[r4,#0x2b]
;;;9647   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
006046  482f              LDR      r0,|L1.24836|
006048  f04f0601          MOV      r6,#1
00604c  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
006050  f1a10101          SUB      r1,r1,#1
006054  2905              CMP      r1,#5
006056  d300              BCC      |L1.24666|
006058  8006              STRH     r6,[r0,#0]
                  |L1.24666|
;;;9648   if(ch_cnt0<(10*REG_SPEED))
00605a  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
00605e  e053              B        |L1.24840|
                  |L1.24672|
                          DCD      bps
                  |L1.24676|
                          DCD      NUMIST
                  |L1.24680|
                          DCD      avt_error_bps
                  |L1.24684|
                          DCD      avt_plazma
                  |L1.24688|
                          DCD      uavt_set_result_stat
                  |L1.24692|
                          DCD      mess_data
                  |L1.24696|
                          DCD      TERMOKOMPENS
                  |L1.24700|
                          DCD      UB20
                  |L1.24704|
                          DCD      UVZ
                  |L1.24708|
                          DCD      ||area_number.25||
                  |L1.24712|
                          DCD      u_necc
                  |L1.24716|
                          DCD      ND_EXT
                  |L1.24720|
                          DCD      t_ext
                  |L1.24724|
                          DCD      mat_temper
                  |L1.24728|
                          DCD      UB0
                  |L1.24732|
                          DCD      sk_stat
                  |L1.24736|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24740|
                          DCD      speedChIsOn
                  |L1.24744|
                          DCD      sp_ch_stat
                  |L1.24748|
                          DCD      speedChrgVolt
                  |L1.24752|
                          DCD      hv_vz_stat
                  |L1.24756|
                          DCD      UZ_U
                  |L1.24760|
                          DCD      FZ_U1
                  |L1.24764|
                          DCD      FZ_U2
                  |L1.24768|
                          DCD      uavt_set_stat
                  |L1.24772|
                          DCD      U_AVT
                  |L1.24776|
                          DCD      u_necc_dn
                  |L1.24780|
                          DCD      u_necc_up
                  |L1.24784|
                          DCD      Isumm
                  |L1.24788|
                          DCD      Isumm_
                  |L1.24792|
                          DCD      bat
                  |L1.24796|
                          DCD      IMAX
                  |L1.24800|
                          DCD      IMIN
                  |L1.24804|
                          DCD      num_necc
                  |L1.24808|
                          DCD      PAR
                  |L1.24812|
                          DCD      IZMAX
                  |L1.24816|
                          DCD      speedChrgCurr
                  |L1.24820|
                          DCD      UZ_IMAX
                  |L1.24824|
                          DCD      FZ_IMAX1
                  |L1.24828|
                          DCD      FZ_IMAX2
                  |L1.24832|
                          DCD      IMAX_VZ
                  |L1.24836|
                          DCD      REG_SPEED
                  |L1.24840|
006108  eb000180          ADD      r1,r0,r0,LSL #2
00610c  7ca0              LDRB     r0,[r4,#0x12]  ; ch_cnt0
00610e  2500              MOVS     r5,#0                 ;9633
006110  ebb00f41          CMP      r0,r1,LSL #1
006114  da0c              BGE      |L1.24880|
;;;9649   	{
;;;9650   	ch_cnt0++;
006116  f1000001          ADD      r0,r0,#1
00611a  b2c0              UXTB     r0,r0
00611c  74a0              STRB     r0,[r4,#0x12]
;;;9651   	if(ch_cnt0>=10*REG_SPEED)
00611e  ebb00f41          CMP      r0,r1,LSL #1
006122  db01              BLT      |L1.24872|
;;;9652   		{
;;;9653   		ch_cnt0=0;
006124  74a5              STRB     r5,[r4,#0x12]
;;;9654   		b1Hz_ch=1;
006126  74e6              STRB     r6,[r4,#0x13]
                  |L1.24872|
;;;9655   		}
;;;9656   		cntrl_hndl_plazma=197;
006128  f04f00c5          MOV      r0,#0xc5
00612c  f884002b          STRB     r0,[r4,#0x2b]
                  |L1.24880|
;;;9657   	}
;;;9658   #endif
;;;9659   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9660   if(ch_cnt0<10)
;;;9661   	{
;;;9662   	ch_cnt0++;
;;;9663   	if(ch_cnt0>=10)
;;;9664   		{
;;;9665   		ch_cnt0=0;
;;;9666   		b1Hz_ch=1;
;;;9667   		}
;;;9668   	}
;;;9669   #endif
;;;9670   
;;;9671   cntrl_hndl_plazma=196;
006130  f04f00c4          MOV      r0,#0xc4
006134  f884002b          STRB     r0,[r4,#0x2b]
;;;9672   if(mess_find_unvol(MESS2CNTRL_HNDL))
006138  f04f00e1          MOV      r0,#0xe1
00613c  f7fffffe          BL       mess_find_unvol
;;;9673   	{
;;;9674   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9675   		{
;;;9676   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9677   		}
;;;9678   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9679   		{
;;;9680   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9681   		}
;;;9682   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9683   		{
;;;9684   		static char cntrlStatIsDownCnt;
;;;9685   		cntrl_stat--;
;;;9686   
;;;9687   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9688   			{
;;;9689   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9690   			}
;;;9691   		else 
;;;9692   			{
;;;9693   			cntrlStatIsDownCnt=0;
;;;9694   			}
;;;9695   
;;;9696   		}
;;;9697   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9698   		{
;;;9699   		cntrl_stat/*_new*/=mess_data[1];
;;;9700   		}
;;;9701   
;;;9702   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9703   		{
;;;9704   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9705   		if(bps_U>u_necc)
006140  f8dfc3e4          LDR      r12,|L1.25896|
006144  4af9              LDR      r2,|L1.25900|
;;;9706   			{
;;;9707   			cntrl_hndl_plazma=11;
;;;9708   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9709   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9710   			}
;;;9711   		else if(bps_U<u_necc)
;;;9712   			{
;;;9713   			cntrl_hndl_plazma=12;	
;;;9714   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9715   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9716   			}
;;;9717   		#elif defined(UKU_220)
;;;9718   		if(load_U>u_necc)
;;;9719   			{
;;;9720   			cntrl_hndl_plazma=13;
;;;9721   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9722   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9723   			}
;;;9724   		else if(load_U<u_necc)
;;;9725   			{
;;;9726   			cntrl_hndl_plazma=14;	
;;;9727   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9728   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9729   			}
;;;9730   		#elif defined(UKU_220_V2)
;;;9731   		if(load_U>u_necc)
;;;9732   			{
;;;9733   			cntrl_hndl_plazma=15;
;;;9734   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9735   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9736   			}
;;;9737   		else if(load_U<u_necc)
;;;9738   			{
;;;9739   			cntrl_hndl_plazma=16;	
;;;9740   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9741   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9742   			}
;;;9743   		#else
;;;9744   
;;;9745   		if(load_U>u_necc)
;;;9746   			{
;;;9747   			cntrl_hndl_plazma=17;
;;;9748   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9749   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9750   			}
;;;9751   		else if(load_U<u_necc)
;;;9752   			{
;;;9753   			cntrl_hndl_plazma=18;	
;;;9754   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9755   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9756   			}
;;;9757   		#endif	
;;;9758   	 	}
;;;9759   
;;;9760   	/*gran(&cntrl_stat_new,10,1010);			
;;;9761   	cntrl_stat_old=cntrl_stat_new;
;;;9762   	cntrl_stat=cntrl_stat_new;*/
;;;9763   	}
;;;9764   
;;;9765   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9766   else if((b1Hz_ch)&&((!bIBAT_SMKLBR[0])||(ibat_metr_cnt[0]>40))&&((!bIBAT_SMKLBR[1])||(ibat_metr_cnt[1]>40)))
;;;9767   	{
;;;9768   	cntrl_hndl_plazma=195;
;;;9769   	cntrl_stat_new=cntrl_stat_old;
;;;9770   	//cntrl_hndl_plazma=19;
;;;9771   	if((Ibmax/10)>(2*IZMAX_))
;;;9772   		{
;;;9773   		cntrl_hndl_plazma=20;
;;;9774             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9775   		else	cntrl_stat_new-=10;
;;;9776   		}		
;;;9777   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9778   		{
;;;9779   		cntrl_hndl_plazma=21;
;;;9780             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9781             else	cntrl_stat_new-=3;
;;;9782   		}   
;;;9783   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9784   		{
;;;9785   		cntrl_hndl_plazma=22;
;;;9786   		cntrl_stat_new--;
;;;9787   		}
;;;9788   		
;;;9789   	else if(bps_U<u_necc)
;;;9790   		{
;;;9791   		cntrl_hndl_plazma=23;
;;;9792   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9793   			{
;;;9794   			cntrl_hndl_plazma=24;
;;;9795   			if(Ibmax<0)
;;;9796   				{
;;;9797   				cntrl_hndl_plazma=25;
;;;9798                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9799   				else cntrl_stat_new+=10;
;;;9800   				}
;;;9801   			else if(Ibmax<(IZMAX_*5))
;;;9802   				{
;;;9803   				cntrl_hndl_plazma=26;
;;;9804                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9805   				else	cntrl_stat_new+=2;
;;;9806   				}
;;;9807   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9808   				{
;;;9809   				cntrl_hndl_plazma=27;
;;;9810   				cntrl_stat_new++;
;;;9811   				}					
;;;9812   			}
;;;9813   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9814   			{
;;;9815   			cntrl_hndl_plazma=28;
;;;9816   			if(Ibmax<(IZMAX_*5))
;;;9817   				{
;;;9818   				cntrl_hndl_plazma=29;
;;;9819                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9820   				else	cntrl_stat_new+=2;
;;;9821   				}
;;;9822   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9823   				{
;;;9824   				cntrl_hndl_plazma=30;
;;;9825   				cntrl_stat_new++;
;;;9826   				}					
;;;9827   			}	
;;;9828   		else if(bps_U<(u_necc-1))
;;;9829   			{
;;;9830   			cntrl_hndl_plazma=31;
;;;9831   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9832   				{
;;;9833   				cntrl_hndl_plazma=32;
;;;9834   				cntrl_stat_new++;
;;;9835   				}					
;;;9836   			}					
;;;9837   		}	
;;;9838   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9839   		{ 	
;;;9840   		cntrl_hndl_plazma=33;
;;;9841   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9842   			{
;;;9843   			cntrl_hndl_plazma=34;
;;;9844                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9845   			else	cntrl_stat_new-=10;
;;;9846   			}
;;;9847   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9848   			{
;;;9849   			cntrl_hndl_plazma=35;
;;;9850                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9851   			else cntrl_stat_new-=2;
;;;9852   			}	
;;;9853   		else if(bps_U>(u_necc+1))
;;;9854   			{
;;;9855   			cntrl_hndl_plazma=36;
;;;9856   			cntrl_stat_new--;
;;;9857   			}					
;;;9858   		}
;;;9859   
;;;9860   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9861   		{
;;;9862   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9863   		}
;;;9864   
;;;9865   	gran(&cntrl_stat_new,10,1010);
;;;9866   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9867   	cntrl_stat_old=cntrl_stat_new;
;;;9868   	cntrl_stat=cntrl_stat_new;
;;;9869   	
;;;9870   	if(ICA_EN==0)
;;;9871   		{
;;;9872   		if(ica_cntrl_hndl_cnt)
006146  4ffa              LDR      r7,|L1.25904|
006148  b398              CBZ      r0,|L1.25010|
00614a  49fa              LDR      r1,|L1.25908|
00614c  6808              LDR      r0,[r1,#0]            ;9674  ; mess_data
00614e  2864              CMP      r0,#0x64              ;9674
006150  d008              BEQ      |L1.24932|
006152  2869              CMP      r0,#0x69              ;9678
006154  d00b              BEQ      |L1.24942|
006156  286e              CMP      r0,#0x6e              ;9682
006158  d00f              BEQ      |L1.24954|
00615a  28e5              CMP      r0,#0xe5              ;9697
00615c  d02c              BEQ      |L1.25016|
00615e  28e6              CMP      r0,#0xe6              ;9702
006160  d02d              BEQ      |L1.25022|
                  |L1.24930|
006162  e1da              B        |L1.25882|
                  |L1.24932|
006164  6848              LDR      r0,[r1,#4]            ;9676  ; mess_data
006166  8e61              LDRH     r1,[r4,#0x32]         ;9676  ; cntrl_stat_old
006168  4408              ADD      r0,r0,r1              ;9676
00616a  8620              STRH     r0,[r4,#0x30]         ;9676
                  |L1.24940|
00616c  e1d5              B        |L1.25882|
                  |L1.24942|
00616e  6848              LDR      r0,[r1,#4]            ;9680  ; mess_data
006170  8e61              LDRH     r1,[r4,#0x32]         ;9680  ; cntrl_stat_old
006172  eba10000          SUB      r0,r1,r0              ;9680
006176  8620              STRH     r0,[r4,#0x30]         ;9680
006178  e1cf              B        |L1.25882|
                  |L1.24954|
00617a  8e20              LDRH     r0,[r4,#0x30]         ;9685  ; cntrl_stat
00617c  f1a00001          SUB      r0,r0,#1              ;9685
006180  b200              SXTH     r0,r0                 ;9685
006182  8620              STRH     r0,[r4,#0x30]         ;9685
006184  281e              CMP      r0,#0x1e              ;9687
006186  dd07              BLE      |L1.24984|
006188  48eb              LDR      r0,|L1.25912|
00618a  49ec              LDR      r1,|L1.25916|
00618c  f9b00000          LDRSH    r0,[r0,#0]            ;9687  ; load_U
006190  f9b11000          LDRSH    r1,[r1,#0]            ;9687  ; USIGN
006194  4288              CMP      r0,r1                 ;9687
006196  da0d              BGE      |L1.25012|
                  |L1.24984|
006198  7b20              LDRB     r0,[r4,#0xc]          ;9689  ; cntrlStatIsDownCnt
00619a  1c40              ADDS     r0,r0,#1              ;9689
00619c  b2c0              UXTB     r0,r0                 ;9689
00619e  7320              STRB     r0,[r4,#0xc]          ;9689
0061a0  28fa              CMP      r0,#0xfa              ;9689
0061a2  d1de              BNE      |L1.24930|
0061a4  230a              MOVS     r3,#0xa               ;9689
0061a6  2200              MOVS     r2,#0                 ;9689
0061a8  21e7              MOVS     r1,#0xe7              ;9689
0061aa  20e6              MOVS     r0,#0xe6              ;9689
0061ac  f7fffffe          BL       mess_send
0061b0  e1b3              B        |L1.25882|
                  |L1.25010|
0061b2  e044              B        |L1.25150|
                  |L1.25012|
0061b4  7325              STRB     r5,[r4,#0xc]          ;9693
0061b6  e1b0              B        |L1.25882|
                  |L1.25016|
0061b8  6848              LDR      r0,[r1,#4]            ;9699  ; mess_data
0061ba  8620              STRH     r0,[r4,#0x30]         ;9699
0061bc  e1ad              B        |L1.25882|
                  |L1.25022|
0061be  f9bc0000          LDRSH    r0,[r12,#0]           ;9705  ; bps_U
0061c2  f9b21000          LDRSH    r1,[r2,#0]            ;9705  ; u_necc
0061c6  4288              CMP      r0,r1                 ;9705
0061c8  dd1a              BLE      |L1.25088|
0061ca  f04f020b          MOV      r2,#0xb               ;9707
0061ce  f884202b          STRB     r2,[r4,#0x2b]         ;9707
0061d2  eba00001          SUB      r0,r0,r1              ;9708
0061d6  2828              CMP      r0,#0x28              ;9708
0061d8  dd07              BLE      |L1.25066|
0061da  f9b40030          LDRSH    r0,[r4,#0x30]         ;9708  ; cntrl_stat
0061de  2800              CMP      r0,#0                 ;9708
0061e0  dd03              BLE      |L1.25066|
0061e2  f1a00005          SUB      r0,r0,#5              ;9708
0061e6  8620              STRH     r0,[r4,#0x30]         ;9708
0061e8  e197              B        |L1.25882|
                  |L1.25066|
0061ea  f9b40030          LDRSH    r0,[r4,#0x30]         ;9709  ; cntrl_stat
0061ee  2800              CMP      r0,#0                 ;9709
0061f0  d0b7              BEQ      |L1.24930|
0061f2  7ce1              LDRB     r1,[r4,#0x13]         ;9709  ; b1Hz_ch
0061f4  2900              CMP      r1,#0                 ;9709
0061f6  d0b4              BEQ      |L1.24930|
0061f8  f1a00001          SUB      r0,r0,#1              ;9709
0061fc  8620              STRH     r0,[r4,#0x30]         ;9709
0061fe  e18c              B        |L1.25882|
                  |L1.25088|
006200  daaf              BGE      |L1.24930|
006202  f04f020c          MOV      r2,#0xc               ;9713
006206  f884202b          STRB     r2,[r4,#0x2b]         ;9713
00620a  eba10000          SUB      r0,r1,r0              ;9714
00620e  2828              CMP      r0,#0x28              ;9714
006210  dd09              BLE      |L1.25126|
006212  f9b40030          LDRSH    r0,[r4,#0x30]         ;9714  ; cntrl_stat
006216  f24031f7          MOV      r1,#0x3f7             ;9714
00621a  4288              CMP      r0,r1                 ;9714
00621c  da03              BGE      |L1.25126|
00621e  f1000005          ADD      r0,r0,#5              ;9714
006222  8620              STRH     r0,[r4,#0x30]         ;9714
006224  e179              B        |L1.25882|
                  |L1.25126|
006226  f9b40030          LDRSH    r0,[r4,#0x30]         ;9715  ; cntrl_stat
00622a  f5b07f7f          CMP      r0,#0x3fc             ;9715
00622e  da98              BGE      |L1.24930|
006230  7ce1              LDRB     r1,[r4,#0x13]         ;9715  ; b1Hz_ch
006232  2900              CMP      r1,#0                 ;9715
006234  d095              BEQ      |L1.24930|
006236  f1000001          ADD      r0,r0,#1              ;9715
00623a  8620              STRH     r0,[r4,#0x30]         ;9715
00623c  e16d              B        |L1.25882|
                  |L1.25150|
00623e  7ce0              LDRB     r0,[r4,#0x13]         ;9766  ; b1Hz_ch
006240  2800              CMP      r0,#0                 ;9766
006242  d08e              BEQ      |L1.24930|
006244  49be              LDR      r1,|L1.25920|
006246  48bf              LDR      r0,|L1.25924|
006248  880b              LDRH     r3,[r1,#0]            ;9766  ; bIBAT_SMKLBR
00624a  b11b              CBZ      r3,|L1.25172|
00624c  f9b03000          LDRSH    r3,[r0,#0]            ;9766  ; ibat_metr_cnt
006250  2b28              CMP      r3,#0x28              ;9766
006252  dd86              BLE      |L1.24930|
                  |L1.25172|
006254  8849              LDRH     r1,[r1,#2]            ;9766  ; bIBAT_SMKLBR
006256  b119              CBZ      r1,|L1.25184|
006258  f9b00002          LDRSH    r0,[r0,#2]            ;9766  ; ibat_metr_cnt
00625c  2828              CMP      r0,#0x28              ;9766
00625e  dd85              BLE      |L1.24940|
                  |L1.25184|
006260  f104042a          ADD      r4,r4,#0x2a           ;9768
006264  f04f00c3          MOV      r0,#0xc3              ;9768
006268  7060              STRB     r0,[r4,#1]            ;9768
00626a  f9b40008          LDRSH    r0,[r4,#8]            ;9769  ; cntrl_stat_old
00626e  8460              STRH     r0,[r4,#0x22]         ;9769
006270  f9b41024          LDRSH    r1,[r4,#0x24]         ;9771  ; Ibmax
006274  8ce3              LDRH     r3,[r4,#0x26]         ;9771  ; IZMAX_
006276  fb91f8f8          SDIV     r8,r1,r8              ;9771
00627a  f1a4042a          SUB      r4,r4,#0x2a           ;9771
00627e  ebb80f43          CMP      r8,r3,LSL #1          ;9771
006282  dd10              BLE      |L1.25254|
006284  f04f0114          MOV      r1,#0x14              ;9773
006288  f884102b          STRB     r1,[r4,#0x2b]         ;9773
00628c  f8b41074          LDRH     r1,[r4,#0x74]         ;9774  ; cntrl_stat_blok_cnt
006290  b121              CBZ      r1,|L1.25244|
006292  f1a00001          SUB      r0,r0,#1              ;9774
006296  f8a4004c          STRH     r0,[r4,#0x4c]         ;9774
00629a  e102              B        |L1.25762|
                  |L1.25244|
00629c  f1a0000a          SUB      r0,r0,#0xa            ;9775
0062a0  f8a4004c          STRH     r0,[r4,#0x4c]         ;9775
0062a4  e0fd              B        |L1.25762|
                  |L1.25254|
0062a6  da14              BGE      |L1.25298|
0062a8  ebc31903          RSB      r9,r3,r3,LSL #4       ;9777
0062ac  4589              CMP      r9,r1                 ;9777
0062ae  da10              BGE      |L1.25298|
0062b0  f04f0115          MOV      r1,#0x15              ;9779
0062b4  f884102b          STRB     r1,[r4,#0x2b]         ;9779
0062b8  f8b41074          LDRH     r1,[r4,#0x74]         ;9780  ; cntrl_stat_blok_cnt
0062bc  b121              CBZ      r1,|L1.25288|
0062be  f1a00001          SUB      r0,r0,#1              ;9780
0062c2  f8a4004c          STRH     r0,[r4,#0x4c]         ;9780
0062c6  e0ec              B        |L1.25762|
                  |L1.25288|
0062c8  f1a00003          SUB      r0,r0,#3              ;9781
0062cc  f8a4004c          STRH     r0,[r4,#0x4c]         ;9781
0062d0  e0e7              B        |L1.25762|
                  |L1.25298|
0062d2  ebc31903          RSB      r9,r3,r3,LSL #4       ;9783
0062d6  4589              CMP      r9,r1                 ;9783
0062d8  dd0a              BLE      |L1.25328|
0062da  4598              CMP      r8,r3                 ;9783
0062dc  dd08              BLE      |L1.25328|
0062de  f04f0116          MOV      r1,#0x16              ;9785
0062e2  f884102b          STRB     r1,[r4,#0x2b]         ;9785
0062e6  f1a00001          SUB      r0,r0,#1              ;9786
0062ea  f8a4004c          STRH     r0,[r4,#0x4c]         ;9786
0062ee  e0d8              B        |L1.25762|
                  |L1.25328|
0062f0  f9bcc000          LDRSH    r12,[r12,#0]          ;9789  ; bps_U
0062f4  f9b22000          LDRSH    r2,[r2,#0]            ;9789  ; u_necc
0062f8  f8df924c          LDR      r9,|L1.25928|
0062fc  f8dfa24c          LDR      r10,|L1.25932|
006300  4594              CMP      r12,r2                ;9789
006302  da72              BGE      |L1.25578|
006304  f04f0817          MOV      r8,#0x17              ;9791
006308  f884802b          STRB     r8,[r4,#0x2b]         ;9791
00630c  f9b98000          LDRSH    r8,[r9,#0]            ;9792  ; UB0
006310  f9ba9000          LDRSH    r9,[r10,#0]           ;9792  ; UB20
006314  eba80809          SUB      r8,r8,r9              ;9792
006318  eba20908          SUB      r9,r2,r8              ;9792
00631c  45e1              CMP      r9,r12                ;9792
00631e  dd37              BLE      |L1.25488|
006320  f04f0218          MOV      r2,#0x18              ;9794
006324  f884202b          STRB     r2,[r4,#0x2b]         ;9794
006328  2900              CMP      r1,#0                 ;9795
00632a  da10              BGE      |L1.25422|
00632c  f04f0119          MOV      r1,#0x19              ;9797
006330  f884102b          STRB     r1,[r4,#0x2b]         ;9797
006334  f8b41074          LDRH     r1,[r4,#0x74]         ;9798  ; cntrl_stat_blok_cnt
006338  b121              CBZ      r1,|L1.25412|
00633a  f1000001          ADD      r0,r0,#1              ;9798
00633e  f8a4004c          STRH     r0,[r4,#0x4c]         ;9798
006342  e0ae              B        |L1.25762|
                  |L1.25412|
006344  f100000a          ADD      r0,r0,#0xa            ;9799
006348  f8a4004c          STRH     r0,[r4,#0x4c]         ;9799
00634c  e0a9              B        |L1.25762|
                  |L1.25422|
00634e  eb030283          ADD      r2,r3,r3,LSL #2       ;9801
006352  428a              CMP      r2,r1                 ;9801
006354  dd10              BLE      |L1.25464|
006356  f04f011a          MOV      r1,#0x1a              ;9803
00635a  f884102b          STRB     r1,[r4,#0x2b]         ;9803
00635e  f8b41074          LDRH     r1,[r4,#0x74]         ;9804  ; cntrl_stat_blok_cnt
006362  b121              CBZ      r1,|L1.25454|
006364  f1000001          ADD      r0,r0,#1              ;9804
006368  f8a4004c          STRH     r0,[r4,#0x4c]         ;9804
00636c  e099              B        |L1.25762|
                  |L1.25454|
00636e  f1000002          ADD      r0,r0,#2              ;9805
006372  f8a4004c          STRH     r0,[r4,#0x4c]         ;9805
006376  e094              B        |L1.25762|
                  |L1.25464|
006378  ebb10f42          CMP      r1,r2,LSL #1          ;9807
00637c  da07              BGE      |L1.25486|
00637e  f04f011b          MOV      r1,#0x1b              ;9809
006382  f884102b          STRB     r1,[r4,#0x2b]         ;9809
006386  f1000001          ADD      r0,r0,#1              ;9810
00638a  f8a4004c          STRH     r0,[r4,#0x4c]         ;9810
                  |L1.25486|
00638e  e088              B        |L1.25762|
                  |L1.25488|
006390  ea4f79e8          ASR      r9,r8,#31             ;9813
006394  eb087899          ADD      r8,r8,r9,LSR #30      ;9813
006398  eba208a8          SUB      r8,r2,r8,ASR #2       ;9813
00639c  45e0              CMP      r8,r12                ;9813
00639e  dd25              BLE      |L1.25580|
0063a0  f04f021c          MOV      r2,#0x1c              ;9815
0063a4  f884202b          STRB     r2,[r4,#0x2b]         ;9815
0063a8  eb030283          ADD      r2,r3,r3,LSL #2       ;9816
0063ac  428a              CMP      r2,r1                 ;9816
0063ae  dd10              BLE      |L1.25554|
0063b0  f04f011d          MOV      r1,#0x1d              ;9818
0063b4  f884102b          STRB     r1,[r4,#0x2b]         ;9818
0063b8  f8b41074          LDRH     r1,[r4,#0x74]         ;9819  ; cntrl_stat_blok_cnt
0063bc  b121              CBZ      r1,|L1.25544|
0063be  f1000001          ADD      r0,r0,#1              ;9819
0063c2  f8a4004c          STRH     r0,[r4,#0x4c]         ;9819
0063c6  e06c              B        |L1.25762|
                  |L1.25544|
0063c8  f1000002          ADD      r0,r0,#2              ;9820
0063cc  f8a4004c          STRH     r0,[r4,#0x4c]         ;9820
0063d0  e067              B        |L1.25762|
                  |L1.25554|
0063d2  ebb10f42          CMP      r1,r2,LSL #1          ;9822
0063d6  da64              BGE      |L1.25762|
0063d8  f04f011e          MOV      r1,#0x1e              ;9824
0063dc  f884102b          STRB     r1,[r4,#0x2b]         ;9824
0063e0  f1000001          ADD      r0,r0,#1              ;9825
0063e4  f8a4004c          STRH     r0,[r4,#0x4c]         ;9825
0063e8  e05b              B        |L1.25762|
                  |L1.25578|
0063ea  e014              B        |L1.25622|
                  |L1.25580|
0063ec  1e52              SUBS     r2,r2,#1              ;9828
0063ee  4594              CMP      r12,r2                ;9828
0063f0  da57              BGE      |L1.25762|
0063f2  f04f021f          MOV      r2,#0x1f              ;9830
0063f6  f884202b          STRB     r2,[r4,#0x2b]         ;9830
0063fa  eb030283          ADD      r2,r3,r3,LSL #2       ;9831
0063fe  ebb10f42          CMP      r1,r2,LSL #1          ;9831
006402  da4e              BGE      |L1.25762|
006404  f04f0120          MOV      r1,#0x20              ;9833
006408  f884102b          STRB     r1,[r4,#0x2b]         ;9833
00640c  f1000001          ADD      r0,r0,#1              ;9834
006410  f8a4004c          STRH     r0,[r4,#0x4c]         ;9834
006414  e045              B        |L1.25762|
                  |L1.25622|
006416  dd44              BLE      |L1.25762|
006418  f04f0121          MOV      r1,#0x21              ;9840
00641c  f884102b          STRB     r1,[r4,#0x2b]         ;9840
006420  f9b91000          LDRSH    r1,[r9,#0]            ;9841  ; UB0
006424  f9ba3000          LDRSH    r3,[r10,#0]           ;9841  ; UB20
006428  eba10103          SUB      r1,r1,r3              ;9841
00642c  eb010302          ADD      r3,r1,r2              ;9841
006430  4563              CMP      r3,r12                ;9841
006432  da13              BGE      |L1.25692|
006434  f04f0122          MOV      r1,#0x22              ;9843
006438  f884102b          STRB     r1,[r4,#0x2b]         ;9843
00643c  f8b41074          LDRH     r1,[r4,#0x74]         ;9844  ; cntrl_stat_blok_cnt
006440  b939              CBNZ     r1,|L1.25682|
006442  4943              LDR      r1,|L1.25936|
006444  8809              LDRH     r1,[r1,#0]            ;9844  ; TERMOKOMPENS
006446  b121              CBZ      r1,|L1.25682|
006448  f1a0000a          SUB      r0,r0,#0xa            ;9845
00644c  f8a4004c          STRH     r0,[r4,#0x4c]         ;9845
006450  e027              B        |L1.25762|
                  |L1.25682|
006452  f1a00001          SUB      r0,r0,#1              ;9844
006456  f8a4004c          STRH     r0,[r4,#0x4c]         ;9844
00645a  e022              B        |L1.25762|
                  |L1.25692|
00645c  17cb              ASRS     r3,r1,#31             ;9847
00645e  eb017193          ADD      r1,r1,r3,LSR #30      ;9847
006462  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9847
006466  4561              CMP      r1,r12                ;9847
006468  da10              BGE      |L1.25740|
00646a  f04f0123          MOV      r1,#0x23              ;9849
00646e  f884102b          STRB     r1,[r4,#0x2b]         ;9849
006472  f8b41074          LDRH     r1,[r4,#0x74]         ;9850  ; cntrl_stat_blok_cnt
006476  b121              CBZ      r1,|L1.25730|
006478  f1a00001          SUB      r0,r0,#1              ;9850
00647c  f8a4004c          STRH     r0,[r4,#0x4c]         ;9850
006480  e00f              B        |L1.25762|
                  |L1.25730|
006482  f1a00002          SUB      r0,r0,#2              ;9851
006486  f8a4004c          STRH     r0,[r4,#0x4c]         ;9851
00648a  e00a              B        |L1.25762|
                  |L1.25740|
00648c  1c52              ADDS     r2,r2,#1              ;9853
00648e  4594              CMP      r12,r2                ;9853
006490  dd07              BLE      |L1.25762|
006492  f04f0124          MOV      r1,#0x24              ;9855
006496  f884102b          STRB     r1,[r4,#0x2b]         ;9855
00649a  f1a00001          SUB      r0,r0,#1              ;9856
00649e  f8a4004c          STRH     r0,[r4,#0x4c]         ;9856
                  |L1.25762|
0064a2  482c              LDR      r0,|L1.25940|
0064a4  7961              LDRB     r1,[r4,#5]            ;9860  ; vz1_stat
0064a6  7800              LDRB     r0,[r0,#0]            ;9860  ; hv_vz_stat
0064a8  4308              ORRS     r0,r0,r1              ;9860
0064aa  79e1              LDRB     r1,[r4,#7]            ;9860  ; vz2_stat
0064ac  4308              ORRS     r0,r0,r1              ;9860
0064ae  d10e              BNE      |L1.25806|
0064b0  4829              LDR      r0,|L1.25944|
0064b2  7840              LDRB     r0,[r0,#1]            ;9862  ; sk_stat
0064b4  2801              CMP      r0,#1                 ;9862
0064b6  d10a              BNE      |L1.25806|
0064b8  4828              LDR      r0,|L1.25948|
0064ba  7840              LDRB     r0,[r0,#1]            ;9862  ; sk_stat_old
0064bc  b938              CBNZ     r0,|L1.25806|
0064be  4828              LDR      r0,|L1.25952|
0064c0  8800              LDRH     r0,[r0,#0]            ;9862  ; VZ_KIND
0064c2  2801              CMP      r0,#1                 ;9862
0064c4  d103              BNE      |L1.25806|
0064c6  f04f0032          MOV      r0,#0x32              ;9862
0064ca  f8a4004c          STRH     r0,[r4,#0x4c]         ;9862
                  |L1.25806|
0064ce  f24032f2          MOV      r2,#0x3f2             ;9865
0064d2  210a              MOVS     r1,#0xa               ;9865
0064d4  4823              LDR      r0,|L1.25956|
0064d6  f7fffffe          BL       gran
0064da  4823              LDR      r0,|L1.25960|
0064dc  8800              LDRH     r0,[r0,#0]            ;9866  ; net_av_2min_timer
0064de  b110              CBZ      r0,|L1.25830|
0064e0  8e60              LDRH     r0,[r4,#0x32]         ;9866  ; cntrl_stat_old
0064e2  f8a4004c          STRH     r0,[r4,#0x4c]         ;9866
                  |L1.25830|
0064e6  f8b4004c          LDRH     r0,[r4,#0x4c]         ;9867  ; cntrl_stat_new
0064ea  8660              STRH     r0,[r4,#0x32]         ;9867
0064ec  8620              STRH     r0,[r4,#0x30]         ;9868
0064ee  481f              LDR      r0,|L1.25964|
0064f0  f9b00000          LDRSH    r0,[r0,#0]            ;9870  ; ICA_EN
0064f4  b938              CBNZ     r0,|L1.25862|
0064f6  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0064f8  b129              CBZ      r1,|L1.25862|
;;;9873   			{
;;;9874   			cntrl_stat = ica_cntrl_hndl;
0064fa  491d              LDR      r1,|L1.25968|
0064fc  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0064fe  8621              STRH     r1,[r4,#0x30]
;;;9875   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
006500  f8a4104c          STRH     r1,[r4,#0x4c]
;;;9876   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
006504  8661              STRH     r1,[r4,#0x32]
                  |L1.25862|
;;;9877   			}
;;;9878   		}
;;;9879   	
;;;9880   	if((ICA_EN==1)||(ICA_EN==2))
006506  2801              CMP      r0,#1
006508  d001              BEQ      |L1.25870|
00650a  2802              CMP      r0,#2
00650c  d105              BNE      |L1.25882|
                  |L1.25870|
;;;9881   		{
;;;9882   		cntrl_stat=cntrl_stat_new+ica_u_necc;
00650e  4919              LDR      r1,|L1.25972|
006510  f8b4004c          LDRH     r0,[r4,#0x4c]  ; cntrl_stat_new
006514  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
006516  4408              ADD      r0,r0,r1
006518  8620              STRH     r0,[r4,#0x30]
                  |L1.25882|
;;;9883   		}			
;;;9884   	}
;;;9885   #else
;;;9886   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9887   	{
;;;9888   	cntrl_hndl_plazma=194;
;;;9889   	cntrl_hndl_plazma=37;
;;;9890   	cntrl_stat_new=cntrl_stat_old;
;;;9891   	
;;;9892   	if((Ibmax/10)>(2*IZMAX_))
;;;9893   		{
;;;9894   		cntrl_hndl_plazma=38;
;;;9895             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9896   		else	cntrl_stat_new-=10;
;;;9897   		}		
;;;9898   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9899   		{
;;;9900   		cntrl_hndl_plazma=39;
;;;9901             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9902             else	cntrl_stat_new-=3;
;;;9903   		}   
;;;9904   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9905   		{
;;;9906   		cntrl_hndl_plazma=40;
;;;9907   		cntrl_stat_new--;
;;;9908   		}
;;;9909   		
;;;9910   	else if(load_U<u_necc)
;;;9911   		{
;;;9912   		cntrl_hndl_plazma=41;
;;;9913   		if(load_U<(u_necc-(UB0-UB20)))
;;;9914   			{
;;;9915   			cntrl_hndl_plazma=42;
;;;9916   			if(Ibmax<0)
;;;9917   				{
;;;9918   				cntrl_hndl_plazma=43;
;;;9919                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9920   				else cntrl_stat_new+=10;
;;;9921   				}
;;;9922   			else if(Ibmax<(IZMAX_*5))
;;;9923   				{
;;;9924   				cntrl_hndl_plazma=44;
;;;9925                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9926   				else	cntrl_stat_new+=2;
;;;9927   				}
;;;9928   			else if(Ibmax<((IZMAX_*95)/10))
;;;9929   				{
;;;9930   				cntrl_hndl_plazma=45;
;;;9931   				cntrl_stat_new++;
;;;9932   				}					
;;;9933   			}
;;;9934   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9935   			{
;;;9936   			cntrl_hndl_plazma=46;
;;;9937   			if(Ibmax<(IZMAX_*5))
;;;9938   				{
;;;9939   				cntrl_hndl_plazma=47;
;;;9940                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9941   				else	cntrl_stat_new+=2;
;;;9942   				}
;;;9943   			else if(Ibmax<((IZMAX_*95)/10))
;;;9944   				{
;;;9945   				cntrl_hndl_plazma=48;
;;;9946   				cntrl_stat_new++;
;;;9947   				}					
;;;9948   			}	
;;;9949   		else if(load_U<(u_necc-1))
;;;9950   			{
;;;9951   			cntrl_hndl_plazma=49;
;;;9952   			if(Ibmax<((IZMAX_*95)/10))
;;;9953   				{
;;;9954   				cntrl_hndl_plazma=50;
;;;9955   				cntrl_stat_new++;
;;;9956   				}					
;;;9957   			}					
;;;9958   		}	
;;;9959   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9960   		{
;;;9961   		cntrl_hndl_plazma=51;
;;;9962   		if(load_U>(u_necc+(UB0-UB20)))
;;;9963   			{
;;;9964   			cntrl_hndl_plazma=52;
;;;9965                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9966   			else	cntrl_stat_new-=10;
;;;9967   			}
;;;9968   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9969   			{
;;;9970   			cntrl_hndl_plazma=53;
;;;9971                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9972   			else cntrl_stat_new-=2;
;;;9973   			}	
;;;9974   		else if(load_U>(u_necc+1))
;;;9975   			{
;;;9976   			cntrl_hndl_plazma=54;
;;;9977   			cntrl_stat_new--;
;;;9978   			}					
;;;9979   		}
;;;9980   
;;;9981   	gran(&cntrl_stat_new,10,1022);
;;;9982   				
;;;9983   	cntrl_stat_old=cntrl_stat_new;
;;;9984   	cntrl_stat=cntrl_stat_new;	
;;;9985   	}
;;;9986   #endif
;;;9987   
;;;9988   iiii=0;
00651a  7565              STRB     r5,[r4,#0x15]
;;;9989   for(i=0;i<NUMIST;i++)
00651c  7525              STRB     r5,[r4,#0x14]
00651e  4817              LDR      r0,|L1.25980|
;;;9990        {
;;;9991        if(bps[i]._cnt<30)iiii=1;
006520  4a15              LDR      r2,|L1.25976|
006522  f9b01000          LDRSH    r1,[r0,#0]            ;9989
006526  e038              B        |L1.26010|
                  |L1.25896|
                          DCD      bps_U
                  |L1.25900|
                          DCD      u_necc
                  |L1.25904|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.25908|
                          DCD      mess_data
                  |L1.25912|
                          DCD      load_U
                  |L1.25916|
                          DCD      USIGN
                  |L1.25920|
                          DCD      bIBAT_SMKLBR
                  |L1.25924|
                          DCD      ibat_metr_cnt
                  |L1.25928|
                          DCD      UB0
                  |L1.25932|
                          DCD      UB20
                  |L1.25936|
                          DCD      TERMOKOMPENS
                  |L1.25940|
                          DCD      hv_vz_stat
                  |L1.25944|
                          DCD      sk_stat
                  |L1.25948|
                          DCD      sk_stat_old
                  |L1.25952|
                          DCD      VZ_KIND
                  |L1.25956|
                          DCD      ||area_number.25||+0x4c
                  |L1.25960|
                          DCD      net_av_2min_timer
                  |L1.25964|
                          DCD      ICA_EN
                  |L1.25968|
                          DCD      ica_cntrl_hndl
                  |L1.25972|
                          DCD      ica_u_necc
                  |L1.25976|
                          DCD      bps
                  |L1.25980|
                          DCD      NUMIST
                  |L1.25984|
006580  eb0003c0          ADD      r3,r0,r0,LSL #3
006584  eb031300          ADD      r3,r3,r0,LSL #4
006588  eb020383          ADD      r3,r2,r3,LSL #2
00658c  78db              LDRB     r3,[r3,#3]
00658e  2b1e              CMP      r3,#0x1e
006590  d200              BCS      |L1.26004|
006592  7566              STRB     r6,[r4,#0x15]
                  |L1.26004|
006594  f1000001          ADD      r0,r0,#1              ;9989
006598  7520              STRB     r0,[r4,#0x14]         ;9989
                  |L1.26010|
00659a  7d20              LDRB     r0,[r4,#0x14]         ;9989  ; i
00659c  4288              CMP      r0,r1                 ;9989
00659e  dbef              BLT      |L1.25984|
;;;9992        }
;;;9993   
;;;9994   if(iiii==0)
0065a0  7d60              LDRB     r0,[r4,#0x15]  ; iiii
0065a2  b948              CBNZ     r0,|L1.26040|
;;;9995   	{
;;;9996   	cntrl_stat=620;	
;;;9997   	cntrl_stat_old=620;
;;;9998   	cntrl_stat_new=620;
;;;9999   	cntrl_stat=10*PWM_START;
0065a4  48ff              LDR      r0,|L1.27044|
0065a6  8800              LDRH     r0,[r0,#0]  ; PWM_START
0065a8  eb000080          ADD      r0,r0,r0,LSL #2
0065ac  ea4f0040          LSL      r0,r0,#1
0065b0  8620              STRH     r0,[r4,#0x30]
;;;10000  	cntrl_stat_old=10*PWM_START;
0065b2  8660              STRH     r0,[r4,#0x32]
;;;10001  	cntrl_stat_new=10*PWM_START;
0065b4  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.26040|
;;;10002  	}
;;;10003  
;;;10004  #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10005  if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
0065b8  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
0065bc  b110              CBZ      r0,|L1.26052|
0065be  f1a00001          SUB      r0,r0,#1
0065c2  8038              STRH     r0,[r7,#0]
                  |L1.26052|
;;;10006  
;;;10007  
;;;10008  
;;;10009  #endif
;;;10010  
;;;10011  
;;;10012  gran(&cntrl_stat,10,1022); 
0065c4  f24032fe          MOV      r2,#0x3fe
0065c8  210a              MOVS     r1,#0xa
0065ca  48f7              LDR      r0,|L1.27048|
0065cc  f7fffffe          BL       gran
;;;10013  b1Hz_ch=0;
0065d0  74e5              STRB     r5,[r4,#0x13]
;;;10014  
;;;10015  }
0065d2  e8bd87f0          POP      {r4-r10,pc}
;;;10016  #endif
                          ENDP

                  ext_drv PROC
;;;10759  //-----------------------------------------------
;;;10760  void ext_drv(void)
0065d6  e92d5ff0          PUSH     {r4-r12,lr}
;;;10761  {
;;;10762  char i;
;;;10763  
;;;10764  #ifdef UKU_FSO
;;;10765  NUMSK=4;
;;;10766  #endif
;;;10767  
;;;10768  for(i=0;i<NUMSK;i++)
0065da  f04f0000          MOV      r0,#0
0065de  4af5              LDR      r2,|L1.27060|
;;;10769  	{
;;;10770  	#ifdef UKU_MGTS
;;;10771  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10772  	#endif
;;;10773  	#ifdef UKU_RSTKM
;;;10774  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10775  	#endif
;;;10776  	#ifdef UKU_3U
;;;10777  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10778  	#endif
;;;10779  	#ifdef UKU_GLONASS
;;;10780  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10781  	#endif
;;;10782  	#ifdef UKU_KONTUR
;;;10783  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10784  	#endif
;;;10785  	#ifdef UKU_6U
;;;10786  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10787  	#endif
;;;10788  	#ifdef UKU_220
;;;10789  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10790  	#endif
;;;10791  	#ifdef UKU_220_V2
;;;10792  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10793  	#endif
;;;10794  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10795  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10796  	#endif
;;;10797  	#ifdef UKU_TELECORE2015	
;;;10798  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10799  	#endif
;;;10800  	#ifdef UKU_TELECORE2017
;;;10801  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10802  	#endif
;;;10803  	#ifdef IPS_SGEP_GAZPROM
;;;10804  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10805  	#endif		
;;;10806   	#ifdef UKU_FSO
;;;10807  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10808  	#endif	
;;;10809  		{
;;;10810  		if(sk_cnt[i]<10)
0065e0  4bf2              LDR      r3,|L1.27052|
;;;10811  			{
;;;10812  			sk_cnt[i]++;
;;;10813  			if(sk_cnt[i]>=10)
;;;10814  				{
;;;10815  				sk_stat[i]=ssON;
0065e2  4df3              LDR      r5,|L1.27056|
0065e4  f04f0a01          MOV      r10,#1
;;;10816  				}
;;;10817  			}
;;;10818  		else 
;;;10819  			{
;;;10820  			sk_cnt[i]=10;
0065e8  f04f0b0a          MOV      r11,#0xa
0065ec  4606              MOV      r6,r0                 ;10768
0065ee  f9b24000          LDRSH    r4,[r2,#0]            ;10768
0065f2  e025              B        |L1.26176|
                  |L1.26100|
0065f4  49f0              LDR      r1,|L1.27064|
0065f6  4ff1              LDR      r7,|L1.27068|
0065f8  5c09              LDRB     r1,[r1,r0]            ;10795
0065fa  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10795
0065fe  f5b16ffa          CMP      r1,#0x7d0             ;10795
006602  da0e              BGE      |L1.26146|
006604  5619              LDRSB    r1,[r3,r0]            ;10810
006606  290a              CMP      r1,#0xa               ;10810
006608  da08              BGE      |L1.26140|
00660a  f1010101          ADD      r1,r1,#1              ;10812
00660e  b249              SXTB     r1,r1                 ;10812
006610  5419              STRB     r1,[r3,r0]            ;10812
006612  290a              CMP      r1,#0xa               ;10813
006614  db11              BLT      |L1.26170|
006616  f805a000          STRB     r10,[r5,r0]           ;10815
00661a  e00e              B        |L1.26170|
                  |L1.26140|
00661c  f803b000          STRB     r11,[r3,r0]
006620  e00b              B        |L1.26170|
                  |L1.26146|
;;;10821  			}
;;;10822                 
;;;10823  		}
;;;10824  	else
;;;10825  		{
;;;10826  		if(sk_cnt[i]>0)
006622  5619              LDRSB    r1,[r3,r0]
006624  2900              CMP      r1,#0
006626  dd07              BLE      |L1.26168|
;;;10827  			{
;;;10828  			sk_cnt[i]--;
006628  f1a10101          SUB      r1,r1,#1
00662c  b249              SXTB     r1,r1
00662e  5419              STRB     r1,[r3,r0]
;;;10829  			if(sk_cnt[i]<=0)
006630  2900              CMP      r1,#0
006632  dc02              BGT      |L1.26170|
;;;10830  				{
;;;10831  				sk_stat[i]=ssOFF;
006634  542e              STRB     r6,[r5,r0]
006636  e000              B        |L1.26170|
                  |L1.26168|
;;;10832  				}
;;;10833  			}
;;;10834  		else 
;;;10835  			{
;;;10836  			sk_cnt[i]=0;
006638  541e              STRB     r6,[r3,r0]
                  |L1.26170|
00663a  f1000001          ADD      r0,r0,#1              ;10768
00663e  b2c0              UXTB     r0,r0                 ;10768
                  |L1.26176|
006640  42a0              CMP      r0,r4                 ;10768
006642  dbd7              BLT      |L1.26100|
;;;10837  			}
;;;10838  		}
;;;10839  	}
;;;10840  
;;;10841  for(i=0;i<NUMSK;i++)
006644  f04f0400          MOV      r4,#0
;;;10842  	{
;;;10843  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10844  		{
;;;10845  		if(sk_av_cnt[i]<10)
006648  f8df9374          LDR      r9,|L1.27072|
;;;10846  			{
;;;10847  			sk_av_cnt[i]++;
;;;10848  			if(sk_av_cnt[i]>=10)
;;;10849  				{
;;;10850  				sk_av_stat[i]=sasON;
00664c  4fdd              LDR      r7,|L1.27076|
;;;10851  				}
;;;10852  			}
;;;10853  		else 
;;;10854  			{
;;;10855  			sk_av_cnt[i]=10;
;;;10856  			}
;;;10857  		}
;;;10858  	else
;;;10859  		{
;;;10860  		if(sk_av_cnt[i]>=0)
;;;10861  			{
;;;10862  			sk_av_cnt[i]--;
;;;10863  			if(sk_av_cnt[i]<=0)
;;;10864  				{
;;;10865  				sk_av_stat[i]=sasOFF;
;;;10866  				}
;;;10867  			}
;;;10868  		else 
;;;10869  			{
;;;10870  			sk_av_cnt[i]=0;
;;;10871  			}
;;;10872  		}
;;;10873  
;;;10874  #ifndef UKU_KONTUR
;;;10875  	if(sk_av_stat_old[i]!=sk_av_stat[i])
00664e  f8df8378          LDR      r8,|L1.27080|
006652  e083              B        |L1.26460|
                  |L1.26196|
006654  48dd              LDR      r0,|L1.27084|
006656  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10843
00665a  b910              CBNZ     r0,|L1.26210|
00665c  5d29              LDRB     r1,[r5,r4]            ;10843
00665e  2901              CMP      r1,#1                 ;10843
006660  d00f              BEQ      |L1.26242|
                  |L1.26210|
006662  b108              CBZ      r0,|L1.26216|
006664  5d28              LDRB     r0,[r5,r4]            ;10843
006666  b160              CBZ      r0,|L1.26242|
                  |L1.26216|
006668  f9190004          LDRSB    r0,[r9,r4]            ;10860
00666c  2800              CMP      r0,#0                 ;10860
00666e  db19              BLT      |L1.26276|
006670  f1a00001          SUB      r0,r0,#1              ;10862
006674  b240              SXTB     r0,r0                 ;10862
006676  f8090004          STRB     r0,[r9,r4]            ;10862
00667a  2800              CMP      r0,#0                 ;10863
00667c  dc14              BGT      |L1.26280|
00667e  553e              STRB     r6,[r7,r4]            ;10865
006680  e012              B        |L1.26280|
                  |L1.26242|
006682  f9190004          LDRSB    r0,[r9,r4]            ;10845
006686  280a              CMP      r0,#0xa               ;10845
006688  da09              BGE      |L1.26270|
00668a  f1000001          ADD      r0,r0,#1              ;10847
00668e  b240              SXTB     r0,r0                 ;10847
006690  f8090004          STRB     r0,[r9,r4]            ;10847
006694  280a              CMP      r0,#0xa               ;10848
006696  db07              BLT      |L1.26280|
006698  f807a004          STRB     r10,[r7,r4]           ;10850
00669c  e004              B        |L1.26280|
                  |L1.26270|
00669e  f809b004          STRB     r11,[r9,r4]           ;10855
0066a2  e001              B        |L1.26280|
                  |L1.26276|
0066a4  f8096004          STRB     r6,[r9,r4]            ;10870
                  |L1.26280|
0066a8  f8181004          LDRB     r1,[r8,r4]
0066ac  5d38              LDRB     r0,[r7,r4]
0066ae  4281              CMP      r1,r0
0066b0  d04e              BEQ      |L1.26448|
;;;10876  		{
;;;10877  		plazma_sk++;
0066b2  4abd              LDR      r2,|L1.27048|
0066b4  321a              ADDS     r2,r2,#0x1a
0066b6  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0066b8  f1010101          ADD      r1,r1,#1
0066bc  8011              STRH     r1,[r2,#0]
;;;10878  		if(sk_av_stat[i]==sasON)
0066be  2801              CMP      r0,#1
0066c0  d007              BEQ      |L1.26322|
;;;10879  			{
;;;10880  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10881  			else if(i==1)
;;;10882  				{
;;;10883  				#ifndef UKU_TELEKORE2017
;;;10884  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10885  				#endif
;;;10886  				#ifdef UKU_TELEKORE2017
;;;10887  				snmp_trap_send("Door open",15,2,1);
;;;10888  				#endif
;;;10889  				}
;;;10890  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10891  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10892  			}
;;;10893  		else 
;;;10894  			{
;;;10895  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0066c2  b354              CBZ      r4,|L1.26394|
;;;10896  			else if(i==1)
0066c4  2c01              CMP      r4,#1
0066c6  d02f              BEQ      |L1.26408|
;;;10897  				{
;;;10898  				#ifndef UKU_TELEKORE2017
;;;10899  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10900  				#endif
;;;10901  				#ifdef UKU_TELEKORE2017
;;;10902  				snmp_trap_send("Door open clear",15,2,0);
;;;10903  				#endif
;;;10904  				}
;;;10905  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0066c8  2c02              CMP      r4,#2
0066ca  d034              BEQ      |L1.26422|
;;;10906  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0066cc  2c03              CMP      r4,#3
0066ce  d039              BEQ      |L1.26436|
0066d0  e03e              B        |L1.26448|
                  |L1.26322|
0066d2  b134              CBZ      r4,|L1.26338|
0066d4  2c01              CMP      r4,#1                 ;10881
0066d6  d00b              BEQ      |L1.26352|
0066d8  2c02              CMP      r4,#2                 ;10890
0066da  d010              BEQ      |L1.26366|
0066dc  2c03              CMP      r4,#3                 ;10891
0066de  d015              BEQ      |L1.26380|
0066e0  e036              B        |L1.26448|
                  |L1.26338|
0066e2  2301              MOVS     r3,#1                 ;10880
0066e4  461a              MOV      r2,r3                 ;10880
0066e6  210f              MOVS     r1,#0xf               ;10880
0066e8  a0b9              ADR      r0,|L1.27088|
0066ea  f7fffffe          BL       snmp_trap_send
0066ee  e02f              B        |L1.26448|
                  |L1.26352|
0066f0  2301              MOVS     r3,#1                 ;10884
0066f2  2202              MOVS     r2,#2                 ;10884
0066f4  210f              MOVS     r1,#0xf               ;10884
0066f6  a0b9              ADR      r0,|L1.27100|
0066f8  f7fffffe          BL       snmp_trap_send
0066fc  e028              B        |L1.26448|
                  |L1.26366|
0066fe  2301              MOVS     r3,#1                 ;10890
006700  2203              MOVS     r2,#3                 ;10890
006702  210f              MOVS     r1,#0xf               ;10890
006704  a0b8              ADR      r0,|L1.27112|
006706  f7fffffe          BL       snmp_trap_send
00670a  e021              B        |L1.26448|
                  |L1.26380|
00670c  2301              MOVS     r3,#1                 ;10891
00670e  2204              MOVS     r2,#4                 ;10891
006710  210f              MOVS     r1,#0xf               ;10891
006712  a0b8              ADR      r0,|L1.27124|
006714  f7fffffe          BL       snmp_trap_send
006718  e01a              B        |L1.26448|
                  |L1.26394|
00671a  2300              MOVS     r3,#0                 ;10895
00671c  2201              MOVS     r2,#1                 ;10895
00671e  210f              MOVS     r1,#0xf               ;10895
006720  a0b7              ADR      r0,|L1.27136|
006722  f7fffffe          BL       snmp_trap_send
006726  e013              B        |L1.26448|
                  |L1.26408|
006728  2300              MOVS     r3,#0                 ;10899
00672a  2202              MOVS     r2,#2                 ;10899
00672c  210f              MOVS     r1,#0xf               ;10899
00672e  a0b9              ADR      r0,|L1.27156|
006730  f7fffffe          BL       snmp_trap_send
006734  e00c              B        |L1.26448|
                  |L1.26422|
006736  2300              MOVS     r3,#0                 ;10905
006738  2203              MOVS     r2,#3                 ;10905
00673a  210f              MOVS     r1,#0xf               ;10905
00673c  a0ba              ADR      r0,|L1.27176|
00673e  f7fffffe          BL       snmp_trap_send
006742  e005              B        |L1.26448|
                  |L1.26436|
006744  2300              MOVS     r3,#0
006746  2204              MOVS     r2,#4
006748  210f              MOVS     r1,#0xf
00674a  a0bc              ADR      r0,|L1.27196|
00674c  f7fffffe          BL       snmp_trap_send
                  |L1.26448|
;;;10907  			}
;;;10908  	 	}
;;;10909  #endif
;;;10910  
;;;10911  #ifdef UKU_KONTUR
;;;10912  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10913  		{
;;;10914  		plazma_sk++;
;;;10915  		if(sk_av_stat[i]==sasON)
;;;10916  			{
;;;10917  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10918  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10919  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10920  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10921  			}
;;;10922  		else 
;;;10923  			{
;;;10924  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10925  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10926  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10927  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10928  			}
;;;10929  	 	}
;;;10930  #endif
;;;10931  	sk_av_stat_old[i]=sk_av_stat[i];
006750  5d38              LDRB     r0,[r7,r4]
006752  f8080004          STRB     r0,[r8,r4]
006756  f1040401          ADD      r4,r4,#1              ;10841
00675a  b2e4              UXTB     r4,r4                 ;10841
                  |L1.26460|
00675c  4895              LDR      r0,|L1.27060|
00675e  f9b00000          LDRSH    r0,[r0,#0]            ;10841  ; NUMSK
006762  4284              CMP      r4,r0                 ;10841
006764  f6ffaf76          BLT      |L1.26196|
                  |L1.26472|
;;;10932  	}
;;;10933  }
006768  e8bd9ff0          POP      {r4-r12,pc}
;;;10934  
                          ENDP

                  zar_superviser_start PROC
;;;10971  //-----------------------------------------------
;;;10972  void zar_superviser_start(void)
00676c  4ab8              LDR      r2,|L1.27216|
;;;10973  {
;;;10974  sign_U[0]=1;
00676e  f04f0001          MOV      r0,#1
006772  7010              STRB     r0,[r2,#0]
;;;10975  sign_I[0]=1;
006774  49b7              LDR      r1,|L1.27220|
006776  7008              STRB     r0,[r1,#0]
;;;10976  sign_U[1]=1;
006778  7050              STRB     r0,[r2,#1]
;;;10977  sign_I[1]=1;
00677a  7048              STRB     r0,[r1,#1]
;;;10978  
;;;10979  }
00677c  4770              BX       lr
;;;10980  
                          ENDP

                  zar_superviser_drv PROC
;;;10936  //-----------------------------------------------
;;;10937  void zar_superviser_drv(void)
00677e  e92d5ff0          PUSH     {r4-r12,lr}
;;;10938  {
;;;10939  
;;;10940  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006782  48b6              LDR      r0,|L1.27228|
006784  f8df92d8          LDR      r9,|L1.27232|
006788  f8df82cc          LDR      r8,|L1.27224|
00678c  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
006790  f9b90000          LDRSH    r0,[r9,#0]
006794  4c84              LDR      r4,|L1.27048|
006796  ebc01100          RSB      r1,r0,r0,LSL #4
00679a  3c30              SUBS     r4,r4,#0x30
00679c  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0067a0  f06f0a1d          MVN      r10,#0x1d
0067a4  f06f0b95          MVN      r11,#0x95
0067a8  2500              MOVS     r5,#0
0067aa  4ea9              LDR      r6,|L1.27216|
0067ac  f9b40056          LDRSH    r0,[r4,#0x56]
0067b0  eb0a0281          ADD      r2,r10,r1,LSL #2
0067b4  eb0b0381          ADD      r3,r11,r1,LSL #2
0067b8  4567              CMP      r7,r12
0067ba  dc05              BGT      |L1.26568|
0067bc  f8dfc2a4          LDR      r12,|L1.27236|
0067c0  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0067c4  4567              CMP      r7,r12
0067c6  da04              BGE      |L1.26578|
                  |L1.26568|
0067c8  4282              CMP      r2,r0
0067ca  dd02              BLE      |L1.26578|
0067cc  4283              CMP      r3,r0
0067ce  da00              BGE      |L1.26578|
0067d0  7035              STRB     r5,[r6,#0]
                  |L1.26578|
;;;10941  
;;;10942  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0067d2  4fa5              LDR      r7,|L1.27240|
0067d4  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0067d8  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0067dc  4f9d              LDR      r7,|L1.27220|
0067de  ebbc0f4e          CMP      r12,lr,LSL #1
0067e2  dc04              BGT      |L1.26606|
0067e4  f1ce0e00          RSB      lr,lr,#0
0067e8  ebbc0f4e          CMP      r12,lr,LSL #1
0067ec  da04              BGE      |L1.26616|
                  |L1.26606|
0067ee  4282              CMP      r2,r0
0067f0  dd02              BLE      |L1.26616|
0067f2  4283              CMP      r3,r0
0067f4  da00              BGE      |L1.26616|
0067f6  703d              STRB     r5,[r7,#0]
                  |L1.26616|
;;;10943  																 
;;;10944  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0067f8  f06f0209          MVN      r2,#9
0067fc  eb020181          ADD      r1,r2,r1,LSL #2
006800  4281              CMP      r1,r0
006802  d121              BNE      |L1.26696|
006804  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
006808  b9f0              CBNZ     r0,|L1.26696|
;;;10945  	{
;;;10946  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00680a  7830              LDRB     r0,[r6,#0]  ; sign_U
00680c  2801              CMP      r0,#1
00680e  d11b              BNE      |L1.26696|
006810  7838              LDRB     r0,[r7,#0]  ; sign_I
006812  2801              CMP      r0,#1
006814  d118              BNE      |L1.26696|
006816  f44f70ef          MOV      r0,#0x1de
00681a  f7fffffe          BL       lc640_read_int
00681e  4993              LDR      r1,|L1.27244|
006820  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006824  4288              CMP      r0,r1
006826  d00f              BEQ      |L1.26696|
006828  4891              LDR      r0,|L1.27248|
00682a  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00682c  b160              CBZ      r0,|L1.26696|
00682e  f8980041          LDRB     r0,[r8,#0x41]  ; bat
006832  07c0              LSLS     r0,r0,#31
006834  d108              BNE      |L1.26696|
;;;10947  		{
;;;10948  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006836  f44f70ef          MOV      r0,#0x1de
00683a  f7fffffe          BL       lc640_write_int
;;;10949  		superviser_cnt++;
00683e  488d              LDR      r0,|L1.27252|
006840  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006842  f1010101          ADD      r1,r1,#1
006846  7001              STRB     r1,[r0,#0]
                  |L1.26696|
;;;10950  		}
;;;10951  	
;;;10952  	}
;;;10953  
;;;10954  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
006848  4884              LDR      r0,|L1.27228|
00684a  f9b81002          LDRSH    r1,[r8,#2]  ; bat
00684e  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006852  4281              CMP      r1,r0
006854  dc06              BGT      |L1.26724|
006856  4883              LDR      r0,|L1.27236|
006858  f9b81052          LDRSH    r1,[r8,#0x52]  ; bat
00685c  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006860  4281              CMP      r1,r0
006862  da0e              BGE      |L1.26754|
                  |L1.26724|
006864  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006868  f9b41056          LDRSH    r1,[r4,#0x56]  ; main_kb_cnt
00686c  ebc01000          RSB      r0,r0,r0,LSL #4
006870  eb0a0280          ADD      r2,r10,r0,LSL #2
006874  428a              CMP      r2,r1
006876  dd04              BLE      |L1.26754|
006878  eb0b0080          ADD      r0,r11,r0,LSL #2
00687c  4288              CMP      r0,r1
00687e  da00              BGE      |L1.26754|
006880  7075              STRB     r5,[r6,#1]
                  |L1.26754|
;;;10955  
;;;10956  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006882  4979              LDR      r1,|L1.27240|
006884  f9b80058          LDRSH    r0,[r8,#0x58]  ; bat
006888  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00688c  ebb00f41          CMP      r0,r1,LSL #1
006890  dc03              BGT      |L1.26778|
006892  4249              RSBS     r1,r1,#0
006894  ebb00f41          CMP      r0,r1,LSL #1
006898  da0e              BGE      |L1.26808|
                  |L1.26778|
00689a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00689e  f9b41056          LDRSH    r1,[r4,#0x56]  ; main_kb_cnt
0068a2  ebc01000          RSB      r0,r0,r0,LSL #4
0068a6  eb0a0280          ADD      r2,r10,r0,LSL #2
0068aa  428a              CMP      r2,r1
0068ac  dd04              BLE      |L1.26808|
0068ae  eb0b0080          ADD      r0,r11,r0,LSL #2
0068b2  4288              CMP      r0,r1
0068b4  da00              BGE      |L1.26808|
0068b6  707d              STRB     r5,[r7,#1]
                  |L1.26808|
;;;10957  																 
;;;10958  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0068b8  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0068bc  ebc01100          RSB      r1,r0,r0,LSL #4
0068c0  f06f0009          MVN      r0,#9
0068c4  eb000081          ADD      r0,r0,r1,LSL #2
0068c8  f9b41056          LDRSH    r1,[r4,#0x56]  ; main_kb_cnt
0068cc  4288              CMP      r0,r1
0068ce  d122              BNE      |L1.26902|
0068d0  f8940020          LDRB     r0,[r4,#0x20]  ; spc_stat
0068d4  b9f8              CBNZ     r0,|L1.26902|
;;;10959  	{
;;;10960  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0068d6  7870              LDRB     r0,[r6,#1]  ; sign_U
0068d8  2801              CMP      r0,#1
0068da  d11c              BNE      |L1.26902|
0068dc  7878              LDRB     r0,[r7,#1]  ; sign_I
0068de  2801              CMP      r0,#1
0068e0  d119              BNE      |L1.26902|
0068e2  f44f75fe          MOV      r5,#0x1fc
0068e6  4628              MOV      r0,r5
0068e8  f7fffffe          BL       lc640_read_int
0068ec  495f              LDR      r1,|L1.27244|
0068ee  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0068f2  4288              CMP      r0,r1
0068f4  d00f              BEQ      |L1.26902|
0068f6  485e              LDR      r0,|L1.27248|
0068f8  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0068fa  2802              CMP      r0,#2
0068fc  d10b              BNE      |L1.26902|
0068fe  f8980091          LDRB     r0,[r8,#0x91]  ; bat
006902  07c0              LSLS     r0,r0,#31
006904  d107              BNE      |L1.26902|
;;;10961  		{
;;;10962  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006906  4628              MOV      r0,r5
006908  f7fffffe          BL       lc640_write_int
;;;10963  		superviser_cnt++;
00690c  4859              LDR      r0,|L1.27252|
00690e  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006910  f1010101          ADD      r1,r1,#1
006914  7001              STRB     r1,[r0,#0]
                  |L1.26902|
;;;10964  		}
;;;10965  	
;;;10966  	}
;;;10967  
;;;10968  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006916  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00691a  f06f0101          MVN      r1,#1
00691e  ebc01000          RSB      r0,r0,r0,LSL #4
006922  eb010080          ADD      r0,r1,r0,LSL #2
006926  f9b41056          LDRSH    r1,[r4,#0x56]  ; main_kb_cnt
00692a  4288              CMP      r0,r1
00692c  d102              BNE      |L1.26932|
00692e  e8bd5ff0          POP      {r4-r12,lr}
006932  e7fe              B        zar_superviser_start
                  |L1.26932|
;;;10969  }
006934  e718              B        |L1.26472|
;;;10970  
                          ENDP

                  npn_hndl PROC
;;;10981  //-----------------------------------------------
;;;10982  void npn_hndl(void)
006936  e92d03f0          PUSH     {r4-r9}
;;;10983  {
;;;10984  if(NPN_OUT!=npnoOFF)
00693a  484f              LDR      r0,|L1.27256|
;;;10985  	{
;;;10986  /*	if(NPN_SIGN==npnsAVNET)
;;;10987  		{
;;;10988  		if(net_av==1)
;;;10989  			{
;;;10990  			if(npn_tz_cnt<TZNPN)
;;;10991  				{
;;;10992  				npn_tz_cnt++;
;;;10993  				if(npn_tz_cnt==TZNPN)
;;;10994  					{
;;;10995  					npn_stat=npnsOFF;
;;;10996  					}
;;;10997  				}
;;;10998  			}
;;;10999  		else
;;;11000  			{
;;;11001  			if(npn_tz_cnt)
;;;11002  				{
;;;11003  				npn_tz_cnt--;
;;;11004  				if(npn_tz_cnt==0)
;;;11005  					{
;;;11006  					npn_stat=npnsON;
;;;11007  					}
;;;11008  				}
;;;11009  			}
;;;11010  		}*/
;;;11011  /*	if(NPN_SIGN==npnsULOAD)
;;;11012  		{
;;;11013  		if(load_U<UONPN)
;;;11014  			{
;;;11015  			if(npn_tz_cnt<TZNPN)
;;;11016  				{
;;;11017  				npn_tz_cnt++;
;;;11018  				if(npn_tz_cnt==TZNPN)
;;;11019  					{
;;;11020  					npn_stat=npnsOFF;
;;;11021  					}
;;;11022  				}
;;;11023  			}
;;;11024  		else if(load_U>UVNPN)
;;;11025  			{
;;;11026  			if(npn_tz_cnt)
;;;11027  				{
;;;11028  				npn_tz_cnt--;
;;;11029  				if(npn_tz_cnt==0)
;;;11030  					{
;;;11031  					npn_stat=npnsON;
;;;11032  					}
;;;11033  				}
;;;11034  			}
;;;11035  		}*/
;;;11036  
;;;11037  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;11038  		{
;;;11039  		if(npn_tz_cnt<TZNPN)
00693c  4f4f              LDR      r7,|L1.27260|
;;;11040  			{
;;;11041  			npn_tz_cnt++;
;;;11042  			if(npn_tz_cnt==TZNPN)
;;;11043  				{
;;;11044  				npn_stat=npnsOFF;
00693e  4e50              LDR      r6,|L1.27264|
006940  7800              LDRB     r0,[r0,#0]            ;10984  ; NPN_OUT
006942  f04f0c00          MOV      r12,#0                ;10984
;;;11045  				}
;;;11046  			}
;;;11047  		}
;;;11048  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;11049  		{
;;;11050  		if(npn_tz_cnt)
;;;11051  			{
;;;11052  			npn_tz_cnt--;
;;;11053  			if(npn_tz_cnt==0)
;;;11054  				{
;;;11055  				npn_stat=npnsON;
006946  f04f0801          MOV      r8,#1
00694a  b338              CBZ      r0,|L1.27036|
00694c  484d              LDR      r0,|L1.27268|
00694e  4639              MOV      r1,r7                 ;11039
006950  f9b05000          LDRSH    r5,[r0,#0]            ;11037  ; load_U
006954  484c              LDR      r0,|L1.27272|
006956  f9b11000          LDRSH    r1,[r1,#0]            ;11039
00695a  f9b09000          LDRSH    r9,[r0,#0]            ;11037  ; UONPN
00695e  484b              LDR      r0,|L1.27276|
006960  454d              CMP      r5,r9                 ;11037
006962  f9b02000          LDRSH    r2,[r0,#0]            ;11037
006966  484a              LDR      r0,|L1.27280|
006968  f9b03000          LDRSH    r3,[r0,#0]            ;11037
00696c  4849              LDR      r0,|L1.27284|
00696e  f9b04000          LDRSH    r4,[r0,#0]            ;11037
006972  4849              LDR      r0,|L1.27288|
006974  f9b00000          LDRSH    r0,[r0,#0]            ;11037
006978  da11              BGE      |L1.27038|
00697a  4282              CMP      r2,r0                 ;11037
00697c  db03              BLT      |L1.27014|
00697e  4283              CMP      r3,r0                 ;11037
006980  db01              BLT      |L1.27014|
006982  4284              CMP      r4,r0                 ;11037
006984  da0b              BGE      |L1.27038|
                  |L1.27014|
006986  4845              LDR      r0,|L1.27292|
006988  f9b02000          LDRSH    r2,[r0,#0]            ;11039  ; TZNPN
00698c  4291              CMP      r1,r2                 ;11039
00698e  da07              BGE      |L1.27040|
006990  f1010101          ADD      r1,r1,#1              ;11041
006994  b208              SXTH     r0,r1                 ;11041
006996  8038              STRH     r0,[r7,#0]            ;11041
006998  4290              CMP      r0,r2                 ;11042
00699a  e081              B        |L1.27296|
                  |L1.27036|
00699c  e099              B        |L1.27346|
                  |L1.27038|
00699e  e083              B        |L1.27304|
                  |L1.27040|
0069a0  e081              B        |L1.27302|
0069a2  0000              DCW      0x0000
                  |L1.27044|
                          DCD      PWM_START
                  |L1.27048|
                          DCD      ||area_number.25||+0x30
                  |L1.27052|
                          DCD      sk_cnt
                  |L1.27056|
                          DCD      sk_stat
                  |L1.27060|
                          DCD      NUMSK
                  |L1.27064|
                          DCD      ||area_number.19||
                  |L1.27068|
                          DCD      ||.bss||+0x40c
                  |L1.27072|
                          DCD      sk_av_cnt
                  |L1.27076|
                          DCD      sk_av_stat
                  |L1.27080|
                          DCD      sk_av_stat_old
                  |L1.27084|
                          DCD      SK_SIGN
                  |L1.27088|
0069d0  534b2023          DCB      "SK #1 Alarm",0
0069d4  3120416c
0069d8  61726d00
                  |L1.27100|
0069dc  534b2023          DCB      "SK #2 Alarm",0
0069e0  3220416c
0069e4  61726d00
                  |L1.27112|
0069e8  534b2023          DCB      "SK #3 Alarm",0
0069ec  3320416c
0069f0  61726d00
                  |L1.27124|
0069f4  534b2023          DCB      "SK #4 Alarm",0
0069f8  3420416c
0069fc  61726d00
                  |L1.27136|
006a00  534b2023          DCB      "SK #1 Alarm is off",0
006a04  3120416c
006a08  61726d20
006a0c  6973206f
006a10  666600  
006a13  00                DCB      0
                  |L1.27156|
006a14  534b2023          DCB      "SK #2 Alarm is off",0
006a18  3220416c
006a1c  61726d20
006a20  6973206f
006a24  666600  
006a27  00                DCB      0
                  |L1.27176|
006a28  534b2023          DCB      "SK #3 Alarm is off",0
006a2c  3320416c
006a30  61726d20
006a34  6973206f
006a38  666600  
006a3b  00                DCB      0
                  |L1.27196|
006a3c  534b2023          DCB      "SK #4 Alarm is off",0
006a40  3420416c
006a44  61726d20
006a48  6973206f
006a4c  666600  
006a4f  00                DCB      0
                  |L1.27216|
                          DCD      sign_U
                  |L1.27220|
                          DCD      sign_I
                  |L1.27224|
                          DCD      bat
                  |L1.27228|
                          DCD      u_necc_up
                  |L1.27232|
                          DCD      TBAT
                  |L1.27236|
                          DCD      u_necc_dn
                  |L1.27240|
                          DCD      IKB
                  |L1.27244|
                          DCD      BAT_C_REAL
                  |L1.27248|
                          DCD      NUMBAT
                  |L1.27252|
                          DCD      superviser_cnt
                  |L1.27256|
                          DCD      NPN_OUT
                  |L1.27260|
                          DCD      npn_tz_cnt
                  |L1.27264|
                          DCD      npn_stat
                  |L1.27268|
                          DCD      load_U
                  |L1.27272|
                          DCD      UONPN
                  |L1.27276|
                          DCD      net_Ua
                  |L1.27280|
                          DCD      net_Ub
                  |L1.27284|
                          DCD      net_Uc
                  |L1.27288|
                          DCD      UMN
                  |L1.27292|
                          DCD      TZNPN
                  |L1.27296|
006aa0  d11b              BNE      |L1.27354|
006aa2  f886c000          STRB     r12,[r6,#0]           ;11044
                  |L1.27302|
006aa6  e018              B        |L1.27354|
                  |L1.27304|
006aa8  f8dfc448          LDR      r12,|L1.28404|
006aac  f9bcc000          LDRSH    r12,[r12,#0]          ;11048  ; UVNPN
006ab0  4565              CMP      r5,r12                ;11048
006ab2  dd12              BLE      |L1.27354|
006ab4  4282              CMP      r2,r0                 ;11048
006ab6  dd10              BLE      |L1.27354|
006ab8  4283              CMP      r3,r0                 ;11048
006aba  dd0e              BLE      |L1.27354|
006abc  4284              CMP      r4,r0                 ;11048
006abe  dd0c              BLE      |L1.27354|
006ac0  b159              CBZ      r1,|L1.27354|
006ac2  f1a10101          SUB      r1,r1,#1              ;11052
006ac6  b208              SXTH     r0,r1                 ;11052
006ac8  8038              STRH     r0,[r7,#0]            ;11052
006aca  b930              CBNZ     r0,|L1.27354|
006acc  f8868000          STRB     r8,[r6,#0]
006ad0  e003              B        |L1.27354|
                  |L1.27346|
;;;11056  				}
;;;11057  			}
;;;11058  		}
;;;11059  	}
;;;11060  else
;;;11061  	{
;;;11062  	npn_tz_cnt=0;
006ad2  f8a7c000          STRH     r12,[r7,#0]
;;;11063  	npn_stat=npnsON;
006ad6  f8868000          STRB     r8,[r6,#0]
                  |L1.27354|
;;;11064  	}
;;;11065  
;;;11066  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
006ada  7830              LDRB     r0,[r6,#0]  ; npn_stat
006adc  2800              CMP      r0,#0
006ade  d107              BNE      |L1.27376|
006ae0  e8bd03f0          POP      {r4-r9}
006ae4  230f              MOVS     r3,#0xf
006ae6  2201              MOVS     r2,#1
006ae8  216e              MOVS     r1,#0x6e
006aea  20d2              MOVS     r0,#0xd2
006aec  f7ffbffe          B.W      mess_send
                  |L1.27376|
;;;11067  
;;;11068  
;;;11069  }
006af0  e8bd03f0          POP      {r4-r9}
006af4  4770              BX       lr
;;;11070  
                          ENDP

                  loadoff_hndl PROC
;;;11072  //-----------------------------------------------
;;;11073  void loadoff_hndl(void)
006af6  b5f0              PUSH     {r4-r7,lr}
;;;11074  {
;;;11075  if((load_U>UONPN)||(load_U<UVNPN))
006af8  48ff              LDR      r0,|L1.28408|
;;;11076  	{
;;;11077  	if(load_off_cnt<TZNPN)
;;;11078  		{
;;;11079  		load_off_cnt++;
;;;11080  		if(load_off_cnt>=TZNPN)
;;;11081  			{
;;;11082  			load_off_stat=npnsOFF;
006afa  2700              MOVS     r7,#0
006afc  f9b01000          LDRSH    r1,[r0,#0]            ;11075  ; load_U
006b00  48fe              LDR      r0,|L1.28412|
006b02  f9b02000          LDRSH    r2,[r0,#0]            ;11075  ; UONPN
006b06  4dfe              LDR      r5,|L1.28416|
006b08  4efe              LDR      r6,|L1.28420|
006b0a  4291              CMP      r1,r2                 ;11075
006b0c  f9b50000          LDRSH    r0,[r5,#0]            ;11077
006b10  dc04              BGT      |L1.27420|
006b12  4bf8              LDR      r3,|L1.28404|
006b14  f9b33000          LDRSH    r3,[r3,#0]            ;11075  ; UVNPN
006b18  4299              CMP      r1,r3                 ;11075
006b1a  da0d              BGE      |L1.27448|
                  |L1.27420|
006b1c  49fa              LDR      r1,|L1.28424|
006b1e  f9b11000          LDRSH    r1,[r1,#0]            ;11077  ; TZNPN
006b22  4288              CMP      r0,r1                 ;11077
006b24  da1c              BGE      |L1.27488|
006b26  f1000001          ADD      r0,r0,#1              ;11079
006b2a  b200              SXTH     r0,r0                 ;11079
006b2c  8028              STRH     r0,[r5,#0]            ;11079
006b2e  4288              CMP      r0,r1                 ;11080
006b30  db16              BLT      |L1.27488|
006b32  7037              STRB     r7,[r6,#0]
;;;11083  			load_off_cnt=TZNPN;
006b34  8029              STRH     r1,[r5,#0]
006b36  e013              B        |L1.27488|
                  |L1.27448|
;;;11084  			}
;;;11085  		}
;;;11086  	}
;;;11087  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006b38  4cf4              LDR      r4,|L1.28428|
006b3a  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006b3e  4423              ADD      r3,r3,r4
006b40  428b              CMP      r3,r1
006b42  da0d              BGE      |L1.27488|
006b44  1b12              SUBS     r2,r2,r4
006b46  428a              CMP      r2,r1
006b48  dd0a              BLE      |L1.27488|
;;;11088  	{
;;;11089  	if(load_off_cnt)
006b4a  b148              CBZ      r0,|L1.27488|
;;;11090  		{
;;;11091  		load_off_cnt--;
006b4c  f1a00001          SUB      r0,r0,#1
006b50  b200              SXTH     r0,r0
006b52  8028              STRH     r0,[r5,#0]
;;;11092  		if(load_off_cnt<=0)
006b54  2800              CMP      r0,#0
006b56  dc03              BGT      |L1.27488|
;;;11093  			{
;;;11094  			load_off_stat=npnsON;
006b58  f04f0001          MOV      r0,#1
006b5c  7030              STRB     r0,[r6,#0]
;;;11095  			load_off_cnt=0;
006b5e  802f              STRH     r7,[r5,#0]
                  |L1.27488|
;;;11096  			}
;;;11097  		}
;;;11098  	}
;;;11099  
;;;11100  
;;;11101  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006b60  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006b62  2800              CMP      r0,#0
006b64  d103              BNE      |L1.27502|
006b66  49ea              LDR      r1,|L1.28432|
006b68  f04f000a          MOV      r0,#0xa
006b6c  7008              STRB     r0,[r1,#0]
                  |L1.27502|
;;;11102  
;;;11103  
;;;11104  }
006b6e  bdf0              POP      {r4-r7,pc}
;;;11105  
                          ENDP

                  speedChargeStartStop PROC
;;;11293  //-----------------------------------------------
;;;11294  void speedChargeStartStop(void)
006b70  b538              PUSH     {r3-r5,lr}
;;;11295  {
;;;11296  spch_plazma[1]++;
006b72  4ce8              LDR      r4,|L1.28436|
006b74  7860              LDRB     r0,[r4,#1]  ; spch_plazma
006b76  f1000001          ADD      r0,r0,#1
006b7a  7060              STRB     r0,[r4,#1]
;;;11297  /*if(speedChIsOn)
;;;11298  	{
;;;11299  	speedChIsOn=0;
;;;11300  	}
;;;11301  
;;;11302  else
;;;11303  	{
;;;11304  	if(speedChrgBlckStat==0)
;;;11305  		{
;;;11306  		speedChIsOn=1;
;;;11307  		speedChTimeCnt=0;
;;;11308  		}
;;;11309  	else
;;;11310  		{
;;;11311  		show_mess(	"     Ускоренный     ",
;;;11312  	          		"       заряд        ",
;;;11313  	          		"    заблокирован!   ",
;;;11314  	          		"                    ",2000);	 
;;;11315  		}
;;;11316  	}*/
;;;11317  
;;;11318  if(sp_ch_stat!=scsOFF)
006b7c  48e6              LDR      r0,|L1.28440|
006b7e  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006b80  b151              CBZ      r1,|L1.27544|
;;;11319  	{
;;;11320  	sp_ch_stat=scsOFF;
006b82  f04f0100          MOV      r1,#0
006b86  7001              STRB     r1,[r0,#0]
;;;11321  	speedz_mem_hndl(10);
006b88  f04f000a          MOV      r0,#0xa
006b8c  f7fffffe          BL       speedz_mem_hndl
;;;11322  	spch_plazma[1]=10;
006b90  f04f000a          MOV      r0,#0xa
006b94  7060              STRB     r0,[r4,#1]
;;;11323  	}
;;;11324  
;;;11325  else
;;;11326  	{
;;;11327  	spch_plazma[1]=20;
;;;11328  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;11329  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11330  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11331  		#endif
;;;11332  		)
;;;11333  		{
;;;11334  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11335  		sp_ch_stat=scsSTEP1;
;;;11336  		#else
;;;11337  		sp_ch_stat=scsWRK;
;;;11338  		#endif
;;;11339  		speedz_mem_hndl(1);
;;;11340  		}
;;;11341  	else 
;;;11342  		{
;;;11343  		show_mess(	"     Ускоренный     ",
;;;11344  	          		"       заряд        ",
;;;11345  	          		"    заблокирован!   ",
;;;11346  	          		"                    ",2000);
;;;11347  		}
;;;11348  	}
;;;11349  }
006b96  bd38              POP      {r3-r5,pc}
                  |L1.27544|
006b98  f04f0114          MOV      r1,#0x14              ;11327
006b9c  7061              STRB     r1,[r4,#1]            ;11327
006b9e  49df              LDR      r1,|L1.28444|
006ba0  f9b12000          LDRSH    r2,[r1,#0]            ;11328  ; speedChrgBlckStat
006ba4  49de              LDR      r1,|L1.28448|
006ba6  f8913020          LDRB     r3,[r1,#0x20]         ;11328  ; spc_stat
006baa  ea420203          ORR      r2,r2,r3              ;11328
006bae  794b              LDRB     r3,[r1,#5]            ;11328  ; vz1_stat
006bb0  79c9              LDRB     r1,[r1,#7]            ;11328  ; vz2_stat
006bb2  ea420203          ORR      r2,r2,r3              ;11328
006bb6  430a              ORRS     r2,r2,r1              ;11328
006bb8  d009              BEQ      |L1.27598|
006bba  f44f60fa          MOV      r0,#0x7d0             ;11343
006bbe  9000              STR      r0,[sp,#0]            ;11343
006bc0  4bd8              LDR      r3,|L1.28452|
006bc2  a2d9              ADR      r2,|L1.28456|
006bc4  a1de              ADR      r1,|L1.28480|
006bc6  a0e4              ADR      r0,|L1.28504|
006bc8  f7fffffe          BL       show_mess
006bcc  bd38              POP      {r3-r5,pc}
                  |L1.27598|
006bce  f04f0101          MOV      r1,#1                 ;11335
006bd2  7001              STRB     r1,[r0,#0]            ;11335
006bd4  e8bd4038          POP      {r3-r5,lr}            ;11339
006bd8  4608              MOV      r0,r1                 ;11339
006bda  f7ffbffe          B.W      speedz_mem_hndl
;;;11350  
                          ENDP

                  speedChargeHndl PROC
;;;11106  //-----------------------------------------------
;;;11107  void speedChargeHndl(void)
006bde  e92d4ff8          PUSH     {r3-r11,lr}
;;;11108  {
;;;11109  /*
;;;11110  if(sp_ch_stat==scsOFF)
;;;11111  	{
;;;11112  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11113  	}*/
;;;11114  	 
;;;11115  if(sp_ch_stat==scsSTEP1)
006be2  4fcd              LDR      r7,|L1.28440|
;;;11116  	{
;;;11117  	if(sp_ch_stat_old!=sp_ch_stat)
006be4  4ee4              LDR      r6,|L1.28536|
;;;11118  		{
;;;11119  		sp_ch_stat_cnt=5;
;;;11120  		if(SP_CH_VENT_BLOK==0)
006be6  f8dfa388          LDR      r10,|L1.28528|
006bea  7839              LDRB     r1,[r7,#0]            ;11115  ; sp_ch_stat
;;;11121  			{
;;;11122  			sp_ch_stat_cnt=0;
;;;11123  			sp_ch_stat=scsWRK;
;;;11124  			}
;;;11125  		}
;;;11126  	if(sp_ch_stat_cnt)
;;;11127  		{
;;;11128  		sp_ch_stat_cnt--;
;;;11129  		if(sp_ch_stat_cnt==0)
;;;11130  			{
;;;11131  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;11132  
;;;11133  			}
;;;11134  		}
;;;11135  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006bec  f8df9384          LDR      r9,|L1.28532|
006bf0  7830              LDRB     r0,[r6,#0]            ;11117
006bf2  4ce2              LDR      r4,|L1.28540|
006bf4  2500              MOVS     r5,#0                 ;11120
006bf6  f04f0802          MOV      r8,#2                 ;11123
006bfa  2901              CMP      r1,#1                 ;11115
006bfc  d11b              BNE      |L1.27702|
006bfe  2801              CMP      r0,#1                 ;11117
006c00  d008              BEQ      |L1.27668|
006c02  f04f0105          MOV      r1,#5                 ;11119
006c06  8021              STRH     r1,[r4,#0]            ;11119
006c08  f8ba1000          LDRH     r1,[r10,#0]           ;11120  ; SP_CH_VENT_BLOK
006c0c  b911              CBNZ     r1,|L1.27668|
006c0e  8025              STRH     r5,[r4,#0]            ;11122
006c10  f8878000          STRB     r8,[r7,#0]            ;11123
                  |L1.27668|
006c14  f9b41000          LDRSH    r1,[r4,#0]            ;11126  ; sp_ch_stat_cnt
006c18  b139              CBZ      r1,|L1.27690|
006c1a  f1a10101          SUB      r1,r1,#1              ;11128
006c1e  b209              SXTH     r1,r1                 ;11128
006c20  8021              STRH     r1,[r4,#0]            ;11128
006c22  b911              CBNZ     r1,|L1.27690|
006c24  f04f0103          MOV      r1,#3                 ;11131
006c28  7039              STRB     r1,[r7,#0]            ;11131
                  |L1.27690|
006c2a  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006c2e  2901              CMP      r1,#1
006c30  d101              BNE      |L1.27702|
006c32  f8878000          STRB     r8,[r7,#0]
                  |L1.27702|
;;;11136  	}
;;;11137  
;;;11138  if(sp_ch_stat==scsWRK)
006c36  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006c38  2902              CMP      r1,#2
006c3a  d123              BNE      |L1.27780|
;;;11139  	{
;;;11140  	if(sp_ch_stat_old!=sp_ch_stat)
;;;11141  		{
;;;11142  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006c3c  4ad0              LDR      r2,|L1.28544|
;;;11143  		hv_vz_up_cnt=0;
006c3e  49d1              LDR      r1,|L1.28548|
006c40  2802              CMP      r0,#2                 ;11140
006c42  d008              BEQ      |L1.27734|
006c44  48d0              LDR      r0,|L1.28552|
006c46  f44f6361          MOV      r3,#0xe10             ;11142
006c4a  f9b00000          LDRSH    r0,[r0,#0]            ;11142  ; speedChrgTimeInHour
006c4e  fb00f003          MUL      r0,r0,r3              ;11142
006c52  6010              STR      r0,[r2,#0]            ;11142  ; sp_ch_wrk_cnt
006c54  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27734|
;;;11144  		}
;;;11145  	sp_ch_wrk_cnt--;
006c56  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006c58  f1a00001          SUB      r0,r0,#1
006c5c  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;11146  	hv_vz_up_cnt++;
006c5e  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006c60  f1020201          ADD      r2,r2,#1
006c64  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11147  	if(sp_ch_wrk_cnt==0)
006c66  b918              CBNZ     r0,|L1.27760|
;;;11148  		{
;;;11149  		sp_ch_stat=scsOFF;
006c68  703d              STRB     r5,[r7,#0]
;;;11150  		speedz_mem_hndl(0);
006c6a  2000              MOVS     r0,#0
006c6c  f7fffffe          BL       speedz_mem_hndl
                  |L1.27760|
;;;11151  		}
;;;11152  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11153  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006c70  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006c74  b930              CBNZ     r0,|L1.27780|
006c76  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006c7a  2801              CMP      r0,#1
006c7c  d102              BNE      |L1.27780|
006c7e  f04f0004          MOV      r0,#4
006c82  7038              STRB     r0,[r7,#0]
                  |L1.27780|
;;;11154  	#endif
;;;11155  	}
;;;11156  
;;;11157  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006c84  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;11158  	{
;;;11159  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;11160  		{
;;;11161  		sp_ch_stat_cnt=10;
;;;11162  		}
;;;11163  	sp_ch_stat_cnt--;
;;;11164  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;11165  		{
;;;11166  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006c86  f2413b88          MOV      r11,#0x1388
006c8a  f04f0a0a          MOV      r10,#0xa              ;11161
006c8e  2803              CMP      r0,#3                 ;11157
006c90  d119              BNE      |L1.27846|
006c92  7830              LDRB     r0,[r6,#0]            ;11159  ; sp_ch_stat_old
006c94  2803              CMP      r0,#3                 ;11159
006c96  d101              BNE      |L1.27804|
006c98  8820              LDRH     r0,[r4,#0]            ;11159  ; sp_ch_stat_cnt
006c9a  b908              CBNZ     r0,|L1.27808|
                  |L1.27804|
006c9c  f8a4a000          STRH     r10,[r4,#0]           ;11161
                  |L1.27808|
006ca0  8820              LDRH     r0,[r4,#0]            ;11163  ; sp_ch_stat_cnt
006ca2  f1a00001          SUB      r0,r0,#1              ;11163
006ca6  b200              SXTH     r0,r0                 ;11163
006ca8  8020              STRH     r0,[r4,#0]            ;11163
006caa  280a              CMP      r0,#0xa               ;11164
006cac  d001              BEQ      |L1.27826|
006cae  2809              CMP      r0,#9                 ;11164
006cb0  d109              BNE      |L1.27846|
                  |L1.27826|
006cb2  4bb6              LDR      r3,|L1.28556|
006cb4  a0b6              ADR      r0,|L1.28560|
006cb6  f1030218          ADD      r2,r3,#0x18
006cba  f1020118          ADD      r1,r2,#0x18
006cbe  f8cdb000          STR      r11,[sp,#0]
006cc2  f7fffffe          BL       show_mess
                  |L1.27846|
;;;11167  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11168  					"      ВКЛЮЧЕН       ",
;;;11169  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11170  					5000);
;;;11171  		}
;;;11172  	}
;;;11173  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006cc6  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006cc8  2804              CMP      r0,#4
006cca  d11f              BNE      |L1.27916|
;;;11174  	{
;;;11175  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006ccc  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006cce  2804              CMP      r0,#4
006cd0  d101              BNE      |L1.27862|
006cd2  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006cd4  b908              CBNZ     r0,|L1.27866|
                  |L1.27862|
;;;11176  		{
;;;11177  		sp_ch_stat_cnt=10;
006cd6  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27866|
;;;11178  		}
;;;11179  	sp_ch_stat_cnt--;
006cda  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006cdc  f1a00001          SUB      r0,r0,#1
006ce0  b200              SXTH     r0,r0
006ce2  8020              STRH     r0,[r4,#0]
;;;11180  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006ce4  280a              CMP      r0,#0xa
006ce6  d001              BEQ      |L1.27884|
006ce8  2809              CMP      r0,#9
006cea  d109              BNE      |L1.27904|
                  |L1.27884|
;;;11181  		{
;;;11182  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006cec  4bae              LDR      r3,|L1.28584|
006cee  a0a8              ADR      r0,|L1.28560|
006cf0  f1030218          ADD      r2,r3,#0x18
006cf4  f1020118          ADD      r1,r2,#0x18
006cf8  f8cdb000          STR      r11,[sp,#0]
006cfc  f7fffffe          BL       show_mess
                  |L1.27904|
;;;11183  					"    ЗАБЛОКИРОВАН    ",
;;;11184  					"     НЕИСПРАВНА     ",
;;;11185  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11186  					5000);
;;;11187  		}
;;;11188  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006d00  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006d04  2801              CMP      r0,#1
006d06  d101              BNE      |L1.27916|
006d08  f8878000          STRB     r8,[r7,#0]
                  |L1.27916|
;;;11189  	}
;;;11190  
;;;11191  
;;;11192  sp_ch_stat_old=sp_ch_stat;
006d0c  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006d0e  7030              STRB     r0,[r6,#0]
;;;11193  
;;;11194  
;;;11195  
;;;11196  if(speedChrgAvtEn==1)
006d10  49a6              LDR      r1,|L1.28588|
;;;11197  	{
;;;11198  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;11199  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11200  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11201  		#endif
;;;11202  		)
;;;11203  		{
;;;11204  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;11205  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11206  		&&(abs(Ib_ips_termokompensat[0]/10-IZMAX)<5)
;;;11207  		#endif
;;;11208  		#ifdef UKU_220_V2
;;;11209  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;11210  		#endif
;;;11211  		&&(!speedChrgBlckStat))
006d12  4c82              LDR      r4,|L1.28444|
006d14  8809              LDRH     r1,[r1,#0]            ;11196  ; speedChrgAvtEn
006d16  2901              CMP      r1,#1                 ;11196
006d18  d10a              BNE      |L1.27952|
006d1a  4981              LDR      r1,|L1.28448|
;;;11212  			{
;;;11213  			speedChargeStartCnt++;
006d1c  4ea4              LDR      r6,|L1.28592|
006d1e  f8912020          LDRB     r2,[r1,#0x20]         ;11198  ; spc_stat
006d22  4310              ORRS     r0,r0,r2              ;11198
006d24  794a              LDRB     r2,[r1,#5]            ;11198  ; vz1_stat
006d26  79c9              LDRB     r1,[r1,#7]            ;11198  ; vz2_stat
006d28  4310              ORRS     r0,r0,r2              ;11198
006d2a  4308              ORRS     r0,r0,r1              ;11198
006d2c  d007              BEQ      |L1.27966|
;;;11214  			if(speedChargeStartCnt>=60)
;;;11215  				{
;;;11216  				speedChargeStartStop();
;;;11217  				speedz_mem_hndl(5);
;;;11218  				}
;;;11219  			}
;;;11220  		else speedChargeStartCnt=0;
;;;11221  		}
;;;11222  	else speedChargeStartCnt=0;
006d2e  7035              STRB     r5,[r6,#0]
                  |L1.27952|
;;;11223  	}
;;;11224  
;;;11225  
;;;11226  
;;;11227  /*
;;;11228  if(speedChIsOn)
;;;11229  	{
;;;11230  	speedChTimeCnt++;
;;;11231  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11232  		{
;;;11233  		speedChIsOn=0;
;;;11234  		}
;;;11235  	if(speedChrgBlckStat)
;;;11236  		{
;;;11237  		speedChIsOn=0;
;;;11238  		speedChTimeCnt=0;
;;;11239  		}
;;;11240  	}
;;;11241  
;;;11242  
;;;11243  
;;;11244  if(speedChrgAvtEn)
;;;11245  	{
;;;11246  	if(!speedChIsOn)
;;;11247  		{
;;;11248  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11249  			{
;;;11250  			speedChIsOn=1;
;;;11251  			}
;;;11252  		}
;;;11253  	}
;;;11254  
;;;11255  
;;;11256  */
;;;11257  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006d30  48a0              LDR      r0,|L1.28596|
006d32  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006d34  2802              CMP      r0,#2
006d36  d02e              BEQ      |L1.28054|
006d38  8025              STRH     r5,[r4,#0]
                  |L1.27962|
;;;11258  else
;;;11259  	{
;;;11260  	speedChrgBlckStat=0;
;;;11261  	if(speedChrgBlckSrc==1)
;;;11262  		{
;;;11263  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11264  		}
;;;11265  	else if(speedChrgBlckSrc==2)
;;;11266  		{
;;;11267  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11268  		}
;;;11269  	}
;;;11270  
;;;11271  /*
;;;11272  if(speedChrgBlckStat==1)
;;;11273  	{
;;;11274  
;;;11275  	//speedChargeStartStop();
;;;11276  
;;;11277  	speedChrgShowCnt++;
;;;11278  	if(speedChrgShowCnt>=30)	
;;;11279  		{
;;;11280  		speedChrgShowCnt=0;
;;;11281  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11282  					"       ЗАРЯД        ",
;;;11283  					"     ЗАПРЕЩЕН!!!    ",
;;;11284  					"                    ",
;;;11285  					5000);
;;;11286  		}
;;;11287  	} 
;;;11288  else speedChrgShowCnt=0;  */
;;;11289  
;;;11290  
;;;11291  }
006d3a  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27966|
006d3e  486e              LDR      r0,|L1.28408|
006d40  499d              LDR      r1,|L1.28600|
006d42  f9b00000          LDRSH    r0,[r0,#0]            ;11204  ; load_U
006d46  f9b11000          LDRSH    r1,[r1,#0]            ;11204  ; u_necc
006d4a  4288              CMP      r0,r1                 ;11204
006d4c  da14              BGE      |L1.28024|
006d4e  1a08              SUBS     r0,r1,r0              ;11204
006d50  499a              LDR      r1,|L1.28604|
006d52  f9b11000          LDRSH    r1,[r1,#0]            ;11204  ; speedChrgDU
006d56  4288              CMP      r0,r1                 ;11204
006d58  dd0e              BLE      |L1.28024|
006d5a  4899              LDR      r0,|L1.28608|
006d5c  4999              LDR      r1,|L1.28612|
006d5e  f9b00000          LDRSH    r0,[r0,#0]            ;11206  ; Ib_ips_termokompensat
006d62  8809              LDRH     r1,[r1,#0]            ;11206  ; IZMAX
006d64  fb90f0fa          SDIV     r0,r0,r10             ;11206
006d68  1a40              SUBS     r0,r0,r1              ;11206
006d6a  b200              SXTH     r0,r0                 ;11206
006d6c  f7fffffe          BL       abs
006d70  2805              CMP      r0,#5                 ;11206
006d72  da01              BGE      |L1.28024|
006d74  8820              LDRH     r0,[r4,#0]            ;11211  ; speedChrgBlckStat
006d76  b108              CBZ      r0,|L1.28028|
                  |L1.28024|
006d78  7035              STRB     r5,[r6,#0]            ;11220
006d7a  e7d9              B        |L1.27952|
                  |L1.28028|
006d7c  7830              LDRB     r0,[r6,#0]            ;11213  ; speedChargeStartCnt
006d7e  f1000001          ADD      r0,r0,#1              ;11213
006d82  b2c0              UXTB     r0,r0                 ;11213
006d84  7030              STRB     r0,[r6,#0]            ;11213
006d86  283c              CMP      r0,#0x3c              ;11214
006d88  d3d2              BCC      |L1.27952|
006d8a  f7fffffe          BL       speedChargeStartStop
006d8e  2005              MOVS     r0,#5                 ;11217
006d90  f7fffffe          BL       speedz_mem_hndl
006d94  e7cc              B        |L1.27952|
                  |L1.28054|
006d96  8025              STRH     r5,[r4,#0]            ;11260
006d98  488b              LDR      r0,|L1.28616|
006d9a  498c              LDR      r1,|L1.28620|
006d9c  f44f63fa          MOV      r3,#0x7d0             ;11263
006da0  f9b00000          LDRSH    r0,[r0,#0]            ;11267  ; speedChrgBlckLog
006da4  b918              CBNZ     r0,|L1.28078|
006da6  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;11267  ; adc_buff_
006daa  429a              CMP      r2,r3                 ;11267
006dac  dc05              BGT      |L1.28090|
                  |L1.28078|
006dae  2801              CMP      r0,#1                 ;11267
006db0  d1c3              BNE      |L1.27962|
006db2  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;11267  ; adc_buff_
006db6  4298              CMP      r0,r3                 ;11267
006db8  dabf              BGE      |L1.27962|
                  |L1.28090|
006dba  f04f0001          MOV      r0,#1                 ;11267
006dbe  8020              STRH     r0,[r4,#0]            ;11267
006dc0  e7bb              B        |L1.27962|
;;;11292  
                          ENDP

                  averageChargeHndl PROC
;;;11351  //-----------------------------------------------
;;;11352  void averageChargeHndl(void)
006dc2  e92d4ff8          PUSH     {r3-r11,lr}
;;;11353  {
;;;11354  /*
;;;11355  if(hv_vz_stat==hvsOFF)
;;;11356  	{
;;;11357  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11358  	} */
;;;11359  if(hv_vz_stat!=hvsOFF)
006dc6  f8dfa208          LDR      r10,|L1.28624|
006dca  f04f0b00          MOV      r11,#0
006dce  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006dd2  b130              CBZ      r0,|L1.28130|
;;;11360  	{
;;;11361  	hv_vz_stat=hvsOFF; 	
006dd4  f88ab000          STRB     r11,[r10,#0]
;;;11362  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006dd8  2100              MOVS     r1,#0
006dda  f44f70b4          MOV      r0,#0x168
006dde  f7fffffe          BL       lc640_write
                  |L1.28130|
;;;11363  	}
;;;11364  
;;;11365  if(hv_vz_stat==hvsSTEP1)
006de2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;11366  	{
;;;11367  	if(hv_vz_stat_old!=hv_vz_stat)
;;;11368  		{
;;;11369  		hv_vz_stat_cnt=5;
;;;11370  		}
;;;11371  	if(hv_vz_stat_cnt)
;;;11372  		{
;;;11373  		hv_vz_stat_cnt--;
;;;11374  		if(hv_vz_stat_cnt==0)
;;;11375  			{
;;;11376  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;11377  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;11378  			}
;;;11379  		}
;;;11380  	if(sk_stat[0]==1)
006de6  4e63              LDR      r6,|L1.28532|
006de8  4d7a              LDR      r5,|L1.28628|
006dea  4c7b              LDR      r4,|L1.28632|
006dec  f04f0905          MOV      r9,#5                 ;11369
006df0  2801              CMP      r0,#1                 ;11365
006df2  d131              BNE      |L1.28248|
006df4  7828              LDRB     r0,[r5,#0]            ;11367  ; hv_vz_stat_old
006df6  2801              CMP      r0,#1                 ;11367
006df8  d001              BEQ      |L1.28158|
006dfa  f8a49000          STRH     r9,[r4,#0]            ;11369
                  |L1.28158|
006dfe  f9b40000          LDRSH    r0,[r4,#0]            ;11371  ; hv_vz_stat_cnt
006e02  b168              CBZ      r0,|L1.28192|
006e04  f1a00001          SUB      r0,r0,#1              ;11373
006e08  b200              SXTH     r0,r0                 ;11373
006e0a  8020              STRH     r0,[r4,#0]            ;11373
006e0c  b940              CBNZ     r0,|L1.28192|
006e0e  f04f0006          MOV      r0,#6                 ;11376
006e12  f88a0000          STRB     r0,[r10,#0]           ;11376
006e16  4601              MOV      r1,r0                 ;11377
006e18  f44f70b4          MOV      r0,#0x168             ;11377
006e1c  f7fffffe          BL       lc640_write
                  |L1.28192|
006e20  7830              LDRB     r0,[r6,#0]  ; sk_stat
006e22  2801              CMP      r0,#1
006e24  d118              BNE      |L1.28248|
;;;11381  		{
;;;11382  		hv_vz_stat=hvsSTEP2;
006e26  f04f0002          MOV      r0,#2
006e2a  f88a0000          STRB     r0,[r10,#0]
;;;11383  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006e2e  4601              MOV      r1,r0
006e30  f44f70b4          MOV      r0,#0x168
006e34  f7fffffe          BL       lc640_write
;;;11384  		tree_up(iHV_STEP2_2,1,0,0);
006e38  2300              MOVS     r3,#0
006e3a  461a              MOV      r2,r3
006e3c  2101              MOVS     r1,#1
006e3e  20f2              MOVS     r0,#0xf2
006e40  f7fffffe          BL       tree_up
;;;11385  		tree_up(iHV_STEP2_1,0,0,0);
006e44  2300              MOVS     r3,#0
006e46  461a              MOV      r2,r3
006e48  4619              MOV      r1,r3
006e4a  20f1              MOVS     r0,#0xf1
006e4c  f7fffffe          BL       tree_up
;;;11386  		ret(1200);
006e50  f44f6096          MOV      r0,#0x4b0
006e54  f7fffffe          BL       ||ret||
                  |L1.28248|
;;;11387  		}
;;;11388  	}
;;;11389  
;;;11390  if(hv_vz_stat==hvsSTEP2)
006e58  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e5c  2802              CMP      r0,#2
006e5e  d10b              BNE      |L1.28280|
;;;11391  	{
;;;11392  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e60  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006e62  2902              CMP      r1,#2
006e64  d101              BNE      |L1.28266|
006e66  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006e68  b911              CBNZ     r1,|L1.28272|
                  |L1.28266|
;;;11393  		{
;;;11394  		hv_vz_stat_cnt=15;
006e6a  f04f010f          MOV      r1,#0xf
006e6e  8021              STRH     r1,[r4,#0]
                  |L1.28272|
;;;11395  		}
;;;11396  	hv_vz_stat_cnt--;
006e70  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006e72  f1a10101          SUB      r1,r1,#1
006e76  8021              STRH     r1,[r4,#0]
                  |L1.28280|
;;;11397  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;11398  	//	{
;;;11399  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;11400  	//				"  Напряжение будет  ",
;;;11401  	//				" увеличено до     @В",
;;;11402  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;11403  	//				4800,UVZ,1);
;;;11404  	//	}
;;;11405  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;11406  	//	{
;;;11407  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;11408  	//				"     НАЖАТИЕМ       ",
;;;11409  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;11410  	//				"      КНОПКИ        ",
;;;11411  	//				4800);
;;;11412  	//	} 
;;;11413  /*	if(sk_stat[1]==1)
;;;11414  		{
;;;11415  		hv_vz_stat=hvsWRK;
;;;11416  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;11417  		}*/
;;;11418  	}
;;;11419  
;;;11420  if(hv_vz_stat==hvsSTEP3)
;;;11421  	{
;;;11422  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;11423  		{
;;;11424  		hv_vz_stat_cnt=10;
006e78  270a              MOVS     r7,#0xa
;;;11425  		}
;;;11426  	hv_vz_stat_cnt--;
;;;11427  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;11428  		{
;;;11429  		show_mess(	"     ВКЛЮЧИТЕ       ",
006e7a  f2413888          MOV      r8,#0x1388
006e7e  2803              CMP      r0,#3                 ;11420
006e80  d123              BNE      |L1.28362|
006e82  7828              LDRB     r0,[r5,#0]            ;11422  ; hv_vz_stat_old
006e84  2803              CMP      r0,#3                 ;11422
006e86  d101              BNE      |L1.28300|
006e88  8820              LDRH     r0,[r4,#0]            ;11422  ; hv_vz_stat_cnt
006e8a  b900              CBNZ     r0,|L1.28302|
                  |L1.28300|
006e8c  8027              STRH     r7,[r4,#0]            ;11424
                  |L1.28302|
006e8e  8820              LDRH     r0,[r4,#0]            ;11426  ; hv_vz_stat_cnt
006e90  f1a00001          SUB      r0,r0,#1              ;11426
006e94  b200              SXTH     r0,r0                 ;11426
006e96  8020              STRH     r0,[r4,#0]            ;11426
006e98  280a              CMP      r0,#0xa               ;11427
006e9a  d001              BEQ      |L1.28320|
006e9c  2809              CMP      r0,#9                 ;11427
006e9e  d10a              BNE      |L1.28342|
                  |L1.28320|
006ea0  4b20              LDR      r3,|L1.28452|
006ea2  a24e              ADR      r2,|L1.28636|
006ea4  3b48              SUBS     r3,r3,#0x48
006ea6  f2a3513c          SUB      r1,r3,#0x53c
006eaa  f1010018          ADD      r0,r1,#0x18
006eae  f8cd8000          STR      r8,[sp,#0]
006eb2  f7fffffe          BL       show_mess
                  |L1.28342|
;;;11430  					"      ТУМБЛЕР       ",
;;;11431  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11432  					"       ЗАРЯД        ",
;;;11433  					5000);
;;;11434  		}
;;;11435  	if(sk_stat[1]==1)
006eb6  7870              LDRB     r0,[r6,#1]  ; sk_stat
006eb8  2801              CMP      r0,#1
006eba  d106              BNE      |L1.28362|
;;;11436  		{
;;;11437  		hv_vz_stat=hvsWRK;
006ebc  f88a9000          STRB     r9,[r10,#0]
;;;11438  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006ec0  2105              MOVS     r1,#5
006ec2  f44f70b4          MOV      r0,#0x168
006ec6  f7fffffe          BL       lc640_write
                  |L1.28362|
;;;11439  		}
;;;11440  	}
;;;11441  
;;;11442  if(hv_vz_stat==hvsWRK)
006eca  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ece  2805              CMP      r0,#5
006ed0  d10d              BNE      |L1.28398|
;;;11443  	{
;;;11444  	if(hv_vz_stat_old!=hv_vz_stat)
006ed2  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;11445  		{
;;;11446  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006ed4  4a47              LDR      r2,|L1.28660|
;;;11447  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;11448  		hv_vz_up_cnt=0L;
006ed6  492b              LDR      r1,|L1.28548|
006ed8  2805              CMP      r0,#5                 ;11444
006eda  d009              BEQ      |L1.28400|
006edc  4846              LDR      r0,|L1.28664|
006ede  f44f6361          MOV      r3,#0xe10             ;11446
006ee2  f9b00000          LDRSH    r0,[r0,#0]            ;11446  ; VZ_HR
006ee6  fb00f303          MUL      r3,r0,r3              ;11446
006eea  6013              STR      r3,[r2,#0]            ;11446  ; hv_vz_wrk_cnt
006eec  e086              B        |L1.28668|
                  |L1.28398|
006eee  e0b3              B        |L1.28760|
                  |L1.28400|
006ef0  e08a              B        |L1.28680|
006ef2  0000              DCW      0x0000
                  |L1.28404|
                          DCD      UVNPN
                  |L1.28408|
                          DCD      load_U
                  |L1.28412|
                          DCD      UONPN
                  |L1.28416|
                          DCD      load_off_cnt
                  |L1.28420|
                          DCD      load_off_stat
                  |L1.28424|
                          DCD      TZNPN
                  |L1.28428|
                          DCD      dUNPN
                  |L1.28432|
                          DCD      tloaddisable_cmnd
                  |L1.28436|
                          DCD      spch_plazma
                  |L1.28440|
                          DCD      sp_ch_stat
                  |L1.28444|
                          DCD      speedChrgBlckStat
                  |L1.28448|
                          DCD      ||area_number.25||
                  |L1.28452|
                          DCD      ||.text||+0x1cc0
                  |L1.28456|
006f28  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006f2c  e7e0e1eb
006f30  eeeae8f0
006f34  eee2e0ed
006f38  21      
006f39  20202000          DCB      "   ",0
006f3d  00                DCB      0
006f3e  00                DCB      0
006f3f  00                DCB      0
                  |L1.28480|
006f40  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006f44  202020e7
006f48  e0f0ffe4
006f4c  20202020
006f50  20202020
006f54  00      
006f55  00                DCB      0
006f56  00                DCB      0
006f57  00                DCB      0
                  |L1.28504|
006f58  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006f5c  20d3f1ea
006f60  eef0e5ed
006f64  edfbe920
006f68  20202020
006f6c  00      
006f6d  00                DCB      0
006f6e  00                DCB      0
006f6f  00                DCB      0
                  |L1.28528|
                          DCD      SP_CH_VENT_BLOK
                  |L1.28532|
                          DCD      sk_stat
                  |L1.28536|
                          DCD      sp_ch_stat_old
                  |L1.28540|
                          DCD      sp_ch_stat_cnt
                  |L1.28544|
                          DCD      sp_ch_wrk_cnt
                  |L1.28548|
                          DCD      hv_vz_up_cnt
                  |L1.28552|
                          DCD      speedChrgTimeInHour
                  |L1.28556|
                          DCD      ||.text||+0x1b88
                  |L1.28560|
006f90  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006f94  caced0c5
006f98  cdcddbc9
006f9c  20c7c0  
006f9f  d0dfc420          DCB      208,223,196,"  ",0
006fa3  2000    
006fa5  00                DCB      0
006fa6  00                DCB      0
006fa7  00                DCB      0
                  |L1.28584|
                          DCD      ||.text||+0x16a8
                  |L1.28588|
                          DCD      speedChrgAvtEn
                  |L1.28592|
                          DCD      speedChargeStartCnt
                  |L1.28596|
                          DCD      speedChrgBlckSrc
                  |L1.28600|
                          DCD      u_necc
                  |L1.28604|
                          DCD      speedChrgDU
                  |L1.28608|
                          DCD      Ib_ips_termokompensat
                  |L1.28612|
                          DCD      IZMAX
                  |L1.28616|
                          DCD      speedChrgBlckLog
                  |L1.28620|
                          DCD      ||.bss||+0x40c
                  |L1.28624|
                          DCD      hv_vz_stat
                  |L1.28628|
                          DCD      hv_vz_stat_old
                  |L1.28632|
                          DCD      hv_vz_stat_cnt
                  |L1.28636|
006fdc  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006fe0  dbd0c0c2
006fe4  cdc8c2c0
006fe8  ded9c8c9
006fec  20202020          DCB      "    ",0
006ff0  00      
006ff1  00                DCB      0
006ff2  00                DCB      0
006ff3  00                DCB      0
                  |L1.28660|
                          DCD      hv_vz_wrk_cnt
                  |L1.28664|
                          DCD      VZ_HR
                  |L1.28668|
006ffc  b910              CBNZ     r0,|L1.28676|
006ffe  f44f60e1          MOV      r0,#0x708             ;11447
007002  6010              STR      r0,[r2,#0]            ;11447  ; hv_vz_wrk_cnt
                  |L1.28676|
007004  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.28680|
;;;11449  		}
;;;11450  	hv_vz_wrk_cnt--;
007008  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
00700a  f1a00001          SUB      r0,r0,#1
00700e  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;11451  	hv_vz_up_cnt++;
007010  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
007012  f1020201          ADD      r2,r2,#1
007016  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11452  
;;;11453  	if(hv_vz_wrk_cnt==0)
007018  b940              CBNZ     r0,|L1.28716|
;;;11454  		{
;;;11455  		hv_vz_stat=hvsERR4;
00701a  f04f0009          MOV      r0,#9
00701e  f88a0000          STRB     r0,[r10,#0]
;;;11456  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
007022  4601              MOV      r1,r0
007024  f44f70b4          MOV      r0,#0x168
007028  f7fffffe          BL       lc640_write
                  |L1.28716|
;;;11457  		}
;;;11458  	if(sk_stat[0]==0)
00702c  7830              LDRB     r0,[r6,#0]  ; sk_stat
00702e  b940              CBNZ     r0,|L1.28738|
;;;11459  		{
;;;11460  		hv_vz_stat=hvsERR2;
007030  f04f0007          MOV      r0,#7
007034  f88a0000          STRB     r0,[r10,#0]
;;;11461  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
007038  4601              MOV      r1,r0
00703a  f44f70b4          MOV      r0,#0x168
00703e  f7fffffe          BL       lc640_write
                  |L1.28738|
;;;11462  		}
;;;11463  	if(sk_stat[1]==0)
007042  7870              LDRB     r0,[r6,#1]  ; sk_stat
007044  b940              CBNZ     r0,|L1.28760|
;;;11464  		{
;;;11465  		hv_vz_stat=hvsERR3;
007046  f04f0008          MOV      r0,#8
00704a  f88a0000          STRB     r0,[r10,#0]
;;;11466  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
00704e  4601              MOV      r1,r0
007050  f44f70b4          MOV      r0,#0x168
007054  f7fffffe          BL       lc640_write
                  |L1.28760|
;;;11467  		}
;;;11468  	}
;;;11469  
;;;11470  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
007058  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00705c  2806              CMP      r0,#6
00705e  d119              BNE      |L1.28820|
;;;11471  	{
;;;11472  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
007060  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
007062  2806              CMP      r0,#6
007064  d101              BNE      |L1.28778|
007066  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007068  b900              CBNZ     r0,|L1.28780|
                  |L1.28778|
;;;11473  		{
;;;11474  		hv_vz_stat_cnt=10;
00706a  8027              STRH     r7,[r4,#0]
                  |L1.28780|
;;;11475  		}
;;;11476  	hv_vz_stat_cnt--;
00706c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00706e  f1a00001          SUB      r0,r0,#1
007072  b200              SXTH     r0,r0
007074  8020              STRH     r0,[r4,#0]
;;;11477  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007076  280a              CMP      r0,#0xa
007078  d001              BEQ      |L1.28798|
00707a  2809              CMP      r0,#9
00707c  d10a              BNE      |L1.28820|
                  |L1.28798|
;;;11478  		{
;;;11479  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00707e  4bfa              LDR      r3,|L1.29800|
007080  f8cd8000          STR      r8,[sp,#0]
007084  f1030218          ADD      r2,r3,#0x18
007088  f1020118          ADD      r1,r2,#0x18
00708c  f5a16099          SUB      r0,r1,#0x4c8
007090  f7fffffe          BL       show_mess
                  |L1.28820|
;;;11480  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11481  					"      ВКЛЮЧЕН       ",
;;;11482  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11483  					5000);
;;;11484  		}
;;;11485  	}
;;;11486  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
007094  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007098  2807              CMP      r0,#7
00709a  d123              BNE      |L1.28900|
;;;11487  	{
;;;11488  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
00709c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
00709e  2807              CMP      r0,#7
0070a0  d101              BNE      |L1.28838|
0070a2  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0070a4  b900              CBNZ     r0,|L1.28840|
                  |L1.28838|
;;;11489  		{
;;;11490  		hv_vz_stat_cnt=10;
0070a6  8027              STRH     r7,[r4,#0]
                  |L1.28840|
;;;11491  		}
;;;11492  	hv_vz_stat_cnt--;
0070a8  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0070aa  f1a00001          SUB      r0,r0,#1
0070ae  b200              SXTH     r0,r0
0070b0  8020              STRH     r0,[r4,#0]
;;;11493  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
0070b2  280a              CMP      r0,#0xa
0070b4  d001              BEQ      |L1.28858|
0070b6  2809              CMP      r0,#9
0070b8  d10a              BNE      |L1.28880|
                  |L1.28858|
;;;11494  		{
;;;11495  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0070ba  4bec              LDR      r3,|L1.29804|
0070bc  f8cd8000          STR      r8,[sp,#0]
0070c0  f1030218          ADD      r2,r3,#0x18
0070c4  f1020118          ADD      r1,r2,#0x18
0070c8  f1010018          ADD      r0,r1,#0x18
0070cc  f7fffffe          BL       show_mess
                  |L1.28880|
;;;11496  					"    ЗАБЛОКИРОВАН    ",
;;;11497  					"     НЕИСПРАВНА     ",
;;;11498  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11499  					5000);
;;;11500  		}
;;;11501  	if(sk_stat[0]==1)
0070d0  7830              LDRB     r0,[r6,#0]  ; sk_stat
0070d2  2801              CMP      r0,#1
0070d4  d106              BNE      |L1.28900|
;;;11502  		{
;;;11503  		hv_vz_stat=hvsWRK;
0070d6  f88a9000          STRB     r9,[r10,#0]
;;;11504  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0070da  2105              MOVS     r1,#5
0070dc  f44f70b4          MOV      r0,#0x168
0070e0  f7fffffe          BL       lc640_write
                  |L1.28900|
;;;11505  		}
;;;11506  	}
;;;11507  
;;;11508  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
0070e4  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0070e8  2808              CMP      r0,#8
0070ea  d123              BNE      |L1.28980|
;;;11509  	{
;;;11510  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0070ec  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0070ee  2808              CMP      r0,#8
0070f0  d101              BNE      |L1.28918|
0070f2  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0070f4  b900              CBNZ     r0,|L1.28920|
                  |L1.28918|
;;;11511  		{
;;;11512  		hv_vz_stat_cnt=10;
0070f6  8027              STRH     r7,[r4,#0]
                  |L1.28920|
;;;11513  		}
;;;11514  	hv_vz_stat_cnt--;
0070f8  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0070fa  f1a00001          SUB      r0,r0,#1
0070fe  b200              SXTH     r0,r0
007100  8020              STRH     r0,[r4,#0]
;;;11515  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007102  280a              CMP      r0,#0xa
007104  d001              BEQ      |L1.28938|
007106  2809              CMP      r0,#9
007108  d10a              BNE      |L1.28960|
                  |L1.28938|
;;;11516  		{
;;;11517  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00710a  4bd9              LDR      r3,|L1.29808|
00710c  f8cd8000          STR      r8,[sp,#0]
007110  f5a362cc          SUB      r2,r3,#0x660
007114  f1020118          ADD      r1,r2,#0x18
007118  f5a160a5          SUB      r0,r1,#0x528
00711c  f7fffffe          BL       show_mess
                  |L1.28960|
;;;11518  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;11519  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;11520  					"    ТУМБЛЕРА!!!     ",
;;;11521  					5000);
;;;11522  		}
;;;11523  	if(sk_stat[1]==1)
007120  7870              LDRB     r0,[r6,#1]  ; sk_stat
007122  2801              CMP      r0,#1
007124  d106              BNE      |L1.28980|
;;;11524  		{
;;;11525  		hv_vz_stat=hvsWRK;
007126  f88a9000          STRB     r9,[r10,#0]
;;;11526  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
00712a  2105              MOVS     r1,#5
00712c  f44f70b4          MOV      r0,#0x168
007130  f7fffffe          BL       lc640_write
                  |L1.28980|
;;;11527  		}
;;;11528  	}
;;;11529  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
007134  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007138  2809              CMP      r0,#9
00713a  d125              BNE      |L1.29064|
;;;11530  	{
;;;11531  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
00713c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
00713e  2809              CMP      r0,#9
007140  d101              BNE      |L1.28998|
007142  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007144  b900              CBNZ     r0,|L1.29000|
                  |L1.28998|
;;;11532  		{
;;;11533  		hv_vz_stat_cnt=10;
007146  8027              STRH     r7,[r4,#0]
                  |L1.29000|
;;;11534  		}
;;;11535  	hv_vz_stat_cnt--;
007148  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00714a  f1a00001          SUB      r0,r0,#1
00714e  b200              SXTH     r0,r0
007150  8020              STRH     r0,[r4,#0]
;;;11536  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007152  280a              CMP      r0,#0xa
007154  d001              BEQ      |L1.29018|
007156  2809              CMP      r0,#9
007158  d10b              BNE      |L1.29042|
                  |L1.29018|
;;;11537  		{
;;;11538  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00715a  4bc3              LDR      r3,|L1.29800|
00715c  33f0              ADDS     r3,r3,#0xf0
00715e  f2af1284          ADR      r2,|L1.28636|
007162  f2a3513c          SUB      r1,r3,#0x53c
007166  f201506c          ADD      r0,r1,#0x56c
00716a  f8cd8000          STR      r8,[sp,#0]
00716e  f7fffffe          BL       show_mess
                  |L1.29042|
;;;11539  					"      ТУМБЛЕР       ",
;;;11540  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11541  					"       ЗАРЯД        ",
;;;11542  					5000);
;;;11543  		}
;;;11544  	if(sk_stat[1]==0)
007172  7870              LDRB     r0,[r6,#1]  ; sk_stat
007174  b940              CBNZ     r0,|L1.29064|
;;;11545  		{
;;;11546  		hv_vz_stat=hvsOFF;
007176  f88ab000          STRB     r11,[r10,#0]
;;;11547  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
00717a  2100              MOVS     r1,#0
00717c  f44f70b4          MOV      r0,#0x168
007180  f7fffffe          BL       lc640_write
;;;11548  		vz_stop();
007184  f7fffffe          BL       vz_stop
                  |L1.29064|
;;;11549  
;;;11550  		}
;;;11551  	}
;;;11552  hv_vz_stat_old=hv_vz_stat;
007188  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00718c  7028              STRB     r0,[r5,#0]
;;;11553  /*
;;;11554  if(speedChIsOn)
;;;11555  	{
;;;11556  	speedChTimeCnt++;
;;;11557  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11558  		{
;;;11559  		speedChIsOn=0;
;;;11560  		}
;;;11561  	if(speedChrgBlckStat)
;;;11562  		{
;;;11563  		speedChIsOn=0;
;;;11564  		speedChTimeCnt=0;
;;;11565  		}
;;;11566  	}
;;;11567  
;;;11568  
;;;11569  
;;;11570  if(speedChrgAvtEn)
;;;11571  	{
;;;11572  	if(!speedChIsOn)
;;;11573  		{
;;;11574  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11575  			{
;;;11576  			speedChIsOn=1;
;;;11577  			}
;;;11578  		}
;;;11579  	}
;;;11580  
;;;11581  
;;;11582  
;;;11583  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;11584  else
;;;11585  	{
;;;11586  	speedChrgBlckStat=0;
;;;11587  	if(speedChrgBlckSrc==1)
;;;11588  		{
;;;11589  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11590  		}
;;;11591  	else if(speedChrgBlckSrc==2)
;;;11592  		{
;;;11593  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11594  		}
;;;11595  	}
;;;11596  
;;;11597  
;;;11598  if(speedChrgBlckStat==1)
;;;11599  	{
;;;11600  
;;;11601  	//speedChargeStartStop();
;;;11602  
;;;11603  	speedChrgShowCnt++;
;;;11604  	if(speedChrgShowCnt>=30)	
;;;11605  		{
;;;11606  		speedChrgShowCnt=0;
;;;11607  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11608  					"       ЗАРЯД        ",
;;;11609  					"     ЗАПРЕЩЕН!!!    ",
;;;11610  					"                    ",
;;;11611  					5000);
;;;11612  		}
;;;11613  	}
;;;11614  else speedChrgShowCnt=0;
;;;11615  
;;;11616  */
;;;11617  }
00718e  e5d4              B        |L1.27962|
;;;11618  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;11635  //-----------------------------------------------
;;;11636  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
007190  e92d41f0          PUSH     {r4-r8,lr}
;;;11637  {
;;;11638  
;;;11639  numOfForvardBps_old=numOfForvardBps;
007194  4cb7              LDR      r4,|L1.29812|
007196  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
007198  7060              STRB     r0,[r4,#1]
;;;11640  
;;;11641  numOfForvardBps=0;
00719a  f04f0500          MOV      r5,#0
00719e  f8045925          STRB     r5,[r4],#-0x25
;;;11642  
;;;11643  //FORVARDBPSCHHOUR=10;
;;;11644  
;;;11645  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
0071a2  4eb5              LDR      r6,|L1.29816|
0071a4  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
0071a8  2800              CMP      r0,#0
0071aa  dd02              BLE      |L1.29106|
0071ac  f5b07ffa          CMP      r0,#0x1f4
0071b0  dd02              BLE      |L1.29112|
                  |L1.29106|
;;;11646  	{
;;;11647  	FORVARDBPSCHHOUR=0;
0071b2  8035              STRH     r5,[r6,#0]
                  |L1.29108|
;;;11648  	return;
;;;11649  	}
;;;11650  
;;;11651  numOfForvardBps_minCnt++;
;;;11652  
;;;11653  
;;;11654  if(numOfForvardBps_minCnt>=60)
;;;11655  	{
;;;11656  	numOfForvardBps_minCnt=0;
;;;11657  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;11658  	numOfForvardBps_hourCnt++;
;;;11659  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;11660  		{
;;;11661  		numOfForvardBps_hourCnt=0;
;;;11662  		}
;;;11663  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;11664  	}
;;;11665  
;;;11666  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;11667  
;;;11668  //if(numOfForvardBps)
;;;11669  //numOfForvardBps_old=numOfForvardBps; 
;;;11670  }
0071b4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.29112|
0071b8  f8940027          LDRB     r0,[r4,#0x27]         ;11651  ; numOfForvardBps_minCnt
0071bc  f1000001          ADD      r0,r0,#1              ;11651
0071c0  b2c0              UXTB     r0,r0                 ;11651
0071c2  f8840027          STRB     r0,[r4,#0x27]         ;11651
0071c6  283c              CMP      r0,#0x3c              ;11654
0071c8  d31b              BCC      |L1.29186|
0071ca  f8845027          STRB     r5,[r4,#0x27]         ;11656
0071ce  f44f7794          MOV      r7,#0x128             ;11657
0071d2  4638              MOV      r0,r7                 ;11657
0071d4  f7fffffe          BL       lc640_read_int
0071d8  f1000001          ADD      r0,r0,#1              ;11658
0071dc  b200              SXTH     r0,r0                 ;11658
0071de  f8a40078          STRH     r0,[r4,#0x78]         ;11658
0071e2  4aa6              LDR      r2,|L1.29820|
0071e4  f9b61000          LDRSH    r1,[r6,#0]            ;11659  ; FORVARDBPSCHHOUR
0071e8  f9b22000          LDRSH    r2,[r2,#0]            ;11659  ; NUMIST
0071ec  fb01f102          MUL      r1,r1,r2              ;11659
0071f0  4281              CMP      r1,r0                 ;11659
0071f2  dc01              BGT      |L1.29176|
0071f4  f8a45078          STRH     r5,[r4,#0x78]         ;11661
                  |L1.29176|
0071f8  f9b41078          LDRSH    r1,[r4,#0x78]         ;11663  ; numOfForvardBps_hourCnt
0071fc  4638              MOV      r0,r7                 ;11663
0071fe  f7fffffe          BL       lc640_write_int
                  |L1.29186|
007202  f9b40078          LDRSH    r0,[r4,#0x78]         ;11666  ; numOfForvardBps_hourCnt
007206  f9b61000          LDRSH    r1,[r6,#0]            ;11666  ; FORVARDBPSCHHOUR
00720a  fb90f0f1          SDIV     r0,r0,r1              ;11666
00720e  f8840025          STRB     r0,[r4,#0x25]         ;11666
007212  e7cf              B        |L1.29108|
;;;11671  
                          ENDP

                  numOfForvardBps_init PROC
;;;11672  //-----------------------------------------------
;;;11673  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
007214  b510              PUSH     {r4,lr}
;;;11674  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;11675  lc640_write_int(EE_FORVBPSHOURCNT,0);
007216  2100              MOVS     r1,#0
007218  f44f7094          MOV      r0,#0x128
00721c  f7fffffe          BL       lc640_write_int
;;;11676  numOfForvardBps_minCnt=58;
007220  4994              LDR      r1,|L1.29812|
007222  f04f003a          MOV      r0,#0x3a
007226  f1a10125          SUB      r1,r1,#0x25
00722a  f8810027          STRB     r0,[r1,#0x27]
;;;11677  }
00722e  bd10              POP      {r4,pc}
;;;11678  
                          ENDP

                  outVoltContrHndl PROC
;;;11679  //-----------------------------------------------
;;;11680  void outVoltContrHndl(void)
007230  b570              PUSH     {r4-r6,lr}
;;;11681  { 
;;;11682  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
007232  4c93              LDR      r4,|L1.29824|
007234  4893              LDR      r0,|L1.29828|
;;;11683  	{
;;;11684  	outVoltContrHndlCnt_=0;
;;;11685  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
007236  4a94              LDR      r2,|L1.29832|
007238  f9b41000          LDRSH    r1,[r4,#0]            ;11682  ; load_U
00723c  f9b06000          LDRSH    r6,[r0,#0]            ;11682  ; U_OUT_KONTR_MAX
007240  2500              MOVS     r5,#0                 ;11684
007242  f9b20000          LDRSH    r0,[r2,#0]
007246  4b91              LDR      r3,|L1.29836|
007248  42b1              CMP      r1,r6                 ;11682
00724a  dc04              BGT      |L1.29270|
00724c  4e90              LDR      r6,|L1.29840|
00724e  f9b66000          LDRSH    r6,[r6,#0]            ;11682  ; U_OUT_KONTR_MIN
007252  42b1              CMP      r1,r6                 ;11682
007254  da0f              BGE      |L1.29302|
                  |L1.29270|
007256  801d              STRH     r5,[r3,#0]            ;11684
007258  498e              LDR      r1,|L1.29844|
00725a  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
00725e  4288              CMP      r0,r1
007260  da1b              BGE      |L1.29338|
;;;11686  		{
;;;11687  		outVoltContrHndlCnt++;
007262  f1000001          ADD      r0,r0,#1
007266  b200              SXTH     r0,r0
007268  8010              STRH     r0,[r2,#0]
;;;11688  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
00726a  4288              CMP      r0,r1
00726c  d115              BNE      |L1.29338|
;;;11689  			{
;;;11690  			avar_uout_hndl(1);
00726e  2001              MOVS     r0,#1
007270  f7fffffe          BL       avar_uout_hndl
007274  e011              B        |L1.29338|
                  |L1.29302|
;;;11691  			}
;;;11692  		}
;;;11693  	}
;;;11694  else
;;;11695  	{
;;;11696  	if(outVoltContrHndlCnt)
007276  b180              CBZ      r0,|L1.29338|
;;;11697  		{
;;;11698  		if(outVoltContrHndlCnt_<5)
007278  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
00727c  2805              CMP      r0,#5
00727e  da0c              BGE      |L1.29338|
;;;11699  			{
;;;11700  			outVoltContrHndlCnt_++;
007280  f1000001          ADD      r0,r0,#1
007284  b200              SXTH     r0,r0
007286  8018              STRH     r0,[r3,#0]
;;;11701  			if(outVoltContrHndlCnt_>=5)
007288  2805              CMP      r0,#5
00728a  db06              BLT      |L1.29338|
;;;11702  				{
;;;11703  				outVoltContrHndlCnt=0;
00728c  8015              STRH     r5,[r2,#0]
;;;11704  				if(uout_av)avar_uout_hndl(0);
00728e  4882              LDR      r0,|L1.29848|
007290  7800              LDRB     r0,[r0,#0]  ; uout_av
007292  b110              CBZ      r0,|L1.29338|
007294  2000              MOVS     r0,#0
007296  f7fffffe          BL       avar_uout_hndl
                  |L1.29338|
;;;11705  				}
;;;11706  			}
;;;11707  		}
;;;11708  	}
;;;11709  
;;;11710  if (load_U<(USIGN*10)) 
00729a  4880              LDR      r0,|L1.29852|
00729c  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
0072a0  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
0072a4  eb000080          ADD      r0,r0,r0,LSL #2
0072a8  ebb10f40          CMP      r1,r0,LSL #1
0072ac  da0b              BGE      |L1.29382|
;;;11711  	{
;;;11712  	if(!bSILENT)
0072ae  487c              LDR      r0,|L1.29856|
0072b0  6800              LDR      r0,[r0,#0]  ; bSILENT
0072b2  2800              CMP      r0,#0
0072b4  d107              BNE      |L1.29382|
;;;11713  		{
;;;11714  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
0072b6  e8bd4070          POP      {r4-r6,lr}
0072ba  2314              MOVS     r3,#0x14
0072bc  2201              MOVS     r2,#1
0072be  2172              MOVS     r1,#0x72
0072c0  20d2              MOVS     r0,#0xd2
0072c2  f7ffbffe          B.W      mess_send
                  |L1.29382|
;;;11715  		}
;;;11716  
;;;11717  	//bU_BAT2REL_AV_BAT=1;
;;;11718  	}
;;;11719  
;;;11720  
;;;11721  }
0072c6  bd70              POP      {r4-r6,pc}
;;;11722  
                          ENDP

                  vent_resurs_hndl PROC
;;;11723  //-----------------------------------------------
;;;11724  void vent_resurs_hndl(void)
0072c8  e92d47f0          PUSH     {r4-r10,lr}
;;;11725  {
;;;11726  char i;
;;;11727  char crc_in,crc_eval;
;;;11728  
;;;11729  for(i=0;i<NUMIST;i++)
0072cc  f04f0200          MOV      r2,#0
;;;11730  	{
;;;11731  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11732  		{
;;;11733  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11734  		}
;;;11735  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11736  		{
;;;11737  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11738  		}
;;;11739  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11740  		{
;;;11741  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11742  		}
;;;11743  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11744  		{
;;;11745  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11746  		}
;;;11747  	crc_in=0;
;;;11748  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11749  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11750  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11751  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11752  
;;;11753  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11754  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11755  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11756  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11757  
;;;11758  	if(crc_eval==crc_in)
;;;11759  		{
;;;11760  		unsigned short temp_US;
;;;11761  		temp_US=0;
;;;11762  
;;;11763  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11764  		temp_US<<=4;
;;;11765  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11766  		temp_US<<=4;
;;;11767  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11768  		temp_US<<=4;
;;;11769  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11770  
;;;11771  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11772  		}
;;;11773  
;;;11774  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
0072d0  4874              LDR      r0,|L1.29860|
0072d2  f8dfc1d4          LDR      r12,|L1.29864|
0072d6  f9b06000          LDRSH    r6,[r0,#0]
0072da  4868              LDR      r0,|L1.29820|
0072dc  f9b07000          LDRSH    r7,[r0,#0]            ;11729
0072e0  e06e              B        |L1.29632|
                  |L1.29410|
0072e2  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11731
0072e6  eb001002          ADD      r0,r0,r2,LSL #4       ;11731
0072ea  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11731
0072ee  7b41              LDRB     r1,[r0,#0xd]          ;11731
0072f0  098b              LSRS     r3,r1,#6              ;11731
0072f2  d006              BEQ      |L1.29442|
0072f4  2301              MOVS     r3,#1                 ;11735
0072f6  ebb31f91          CMP      r3,r1,LSR #6          ;11735
0072fa  d105              BNE      |L1.29448|
0072fc  f8801059          STRB     r1,[r0,#0x59]         ;11737
007300  e00f              B        |L1.29474|
                  |L1.29442|
007302  f8801058          STRB     r1,[r0,#0x58]         ;11733
007306  e00c              B        |L1.29474|
                  |L1.29448|
007308  2302              MOVS     r3,#2                 ;11739
00730a  ebb31f91          CMP      r3,r1,LSR #6          ;11739
00730e  d102              BNE      |L1.29462|
007310  f880105a          STRB     r1,[r0,#0x5a]         ;11741
007314  e005              B        |L1.29474|
                  |L1.29462|
007316  2303              MOVS     r3,#3                 ;11743
007318  ebb31f91          CMP      r3,r1,LSR #6          ;11743
00731c  d101              BNE      |L1.29474|
00731e  f880105b          STRB     r1,[r0,#0x5b]         ;11745
                  |L1.29474|
007322  f8101f58          LDRB     r1,[r0,#0x58]!        ;11748
007326  f3c11401          UBFX     r4,r1,#4,#2           ;11748
00732a  7843              LDRB     r3,[r0,#1]            ;11749
00732c  f0030530          AND      r5,r3,#0x30           ;11749
007330  ea440495          ORR      r4,r4,r5,LSR #2       ;11749
007334  f8909002          LDRB     r9,[r0,#2]            ;11750
007338  f0090830          AND      r8,r9,#0x30           ;11750
00733c  ea480804          ORR      r8,r8,r4              ;11750
007340  78c5              LDRB     r5,[r0,#3]            ;11751
007342  f1a00058          SUB      r0,r0,#0x58           ;11751
007346  f0050430          AND      r4,r5,#0x30           ;11751
00734a  ea480884          ORR      r8,r8,r4,LSL #2       ;11751
00734e  f001010f          AND      r1,r1,#0xf            ;11753
007352  f003040f          AND      r4,r3,#0xf            ;11754
007356  ea840a01          EOR      r10,r4,r1             ;11754
00735a  f009030f          AND      r3,r9,#0xf            ;11755
00735e  ea83090a          EOR      r9,r3,r10             ;11755
007362  f005050f          AND      r5,r5,#0xf            ;11756
007366  ea850909          EOR      r9,r5,r9              ;11756
00736a  45c1              CMP      r9,r8                 ;11758
00736c  d113              BNE      |L1.29590|
00736e  ea4f1505          LSL      r5,r5,#4              ;11764
007372  ea430305          ORR      r3,r3,r5              ;11765
007376  ea4f1303          LSL      r3,r3,#4              ;11766
00737a  ea440403          ORR      r4,r4,r3              ;11767
00737e  ea4f5304          LSL      r3,r4,#20             ;11768
007382  ea4f4313          LSR      r3,r3,#16             ;11768
007386  ea410103          ORR      r1,r1,r3              ;11769
00738a  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11771
00738e  428b              CMP      r3,r1                 ;11771
007390  d001              BEQ      |L1.29590|
007392  f8a0105c          STRH     r1,[r0,#0x5c]         ;11771
                  |L1.29590|
007396  f8b0105c          LDRH     r1,[r0,#0x5c]
00739a  eb060386          ADD      r3,r6,r6,LSL #2
00739e  ebb10f43          CMP      r1,r3,LSL #1
0073a2  dd06              BLE      |L1.29618|
0073a4  2e00              CMP      r6,#0
0073a6  dd04              BLE      |L1.29618|
;;;11775  		{
;;;11776  		bps[i]._av|=(1<<4);
0073a8  7841              LDRB     r1,[r0,#1]
0073aa  f0410110          ORR      r1,r1,#0x10
0073ae  7041              STRB     r1,[r0,#1]
0073b0  e003              B        |L1.29626|
                  |L1.29618|
;;;11777  		}
;;;11778  	else bps[i]._av&=~(1<<4);
0073b2  7841              LDRB     r1,[r0,#1]
0073b4  f0210110          BIC      r1,r1,#0x10
0073b8  7041              STRB     r1,[r0,#1]
                  |L1.29626|
0073ba  f1020201          ADD      r2,r2,#1              ;11729
0073be  b2d2              UXTB     r2,r2                 ;11729
                  |L1.29632|
0073c0  42ba              CMP      r2,r7                 ;11729
0073c2  db8e              BLT      |L1.29410|
;;;11779  	}
;;;11780  }
0073c4  e8bd87f0          POP      {r4-r10,pc}
;;;11781  
                          ENDP

                  vent_hndl PROC
;;;11783  //-----------------------------------------------
;;;11784  void vent_hndl(void)
0073c8  e92d4ff0          PUSH     {r4-r11,lr}
;;;11785  {
0073cc  b087              SUB      sp,sp,#0x1c
;;;11786  if(RELEVENTSIGN==rvsAKB)
;;;11787  	{
;;;11788  	if(vent_stat==0)
0073ce  4c29              LDR      r4,|L1.29812|
0073d0  4836              LDR      r0,|L1.29868|
;;;11789  		{
;;;11790  		if	(
;;;11791  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
0073d2  4937              LDR      r1,|L1.29872|
;;;11792  			||
;;;11793  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11794  			)
;;;11795  			{
;;;11796  			vent_stat=1;
;;;11797  			}
;;;11798  		}
;;;11799  	else if(vent_stat==1)
;;;11800  		{
;;;11801  		if	(
;;;11802  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
0073d4  4a37              LDR      r2,|L1.29876|
0073d6  3c25              SUBS     r4,r4,#0x25           ;11788
0073d8  7800              LDRB     r0,[r0,#0]            ;11786  ; RELEVENTSIGN
0073da  f9943000          LDRSB    r3,[r4,#0]            ;11788
0073de  f9b11000          LDRSH    r1,[r1,#0]            ;11791
0073e2  f9b22000          LDRSH    r2,[r2,#0]
0073e6  b148              CBZ      r0,|L1.29692|
;;;11803  			&&
;;;11804  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11805  			)
;;;11806  			{
;;;11807  			vent_stat=0;
;;;11808  			}
;;;11809  		}
;;;11810  	}
;;;11811  else if(RELEVENTSIGN==rvsBPS)
0073e8  2802              CMP      r0,#2
0073ea  d06a              BEQ      |L1.29890|
;;;11812  	{
;;;11813  /*	if	(
;;;11814  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11815  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11816  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11817  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11818  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11819  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11820  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11821  		)
;;;11822  		{
;;;11823  		vent_stat=1;
;;;11824  		}
;;;11825  	else vent_stat=0;
;;;11826  	*/
;;;11827  
;;;11828  	if	(
;;;11829  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11830  		||
;;;11831  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11832  		||
;;;11833  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11834  		||
;;;11835  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11836  		||
;;;11837  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11838  		||
;;;11839  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11840  		||
;;;11841  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11842  		||
;;;11843  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11844  		)
;;;11845  		{
;;;11846  		vent_stat=1;
;;;11847  		}
;;;11848  	else if(vent_stat==1)
;;;11849  		{
;;;11850  		if	(
;;;11851  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11852  			&&
;;;11853  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11854  			&&
;;;11855  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11856  			&&
;;;11857  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11858  			&&
;;;11859  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11860  			&&
;;;11861  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11862  			&&
;;;11863  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11864  			&&
;;;11865  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11866  			)
;;;11867  			{
;;;11868  			vent_stat=0;
;;;11869  			}
;;;11870  		}
;;;11871  	}
;;;11872  else if(RELEVENTSIGN==rvsEXT)
0073ec  2801              CMP      r0,#1
0073ee  d067              BEQ      |L1.29888|
;;;11873  	{
;;;11874  	if	(
;;;11875  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11876  		||
;;;11877  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11878  		||
;;;11879  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11880  		)
;;;11881  		{
;;;11882  		vent_stat=1;
;;;11883  		}
;;;11884  	else if(vent_stat==1)
;;;11885  		{
;;;11886  		if	(
;;;11887  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11888  			&&
;;;11889  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11890  			&&
;;;11891  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11892  			)
;;;11893  			{
;;;11894  			vent_stat=0;
;;;11895  			}
;;;11896  		}
;;;11897  	}
;;;11898  else vent_stat=1;
0073f0  f04f0001          MOV      r0,#1
0073f4  7020              STRB     r0,[r4,#0]
                  |L1.29686|
;;;11899  //vent_stat=44;
;;;11900  }
0073f6  b007              ADD      sp,sp,#0x1c
0073f8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.29692|
0073fc  4f2e              LDR      r7,|L1.29880|
0073fe  f8df80bc          LDR      r8,|L1.29884|
007402  f9b7000c          LDRSH    r0,[r7,#0xc]          ;11791
007406  7bbd              LDRB     r5,[r7,#0xe]          ;11791
007408  f9b7605c          LDRSH    r6,[r7,#0x5c]         ;11793
00740c  f898c000          LDRB     r12,[r8,#0]           ;11790
007410  f897705e          LDRB     r7,[r7,#0x5e]         ;11793
007414  f8988001          LDRB     r8,[r8,#1]            ;11793
007418  b12b              CBZ      r3,|L1.29734|
00741a  2b01              CMP      r3,#1                 ;11799
00741c  d1eb              BNE      |L1.29686|
00741e  f1bc0f55          CMP      r12,#0x55             ;11801
007422  d115              BNE      |L1.29776|
007424  e010              B        |L1.29768|
                  |L1.29734|
007426  f1bc0f55          CMP      r12,#0x55             ;11790
00742a  d102              BNE      |L1.29746|
00742c  4288              CMP      r0,r1                 ;11791
00742e  dc07              BGT      |L1.29760|
007430  b935              CBNZ     r5,|L1.29760|
                  |L1.29746|
007432  f1b80f55          CMP      r8,#0x55              ;11793
007436  d1de              BNE      |L1.29686|
007438  428e              CMP      r6,r1                 ;11793
00743a  dc01              BGT      |L1.29760|
00743c  2f00              CMP      r7,#0                 ;11793
00743e  d0da              BEQ      |L1.29686|
                  |L1.29760|
007440  f04f0001          MOV      r0,#1                 ;11796
007444  7020              STRB     r0,[r4,#0]            ;11796
007446  e7d6              B        |L1.29686|
                  |L1.29768|
007448  4290              CMP      r0,r2                 ;11802
00744a  dad4              BGE      |L1.29686|
00744c  2d00              CMP      r5,#0                 ;11802
00744e  d1d2              BNE      |L1.29686|
                  |L1.29776|
007450  f1b80f55          CMP      r8,#0x55              ;11804
007454  d103              BNE      |L1.29790|
007456  4296              CMP      r6,r2                 ;11804
007458  dacd              BGE      |L1.29686|
00745a  2f00              CMP      r7,#0                 ;11804
00745c  d1cb              BNE      |L1.29686|
                  |L1.29790|
00745e  f04f0000          MOV      r0,#0                 ;11807
007462  7020              STRB     r0,[r4,#0]            ;11807
007464  e7c7              B        |L1.29686|
007466  e02c              B        |L1.29890|
                  |L1.29800|
                          DCD      ||.text||+0x1b88
                  |L1.29804|
                          DCD      ||.text||+0x16a8
                  |L1.29808|
                          DCD      ||.text||+0x2260
                  |L1.29812|
                          DCD      ||area_number.25||+0x25
                  |L1.29816|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29820|
                          DCD      NUMIST
                  |L1.29824|
                          DCD      load_U
                  |L1.29828|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29832|
                          DCD      outVoltContrHndlCnt
                  |L1.29836|
                          DCD      outVoltContrHndlCnt_
                  |L1.29840|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29844|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29848|
                          DCD      uout_av
                  |L1.29852|
                          DCD      USIGN
                  |L1.29856|
                          DCD      bSILENT
                  |L1.29860|
                          DCD      TVENTMAX
                  |L1.29864|
                          DCD      bps
                  |L1.29868|
                          DCD      RELEVENTSIGN
                  |L1.29872|
                          DCD      TVENTON
                  |L1.29876|
                          DCD      TVENTOFF
                  |L1.29880|
                          DCD      bat
                  |L1.29884|
                          DCD      BAT_IS_ON
                  |L1.29888|
0074c0  e0c3              B        |L1.30282|
                  |L1.29890|
0074c2  4e86              LDR      r6,|L1.30428|
0074c4  4884              LDR      r0,|L1.30424|
0074c6  6ab5              LDR      r5,[r6,#0x28]         ;11829
0074c8  f9b00000          LDRSH    r0,[r0,#0]            ;11828  ; NUMIST
0074cc  78f6              LDRB     r6,[r6,#3]            ;11829
0074ce  b118              CBZ      r0,|L1.29912|
0074d0  428d              CMP      r5,r1                 ;11829
0074d2  dc78              BGT      |L1.30150|
0074d4  2e1e              CMP      r6,#0x1e              ;11829
0074d6  d276              BCS      |L1.30150|
                  |L1.29912|
0074d8  f8dfc200          LDR      r12,|L1.30428|
0074dc  2801              CMP      r0,#1                 ;11831
0074de  f8dc708c          LDR      r7,[r12,#0x8c]        ;11831
0074e2  f89cc067          LDRB     r12,[r12,#0x67]       ;11831
0074e6  f8cdc018          STR      r12,[sp,#0x18]        ;11831
0074ea  dd06              BLE      |L1.29946|
0074ec  428f              CMP      r7,r1                 ;11831
0074ee  dc6a              BGT      |L1.30150|
0074f0  f8ddc018          LDR      r12,[sp,#0x18]        ;11831
0074f4  f1bc0f1e          CMP      r12,#0x1e             ;11831
0074f8  d265              BCS      |L1.30150|
                  |L1.29946|
0074fa  f8dfc1e0          LDR      r12,|L1.30428|
0074fe  2802              CMP      r0,#2                 ;11833
007500  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11833
007504  f8cd8014          STR      r8,[sp,#0x14]         ;11833
007508  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11833
00750c  f8cdc010          STR      r12,[sp,#0x10]        ;11833
007510  dd08              BLE      |L1.29988|
007512  f8ddc014          LDR      r12,[sp,#0x14]        ;11833
007516  458c              CMP      r12,r1                ;11833
007518  dc55              BGT      |L1.30150|
00751a  f8ddc010          LDR      r12,[sp,#0x10]        ;11833
00751e  f1bc0f1e          CMP      r12,#0x1e             ;11833
007522  d250              BCS      |L1.30150|
                  |L1.29988|
007524  f8dfc1b4          LDR      r12,|L1.30428|
007528  2803              CMP      r0,#3                 ;11835
00752a  f8dc8154          LDR      r8,[r12,#0x154]       ;11835
00752e  f8cd800c          STR      r8,[sp,#0xc]          ;11835
007532  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11835
007536  f8cdc008          STR      r12,[sp,#8]           ;11835
00753a  dd08              BLE      |L1.30030|
00753c  f8ddc00c          LDR      r12,[sp,#0xc]         ;11835
007540  458c              CMP      r12,r1                ;11835
007542  dc40              BGT      |L1.30150|
007544  f8ddc008          LDR      r12,[sp,#8]           ;11835
007548  f1bc0f1e          CMP      r12,#0x1e             ;11835
00754c  d23b              BCS      |L1.30150|
                  |L1.30030|
00754e  f8df818c          LDR      r8,|L1.30428|
007552  2804              CMP      r0,#4                 ;11837
007554  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11837
007558  f8988193          LDRB     r8,[r8,#0x193]        ;11837
00755c  f8cd8004          STR      r8,[sp,#4]            ;11837
007560  dd06              BLE      |L1.30064|
007562  458c              CMP      r12,r1                ;11837
007564  dc2f              BGT      |L1.30150|
007566  f8dd8004          LDR      r8,[sp,#4]            ;11837
00756a  f1b80f1e          CMP      r8,#0x1e              ;11837
00756e  d22a              BCS      |L1.30150|
                  |L1.30064|
007570  f8df9168          LDR      r9,|L1.30428|
007574  2805              CMP      r0,#5                 ;11839
007576  f8d9821c          LDR      r8,[r9,#0x21c]        ;11839
00757a  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11839
00757e  f8cd9000          STR      r9,[sp,#0]            ;11839
007582  dd06              BLE      |L1.30098|
007584  4588              CMP      r8,r1                 ;11839
007586  dc1e              BGT      |L1.30150|
007588  f8dd9000          LDR      r9,[sp,#0]            ;11839
00758c  f1b90f1e          CMP      r9,#0x1e              ;11839
007590  d219              BCS      |L1.30150|
                  |L1.30098|
007592  f8dfa148          LDR      r10,|L1.30428|
007596  2806              CMP      r0,#6                 ;11841
007598  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11841
00759c  f8da9280          LDR      r9,[r10,#0x280]       ;11841
0075a0  dd04              BLE      |L1.30124|
0075a2  4589              CMP      r9,r1                 ;11841
0075a4  dc0f              BGT      |L1.30150|
0075a6  f1be0f1e          CMP      lr,#0x1e              ;11841
0075aa  d20c              BCS      |L1.30150|
                  |L1.30124|
0075ac  f8dfb12c          LDR      r11,|L1.30428|
0075b0  2807              CMP      r0,#7                 ;11843
0075b2  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11843
0075b6  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11843
0075ba  dd08              BLE      |L1.30158|
0075bc  458a              CMP      r10,r1                ;11843
0075be  dc02              BGT      |L1.30150|
0075c0  f1bb0f1e          CMP      r11,#0x1e             ;11843
0075c4  d303              BCC      |L1.30158|
                  |L1.30150|
0075c6  f04f0001          MOV      r0,#1                 ;11846
0075ca  7020              STRB     r0,[r4,#0]            ;11846
                  |L1.30156|
0075cc  e713              B        |L1.29686|
                  |L1.30158|
0075ce  2b01              CMP      r3,#1                 ;11848
0075d0  d1fc              BNE      |L1.30156|
0075d2  b118              CBZ      r0,|L1.30172|
0075d4  4295              CMP      r5,r2                 ;11851
0075d6  daf9              BGE      |L1.30156|
0075d8  2e0a              CMP      r6,#0xa               ;11851
0075da  d2f7              BCS      |L1.30156|
                  |L1.30172|
0075dc  2802              CMP      r0,#2                 ;11853
0075de  db04              BLT      |L1.30186|
0075e0  4297              CMP      r7,r2                 ;11853
0075e2  daf3              BGE      |L1.30156|
0075e4  9906              LDR      r1,[sp,#0x18]         ;11853
0075e6  290a              CMP      r1,#0xa               ;11853
0075e8  d2f0              BCS      |L1.30156|
                  |L1.30186|
0075ea  2803              CMP      r0,#3                 ;11855
0075ec  db05              BLT      |L1.30202|
0075ee  9905              LDR      r1,[sp,#0x14]         ;11855
0075f0  4291              CMP      r1,r2                 ;11855
0075f2  daeb              BGE      |L1.30156|
0075f4  9904              LDR      r1,[sp,#0x10]         ;11855
0075f6  290a              CMP      r1,#0xa               ;11855
0075f8  d2e8              BCS      |L1.30156|
                  |L1.30202|
0075fa  2804              CMP      r0,#4                 ;11857
0075fc  db05              BLT      |L1.30218|
0075fe  9903              LDR      r1,[sp,#0xc]          ;11857
007600  4291              CMP      r1,r2                 ;11857
007602  dae3              BGE      |L1.30156|
007604  9902              LDR      r1,[sp,#8]            ;11857
007606  290a              CMP      r1,#0xa               ;11857
007608  d2e0              BCS      |L1.30156|
                  |L1.30218|
00760a  2805              CMP      r0,#5                 ;11859
00760c  db04              BLT      |L1.30232|
00760e  4594              CMP      r12,r2                ;11859
007610  dadc              BGE      |L1.30156|
007612  9901              LDR      r1,[sp,#4]            ;11859
007614  290a              CMP      r1,#0xa               ;11859
007616  d2d9              BCS      |L1.30156|
                  |L1.30232|
007618  2806              CMP      r0,#6                 ;11861
00761a  db04              BLT      |L1.30246|
00761c  4590              CMP      r8,r2                 ;11861
00761e  dad5              BGE      |L1.30156|
007620  9900              LDR      r1,[sp,#0]            ;11861
007622  290a              CMP      r1,#0xa               ;11861
007624  d2d2              BCS      |L1.30156|
                  |L1.30246|
007626  2807              CMP      r0,#7                 ;11863
007628  db04              BLT      |L1.30260|
00762a  4591              CMP      r9,r2                 ;11863
00762c  dace              BGE      |L1.30156|
00762e  f1be0f0a          CMP      lr,#0xa               ;11863
007632  d2cb              BCS      |L1.30156|
                  |L1.30260|
007634  2808              CMP      r0,#8                 ;11865
007636  db04              BLT      |L1.30274|
007638  4592              CMP      r10,r2                ;11865
00763a  dac7              BGE      |L1.30156|
00763c  f1bb0f0a          CMP      r11,#0xa              ;11865
007640  d2c4              BCS      |L1.30156|
                  |L1.30274|
007642  f04f0000          MOV      r0,#0                 ;11868
007646  7020              STRB     r0,[r4,#0]            ;11868
                  |L1.30280|
007648  e6d5              B        |L1.29686|
                  |L1.30282|
00764a  4825              LDR      r0,|L1.30432|
00764c  4d25              LDR      r5,|L1.30436|
00764e  4e26              LDR      r6,|L1.30440|
007650  f9b00000          LDRSH    r0,[r0,#0]            ;11874  ; NUMDT
007654  f9b55000          LDRSH    r5,[r5,#0]            ;11875
007658  7836              LDRB     r6,[r6,#0]            ;11875
00765a  b110              CBZ      r0,|L1.30306|
00765c  428d              CMP      r5,r1                 ;11875
00765e  dc1d              BGT      |L1.30364|
007660  b9e6              CBNZ     r6,|L1.30364|
                  |L1.30306|
007662  4f20              LDR      r7,|L1.30436|
007664  f8dfc080          LDR      r12,|L1.30440|
007668  2801              CMP      r0,#1                 ;11877
00766a  f9b77002          LDRSH    r7,[r7,#2]            ;11877
00766e  f89cc001          LDRB     r12,[r12,#1]          ;11877
007672  dd04              BLE      |L1.30334|
007674  428f              CMP      r7,r1                 ;11877
007676  dc11              BGT      |L1.30364|
007678  f1bc0f00          CMP      r12,#0                ;11877
00767c  d10e              BNE      |L1.30364|
                  |L1.30334|
00767e  f8df8064          LDR      r8,|L1.30436|
007682  f8df9064          LDR      r9,|L1.30440|
007686  2802              CMP      r0,#2                 ;11879
007688  f9b88004          LDRSH    r8,[r8,#4]            ;11879
00768c  f8999002          LDRB     r9,[r9,#2]            ;11879
007690  dd08              BLE      |L1.30372|
007692  4588              CMP      r8,r1                 ;11879
007694  dc02              BGT      |L1.30364|
007696  f1b90f00          CMP      r9,#0                 ;11879
00769a  d003              BEQ      |L1.30372|
                  |L1.30364|
00769c  f04f0001          MOV      r0,#1                 ;11882
0076a0  7020              STRB     r0,[r4,#0]            ;11882
0076a2  e6a8              B        |L1.29686|
                  |L1.30372|
0076a4  2b01              CMP      r3,#1                 ;11884
0076a6  d191              BNE      |L1.30156|
0076a8  b118              CBZ      r0,|L1.30386|
0076aa  4295              CMP      r5,r2                 ;11887
0076ac  da8e              BGE      |L1.30156|
0076ae  2e00              CMP      r6,#0                 ;11887
0076b0  d18c              BNE      |L1.30156|
                  |L1.30386|
0076b2  2802              CMP      r0,#2                 ;11889
0076b4  db04              BLT      |L1.30400|
0076b6  4297              CMP      r7,r2                 ;11889
0076b8  da88              BGE      |L1.30156|
0076ba  f1bc0f00          CMP      r12,#0                ;11889
0076be  d185              BNE      |L1.30156|
                  |L1.30400|
0076c0  2803              CMP      r0,#3                 ;11891
0076c2  db04              BLT      |L1.30414|
0076c4  4590              CMP      r8,r2                 ;11891
0076c6  dabf              BGE      |L1.30280|
0076c8  f1b90f00          CMP      r9,#0                 ;11891
0076cc  d1bc              BNE      |L1.30280|
                  |L1.30414|
0076ce  f04f0000          MOV      r0,#0                 ;11894
0076d2  7020              STRB     r0,[r4,#0]            ;11894
0076d4  e68f              B        |L1.29686|
;;;11901  #endif //UKU_FSO
                          ENDP

0076d6  0000              DCW      0x0000
                  |L1.30424|
                          DCD      NUMIST
                  |L1.30428|
                          DCD      bps
                  |L1.30432|
                          DCD      NUMDT
                  |L1.30436|
                          DCD      t_ext
                  |L1.30440|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;332    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;333    if(spc_stat!=spcVZ) 
;;;334    	{
;;;335    	vz_error=0;
000006  f8a10054          STRH     r0,[r1,#0x54]
00000a  4770              BX       lr                    ;333
;;;336    	sp_ch_error=0;
;;;337    	vz1_error=0;
;;;338    	vz2_error=0;
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;332    {  
;;;333    if(spc_stat!=spcVZ) 
000004  4c85              LDR      r4,|L3.540|
;;;334    	{
;;;335    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;333  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;333
00000c  b200              SXTH     r0,r0                 ;333
00000e  f7fffffe          BL       abs_pal
;;;336    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;337    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;338    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;341  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;341  ; adc_self_ch_buff
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;341
000032  f44f7196          MOV      r1,#0x12c             ;341
000036  f1a406e6          SUB      r6,r4,#0xe6           ;341
00003a  4288              CMP      r0,r1                 ;341
00003c  da03              BGE      |L3.70|
00003e  88a0              LDRH     r0,[r4,#4]            ;343  ; adc_self_ch_buff
000040  f8a60040          STRH     r0,[r6,#0x40]         ;343
000044  e00e              B        |L3.100|
                  |L3.70|
000046  f9b50002          LDRSH    r0,[r5,#2]            ;343  ; adc_self_ch_disp
00004a  4288              CMP      r0,r1                 ;343
00004c  da03              BGE      |L3.86|
00004e  8860              LDRH     r0,[r4,#2]            ;343  ; adc_self_ch_buff
000050  f8a60040          STRH     r0,[r6,#0x40]         ;343
000054  e006              B        |L3.100|
                  |L3.86|
000056  f9b50000          LDRSH    r0,[r5,#0]            ;346  ; adc_self_ch_disp
00005a  4288              CMP      r0,r1                 ;346
00005c  da02              BGE      |L3.100|
00005e  8820              LDRH     r0,[r4,#0]            ;345  ; adc_self_ch_buff
000060  f8a60040          STRH     r0,[r6,#0x40]         ;345
                  |L3.100|
000064  7bb7              LDRB     r7,[r6,#0xe]          ;346  ; adc_ch_net
000066  2200              MOVS     r2,#0                 ;346
000068  b3f7              CBZ      r7,|L3.232|
00006a  7c73              LDRB     r3,[r6,#0x11]         ;348  ; adc_window_flag
00006c  486c              LDR      r0,|L3.544|
00006e  b18b              CBZ      r3,|L3.148|
000070  f9b61040          LDRSH    r1,[r6,#0x40]         ;348  ; adc_result
000074  6804              LDR      r4,[r0,#0]            ;349  ; main_power_buffer
000076  eb0404a1          ADD      r4,r4,r1,ASR #2       ;349
00007a  6004              STR      r4,[r0,#0]            ;349  ; main_power_buffer
00007c  6844              LDR      r4,[r0,#4]            ;349  ; main_power_buffer
00007e  eb0404a1          ADD      r4,r4,r1,ASR #2       ;354
000082  6044              STR      r4,[r0,#4]            ;354  ; main_power_buffer
000084  6884              LDR      r4,[r0,#8]            ;355  ; main_power_buffer
000086  eb0404a1          ADD      r4,r4,r1,ASR #2       ;355
00008a  6084              STR      r4,[r0,#8]            ;357  ; main_power_buffer
00008c  68c4              LDR      r4,[r0,#0xc]          ;357  ; main_power_buffer
00008e  eb0401a1          ADD      r1,r4,r1,ASR #2       ;357
000092  60c1              STR      r1,[r0,#0xc]          ;357  ; main_power_buffer
                  |L3.148|
000094  f9b61040          LDRSH    r1,[r6,#0x40]         ;358  ; adc_result
000098  2964              CMP      r1,#0x64              ;358
00009a  da06              BGE      |L3.170|
00009c  f8b61044          LDRH     r1,[r6,#0x44]         ;362  ; adc_zero_cnt
0000a0  f1010101          ADD      r1,r1,#1              ;362
0000a4  f8a61044          STRH     r1,[r6,#0x44]         ;364
0000a8  e001              B        |L3.174|
                  |L3.170|
0000aa  f8a62044          STRH     r2,[r6,#0x44]         ;364
                  |L3.174|
0000ae  f9b64044          LDRSH    r4,[r6,#0x44]         ;365  ; adc_zero_cnt
0000b2  f44f61fa          MOV      r1,#0x7d0             ;365
0000b6  428c              CMP      r4,r1                 ;368
0000b8  db06              BLT      |L3.200|
0000ba  f8a61044          STRH     r1,[r6,#0x44]         ;368
0000be  6002              STR      r2,[r0,#0]            ;373  ; main_power_buffer
0000c0  6042              STR      r2,[r0,#4]            ;373  ; main_power_buffer
0000c2  6082              STR      r2,[r0,#8]            ;373  ; main_power_buffer
0000c4  60c2              STR      r2,[r0,#0xc]          ;374  ; main_power_buffer
0000c6  87f2              STRH     r2,[r6,#0x3e]         ;374
                  |L3.200|
0000c8  f8b61044          LDRH     r1,[r6,#0x44]         ;374  ; adc_zero_cnt
0000cc  2905              CMP      r1,#5                 ;377
0000ce  d152              BNE      |L3.374|
0000d0  b1d3              CBZ      r3,|L3.264|
0000d2  f8b61042          LDRH     r1,[r6,#0x42]         ;381  ; adc_gorb_cnt
0000d6  f1010101          ADD      r1,r1,#1              ;383
0000da  b209              SXTH     r1,r1                 ;383
0000dc  f8a61042          STRH     r1,[r6,#0x42]         ;383
0000e0  f5b17f00          CMP      r1,#0x200             ;384
0000e4  db03              BLT      |L3.238|
0000e6  e000              B        |L3.234|
                  |L3.232|
0000e8  e01d              B        |L3.294|
                  |L3.234|
0000ea  f8a62042          STRH     r2,[r6,#0x42]         ;387
                  |L3.238|
0000ee  f9b61042          LDRSH    r1,[r6,#0x42]         ;392  ; adc_gorb_cnt
0000f2  064c              LSLS     r4,r1,#25             ;392
0000f4  d108              BNE      |L3.264|
0000f6  ea4f11e1          ASR      r1,r1,#7              ;393
0000fa  f8504021          LDR      r4,[r0,r1,LSL #2]     ;393
0000fe  ea4f2424          ASR      r4,r4,#8              ;396
000102  87f4              STRH     r4,[r6,#0x3e]         ;396
000104  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.264|
000108  f9b60046          LDRSH    r0,[r6,#0x46]  ; adc_window_cnt
00010c  2896              CMP      r0,#0x96
00010e  dd01              BLE      |L3.276|
000110  b103              CBZ      r3,|L3.276|
000112  7472              STRB     r2,[r6,#0x11]
                  |L3.276|
000114  381f              SUBS     r0,r0,#0x1f
000116  2827              CMP      r0,#0x27
000118  d22d              BCS      |L3.374|
00011a  7c70              LDRB     r0,[r6,#0x11]  ; adc_window_flag
00011c  bb58              CBNZ     r0,|L3.374|
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f04f0001          MOV      r0,#1
000122  7470              STRB     r0,[r6,#0x11]
000124  e027              B        |L3.374|
                  |L3.294|
000126  483f              LDR      r0,|L3.548|
000128  7bf5              LDRB     r5,[r6,#0xf]  ; adc_ch
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  7c33              LDRB     r3,[r6,#0x10]  ; adc_ch_cnt
00012c  eb001485          ADD      r4,r0,r5,LSL #6
000130  f9b61040          LDRSH    r1,[r6,#0x40]  ; adc_result
000134  f8441023          STR      r1,[r4,r3,LSL #2]
000138  0798              LSLS     r0,r3,#30
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
00013a  d10f              BNE      |L3.348|
00013c  4601              MOV      r1,r0
                  |L3.318|
00013e  f854c020          LDR      r12,[r4,r0,LSL #2]
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  4461              ADD      r1,r1,r12
000144  f1000001          ADD      r0,r0,#1
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  b2c0              UXTB     r0,r0
00014a  2810              CMP      r0,#0x10
00014c  d3f7              BCC      |L3.318|
00014e  ea4f1021          ASR      r0,r1,#4
000152  4933              LDR      r1,|L3.544|
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
000154  f1a10120          SUB      r1,r1,#0x20
000158  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.348|
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  1c6d              ADDS     r5,r5,#1
00015e  b2e8              UXTB     r0,r5
000160  73f0              STRB     r0,[r6,#0xf]
000162  2810              CMP      r0,#0x10
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
000164  d307              BCC      |L3.374|
000166  73f2              STRB     r2,[r6,#0xf]
000168  f1030301          ADD      r3,r3,#1
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  b2d8              UXTB     r0,r3
00016e  7430              STRB     r0,[r6,#0x10]
000170  2810              CMP      r0,#0x10
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  d300              BCC      |L3.374|
000174  7432              STRB     r2,[r6,#0x10]
                  |L3.374|
000176  7372              STRB     r2,[r6,#0xd]
000178  f1070701          ADD      r7,r7,#1
00017c  f0070001          AND      r0,r7,#1
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
000180  73b0              STRB     r0,[r6,#0xe]
000182  4a29              LDR      r2,|L3.552|
000184  b130              CBZ      r0,|L3.404|
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  6810              LDR      r0,[r2,#0]
000188  f02000ff          BIC      r0,r0,#0xff
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
00018c  f1000004          ADD      r0,r0,#4
000190  6010              STR      r0,[r2,#0]
000192  e03d              B        |L3.528|
                  |L3.404|
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  7bf1              LDRB     r1,[r6,#0xf]  ; adc_ch
000196  0708              LSLS     r0,r1,#28
000198  d406              BMI      |L3.424|
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  6810              LDR      r0,[r2,#0]
00019c  f02000ff          BIC      r0,r0,#0xff
0001a0  f1000001          ADD      r0,r0,#1
0001a4  6010              STR      r0,[r2,#0]
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  e005              B        |L3.436|
                  |L3.424|
0001a8  6810              LDR      r0,[r2,#0]
0001aa  f02000ff          BIC      r0,r0,#0xff
0001ae  f1000002          ADD      r0,r0,#2
0001b2  6010              STR      r0,[r2,#0]            ;405
                  |L3.436|
0001b4  481d              LDR      r0,|L3.556|
0001b6  6803              LDR      r3,[r0,#0]            ;405
0001b8  f0435380          ORR      r3,r3,#0x10000000     ;406
0001bc  6003              STR      r3,[r0,#0]            ;406
0001be  6a03              LDR      r3,[r0,#0x20]         ;408
0001c0  f0434380          ORR      r3,r3,#0x40000000     ;408
0001c4  6203              STR      r3,[r0,#0x20]         ;408
0001c6  6e03              LDR      r3,[r0,#0x60]         ;408
0001c8  f0436380          ORR      r3,r3,#0x4000000      ;408
0001cc  6603              STR      r3,[r0,#0x60]         ;409
0001ce  07cb              LSLS     r3,r1,#31             ;409
0001d0  d00a              BEQ      |L3.488|
0001d2  6943              LDR      r3,[r0,#0x14]         ;409
0001d4  f0435380          ORR      r3,r3,#0x10000000     ;424
0001d8  6143              STR      r3,[r0,#0x14]         ;424
                  |L3.474|
0001da  078b              LSLS     r3,r1,#30             ;424
0001dc  d409              BMI      |L3.498|
0001de  6b43              LDR      r3,[r0,#0x34]         ;425
0001e0  f0234380          BIC      r3,r3,#0x40000000     ;425
0001e4  6343              STR      r3,[r0,#0x34]         ;427
0001e6  e008              B        |L3.506|
                  |L3.488|
0001e8  6943              LDR      r3,[r0,#0x14]         ;427
0001ea  f0235380          BIC      r3,r3,#0x10000000     ;427
0001ee  6143              STR      r3,[r0,#0x14]         ;428
0001f0  e7f3              B        |L3.474|
                  |L3.498|
0001f2  6b43              LDR      r3,[r0,#0x34]         ;428
0001f4  f0434380          ORR      r3,r3,#0x40000000     ;428
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
0001f8  6343              STR      r3,[r0,#0x34]
                  |L3.506|
0001fa  0749              LSLS     r1,r1,#29
0001fc  d404              BMI      |L3.520|
0001fe  6f41              LDR      r1,[r0,#0x74]
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  f0216180          BIC      r1,r1,#0x4000000
000204  6741              STR      r1,[r0,#0x74]
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  e003              B        |L3.528|
                  |L3.520|
000208  6f41              LDR      r1,[r0,#0x74]
00020a  f0416180          ORR      r1,r1,#0x4000000
00020e  6741              STR      r1,[r0,#0x74]
                  |L3.528|
000210  6810              LDR      r0,[r2,#0]
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
000212  f0407080          ORR      r0,r0,#0x1000000
000216  6010              STR      r0,[r2,#0]
000218  e8bd81f0          POP      {r4-r8,pc}
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

                  |L3.540|
                          DCD      ||area_number.25||+0xe6
                  |L3.544|
                          DCD      ||.bss||+0x42c
                  |L3.548|
                          DCD      ||.bss||+0xc
                  |L3.552|
                          DCD      0x40034000
                  |L3.556|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;332    {  
;;;333    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;334    	{
;;;335    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;333
00000c  7820              LDRB     r0,[r4,#0]            ;333  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;333
000010  b2c0              UXTB     r0,r0
;;;336    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;337    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;338    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;341
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;346  ; bps_I
000032  8008              STRH     r0,[r1,#0]            ;341
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12                ;341
00003c  4637              MOV      r7,r6                 ;341
00003e  f9b11000          LDRSH    r1,[r1,#0]            ;343  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]            ;343
000044  f9b83000          LDRSH    r3,[r8,#0]            ;343
000048  f9b77000          LDRSH    r7,[r7,#0]            ;343
00004c  4288              CMP      r0,r1                 ;345
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;343
000054  f1b90f0a          CMP      r9,#0xa               ;345
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;346
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;345
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;345
000064  280a              CMP      r0,#0xa               ;346
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;348
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;348
000072  f88c2001          STRB     r2,[r12,#1]           ;348
000076  f1a30301          SUB      r3,r3,#1              ;349
00007a  f8a83000          STRH     r3,[r8,#0]            ;349
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;354
000084  f88c2001          STRB     r2,[r12,#1]           ;355
000088  f1030301          ADD      r3,r3,#1              ;357
00008c  f8a83000          STRH     r3,[r8,#0]            ;357
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;357
000092  4251              RSBS     r1,r2,#0              ;357
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;358  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;362
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;364  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;364
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;365  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;365
0000b4  f04f0004          MOV      r0,#4                 ;368
0000b8  f88d0001          STRB     r0,[sp,#1]            ;368
0000bc  f88d5002          STRB     r5,[sp,#2]            ;373
0000c0  f04f0002          MOV      r0,#2                 ;373
0000c4  f88d0003          STRB     r0,[sp,#3]            ;374
0000c8  f88d5004          STRB     r5,[sp,#4]            ;374
0000cc  f04f0001          MOV      r0,#1                 ;377
0000d0  f88d0005          STRB     r0,[sp,#5]            ;377
0000d4  f04f0106          MOV      r1,#6                 ;381
0000d8  4668              MOV      r0,sp                 ;383
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;384
0000e2  ea4f2020          ASR      r0,r0,#8              ;384
0000e6  f88d0007          STRB     r0,[sp,#7]            ;387
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;387  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;392
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;392
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;393  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;393
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;396
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22056          LDRSH    r2,[r2,#0x56]  ; main_kb_cnt
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
000144  f04f0106          MOV      r1,#6
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000188  f7fffffe          BL       putchar_sc16is700
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;332    {  
000002  4604              MOV      r4,r0
;;;333    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;334    	{
;;;335    	vz_error=0;
;;;336    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;337    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;338    	vz2_error=0;
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;341
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;345
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;346
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]            ;341
                  |L5.54|
000036  ea000301          AND      r3,r0,r1              ;341
00003a  07db              LSLS     r3,r3,#31             ;341
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]            ;343  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1              ;343
000044  70d0              STRB     r0,[r2,#3]            ;343
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;343
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;345
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;343
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;346
000058  461a              MOV      r2,r3                 ;346
00005a  210e              MOVS     r1,#0xe               ;346
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;346
000066  2202              MOVS     r2,#2                 ;346
000068  210e              MOVS     r1,#0xe               ;348
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;348
000074  2203              MOVS     r2,#3                 ;349
000076  210e              MOVS     r1,#0xe               ;349
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;354
000082  2204              MOVS     r2,#4                 ;354
000084  210e              MOVS     r1,#0xe               ;355
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;357
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;357
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;358  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;358
00009c  70d0              STRB     r0,[r2,#3]            ;362
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;362
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;364
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;364
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;365
0000b0  2201              MOVS     r2,#1                 ;365
0000b2  210e              MOVS     r1,#0xe               ;365
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;373
0000be  461a              MOV      r2,r3                 ;373
0000c0  210e              MOVS     r1,#0xe               ;373
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;374
0000cc  2203              MOVS     r2,#3                 ;377
0000ce  210e              MOVS     r1,#0xe               ;377
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;383
0000da  2204              MOVS     r2,#4                 ;383
0000dc  210e              MOVS     r1,#0xe               ;383
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;387
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;387
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;392  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;392
0000f4  70d0              STRB     r0,[r2,#3]            ;392
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;393
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;393
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;396
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;405
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;405
0001b8  2201              MOVS     r2,#1                 ;406
0001ba  210e              MOVS     r1,#0xe               ;406
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;408
0001c6  2202              MOVS     r2,#2                 ;408
0001c8  210e              MOVS     r1,#0xe               ;408
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;409
0001d4  2203              MOVS     r2,#3                 ;424
0001d6  210e              MOVS     r1,#0xe               ;424
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;425
0001e2  2204              MOVS     r2,#4                 ;427
0001e4  210e              MOVS     r1,#0xe               ;427
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;428
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;428
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;428  ; plazma_inv
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;462
000272  2202              MOVS     r2,#2                 ;462
000274  210e              MOVS     r1,#0xe               ;463
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;465
000280  2203              MOVS     r2,#3                 ;465
000282  210e              MOVS     r1,#0xe               ;465
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;466
00028e  2204              MOVS     r2,#4                 ;466
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  bd70              POP      {r4-r6,pc}
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;332    {  
;;;333    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;334    	{
;;;335    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;333  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;333  ; TBOXMAX
;;;336    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;337    	vz1_error=0;
;;;338    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;341
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;345
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]            ;341  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1                 ;341
00003c  2805              CMP      r0,#5                 ;341
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]            ;343
                  |L6.66|
000042  2400              MOVS     r4,#0                 ;343
000044  2801              CMP      r0,#1                 ;343
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;343
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;345  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;345  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;346
00005a  4298              CMP      r0,r3                 ;346
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;345  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;345
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;346
00006a  b249              SXTB     r1,r1                 ;348
00006c  7011              STRB     r1,[r2,#0]            ;348
00006e  291e              CMP      r1,#0x1e              ;348
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;348  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;349
000078  8039              STRH     r1,[r7,#0]            ;349
00007a  7014              STRB     r4,[r2,#0]            ;349
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;354
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;354  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;355
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;357
00008e  b249              SXTB     r1,r1                 ;357
000090  7011              STRB     r1,[r2,#0]            ;357
000092  291e              CMP      r1,#0x1e              ;357
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;358  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;358
00009c  8039              STRH     r1,[r7,#0]            ;362
00009e  7014              STRB     r4,[r2,#0]            ;362
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;362
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;364  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;364
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;365
0000b0  2100              MOVS     r1,#0                 ;365
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;373
0000be  8800              LDRH     r0,[r0,#0]            ;373  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;373
0000c2  b202              SXTH     r2,r0                 ;373
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;374
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;381  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;383
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;383  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;383
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;384  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;384
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;387
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;387
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;392  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;393
0000fc  2928              CMP      r1,#0x28              ;393
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;396  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;332    {  
;;;333    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;334    	{
;;;335    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;333
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;333
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;336    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;337    	vz1_error=0;
;;;338    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;341
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;345
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0                 ;343
000042  2b01              CMP      r3,#1                 ;343
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;343
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;345
00004e  f8a81000          STRH     r1,[r8,#0]            ;343
000052  2801              CMP      r0,#1                 ;345
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;346
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;346
00005a  2200              MOVS     r2,#0                 ;346
00005c  21e6              MOVS     r1,#0xe6              ;343
00005e  20e1              MOVS     r0,#0xe1              ;345
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;346
000068  f04f0000          MOV      r0,#0                 ;348
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;348
000070  f9b85000          LDRSH    r5,[r8,#0]            ;348
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;349
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;349
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;354
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;354
000086  69c9              LDR      r1,[r1,#0x1c]         ;355
000088  4299              CMP      r1,r3                 ;357
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;357
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;357
000094  b2c0              UXTB     r0,r0                 ;358
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;358
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;358
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;362
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;364
0000aa  7020              STRB     r0,[r4,#0]            ;364
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;365
0000b0  f8a81000          STRH     r1,[r8,#0]            ;365
0000b4  2802              CMP      r0,#2                 ;368
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;368
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;368
0000bc  2200              MOVS     r2,#0                 ;373
0000be  21e6              MOVS     r1,#0xe6              ;373
0000c0  20e1              MOVS     r0,#0xe1              ;373
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;374
0000ca  f04f0000          MOV      r0,#0                 ;374
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;377
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;381
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;383
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;383
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;384
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;384
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;387
0000ea  4299              CMP      r1,r3                 ;387
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;392
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;392
0000f6  b2c0              UXTB     r0,r0                 ;393
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;393
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;393
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;396
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;330    // заполнение флагов для АКБ
;;;331    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;332    {  
000002  f44f70b4          MOV      r0,#0x168
;;;333    if(spc_stat!=spcVZ) 
;;;334    	{
;;;335    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;333
00000e  700a              STRB     r2,[r1,#0]            ;333
000010  f04f0100          MOV      r1,#0
;;;336    	sp_ch_error=0;
;;;337    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;338    	vz2_error=0;
;;;339    	}
;;;340    
;;;341    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;342    	{
;;;343    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f7ffbffe          B.W      lc640_write
;;;344    		{
;;;345    		snmp_bat_flag[0]|=0x0001; 
;;;346    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;347    			{
;;;348    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;349    			snmp_bat_flag_puts[0]|=0x0001;
;;;350    			}
;;;351    		}
;;;352    	else 
;;;353    		{
;;;354    		snmp_bat_flag[0]&=~0x0001; 
;;;355    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;356    			{
;;;357    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;358    			snmp_bat_flag_puts[0]&=~0x0001;
;;;359    			}
;;;360    		}
;;;361    
;;;362    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;363    		{
;;;364    		snmp_bat_flag[0]|=0x0002;
;;;365    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;366    			{
;;;367    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;368    			snmp_bat_flag_puts[0]|=0x0002;
;;;369    			}
;;;370    		}
;;;371    	else 
;;;372    		{
;;;373    		snmp_bat_flag[0]&=~0x0002;
;;;374    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;375    			{
;;;376    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;377    			snmp_bat_flag_puts[0]&=~0x02;
;;;378    			}
;;;379    		}
;;;380    
;;;381    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;382    		{
;;;383    		snmp_bat_flag[0]|=0x0004;
;;;384    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;385    			{
;;;386    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;387    			snmp_bat_flag_puts[0]|=0x0004;
;;;388    			}
;;;389    		}
;;;390    	else 
;;;391    		{
;;;392    		snmp_bat_flag[0]&=~0x0004;
;;;393    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;394    			{
;;;395    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;396    			snmp_bat_flag_puts[0]&=~0x0004;
;;;397    			}
;;;398    		}
;;;399    
;;;400    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;401    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;402    
;;;403    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;404    		{
;;;405    		snmp_bat_flag[0]|=0x0010;
;;;406    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;407    			{
;;;408    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;409    			snmp_bat_flag_puts[0]|=0x0010;
;;;410    			}
;;;411    		}
;;;412    	else 
;;;413    		{
;;;414    		snmp_bat_flag[0]&=~0x0010;
;;;415    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;416    			{
;;;417    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;418    			snmp_bat_flag_puts[0]&=~0x0010;
;;;419    			}
;;;420    		}
;;;421    		
;;;422    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;423    		{
;;;424    		snmp_bat_flag[0]|=0x0020;
;;;425    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;426    			{
;;;427    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;428    			snmp_bat_flag_puts[0]|=0x0020;
;;;429    			}
;;;430    		}
;;;431    	else 
;;;432    		{
;;;433    		snmp_bat_flag[0]&=~0x0020;
;;;434    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;435    			{
;;;436    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;437    			snmp_bat_flag_puts[0]&=~0x0020;
;;;438    			}
;;;439    		}
;;;440    
;;;441    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;442    		{
;;;443    		snmp_bat_flag[0]|=0x0040;
;;;444    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;445    			{
;;;446    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;447    			snmp_bat_flag_puts[0]|=0x0040;
;;;448    			}
;;;449    		}
;;;450    	else 
;;;451    		{
;;;452    		snmp_bat_flag[0]&=~0x0040;
;;;453    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;454    			{
;;;455    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;456    			snmp_bat_flag_puts[0]&=~0x0040;
;;;457    			} 
;;;458    		}
;;;459    
;;;460    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;461    		{
;;;462    		snmp_bat_flag[0]|=0x0080;
;;;463    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;464    			{
;;;465    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;466    			snmp_bat_flag_puts[0]|=0x0080;
;;;467    			}
;;;468    		}
;;;469    	else 
;;;470    		{
;;;471    		snmp_bat_flag[0]&=~0x0080;
;;;472    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;473    			{
;;;474    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;475    			snmp_bat_flag_puts[0]&=~0x0080;
;;;476    			}
;;;477    		}
;;;478    
;;;479    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;480    		{
;;;481    		snmp_bat_flag[0]|=0x0100;
;;;482    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;483    			{
;;;484    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;485    			snmp_bat_flag_puts[0]|=0x0100;
;;;486    			}
;;;487    		}
;;;488    	else 
;;;489    		{
;;;490    		snmp_bat_flag[0]&=~0x0100;
;;;491    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;492    			{
;;;493    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;494    			snmp_bat_flag_puts[0]&=~0x0100;
;;;495    			} 
;;;496    		}
;;;497    
;;;498    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;499    		{
;;;500    		snmp_bat_flag[0]|=0x0200;
;;;501    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;502    			{
;;;503    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;504    			snmp_bat_flag_puts[0]|=0x0200;
;;;505    			}
;;;506    		}
;;;507    	else 
;;;508    		{
;;;509    		snmp_bat_flag[0]&=~0x0200;
;;;510    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;511    			{
;;;512    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;513    			snmp_bat_flag_puts[0]&=~0x0200;
;;;514    			}
;;;515    		}
;;;516    
;;;517    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;518    		{
;;;519    		snmp_bat_flag[0]|=0x0400;
;;;520    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;521    			{
;;;522    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;523    			snmp_bat_flag_puts[0]|=0x0400;
;;;524    			}
;;;525    		}
;;;526    	else 
;;;527    		{
;;;528    		snmp_bat_flag[0]&=~0x0400;
;;;529    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;530    			{
;;;531    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;532    			snmp_bat_flag_puts[0]&=~0x0400;
;;;533    			} 
;;;534    		}
;;;535    
;;;536    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;537    		{
;;;538    		snmp_bat_flag[0]|=0x0800;
;;;539    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;540    			{
;;;541    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;542    			snmp_bat_flag_puts[0]|=0x0800;
;;;543    			}
;;;544    		}
;;;545    	else 
;;;546    		{
;;;547    		snmp_bat_flag[0]&=~0x0800;
;;;548    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;549    			{
;;;550    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;551    			snmp_bat_flag_puts[0]&=~0x0800;
;;;552    			}
;;;553    		}
;;;554    
;;;555    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;556    		{
;;;557    		snmp_bat_flag[0]|=0x1000;
;;;558    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;559    			{
;;;560    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;561    			snmp_bat_flag_puts[0]|=0x1000;
;;;562    			}
;;;563    		}
;;;564    	else 
;;;565    		{
;;;566    		snmp_bat_flag[0]&=~0x1000;
;;;567    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;568    			{
;;;569    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;570    			snmp_bat_flag_puts[0]&=~0x1000;
;;;571    			} 
;;;572    		}
;;;573    	}
;;;574    else 
;;;575    	{
;;;576    	snmp_bat_flag[0]=0; 
;;;577    	snmp_bat_flag_puts[0]=0;
;;;578    	}
;;;579    
;;;580    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;581    	{
;;;582    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;583    		{
;;;584    		snmp_bat_flag[1]|=0x0001; 
;;;585    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;586    			{
;;;587    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;588    			snmp_bat_flag_puts[1]|=0x0001;
;;;589    			}
;;;590    		}
;;;591    	else 
;;;592    		{
;;;593    		snmp_bat_flag[1]&=~0x0001; 
;;;594    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;595    			{
;;;596    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;597    			snmp_bat_flag_puts[1]&=~0x0001;
;;;598    			}
;;;599    		}
;;;600    
;;;601    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;602    		{
;;;603    		snmp_bat_flag[1]|=0x0002;
;;;604    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;605    			{
;;;606    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;607    			snmp_bat_flag_puts[1]|=0x0002;
;;;608    			}
;;;609    		}
;;;610    	else 
;;;611    		{
;;;612    		snmp_bat_flag[1]&=~0x0002;
;;;613    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;614    			{
;;;615    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;616    			snmp_bat_flag_puts[1]&=~0x02;
;;;617    			}
;;;618    		}
;;;619    
;;;620    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;621    		{
;;;622    		snmp_bat_flag[1]|=0x0004;
;;;623    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;624    			{
;;;625    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;626    			snmp_bat_flag_puts[1]|=0x0004;
;;;627    			}
;;;628    		}
;;;629    	else 
;;;630    		{
;;;631    		snmp_bat_flag[1]&=~0x0004;
;;;632    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;633    			{
;;;634    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;635    			snmp_bat_flag_puts[1]&=~0x0004;
;;;636    			}
;;;637    		}
;;;638    
;;;639    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;640    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;641    
;;;642    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;643    		{
;;;644    		snmp_bat_flag[1]|=0x0010;
;;;645    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;646    			{
;;;647    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;648    			snmp_bat_flag_puts[1]|=0x0010;
;;;649    			}
;;;650    		}
;;;651    	else 
;;;652    		{
;;;653    		snmp_bat_flag[1]&=~0x0010;
;;;654    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;655    			{
;;;656    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;657    			snmp_bat_flag_puts[1]&=~0x0010;
;;;658    			}
;;;659    		}
;;;660    		
;;;661    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;662    		{
;;;663    		snmp_bat_flag[1]|=0x0020;
;;;664    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;665    			{
;;;666    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;667    			snmp_bat_flag_puts[1]|=0x0020;
;;;668    			}
;;;669    		}
;;;670    	else 
;;;671    		{
;;;672    		snmp_bat_flag[1]&=~0x0020;
;;;673    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;674    			{
;;;675    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;676    			snmp_bat_flag_puts[1]&=~0x0020;
;;;677    			}
;;;678    		}
;;;679    
;;;680    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;681    		{
;;;682    		snmp_bat_flag[1]|=0x0040;
;;;683    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;684    			{
;;;685    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;686    			snmp_bat_flag_puts[1]|=0x0040;
;;;687    			}
;;;688    		}
;;;689    	else 
;;;690    		{
;;;691    		snmp_bat_flag[1]&=~0x0040;
;;;692    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;693    			{
;;;694    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;695    			snmp_bat_flag_puts[1]&=~0x0040;
;;;696    			} 
;;;697    		}
;;;698    
;;;699    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;700    		{
;;;701    		snmp_bat_flag[1]|=0x0080;
;;;702    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;703    			{
;;;704    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;705    			snmp_bat_flag_puts[1]|=0x0080;
;;;706    			}
;;;707    		}
;;;708    	else 
;;;709    		{
;;;710    		snmp_bat_flag[1]&=~0x0080;
;;;711    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;712    			{
;;;713    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;714    			snmp_bat_flag_puts[1]&=~0x0080;
;;;715    			}
;;;716    		}
;;;717    
;;;718    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;719    		{
;;;720    		snmp_bat_flag[1]|=0x0100;
;;;721    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;722    			{
;;;723    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;724    			snmp_bat_flag_puts[1]|=0x0100;
;;;725    			}
;;;726    		}
;;;727    	else 
;;;728    		{
;;;729    		snmp_bat_flag[1]&=~0x0100;
;;;730    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;731    			{
;;;732    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;733    			snmp_bat_flag_puts[1]&=~0x0100;
;;;734    			} 
;;;735    		}
;;;736    
;;;737    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;738    		{
;;;739    		snmp_bat_flag[1]|=0x0200;
;;;740    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;741    			{
;;;742    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;743    			snmp_bat_flag_puts[1]|=0x0200;
;;;744    			}
;;;745    		}
;;;746    	else 
;;;747    		{
;;;748    		snmp_bat_flag[1]&=~0x0200;
;;;749    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;750    			{
;;;751    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;752    			snmp_bat_flag_puts[1]&=~0x0200;
;;;753    			}
;;;754    		}
;;;755    
;;;756    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;757    		{
;;;758    		snmp_bat_flag[1]|=0x0400;
;;;759    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;760    			{
;;;761    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;762    			snmp_bat_flag_puts[1]|=0x0400;
;;;763    			}
;;;764    		}
;;;765    	else 
;;;766    		{
;;;767    		snmp_bat_flag[1]&=~0x0400;
;;;768    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;769    			{
;;;770    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;771    			snmp_bat_flag_puts[1]&=~0x0400;
;;;772    			} 
;;;773    		}
;;;774    
;;;775    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;776    		{
;;;777    		snmp_bat_flag[1]|=0x0800;
;;;778    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;779    			{
;;;780    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;781    			snmp_bat_flag_puts[1]|=0x0800;
;;;782    			}
;;;783    		}
;;;784    	else 
;;;785    		{
;;;786    		snmp_bat_flag[1]&=~0x0800;
;;;787    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;788    			{
;;;789    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;790    			snmp_bat_flag_puts[1]&=~0x0800;
;;;791    			}
;;;792    		}
;;;793    
;;;794    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;795    		{
;;;796    		snmp_bat_flag[1]|=0x1000;
;;;797    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;798    			{
;;;799    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;800    			snmp_bat_flag_puts[1]|=0x1000;
;;;801    			}
;;;802    		}
;;;803    	else 
;;;804    		{
;;;805    		snmp_bat_flag[1]&=~0x1000;
;;;806    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;807    			{
;;;808    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;809    			snmp_bat_flag_puts[1]&=~0x1000;
;;;810    			} 
;;;811    		}
;;;812    	}
;;;813    else 
;;;814    	{
;;;815    	snmp_bat_flag[1]=0; 
;;;816    	snmp_bat_flag_puts[1]=0;
;;;817    	}
;;;818    /*
;;;819    if(!snmp_bat_status[1])
;;;820    	{
;;;821    	if((bat[1]._Ub<(USIGN*10))) 
;;;822    		{
;;;823    		snmp_bat_flag[1]|=0x01; 
;;;824    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;825    			{
;;;826    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;827    			snmp_bat_flag_puts[1]|=0x01;
;;;828    			}
;;;829    		}
;;;830    	else 
;;;831    		{
;;;832    		snmp_bat_flag[1]&=~0x01; 
;;;833    		if(snmp_bat_flag_puts[1]&0x01) 
;;;834    			{
;;;835    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;836    			snmp_bat_flag_puts[1]&=~0x01;
;;;837    			}
;;;838    		}
;;;839    	if(bat[1]._temper_stat&0x01) 
;;;840    		{
;;;841    		snmp_bat_flag[1]|=0x02;
;;;842    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;843    			{
;;;844    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;845    			snmp_bat_flag_puts[1]|=0x02;
;;;846    			}
;;;847    		}
;;;848    	else 
;;;849    		{
;;;850    		snmp_bat_flag[1]&=~0x02;
;;;851    		if(snmp_bat_flag_puts[1]&0x02) 
;;;852    			{
;;;853    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;854    			snmp_bat_flag_puts[1]&=~0x02;
;;;855    			}
;;;856    		}
;;;857    	if(bat[1]._temper_stat&0x02) 
;;;858    		{
;;;859    		snmp_bat_flag[1]|=0x04;
;;;860    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;861    			{
;;;862    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;863    			snmp_bat_flag_puts[1]|=0x04;
;;;864    			}
;;;865    		}
;;;866    	else 
;;;867    		{
;;;868    		snmp_bat_flag[1]&=~0x04;
;;;869    		if(snmp_bat_flag_puts[1]&0x04) 
;;;870    			{
;;;871    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;872    			snmp_bat_flag_puts[1]&=~0x04;
;;;873    			}
;;;874    		}
;;;875    		
;;;876    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;877    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;878    
;;;879    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;880    		{
;;;881    		snmp_bat_flag[1]|=0x10;
;;;882    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;883    			{
;;;884    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;885    			snmp_bat_flag_puts[1]|=0x10;
;;;886    			}
;;;887    		}
;;;888    	else 
;;;889    		{
;;;890    		snmp_bat_flag[1]&=~0x10;
;;;891    		if(snmp_bat_flag_puts[1]&0x10) 
;;;892    			{
;;;893    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;894    			snmp_bat_flag_puts[1]&=~0x10;
;;;895    			}
;;;896    		}
;;;897    		
;;;898    	if(spc_stat==spcVZ) 
;;;899    		{
;;;900    		snmp_bat_flag[1]|=0x20;
;;;901    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;902    			{
;;;903    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;904    			snmp_bat_flag_puts[1]|=0x20;
;;;905    			}
;;;906    		}
;;;907    	else 
;;;908    		{
;;;909    		snmp_bat_flag[1]&=~0x20;
;;;910    		if(snmp_bat_flag_puts[1]&0x20) 
;;;911    			{
;;;912    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;913    			snmp_bat_flag_puts[1]&=~0x20;
;;;914    			}
;;;915    		}
;;;916    
;;;917    	if(vz_error) 
;;;918    		{
;;;919    		snmp_bat_flag[1]|=0x40;
;;;920    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;921    			{
;;;922    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;923    			snmp_bat_flag_puts[1]|=0x40;
;;;924    			}
;;;925    		}
;;;926    	else 
;;;927    		{
;;;928    		snmp_bat_flag[1]&=~0x40;
;;;929    		if(snmp_bat_flag_puts[1]&0x40) 
;;;930    			{
;;;931    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;932    			snmp_bat_flag_puts[1]&=~0x40;
;;;933    			} 
;;;934    		}
;;;935       }
;;;936    else 
;;;937    	{
;;;938    	snmp_bat_flag[1]=0; 
;;;939    	snmp_bat_flag_puts[1]=0;
;;;940    	} */
;;;941    }
;;;942    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        28
                  U_end_from_i_table
                          %        28
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_ke_init
000009  00                DCB      0x00
                  ke_drv_cnt_10s
00000a  00                DCB      0x00
                  i_bat_buff_cnt
00000b  00                DCB      0x00
                  cntrlStatIsDownCnt
00000c  00                DCB      0x00
                  adc_self_ch_cnt
00000d  00                DCB      0x00
                  adc_ch_net
00000e  00                DCB      0x00
                  adc_ch
00000f  00                DCB      0x00
                  adc_ch_cnt
000010  00                DCB      0x00
                  adc_window_flag
000011  00                DCB      0x00
                  ch_cnt0
000012  00                DCB      0x00
                  b1Hz_ch
000013  00                DCB      0x00
                  i
000014  00                DCB      0x00
                  iiii
000015  00                DCB      0x00
                  bAVG
000016  00                DCB      0x00
                  avg_num
000017  00                DCB      0x00
                  avg_vektor
000018  00                DCB      0x00
                  kb_full_ver
000019  00                DCB      0x00
                  kb_start_ips
00001a  00                DCB      0x00
                  num_of_wrks_bps
00001b  00                DCB      0x00
                  num_necc_up
00001c  00                DCB      0x00
                  num_necc_down
00001d  00                DCB      0x00
                  sh_cnt0
00001e  00                DCB      0x00
                  b1Hz_sh
00001f  00                DCB      0x00
                  spc_stat
000020  00                DCB      0x00
                  spc_bat
000021  00                DCB      0x00
                  spc_phase
000022  00                DCB      0x00
                  bAVZ
000023  00                DCB      0x00
                  ke_start_stat
000024  00                DCB      0x00
                  numOfForvardBps
000025  00                DCB      0x00
                  numOfForvardBps_old
000026  00                DCB      0x00
                  numOfForvardBps_minCnt
000027  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
000028  00                DCB      0x00
                  bPARALLEL_ENOUG
000029  00                DCB      0x00
                  bPARALLEL
00002a  00                DCB      0x00
                  cntrl_hndl_plazma
00002b  00                DCB      0x00
                  cntrl_hndl_plazma_
00002c  00                DCB      0x00
                  volt_region
00002d  00                DCB      0x00
                  avar_bps_reset_cnt
00002e  0000              DCB      0x00,0x00
                  cntrl_stat
000030  0262              DCW      0x0262
                  cntrl_stat_old
000032  0262              DCW      0x0262
                  avg_main_cnt
000034  0014              DCW      0x0014
                  bat_hndl_zvu_init
000036  0000              DCB      0x00,0x00
                  bat_hndl_i_vector
000038  0000              DCB      0x00,0x00
                  bat_hndl_i_vector_old
00003a  0000              DCB      0x00,0x00
                  num_necc_block_cnt
00003c  0000              DCB      0x00,0x00
                  net_buff_
00003e  0000              DCB      0x00,0x00
                  adc_result
000040  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000042  0000              DCB      0x00,0x00
                  adc_zero_cnt
000044  0000              DCB      0x00,0x00
                  adc_window_cnt
000046  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000048  0000              DCB      0x00,0x00
                  plazma_sk
00004a  0000              DCB      0x00,0x00
                  cntrl_stat_new
00004c  0000              DCB      0x00,0x00
                  Ibmax
00004e  0000              DCB      0x00,0x00
                  IZMAX_
000050  0000              DCB      0x00,0x00
                  Ubpsmax
000052  0000              DCB      0x00,0x00
                  samokalibr_cnt
000054  0000              DCB      0x00,0x00
                  main_kb_cnt
000056  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000058  0000              DCB      0x00,0x00
                  kb_cnt_2lev
00005a  0000              DCB      0x00,0x00
                  kb_start
00005c  0000              DCB      0x00,0x00
                  ibat_ips
00005e  0000              DCB      0x00,0x00
                  ibat_ips_
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000084  0000              DCB      0x00,0x00
                  bat_hndl_zvu_Q_cnt
000086  0000              DCB      0x00,0x00
                  amper_chas_cnt_drv_cnter
000088  0000              DCB      0x00,0x00
                  bat_hndl_zvu_cnter
00008a  0000              DCB      0x00,0x00
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_i
                          DCD      0x00000000
                  bat_hndl_t_razr_hour
                          DCD      0x00000000
                  bat_hndl_t_razr_min
                          DCD      0x00000000
                  bat_hndl_t_razr_mininhour
                          DCD      0x00000000
                  bat_hndl_u_end
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000e4  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000e6  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                          DCD      0x00000000
                  ke_date
                          %        8
                  bat_hndl_t_razr
                          %        8
                  bat_hndl_t_razr_ke
                          %        8
                  bat_hndl_zvu_Q
                          %        8
                  bat_hndl_proc_razr
                          %        8
                  bat_hndl_remain_time
                          %        8
                  amper_chas_cnt_drv_summ
                          %        8
                  amper_chas_cnt_drv_summ_
                          %        8
                  bat_hndl_i_summ
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  Ibmax_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=1

                          EXPORTAS ||area_number.65||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.66||, DATA, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.67||, DATA, ALIGN=1

                          EXPORTAS ||area_number.67||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.69||, DATA, ALIGN=1

                          EXPORTAS ||area_number.69||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
