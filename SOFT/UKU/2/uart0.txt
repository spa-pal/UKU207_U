; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;82     
;;;83     for(j=1;j<num;j++)
000004  f04f0201          MOV      r2,#1
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  4cff              LDR      r4,|L1.1032|
00000a  e008              B        |L1.30|
                  |L1.12|
00000c  f1000001          ADD      r0,r0,#1              ;85
000010  5ce3              LDRB     r3,[r4,r3]
000012  7805              LDRB     r5,[r0,#0]
000014  ea850303          EOR      r3,r5,r3
000018  f1020201          ADD      r2,r2,#1              ;83
00001c  b2d2              UXTB     r2,r2                 ;83
                  |L1.30|
00001e  428a              CMP      r2,r1                 ;83
000020  d3f4              BCC      |L1.12|
;;;87     	}
;;;88     
;;;89     return r;	
000022  4618              MOV      r0,r3
;;;90     } 
000024  bd30              POP      {r4,r5,pc}
;;;91     
                          ENDP

                  crc_95 PROC
;;;92     //-----------------------------------------------
;;;93     char crc_95(char* ptr,char num)
000026  b530              PUSH     {r4,r5,lr}
;;;94     {
;;;95     char r,j;
;;;96     r=*ptr;
000028  7803              LDRB     r3,[r0,#0]
;;;97     
;;;98     for(j=1;j<num;j++)
00002a  f04f0201          MOV      r2,#1
;;;99     	{
;;;100         ptr++;
;;;101    	r=((*ptr)^Table95[r]);
00002e  4cf7              LDR      r4,|L1.1036|
000030  e008              B        |L1.68|
                  |L1.50|
000032  f1000001          ADD      r0,r0,#1              ;100
000036  5ce3              LDRB     r3,[r4,r3]
000038  7805              LDRB     r5,[r0,#0]
00003a  ea850303          EOR      r3,r5,r3
00003e  f1020201          ADD      r2,r2,#1              ;98
000042  b2d2              UXTB     r2,r2                 ;98
                  |L1.68|
000044  428a              CMP      r2,r1                 ;98
000046  d3f4              BCC      |L1.50|
;;;102    	}
;;;103    
;;;104    return r;	
000048  4618              MOV      r0,r3
;;;105    }
00004a  bd30              POP      {r4,r5,pc}
;;;106    
                          ENDP

                  putchar0 PROC
;;;110    //-----------------------------------------------
;;;111    void putchar0(char c)
00004c  b530              PUSH     {r4,r5,lr}
;;;112    {
;;;113    while (tx_counter0 == TX_BUFFER_SIZE0);
00004e  4bf0              LDR      r3,|L1.1040|
000050  f44f6480          MOV      r4,#0x400
000054  89d9              LDRH     r1,[r3,#0xe]
                  |L1.86|
000056  42a1              CMP      r1,r4
000058  d0fd              BEQ      |L1.86|
;;;114    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00005a  b931              CBNZ     r1,|L1.106|
00005c  4aed              LDR      r2,|L1.1044|
00005e  7d15              LDRB     r5,[r2,#0x14]
000060  f0150f60          TST      r5,#0x60
000064  d001              BEQ      |L1.106|
;;;115       {
;;;116       tx_buffer0[tx_wr_index0]=c;
;;;117       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;118       ++tx_counter0;
;;;119       }
;;;120    else LPC_UART0->THR=c;
000066  7010              STRB     r0,[r2,#0]
;;;121    }
000068  bd30              POP      {r4,r5,pc}
                  |L1.106|
00006a  4deb              LDR      r5,|L1.1048|
00006c  895a              LDRH     r2,[r3,#0xa]          ;116  ; tx_wr_index0
00006e  54a8              STRB     r0,[r5,r2]            ;116
000070  1c52              ADDS     r2,r2,#1              ;117
000072  b290              UXTH     r0,r2                 ;117
000074  8158              STRH     r0,[r3,#0xa]          ;117
000076  42a0              CMP      r0,r4                 ;117
000078  d102              BNE      |L1.128|
00007a  f04f0000          MOV      r0,#0                 ;117
00007e  8158              STRH     r0,[r3,#0xa]          ;117
                  |L1.128|
000080  f1010101          ADD      r1,r1,#1              ;118
000084  81d9              STRH     r1,[r3,#0xe]          ;118
000086  bd30              POP      {r4,r5,pc}
;;;122    
                          ENDP

                  uart_out_adr0 PROC
;;;171    //-----------------------------------------------
;;;172    void uart_out_adr0 (char *ptr, char len)
000088  b570              PUSH     {r4-r6,lr}
;;;173    {
00008a  b08f              SUB      sp,sp,#0x3c
;;;174    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;175    char i,t=0;
00008c  f04f0300          MOV      r3,#0
;;;176    
;;;177    //rs232_data_out_buff[4]=210;
;;;178    
;;;179    for(i=0;i<len;i++)
000090  461a              MOV      r2,r3
000092  466d              MOV      r5,sp                 ;174
000094  e006              B        |L1.164|
                  |L1.150|
;;;180    	{
;;;181    	UOB[i]=ptr[i];
000096  5c84              LDRB     r4,[r0,r2]
000098  54ac              STRB     r4,[r5,r2]
;;;182    	t^=UOB[i];
00009a  ea840303          EOR      r3,r4,r3
00009e  f1020201          ADD      r2,r2,#1              ;179
0000a2  b2d2              UXTB     r2,r2                 ;179
                  |L1.164|
0000a4  428a              CMP      r2,r1                 ;179
0000a6  d3f6              BCC      |L1.150|
;;;183    	}
;;;184    //if(!t)t=0xff;
;;;185    //UOB[8]=5;
;;;186    //UOB[9]=6;
;;;187    UOB[10]=200;
0000a8  f04f00c8          MOV      r0,#0xc8
0000ac  f88d000a          STRB     r0,[sp,#0xa]
;;;188    //UOB[11]=8;
;;;189    UOB[len]=len;
0000b0  5469              STRB     r1,[r5,r1]
;;;190    t^=len;	
0000b2  ea830301          EOR      r3,r3,r1
;;;191    UOB[len+1]=t;	
0000b6  eb050001          ADD      r0,r5,r1
0000ba  7043              STRB     r3,[r0,#1]
;;;192    UOB[len+2]=END;
0000bc  f04f020a          MOV      r2,#0xa
0000c0  7082              STRB     r2,[r0,#2]
;;;193    //UOB[0]=i+1;
;;;194    //UOB[i]=t^UOB[0];
;;;195    //UOB[i+1]=END;
;;;196    	
;;;197    //puts(UOB); 
;;;198    for (i=0;i<len+3;i++)
0000c2  f04f0400          MOV      r4,#0
0000c6  f1010603          ADD      r6,r1,#3
0000ca  e005              B        |L1.216|
                  |L1.204|
;;;199    	{
;;;200    	putchar0(UOB[i]);
0000cc  5d28              LDRB     r0,[r5,r4]
0000ce  f7fffffe          BL       putchar0
0000d2  f1040401          ADD      r4,r4,#1              ;198
0000d6  b2e4              UXTB     r4,r4                 ;198
                  |L1.216|
0000d8  42b4              CMP      r4,r6                 ;198
0000da  d3f7              BCC      |L1.204|
;;;201    	}   
;;;202    }
0000dc  b00f              ADD      sp,sp,#0x3c
0000de  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  UARTInit PROC
;;;390    //-----------------------------------------------
;;;391    uint32_t UARTInit( uint32_t PortNum, uint32_t baudrate )
0000e0  e92d47f0          PUSH     {r4-r10,lr}
;;;392    {
;;;393    uint32_t Fdiv;
;;;394    uint32_t pclkdiv, pclk;
;;;395    
;;;396    
;;;397    
;;;398    if ( PortNum == 0 )
;;;399      	{
;;;400    	LPC_PINCON->PINSEL0 &= ~0x000000F0;
;;;401    	LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
;;;402    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;403    	all the peripherals is 1/4 of the SystemFrequency. */
;;;404    	/* Bit 6~7 is for UART0 */
;;;405    	pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
;;;406    	switch ( pclkdiv )
;;;407    		{
;;;408    	  	case 0x00:
;;;409    	  	default:
;;;410    		pclk = SystemFrequency/4;
0000e4  4acf              LDR      r2,|L1.1060|
0000e6  f8df8334          LDR      r8,|L1.1052|
0000ea  f8df9334          LDR      r9,|L1.1056|
0000ee  6812              LDR      r2,[r2,#0]
0000f0  2603              MOVS     r6,#3                 ;394
;;;411    		break;
;;;412    	  	case 0x01:
;;;413    		pclk = SystemFrequency;
;;;414    		break; 
;;;415    	  	case 0x02:
;;;416    		pclk = SystemFrequency/2;
;;;417    		break; 
;;;418    	  	case 0x03:
;;;419    		pclk = SystemFrequency/8;
;;;420    		break;
;;;421    		}
;;;422    
;;;423        	LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
0000f2  2783              MOVS     r7,#0x83
;;;424    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;425        	LPC_UART0->DLM = Fdiv / 256;							
;;;426        	LPC_UART0->DLL = Fdiv % 256;
;;;427    	LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
;;;428        	LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
0000f4  2507              MOVS     r5,#7
0000f6  0893              LSRS     r3,r2,#2              ;410
0000f8  0854              LSRS     r4,r2,#1              ;416
0000fa  ea4f0cd2          LSR      r12,r2,#3             ;419
0000fe  b120              CBZ      r0,|L1.266|
;;;429    
;;;430       	NVIC_EnableIRQ(UART0_IRQn);
;;;431    
;;;432        	LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
;;;433        	return (TRUE);
;;;434      	}
;;;435    else if ( PortNum == 1 )
000100  2801              CMP      r0,#1
000102  d030              BEQ      |L1.358|
;;;436      	{
;;;437    	LPC_PINCON->PINSEL4 &= ~0x0000000F;
;;;438    	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
;;;439    	
;;;440    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;441    	all the peripherals is 1/4 of the SystemFrequency. */
;;;442    	/* Bit 8,9 are for UART1 */
;;;443    	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
;;;444    	switch ( pclkdiv )
;;;445    		{
;;;446    	  	case 0x00:
;;;447    	  	default:
;;;448    		pclk = SystemFrequency/4;
;;;449    		break;
;;;450    	  	case 0x01:
;;;451    		pclk = SystemFrequency;
;;;452    		break; 
;;;453    	  	case 0x02:
;;;454    		pclk = SystemFrequency/2;
;;;455    		break; 
;;;456    	  	case 0x03:
;;;457    		pclk = SystemFrequency/8;
;;;458    		break;
;;;459    		}
;;;460    
;;;461        	LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
;;;462    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;463        	LPC_UART1->DLM = Fdiv / 256;							
;;;464        	LPC_UART1->DLL = Fdiv % 256;
;;;465    	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
;;;466        	LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
;;;467    
;;;468       	NVIC_EnableIRQ(UART1_IRQn);
;;;469    
;;;470        	LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
;;;471        	return (TRUE);
;;;472      	}
;;;473    return( FALSE ); 
000104  2000              MOVS     r0,#0
                  |L1.262|
;;;474    }
000106  e8bd87f0          POP      {r4-r10,pc}
                  |L1.266|
00010a  f8d80000          LDR      r0,[r8,#0]            ;400
00010e  f02000f0          BIC      r0,r0,#0xf0           ;400
000112  f8c80000          STR      r0,[r8,#0]            ;400
000116  f8d80000          LDR      r0,[r8,#0]            ;401
00011a  f0400050          ORR      r0,r0,#0x50           ;401
00011e  f8c80000          STR      r0,[r8,#0]            ;401
000122  f8d901a8          LDR      r0,[r9,#0x1a8]        ;405
000126  f3c01081          UBFX     r0,r0,#6,#2           ;405
00012a  2801              CMP      r0,#1                 ;406
00012c  d008              BEQ      |L1.320|
00012e  2802              CMP      r0,#2                 ;406
000130  d003              BEQ      |L1.314|
000132  2803              CMP      r0,#3                 ;406
000134  d003              BEQ      |L1.318|
000136  461a              MOV      r2,r3                 ;410
000138  e002              B        |L1.320|
                  |L1.314|
00013a  4622              MOV      r2,r4                 ;416
00013c  e000              B        |L1.320|
                  |L1.318|
00013e  4662              MOV      r2,r12                ;419
                  |L1.320|
000140  4cb4              LDR      r4,|L1.1044|
000142  7327              STRB     r7,[r4,#0xc]          ;423
000144  ea4f1012          LSR      r0,r2,#4              ;424
000148  fbb0f0f1          UDIV     r0,r0,r1              ;424
00014c  ea4f2110          LSR      r1,r0,#8              ;425
000150  7121              STRB     r1,[r4,#4]            ;425
000152  7020              STRB     r0,[r4,#0]            ;426
000154  7326              STRB     r6,[r4,#0xc]          ;427
000156  7225              STRB     r5,[r4,#8]            ;428
000158  f04f0005          MOV      r0,#5                 ;430
00015c  f7fffffe          BL       NVIC_EnableIRQ
000160  6065              STR      r5,[r4,#4]            ;432
000162  2001              MOVS     r0,#1                 ;433
000164  e7cf              B        |L1.262|
                  |L1.358|
000166  f8d80010          LDR      r0,[r8,#0x10]         ;437
00016a  f020000f          BIC      r0,r0,#0xf            ;437
00016e  f8c80010          STR      r0,[r8,#0x10]         ;437
000172  f8d80010          LDR      r0,[r8,#0x10]         ;438
000176  f040000a          ORR      r0,r0,#0xa            ;438
00017a  f8c80010          STR      r0,[r8,#0x10]         ;438
00017e  f8d901a8          LDR      r0,[r9,#0x1a8]        ;443
000182  f3c02001          UBFX     r0,r0,#8,#2           ;443
000186  2801              CMP      r0,#1                 ;444
000188  d008              BEQ      |L1.412|
00018a  2802              CMP      r0,#2                 ;444
00018c  d003              BEQ      |L1.406|
00018e  2803              CMP      r0,#3                 ;444
000190  d003              BEQ      |L1.410|
000192  461a              MOV      r2,r3                 ;448
000194  e002              B        |L1.412|
                  |L1.406|
000196  4622              MOV      r2,r4                 ;454
000198  e000              B        |L1.412|
                  |L1.410|
00019a  4662              MOV      r2,r12                ;457
                  |L1.412|
00019c  4ca2              LDR      r4,|L1.1064|
00019e  7327              STRB     r7,[r4,#0xc]          ;461
0001a0  ea4f1012          LSR      r0,r2,#4              ;462
0001a4  fbb0f0f1          UDIV     r0,r0,r1              ;462
0001a8  ea4f2110          LSR      r1,r0,#8              ;463
0001ac  7121              STRB     r1,[r4,#4]            ;463
0001ae  7020              STRB     r0,[r4,#0]            ;464
0001b0  7326              STRB     r6,[r4,#0xc]          ;465
0001b2  7225              STRB     r5,[r4,#8]            ;466
0001b4  f04f0006          MOV      r0,#6                 ;468
0001b8  f7fffffe          BL       NVIC_EnableIRQ
0001bc  6065              STR      r5,[r4,#4]            ;470
0001be  2001              MOVS     r0,#1                 ;471
0001c0  e7a1              B        |L1.262|
;;;475    
                          ENDP

                  UART0_IRQHandler PROC
;;;487    //***********************************************
;;;488    void UART0_IRQHandler (void) 
0001c2  e92d4ff8          PUSH     {r3-r11,lr}
;;;489    {
;;;490    uint8_t IIRValue, LSRValue;
;;;491    uint8_t Dummy = Dummy;
;;;492    char /*status,u0iir,*/data;
;;;493    
;;;494    plazma_uart0++;
0001c6  4e92              LDR      r6,|L1.1040|
0001c8  78f0              LDRB     r0,[r6,#3]  ; plazma_uart0
0001ca  f1000001          ADD      r0,r0,#1
0001ce  70f0              STRB     r0,[r6,#3]
;;;495    
;;;496    
;;;497    			
;;;498    IIRValue = LPC_UART0->IIR;
0001d0  4990              LDR      r1,|L1.1044|
0001d2  6888              LDR      r0,[r1,#8]
;;;499        
;;;500    IIRValue >>= 1;			/* skip pending bit in IIR */
0001d4  ea4f0050          LSR      r0,r0,#1
;;;501    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
0001d8  f0000007          AND      r0,r0,#7
;;;502    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;503      	{
;;;504    	LSRValue = LPC_UART0->LSR;
;;;505    
;;;506    	/* Receive Line Status */
;;;507    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;508    		{
;;;509    	  	/* There are errors or break interrupt */
;;;510    	  	/* Read LSR will clear the interrupt */
;;;511    	  	UART0Status = LSRValue;
;;;512    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;513    							interrupt, then bail out */
;;;514    	  	return;
;;;515    		}
;;;516    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;517    		{
;;;518    		
;;;519    		data=LPC_UART0->RBR;
;;;520    		rx_buffer0[rx_wr_index0]=data;
0001dc  f8dfb24c          LDR      r11,|L1.1068|
;;;521       		bRXIN0=1;
;;;522       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001e0  f44f6a80          MOV      r10,#0x400
0001e4  f04f0901          MOV      r9,#1                 ;521
0001e8  f04f0400          MOV      r4,#0
0001ec  2803              CMP      r0,#3                 ;502
0001ee  d022              BEQ      |L1.566|
;;;523       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;524          		{
;;;525          		rx_counter0=0;
;;;526          		rx_buffer_overflow0=1;
;;;527          		}
;;;528    
;;;529    		
;;;530    		}
;;;531      	}
;;;532    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
0001f0  2802              CMP      r0,#2
0001f2  d03f              BEQ      |L1.628|
;;;533      	{
;;;534    	plazma_bat_drv0++;
;;;535    	modbus_plazma++;
;;;536    	while((LPC_UART0->LSR)&0x0001) {	
;;;537    	data=LPC_UART0->RBR;
;;;538    	rx_buffer0[rx_wr_index0]=data;
;;;539       	bRXIN0=1;
;;;540       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;541       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;542          	{
;;;543          	rx_counter0=0;
;;;544          	rx_buffer_overflow0=1;
;;;545          	}
;;;546    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;547    	modbus_rx_buffer_ptr++;
;;;548    	modbus_timeout_cnt=0;
;;;549    
;;;550    
;;;551    
;;;552    	
;;;553    
;;;554    	if(data==0x7e)
;;;555    		{
;;;556    		bat_drv_rx_cnt=0;
;;;557    		bat_drv_rx_cnt=0;
;;;558    		}
;;;559    	//if(bat_drv_rx_cnt<50)
;;;560    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;561    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;562    
;;;563    	if(data==0x0d)
;;;564    		{
;;;565    		if(BAT_TYPE==2)
;;;566    			{
;;;567    			if(sacredSunRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;568    			else if(sacredSunRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;569    			sacredSunSilentCnt=0;
;;;570    			}
;;;571    		else if (BAT_TYPE==3)
;;;572    			{
;;;573    			numOfPacks_=((ascii2halFhex(bat_drv_rx_buff[15]))<<4)+((ascii2halFhex(bat_drv_rx_buff[16])));
;;;574    			if(numOfPacks_)numOfPacks_--;
;;;575    		   	if(numOfPacks_<0)numOfPacks_=0;
;;;576    			if(numOfPacks_>NUMBAT)numOfPacks_=0;
;;;577    			zTTSilentCnt[numOfPacks_]=50;
;;;578    
;;;579    			if(zTTRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;580    			else if(zTTRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;581    			//zTTSilentCnt=0;
;;;582    			}
;;;583    		}
;;;584    
;;;585    	}
;;;586      	}
;;;587    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
0001f4  2806              CMP      r0,#6
0001f6  d07e              BEQ      |L1.758|
;;;588      	{
;;;589    	/* Character Time-out indicator */
;;;590    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;591      	}
;;;592    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
0001f8  2801              CMP      r0,#1
0001fa  d11a              BNE      |L1.562|
;;;593      	{
;;;594    	/* THRE interrupt */
;;;595    	
;;;596    	plazma_bat_drv1++;
0001fc  488c              LDR      r0,|L1.1072|
0001fe  8802              LDRH     r2,[r0,#0]  ; plazma_bat_drv1
000200  f1020201          ADD      r2,r2,#1
000204  8002              STRH     r2,[r0,#0]
;;;597    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
000206  7d08              LDRB     r0,[r1,#0x14]
;;;598    									valid data in U0THR or not */
;;;599    	if ( LSRValue & LSR_THRE )
000208  0680              LSLS     r0,r0,#26
00020a  d575              BPL      |L1.760|
;;;600    		{
;;;601    	  	UART0TxEmpty = 1;
00020c  f8869000          STRB     r9,[r6,#0]
;;;602    		if (tx_counter0)
000210  89f0              LDRH     r0,[r6,#0xe]  ; tx_counter0
000212  2800              CMP      r0,#0
000214  d00d              BEQ      |L1.562|
;;;603       			{
;;;604       			--tx_counter0;
000216  f1a00001          SUB      r0,r0,#1
00021a  81f0              STRH     r0,[r6,#0xe]
;;;605       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
00021c  4a7e              LDR      r2,|L1.1048|
00021e  89b0              LDRH     r0,[r6,#0xc]  ; tx_rd_index0
000220  5c12              LDRB     r2,[r2,r0]
000222  700a              STRB     r2,[r1,#0]
;;;606       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000224  f1000001          ADD      r0,r0,#1
000228  b280              UXTH     r0,r0
00022a  81b0              STRH     r0,[r6,#0xc]
00022c  4550              CMP      r0,r10
00022e  d100              BNE      |L1.562|
000230  81b4              STRH     r4,[r6,#0xc]
                  |L1.562|
;;;607       			}
;;;608    		}
;;;609    	else
;;;610    		{
;;;611    	  	UART0TxEmpty = 0;
;;;612    		}
;;;613      	}
;;;614    }
000232  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.566|
000236  7d08              LDRB     r0,[r1,#0x14]         ;504
000238  f0100f9e          TST      r0,#0x9e              ;507
00023c  d002              BEQ      |L1.580|
00023e  6130              STR      r0,[r6,#0x10]         ;511  ; UART0Status
000240  7808              LDRB     r0,[r1,#0]            ;512
000242  e7f6              B        |L1.562|
                  |L1.580|
000244  07c0              LSLS     r0,r0,#31             ;516
000246  d0f4              BEQ      |L1.562|
000248  7809              LDRB     r1,[r1,#0]            ;519
00024a  88b0              LDRH     r0,[r6,#4]            ;520  ; rx_wr_index0
00024c  f80b1000          STRB     r1,[r11,r0]           ;520
000250  f8869001          STRB     r9,[r6,#1]            ;521
000254  1c40              ADDS     r0,r0,#1              ;522
000256  b280              UXTH     r0,r0                 ;522
000258  80b0              STRH     r0,[r6,#4]            ;522
00025a  4550              CMP      r0,r10                ;522
00025c  d100              BNE      |L1.608|
00025e  80b4              STRH     r4,[r6,#4]            ;522
                  |L1.608|
000260  8930              LDRH     r0,[r6,#8]            ;523  ; rx_counter0
000262  1c40              ADDS     r0,r0,#1              ;523
000264  b280              UXTH     r0,r0                 ;523
000266  8130              STRH     r0,[r6,#8]            ;523
000268  4550              CMP      r0,r10                ;523
00026a  d1e2              BNE      |L1.562|
00026c  8134              STRH     r4,[r6,#8]            ;525
00026e  f8869002          STRB     r9,[r6,#2]            ;526
000272  e7de              B        |L1.562|
                  |L1.628|
000274  4a6f              LDR      r2,|L1.1076|
000276  8810              LDRH     r0,[r2,#0]            ;534  ; plazma_bat_drv0
000278  f1000001          ADD      r0,r0,#1              ;534
00027c  8010              STRH     r0,[r2,#0]            ;534
00027e  486e              LDR      r0,|L1.1080|
000280  8802              LDRH     r2,[r0,#0]            ;535  ; modbus_plazma
000282  f1020201          ADD      r2,r2,#1              ;535
000286  8002              STRH     r2,[r0,#0]            ;535
000288  486e              LDR      r0,|L1.1092|
00028a  f8df81b0          LDR      r8,|L1.1084|
00028e  4d6c              LDR      r5,|L1.1088|
000290  9000              STR      r0,[sp,#0]            ;536
000292  e07f              B        |L1.916|
                  |L1.660|
000294  7800              LDRB     r0,[r0,#0]            ;537
000296  88b1              LDRH     r1,[r6,#4]            ;538  ; rx_wr_index0
000298  f80b0001          STRB     r0,[r11,r1]           ;538
00029c  f8869001          STRB     r9,[r6,#1]            ;539
0002a0  1c49              ADDS     r1,r1,#1              ;540
0002a2  b289              UXTH     r1,r1                 ;540
0002a4  80b1              STRH     r1,[r6,#4]            ;540
0002a6  4551              CMP      r1,r10                ;540
0002a8  d100              BNE      |L1.684|
0002aa  80b4              STRH     r4,[r6,#4]            ;540
                  |L1.684|
0002ac  8931              LDRH     r1,[r6,#8]            ;541  ; rx_counter0
0002ae  1c49              ADDS     r1,r1,#1              ;541
0002b0  b289              UXTH     r1,r1                 ;541
0002b2  8131              STRH     r1,[r6,#8]            ;541
0002b4  4551              CMP      r1,r10                ;541
0002b6  d102              BNE      |L1.702|
0002b8  8134              STRH     r4,[r6,#8]            ;543
0002ba  f8869002          STRB     r9,[r6,#2]            ;544
                  |L1.702|
0002be  4a63              LDR      r2,|L1.1100|
0002c0  4b61              LDR      r3,|L1.1096|
0002c2  7811              LDRB     r1,[r2,#0]            ;546  ; modbus_rx_buffer_ptr
0002c4  5458              STRB     r0,[r3,r1]            ;546
0002c6  f1010101          ADD      r1,r1,#1              ;547
0002ca  7011              STRB     r1,[r2,#0]            ;547
0002cc  4960              LDR      r1,|L1.1104|
0002ce  700c              STRB     r4,[r1,#0]            ;548
0002d0  287e              CMP      r0,#0x7e              ;554
0002d2  d100              BNE      |L1.726|
0002d4  802c              STRH     r4,[r5,#0]            ;556
                  |L1.726|
0002d6  8829              LDRH     r1,[r5,#0]            ;560  ; bat_drv_rx_cnt
0002d8  f1010201          ADD      r2,r1,#1              ;560
0002dc  b292              UXTH     r2,r2                 ;560
0002de  802a              STRH     r2,[r5,#0]            ;560
0002e0  f8080001          STRB     r0,[r8,r1]            ;560
0002e4  280d              CMP      r0,#0xd               ;563
0002e6  d155              BNE      |L1.916|
0002e8  485a              LDR      r0,|L1.1108|
0002ea  f9b00000          LDRSH    r0,[r0,#0]            ;565  ; BAT_TYPE
0002ee  2802              CMP      r0,#2                 ;565
0002f0  d005              BEQ      |L1.766|
0002f2  2803              CMP      r0,#3                 ;571
0002f4  e001              B        |L1.762|
                  |L1.758|
0002f6  e053              B        |L1.928|
                  |L1.760|
0002f8  e057              B        |L1.938|
                  |L1.762|
0002fa  d14b              BNE      |L1.916|
0002fc  e012              B        |L1.804|
                  |L1.766|
0002fe  4856              LDR      r0,|L1.1112|
000300  7800              LDRB     r0,[r0,#0]            ;567  ; sacredSunRequestPhase
000302  b110              CBZ      r0,|L1.778|
000304  2801              CMP      r0,#1                 ;568
000306  d006              BEQ      |L1.790|
000308  e009              B        |L1.798|
                  |L1.778|
00030a  484e              LDR      r0,|L1.1092|
00030c  494b              LDR      r1,|L1.1084|
00030e  3896              SUBS     r0,r0,#0x96           ;567
000310  f7fffffe          BL       mem_copy
000314  e003              B        |L1.798|
                  |L1.790|
000316  4949              LDR      r1,|L1.1084|
000318  9800              LDR      r0,[sp,#0]            ;568
00031a  f7fffffe          BL       mem_copy
                  |L1.798|
00031e  484f              LDR      r0,|L1.1116|
000320  8004              STRH     r4,[r0,#0]            ;569
000322  e037              B        |L1.916|
                  |L1.804|
000324  f8980010          LDRB     r0,[r8,#0x10]         ;573  ; bat_drv_rx_buff
000328  f7fffffe          BL       ascii2halFhex
00032c  4607              MOV      r7,r0                 ;573
00032e  f898000f          LDRB     r0,[r8,#0xf]          ;573  ; bat_drv_rx_buff
000332  f7fffffe          BL       ascii2halFhex
000336  494a              LDR      r1,|L1.1120|
000338  eb071000          ADD      r0,r7,r0,LSL #4       ;573
00033c  b200              SXTH     r0,r0                 ;573
00033e  8008              STRH     r0,[r1,#0]            ;573
000340  b110              CBZ      r0,|L1.840|
000342  f1a00001          SUB      r0,r0,#1              ;574
000346  8008              STRH     r0,[r1,#0]            ;574
                  |L1.840|
000348  f9b10000          LDRSH    r0,[r1,#0]            ;575  ; numOfPacks_
00034c  2800              CMP      r0,#0                 ;575
00034e  da00              BGE      |L1.850|
000350  800c              STRH     r4,[r1,#0]            ;575
                  |L1.850|
000352  4a44              LDR      r2,|L1.1124|
000354  f9b10000          LDRSH    r0,[r1,#0]            ;576  ; numOfPacks_
000358  f9b22000          LDRSH    r2,[r2,#0]            ;576  ; NUMBAT
00035c  4290              CMP      r0,r2                 ;576
00035e  dd00              BLE      |L1.866|
000360  800c              STRH     r4,[r1,#0]            ;576
                  |L1.866|
000362  4a41              LDR      r2,|L1.1128|
000364  f9b11000          LDRSH    r1,[r1,#0]            ;577  ; numOfPacks_
000368  f04f0032          MOV      r0,#0x32              ;577
00036c  f8220011          STRH     r0,[r2,r1,LSL #1]     ;577
000370  483e              LDR      r0,|L1.1132|
000372  7800              LDRB     r0,[r0,#0]            ;579  ; zTTRequestPhase
000374  b110              CBZ      r0,|L1.892|
000376  2801              CMP      r0,#1                 ;580
000378  d10c              BNE      |L1.916|
00037a  e006              B        |L1.906|
                  |L1.892|
00037c  4831              LDR      r0,|L1.1092|
00037e  882a              LDRH     r2,[r5,#0]            ;579  ; bat_drv_rx_cnt
000380  492e              LDR      r1,|L1.1084|
000382  3896              SUBS     r0,r0,#0x96           ;579
000384  f7fffffe          BL       mem_copy
000388  e004              B        |L1.916|
                  |L1.906|
00038a  882a              LDRH     r2,[r5,#0]            ;580  ; bat_drv_rx_cnt
00038c  492b              LDR      r1,|L1.1084|
00038e  9800              LDR      r0,[sp,#0]            ;580
000390  f7fffffe          BL       mem_copy
                  |L1.916|
000394  481f              LDR      r0,|L1.1044|
000396  7d01              LDRB     r1,[r0,#0x14]         ;536
000398  07c9              LSLS     r1,r1,#31             ;536
00039a  f47faf7b          BNE      |L1.660|
00039e  e748              B        |L1.562|
                  |L1.928|
0003a0  6930              LDR      r0,[r6,#0x10]         ;590  ; UART0Status
0003a2  f4407080          ORR      r0,r0,#0x100          ;590
0003a6  6130              STR      r0,[r6,#0x10]         ;590  ; UART0Status
0003a8  e743              B        |L1.562|
                  |L1.938|
0003aa  7034              STRB     r4,[r6,#0]            ;611
0003ac  e741              B        |L1.562|
;;;615    
                          ENDP

                  uart_in_an0 PROC
;;;618    //-----------------------------------------------
;;;619    void uart_in_an0(void)
0003ae  b5f0              PUSH     {r4-r7,lr}
;;;620    {
0003b0  b089              SUB      sp,sp,#0x24
;;;621    
;;;622    
;;;623    
;;;624    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
0003b2  4c1e              LDR      r4,|L1.1068|
0003b4  2672              MOVS     r6,#0x72
0003b6  3c64              SUBS     r4,r4,#0x64
0003b8  2765              MOVS     r7,#0x65
0003ba  7820              LDRB     r0,[r4,#0]  ; UIB0
0003bc  2872              CMP      r0,#0x72
0003be  d17d              BNE      |L1.1212|
0003c0  7860              LDRB     r0,[r4,#1]  ; UIB0
0003c2  2865              CMP      r0,#0x65
0003c4  d17a              BNE      |L1.1212|
0003c6  78a0              LDRB     r0,[r4,#2]  ; UIB0
0003c8  2861              CMP      r0,#0x61
0003ca  d177              BNE      |L1.1212|
0003cc  78e0              LDRB     r0,[r4,#3]  ; UIB0
0003ce  2864              CMP      r0,#0x64
0003d0  d174              BNE      |L1.1212|
0003d2  2106              MOVS     r1,#6
0003d4  4620              MOV      r0,r4
0003d6  f7fffffe          BL       crc_87
0003da  79a1              LDRB     r1,[r4,#6]  ; UIB0
0003dc  4288              CMP      r0,r1
0003de  d16d              BNE      |L1.1212|
0003e0  2106              MOVS     r1,#6
0003e2  4620              MOV      r0,r4
0003e4  f7fffffe          BL       crc_95
0003e8  79e1              LDRB     r1,[r4,#7]  ; UIB0
0003ea  4288              CMP      r0,r1
0003ec  d166              BNE      |L1.1212|
;;;625    	{
;;;626    	unsigned short ptr;
;;;627    	unsigned long data1,data2;
;;;628    	char temp_out[20];
;;;629    	ptr=UIB0[4]+(UIB0[5]*256U);
0003ee  7920              LDRB     r0,[r4,#4]  ; UIB0
0003f0  7961              LDRB     r1,[r4,#5]  ; UIB0
0003f2  eb002001          ADD      r0,r0,r1,LSL #8
0003f6  b280              UXTH     r0,r0
0003f8  4605              MOV      r5,r0
0003fa  9008              STR      r0,[sp,#0x20]
;;;630    	data1=lc640_read_long(ptr);
0003fc  4628              MOV      r0,r5
0003fe  f7fffffe          BL       lc640_read_long
000402  9007              STR      r0,[sp,#0x1c]
;;;631    	data2=lc640_read_long(ptr+4);
000404  1d28              ADDS     r0,r5,#4
000406  e033              B        |L1.1136|
                  |L1.1032|
                          DCD      Table87
                  |L1.1036|
                          DCD      Table95
                  |L1.1040|
                          DCD      ||.data||
                  |L1.1044|
                          DCD      0x4000c000
                  |L1.1048|
                          DCD      ||.bss||+0x464
                  |L1.1052|
                          DCD      0x4002c000
                  |L1.1056|
                          DCD      0x400fc000
                  |L1.1060|
                          DCD      SystemFrequency
                  |L1.1064|
                          DCD      0x40010000
                  |L1.1068|
                          DCD      ||.bss||+0x64
                  |L1.1072|
                          DCD      plazma_bat_drv1
                  |L1.1076|
                          DCD      plazma_bat_drv0
                  |L1.1080|
                          DCD      modbus_plazma
                  |L1.1084|
                          DCD      bat_drv_rx_buff
                  |L1.1088|
                          DCD      bat_drv_rx_cnt
                  |L1.1092|
                          DCD      liBatteryInBuff+0x96
                  |L1.1096|
                          DCD      modbus_rx_buffer
                  |L1.1100|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1104|
                          DCD      modbus_timeout_cnt
                  |L1.1108|
                          DCD      BAT_TYPE
                  |L1.1112|
                          DCD      sacredSunRequestPhase
                  |L1.1116|
                          DCD      sacredSunSilentCnt
                  |L1.1120|
                          DCD      numOfPacks_
                  |L1.1124|
                          DCD      NUMBAT
                  |L1.1128|
                          DCD      zTTSilentCnt
                  |L1.1132|
                          DCD      zTTRequestPhase
                  |L1.1136|
000470  f7fffffe          BL       lc640_read_long
000474  9006              STR      r0,[sp,#0x18]
;;;632    	temp_out[0]='r';
000476  f88d6004          STRB     r6,[sp,#4]
;;;633    	temp_out[1]='e';
00047a  f88d7005          STRB     r7,[sp,#5]
;;;634    	temp_out[2]='a';
00047e  f04f0061          MOV      r0,#0x61
000482  f88d0006          STRB     r0,[sp,#6]
;;;635    	temp_out[3]='d';
000486  f04f0064          MOV      r0,#0x64
00048a  f88d0007          STRB     r0,[sp,#7]
;;;636    	temp_out[4]=*((char*)&ptr);
00048e  f89d0020          LDRB     r0,[sp,#0x20]
000492  f88d0008          STRB     r0,[sp,#8]
;;;637    	temp_out[5]=*(((char*)&ptr)+1);	
000496  f89d0021          LDRB     r0,[sp,#0x21]
00049a  f88d0009          STRB     r0,[sp,#9]
;;;638    	temp_out[6]=*((char*)&data1);
00049e  f89d001c          LDRB     r0,[sp,#0x1c]
0004a2  f88d000a          STRB     r0,[sp,#0xa]
;;;639    	temp_out[7]=*(((char*)&data1)+1);		
0004a6  f89d001d          LDRB     r0,[sp,#0x1d]
0004aa  f88d000b          STRB     r0,[sp,#0xb]
;;;640    	temp_out[8]=*(((char*)&data1)+2);	
0004ae  f89d001e          LDRB     r0,[sp,#0x1e]
0004b2  f88d000c          STRB     r0,[sp,#0xc]
;;;641    	temp_out[9]=*(((char*)&data1)+3);		
0004b6  f89d001f          LDRB     r0,[sp,#0x1f]
0004ba  e000              B        |L1.1214|
                  |L1.1212|
0004bc  e022              B        |L1.1284|
                  |L1.1214|
0004be  f88d000d          STRB     r0,[sp,#0xd]
;;;642    	temp_out[10]=*((char*)&data2);
0004c2  f89d0018          LDRB     r0,[sp,#0x18]
0004c6  f88d000e          STRB     r0,[sp,#0xe]
;;;643    	temp_out[11]=*(((char*)&data2)+1);		
0004ca  f89d0019          LDRB     r0,[sp,#0x19]
0004ce  f88d000f          STRB     r0,[sp,#0xf]
;;;644    	temp_out[12]=*(((char*)&data2)+2);	
0004d2  f89d001a          LDRB     r0,[sp,#0x1a]
0004d6  f88d0010          STRB     r0,[sp,#0x10]
;;;645    	temp_out[13]=*(((char*)&data2)+3);	
0004da  f89d001b          LDRB     r0,[sp,#0x1b]
0004de  f88d0011          STRB     r0,[sp,#0x11]
;;;646    	temp_out[14]=crc_87(temp_out,14);	
0004e2  f04f010e          MOV      r1,#0xe
0004e6  a801              ADD      r0,sp,#4
0004e8  f7fffffe          BL       crc_87
0004ec  f88d0012          STRB     r0,[sp,#0x12]
;;;647    	temp_out[15]=crc_95(temp_out,14);			
0004f0  210e              MOVS     r1,#0xe
0004f2  a801              ADD      r0,sp,#4
0004f4  f7fffffe          BL       crc_95
0004f8  f88d0013          STRB     r0,[sp,#0x13]
;;;648    	uart_out_adr0(temp_out,16);
0004fc  2110              MOVS     r1,#0x10
0004fe  a801              ADD      r0,sp,#4
000500  f7fffffe          BL       uart_out_adr0
                  |L1.1284|
;;;649    	}
;;;650    
;;;651    
;;;652    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
000504  7820              LDRB     r0,[r4,#0]  ; UIB0
000506  2877              CMP      r0,#0x77
000508  d169              BNE      |L1.1502|
00050a  7860              LDRB     r0,[r4,#1]  ; UIB0
00050c  2872              CMP      r0,#0x72
00050e  d166              BNE      |L1.1502|
000510  78a0              LDRB     r0,[r4,#2]  ; UIB0
000512  2869              CMP      r0,#0x69
000514  d163              BNE      |L1.1502|
000516  78e0              LDRB     r0,[r4,#3]  ; UIB0
000518  2874              CMP      r0,#0x74
00051a  d160              BNE      |L1.1502|
00051c  7920              LDRB     r0,[r4,#4]  ; UIB0
00051e  2865              CMP      r0,#0x65
000520  d15d              BNE      |L1.1502|
000522  210f              MOVS     r1,#0xf
000524  4878              LDR      r0,|L1.1800|
000526  f7fffffe          BL       crc_87
00052a  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
00052c  4288              CMP      r0,r1
00052e  d156              BNE      |L1.1502|
000530  210f              MOVS     r1,#0xf
000532  4875              LDR      r0,|L1.1800|
000534  f7fffffe          BL       crc_95
000538  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
00053a  4288              CMP      r0,r1
00053c  d14f              BNE      |L1.1502|
;;;653    	{
;;;654    	unsigned short ptr;
;;;655    	unsigned long data1,data2;
;;;656    	char temp_out[20];
;;;657    	ptr=UIB0[5]+(UIB0[6]*256U);
00053e  7960              LDRB     r0,[r4,#5]  ; UIB0
000540  79a1              LDRB     r1,[r4,#6]  ; UIB0
000542  eb002001          ADD      r0,r0,r1,LSL #8
000546  b280              UXTH     r0,r0
000548  4605              MOV      r5,r0
00054a  9008              STR      r0,[sp,#0x20]
;;;658    	*((char*)&data1)=UIB0[7];
00054c  79e0              LDRB     r0,[r4,#7]  ; UIB0
00054e  f88d001c          STRB     r0,[sp,#0x1c]
;;;659    	*(((char*)&data1)+1)=UIB0[8];
000552  7a20              LDRB     r0,[r4,#8]  ; UIB0
000554  f88d001d          STRB     r0,[sp,#0x1d]
;;;660    	*(((char*)&data1)+2)=UIB0[9];
000558  7a60              LDRB     r0,[r4,#9]  ; UIB0
00055a  f88d001e          STRB     r0,[sp,#0x1e]
;;;661    	*(((char*)&data1)+3)=UIB0[10];
00055e  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
000560  f88d001f          STRB     r0,[sp,#0x1f]
;;;662    	*((char*)&data2)=UIB0[11];
000564  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
000566  f88d0018          STRB     r0,[sp,#0x18]
;;;663    	*(((char*)&data2)+1)=UIB0[12];
00056a  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
00056c  f88d0019          STRB     r0,[sp,#0x19]
;;;664    	*(((char*)&data2)+2)=UIB0[13];
000570  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
000572  f88d001a          STRB     r0,[sp,#0x1a]
;;;665    	*(((char*)&data2)+3)=UIB0[14];	
000576  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
000578  f88d001b          STRB     r0,[sp,#0x1b]
;;;666    	lc640_write_long(ptr,data1);
00057c  4628              MOV      r0,r5
00057e  9907              LDR      r1,[sp,#0x1c]
000580  f7fffffe          BL       lc640_write_long
;;;667    	lc640_write_long(ptr+4,data2);
000584  1d28              ADDS     r0,r5,#4
000586  9906              LDR      r1,[sp,#0x18]
000588  f7fffffe          BL       lc640_write_long
;;;668    	
;;;669    	//data1=lc640_read_long(ptr);
;;;670    	//data2=lc640_read_long(ptr+4);
;;;671    	temp_out[0]='w';
00058c  f04f0077          MOV      r0,#0x77
000590  f88d0004          STRB     r0,[sp,#4]
;;;672    	temp_out[1]='r';
000594  f88d6005          STRB     r6,[sp,#5]
;;;673    	temp_out[2]='i';
000598  f04f0069          MOV      r0,#0x69
00059c  f88d0006          STRB     r0,[sp,#6]
;;;674    	temp_out[3]='t';
0005a0  f04f0074          MOV      r0,#0x74
0005a4  f88d0007          STRB     r0,[sp,#7]
;;;675    	temp_out[4]='e';
0005a8  f88d7008          STRB     r7,[sp,#8]
;;;676    	temp_out[5]=*((char*)&ptr);
0005ac  f89d0020          LDRB     r0,[sp,#0x20]
0005b0  f88d0009          STRB     r0,[sp,#9]
;;;677    	temp_out[6]=*(((char*)&ptr)+1);	
0005b4  f89d0021          LDRB     r0,[sp,#0x21]
0005b8  f88d000a          STRB     r0,[sp,#0xa]
;;;678    	/*temp_out[6]=*((char*)&data1);
;;;679    	temp_out[7]=*(((char*)&data1)+1);		
;;;680    	temp_out[8]=*(((char*)&data1)+2);	
;;;681    	temp_out[9]=*(((char*)&data1)+3);		
;;;682    	temp_out[10]=*((char*)&data2);
;;;683    	temp_out[11]=*(((char*)&data2)+1);		
;;;684    	temp_out[12]=*(((char*)&data2)+2);	
;;;685    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;686    	temp_out[7]=crc_87(temp_out,7);	
0005bc  f04f0107          MOV      r1,#7
0005c0  a801              ADD      r0,sp,#4
0005c2  f7fffffe          BL       crc_87
0005c6  f88d000b          STRB     r0,[sp,#0xb]
;;;687    	temp_out[8]=crc_95(temp_out,7);			
0005ca  2107              MOVS     r1,#7
0005cc  a801              ADD      r0,sp,#4
0005ce  f7fffffe          BL       crc_95
0005d2  f88d000c          STRB     r0,[sp,#0xc]
;;;688    	uart_out_adr0(temp_out,9);
0005d6  2109              MOVS     r1,#9
0005d8  a801              ADD      r0,sp,#4
0005da  f7fffffe          BL       uart_out_adr0
                  |L1.1502|
;;;689    	}
;;;690    
;;;691    }
0005de  b009              ADD      sp,sp,#0x24
0005e0  bdf0              POP      {r4-r7,pc}
;;;692    
                          ENDP

                  index_offset0 PROC
;;;695    //-----------------------------------------------
;;;696    signed short index_offset0 (signed short index,signed short offset)
0005e2  4408              ADD      r0,r0,r1
;;;697    {
;;;698    index=index+offset;
0005e4  b200              SXTH     r0,r0
;;;699    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
0005e6  f5b06f80          CMP      r0,#0x400
0005ea  db02              BLT      |L1.1522|
0005ec  f5a06080          SUB      r0,r0,#0x400
0005f0  b200              SXTH     r0,r0
                  |L1.1522|
;;;700    if(index<0) index+=RX_BUFFER_SIZE0;
0005f2  2800              CMP      r0,#0
0005f4  da02              BGE      |L1.1532|
0005f6  f5006080          ADD      r0,r0,#0x400
0005fa  b200              SXTH     r0,r0
                  |L1.1532|
;;;701    return index;
;;;702    }
0005fc  4770              BX       lr
;;;703    
                          ENDP

                  control_check0 PROC
;;;704    //-----------------------------------------------
;;;705    char control_check0(signed short index)
0005fe  b570              PUSH     {r4-r6,lr}
;;;706    {
000600  4606              MOV      r6,r0
;;;707    char i=0,ii=0,iii;
000602  f04f0200          MOV      r2,#0
;;;708    
;;;709    if(rx_buffer0[index]!=END) goto error_cc;
000606  4d40              LDR      r5,|L1.1800|
000608  f1050564          ADD      r5,r5,#0x64
00060c  5da8              LDRB     r0,[r5,r6]
00060e  280a              CMP      r0,#0xa
000610  d11e              BNE      |L1.1616|
;;;710    
;;;711    ii=rx_buffer0[index_offset0(index,-2)];
000612  1e91              SUBS     r1,r2,#2
000614  4630              MOV      r0,r6
000616  f7fffffe          BL       index_offset0
00061a  5c2c              LDRB     r4,[r5,r0]
;;;712    iii=0;
00061c  f04f0300          MOV      r3,#0
;;;713    for(i=0;i<=ii;i++)
000620  e00a              B        |L1.1592|
                  |L1.1570|
;;;714    	{
;;;715    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
000622  1b11              SUBS     r1,r2,r4
000624  1e89              SUBS     r1,r1,#2
000626  4630              MOV      r0,r6
000628  f7fffffe          BL       index_offset0
00062c  5c28              LDRB     r0,[r5,r0]
00062e  ea800303          EOR      r3,r0,r3
000632  f1020201          ADD      r2,r2,#1              ;713
000636  b2d2              UXTB     r2,r2                 ;713
                  |L1.1592|
000638  42a2              CMP      r2,r4                 ;713
00063a  d9f2              BLS      |L1.1570|
;;;716    	}
;;;717    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
00063c  f04f31ff          MOV      r1,#0xffffffff
000640  4630              MOV      r0,r6
000642  f7fffffe          BL       index_offset0
000646  5c28              LDRB     r0,[r5,r0]
000648  4298              CMP      r0,r3
00064a  d101              BNE      |L1.1616|
;;;718    
;;;719    
;;;720    //success_cc:
;;;721    return 1;
00064c  2001              MOVS     r0,#1
;;;722    error_cc:
;;;723    return 0;
;;;724    
;;;725    }
00064e  bd70              POP      {r4-r6,pc}
                  |L1.1616|
000650  2000              MOVS     r0,#0                 ;723
000652  bd70              POP      {r4-r6,pc}
;;;726    
                          ENDP

                  uart_in0 PROC
;;;727    //-----------------------------------------------
;;;728    void uart_in0(void)
000654  e92d41f0          PUSH     {r4-r8,lr}
;;;729    {
;;;730    char temp,i/*,count*/;
;;;731    
;;;732    //__disable_irq();
;;;733    
;;;734    if(rx_buffer_overflow0)
000658  4d2c              LDR      r5,|L1.1804|
00065a  2600              MOVS     r6,#0
00065c  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
00065e  b118              CBZ      r0,|L1.1640|
;;;735    	{
;;;736    	rx_wr_index0=0;
000660  80ae              STRH     r6,[r5,#4]
;;;737    	rx_rd_index0=0;
000662  80ee              STRH     r6,[r5,#6]
;;;738    	rx_counter0=0;
000664  812e              STRH     r6,[r5,#8]
;;;739    	rx_buffer_overflow0=0;
000666  70ae              STRB     r6,[r5,#2]
                  |L1.1640|
;;;740    	}    
;;;741    	
;;;742    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
000668  8928              LDRH     r0,[r5,#8]  ; rx_counter0
00066a  2800              CMP      r0,#0
00066c  d03a              BEQ      |L1.1764|
00066e  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000670  f04f32ff          MOV      r2,#0xffffffff
000674  4611              MOV      r1,r2
000676  b200              SXTH     r0,r0
000678  f7fffffe          BL       index_offset0
00067c  4f22              LDR      r7,|L1.1800|
00067e  3764              ADDS     r7,r7,#0x64
000680  5c38              LDRB     r0,[r7,r0]
000682  280a              CMP      r0,#0xa
000684  d12e              BNE      |L1.1764|
;;;743    	{
;;;744    	
;;;745         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
000686  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000688  f06f0102          MVN      r1,#2
00068c  b200              SXTH     r0,r0
00068e  f7fffffe          BL       index_offset0
000692  5c3c              LDRB     r4,[r7,r0]
;;;746        	if(temp<100) 
000694  2c64              CMP      r4,#0x64
000696  d225              BCS      |L1.1764|
;;;747        		{
;;;748        		if(control_check0(index_offset0(rx_wr_index0,-1)))
000698  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00069a  4611              MOV      r1,r2
00069c  b200              SXTH     r0,r0
00069e  f7fffffe          BL       index_offset0
0006a2  f7fffffe          BL       control_check0
0006a6  2800              CMP      r0,#0
0006a8  d01c              BEQ      |L1.1764|
;;;749        			{
;;;750        		
;;;751        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
0006aa  1ce0              ADDS     r0,r4,#3
0006ac  4241              RSBS     r1,r0,#0
0006ae  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0006b0  b200              SXTH     r0,r0
0006b2  f7fffffe          BL       index_offset0
0006b6  80e8              STRH     r0,[r5,#6]
;;;752        			for(i=0;i<temp;i++)
0006b8  f04f0200          MOV      r2,#0
;;;753    				{
;;;754    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
0006bc  4b12              LDR      r3,|L1.1800|
0006be  e009              B        |L1.1748|
                  |L1.1728|
0006c0  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
0006c2  4611              MOV      r1,r2
0006c4  b200              SXTH     r0,r0
0006c6  f7fffffe          BL       index_offset0
0006ca  5c38              LDRB     r0,[r7,r0]
0006cc  5498              STRB     r0,[r3,r2]
0006ce  f1020201          ADD      r2,r2,#1              ;752
0006d2  b2d2              UXTB     r2,r2                 ;752
                  |L1.1748|
0006d4  42a2              CMP      r2,r4                 ;752
0006d6  d3f3              BCC      |L1.1728|
;;;755    				} 
;;;756    			rx_rd_index0=rx_wr_index0;
0006d8  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0006da  80e8              STRH     r0,[r5,#6]
;;;757    			rx_counter0=0;
0006dc  812e              STRH     r6,[r5,#8]
;;;758    			
;;;759    			uart_in_an0();
0006de  e8bd41f0          POP      {r4-r8,lr}
0006e2  e7fe              B        uart_in_an0
                  |L1.1764|
;;;760        			}
;;;761     	
;;;762        		} 
;;;763        	}	
;;;764    
;;;765    
;;;766    //__enable_irq();     
;;;767    }   	
0006e4  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0006e8  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
0006ec  f04f0101          MOV      r1,#1
0006f0  fa01f102          LSL      r1,r1,r2
0006f4  ea4f1050          LSR      r0,r0,#5
0006f8  f04f22e0          MOV      r2,#0xe000e000
0006fc  eb020080          ADD      r0,r2,r0,LSL #2
000700  f8c01100          STR      r1,[r0,#0x100]
;;;1099   }
000704  4770              BX       lr
;;;1100   
                          ENDP

000706  0000              DCW      0x0000
                  |L1.1800|
                          DCD      ||.bss||
                  |L1.1804|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;82     
;;;83     for(j=1;j<num;j++)
000004  cde0              LDM      r5,{r5-r7}
000006  f04f0400          MOV      r4,#0
00000a  f88d1000          STRB     r1,[sp,#0]
;;;84     	{
;;;85          ptr++;
00000e  f88d2001          STRB     r2,[sp,#1]
;;;86     	r=((*ptr)^Table87[r]);
000012  f88d3002          STRB     r3,[sp,#2]
000016  f88d5003          STRB     r5,[sp,#3]
00001a  f88d6004          STRB     r6,[sp,#4]            ;83
00001e  f88d7005          STRB     r7,[sp,#5]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
000022  4621              MOV      r1,r4
;;;90     } 
000024  466d              MOV      r5,sp
000026  e005              B        |L2.52|
                  |L2.40|
000028  5c6a              LDRB     r2,[r5,r1]
00002a  ea820404          EOR      r4,r2,r4
00002e  f1010101          ADD      r1,r1,#1
000032  b2c9              UXTB     r1,r1
                  |L2.52|
000034  4281              CMP      r1,r0
000036  d3f7              BCC      |L2.40|
000038  5428              STRB     r0,[r5,r0]
00003a  ea800204          EOR      r2,r0,r4
00003e  eb050100          ADD      r1,r5,r0
000042  704a              STRB     r2,[r1,#1]
000044  f04f020a          MOV      r2,#0xa
000048  708a              STRB     r2,[r1,#2]
00004a  f04f0400          MOV      r4,#0
00004e  f1000603          ADD      r6,r0,#3
000052  e005              B        |L2.96|
                  |L2.84|
000054  5d28              LDRB     r0,[r5,r4]
000056  f7fffffe          BL       putchar0
00005a  f1040401          ADD      r4,r4,#1
00005e  b2e4              UXTB     r4,r4
                  |L2.96|
000060  42b4              CMP      r4,r6
000062  d3f7              BCC      |L2.84|
000064  bdff              POP      {r0-r7,pc}
;;;91     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out_buff0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  460d              MOV      r5,r1
000006  f04f0200          MOV      r2,#0
00000a  466e              MOV      r6,sp
;;;84     	{
;;;85          ptr++;
00000c  e004              B        |L3.24|
                  |L3.14|
00000e  5c81              LDRB     r1,[r0,r2]
;;;86     	r=((*ptr)^Table87[r]);
000010  54b1              STRB     r1,[r6,r2]
000012  f1020201          ADD      r2,r2,#1
000016  b2d2              UXTB     r2,r2
                  |L3.24|
000018  42aa              CMP      r2,r5                 ;83
00001a  d3f8              BCC      |L3.14|
00001c  f04f0400          MOV      r4,#0                 ;83
000020  e005              B        |L3.46|
                  |L3.34|
;;;87     	}
;;;88     
;;;89     return r;	
000022  5d30              LDRB     r0,[r6,r4]
;;;90     } 
000024  f7fffffe          BL       putchar0
000028  f1040401          ADD      r4,r4,#1
00002c  b2e4              UXTB     r4,r4
                  |L3.46|
00002e  42ac              CMP      r4,r5
000030  d3f7              BCC      |L3.34|
000032  b00f              ADD      sp,sp,#0x3c
000034  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  uart_out_adr_block PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b09a              SUB      sp,sp,#0x68
;;;82     
;;;83     for(j=1;j<num;j++)
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  f04f0164          MOV      r1,#0x64
00000c  a801              ADD      r0,sp,#4              ;85
00000e  f7fffffe          BL       __aeabi_memclr4
000012  f04f0016          MOV      r0,#0x16
000016  f7fffffe          BL       putchar0
00001a  f04f000a          MOV      r0,#0xa               ;83
00001e  f7fffffe          BL       putchar0
;;;87     	}
;;;88     
;;;89     return r;	
000022  f89d0068          LDRB     r0,[sp,#0x68]
;;;90     } 
000026  f080051c          EOR      r5,r0,#0x1c
00002a  f7fffffe          BL       putchar0
00002e  f89d0069          LDRB     r0,[sp,#0x69]
000032  ea850500          EOR      r5,r5,r0
000036  f7fffffe          BL       putchar0
00003a  f89d006a          LDRB     r0,[sp,#0x6a]
00003e  ea850500          EOR      r5,r5,r0
000042  f7fffffe          BL       putchar0
000046  f89d006b          LDRB     r0,[sp,#0x6b]
00004a  ea850500          EOR      r5,r5,r0
00004e  f7fffffe          BL       putchar0
000052  f04f0400          MOV      r4,#0
000056  e006              B        |L4.102|
                  |L4.88|
000058  5d38              LDRB     r0,[r7,r4]
00005a  ea850500          EOR      r5,r5,r0
00005e  f7fffffe          BL       putchar0
000062  f1040401          ADD      r4,r4,#1
                  |L4.102|
000066  42b4              CMP      r4,r6
000068  d3f6              BCC      |L4.88|
00006a  f1060606          ADD      r6,r6,#6
00006e  b2f0              UXTB     r0,r6
000070  ea850500          EOR      r5,r5,r0
000074  f7fffffe          BL       putchar0
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       putchar0
00007e  b01d              ADD      sp,sp,#0x74
000080  200a              MOVS     r0,#0xa
000082  e8bd40f0          POP      {r4-r7,lr}
000086  f7ffbffe          B.W      putchar0
;;;91     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  rs232_data_out_1 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  481e              LDR      r0,|L5.128|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  481d              LDR      r0,|L5.132|
00000e  7800              LDRB     r0,[r0,#0]            ;85  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481c              LDR      r0,|L5.136|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
00001c  481b              LDR      r0,|L5.140|
00001e  8800              LDRH     r0,[r0,#0]            ;83  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
000024  481a              LDR      r0,|L5.144|
000026  8800              LDRH     r0,[r0,#0]  ; net_U
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  4819              LDR      r0,|L5.148|
00002e  8800              LDRH     r0,[r0,#0]  ; net_F
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  4818              LDR      r0,|L5.152|
000036  8800              LDRH     r0,[r0,#0]  ; t_ext
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  4817              LDR      r0,|L5.156|
00003e  6801              LDR      r1,[r0,#0]  ; bps
000040  f8ad100e          STRH     r1,[sp,#0xe]
000044  6881              LDR      r1,[r0,#8]  ; bps
000046  f8ad1010          STRH     r1,[sp,#0x10]
00004a  68c1              LDR      r1,[r0,#0xc]  ; bps
00004c  f8ad1012          STRH     r1,[sp,#0x12]
000050  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000054  f8ad1014          STRH     r1,[sp,#0x14]
000058  6e41              LDR      r1,[r0,#0x64]  ; bps
00005a  f8ad1016          STRH     r1,[sp,#0x16]
00005e  6ec1              LDR      r1,[r0,#0x6c]  ; bps
000060  f8ad1018          STRH     r1,[sp,#0x18]
000064  6f01              LDR      r1,[r0,#0x70]  ; bps
000066  f8ad101a          STRH     r1,[sp,#0x1a]
00006a  f8900049          LDRB     r0,[r0,#0x49]  ; bps
00006e  f8ad001c          STRH     r0,[sp,#0x1c]
000072  211e              MOVS     r1,#0x1e
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       uart_out_adr0
00007a  b00f              ADD      sp,sp,#0x3c
00007c  bd00              POP      {pc}
;;;91     
                          ENDP

00007e  0000              DCW      0x0000
                  |L5.128|
                          DCD      avar_stat
                  |L5.132|
                          DCD      spc_stat
                  |L5.136|
                          DCD      load_U
                  |L5.140|
                          DCD      load_I
                  |L5.144|
                          DCD      net_U
                  |L5.148|
                          DCD      net_F
                  |L5.152|
                          DCD      t_ext
                  |L5.156|
                          DCD      bps+0x1c

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  rs232_data_out PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  4822              LDR      r0,|L6.144|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4821              LDR      r0,|L6.148|
00000e  7800              LDRB     r0,[r0,#0]            ;85  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4820              LDR      r0,|L6.152|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
00001c  481f              LDR      r0,|L6.156|
00001e  8800              LDRH     r0,[r0,#0]            ;83  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
000024  481e              LDR      r0,|L6.160|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  481d              LDR      r0,|L6.164|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  481c              LDR      r0,|L6.168|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  481b              LDR      r0,|L6.172|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  481a              LDR      r0,|L6.176|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  4819              LDR      r0,|L6.180|
00004e  6801              LDR      r1,[r0,#0]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6881              LDR      r1,[r0,#8]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  68c1              LDR      r1,[r0,#0xc]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000064  f8ad1018          STRH     r1,[sp,#0x18]
000068  6e41              LDR      r1,[r0,#0x64]  ; bps
00006a  f8ad101a          STRH     r1,[sp,#0x1a]
00006e  6ec1              LDR      r1,[r0,#0x6c]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  6f01              LDR      r1,[r0,#0x70]  ; bps
000076  f8ad101e          STRH     r1,[sp,#0x1e]
00007a  f8900049          LDRB     r0,[r0,#0x49]  ; bps
00007e  f8ad0020          STRH     r0,[sp,#0x20]
000082  2122              MOVS     r1,#0x22
000084  4668              MOV      r0,sp
000086  f7fffffe          BL       uart_out_adr0
00008a  b00f              ADD      sp,sp,#0x3c
00008c  bd00              POP      {pc}
;;;91     
                          ENDP

00008e  0000              DCW      0x0000
                  |L6.144|
                          DCD      avar_stat
                  |L6.148|
                          DCD      spc_stat
                  |L6.152|
                          DCD      load_U
                  |L6.156|
                          DCD      load_I
                  |L6.160|
                          DCD      net_Ua
                  |L6.164|
                          DCD      net_Ub
                  |L6.168|
                          DCD      net_Uc
                  |L6.172|
                          DCD      net_F3
                  |L6.176|
                          DCD      t_ext
                  |L6.180|
                          DCD      bps+0x1c

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  rs232_data_out_tki PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  4834              LDR      r0,|L7.216|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4833              LDR      r0,|L7.220|
00000e  7800              LDRB     r0,[r0,#0]            ;85  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4832              LDR      r0,|L7.224|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
00001c  4831              LDR      r0,|L7.228|
00001e  8800              LDRH     r0,[r0,#0]            ;83  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
000024  4830              LDR      r0,|L7.232|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  482f              LDR      r0,|L7.236|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  482e              LDR      r0,|L7.240|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  482d              LDR      r0,|L7.244|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  482c              LDR      r0,|L7.248|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  482b              LDR      r0,|L7.252|
00004e  6801              LDR      r1,[r0,#0]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6881              LDR      r1,[r0,#8]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  68c1              LDR      r1,[r0,#0xc]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000064  f8ad1018          STRH     r1,[sp,#0x18]
000068  6e41              LDR      r1,[r0,#0x64]  ; bps
00006a  f8ad101a          STRH     r1,[sp,#0x1a]
00006e  6ec1              LDR      r1,[r0,#0x6c]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  6f01              LDR      r1,[r0,#0x70]  ; bps
000076  f8ad101e          STRH     r1,[sp,#0x1e]
00007a  f8901049          LDRB     r1,[r0,#0x49]  ; bps
00007e  f8ad1020          STRH     r1,[sp,#0x20]
000082  f8d010c8          LDR      r1,[r0,#0xc8]  ; bps
000086  f8ad1022          STRH     r1,[sp,#0x22]
00008a  f8d010d0          LDR      r1,[r0,#0xd0]  ; bps
00008e  f8ad1024          STRH     r1,[sp,#0x24]
000092  f8d010d4          LDR      r1,[r0,#0xd4]  ; bps
000096  f8ad1026          STRH     r1,[sp,#0x26]
00009a  f89010ad          LDRB     r1,[r0,#0xad]  ; bps
00009e  f8ad1028          STRH     r1,[sp,#0x28]
0000a2  f8d0112c          LDR      r1,[r0,#0x12c]  ; bps
0000a6  f8ad102a          STRH     r1,[sp,#0x2a]
0000aa  f8d01134          LDR      r1,[r0,#0x134]  ; bps
0000ae  f8ad102c          STRH     r1,[sp,#0x2c]
0000b2  f8d01138          LDR      r1,[r0,#0x138]  ; bps
0000b6  f8ad102e          STRH     r1,[sp,#0x2e]
0000ba  f8900111          LDRB     r0,[r0,#0x111]  ; bps
0000be  f8ad0030          STRH     r0,[sp,#0x30]
0000c2  480f              LDR      r0,|L7.256|
0000c4  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0000c6  f8ad0032          STRH     r0,[sp,#0x32]
0000ca  2134              MOVS     r1,#0x34
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       uart_out_adr0
0000d2  b00f              ADD      sp,sp,#0x3c
0000d4  bd00              POP      {pc}
;;;91     
                          ENDP

0000d6  0000              DCW      0x0000
                  |L7.216|
                          DCD      avar_stat
                  |L7.220|
                          DCD      spc_stat
                  |L7.224|
                          DCD      load_U
                  |L7.228|
                          DCD      load_I
                  |L7.232|
                          DCD      net_Ua
                  |L7.236|
                          DCD      net_Ub
                  |L7.240|
                          DCD      net_Uc
                  |L7.244|
                          DCD      net_F3
                  |L7.248|
                          DCD      t_ext
                  |L7.252|
                          DCD      bps+0x1c
                  |L7.256|
                          DCD      Ib_ips_termokompensat

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  getchar0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  4b09              LDR      r3,|L8.40|
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  8919              LDRH     r1,[r3,#8]
                  |L8.4|
;;;82     
;;;83     for(j=1;j<num;j++)
000004  2900              CMP      r1,#0
000006  d0fd              BEQ      |L8.4|
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  4808              LDR      r0,|L8.44|
00000a  88da              LDRH     r2,[r3,#6]            ;83  ; rx_rd_index0
00000c  5c80              LDRB     r0,[r0,r2]            ;85
00000e  1c52              ADDS     r2,r2,#1              ;85
000010  b292              UXTH     r2,r2
000012  80da              STRH     r2,[r3,#6]
000014  f5b26f80          CMP      r2,#0x400
000018  d102              BNE      |L8.32|
00001a  f04f0200          MOV      r2,#0                 ;83
00001e  80da              STRH     r2,[r3,#6]            ;83
                  |L8.32|
000020  f1a10101          SUB      r1,r1,#1              ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
000024  8119              STRH     r1,[r3,#8]
000026  4770              BX       lr
;;;91     
                          ENDP

                  |L8.40|
                          DCD      ||.data||
                  |L8.44|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.14||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  flag0
000000  00                DCB      0x00
