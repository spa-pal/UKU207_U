; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\ad7705.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\ad7705.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\ad7705.crf ad7705.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi1_ad7705_config PROC
;;;16     //настройка SPI1
;;;17     void spi1_ad7705_config(void)
000000  488e              LDR      r0,|L1.572|
;;;18     {
;;;19     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0414140          ORR      r1,r1,#0xc0000000
000008  6001              STR      r1,[r0,#0]
;;;20     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
00000a  6841              LDR      r1,[r0,#4]
00000c  f0210103          BIC      r1,r1,#3
000010  6041              STR      r1,[r0,#4]
;;;21     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f041010c          ORR      r1,r1,#0xc
000018  6041              STR      r1,[r0,#4]
;;;22     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
00001a  6841              LDR      r1,[r0,#4]
00001c  f0410130          ORR      r1,r1,#0x30
000020  6041              STR      r1,[r0,#4]
;;;23     /*
;;;24     S1SPCCR=100;
;;;25     S1SPCR=0x3f; */
;;;26     
;;;27     
;;;28     LPC_SPI->SPCCR=20;
000022  4887              LDR      r0,|L1.576|
000024  f04f0114          MOV      r1,#0x14
000028  60c1              STR      r1,[r0,#0xc]
;;;29     LPC_SPI->SPCR=0x38;
00002a  f04f0138          MOV      r1,#0x38
00002e  6001              STR      r1,[r0,#0]
;;;30     }
000030  4770              BX       lr
;;;31     //-----------------------------------------------
                          ENDP

                  ad7705_reset PROC
;;;32     void ad7705_reset(void)
000032  4984              LDR      r1,|L1.580|
;;;33     {
;;;34     //short i;
;;;35     ///IO1DIR|=(1UL<<23);
;;;36     LPC_GPIO2->FIODIR|=(1<<13);
000034  6c08              LDR      r0,[r1,#0x40]
000036  f4405000          ORR      r0,r0,#0x2000
00003a  6408              STR      r0,[r1,#0x40]
;;;37     ///IO1CLR|=(1UL<<23);
;;;38     LPC_GPIO2->FIOCLR|=(1<<13);
00003c  6dc8              LDR      r0,[r1,#0x5c]
00003e  f4405000          ORR      r0,r0,#0x2000
000042  65c8              STR      r0,[r1,#0x5c]
;;;39     delay_ms(10);
000044  4880              LDR      r0,|L1.584|
                  |L1.70|
000046  f1a00001          SUB      r0,r0,#1
00004a  2800              CMP      r0,#0
00004c  d1fb              BNE      |L1.70|
;;;40     ///IO1SET|=(1UL<<23);
;;;41     LPC_GPIO2->FIOPIN|=(1<<13);
00004e  6d48              LDR      r0,[r1,#0x54]
000050  f4405000          ORR      r0,r0,#0x2000
000054  6548              STR      r0,[r1,#0x54]
;;;42     }
000056  4770              BX       lr
;;;43     
                          ENDP

                  ad7705_write PROC
;;;44     //-----------------------------------------------
;;;45     void ad7705_write(char in)
000058  b510              PUSH     {r4,lr}
;;;46     {
00005a  4603              MOV      r3,r0
;;;47     char i;
;;;48     ///IO0DIR|=(1UL<<11);
;;;49     LPC_GPIO0->FIODIR|=(1UL<<11);
00005c  4c79              LDR      r4,|L1.580|
00005e  6820              LDR      r0,[r4,#0]
000060  f4406000          ORR      r0,r0,#0x800
000064  6020              STR      r0,[r4,#0]
;;;50     //IO0SET|=(1UL<<11);
;;;51     LPC_GPIO0->FIOPIN|=(1UL<<11);
000066  6960              LDR      r0,[r4,#0x14]
000068  f4406000          ORR      r0,r0,#0x800
00006c  6160              STR      r0,[r4,#0x14]
;;;52     spi1_ad7705_config();
00006e  f7fffffe          BL       spi1_ad7705_config
;;;53     ///IO0CLR|=(1UL<<11);
;;;54     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
000072  f04f0100          MOV      r1,#0
                  |L1.118|
000076  6962              LDR      r2,[r4,#0x14]
000078  f4226000          BIC      r0,r2,#0x800
00007c  6160              STR      r0,[r4,#0x14]
00007e  f1010101          ADD      r1,r1,#1
000082  b2c9              UXTB     r1,r1
000084  2905              CMP      r1,#5
000086  d3f6              BCC      |L1.118|
;;;55     spi1(in);
000088  4618              MOV      r0,r3
00008a  f7fffffe          BL       spi1
;;;56     ///for(i=0;i<5;i++)IO0CLR|=(1UL<<11);
;;;57     ///IO0SET|=(1UL<<11);
;;;58     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
00008e  f04f0000          MOV      r0,#0
                  |L1.146|
000092  6961              LDR      r1,[r4,#0x14]
000094  f4216100          BIC      r1,r1,#0x800
000098  6161              STR      r1,[r4,#0x14]
00009a  f1000001          ADD      r0,r0,#1
00009e  b2c0              UXTB     r0,r0
0000a0  2805              CMP      r0,#5
0000a2  d3f6              BCC      |L1.146|
;;;59     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN|=(1UL<<11);
0000a4  f04f0000          MOV      r0,#0
                  |L1.168|
0000a8  6961              LDR      r1,[r4,#0x14]
0000aa  f4416100          ORR      r1,r1,#0x800
0000ae  6161              STR      r1,[r4,#0x14]
0000b0  f1000001          ADD      r0,r0,#1
0000b4  b2c0              UXTB     r0,r0
0000b6  2805              CMP      r0,#5
0000b8  d3f6              BCC      |L1.168|
;;;60     spi1_unconfig();                   
0000ba  e8bd4010          POP      {r4,lr}
0000be  f7ffbffe          B.W      spi1_unconfig
;;;61     }
;;;62     
                          ENDP

                  ad7705_read PROC
;;;64     //-----------------------------------------------
;;;65     void ad7705_read(char num)
0000c2  b570              PUSH     {r4-r6,lr}
;;;66     {
0000c4  4603              MOV      r3,r0
;;;67     //char temp;
;;;68     char i;
;;;69      
;;;70     LPC_GPIO0->FIODIR|=(1UL<<11);
0000c6  4c5f              LDR      r4,|L1.580|
0000c8  6820              LDR      r0,[r4,#0]
0000ca  f4406000          ORR      r0,r0,#0x800
0000ce  6020              STR      r0,[r4,#0]
;;;71     
;;;72     LPC_GPIO0->FIOPIN|=(1UL<<11);
0000d0  6960              LDR      r0,[r4,#0x14]
0000d2  f4406000          ORR      r0,r0,#0x800
0000d6  6160              STR      r0,[r4,#0x14]
;;;73     spi1_ad7705_config();
0000d8  f7fffffe          BL       spi1_ad7705_config
;;;74     
;;;75     ///IO0CLR|=(1UL<<11);
;;;76     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
0000dc  f04f0100          MOV      r1,#0
                  |L1.224|
0000e0  6960              LDR      r0,[r4,#0x14]
0000e2  f4206200          BIC      r2,r0,#0x800
0000e6  6162              STR      r2,[r4,#0x14]
0000e8  f1010101          ADD      r1,r1,#1
0000ec  b2c9              UXTB     r1,r1
0000ee  2905              CMP      r1,#5
0000f0  d3f6              BCC      |L1.224|
;;;77     ad7705_res=0;
0000f2  4d56              LDR      r5,|L1.588|
0000f4  f04f0000          MOV      r0,#0
0000f8  80e8              STRH     r0,[r5,#6]
;;;78     if(num==1) 
0000fa  2b01              CMP      r3,#1
0000fc  d002              BEQ      |L1.260|
;;;79     	{
;;;80     	ad7705_res=spi1(0);
;;;81     	}
;;;82     else if(num==2)
0000fe  2b02              CMP      r3,#2
000100  d005              BEQ      |L1.270|
000102  e00e              B        |L1.290|
                  |L1.260|
000104  2000              MOVS     r0,#0                 ;80
000106  f7fffffe          BL       spi1
00010a  80e8              STRH     r0,[r5,#6]            ;80
00010c  e009              B        |L1.290|
                  |L1.270|
;;;83     	{
;;;84     	*(((char*)(&ad7705_res))+1)=spi1(0); 
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       spi1
000114  4d4d              LDR      r5,|L1.588|
000116  1dad              ADDS     r5,r5,#6
000118  7068              STRB     r0,[r5,#1]
;;;85     	*(((char*)(&ad7705_res)))=spi1(0);
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       spi1
000120  7028              STRB     r0,[r5,#0]
                  |L1.290|
;;;86     	}	   
;;;87     
;;;88     ///IO0CLR|=(1UL<<11);
;;;89     
;;;90     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN&=~(1UL<<11);
000122  f04f0000          MOV      r0,#0
                  |L1.294|
000126  6961              LDR      r1,[r4,#0x14]
000128  f4216100          BIC      r1,r1,#0x800
00012c  6161              STR      r1,[r4,#0x14]
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2805              CMP      r0,#5
000136  d3f6              BCC      |L1.294|
;;;91     for(i=0;i<5;i++)LPC_GPIO0->FIOPIN|=(1UL<<11);
000138  f04f0000          MOV      r0,#0
                  |L1.316|
00013c  6961              LDR      r1,[r4,#0x14]
00013e  f4416100          ORR      r1,r1,#0x800
000142  6161              STR      r1,[r4,#0x14]
000144  f1000001          ADD      r0,r0,#1
000148  b2c0              UXTB     r0,r0
00014a  2805              CMP      r0,#5
00014c  d3f6              BCC      |L1.316|
;;;92     
;;;93     spi1_unconfig();                                            
00014e  e8bd4070          POP      {r4-r6,lr}
000152  f7ffbffe          B.W      spi1_unconfig
;;;94     }
;;;95     
                          ENDP

                  ad7705_drv PROC
;;;96     //-----------------------------------------------
;;;97     void ad7705_drv(void)
000156  e92d41f0          PUSH     {r4-r8,lr}
;;;98     {
;;;99     //__disable_irq();
;;;100    
;;;101    
;;;102    	ad7705_write(0x08);
00015a  2008              MOVS     r0,#8
00015c  f7fffffe          BL       ad7705_write
;;;103    	ad7705_read(1);
000160  2001              MOVS     r0,#1
000162  f7fffffe          BL       ad7705_read
;;;104    
;;;105    
;;;106    ///IO0DIR|=(1UL<<11);
;;;107    ///IO0DIR&=~(1UL<<10);
;;;108    
;;;109    if(!(ad7705_res&0x0001))
000166  4c39              LDR      r4,|L1.588|
000168  88e0              LDRH     r0,[r4,#6]  ; ad7705_res
00016a  07c0              LSLS     r0,r0,#31
00016c  d163              BNE      |L1.566|
;;;110    	{
;;;111    	ad7705_write(0x38+b7705ch);
00016e  7820              LDRB     r0,[r4,#0]  ; b7705ch
000170  3038              ADDS     r0,r0,#0x38
000172  b2c0              UXTB     r0,r0
000174  f7fffffe          BL       ad7705_write
;;;112    	ad7705_read(2);
000178  2002              MOVS     r0,#2
00017a  f7fffffe          BL       ad7705_read
;;;113    	//ad7705_buff[0][0]=ad7705_res;
;;;114    
;;;115    	ad7705_plazma++;
00017e  8920              LDRH     r0,[r4,#8]  ; ad7705_plazma
000180  f1000001          ADD      r0,r0,#1
000184  8120              STRH     r0,[r4,#8]
;;;116    	
;;;117    
;;;118    	if(!b7705ch)
000186  7820              LDRB     r0,[r4,#0]  ; b7705ch
;;;119    		{
;;;120    		ad7705_buff[0][ad7705_wrk_cnt]=ad7705_res;
000188  4d31              LDR      r5,|L1.592|
00018a  2800              CMP      r0,#0                 ;118
00018c  d015              BEQ      |L1.442|
;;;121    		ad7705_res1=ad7705_res;
;;;122    		}
;;;123    	else if(b7705ch) 
;;;124    		{
;;;125    		ad7705_buff[1][ad7705_wrk_cnt]=ad7705_res;
00018e  7861              LDRB     r1,[r4,#1]  ; ad7705_wrk_cnt
000190  88e0              LDRH     r0,[r4,#6]  ; ad7705_res
000192  eb050141          ADD      r1,r5,r1,LSL #1
000196  8408              STRH     r0,[r1,#0x20]
;;;126    		ad7705_res2=ad7705_res;
000198  80a0              STRH     r0,[r4,#4]
                  |L1.410|
;;;127    		} 
;;;128    
;;;129    	if(b7705ch)
00019a  d030              BEQ      |L1.510|
;;;130    		{
;;;131    		b7705ch=0;
00019c  f04f0100          MOV      r1,#0
0001a0  7021              STRB     r1,[r4,#0]
;;;132    		ad7705_wrk_cnt++;
0001a2  7860              LDRB     r0,[r4,#1]  ; ad7705_wrk_cnt
0001a4  f1000001          ADD      r0,r0,#1
0001a8  b2c0              UXTB     r0,r0
0001aa  7060              STRB     r0,[r4,#1]
;;;133    		if(ad7705_wrk_cnt>=16)ad7705_wrk_cnt=0;
0001ac  2810              CMP      r0,#0x10
0001ae  d300              BCC      |L1.434|
0001b0  7061              STRB     r1,[r4,#1]
                  |L1.434|
;;;134    		
;;;135    		if((ad7705_wrk_cnt&0x01)==0)
0001b2  7860              LDRB     r0,[r4,#1]  ; ad7705_wrk_cnt
0001b4  07c0              LSLS     r0,r0,#31
0001b6  d006              BEQ      |L1.454|
0001b8  e024              B        |L1.516|
                  |L1.442|
0001ba  7861              LDRB     r1,[r4,#1]            ;120  ; ad7705_wrk_cnt
0001bc  88e0              LDRH     r0,[r4,#6]            ;120  ; ad7705_res
0001be  f8250011          STRH     r0,[r5,r1,LSL #1]     ;120
0001c2  8060              STRH     r0,[r4,#2]            ;121
0001c4  e7e9              B        |L1.410|
                  |L1.454|
;;;136    			{
;;;137    			unsigned temp_U;
;;;138    			char i,ii;
;;;139    
;;;140    			for(i=0;i<2;i++)
0001c6  f04f0100          MOV      r1,#0
;;;141    				{
;;;142    				temp_U=0;
;;;143    				for(ii=0;ii<16;ii++)
;;;144    					{
;;;145    					temp_U+=(unsigned long)ad7705_buff[i][ii];
;;;146    					}
;;;147    				ad7705_buff_[i]=(unsigned short)(temp_U>>4);
0001ca  4e20              LDR      r6,|L1.588|
0001cc  f106060a          ADD      r6,r6,#0xa
                  |L1.464|
0001d0  f04f0200          MOV      r2,#0                 ;142
0001d4  4610              MOV      r0,r2                 ;143
0001d6  eb051341          ADD      r3,r5,r1,LSL #5       ;145
                  |L1.474|
0001da  f8337010          LDRH     r7,[r3,r0,LSL #1]     ;145
0001de  443a              ADD      r2,r2,r7              ;145
0001e0  f1000001          ADD      r0,r0,#1              ;143
0001e4  b2c0              UXTB     r0,r0                 ;143
0001e6  2810              CMP      r0,#0x10              ;143
0001e8  d3f7              BCC      |L1.474|
0001ea  ea4f1012          LSR      r0,r2,#4
0001ee  f8260011          STRH     r0,[r6,r1,LSL #1]
0001f2  f1010101          ADD      r1,r1,#1              ;140
0001f6  b2c9              UXTB     r1,r1                 ;140
0001f8  2902              CMP      r1,#2                 ;140
0001fa  d3e9              BCC      |L1.464|
0001fc  e002              B        |L1.516|
                  |L1.510|
;;;148    				}	
;;;149    			} 
;;;150    		}	
;;;151    		
;;;152    		
;;;153    	else b7705ch=1;
0001fe  f04f0001          MOV      r0,#1
000202  7020              STRB     r0,[r4,#0]
                  |L1.516|
;;;154    	
;;;155    	//b7705ch=1;
;;;156        
;;;157    	if(!b7705ch) ad7705_write(0x20);
000204  7820              LDRB     r0,[r4,#0]  ; b7705ch
000206  b170              CBZ      r0,|L1.550|
;;;158    	else if(b7705ch) ad7705_write(0x21);
000208  2021              MOVS     r0,#0x21
00020a  f7fffffe          BL       ad7705_write
                  |L1.526|
;;;159    
;;;160    	ad7705_write(BIN8(1101)); 
00020e  200d              MOVS     r0,#0xd
000210  f7fffffe          BL       ad7705_write
;;;161    
;;;162    	if(!b7705ch) ad7705_write(0x10);
000214  7820              LDRB     r0,[r4,#0]  ; b7705ch
000216  b150              CBZ      r0,|L1.558|
;;;163    	else if(b7705ch) ad7705_write(0x11);
000218  2011              MOVS     r0,#0x11
00021a  f7fffffe          BL       ad7705_write
                  |L1.542|
;;;164    
;;;165    	ad7705_write(0x44);	
00021e  e8bd41f0          POP      {r4-r8,lr}
000222  2044              MOVS     r0,#0x44
000224  e7fe              B        ad7705_write
                  |L1.550|
000226  2020              MOVS     r0,#0x20              ;157
000228  f7fffffe          BL       ad7705_write
00022c  e7ef              B        |L1.526|
                  |L1.558|
00022e  2010              MOVS     r0,#0x10              ;162
000230  f7fffffe          BL       ad7705_write
000234  e7f3              B        |L1.542|
                  |L1.566|
;;;166    	
;;;167    	}
;;;168    /*
;;;169    ad7705_write(0x20);
;;;170    ad7705_write(BIN8(1101));
;;;171    ad7705_write(0x10);
;;;172    ad7705_write(0x44);
;;;173    */
;;;174    //	__enable_irq();
;;;175    
;;;176    
;;;177    /*
;;;178    if(((ad7705_res1&0x0fff)==0x0000)||((ad7705_res1&0x0fff)==0x0fff)||((ad7705_res2&0x0fff)==0x0000)||((ad7705_res2&0x0fff)==0x0fff))
;;;179    {
;;;180    if(cnt_ad7705_vis<50)
;;;181    	{
;;;182    	cnt_ad7705_vis++;
;;;183    	if(cnt_ad7705_vis>=50) cnt_ad7705_vis_wrk=50;
;;;184    		
;;;185    	}
;;;186    }
;;;187    else cnt_ad7705_vis=0;
;;;188    
;;;189    if(cnt_ad7705_vis_wrk)
;;;190    	{
;;;191    	cnt_ad7705_vis_wrk--;
;;;192    
;;;193    	if(cnt_ad7705_vis_wrk==30)
;;;194    		{
;;;195    		ad7705_reset();
;;;196    		ad7705_write(0x20);
;;;197    		ad7705_write(BIN8(1101)); 
;;;198    		ad7705_write(0x10);
;;;199    		ad7705_write(0x44); 
;;;200    	     }
;;;201    	else if(cnt_ad7705_vis_wrk==20)
;;;202    		{              
;;;203    		ad7705_reset();
;;;204    		ad7705_write(0x20);
;;;205    		ad7705_write(BIN8(1101)); 
;;;206    		ad7705_write(0x10);
;;;207    		ad7705_write(0x44); 
;;;208    	     }	
;;;209    	else if(cnt_ad7705_vis_wrk==10)
;;;210    		{              
;;;211    		ad7705_reset();
;;;212    		ad7705_write(0x20);
;;;213    		ad7705_write(BIN8(1101)); 
;;;214    		ad7705_write(0x10);
;;;215    		ad7705_write(0x44); 
;;;216    	     }
;;;217    	else if(cnt_ad7705_vis_wrk==2)
;;;218    		{
;;;219    
;;;220    	     }		        		          
;;;221    	}         
;;;222    else 
;;;223    	{
;;;224    
;;;225    	}*/	
;;;226    	
;;;227    }
000236  e8bd81f0          POP      {r4-r8,pc}
;;;228    
                          ENDP

00023a  0000              DCW      0x0000
                  |L1.572|
                          DCD      0x4002c000
                  |L1.576|
                          DCD      0x40020000
                  |L1.580|
                          DCD      0x2009c000
                  |L1.584|
                          DCD      0x0001d4c0
                  |L1.588|
                          DCD      ||.data||
                  |L1.592|
                          DCD      ||.bss||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  ad7705_drv_ PROC
;;;229    //-----------------------------------------------
;;;230    void ad7705_drv_(void)
000000  b510              PUSH     {r4,lr}
;;;231    {
;;;232    b7705ch++;
000002  4c16              LDR      r4,|L2.92|
000004  7820              LDRB     r0,[r4,#0]  ; b7705ch
000006  f1000001          ADD      r0,r0,#1
;;;233    b7705ch&=0x0001;
00000a  f0000001          AND      r0,r0,#1
00000e  7020              STRB     r0,[r4,#0]
;;;234    
;;;235    ad7705_write(0x20+b7705ch);
000010  f1000020          ADD      r0,r0,#0x20
000014  f7fffffe          BL       ad7705_write
;;;236    ad7705_write(BIN8(1101));
000018  200d              MOVS     r0,#0xd
00001a  f7fffffe          BL       ad7705_write
;;;237    ad7705_write(0x10+b7705ch);
00001e  7820              LDRB     r0,[r4,#0]  ; b7705ch
000020  3010              ADDS     r0,r0,#0x10
000022  b2c0              UXTB     r0,r0
000024  f7fffffe          BL       ad7705_write
;;;238    ad7705_write(0x44);
000028  2044              MOVS     r0,#0x44
00002a  f7fffffe          BL       ad7705_write
                  |L2.46|
;;;239    
;;;240    
;;;241    ad7705_drv_loop:
;;;242    
;;;243    ad7705_write(0x08);
00002e  2008              MOVS     r0,#8
000030  f7fffffe          BL       ad7705_write
;;;244    ad7705_read(1);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       ad7705_read
;;;245    
;;;246    if(ad7705_res&0x0001)  goto ad7705_drv_loop;
00003a  88e0              LDRH     r0,[r4,#6]  ; ad7705_res
00003c  07c0              LSLS     r0,r0,#31
00003e  d1f6              BNE      |L2.46|
;;;247    else 
;;;248    	{
;;;249    	ad7705_write(0x38+b7705ch);
000040  7820              LDRB     r0,[r4,#0]  ; b7705ch
000042  3038              ADDS     r0,r0,#0x38
000044  b2c0              UXTB     r0,r0
000046  f7fffffe          BL       ad7705_write
;;;250    	ad7705_read(2);
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       ad7705_read
;;;251    	ad7705_plazma++;
000050  8920              LDRH     r0,[r4,#8]  ; ad7705_plazma
000052  f1000001          ADD      r0,r0,#1
000056  8120              STRH     r0,[r4,#8]
;;;252    	}
;;;253    	
;;;254    }
000058  bd10              POP      {r4,pc}
;;;255    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ad7705_buff
                          %        64

                          AREA ||.data||, DATA, ALIGN=1

                  b7705ch
000000  00                DCB      0x00
                  ad7705_wrk_cnt
000001  00                DCB      0x00
                  ad7705_res1
000002  0000              DCB      0x00,0x00
                  ad7705_res2
000004  0000              DCB      0x00,0x00
                  ad7705_res
000006  0000              DCB      0x00,0x00
                  ad7705_plazma
000008  0000              DCB      0x00,0x00
                  ad7705_buff_
00000a  0000              DCB      0x00,0x00
00000c  0000              DCB      0x00,0x00

                          AREA ||area_number.7||, DATA, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.data||
                  cnt_ad7705_vis
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.data||
                  cnt_ad7705_vis_wrk
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "ad7705.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_ad7705_c_e03ed727____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_ad7705_c_e03ed727____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_ad7705_c_e03ed727____REVSH|
#line 130
|__asm___8_ad7705_c_e03ed727____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
