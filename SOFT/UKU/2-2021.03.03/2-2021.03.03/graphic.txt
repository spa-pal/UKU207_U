; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\graphic.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\graphic.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;8      {
000004  9c09              LDR      r4,[sp,#0x24]
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  2920              CMP      r1,#0x20
000008  d23d              BCS      |L1.134|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  17cd              ASRS     r5,r1,#31
00000c  eb017555          ADD      r5,r1,r5,LSR #29
000010  10ee              ASRS     r6,r5,#3
000012  4637              MOV      r7,r6
000014  f06f0c3c          MVN      r12,#0x3c
000018  fb06f60c          MUL      r6,r6,r12
00001c  f44f7cb7          MOV      r12,#0x16e
000020  eb0c0646          ADD      r6,r12,r6,LSL #1
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  f0250507          BIC      r5,r5,#7
000028  4406              ADD      r6,r6,r0              ;25
00002a  eba10805          SUB      r8,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  f04f0c01          MOV      r12,#1
000032  4dff              LDR      r5,|L1.1072|
000034  2a00              CMP      r2,#0                 ;23
000036  d04b              BEQ      |L1.208|
000038  b2b0              UXTH     r0,r6                 ;25
00003a  f1c80107          RSB      r1,r8,#7              ;28
00003e  b2c9              UXTB     r1,r1                 ;28
000040  dd23              BLE      |L1.138|
000042  eb000302          ADD      r3,r0,r2              ;31
000046  e01c              B        |L1.130|
                  |L1.72|
000048  b124              CBZ      r4,|L1.84|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  2c01              CMP      r4,#1
00004c  d009              BEQ      |L1.98|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  2c02              CMP      r4,#2
000050  d00e              BEQ      |L1.112|
000052  e013              B        |L1.124|
                  |L1.84|
000054  5c2a              LDRB     r2,[r5,r0]            ;33
000056  fa0cf601          LSL      r6,r12,r1             ;33
00005a  ea420206          ORR      r2,r2,r6              ;33
00005e  542a              STRB     r2,[r5,r0]            ;33
000060  e00c              B        |L1.124|
                  |L1.98|
000062  5c2a              LDRB     r2,[r5,r0]            ;34
000064  fa0cf601          LSL      r6,r12,r1             ;34
000068  ea820206          EOR      r2,r2,r6              ;34
00006c  542a              STRB     r2,[r5,r0]            ;34
00006e  e005              B        |L1.124|
                  |L1.112|
000070  5c2e              LDRB     r6,[r5,r0]
000072  fa0cf201          LSL      r2,r12,r1
000076  ea060602          AND      r6,r6,r2
00007a  542e              STRB     r6,[r5,r0]
                  |L1.124|
00007c  f1000001          ADD      r0,r0,#1              ;31
000080  b280              UXTH     r0,r0                 ;31
                  |L1.130|
000082  4283              CMP      r3,r0                 ;31
000084  dce0              BGT      |L1.72|
                  |L1.134|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000086  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.138|
00008a  eb000302          ADD      r3,r0,r2              ;31
00008e  e01c              B        |L1.202|
                  |L1.144|
000090  b124              CBZ      r4,|L1.156|
000092  2c01              CMP      r4,#1                 ;43
000094  d009              BEQ      |L1.170|
000096  2c02              CMP      r4,#2                 ;44
000098  d00e              BEQ      |L1.184|
00009a  e013              B        |L1.196|
                  |L1.156|
00009c  5c2a              LDRB     r2,[r5,r0]            ;42
00009e  fa0cf601          LSL      r6,r12,r1             ;42
0000a2  ea420206          ORR      r2,r2,r6              ;42
0000a6  542a              STRB     r2,[r5,r0]            ;42
0000a8  e00c              B        |L1.196|
                  |L1.170|
0000aa  5c2a              LDRB     r2,[r5,r0]            ;43
0000ac  fa0cf601          LSL      r6,r12,r1             ;43
0000b0  ea820206          EOR      r2,r2,r6              ;43
0000b4  542a              STRB     r2,[r5,r0]            ;43
0000b6  e005              B        |L1.196|
                  |L1.184|
0000b8  5c2a              LDRB     r2,[r5,r0]            ;44
0000ba  fa0cf601          LSL      r6,r12,r1             ;44
0000be  ea020206          AND      r2,r2,r6              ;44
0000c2  542a              STRB     r2,[r5,r0]            ;44
                  |L1.196|
0000c4  f1a00001          SUB      r0,r0,#1              ;40
0000c8  b280              UXTH     r0,r0                 ;40
                  |L1.202|
0000ca  4283              CMP      r3,r0                 ;40
0000cc  dbe0              BLT      |L1.144|
                  |L1.206|
0000ce  e7da              B        |L1.134|
                  |L1.208|
0000d0  f04f0eff          MOV      lr,#0xff              ;70
0000d4  2b00              CMP      r3,#0                 ;48
0000d6  d0d6              BEQ      |L1.134|
0000d8  b2ba              UXTH     r2,r7                 ;51
0000da  eb010603          ADD      r6,r1,r3              ;52
0000de  ea4f77e6          ASR      r7,r6,#31             ;52
0000e2  eb067a57          ADD      r10,r6,r7,LSR #29     ;52
0000e6  f3ca07cf          UBFX     r7,r10,#3,#16         ;52
0000ea  fa1ff988          UXTH     r9,r8                 ;53
0000ee  f02a0807          BIC      r8,r10,#7             ;54
0000f2  eba60608          SUB      r6,r6,r8              ;54
0000f6  fa1ff886          UXTH     r8,r6                 ;54
0000fa  dd46              BLE      |L1.394|
0000fc  42ba              CMP      r2,r7                 ;59
0000fe  d145              BNE      |L1.396|
000100  464e              MOV      r6,r9                 ;61
000102  e040              B        |L1.390|
                  |L1.260|
000104  b124              CBZ      r4,|L1.272|
000106  2c01              CMP      r4,#1                 ;64
000108  d015              BEQ      |L1.310|
00010a  2c02              CMP      r4,#2                 ;65
00010c  d026              BEQ      |L1.348|
00010e  e037              B        |L1.384|
                  |L1.272|
000110  f1c20103          RSB      r1,r2,#3              ;63
000114  eb010a41          ADD      r10,r1,r1,LSL #1      ;63
000118  ebca1181          RSB      r1,r10,r1,LSL #6      ;63
00011c  eb000141          ADD      r1,r0,r1,LSL #1       ;63
000120  f1c60b07          RSB      r11,r6,#7             ;63
000124  f815a001          LDRB     r10,[r5,r1]           ;63
000128  fa0cfb0b          LSL      r11,r12,r11           ;63
00012c  ea4a0a0b          ORR      r10,r10,r11           ;63
000130  f805a001          STRB     r10,[r5,r1]           ;63
000134  e024              B        |L1.384|
                  |L1.310|
000136  f1c20103          RSB      r1,r2,#3              ;64
00013a  eb010a41          ADD      r10,r1,r1,LSL #1      ;64
00013e  ebca1181          RSB      r1,r10,r1,LSL #6      ;64
000142  eb000141          ADD      r1,r0,r1,LSL #1       ;64
000146  f1c60b07          RSB      r11,r6,#7             ;64
00014a  f815a001          LDRB     r10,[r5,r1]           ;64
00014e  fa0cfb0b          LSL      r11,r12,r11           ;64
000152  ea8a0a0b          EOR      r10,r10,r11           ;64
000156  f805a001          STRB     r10,[r5,r1]           ;64
00015a  e011              B        |L1.384|
                  |L1.348|
00015c  f1c20103          RSB      r1,r2,#3              ;65
000160  eb010a41          ADD      r10,r1,r1,LSL #1      ;65
000164  ebca1181          RSB      r1,r10,r1,LSL #6      ;65
000168  eb000141          ADD      r1,r0,r1,LSL #1       ;65
00016c  f1c60b07          RSB      r11,r6,#7             ;65
000170  f815a001          LDRB     r10,[r5,r1]           ;65
000174  fa0cfb0b          LSL      r11,r12,r11           ;65
000178  ea2a0a0b          BIC      r10,r10,r11           ;65
00017c  f805a001          STRB     r10,[r5,r1]           ;65
                  |L1.384|
000180  f1060601          ADD      r6,r6,#1              ;61
000184  b2b6              UXTH     r6,r6                 ;61
                  |L1.390|
000186  4546              CMP      r6,r8                 ;61
000188  d3bc              BCC      |L1.260|
                  |L1.394|
00018a  e09c              B        |L1.710|
                  |L1.396|
00018c  17ce              ASRS     r6,r1,#31             ;25
00018e  eb017b56          ADD      r11,r1,r6,LSR #29     ;25
000192  f3cb06cf          UBFX     r6,r11,#3,#16         ;51
000196  f1c60603          RSB      r6,r6,#3              ;70
00019a  eb060a46          ADD      r10,r6,r6,LSL #1      ;70
00019e  ebca1686          RSB      r6,r10,r6,LSL #6      ;70
0001a2  f02b0a07          BIC      r10,r11,#7            ;28
0001a6  eba10b0a          SUB      r11,r1,r10            ;28
0001aa  f04f0aff          MOV      r10,#0xff             ;70
0001ae  eb000646          ADD      r6,r0,r6,LSL #1       ;70
0001b2  fa2afa0b          LSR      r10,r10,r11           ;70
0001b6  b124              CBZ      r4,|L1.450|
0001b8  2c01              CMP      r4,#1                 ;71
0001ba  d009              BEQ      |L1.464|
0001bc  2c02              CMP      r4,#2                 ;72
0001be  d00e              BEQ      |L1.478|
0001c0  e013              B        |L1.490|
                  |L1.450|
0001c2  f815b006          LDRB     r11,[r5,r6]           ;70
0001c6  ea4b0b0a          ORR      r11,r11,r10           ;70
0001ca  f805b006          STRB     r11,[r5,r6]           ;70
0001ce  e00c              B        |L1.490|
                  |L1.464|
0001d0  f815b006          LDRB     r11,[r5,r6]           ;71
0001d4  ea8b0b0a          EOR      r11,r11,r10           ;71
0001d8  f805b006          STRB     r11,[r5,r6]           ;71
0001dc  e005              B        |L1.490|
                  |L1.478|
0001de  f815b006          LDRB     r11,[r5,r6]           ;72
0001e2  ea2b0b0a          BIC      r11,r11,r10           ;72
0001e6  f805b006          STRB     r11,[r5,r6]           ;72
                  |L1.490|
0001ea  18ce              ADDS     r6,r1,r3              ;52
0001ec  17f1              ASRS     r1,r6,#31             ;52
0001ee  eb067b51          ADD      r11,r6,r1,LSR #29     ;52
0001f2  f3cb01cf          UBFX     r1,r11,#3,#16         ;52
0001f6  f1c10103          RSB      r1,r1,#3              ;74
0001fa  eb010a41          ADD      r10,r1,r1,LSL #1      ;74
0001fe  ebca1181          RSB      r1,r10,r1,LSL #6      ;74
000202  f02b0a07          BIC      r10,r11,#7            ;54
000206  eba6060a          SUB      r6,r6,r10             ;54
00020a  b2b6              UXTH     r6,r6                 ;54
00020c  f1c60a08          RSB      r10,r6,#8             ;74
000210  26ff              MOVS     r6,#0xff              ;70
000212  eb000141          ADD      r1,r0,r1,LSL #1       ;74
000216  fa06f60a          LSL      r6,r6,r10             ;74
00021a  b124              CBZ      r4,|L1.550|
00021c  2c01              CMP      r4,#1                 ;75
00021e  d009              BEQ      |L1.564|
000220  2c02              CMP      r4,#2                 ;76
000222  d00e              BEQ      |L1.578|
000224  e013              B        |L1.590|
                  |L1.550|
000226  f815a001          LDRB     r10,[r5,r1]           ;74
00022a  ea4a0a06          ORR      r10,r10,r6            ;74
00022e  f805a001          STRB     r10,[r5,r1]           ;74
000232  e00c              B        |L1.590|
                  |L1.564|
000234  f815a001          LDRB     r10,[r5,r1]           ;75
000238  ea8a0a06          EOR      r10,r10,r6            ;75
00023c  f805a001          STRB     r10,[r5,r1]           ;75
000240  e005              B        |L1.590|
                  |L1.578|
000242  f815a001          LDRB     r10,[r5,r1]           ;76
000246  ea2a0a06          BIC      r10,r10,r6            ;76
00024a  f805a001          STRB     r10,[r5,r1]           ;76
                  |L1.590|
00024e  1ab9              SUBS     r1,r7,r2              ;78
000250  2901              CMP      r1,#1                 ;78
000252  dd38              BLE      |L1.710|
000254  f1020101          ADD      r1,r2,#1              ;80
000258  b289              UXTH     r1,r1                 ;80
00025a  e032              B        |L1.706|
                  |L1.604|
00025c  b124              CBZ      r4,|L1.616|
00025e  2c01              CMP      r4,#1                 ;83
000260  d011              BEQ      |L1.646|
000262  2c02              CMP      r4,#2                 ;84
000264  d01e              BEQ      |L1.676|
000266  e029              B        |L1.700|
                  |L1.616|
000268  f1c10603          RSB      r6,r1,#3              ;82
00026c  eb060a46          ADD      r10,r6,r6,LSL #1      ;82
000270  ebca1686          RSB      r6,r10,r6,LSL #6      ;82
000274  eb000646          ADD      r6,r0,r6,LSL #1       ;82
000278  f815a006          LDRB     r10,[r5,r6]           ;82
00027c  f04f3aff          MOV      r10,#0xffffffff       ;82
000280  f805a006          STRB     r10,[r5,r6]           ;82
000284  e01a              B        |L1.700|
                  |L1.646|
000286  f1c10603          RSB      r6,r1,#3              ;83
00028a  eb060a46          ADD      r10,r6,r6,LSL #1      ;83
00028e  ebca1686          RSB      r6,r10,r6,LSL #6      ;83
000292  eb000646          ADD      r6,r0,r6,LSL #1       ;83
000296  f815a006          LDRB     r10,[r5,r6]           ;83
00029a  ea6f0a0a          MVN      r10,r10               ;83
00029e  f805a006          STRB     r10,[r5,r6]           ;83
0002a2  e00b              B        |L1.700|
                  |L1.676|
0002a4  f1c10603          RSB      r6,r1,#3              ;84
0002a8  eb060b46          ADD      r11,r6,r6,LSL #1      ;84
0002ac  ebcb1686          RSB      r6,r11,r6,LSL #6      ;84
0002b0  eb000646          ADD      r6,r0,r6,LSL #1       ;84
0002b4  f04f0a00          MOV      r10,#0                ;84
0002b8  f805a006          STRB     r10,[r5,r6]           ;84
                  |L1.700|
0002bc  f1010101          ADD      r1,r1,#1              ;80
0002c0  b289              UXTH     r1,r1                 ;80
                  |L1.706|
0002c2  42b9              CMP      r1,r7                 ;80
0002c4  d3ca              BCC      |L1.604|
                  |L1.710|
0002c6  2b00              CMP      r3,#0                 ;90
0002c8  f6bfaf01          BGE      |L1.206|
0002cc  42ba              CMP      r2,r7                 ;93
0002ce  d142              BNE      |L1.854|
0002d0  f1a90901          SUB      r9,r9,#1              ;95
0002d4  fa1ff189          UXTH     r1,r9                 ;95
0002d8  e03a              B        |L1.848|
                  |L1.730|
0002da  b124              CBZ      r4,|L1.742|
0002dc  2c01              CMP      r4,#1                 ;98
0002de  d013              BEQ      |L1.776|
0002e0  2c02              CMP      r4,#2                 ;99
0002e2  d022              BEQ      |L1.810|
0002e4  e031              B        |L1.842|
                  |L1.742|
0002e6  f1c20303          RSB      r3,r2,#3              ;97
0002ea  eb030643          ADD      r6,r3,r3,LSL #1       ;97
0002ee  ebc61383          RSB      r3,r6,r3,LSL #6       ;97
0002f2  eb000343          ADD      r3,r0,r3,LSL #1       ;97
0002f6  f1c10707          RSB      r7,r1,#7              ;97
0002fa  5cee              LDRB     r6,[r5,r3]            ;97
0002fc  fa0cf707          LSL      r7,r12,r7             ;97
000300  ea460607          ORR      r6,r6,r7              ;97
000304  54ee              STRB     r6,[r5,r3]            ;97
000306  e020              B        |L1.842|
                  |L1.776|
000308  f1c20303          RSB      r3,r2,#3              ;98
00030c  eb030643          ADD      r6,r3,r3,LSL #1       ;98
000310  ebc61383          RSB      r3,r6,r3,LSL #6       ;98
000314  eb000343          ADD      r3,r0,r3,LSL #1       ;98
000318  f1c10707          RSB      r7,r1,#7              ;98
00031c  5cee              LDRB     r6,[r5,r3]            ;98
00031e  fa0cf707          LSL      r7,r12,r7             ;98
000322  ea860607          EOR      r6,r6,r7              ;98
000326  54ee              STRB     r6,[r5,r3]            ;98
000328  e00f              B        |L1.842|
                  |L1.810|
00032a  f1c20303          RSB      r3,r2,#3              ;99
00032e  eb030643          ADD      r6,r3,r3,LSL #1       ;99
000332  ebc61383          RSB      r3,r6,r3,LSL #6       ;99
000336  eb000343          ADD      r3,r0,r3,LSL #1       ;99
00033a  f1c10707          RSB      r7,r1,#7              ;99
00033e  5cee              LDRB     r6,[r5,r3]            ;99
000340  fa0cf707          LSL      r7,r12,r7             ;99
000344  ea260607          BIC      r6,r6,r7              ;99
000348  54ee              STRB     r6,[r5,r3]            ;99
                  |L1.842|
00034a  f1a10101          SUB      r1,r1,#1              ;95
00034e  b289              UXTH     r1,r1                 ;95
                  |L1.848|
000350  4541              CMP      r1,r8                 ;95
000352  d2c2              BCS      |L1.730|
                  |L1.852|
000354  e697              B        |L1.134|
                  |L1.854|
000356  b124              CBZ      r4,|L1.866|
000358  2c01              CMP      r4,#1                 ;105
00035a  d013              BEQ      |L1.900|
00035c  2c02              CMP      r4,#2                 ;106
00035e  d022              BEQ      |L1.934|
000360  e031              B        |L1.966|
                  |L1.866|
000362  f1c20103          RSB      r1,r2,#3              ;104
000366  eb010341          ADD      r3,r1,r1,LSL #1       ;104
00036a  ebc31181          RSB      r1,r3,r1,LSL #6       ;104
00036e  eb000141          ADD      r1,r0,r1,LSL #1       ;104
000372  f1c90608          RSB      r6,r9,#8              ;104
000376  5c6b              LDRB     r3,[r5,r1]            ;104
000378  fa0ef606          LSL      r6,lr,r6              ;104
00037c  ea430306          ORR      r3,r3,r6              ;104
000380  546b              STRB     r3,[r5,r1]            ;104
000382  e020              B        |L1.966|
                  |L1.900|
000384  f1c20103          RSB      r1,r2,#3              ;105
000388  eb010341          ADD      r3,r1,r1,LSL #1       ;105
00038c  ebc31181          RSB      r1,r3,r1,LSL #6       ;105
000390  eb000141          ADD      r1,r0,r1,LSL #1       ;105
000394  f1c90608          RSB      r6,r9,#8              ;105
000398  5c6b              LDRB     r3,[r5,r1]            ;105
00039a  fa0ef606          LSL      r6,lr,r6              ;105
00039e  ea830306          EOR      r3,r3,r6              ;105
0003a2  546b              STRB     r3,[r5,r1]            ;105
0003a4  e00f              B        |L1.966|
                  |L1.934|
0003a6  f1c20103          RSB      r1,r2,#3              ;106
0003aa  eb010341          ADD      r3,r1,r1,LSL #1       ;106
0003ae  ebc31181          RSB      r1,r3,r1,LSL #6       ;106
0003b2  eb000141          ADD      r1,r0,r1,LSL #1       ;106
0003b6  f1c90608          RSB      r6,r9,#8              ;106
0003ba  5c6b              LDRB     r3,[r5,r1]            ;106
0003bc  fa0ef606          LSL      r6,lr,r6              ;106
0003c0  ea230306          BIC      r3,r3,r6              ;106
0003c4  546b              STRB     r3,[r5,r1]            ;106
                  |L1.966|
0003c6  b124              CBZ      r4,|L1.978|
0003c8  2c01              CMP      r4,#1                 ;109
0003ca  d011              BEQ      |L1.1008|
0003cc  2c02              CMP      r4,#2                 ;110
0003ce  d01e              BEQ      |L1.1038|
0003d0  e02b              B        |L1.1066|
                  |L1.978|
0003d2  f1c70103          RSB      r1,r7,#3              ;108
0003d6  eb010341          ADD      r3,r1,r1,LSL #1       ;108
0003da  ebc31181          RSB      r1,r3,r1,LSL #6       ;108
0003de  eb000141          ADD      r1,r0,r1,LSL #1       ;108
0003e2  fa2efe08          LSR      lr,lr,r8              ;108
0003e6  5c6b              LDRB     r3,[r5,r1]            ;108
0003e8  ea43030e          ORR      r3,r3,lr              ;108
0003ec  546b              STRB     r3,[r5,r1]            ;108
0003ee  e01c              B        |L1.1066|
                  |L1.1008|
0003f0  f1c70103          RSB      r1,r7,#3              ;109
0003f4  eb010341          ADD      r3,r1,r1,LSL #1       ;109
0003f8  ebc31181          RSB      r1,r3,r1,LSL #6       ;109
0003fc  eb000141          ADD      r1,r0,r1,LSL #1       ;109
000400  fa2efe08          LSR      lr,lr,r8              ;109
000404  5c6b              LDRB     r3,[r5,r1]            ;109
000406  ea83030e          EOR      r3,r3,lr              ;109
00040a  546b              STRB     r3,[r5,r1]            ;109
00040c  e00d              B        |L1.1066|
                  |L1.1038|
00040e  f1c70103          RSB      r1,r7,#3              ;110
000412  eb010341          ADD      r3,r1,r1,LSL #1       ;110
000416  ebc31181          RSB      r1,r3,r1,LSL #6       ;110
00041a  eb000141          ADD      r1,r0,r1,LSL #1       ;110
00041e  fa2efe08          LSR      lr,lr,r8              ;110
000422  5c6b              LDRB     r3,[r5,r1]            ;110
000424  ea23030e          BIC      r3,r3,lr              ;110
000428  546b              STRB     r3,[r5,r1]            ;110
                  |L1.1066|
00042a  1bd1              SUBS     r1,r2,r7              ;112
00042c  2901              CMP      r1,#1                 ;112
00042e  e001              B        |L1.1076|
                  |L1.1072|
                          DCD      lcd_bitmap
                  |L1.1076|
000434  dd8e              BLE      |L1.852|
000436  f1a20201          SUB      r2,r2,#1              ;114
00043a  b291              UXTH     r1,r2                 ;114
00043c  e02d              B        |L1.1178|
                  |L1.1086|
00043e  b124              CBZ      r4,|L1.1098|
000440  2c01              CMP      r4,#1                 ;117
000442  d00f              BEQ      |L1.1124|
000444  2c02              CMP      r4,#2                 ;118
000446  d01a              BEQ      |L1.1150|
000448  e024              B        |L1.1172|
                  |L1.1098|
00044a  f1c10203          RSB      r2,r1,#3              ;116
00044e  eb020342          ADD      r3,r2,r2,LSL #1       ;116
000452  ebc31282          RSB      r2,r3,r2,LSL #6       ;116
000456  eb000242          ADD      r2,r0,r2,LSL #1       ;116
00045a  5cab              LDRB     r3,[r5,r2]            ;116
00045c  f04f33ff          MOV      r3,#0xffffffff        ;116
000460  54ab              STRB     r3,[r5,r2]            ;116
000462  e017              B        |L1.1172|
                  |L1.1124|
000464  f1c10203          RSB      r2,r1,#3              ;117
000468  eb020342          ADD      r3,r2,r2,LSL #1       ;117
00046c  ebc31282          RSB      r2,r3,r2,LSL #6       ;117
000470  eb000242          ADD      r2,r0,r2,LSL #1       ;117
000474  5cab              LDRB     r3,[r5,r2]            ;117
000476  ea6f0303          MVN      r3,r3                 ;117
00047a  54ab              STRB     r3,[r5,r2]            ;117
00047c  e00a              B        |L1.1172|
                  |L1.1150|
00047e  f1c10203          RSB      r2,r1,#3              ;118
000482  eb020642          ADD      r6,r2,r2,LSL #1       ;118
000486  ebc61282          RSB      r2,r6,r2,LSL #6       ;118
00048a  eb000242          ADD      r2,r0,r2,LSL #1       ;118
00048e  f04f0300          MOV      r3,#0                 ;118
000492  54ab              STRB     r3,[r5,r2]            ;118
                  |L1.1172|
000494  f1a10101          SUB      r1,r1,#1              ;114
000498  b289              UXTH     r1,r1                 ;114
                  |L1.1178|
00049a  42b9              CMP      r1,r7                 ;114
00049c  d8cf              BHI      |L1.1086|
00049e  e5f2              B        |L1.134|
;;;126    //---------------------------------------------
                          ENDP

                  draw_rectangle PROC
;;;127    void draw_rectangle(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char solid,char inverse)
0004a0  e92d47f8          PUSH     {r3-r10,lr}
;;;128    {
0004a4  4604              MOV      r4,r0
0004a6  e9dd0509          LDRD     r0,r5,[sp,#0x24]
0004aa  4688              MOV      r8,r1
0004ac  4692              MOV      r10,r2
0004ae  461f              MOV      r7,r3
;;;129    
;;;130    signed short i;
;;;131    /*draw(x_b,y_b,0,y_o,inverse);
;;;132    draw(x_b,y_b+y_o,x_o,0,inverse);
;;;133    draw(x_b+x_o,y_b+y_o,0,-y_o,inverse);
;;;134    draw(x_b+x_o,y_b,-x_o,0,inverse);*/
;;;135    
;;;136    if(solid)
;;;137    	{
;;;138    	for(i=x_b;i<=(x_b+x_o);i++)
0004b0  eb04060a          ADD      r6,r4,r10
0004b4  b950              CBNZ     r0,|L1.1228|
0004b6  e00d              B        |L1.1236|
                  |L1.1208|
;;;139    		{
;;;140    		draw(i,y_b,0,y_o,inverse);
0004b8  463b              MOV      r3,r7
0004ba  2200              MOVS     r2,#0
0004bc  4641              MOV      r1,r8
0004be  4620              MOV      r0,r4
0004c0  9500              STR      r5,[sp,#0]
0004c2  f7fffffe          BL       draw
0004c6  f1040401          ADD      r4,r4,#1              ;138
0004ca  b224              SXTH     r4,r4                 ;138
                  |L1.1228|
0004cc  42a6              CMP      r6,r4                 ;138
0004ce  daf3              BGE      |L1.1208|
                  |L1.1232|
;;;141    		}
;;;142    	}
;;;143    else
;;;144    	{
;;;145    	draw(x_b,y_b,0,y_o,inverse);
;;;146    	draw(x_b,y_b+y_o-1,x_o,0,inverse);
;;;147    	draw(x_b+x_o-1,y_b+y_o,0,-y_o,inverse);
;;;148    	draw(x_b+x_o-1,y_b,-x_o,0,inverse);	
;;;149    	}	
;;;150    
;;;151    }
0004d0  e8bd87f8          POP      {r3-r10,pc}
                  |L1.1236|
0004d4  463b              MOV      r3,r7                 ;145
0004d6  2200              MOVS     r2,#0                 ;145
0004d8  4641              MOV      r1,r8                 ;145
0004da  4620              MOV      r0,r4                 ;145
0004dc  9500              STR      r5,[sp,#0]            ;145
0004de  f7fffffe          BL       draw
0004e2  eb080907          ADD      r9,r8,r7              ;146
0004e6  f1a90001          SUB      r0,r9,#1              ;146
0004ea  b201              SXTH     r1,r0                 ;146
0004ec  2300              MOVS     r3,#0                 ;146
0004ee  4652              MOV      r2,r10                ;146
0004f0  4620              MOV      r0,r4                 ;146
0004f2  9500              STR      r5,[sp,#0]            ;146
0004f4  f7fffffe          BL       draw
0004f8  1e76              SUBS     r6,r6,#1              ;147
0004fa  4278              RSBS     r0,r7,#0              ;147
0004fc  b234              SXTH     r4,r6                 ;147
0004fe  b203              SXTH     r3,r0                 ;147
000500  fa0ff189          SXTH     r1,r9                 ;147
000504  2200              MOVS     r2,#0                 ;147
000506  4620              MOV      r0,r4                 ;147
000508  9500              STR      r5,[sp,#0]            ;147
00050a  f7fffffe          BL       draw
00050e  f1ca0000          RSB      r0,r10,#0             ;148
000512  b202              SXTH     r2,r0                 ;148
000514  2300              MOVS     r3,#0                 ;148
000516  4641              MOV      r1,r8                 ;148
000518  4620              MOV      r0,r4                 ;148
00051a  9500              STR      r5,[sp,#0]            ;148
00051c  f7fffffe          BL       draw
000520  e7d6              B        |L1.1232|
;;;152    
                          ENDP

                  draw_ptr PROC
;;;153    //---------------------------------------------
;;;154    void draw_ptr(char x_b,char y_b,char ptr,char vol)
000522  e92d43f8          PUSH     {r3-r9,lr}
;;;155    {
000526  4681              MOV      r9,r0
000528  460e              MOV      r6,r1
00052a  461d              MOV      r5,r3
00052c  f04f0800          MOV      r8,#0
;;;156    char i;
;;;157    if(ptr==0)
000530  b122              CBZ      r2,|L1.1340|
;;;158    	{
;;;159    	for(i=0;i<vol;i++)
;;;160    		{
;;;161    		draw(x_b,y_b+i,-(vol-i),0,0);
;;;162    		draw(x_b,y_b+i,(vol-i),0,0);
;;;163    		}
;;;164    	}
;;;165    else if(ptr==2)
000532  2a02              CMP      r2,#2
000534  d11b              BNE      |L1.1390|
;;;166    	{
;;;167    	for(i=0;i<vol;i++)
000536  f04f0400          MOV      r4,#0
00053a  e02e              B        |L1.1434|
                  |L1.1340|
00053c  f04f0400          MOV      r4,#0                 ;159
000540  e013              B        |L1.1386|
                  |L1.1346|
000542  1937              ADDS     r7,r6,r4              ;161
000544  1b62              SUBS     r2,r4,r5              ;161
000546  2300              MOVS     r3,#0                 ;161
000548  4639              MOV      r1,r7                 ;161
00054a  4648              MOV      r0,r9                 ;161
00054c  f8cd8000          STR      r8,[sp,#0]            ;161
000550  f7fffffe          BL       draw
000554  1b2a              SUBS     r2,r5,r4              ;162
000556  2300              MOVS     r3,#0                 ;162
000558  4639              MOV      r1,r7                 ;162
00055a  4648              MOV      r0,r9                 ;162
00055c  f8cd8000          STR      r8,[sp,#0]            ;162
000560  f7fffffe          BL       draw
000564  f1040401          ADD      r4,r4,#1              ;159
000568  b2e4              UXTB     r4,r4                 ;159
                  |L1.1386|
00056a  42ac              CMP      r4,r5                 ;159
00056c  d3e9              BCC      |L1.1346|
                  |L1.1390|
;;;168    		{
;;;169    		draw(x_b,y_b-i,-(vol-i),0,0);
;;;170    		draw(x_b,y_b-i,(vol-i),0,0);
;;;171    		}
;;;172    	}	
;;;173    }
00056e  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1394|
000572  1b37              SUBS     r7,r6,r4              ;169
000574  1b62              SUBS     r2,r4,r5              ;169
000576  2300              MOVS     r3,#0                 ;169
000578  4639              MOV      r1,r7                 ;169
00057a  4648              MOV      r0,r9                 ;169
00057c  f8cd8000          STR      r8,[sp,#0]            ;169
000580  f7fffffe          BL       draw
000584  1b2a              SUBS     r2,r5,r4              ;170
000586  2300              MOVS     r3,#0                 ;170
000588  4639              MOV      r1,r7                 ;170
00058a  4648              MOV      r0,r9                 ;170
00058c  f8cd8000          STR      r8,[sp,#0]            ;170
000590  f7fffffe          BL       draw
000594  f1040401          ADD      r4,r4,#1              ;167
000598  b2e4              UXTB     r4,r4                 ;167
                  |L1.1434|
00059a  42ac              CMP      r4,r5                 ;167
00059c  d3e9              BCC      |L1.1394|
00059e  e7e6              B        |L1.1390|
;;;174    
                          ENDP

                  plot PROC
;;;175    //-----------------------------------------------
;;;176    void plot(signed short x_b,signed short y_b,unsigned long data,signed short len,char inverse)
0005a0  e92d47f8          PUSH     {r3-r10,lr}
;;;177    {
0005a4  f8dd9024          LDR      r9,[sp,#0x24]
;;;178    //unsigned short num_byte;
;;;179    //signed short byte_offset;
;;;180    //unsigned short x_target;
;;;181    //unsigned short i;
;;;182    char num_bite;
;;;183    unsigned short /*y_begin*/y_bit_begin;
;;;184    //unsigned short y_target,y_bit_target;
;;;185    unsigned long data1/*,data2*/;
;;;186    char data1_0,data1_1,data1_2,data1_3;
;;;187    
;;;188    data1=0xffffffffUL;
0005a8  f04f34ff          MOV      r4,#0xffffffff
;;;189    data1<<=(32-len);
0005ac  f1c30320          RSB      r3,r3,#0x20
0005b0  fa04f403          LSL      r4,r4,r3
0005b4  9400              STR      r4,[sp,#0]
;;;190    data1&=data;
0005b6  9b00              LDR      r3,[sp,#0]
0005b8  ea030302          AND      r3,r3,r2
0005bc  9300              STR      r3,[sp,#0]
;;;191    data1=data1>>y_b;
0005be  9a00              LDR      r2,[sp,#0]
0005c0  fa22f201          LSR      r2,r2,r1
0005c4  9200              STR      r2,[sp,#0]
;;;192    
;;;193    data1_0=*((char*)&data1);
0005c6  f89d6000          LDRB     r6,[sp,#0]
;;;194    data1_1=*(((char*)&data1)+1);
0005ca  f89d7001          LDRB     r7,[sp,#1]
;;;195    data1_2=*(((char*)&data1)+2);
0005ce  f89dc002          LDRB     r12,[sp,#2]
;;;196    data1_3=*(((char*)&data1)+3);
0005d2  f89d8003          LDRB     r8,[sp,#3]
;;;197    
;;;198    if(!inverse)
;;;199    	{
;;;200    	lcd_bitmap[x_b]|=data1_0;
0005d6  f8dfa340          LDR      r10,|L1.2328|
0005da  f1b90f00          CMP      r9,#0                 ;198
0005de  eb0a0100          ADD      r1,r10,r0
0005e2  f81a2000          LDRB     r2,[r10,r0]
;;;201    	lcd_bitmap[122+x_b]|=data1_1;
0005e6  f891307a          LDRB     r3,[r1,#0x7a]
;;;202    	lcd_bitmap[244+x_b]|=data1_2;
0005ea  f89140f4          LDRB     r4,[r1,#0xf4]
;;;203    	lcd_bitmap[366+x_b]|=data1_3;
0005ee  f891516e          LDRB     r5,[r1,#0x16e]
0005f2  d010              BEQ      |L1.1558|
;;;204    	}
;;;205    else if(inverse)
;;;206    	{
;;;207    	lcd_bitmap[x_b]^=data1_0;
0005f4  ea820206          EOR      r2,r2,r6
0005f8  f80a2000          STRB     r2,[r10,r0]
;;;208    	lcd_bitmap[122+x_b]^=data1_1;
0005fc  ea830307          EOR      r3,r3,r7
000600  f881307a          STRB     r3,[r1,#0x7a]
;;;209    	lcd_bitmap[244+x_b]^=data1_2;
000604  ea84040c          EOR      r4,r4,r12
000608  f88140f4          STRB     r4,[r1,#0xf4]
;;;210    	lcd_bitmap[366+x_b]^=data1_3;
00060c  ea850508          EOR      r5,r5,r8
000610  f881516e          STRB     r5,[r1,#0x16e]
;;;211    	}
;;;212    
;;;213    }	
000614  e75c              B        |L1.1232|
                  |L1.1558|
000616  ea420206          ORR      r2,r2,r6              ;200
00061a  f80a2000          STRB     r2,[r10,r0]           ;200
00061e  ea430307          ORR      r3,r3,r7              ;201
000622  f881307a          STRB     r3,[r1,#0x7a]         ;201
000626  ea44040c          ORR      r4,r4,r12             ;202
00062a  f88140f4          STRB     r4,[r1,#0xf4]         ;202
00062e  ea450508          ORR      r5,r5,r8              ;203
000632  f881516e          STRB     r5,[r1,#0x16e]        ;203
000636  e74b              B        |L1.1232|
;;;214    
                          ENDP

                  graphic_print PROC
;;;216    //-----------------------------------------------
;;;217    void graphic_print(signed short x_b,signed short y_b,signed short x_l,signed short y_l,signed short x_d,signed short y_d,const char* adress,char inverse)
000638  e92d4ffc          PUSH     {r2-r11,lr}
;;;218    {
00063c  4606              MOV      r6,r0
00063e  e9dd890d          LDRD     r8,r9,[sp,#0x34]
000642  9d0c              LDR      r5,[sp,#0x30]
000644  468a              MOV      r10,r1
000646  4617              MOV      r7,r2
000648  469b              MOV      r11,r3
;;;219    signed short i;
;;;220    
;;;221    for(i=0;i<x_l;i++)
00064a  f04f0400          MOV      r4,#0
00064e  e022              B        |L1.1686|
                  |L1.1616|
;;;222    	{
;;;223    	long data;
;;;224    	
;;;225    	*(((char*)&data)+3)=adress[(i*y_d)+y_d-1];
000650  fb048005          MLA      r0,r4,r5,r8
000654  f1a50101          SUB      r1,r5,#1
000658  5c41              LDRB     r1,[r0,r1]
00065a  f88d1007          STRB     r1,[sp,#7]
;;;226    	*(((char*)&data)+2)=adress[(i*y_d)+y_d-2];
00065e  f1a50102          SUB      r1,r5,#2
000662  5c41              LDRB     r1,[r0,r1]
000664  f88d1006          STRB     r1,[sp,#6]
;;;227    	*(((char*)&data)+1)=adress[(i*y_d)+y_d-3];
000668  f1a50103          SUB      r1,r5,#3
00066c  5c41              LDRB     r1,[r0,r1]
00066e  f88d1005          STRB     r1,[sp,#5]
;;;228    	*((char*)&data)=adress[(i*y_d)+y_d-4];
000672  f1a50104          SUB      r1,r5,#4
000676  5c40              LDRB     r0,[r0,r1]
000678  f88d0004          STRB     r0,[sp,#4]
;;;229    	
;;;230    	//data=0x08000000;
;;;231    	
;;;232    	plot(x_b+i,y_b,data,y_l,inverse);
00067c  eb060004          ADD      r0,r6,r4
000680  b200              SXTH     r0,r0
000682  465b              MOV      r3,r11
000684  f8cd9000          STR      r9,[sp,#0]
000688  4651              MOV      r1,r10
00068a  9a01              LDR      r2,[sp,#4]
00068c  f7fffffe          BL       plot
000690  f1040401          ADD      r4,r4,#1              ;221
000694  b224              SXTH     r4,r4                 ;221
                  |L1.1686|
000696  42bc              CMP      r4,r7                 ;221
000698  dbda              BLT      |L1.1616|
;;;233    	}
;;;234    }
00069a  e8bd8ffc          POP      {r2-r11,pc}
;;;235    
                          ENDP

                  graphic_print_text PROC
;;;236    //-----------------------------------------------
;;;237    void graphic_print_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
00069e  e92d4fff          PUSH     {r0-r11,lr}
;;;238    {
0006a2  b095              SUB      sp,sp,#0x54
0006a4  4605              MOV      r5,r0
0006a6  e9ddc723          LDRD     r12,r7,[sp,#0x8c]
0006aa  9e25              LDR      r6,[sp,#0x94]
0006ac  9922              LDR      r1,[sp,#0x88]
;;;239    signed short i;
;;;240    char buffer[10];
;;;241    char bitmap_buffer[60];
;;;242    for(i=0;i<10;i++)
0006ae  f04f0000          MOV      r0,#0
;;;243    	{
;;;244    	buffer[i]=' ';
0006b2  f04f0820          MOV      r8,#0x20
0006b6  ac12              ADD      r4,sp,#0x48           ;240
                  |L1.1720|
0006b8  f8048000          STRB     r8,[r4,r0]
0006bc  f1000001          ADD      r0,r0,#1              ;242
0006c0  b200              SXTH     r0,r0                 ;242
0006c2  280a              CMP      r0,#0xa               ;242
0006c4  dbf8              BLT      |L1.1720|
;;;245    	}
;;;246    for(i=0;i<num;i++)
0006c6  f04f0000          MOV      r0,#0
0006ca  e006              B        |L1.1754|
                  |L1.1740|
;;;247    	{
;;;248    	buffer[i]=bgnd[i];
0006cc  f8129000          LDRB     r9,[r2,r0]
0006d0  f8049000          STRB     r9,[r4,r0]
0006d4  f1000001          ADD      r0,r0,#1              ;246
0006d8  b200              SXTH     r0,r0                 ;246
                  |L1.1754|
0006da  4298              CMP      r0,r3                 ;246
0006dc  dbf6              BLT      |L1.1740|
;;;249    	}	
;;;250    	
;;;251    {	
;;;252    signed char i;
;;;253    //char n;
;;;254    char s[10];
;;;255    char minus='+';
0006de  f04f0a2b          MOV      r10,#0x2b
;;;256    char zero_on;
;;;257    char simb_num;
;;;258    
;;;259    if(data<0)
0006e2  2900              CMP      r1,#0
0006e4  da04              BGE      |L1.1776|
;;;260    	{
;;;261    	data=-data;
0006e6  f1c10000          RSB      r0,r1,#0
0006ea  b201              SXTH     r1,r0
;;;262    	minus='-';
0006ec  f04f0a2d          MOV      r10,#0x2d
                  |L1.1776|
;;;263    	}
;;;264    
;;;265    for(i=0;i<10;i++)
0006f0  f04f0000          MOV      r0,#0
;;;266    	{
;;;267    	s[i]=data%10;
0006f4  f04f0b0a          MOV      r11,#0xa
0006f8  46e9              MOV      r9,sp                 ;254
                  |L1.1786|
0006fa  fb91f2fb          SDIV     r2,r1,r11
0006fe  fb0b1112          MLS      r1,r11,r2,r1
000702  f8091000          STRB     r1,[r9,r0]
;;;268    	data/=10;
000706  b211              SXTH     r1,r2
000708  f1000001          ADD      r0,r0,#1              ;265
00070c  b240              SXTB     r0,r0                 ;265
00070e  280a              CMP      r0,#0xa               ;265
000710  dbf3              BLT      |L1.1786|
;;;269    	}   
;;;270    
;;;271    zero_on=1;
000712  f04f0001          MOV      r0,#1
;;;272    simb_num=0;
000716  f04f0200          MOV      r2,#0
;;;273    
;;;274    for (i=9;i>=0;i--)
00071a  f04f0109          MOV      r1,#9
                  |L1.1822|
;;;275    	{
;;;276    	if(zero_on&&(!s[i])&&(i>(des)))
00071e  b148              CBZ      r0,|L1.1844|
000720  f819b001          LDRB     r11,[r9,r1]
000724  f1bb0f00          CMP      r11,#0
000728  d104              BNE      |L1.1844|
00072a  4561              CMP      r1,r12
00072c  dd02              BLE      |L1.1844|
;;;277    	     {
;;;278    	     s[i]=0x20;
00072e  f8098001          STRB     r8,[r9,r1]
000732  e00a              B        |L1.1866|
                  |L1.1844|
;;;279    	     }
;;;280    	else 
;;;281    	     {
;;;282    	     s[i]=s[i]+0x30;
000734  f8190001          LDRB     r0,[r9,r1]
000738  f1000030          ADD      r0,r0,#0x30
00073c  f8090001          STRB     r0,[r9,r1]
;;;283    	     zero_on=0;
000740  f04f0000          MOV      r0,#0
;;;284    	     simb_num++;
000744  f1020201          ADD      r2,r2,#1
000748  b2d2              UXTB     r2,r2
                  |L1.1866|
00074a  f1a10101          SUB      r1,r1,#1              ;274
00074e  b249              SXTB     r1,r1                 ;274
000750  2900              CMP      r1,#0                 ;274
000752  dae4              BGE      |L1.1822|
;;;285    	     }
;;;286    	 }
;;;287    	          
;;;288    if(minus=='-')	
000754  f1ba0f2d          CMP      r10,#0x2d
000758  d105              BNE      |L1.1894|
;;;289         {
;;;290         s[simb_num++]=minus; 
00075a  4610              MOV      r0,r2
00075c  f1020201          ADD      r2,r2,#1
000760  b2d2              UXTB     r2,r2
000762  f809a000          STRB     r10,[r9,r0]
                  |L1.1894|
;;;291         }    
;;;292    if(des)
000766  f1bc0f00          CMP      r12,#0
00076a  d013              BEQ      |L1.1940|
;;;293         {
;;;294         for(i=simb_num;i>des;i--)
00076c  b251              SXTB     r1,r2
00076e  e008              B        |L1.1922|
                  |L1.1904|
;;;295              {
;;;296              s[i]=s[i-1];
000770  eb090001          ADD      r0,r9,r1
000774  f8100c01          LDRB     r0,[r0,#-1]
000778  f8090001          STRB     r0,[r9,r1]
00077c  f1a10101          SUB      r1,r1,#1              ;294
000780  b249              SXTB     r1,r1                 ;294
                  |L1.1922|
000782  4561              CMP      r1,r12                ;294
000784  dcf4              BGT      |L1.1904|
;;;297              }
;;;298         s[des]='.';
000786  f04f002e          MOV      r0,#0x2e
00078a  f809000c          STRB     r0,[r9,r12]
;;;299         simb_num++;     
00078e  f1020201          ADD      r2,r2,#1
000792  b2d2              UXTB     r2,r2
                  |L1.1940|
;;;300         }
;;;301    	
;;;302    for (i=0;i<simb_num;i++)
000794  f04f0100          MOV      r1,#0
000798  e009              B        |L1.1966|
                  |L1.1946|
;;;303    	{
;;;304         buffer[pos-1-i]=s[i];
00079a  eba70c01          SUB      r12,r7,r1
00079e  44a4              ADD      r12,r12,r4
0007a0  f8190001          LDRB     r0,[r9,r1]
0007a4  f80c0c01          STRB     r0,[r12,#-1]
0007a8  f1010101          ADD      r1,r1,#1              ;302
0007ac  b249              SXTB     r1,r1                 ;302
                  |L1.1966|
0007ae  4291              CMP      r1,r2                 ;302
0007b0  dbf3              BLT      |L1.1946|
;;;305    	}
;;;306    }	
;;;307    	
;;;308    		
;;;309    for(i=0;i<num;i++)
0007b2  f04f0100          MOV      r1,#0
0007b6  af03              ADD      r7,sp,#0xc            ;241
0007b8  e023              B        |L1.2050|
                  |L1.1978|
;;;310    	{
;;;311    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
0007ba  5c60              LDRB     r0,[r4,r1]
0007bc  f8dfc15c          LDR      r12,|L1.2332|
0007c0  eb000040          ADD      r0,r0,r0,LSL #1
0007c4  eb010241          ADD      r2,r1,r1,LSL #1
0007c8  f81c8010          LDRB     r8,[r12,r0,LSL #1]
0007cc  f8078012          STRB     r8,[r7,r2,LSL #1]
;;;312    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
0007d0  eb0c0040          ADD      r0,r12,r0,LSL #1
0007d4  eb070242          ADD      r2,r7,r2,LSL #1
0007d8  f890c001          LDRB     r12,[r0,#1]
0007dc  f882c001          STRB     r12,[r2,#1]
;;;313    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
0007e0  f890c002          LDRB     r12,[r0,#2]
0007e4  f882c002          STRB     r12,[r2,#2]
;;;314    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
0007e8  f890c003          LDRB     r12,[r0,#3]
0007ec  f882c003          STRB     r12,[r2,#3]
;;;315    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
0007f0  f890c004          LDRB     r12,[r0,#4]
0007f4  f882c004          STRB     r12,[r2,#4]
;;;316    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
0007f8  7940              LDRB     r0,[r0,#5]
0007fa  7150              STRB     r0,[r2,#5]
0007fc  f1010101          ADD      r1,r1,#1              ;309
000800  b209              SXTH     r1,r1                 ;309
                  |L1.2050|
000802  4299              CMP      r1,r3                 ;309
000804  dbd9              BLT      |L1.1978|
;;;317    	}
;;;318    for(i=0;i<(num*6);i++)
000806  f04f0400          MOV      r4,#0
00080a  eb030843          ADD      r8,r3,r3,LSL #1
00080e  e00d              B        |L1.2092|
                  |L1.2064|
;;;319    	{
;;;320    	long data;
;;;321    	
;;;322    	*(((char*)&data)+3)=bitmap_buffer[i];
000810  5d38              LDRB     r0,[r7,r4]
000812  f88d000b          STRB     r0,[sp,#0xb]
;;;323    	
;;;324    	//data=0x08000000;
;;;325    	
;;;326    	plot(x_b+i,y_b,data,8,inverse);
000816  1928              ADDS     r0,r5,r4
000818  b200              SXTH     r0,r0
00081a  2308              MOVS     r3,#8
00081c  9600              STR      r6,[sp,#0]
00081e  9a02              LDR      r2,[sp,#8]
000820  9916              LDR      r1,[sp,#0x58]
000822  f7fffffe          BL       plot
000826  f1040401          ADD      r4,r4,#1              ;318
00082a  b224              SXTH     r4,r4                 ;318
                  |L1.2092|
00082c  ebb40f48          CMP      r4,r8,LSL #1          ;318
000830  dbee              BLT      |L1.2064|
;;;327    	}
;;;328    }
000832  b019              ADD      sp,sp,#0x64
000834  e427              B        |L1.134|
;;;329    
                          ENDP

                  graphic_print_text_text PROC
;;;330    //-----------------------------------------------
;;;331    void graphic_print_text_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
000836  e92d43f0          PUSH     {r4-r9,lr}
;;;332    {
00083a  b095              SUB      sp,sp,#0x54
00083c  4688              MOV      r8,r1
00083e  9f1f              LDR      r7,[sp,#0x7c]
000840  991c              LDR      r1,[sp,#0x70]
000842  4606              MOV      r6,r0
;;;333    signed short i;
;;;334    char buffer[10];
;;;335    char bitmap_buffer[60];
;;;336    for(i=0;i<10;i++)
000844  f04f0000          MOV      r0,#0
;;;337    	{
;;;338    	buffer[i]=' ';
000848  f04f0420          MOV      r4,#0x20
00084c  f10d0c48          ADD      r12,sp,#0x48          ;334
                  |L1.2128|
000850  f80c4000          STRB     r4,[r12,r0]
000854  f1000001          ADD      r0,r0,#1              ;336
000858  b200              SXTH     r0,r0                 ;336
00085a  280a              CMP      r0,#0xa               ;336
00085c  dbf8              BLT      |L1.2128|
;;;339    	}
;;;340    for(i=0;i<num;i++)
00085e  f04f0400          MOV      r4,#0
000862  e005              B        |L1.2160|
                  |L1.2148|
;;;341    	{
;;;342    	buffer[i]=bgnd[i];
000864  5d10              LDRB     r0,[r2,r4]
000866  f80c0004          STRB     r0,[r12,r4]
00086a  f1040401          ADD      r4,r4,#1              ;340
00086e  b224              SXTH     r4,r4                 ;340
                  |L1.2160|
000870  429c              CMP      r4,r3                 ;340
000872  dbf7              BLT      |L1.2148|
;;;343    	}	
;;;344    	
;;;345    {	
;;;346    signed char i;
;;;347    //char n;
;;;348    char s[10];
;;;349    char minus='+';
;;;350    char zero_on;
;;;351    char simb_num;
;;;352    
;;;353    if(data<0)
000874  2900              CMP      r1,#0
000876  da02              BGE      |L1.2174|
;;;354    	{
;;;355    	data=-data;
000878  f1c10000          RSB      r0,r1,#0
00087c  b201              SXTH     r1,r0
                  |L1.2174|
;;;356    	minus='-';
;;;357    	}
;;;358    
;;;359    for(i=0;i<10;i++)
00087e  f04f0000          MOV      r0,#0
000882  466d              MOV      r5,sp                 ;348
;;;360    	{
;;;361    	s[i]=data%10;
000884  f04f020a          MOV      r2,#0xa
                  |L1.2184|
000888  fb91f4f2          SDIV     r4,r1,r2
00088c  fb021114          MLS      r1,r2,r4,r1
000890  5429              STRB     r1,[r5,r0]
;;;362    	data/=10;
000892  b221              SXTH     r1,r4
000894  f1000001          ADD      r0,r0,#1              ;359
000898  b240              SXTB     r0,r0                 ;359
00089a  280a              CMP      r0,#0xa               ;359
00089c  dbf4              BLT      |L1.2184|
;;;363    	}   
;;;364    
;;;365    zero_on=1;
;;;366    simb_num=0;
;;;367    /*
;;;368    for (i=9;i>=0;i--)
;;;369    	{
;;;370    	if(zero_on&&(!s[i])&&(i>(des)))
;;;371    	     {
;;;372    	     s[i]=0x20;
;;;373    	     }
;;;374    	else 
;;;375    	     {
;;;376    	     s[i]=s[i]+0x30;
;;;377    	     zero_on=0;
;;;378    	     simb_num++;
;;;379    	     }
;;;380    	 }
;;;381    	          
;;;382    	
;;;383    */
;;;384    }	
;;;385    	
;;;386    		
;;;387    for(i=0;i<num;i++)
00089e  f04f0200          MOV      r2,#0
0008a2  f10d090c          ADD      r9,sp,#0xc            ;335
0008a6  e01b              B        |L1.2272|
                  |L1.2216|
;;;388    	{
;;;389    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
0008a8  f81c0002          LDRB     r0,[r12,r2]
0008ac  4c1b              LDR      r4,|L1.2332|
0008ae  eb000140          ADD      r1,r0,r0,LSL #1
0008b2  eb020042          ADD      r0,r2,r2,LSL #1
0008b6  f8145011          LDRB     r5,[r4,r1,LSL #1]
0008ba  f8095010          STRB     r5,[r9,r0,LSL #1]
;;;390    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
0008be  eb040441          ADD      r4,r4,r1,LSL #1
0008c2  eb090540          ADD      r5,r9,r0,LSL #1
0008c6  7861              LDRB     r1,[r4,#1]
0008c8  7069              STRB     r1,[r5,#1]
;;;391    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
0008ca  78a0              LDRB     r0,[r4,#2]
0008cc  70a8              STRB     r0,[r5,#2]
;;;392    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
0008ce  78e0              LDRB     r0,[r4,#3]
0008d0  70e8              STRB     r0,[r5,#3]
;;;393    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
0008d2  7920              LDRB     r0,[r4,#4]
0008d4  7128              STRB     r0,[r5,#4]
;;;394    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
0008d6  7960              LDRB     r0,[r4,#5]
0008d8  7168              STRB     r0,[r5,#5]
0008da  f1020201          ADD      r2,r2,#1              ;387
0008de  b212              SXTH     r2,r2                 ;387
                  |L1.2272|
0008e0  429a              CMP      r2,r3                 ;387
0008e2  dbe1              BLT      |L1.2216|
;;;395    	}
;;;396    for(i=0;i<(num*6);i++)
0008e4  f04f0400          MOV      r4,#0
0008e8  eb030543          ADD      r5,r3,r3,LSL #1
0008ec  e00e              B        |L1.2316|
                  |L1.2286|
;;;397    	{
;;;398    	long data;
;;;399    	
;;;400    	*(((char*)&data)+3)=bitmap_buffer[i];
0008ee  f8190004          LDRB     r0,[r9,r4]
0008f2  f88d000b          STRB     r0,[sp,#0xb]
;;;401    	
;;;402    	//data=0x08000000;
;;;403    	
;;;404    	plot(x_b+i,y_b,data,8,inverse);
0008f6  1930              ADDS     r0,r6,r4
0008f8  b200              SXTH     r0,r0
0008fa  2308              MOVS     r3,#8
0008fc  9700              STR      r7,[sp,#0]
0008fe  4641              MOV      r1,r8
000900  9a02              LDR      r2,[sp,#8]
000902  f7fffffe          BL       plot
000906  f1040401          ADD      r4,r4,#1              ;396
00090a  b224              SXTH     r4,r4                 ;396
                  |L1.2316|
00090c  ebb40f45          CMP      r4,r5,LSL #1          ;396
000910  dbed              BLT      |L1.2286|
;;;405    	}
;;;406    }
000912  b015              ADD      sp,sp,#0x54
000914  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

                  |L1.2328|
                          DCD      lcd_bitmap
                  |L1.2332|
                          DCD      caracter

;*** Start embedded assembler ***

#line 1 "graphic.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_graphic_c_draw____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_graphic_c_draw____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_graphic_c_draw____REVSH|
#line 130
|__asm___9_graphic_c_draw____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
