; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\uart0.o --depend=.\EXE\uart0.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;80     
;;;81     for(j=1;j<num;j++)
000004  2201              MOVS     r2,#1
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  4dff              LDR      r5,|L1.1028|
000008  e005              B        |L1.22|
                  |L1.10|
00000a  f8104f01          LDRB     r4,[r0,#1]!
00000e  5ceb              LDRB     r3,[r5,r3]
000010  4063              EORS     r3,r3,r4
000012  1c52              ADDS     r2,r2,#1              ;81
000014  b2d2              UXTB     r2,r2                 ;81
                  |L1.22|
000016  428a              CMP      r2,r1                 ;81
000018  d3f7              BCC      |L1.10|
;;;85     	}
;;;86     
;;;87     return r;	
00001a  4618              MOV      r0,r3
;;;88     } 
00001c  bd30              POP      {r4,r5,pc}
;;;89     
                          ENDP

                  crc_95 PROC
;;;90     //-----------------------------------------------
;;;91     char crc_95(char* ptr,char num)
00001e  b530              PUSH     {r4,r5,lr}
;;;92     {
;;;93     char r,j;
;;;94     r=*ptr;
000020  7803              LDRB     r3,[r0,#0]
;;;95     
;;;96     for(j=1;j<num;j++)
000022  2201              MOVS     r2,#1
;;;97     	{
;;;98          ptr++;
;;;99     	r=((*ptr)^Table95[r]);
000024  4df8              LDR      r5,|L1.1032|
000026  e005              B        |L1.52|
                  |L1.40|
000028  f8104f01          LDRB     r4,[r0,#1]!
00002c  5ceb              LDRB     r3,[r5,r3]
00002e  4063              EORS     r3,r3,r4
000030  1c52              ADDS     r2,r2,#1              ;96
000032  b2d2              UXTB     r2,r2                 ;96
                  |L1.52|
000034  428a              CMP      r2,r1                 ;96
000036  d3f7              BCC      |L1.40|
;;;100    	}
;;;101    
;;;102    return r;	
000038  4618              MOV      r0,r3
;;;103    }
00003a  bd30              POP      {r4,r5,pc}
;;;104    
                          ENDP

                  putchar0 PROC
;;;106    //-----------------------------------------------
;;;107    void putchar0(char c)
00003c  b530              PUSH     {r4,r5,lr}
;;;108    {
;;;109    while (tx_counter0 == TX_BUFFER_SIZE0);
00003e  4bf3              LDR      r3,|L1.1036|
000040  f44f6480          MOV      r4,#0x400
000044  89d9              LDRH     r1,[r3,#0xe]
                  |L1.70|
000046  42a1              CMP      r1,r4
000048  d0fd              BEQ      |L1.70|
;;;110    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00004a  b921              CBNZ     r1,|L1.86|
00004c  4af0              LDR      r2,|L1.1040|
00004e  7d15              LDRB     r5,[r2,#0x14]
000050  f0150f60          TST      r5,#0x60
000054  d10c              BNE      |L1.112|
                  |L1.86|
;;;111       {
;;;112       tx_buffer0[tx_wr_index0]=c;
000056  4def              LDR      r5,|L1.1044|
000058  895a              LDRH     r2,[r3,#0xa]  ; tx_wr_index0
00005a  54a8              STRB     r0,[r5,r2]
;;;113       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
00005c  1c52              ADDS     r2,r2,#1
00005e  b290              UXTH     r0,r2
000060  8158              STRH     r0,[r3,#0xa]
000062  42a0              CMP      r0,r4
000064  d101              BNE      |L1.106|
000066  2000              MOVS     r0,#0
000068  8158              STRH     r0,[r3,#0xa]
                  |L1.106|
;;;114       ++tx_counter0;
00006a  1c49              ADDS     r1,r1,#1
00006c  81d9              STRH     r1,[r3,#0xe]
;;;115       }
;;;116    else LPC_UART0->THR=c;
;;;117    }
00006e  bd30              POP      {r4,r5,pc}
                  |L1.112|
000070  7010              STRB     r0,[r2,#0]            ;116
000072  bd30              POP      {r4,r5,pc}
;;;118    
                          ENDP

                  uart_out_adr0 PROC
;;;167    //-----------------------------------------------
;;;168    void uart_out_adr0 (char *ptr, char len)
000074  b570              PUSH     {r4-r6,lr}
;;;169    {
000076  b08f              SUB      sp,sp,#0x3c
;;;170    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;171    char i,t=0;
000078  2300              MOVS     r3,#0
;;;172    
;;;173    //rs232_data_out_buff[4]=210;
;;;174    
;;;175    for(i=0;i<len;i++)
00007a  2200              MOVS     r2,#0
00007c  466d              MOV      r5,sp                 ;170
00007e  e005              B        |L1.140|
                  |L1.128|
;;;176    	{
;;;177    	UOB[i]=ptr[i];
000080  5c84              LDRB     r4,[r0,r2]
000082  54ac              STRB     r4,[r5,r2]
;;;178    	t^=UOB[i];
000084  5cac              LDRB     r4,[r5,r2]
000086  4063              EORS     r3,r3,r4
000088  1c52              ADDS     r2,r2,#1              ;175
00008a  b2d2              UXTB     r2,r2                 ;175
                  |L1.140|
00008c  428a              CMP      r2,r1                 ;175
00008e  d3f7              BCC      |L1.128|
;;;179    	}
;;;180    //if(!t)t=0xff;
;;;181    //UOB[8]=5;
;;;182    //UOB[9]=6;
;;;183    UOB[10]=200;
000090  20c8              MOVS     r0,#0xc8
000092  f88d000a          STRB     r0,[sp,#0xa]
;;;184    //UOB[11]=8;
;;;185    UOB[len]=len;
000096  5469              STRB     r1,[r5,r1]
;;;186    t^=len;	
000098  404b              EORS     r3,r3,r1
;;;187    UOB[len+1]=t;	
00009a  1868              ADDS     r0,r5,r1
00009c  7043              STRB     r3,[r0,#1]
;;;188    UOB[len+2]=END;
00009e  220a              MOVS     r2,#0xa
0000a0  7082              STRB     r2,[r0,#2]
;;;189    //UOB[0]=i+1;
;;;190    //UOB[i]=t^UOB[0];
;;;191    //UOB[i+1]=END;
;;;192    	
;;;193    //puts(UOB); 
;;;194    for (i=0;i<len+3;i++)
0000a2  2400              MOVS     r4,#0
0000a4  1cce              ADDS     r6,r1,#3
0000a6  e004              B        |L1.178|
                  |L1.168|
;;;195    	{
;;;196    	putchar0(UOB[i]);
0000a8  5d28              LDRB     r0,[r5,r4]
0000aa  f7fffffe          BL       putchar0
0000ae  1c64              ADDS     r4,r4,#1              ;194
0000b0  b2e4              UXTB     r4,r4                 ;194
                  |L1.178|
0000b2  42b4              CMP      r4,r6                 ;194
0000b4  d3f8              BCC      |L1.168|
;;;197    	}   
;;;198    }
0000b6  b00f              ADD      sp,sp,#0x3c
0000b8  bd70              POP      {r4-r6,pc}
;;;199    
                          ENDP

                  UARTInit PROC
;;;322    //-----------------------------------------------
;;;323    void rs232_data_out_tki(void)
;;;324    {
;;;325    short rs232_data_out_buff[30];
;;;326    
;;;327    rs232_data_out_buff[0]=avar_stat;
;;;328    rs232_data_out_buff[1]=spc_stat;
;;;329    rs232_data_out_buff[2]=load_U;
;;;330    rs232_data_out_buff[3]=load_I;
;;;331    rs232_data_out_buff[4]=net_Ua;
;;;332    rs232_data_out_buff[5]=net_Ub;
;;;333    rs232_data_out_buff[6]=net_Uc;
;;;334    rs232_data_out_buff[7]=net_F3;
;;;335    rs232_data_out_buff[8]=t_ext[0];
;;;336    rs232_data_out_buff[9]=bps[0]._Uii;
;;;337    rs232_data_out_buff[10]=bps[0]._Ii;
;;;338    rs232_data_out_buff[11]=bps[0]._Ti;
;;;339    rs232_data_out_buff[12]=bps[0]._av;
;;;340    rs232_data_out_buff[13]=bps[1]._Uii;
;;;341    rs232_data_out_buff[14]=bps[1]._Ii;
;;;342    rs232_data_out_buff[15]=bps[1]._Ti;
;;;343    rs232_data_out_buff[16]=bps[1]._av;
;;;344    rs232_data_out_buff[17]=bps[2]._Uii;
;;;345    rs232_data_out_buff[18]=bps[2]._Ii;
;;;346    rs232_data_out_buff[19]=bps[2]._Ti;
;;;347    rs232_data_out_buff[20]=bps[2]._av;
;;;348    rs232_data_out_buff[21]=bps[3]._Uii;
;;;349    rs232_data_out_buff[22]=bps[3]._Ii;
;;;350    rs232_data_out_buff[23]=bps[3]._Ti;
;;;351    rs232_data_out_buff[24]=bps[3]._av;
0000ba  e92d47f0          PUSH     {r4-r10,lr}
0000be  4ad8              LDR      r2,|L1.1056|
;;;352    rs232_data_out_buff[25]=Ib_ips_termokompensat;
0000c0  f8df8354          LDR      r8,|L1.1048|
0000c4  6812              LDR      r2,[r2,#0]
0000c6  f8df9354          LDR      r9,|L1.1052|
;;;353    
;;;354    uart_out_adr0 ((char*)rs232_data_out_buff, 52);
0000ca  2603              MOVS     r6,#3
0000cc  2783              MOVS     r7,#0x83
0000ce  2507              MOVS     r5,#7
;;;355    }
0000d0  0893              LSRS     r3,r2,#2
0000d2  0854              LSRS     r4,r2,#1
0000d4  ea4f0cd2          LSR      r12,r2,#3
0000d8  bb58              CBNZ     r0,|L1.306|
0000da  f8d80000          LDR      r0,[r8,#0]
0000de  f02000f0          BIC      r0,r0,#0xf0
0000e2  f8c80000          STR      r0,[r8,#0]
0000e6  f8d80000          LDR      r0,[r8,#0]
0000ea  f0400050          ORR      r0,r0,#0x50
0000ee  f8c80000          STR      r0,[r8,#0]
0000f2  f8d901a8          LDR      r0,[r9,#0x1a8]
0000f6  f3c01081          UBFX     r0,r0,#6,#2
0000fa  2801              CMP      r0,#1
0000fc  d008              BEQ      |L1.272|
0000fe  2802              CMP      r0,#2
000100  d003              BEQ      |L1.266|
000102  2803              CMP      r0,#3
000104  d003              BEQ      |L1.270|
000106  461a              MOV      r2,r3
000108  e002              B        |L1.272|
                  |L1.266|
00010a  4622              MOV      r2,r4
00010c  e000              B        |L1.272|
                  |L1.270|
00010e  4662              MOV      r2,r12
                  |L1.272|
000110  4cbf              LDR      r4,|L1.1040|
000112  7327              STRB     r7,[r4,#0xc]
000114  0910              LSRS     r0,r2,#4
000116  fbb0f0f1          UDIV     r0,r0,r1
00011a  0a01              LSRS     r1,r0,#8
00011c  7121              STRB     r1,[r4,#4]
00011e  7020              STRB     r0,[r4,#0]
000120  7326              STRB     r6,[r4,#0xc]
000122  7225              STRB     r5,[r4,#8]
000124  2005              MOVS     r0,#5
000126  f7fffffe          BL       NVIC_EnableIRQ
00012a  6065              STR      r5,[r4,#4]
00012c  2001              MOVS     r0,#1
                  |L1.302|
00012e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.306|
000132  2801              CMP      r0,#1
000134  d12a              BNE      |L1.396|
000136  f8d80010          LDR      r0,[r8,#0x10]
00013a  f020000f          BIC      r0,r0,#0xf
00013e  f8c80010          STR      r0,[r8,#0x10]
000142  f8d80010          LDR      r0,[r8,#0x10]
000146  f040000a          ORR      r0,r0,#0xa
00014a  f8c80010          STR      r0,[r8,#0x10]
00014e  f8d901a8          LDR      r0,[r9,#0x1a8]
000152  f3c02001          UBFX     r0,r0,#8,#2
000156  2801              CMP      r0,#1
000158  d008              BEQ      |L1.364|
00015a  2802              CMP      r0,#2
00015c  d003              BEQ      |L1.358|
00015e  2803              CMP      r0,#3
000160  d003              BEQ      |L1.362|
000162  461a              MOV      r2,r3
000164  e002              B        |L1.364|
                  |L1.358|
000166  4622              MOV      r2,r4
000168  e000              B        |L1.364|
                  |L1.362|
00016a  4662              MOV      r2,r12
                  |L1.364|
00016c  4cad              LDR      r4,|L1.1060|
00016e  7327              STRB     r7,[r4,#0xc]
000170  0910              LSRS     r0,r2,#4
000172  fbb0f0f1          UDIV     r0,r0,r1
000176  0a01              LSRS     r1,r0,#8
000178  7121              STRB     r1,[r4,#4]
00017a  7020              STRB     r0,[r4,#0]
00017c  7326              STRB     r6,[r4,#0xc]
00017e  7225              STRB     r5,[r4,#8]
000180  2006              MOVS     r0,#6
000182  f7fffffe          BL       NVIC_EnableIRQ
000186  6065              STR      r5,[r4,#4]
000188  2001              MOVS     r0,#1
00018a  e7d0              B        |L1.302|
                  |L1.396|
00018c  2000              MOVS     r0,#0
00018e  e7ce              B        |L1.302|
;;;356    
                          ENDP

                  UART0_IRQHandler PROC
;;;483    //***********************************************
;;;484    void UART0_IRQHandler (void) 
000190  e92d5ff0          PUSH     {r4-r12,lr}
;;;485    {
;;;486    uint8_t IIRValue, LSRValue;
;;;487    uint8_t Dummy = Dummy;
;;;488    char /*status,u0iir,*/data;
;;;489    
;;;490    plazma_uart0++;
000194  4d9d              LDR      r5,|L1.1036|
000196  78e8              LDRB     r0,[r5,#3]  ; plazma_uart0
000198  1c40              ADDS     r0,r0,#1
00019a  70e8              STRB     r0,[r5,#3]
;;;491    
;;;492    
;;;493    			
;;;494    IIRValue = LPC_UART0->IIR;
00019c  f8dfb270          LDR      r11,|L1.1040|
0001a0  f8db0008          LDR      r0,[r11,#8]
;;;495        
;;;496    IIRValue >>= 1;			/* skip pending bit in IIR */
0001a4  0840              LSRS     r0,r0,#1
;;;497    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
0001a6  f0000007          AND      r0,r0,#7
;;;498    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;499      	{
;;;500    	LSRValue = LPC_UART0->LSR;
;;;501    
;;;502    	/* Receive Line Status */
;;;503    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;504    		{
;;;505    	  	/* There are errors or break interrupt */
;;;506    	  	/* Read LSR will clear the interrupt */
;;;507    	  	UART0Status = LSRValue;
;;;508    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;509    							interrupt, then bail out */
;;;510    	  	return;
;;;511    		}
;;;512    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;513    		{
;;;514    		
;;;515    		data=LPC_UART0->RBR;
;;;516    		rx_buffer0[rx_wr_index0]=data;
0001aa  f8df927c          LDR      r9,|L1.1064|
;;;517       		bRXIN0=1;
0001ae  2601              MOVS     r6,#1
;;;518       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001b0  2400              MOVS     r4,#0
0001b2  f44f6880          MOV      r8,#0x400
0001b6  2803              CMP      r0,#3                 ;498
0001b8  d120              BNE      |L1.508|
0001ba  f89b0014          LDRB     r0,[r11,#0x14]        ;500
0001be  f0100f9e          TST      r0,#0x9e              ;503
0001c2  d004              BEQ      |L1.462|
0001c4  6128              STR      r0,[r5,#0x10]         ;507  ; UART0Status
0001c6  f89b0000          LDRB     r0,[r11,#0]           ;508
                  |L1.458|
;;;519       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;520          		{
;;;521          		rx_counter0=0;
;;;522          		rx_buffer_overflow0=1;
;;;523          		}
;;;524    
;;;525    		
;;;526    		}
;;;527      	}
;;;528    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
;;;529      	{
;;;530    	plazma_bat_drv0++;
;;;531    	modbus_plazma++;
;;;532    	while((LPC_UART0->LSR)&0x0001) {	
;;;533    	data=LPC_UART0->RBR;
;;;534    	rx_buffer0[rx_wr_index0]=data;
;;;535       	bRXIN0=1;
;;;536       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;537       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;538          	{
;;;539          	rx_counter0=0;
;;;540          	rx_buffer_overflow0=1;
;;;541          	}
;;;542    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;543    	modbus_rx_buffer_ptr++;
;;;544    	modbus_timeout_cnt=0;
;;;545    
;;;546    
;;;547    
;;;548    	
;;;549    
;;;550    	if(data==0x7e)
;;;551    		{
;;;552    		bat_drv_rx_cnt=0;
;;;553    		bat_drv_rx_cnt=0;
;;;554    		}
;;;555    	//if(bat_drv_rx_cnt<50)
;;;556    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;557    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;558    
;;;559    	if(data==0x0d)
;;;560    		{
;;;561    		if(sacredSunRequestPhase==0)	mem_copy (sacredSunBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;562    		else if(sacredSunRequestPhase==1)	mem_copy (&sacredSunBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;563    		sacredSunSilentCnt=0;
;;;564    		}
;;;565    
;;;566    	}
;;;567      	}
;;;568    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
;;;569      	{
;;;570    	/* Character Time-out indicator */
;;;571    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;572      	}
;;;573    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
;;;574      	{
;;;575    	/* THRE interrupt */
;;;576    	
;;;577    	plazma_bat_drv1++;
;;;578    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
;;;579    									valid data in U0THR or not */
;;;580    	if ( LSRValue & LSR_THRE )
;;;581    		{
;;;582    	  	UART0TxEmpty = 1;
;;;583    		if (tx_counter0)
;;;584       			{
;;;585       			--tx_counter0;
;;;586       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
;;;587       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;;;588       			}
;;;589    		}
;;;590    	else
;;;591    		{
;;;592    	  	UART0TxEmpty = 0;
;;;593    		}
;;;594      	}
;;;595    }
0001ca  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.462|
0001ce  07c0              LSLS     r0,r0,#31             ;512
0001d0  d0fb              BEQ      |L1.458|
0001d2  f89b1000          LDRB     r1,[r11,#0]           ;515
0001d6  88a8              LDRH     r0,[r5,#4]            ;516  ; rx_wr_index0
0001d8  f8091000          STRB     r1,[r9,r0]            ;516
0001dc  706e              STRB     r6,[r5,#1]            ;517
0001de  1c40              ADDS     r0,r0,#1              ;518
0001e0  b280              UXTH     r0,r0                 ;518
0001e2  80a8              STRH     r0,[r5,#4]            ;518
0001e4  4540              CMP      r0,r8                 ;518
0001e6  d100              BNE      |L1.490|
0001e8  80ac              STRH     r4,[r5,#4]            ;518
                  |L1.490|
0001ea  8928              LDRH     r0,[r5,#8]            ;519  ; rx_counter0
0001ec  1c40              ADDS     r0,r0,#1              ;519
0001ee  b280              UXTH     r0,r0                 ;519
0001f0  8128              STRH     r0,[r5,#8]            ;519
0001f2  4540              CMP      r0,r8                 ;519
0001f4  d1e9              BNE      |L1.458|
0001f6  812c              STRH     r4,[r5,#8]            ;521
0001f8  70ae              STRB     r6,[r5,#2]            ;522
                  |L1.506|
0001fa  e7e6              B        |L1.458|
                  |L1.508|
0001fc  2802              CMP      r0,#2                 ;528
0001fe  d148              BNE      |L1.658|
000200  498a              LDR      r1,|L1.1068|
000202  8808              LDRH     r0,[r1,#0]            ;530  ; plazma_bat_drv0
000204  1c40              ADDS     r0,r0,#1              ;530
000206  8008              STRH     r0,[r1,#0]            ;530
000208  4989              LDR      r1,|L1.1072|
00020a  8808              LDRH     r0,[r1,#0]            ;531  ; modbus_plazma
00020c  1c40              ADDS     r0,r0,#1              ;531
00020e  8008              STRH     r0,[r1,#0]            ;531
000210  f8dfa220          LDR      r10,|L1.1076|
000214  4f88              LDR      r7,|L1.1080|
000216  e037              B        |L1.648|
                  |L1.536|
000218  f89b0000          LDRB     r0,[r11,#0]           ;533
00021c  88a9              LDRH     r1,[r5,#4]            ;534  ; rx_wr_index0
00021e  f8090001          STRB     r0,[r9,r1]            ;534
000222  706e              STRB     r6,[r5,#1]            ;535
000224  1c49              ADDS     r1,r1,#1              ;536
000226  b289              UXTH     r1,r1                 ;536
000228  80a9              STRH     r1,[r5,#4]            ;536
00022a  4541              CMP      r1,r8                 ;536
00022c  d100              BNE      |L1.560|
00022e  80ac              STRH     r4,[r5,#4]            ;536
                  |L1.560|
000230  8929              LDRH     r1,[r5,#8]            ;537  ; rx_counter0
000232  1c49              ADDS     r1,r1,#1              ;537
000234  b289              UXTH     r1,r1                 ;537
000236  8129              STRH     r1,[r5,#8]            ;537
000238  4541              CMP      r1,r8                 ;537
00023a  d101              BNE      |L1.576|
00023c  812c              STRH     r4,[r5,#8]            ;539
00023e  70ae              STRB     r6,[r5,#2]            ;540
                  |L1.576|
000240  4a7f              LDR      r2,|L1.1088|
000242  4b7e              LDR      r3,|L1.1084|
000244  7811              LDRB     r1,[r2,#0]            ;542  ; modbus_rx_buffer_ptr
000246  5458              STRB     r0,[r3,r1]            ;542
000248  1c49              ADDS     r1,r1,#1              ;543
00024a  7011              STRB     r1,[r2,#0]            ;543
00024c  497d              LDR      r1,|L1.1092|
00024e  700c              STRB     r4,[r1,#0]            ;544
000250  287e              CMP      r0,#0x7e              ;550
000252  d100              BNE      |L1.598|
000254  803c              STRH     r4,[r7,#0]            ;552
                  |L1.598|
000256  8839              LDRH     r1,[r7,#0]            ;556  ; bat_drv_rx_cnt
000258  4b7b              LDR      r3,|L1.1096|
00025a  1c4a              ADDS     r2,r1,#1              ;556
00025c  b292              UXTH     r2,r2                 ;556
00025e  803a              STRH     r2,[r7,#0]            ;556
000260  5458              STRB     r0,[r3,r1]            ;556
000262  280d              CMP      r0,#0xd               ;559
000264  d110              BNE      |L1.648|
000266  f89a0000          LDRB     r0,[r10,#0]           ;561  ; sacredSunRequestPhase
00026a  b920              CBNZ     r0,|L1.630|
00026c  4619              MOV      r1,r3                 ;561
00026e  4877              LDR      r0,|L1.1100|
000270  f7fffffe          BL       mem_copy
000274  e006              B        |L1.644|
                  |L1.630|
000276  2801              CMP      r0,#1                 ;562
000278  d104              BNE      |L1.644|
00027a  4874              LDR      r0,|L1.1100|
00027c  4972              LDR      r1,|L1.1096|
00027e  3096              ADDS     r0,r0,#0x96           ;562
000280  f7fffffe          BL       mem_copy
                  |L1.644|
000284  4872              LDR      r0,|L1.1104|
000286  8004              STRH     r4,[r0,#0]            ;563
                  |L1.648|
000288  f89b0014          LDRB     r0,[r11,#0x14]        ;532
00028c  07c0              LSLS     r0,r0,#31             ;532
00028e  d1c3              BNE      |L1.536|
000290  e79b              B        |L1.458|
                  |L1.658|
000292  2806              CMP      r0,#6                 ;568
000294  d104              BNE      |L1.672|
000296  6928              LDR      r0,[r5,#0x10]         ;571  ; UART0Status
000298  f4407080          ORR      r0,r0,#0x100          ;571
00029c  6128              STR      r0,[r5,#0x10]         ;571  ; UART0Status
00029e  e794              B        |L1.458|
                  |L1.672|
0002a0  2801              CMP      r0,#1                 ;573
0002a2  d192              BNE      |L1.458|
0002a4  496b              LDR      r1,|L1.1108|
0002a6  8808              LDRH     r0,[r1,#0]            ;577  ; plazma_bat_drv1
0002a8  1c40              ADDS     r0,r0,#1              ;577
0002aa  8008              STRH     r0,[r1,#0]            ;577
0002ac  f89b0014          LDRB     r0,[r11,#0x14]        ;578
0002b0  0680              LSLS     r0,r0,#26             ;580
0002b2  d511              BPL      |L1.728|
0002b4  702e              STRB     r6,[r5,#0]            ;582
0002b6  89e8              LDRH     r0,[r5,#0xe]          ;583  ; tx_counter0
0002b8  2800              CMP      r0,#0                 ;583
0002ba  d086              BEQ      |L1.458|
0002bc  1e40              SUBS     r0,r0,#1              ;585
0002be  81e8              STRH     r0,[r5,#0xe]          ;585
0002c0  4954              LDR      r1,|L1.1044|
0002c2  89a8              LDRH     r0,[r5,#0xc]          ;586  ; tx_rd_index0
0002c4  5c09              LDRB     r1,[r1,r0]            ;586
0002c6  f88b1000          STRB     r1,[r11,#0]           ;586
0002ca  1c40              ADDS     r0,r0,#1              ;587
0002cc  b280              UXTH     r0,r0                 ;587
0002ce  81a8              STRH     r0,[r5,#0xc]          ;587
0002d0  4540              CMP      r0,r8                 ;587
0002d2  d192              BNE      |L1.506|
0002d4  81ac              STRH     r4,[r5,#0xc]          ;587
0002d6  e778              B        |L1.458|
                  |L1.728|
0002d8  702c              STRB     r4,[r5,#0]            ;592
0002da  e776              B        |L1.458|
;;;596    
                          ENDP

                  uart_in_an0 PROC
;;;599    //-----------------------------------------------
;;;600    void uart_in_an0(void)
0002dc  b5f0              PUSH     {r4-r7,lr}
;;;601    {
0002de  b089              SUB      sp,sp,#0x24
;;;602    
;;;603    
;;;604    
;;;605    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
0002e0  4c51              LDR      r4,|L1.1064|
0002e2  2672              MOVS     r6,#0x72
0002e4  3c64              SUBS     r4,r4,#0x64
0002e6  7820              LDRB     r0,[r4,#0]  ; UIB0
0002e8  2765              MOVS     r7,#0x65
0002ea  2872              CMP      r0,#0x72
0002ec  d167              BNE      |L1.958|
0002ee  7860              LDRB     r0,[r4,#1]  ; UIB0
0002f0  2865              CMP      r0,#0x65
0002f2  d164              BNE      |L1.958|
0002f4  78a0              LDRB     r0,[r4,#2]  ; UIB0
0002f6  2861              CMP      r0,#0x61
0002f8  d161              BNE      |L1.958|
0002fa  78e0              LDRB     r0,[r4,#3]  ; UIB0
0002fc  2864              CMP      r0,#0x64
0002fe  d15e              BNE      |L1.958|
000300  2106              MOVS     r1,#6
000302  4620              MOV      r0,r4
000304  f7fffffe          BL       crc_87
000308  79a1              LDRB     r1,[r4,#6]  ; UIB0
00030a  4288              CMP      r0,r1
00030c  d157              BNE      |L1.958|
00030e  2106              MOVS     r1,#6
000310  4620              MOV      r0,r4
000312  f7fffffe          BL       crc_95
000316  79e1              LDRB     r1,[r4,#7]  ; UIB0
000318  4288              CMP      r0,r1
00031a  d150              BNE      |L1.958|
;;;606    	{
;;;607    	unsigned short ptr;
;;;608    	unsigned long data1,data2;
;;;609    	char temp_out[20];
;;;610    	ptr=UIB0[4]+(UIB0[5]*256U);
00031c  7920              LDRB     r0,[r4,#4]  ; UIB0
00031e  7961              LDRB     r1,[r4,#5]  ; UIB0
000320  eb002001          ADD      r0,r0,r1,LSL #8
000324  b280              UXTH     r0,r0
000326  4605              MOV      r5,r0
000328  9008              STR      r0,[sp,#0x20]
;;;611    	data1=lc640_read_long(ptr);
00032a  4628              MOV      r0,r5
00032c  f7fffffe          BL       lc640_read_long
000330  9007              STR      r0,[sp,#0x1c]
;;;612    	data2=lc640_read_long(ptr+4);
000332  1d28              ADDS     r0,r5,#4
000334  f7fffffe          BL       lc640_read_long
000338  9006              STR      r0,[sp,#0x18]
;;;613    	temp_out[0]='r';
00033a  f88d6004          STRB     r6,[sp,#4]
;;;614    	temp_out[1]='e';
00033e  f88d7005          STRB     r7,[sp,#5]
;;;615    	temp_out[2]='a';
000342  2061              MOVS     r0,#0x61
000344  f88d0006          STRB     r0,[sp,#6]
;;;616    	temp_out[3]='d';
000348  2064              MOVS     r0,#0x64
00034a  f88d0007          STRB     r0,[sp,#7]
;;;617    	temp_out[4]=*((char*)&ptr);
00034e  f89d0020          LDRB     r0,[sp,#0x20]
000352  f88d0008          STRB     r0,[sp,#8]
;;;618    	temp_out[5]=*(((char*)&ptr)+1);	
000356  f89d0021          LDRB     r0,[sp,#0x21]
00035a  f88d0009          STRB     r0,[sp,#9]
;;;619    	temp_out[6]=*((char*)&data1);
00035e  f89d001c          LDRB     r0,[sp,#0x1c]
000362  f88d000a          STRB     r0,[sp,#0xa]
;;;620    	temp_out[7]=*(((char*)&data1)+1);		
000366  f89d001d          LDRB     r0,[sp,#0x1d]
00036a  f88d000b          STRB     r0,[sp,#0xb]
;;;621    	temp_out[8]=*(((char*)&data1)+2);	
00036e  f89d001e          LDRB     r0,[sp,#0x1e]
000372  f88d000c          STRB     r0,[sp,#0xc]
;;;622    	temp_out[9]=*(((char*)&data1)+3);		
000376  f89d001f          LDRB     r0,[sp,#0x1f]
00037a  f88d000d          STRB     r0,[sp,#0xd]
;;;623    	temp_out[10]=*((char*)&data2);
00037e  f89d0018          LDRB     r0,[sp,#0x18]
000382  f88d000e          STRB     r0,[sp,#0xe]
;;;624    	temp_out[11]=*(((char*)&data2)+1);		
000386  f89d0019          LDRB     r0,[sp,#0x19]
00038a  f88d000f          STRB     r0,[sp,#0xf]
;;;625    	temp_out[12]=*(((char*)&data2)+2);	
00038e  f89d001a          LDRB     r0,[sp,#0x1a]
000392  f88d0010          STRB     r0,[sp,#0x10]
;;;626    	temp_out[13]=*(((char*)&data2)+3);	
000396  f89d001b          LDRB     r0,[sp,#0x1b]
00039a  f88d0011          STRB     r0,[sp,#0x11]
;;;627    	temp_out[14]=crc_87(temp_out,14);	
00039e  210e              MOVS     r1,#0xe
0003a0  a801              ADD      r0,sp,#4
0003a2  f7fffffe          BL       crc_87
0003a6  f88d0012          STRB     r0,[sp,#0x12]
;;;628    	temp_out[15]=crc_95(temp_out,14);			
0003aa  210e              MOVS     r1,#0xe
0003ac  a801              ADD      r0,sp,#4
0003ae  f7fffffe          BL       crc_95
0003b2  f88d0013          STRB     r0,[sp,#0x13]
;;;629    	uart_out_adr0(temp_out,16);
0003b6  2110              MOVS     r1,#0x10
0003b8  a801              ADD      r0,sp,#4
0003ba  f7fffffe          BL       uart_out_adr0
                  |L1.958|
;;;630    	}
;;;631    
;;;632    
;;;633    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
0003be  7820              LDRB     r0,[r4,#0]  ; UIB0
0003c0  2877              CMP      r0,#0x77
0003c2  d17e              BNE      |L1.1218|
0003c4  7860              LDRB     r0,[r4,#1]  ; UIB0
0003c6  2872              CMP      r0,#0x72
0003c8  d17b              BNE      |L1.1218|
0003ca  78a0              LDRB     r0,[r4,#2]  ; UIB0
0003cc  2869              CMP      r0,#0x69
0003ce  d178              BNE      |L1.1218|
0003d0  78e0              LDRB     r0,[r4,#3]  ; UIB0
0003d2  2874              CMP      r0,#0x74
0003d4  d175              BNE      |L1.1218|
0003d6  7920              LDRB     r0,[r4,#4]  ; UIB0
0003d8  2865              CMP      r0,#0x65
0003da  d172              BNE      |L1.1218|
0003dc  4812              LDR      r0,|L1.1064|
0003de  210f              MOVS     r1,#0xf
0003e0  3864              SUBS     r0,r0,#0x64
0003e2  f7fffffe          BL       crc_87
0003e6  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
0003e8  4288              CMP      r0,r1
0003ea  d16a              BNE      |L1.1218|
0003ec  480e              LDR      r0,|L1.1064|
0003ee  210f              MOVS     r1,#0xf
0003f0  3864              SUBS     r0,r0,#0x64
0003f2  f7fffffe          BL       crc_95
0003f6  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
0003f8  4288              CMP      r0,r1
0003fa  d179              BNE      |L1.1264|
;;;634    	{
;;;635    	unsigned short ptr;
;;;636    	unsigned long data1,data2;
;;;637    	char temp_out[20];
;;;638    	ptr=UIB0[5]+(UIB0[6]*256U);
0003fc  7960              LDRB     r0,[r4,#5]  ; UIB0
0003fe  79a1              LDRB     r1,[r4,#6]  ; UIB0
000400  e02a              B        |L1.1112|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      Table87
                  |L1.1032|
                          DCD      Table95
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      0x4000c000
                  |L1.1044|
                          DCD      ||.bss||+0x464
                  |L1.1048|
                          DCD      0x4002c000
                  |L1.1052|
                          DCD      0x400fc000
                  |L1.1056|
                          DCD      SystemFrequency
                  |L1.1060|
                          DCD      0x40010000
                  |L1.1064|
                          DCD      ||.bss||+0x64
                  |L1.1068|
                          DCD      plazma_bat_drv0
                  |L1.1072|
                          DCD      modbus_plazma
                  |L1.1076|
                          DCD      sacredSunRequestPhase
                  |L1.1080|
                          DCD      bat_drv_rx_cnt
                  |L1.1084|
                          DCD      modbus_rx_buffer
                  |L1.1088|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1092|
                          DCD      modbus_timeout_cnt
                  |L1.1096|
                          DCD      bat_drv_rx_buff
                  |L1.1100|
                          DCD      sacredSunBatteryInBuff
                  |L1.1104|
                          DCD      sacredSunSilentCnt
                  |L1.1108|
                          DCD      plazma_bat_drv1
                  |L1.1112|
000458  eb002001          ADD      r0,r0,r1,LSL #8
00045c  b280              UXTH     r0,r0
00045e  4605              MOV      r5,r0
000460  9008              STR      r0,[sp,#0x20]
;;;639    	*((char*)&data1)=UIB0[7];
000462  79e0              LDRB     r0,[r4,#7]  ; UIB0
000464  f88d001c          STRB     r0,[sp,#0x1c]
;;;640    	*(((char*)&data1)+1)=UIB0[8];
000468  7a20              LDRB     r0,[r4,#8]  ; UIB0
00046a  f88d001d          STRB     r0,[sp,#0x1d]
;;;641    	*(((char*)&data1)+2)=UIB0[9];
00046e  7a60              LDRB     r0,[r4,#9]  ; UIB0
000470  f88d001e          STRB     r0,[sp,#0x1e]
;;;642    	*(((char*)&data1)+3)=UIB0[10];
000474  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
000476  f88d001f          STRB     r0,[sp,#0x1f]
;;;643    	*((char*)&data2)=UIB0[11];
00047a  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
00047c  f88d0018          STRB     r0,[sp,#0x18]
;;;644    	*(((char*)&data2)+1)=UIB0[12];
000480  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
000482  f88d0019          STRB     r0,[sp,#0x19]
;;;645    	*(((char*)&data2)+2)=UIB0[13];
000486  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
000488  f88d001a          STRB     r0,[sp,#0x1a]
;;;646    	*(((char*)&data2)+3)=UIB0[14];	
00048c  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
00048e  f88d001b          STRB     r0,[sp,#0x1b]
;;;647    	lc640_write_long(ptr,data1);
000492  4628              MOV      r0,r5
000494  9907              LDR      r1,[sp,#0x1c]
000496  f7fffffe          BL       lc640_write_long
;;;648    	lc640_write_long(ptr+4,data2);
00049a  1d28              ADDS     r0,r5,#4
00049c  9906              LDR      r1,[sp,#0x18]
00049e  f7fffffe          BL       lc640_write_long
;;;649    	
;;;650    	//data1=lc640_read_long(ptr);
;;;651    	//data2=lc640_read_long(ptr+4);
;;;652    	temp_out[0]='w';
0004a2  2077              MOVS     r0,#0x77
0004a4  f88d0004          STRB     r0,[sp,#4]
;;;653    	temp_out[1]='r';
0004a8  f88d6005          STRB     r6,[sp,#5]
;;;654    	temp_out[2]='i';
0004ac  2069              MOVS     r0,#0x69
0004ae  f88d0006          STRB     r0,[sp,#6]
;;;655    	temp_out[3]='t';
0004b2  2074              MOVS     r0,#0x74
0004b4  f88d0007          STRB     r0,[sp,#7]
;;;656    	temp_out[4]='e';
0004b8  f88d7008          STRB     r7,[sp,#8]
;;;657    	temp_out[5]=*((char*)&ptr);
0004bc  f89d0020          LDRB     r0,[sp,#0x20]
0004c0  e000              B        |L1.1220|
                  |L1.1218|
0004c2  e015              B        |L1.1264|
                  |L1.1220|
0004c4  f88d0009          STRB     r0,[sp,#9]
;;;658    	temp_out[6]=*(((char*)&ptr)+1);	
0004c8  f89d0021          LDRB     r0,[sp,#0x21]
0004cc  f88d000a          STRB     r0,[sp,#0xa]
;;;659    	/*temp_out[6]=*((char*)&data1);
;;;660    	temp_out[7]=*(((char*)&data1)+1);		
;;;661    	temp_out[8]=*(((char*)&data1)+2);	
;;;662    	temp_out[9]=*(((char*)&data1)+3);		
;;;663    	temp_out[10]=*((char*)&data2);
;;;664    	temp_out[11]=*(((char*)&data2)+1);		
;;;665    	temp_out[12]=*(((char*)&data2)+2);	
;;;666    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;667    	temp_out[7]=crc_87(temp_out,7);	
0004d0  2107              MOVS     r1,#7
0004d2  a801              ADD      r0,sp,#4
0004d4  f7fffffe          BL       crc_87
0004d8  f88d000b          STRB     r0,[sp,#0xb]
;;;668    	temp_out[8]=crc_95(temp_out,7);			
0004dc  2107              MOVS     r1,#7
0004de  a801              ADD      r0,sp,#4
0004e0  f7fffffe          BL       crc_95
0004e4  f88d000c          STRB     r0,[sp,#0xc]
;;;669    	uart_out_adr0(temp_out,9);
0004e8  2109              MOVS     r1,#9
0004ea  a801              ADD      r0,sp,#4
0004ec  f7fffffe          BL       uart_out_adr0
                  |L1.1264|
;;;670    	}
;;;671    
;;;672    }
0004f0  b009              ADD      sp,sp,#0x24
0004f2  bdf0              POP      {r4-r7,pc}
;;;673    
                          ENDP

                  index_offset0 PROC
;;;676    //-----------------------------------------------
;;;677    signed short index_offset0 (signed short index,signed short offset)
0004f4  4408              ADD      r0,r0,r1
;;;678    {
;;;679    index=index+offset;
0004f6  b200              SXTH     r0,r0
;;;680    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
0004f8  f5b06f80          CMP      r0,#0x400
0004fc  db02              BLT      |L1.1284|
0004fe  f5a06080          SUB      r0,r0,#0x400
000502  b200              SXTH     r0,r0
                  |L1.1284|
;;;681    if(index<0) index+=RX_BUFFER_SIZE0;
000504  2800              CMP      r0,#0
000506  da02              BGE      |L1.1294|
000508  f5006080          ADD      r0,r0,#0x400
00050c  b200              SXTH     r0,r0
                  |L1.1294|
;;;682    return index;
;;;683    }
00050e  4770              BX       lr
;;;684    
                          ENDP

                  control_check0 PROC
;;;685    //-----------------------------------------------
;;;686    char control_check0(signed short index)
000510  b570              PUSH     {r4-r6,lr}
;;;687    {
000512  4606              MOV      r6,r0
;;;688    char i=0,ii=0,iii;
000514  2200              MOVS     r2,#0
;;;689    
;;;690    if(rx_buffer0[index]!=END) goto error_cc;
000516  4d3b              LDR      r5,|L1.1540|
000518  5da8              LDRB     r0,[r5,r6]
00051a  280a              CMP      r0,#0xa
00051c  d11b              BNE      |L1.1366|
;;;691    
;;;692    ii=rx_buffer0[index_offset0(index,-2)];
00051e  1e91              SUBS     r1,r2,#2
000520  4630              MOV      r0,r6
000522  f7fffffe          BL       index_offset0
000526  5c2c              LDRB     r4,[r5,r0]
;;;693    iii=0;
000528  2300              MOVS     r3,#0
;;;694    for(i=0;i<=ii;i++)
00052a  e008              B        |L1.1342|
                  |L1.1324|
;;;695    	{
;;;696    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
00052c  1b11              SUBS     r1,r2,r4
00052e  1e89              SUBS     r1,r1,#2
000530  4630              MOV      r0,r6
000532  f7fffffe          BL       index_offset0
000536  5c28              LDRB     r0,[r5,r0]
000538  4043              EORS     r3,r3,r0
00053a  1c52              ADDS     r2,r2,#1              ;694
00053c  b2d2              UXTB     r2,r2                 ;694
                  |L1.1342|
00053e  42a2              CMP      r2,r4                 ;694
000540  d9f4              BLS      |L1.1324|
;;;697    	}
;;;698    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
000542  f04f31ff          MOV      r1,#0xffffffff
000546  4630              MOV      r0,r6
000548  f7fffffe          BL       index_offset0
00054c  5c28              LDRB     r0,[r5,r0]
00054e  4298              CMP      r0,r3
000550  d101              BNE      |L1.1366|
;;;699    
;;;700    
;;;701    //success_cc:
;;;702    return 1;
000552  2001              MOVS     r0,#1
;;;703    error_cc:
;;;704    return 0;
;;;705    
;;;706    }
000554  bd70              POP      {r4-r6,pc}
                  |L1.1366|
000556  2000              MOVS     r0,#0                 ;704
000558  bd70              POP      {r4-r6,pc}
;;;707    
                          ENDP

                  uart_in0 PROC
;;;708    //-----------------------------------------------
;;;709    void uart_in0(void)
00055a  e92d41f0          PUSH     {r4-r8,lr}
;;;710    {
;;;711    char temp,i/*,count*/;
;;;712    
;;;713    //__disable_irq();
;;;714    
;;;715    if(rx_buffer_overflow0)
00055e  4d2a              LDR      r5,|L1.1544|
000560  2700              MOVS     r7,#0
000562  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
000564  b118              CBZ      r0,|L1.1390|
;;;716    	{
;;;717    	rx_wr_index0=0;
000566  80af              STRH     r7,[r5,#4]
;;;718    	rx_rd_index0=0;
000568  80ef              STRH     r7,[r5,#6]
;;;719    	rx_counter0=0;
00056a  812f              STRH     r7,[r5,#8]
;;;720    	rx_buffer_overflow0=0;
00056c  70af              STRB     r7,[r5,#2]
                  |L1.1390|
;;;721    	}    
;;;722    	
;;;723    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
00056e  8928              LDRH     r0,[r5,#8]  ; rx_counter0
000570  2800              CMP      r0,#0
000572  d038              BEQ      |L1.1510|
000574  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000576  f04f32ff          MOV      r2,#0xffffffff
00057a  4611              MOV      r1,r2
00057c  b200              SXTH     r0,r0
00057e  f7fffffe          BL       index_offset0
000582  4e20              LDR      r6,|L1.1540|
000584  5c30              LDRB     r0,[r6,r0]
000586  280a              CMP      r0,#0xa
000588  d12d              BNE      |L1.1510|
;;;724    	{
;;;725    	
;;;726         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
00058a  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00058c  f06f0102          MVN      r1,#2
000590  b200              SXTH     r0,r0
000592  f7fffffe          BL       index_offset0
000596  5c34              LDRB     r4,[r6,r0]
;;;727        	if(temp<100) 
000598  2c64              CMP      r4,#0x64
00059a  d224              BCS      |L1.1510|
;;;728        		{
;;;729        		if(control_check0(index_offset0(rx_wr_index0,-1)))
00059c  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00059e  4611              MOV      r1,r2
0005a0  b200              SXTH     r0,r0
0005a2  f7fffffe          BL       index_offset0
0005a6  f7fffffe          BL       control_check0
0005aa  2800              CMP      r0,#0
0005ac  d01b              BEQ      |L1.1510|
;;;730        			{
;;;731        		
;;;732        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
0005ae  1ce0              ADDS     r0,r4,#3
0005b0  4241              RSBS     r1,r0,#0
0005b2  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0005b4  b200              SXTH     r0,r0
0005b6  f7fffffe          BL       index_offset0
0005ba  80e8              STRH     r0,[r5,#6]
;;;733        			for(i=0;i<temp;i++)
0005bc  2200              MOVS     r2,#0
;;;734    				{
;;;735    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
0005be  f1a60364          SUB      r3,r6,#0x64
0005c2  e008              B        |L1.1494|
                  |L1.1476|
0005c4  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
0005c6  4611              MOV      r1,r2
0005c8  b200              SXTH     r0,r0
0005ca  f7fffffe          BL       index_offset0
0005ce  5c30              LDRB     r0,[r6,r0]
0005d0  5498              STRB     r0,[r3,r2]
0005d2  1c52              ADDS     r2,r2,#1              ;733
0005d4  b2d2              UXTB     r2,r2                 ;733
                  |L1.1494|
0005d6  42a2              CMP      r2,r4                 ;733
0005d8  d3f4              BCC      |L1.1476|
;;;736    				} 
;;;737    			rx_rd_index0=rx_wr_index0;
0005da  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0005dc  80e8              STRH     r0,[r5,#6]
;;;738    			rx_counter0=0;
0005de  812f              STRH     r7,[r5,#8]
;;;739    			
;;;740    			uart_in_an0();
0005e0  e8bd41f0          POP      {r4-r8,lr}
0005e4  e7fe              B        uart_in_an0
                  |L1.1510|
;;;741        			}
;;;742     	
;;;743        		} 
;;;744        	}	
;;;745    
;;;746    
;;;747    //__enable_irq();     
;;;748    }   	
0005e6  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0005ea  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
0005ee  2101              MOVS     r1,#1
0005f0  4091              LSLS     r1,r1,r2
0005f2  0940              LSRS     r0,r0,#5
0005f4  f04f22e0          MOV      r2,#0xe000e000
0005f8  eb020080          ADD      r0,r2,r0,LSL #2
0005fc  f8c01100          STR      r1,[r0,#0x100]
;;;1099   }
000600  4770              BX       lr
;;;1100   
                          ENDP

000602  0000              DCW      0x0000
                  |L1.1540|
                          DCD      ||.bss||+0x64
                  |L1.1544|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;80     
;;;81     for(j=1;j<num;j++)
000004  cde0              LDM      r5,{r5-r7}
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  2400              MOVS     r4,#0
000008  f88d1000          STRB     r1,[sp,#0]            ;81
00000c  f88d2001          STRB     r2,[sp,#1]
000010  f88d3002          STRB     r3,[sp,#2]
000014  f88d5003          STRB     r5,[sp,#3]            ;81
000018  f88d6004          STRB     r6,[sp,#4]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
00001c  f88d7005          STRB     r7,[sp,#5]
000020  2100              MOVS     r1,#0
000022  466d              MOV      r5,sp
000024  e003              B        |L2.46|
                  |L2.38|
000026  5c6a              LDRB     r2,[r5,r1]
000028  4054              EORS     r4,r4,r2
00002a  1c49              ADDS     r1,r1,#1
00002c  b2c9              UXTB     r1,r1
                  |L2.46|
00002e  4281              CMP      r1,r0
000030  d3f9              BCC      |L2.38|
000032  5428              STRB     r0,[r5,r0]
000034  5c2a              LDRB     r2,[r5,r0]
000036  4062              EORS     r2,r2,r4
000038  1829              ADDS     r1,r5,r0
00003a  704a              STRB     r2,[r1,#1]
00003c  220a              MOVS     r2,#0xa
00003e  708a              STRB     r2,[r1,#2]
000040  2400              MOVS     r4,#0
000042  1cc6              ADDS     r6,r0,#3
000044  e004              B        |L2.80|
                  |L2.70|
000046  5d28              LDRB     r0,[r5,r4]
000048  f7fffffe          BL       putchar0
00004c  1c64              ADDS     r4,r4,#1
00004e  b2e4              UXTB     r4,r4
                  |L2.80|
000050  42b4              CMP      r4,r6
000052  d3f8              BCC      |L2.70|
000054  bdff              POP      {r0-r7,pc}
;;;89     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out_buff0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  460d              MOV      r5,r1
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  2100              MOVS     r1,#0
000008  466e              MOV      r6,sp                 ;81
00000a  e003              B        |L3.20|
                  |L3.12|
00000c  5c42              LDRB     r2,[r0,r1]
00000e  5472              STRB     r2,[r6,r1]
000010  1c49              ADDS     r1,r1,#1
000012  b2c9              UXTB     r1,r1                 ;81
                  |L3.20|
000014  42a9              CMP      r1,r5                 ;81
000016  d3f9              BCC      |L3.12|
000018  2400              MOVS     r4,#0                 ;81
;;;85     	}
;;;86     
;;;87     return r;	
00001a  e004              B        |L3.38|
                  |L3.28|
;;;88     } 
00001c  5d30              LDRB     r0,[r6,r4]
00001e  f7fffffe          BL       putchar0
000022  1c64              ADDS     r4,r4,#1
000024  b2e4              UXTB     r4,r4
                  |L3.38|
000026  42ac              CMP      r4,r5
000028  d3f8              BCC      |L3.28|
00002a  b00f              ADD      sp,sp,#0x3c
00002c  bd70              POP      {r4-r6,pc}
;;;89     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  uart_out_adr_block PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b09a              SUB      sp,sp,#0x68
;;;80     
;;;81     for(j=1;j<num;j++)
000004  460f              MOV      r7,r1
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  4616              MOV      r6,r2
000008  2164              MOVS     r1,#0x64              ;81
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
000010  2016              MOVS     r0,#0x16
000012  f7fffffe          BL       putchar0
000016  200a              MOVS     r0,#0xa               ;81
000018  f7fffffe          BL       putchar0
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
00001c  f89d0068          LDRB     r0,[sp,#0x68]
000020  f080051c          EOR      r5,r0,#0x1c
000024  f7fffffe          BL       putchar0
000028  f89d0069          LDRB     r0,[sp,#0x69]
00002c  4045              EORS     r5,r5,r0
00002e  f7fffffe          BL       putchar0
000032  f89d006a          LDRB     r0,[sp,#0x6a]
000036  4045              EORS     r5,r5,r0
000038  f7fffffe          BL       putchar0
00003c  f89d006b          LDRB     r0,[sp,#0x6b]
000040  4045              EORS     r5,r5,r0
000042  f7fffffe          BL       putchar0
000046  2400              MOVS     r4,#0
000048  e004              B        |L4.84|
                  |L4.74|
00004a  5d38              LDRB     r0,[r7,r4]
00004c  4045              EORS     r5,r5,r0
00004e  f7fffffe          BL       putchar0
000052  1c64              ADDS     r4,r4,#1
                  |L4.84|
000054  42b4              CMP      r4,r6
000056  d3f8              BCC      |L4.74|
000058  1db6              ADDS     r6,r6,#6
00005a  b2f0              UXTB     r0,r6
00005c  4045              EORS     r5,r5,r0
00005e  f7fffffe          BL       putchar0
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       putchar0
000068  b01d              ADD      sp,sp,#0x74
00006a  e8bd40f0          POP      {r4-r7,lr}
00006e  200a              MOVS     r0,#0xa
000070  f7ffbffe          B.W      putchar0
;;;89     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  rs232_data_out_1 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  481d              LDR      r0,|L5.124|
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;81
00000c  481c              LDR      r0,|L5.128|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481b              LDR      r0,|L5.132|
000016  8800              LDRH     r0,[r0,#0]            ;81  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
00001c  481a              LDR      r0,|L5.136|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  4819              LDR      r0,|L5.140|
000026  8800              LDRH     r0,[r0,#0]  ; net_U
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  4818              LDR      r0,|L5.144|
00002e  8800              LDRH     r0,[r0,#0]  ; net_F
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  4817              LDR      r0,|L5.148|
000036  8800              LDRH     r0,[r0,#0]  ; t_ext
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  4816              LDR      r0,|L5.152|
00003e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000040  f8ad100e          STRH     r1,[sp,#0xe]
000044  6a41              LDR      r1,[r0,#0x24]  ; bps
000046  f8ad1010          STRH     r1,[sp,#0x10]
00004a  6a81              LDR      r1,[r0,#0x28]  ; bps
00004c  f8ad1012          STRH     r1,[sp,#0x12]
000050  7841              LDRB     r1,[r0,#1]  ; bps
000052  f8ad1014          STRH     r1,[sp,#0x14]
000056  6f01              LDR      r1,[r0,#0x70]  ; bps
000058  f8ad1016          STRH     r1,[sp,#0x16]
00005c  6f81              LDR      r1,[r0,#0x78]  ; bps
00005e  f8ad1018          STRH     r1,[sp,#0x18]
000062  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000064  f8ad101a          STRH     r1,[sp,#0x1a]
000068  f8900055          LDRB     r0,[r0,#0x55]  ; bps
00006c  f8ad001c          STRH     r0,[sp,#0x1c]
000070  211e              MOVS     r1,#0x1e
000072  4668              MOV      r0,sp
000074  f7fffffe          BL       uart_out_adr0
000078  b00f              ADD      sp,sp,#0x3c
00007a  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L5.124|
                          DCD      avar_stat
                  |L5.128|
                          DCD      spc_stat
                  |L5.132|
                          DCD      load_U
                  |L5.136|
                          DCD      load_I
                  |L5.140|
                          DCD      net_U
                  |L5.144|
                          DCD      net_F
                  |L5.148|
                          DCD      t_ext
                  |L5.152|
                          DCD      bps

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  rs232_data_out PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  4821              LDR      r0,|L6.140|
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;81
00000c  4820              LDR      r0,|L6.144|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481f              LDR      r0,|L6.148|
000016  8800              LDRH     r0,[r0,#0]            ;81  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
00001c  481e              LDR      r0,|L6.152|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  481d              LDR      r0,|L6.156|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  481c              LDR      r0,|L6.160|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  481b              LDR      r0,|L6.164|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  481a              LDR      r0,|L6.168|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  4819              LDR      r0,|L6.172|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  4818              LDR      r0,|L6.176|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f01              LDR      r1,[r0,#0x70]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  6f81              LDR      r1,[r0,#0x78]  ; bps
00006e  f8ad101c          STRH     r1,[sp,#0x1c]
000072  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000074  f8ad101e          STRH     r1,[sp,#0x1e]
000078  f8900055          LDRB     r0,[r0,#0x55]  ; bps
00007c  f8ad0020          STRH     r0,[sp,#0x20]
000080  2122              MOVS     r1,#0x22
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       uart_out_adr0
000088  b00f              ADD      sp,sp,#0x3c
00008a  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L6.140|
                          DCD      avar_stat
                  |L6.144|
                          DCD      spc_stat
                  |L6.148|
                          DCD      load_U
                  |L6.152|
                          DCD      load_I
                  |L6.156|
                          DCD      net_Ua
                  |L6.160|
                          DCD      net_Ub
                  |L6.164|
                          DCD      net_Uc
                  |L6.168|
                          DCD      net_F3
                  |L6.172|
                          DCD      t_ext
                  |L6.176|
                          DCD      bps

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  rs232_data_out_tki PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  4833              LDR      r0,|L7.212|
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;81
00000c  4832              LDR      r0,|L7.216|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4831              LDR      r0,|L7.220|
000016  8800              LDRH     r0,[r0,#0]            ;81  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
00001c  4830              LDR      r0,|L7.224|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  482f              LDR      r0,|L7.228|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  482e              LDR      r0,|L7.232|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  482d              LDR      r0,|L7.236|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  482c              LDR      r0,|L7.240|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  482b              LDR      r0,|L7.244|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  482a              LDR      r0,|L7.248|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f01              LDR      r1,[r0,#0x70]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  6f81              LDR      r1,[r0,#0x78]  ; bps
00006e  f8ad101c          STRH     r1,[sp,#0x1c]
000072  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000074  f8ad101e          STRH     r1,[sp,#0x1e]
000078  f8901055          LDRB     r1,[r0,#0x55]  ; bps
00007c  f8ad1020          STRH     r1,[sp,#0x20]
000080  f8d010c4          LDR      r1,[r0,#0xc4]  ; bps
000084  f8ad1022          STRH     r1,[sp,#0x22]
000088  f8d010cc          LDR      r1,[r0,#0xcc]  ; bps
00008c  f8ad1024          STRH     r1,[sp,#0x24]
000090  f8d010d0          LDR      r1,[r0,#0xd0]  ; bps
000094  f8ad1026          STRH     r1,[sp,#0x26]
000098  f89010a9          LDRB     r1,[r0,#0xa9]  ; bps
00009c  f8ad1028          STRH     r1,[sp,#0x28]
0000a0  f8d01118          LDR      r1,[r0,#0x118]  ; bps
0000a4  f8ad102a          STRH     r1,[sp,#0x2a]
0000a8  f8d01120          LDR      r1,[r0,#0x120]  ; bps
0000ac  f8ad102c          STRH     r1,[sp,#0x2c]
0000b0  f8d01124          LDR      r1,[r0,#0x124]  ; bps
0000b4  f8ad102e          STRH     r1,[sp,#0x2e]
0000b8  f89000fd          LDRB     r0,[r0,#0xfd]  ; bps
0000bc  f8ad0030          STRH     r0,[sp,#0x30]
0000c0  480e              LDR      r0,|L7.252|
0000c2  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0000c4  f8ad0032          STRH     r0,[sp,#0x32]
0000c8  2134              MOVS     r1,#0x34
0000ca  4668              MOV      r0,sp
0000cc  f7fffffe          BL       uart_out_adr0
0000d0  b00f              ADD      sp,sp,#0x3c
0000d2  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L7.212|
                          DCD      avar_stat
                  |L7.216|
                          DCD      spc_stat
                  |L7.220|
                          DCD      load_U
                  |L7.224|
                          DCD      load_I
                  |L7.228|
                          DCD      net_Ua
                  |L7.232|
                          DCD      net_Ub
                  |L7.236|
                          DCD      net_Uc
                  |L7.240|
                          DCD      net_F3
                  |L7.244|
                          DCD      t_ext
                  |L7.248|
                          DCD      bps
                  |L7.252|
                          DCD      Ib_ips_termokompensat

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  getchar0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  4b08              LDR      r3,|L8.36|
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  8919              LDRH     r1,[r3,#8]
                  |L8.4|
;;;80     
;;;81     for(j=1;j<num;j++)
000004  2900              CMP      r1,#0
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000006  d0fd              BEQ      |L8.4|
000008  4807              LDR      r0,|L8.40|
00000a  88da              LDRH     r2,[r3,#6]  ; rx_rd_index0
00000c  5c80              LDRB     r0,[r0,r2]
00000e  1c52              ADDS     r2,r2,#1
000010  b292              UXTH     r2,r2
000012  80da              STRH     r2,[r3,#6]            ;81
000014  f5b26f80          CMP      r2,#0x400             ;81
000018  d101              BNE      |L8.30|
;;;85     	}
;;;86     
;;;87     return r;	
00001a  2200              MOVS     r2,#0
;;;88     } 
00001c  80da              STRH     r2,[r3,#6]
                  |L8.30|
00001e  1e49              SUBS     r1,r1,#1
000020  8119              STRH     r1,[r3,#8]
000022  4770              BX       lr
;;;89     
                          ENDP

                  |L8.36|
                          DCD      ||.data||
                  |L8.40|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.14||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  flag0
000000  00                DCB      0x00
