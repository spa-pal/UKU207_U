; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\sc16is7xx.o --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  488b              LDR      r0,|L1.560|
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  4882              LDR      r0,|L1.564|
00002c  2114              MOVS     r1,#0x14
00002e  60c1              STR      r1,[r0,#0xc]
;;;30     LPC_SPI->SPCR=0x20;
000030  2120              MOVS     r1,#0x20
000032  6001              STR      r1,[r0,#0]
;;;31     }
000034  4770              BX       lr
;;;32     
                          ENDP

                  sc16is700_wr_buff PROC
;;;34     //Отправка num байт из программного буфера передачи в sc16is700
;;;35     void sc16is700_wr_buff(char reg_num,char num)
000036  e92d41f0          PUSH     {r4-r8,lr}
;;;36     {
00003a  4602              MOV      r2,r0
00003c  460e              MOV      r6,r1
;;;37     short i;
;;;38     sc16is700_spi_init();
00003e  f7fffffe          BL       sc16is700_spi_init
;;;39     delay_us(2);
000042  2018              MOVS     r0,#0x18
                  |L1.68|
000044  1e40              SUBS     r0,r0,#1
000046  2800              CMP      r0,#0
000048  d1fc              BNE      |L1.68|
;;;40     sc16is700_CS_ON 
00004a  4f7b              LDR      r7,|L1.568|
00004c  6838              LDR      r0,[r7,#0]
00004e  f0400001          ORR      r0,r0,#1
000052  6038              STR      r0,[r7,#0]
000054  69f8              LDR      r0,[r7,#0x1c]
000056  f0400001          ORR      r0,r0,#1
00005a  61f8              STR      r0,[r7,#0x1c]
;;;41     spi1((reg_num&0x0f)<<3);
00005c  0710              LSLS     r0,r2,#28
00005e  0e40              LSRS     r0,r0,#25
000060  f7fffffe          BL       spi1
;;;42     for (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
000064  2400              MOVS     r4,#0
000066  4d75              LDR      r5,|L1.572|
000068  e004              B        |L1.116|
                  |L1.106|
00006a  5d28              LDRB     r0,[r5,r4]
00006c  f7fffffe          BL       spi1
000070  1c64              ADDS     r4,r4,#1
000072  b224              SXTH     r4,r4
                  |L1.116|
000074  42b4              CMP      r4,r6
000076  dbf8              BLT      |L1.106|
;;;43     sc16is700_CS_OFF
000078  6838              LDR      r0,[r7,#0]
00007a  f0400001          ORR      r0,r0,#1
00007e  6038              STR      r0,[r7,#0]
000080  69b8              LDR      r0,[r7,#0x18]
000082  f0400001          ORR      r0,r0,#1
000086  61b8              STR      r0,[r7,#0x18]
;;;44     }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;45     
                          ENDP

                  sc16is700_wr_byte PROC
;;;46     void sc16is700_wr_byte(char reg_num,char data)
00008c  b570              PUSH     {r4-r6,lr}
;;;47     {
00008e  4602              MOV      r2,r0
000090  460d              MOV      r5,r1
;;;48     sc16is700_spi_init();
000092  f7fffffe          BL       sc16is700_spi_init
;;;49     delay_us(2);
000096  2018              MOVS     r0,#0x18
                  |L1.152|
000098  1e40              SUBS     r0,r0,#1
00009a  2800              CMP      r0,#0
00009c  d1fc              BNE      |L1.152|
;;;50     sc16is700_CS_ON
00009e  4c66              LDR      r4,|L1.568|
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f0400001          ORR      r0,r0,#1
0000a6  6020              STR      r0,[r4,#0]
0000a8  69e0              LDR      r0,[r4,#0x1c]
0000aa  f0400001          ORR      r0,r0,#1
0000ae  61e0              STR      r0,[r4,#0x1c]
;;;51     spi1((reg_num&0x0f)<<3);
0000b0  0710              LSLS     r0,r2,#28
0000b2  0e40              LSRS     r0,r0,#25
0000b4  f7fffffe          BL       spi1
;;;52     spi1(data);
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       spi1
;;;53     sc16is700_CS_OFF
0000be  6820              LDR      r0,[r4,#0]
0000c0  f0400001          ORR      r0,r0,#1
0000c4  6020              STR      r0,[r4,#0]
0000c6  69a0              LDR      r0,[r4,#0x18]
0000c8  f0400001          ORR      r0,r0,#1
0000cc  61a0              STR      r0,[r4,#0x18]
;;;54     }
0000ce  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  sc16is700_rd_byte PROC
;;;56     
;;;57     char sc16is700_rd_byte(char reg_num)
0000d0  b510              PUSH     {r4,lr}
;;;58     {
0000d2  4602              MOV      r2,r0
;;;59     char out;
;;;60     sc16is700_spi_init();
0000d4  f7fffffe          BL       sc16is700_spi_init
;;;61     delay_us(2);
0000d8  2018              MOVS     r0,#0x18
                  |L1.218|
0000da  1e40              SUBS     r0,r0,#1
0000dc  2800              CMP      r0,#0
0000de  d1fc              BNE      |L1.218|
;;;62     sc16is700_CS_ON
0000e0  4c55              LDR      r4,|L1.568|
0000e2  6820              LDR      r0,[r4,#0]
0000e4  f0400001          ORR      r0,r0,#1
0000e8  6020              STR      r0,[r4,#0]
0000ea  69e0              LDR      r0,[r4,#0x1c]
0000ec  f0400001          ORR      r0,r0,#1
0000f0  61e0              STR      r0,[r4,#0x1c]
;;;63     spi1(((reg_num&0x0f)<<3)|0x80);
0000f2  f002000f          AND      r0,r2,#0xf
0000f6  2180              MOVS     r1,#0x80
0000f8  ea4100c0          ORR      r0,r1,r0,LSL #3
0000fc  f7fffffe          BL       spi1
;;;64     out = spi1(0xff);
000100  20ff              MOVS     r0,#0xff
000102  f7fffffe          BL       spi1
000106  b2c0              UXTB     r0,r0
;;;65     sc16is700_CS_OFF
000108  6821              LDR      r1,[r4,#0]
00010a  f0410101          ORR      r1,r1,#1
00010e  6021              STR      r1,[r4,#0]
000110  69a1              LDR      r1,[r4,#0x18]
000112  f0410101          ORR      r1,r1,#1
000116  61a1              STR      r1,[r4,#0x18]
;;;66     return out;
;;;67     }
000118  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  sc16is700_init PROC
;;;88     
;;;89     void sc16is700_init(uint32_t baudrate)
00011a  b570              PUSH     {r4-r6,lr}
;;;90     {
;;;91     
;;;92     unsigned char baud_h,baud_l;
;;;93     
;;;94     baud_h = (char)((10000000U/16U/baudrate)>>8);
00011c  4948              LDR      r1,|L1.576|
00011e  fbb1f0f0          UDIV     r0,r1,r0
000122  f3c02407          UBFX     r4,r0,#8,#8
;;;95     baud_l = (char)((10000000U/16U/baudrate)); 
000126  b2c5              UXTB     r5,r0
;;;96     
;;;97     sc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
000128  2180              MOVS     r1,#0x80
00012a  2003              MOVS     r0,#3
00012c  f7fffffe          BL       sc16is700_wr_byte
;;;98     sc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
000130  4629              MOV      r1,r5
000132  2000              MOVS     r0,#0
000134  f7fffffe          BL       sc16is700_wr_byte
;;;99     sc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
000138  4621              MOV      r1,r4
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       sc16is700_wr_byte
;;;100    sc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
000140  21bf              MOVS     r1,#0xbf
000142  2003              MOVS     r0,#3
000144  f7fffffe          BL       sc16is700_wr_byte
;;;101    sc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
000148  2110              MOVS     r1,#0x10
00014a  2002              MOVS     r0,#2
00014c  f7fffffe          BL       sc16is700_wr_byte
;;;102    sc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
000150  2103              MOVS     r1,#3
000152  4608              MOV      r0,r1
000154  f7fffffe          BL       sc16is700_wr_byte
;;;103    sc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
000158  2106              MOVS     r1,#6
00015a  2002              MOVS     r0,#2
00015c  f7fffffe          BL       sc16is700_wr_byte
;;;104    sc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
000160  2101              MOVS     r1,#1
000162  2002              MOVS     r0,#2
000164  f7fffffe          BL       sc16is700_wr_byte
;;;105    sc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
000168  e8bd4070          POP      {r4-r6,lr}
00016c  2130              MOVS     r1,#0x30
00016e  200f              MOVS     r0,#0xf
000170  e7fe              B        sc16is700_wr_byte
;;;106    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;107    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;108    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;109    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;110    //sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
;;;111    }
;;;112    
                          ENDP

                  putchar_sc16is700 PROC
;;;131    //Посылка байта через sc16is700
;;;132    void putchar_sc16is700(char out_byte)
000172  4a34              LDR      r2,|L1.580|
;;;133    {
;;;134    tx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
000174  4b31              LDR      r3,|L1.572|
000176  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000178  5458              STRB     r0,[r3,r1]
;;;135    if (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
00017a  1c49              ADDS     r1,r1,#1
00017c  b2c8              UXTB     r0,r1
00017e  7090              STRB     r0,[r2,#2]
000180  2820              CMP      r0,#0x20
000182  d101              BNE      |L1.392|
000184  2000              MOVS     r0,#0
000186  7090              STRB     r0,[r2,#2]
                  |L1.392|
;;;136    }
000188  4770              BX       lr
;;;137    
                          ENDP

                  sc16is700_uart_hndl PROC
;;;140    //Обработчик sc16is700
;;;141    void sc16is700_uart_hndl(void)
00018a  e92d47f0          PUSH     {r4-r10,lr}
;;;142    {
;;;143    
;;;144    sc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
00018e  2009              MOVS     r0,#9
000190  f7fffffe          BL       sc16is700_rd_byte
000194  4e2b              LDR      r6,|L1.580|
000196  7030              STRB     r0,[r6,#0]
;;;145    
;;;146    if(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
000198  7830              LDRB     r0,[r6,#0]  ; sc16is700ByteAvailable
00019a  2500              MOVS     r5,#0                 ;144
00019c  b1f0              CBZ      r0,|L1.476|
;;;147    	{
;;;148    	char i;
;;;149    	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
00019e  2400              MOVS     r4,#0
;;;150    		{
;;;151    		if(!sc16is700RecieveDisableFlag)
;;;152    			{
;;;153    			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
0001a0  4f29              LDR      r7,|L1.584|
0001a2  f8df80a8          LDR      r8,|L1.588|
;;;154    			modbus_rx_buffer_ptr++;
;;;155    			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
0001a6  f8df90a8          LDR      r9,|L1.592|
0001aa  e012              B        |L1.466|
                  |L1.428|
0001ac  79b0              LDRB     r0,[r6,#6]            ;151  ; sc16is700RecieveDisableFlag
0001ae  b958              CBNZ     r0,|L1.456|
0001b0  2000              MOVS     r0,#0                 ;153
0001b2  f7fffffe          BL       sc16is700_rd_byte
0001b6  f8981000          LDRB     r1,[r8,#0]            ;153  ; modbus_rx_buffer_ptr
0001ba  5478              STRB     r0,[r7,r1]            ;153
0001bc  1c49              ADDS     r1,r1,#1              ;154
0001be  f8881000          STRB     r1,[r8,#0]            ;154
0001c2  f8895000          STRB     r5,[r9,#0]
0001c6  e002              B        |L1.462|
                  |L1.456|
;;;156    			}
;;;157    		else sc16is700_rd_byte(CS16IS7xx_RHR);
0001c8  2000              MOVS     r0,#0
0001ca  f7fffffe          BL       sc16is700_rd_byte
                  |L1.462|
0001ce  1c64              ADDS     r4,r4,#1              ;149
0001d0  b2e4              UXTB     r4,r4                 ;149
                  |L1.466|
0001d2  7830              LDRB     r0,[r6,#0]            ;149  ; sc16is700ByteAvailable
0001d4  4284              CMP      r4,r0                 ;149
0001d6  d201              BCS      |L1.476|
0001d8  2c05              CMP      r4,#5                 ;149
0001da  d3e7              BCC      |L1.428|
                  |L1.476|
;;;158    		}
;;;159    	}
;;;160    
;;;161    
;;;162    
;;;163    sc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
0001dc  2008              MOVS     r0,#8
0001de  f7fffffe          BL       sc16is700_rd_byte
0001e2  7070              STRB     r0,[r6,#1]
;;;164    
;;;165    if(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
0001e4  7870              LDRB     r0,[r6,#1]  ; sc16is700TxFifoLevel
0001e6  2840              CMP      r0,#0x40
0001e8  d000              BEQ      |L1.492|
0001ea  7135              STRB     r5,[r6,#4]
                  |L1.492|
;;;166    if(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
0001ec  d104              BNE      |L1.504|
;;;167    	{
;;;168    	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
0001ee  7930              LDRB     r0,[r6,#4]  ; sc16is700TxFifoEmptyCnt
0001f0  2805              CMP      r0,#5
0001f2  d201              BCS      |L1.504|
0001f4  1c40              ADDS     r0,r0,#1
0001f6  7130              STRB     r0,[r6,#4]
                  |L1.504|
;;;169    	}
;;;170    if(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
0001f8  7931              LDRB     r1,[r6,#4]  ; sc16is700TxFifoEmptyCnt
0001fa  2001              MOVS     r0,#1
0001fc  2905              CMP      r1,#5
0001fe  d101              BNE      |L1.516|
000200  7170              STRB     r0,[r6,#5]
000202  e000              B        |L1.518|
                  |L1.516|
;;;171    else sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
000204  7175              STRB     r5,[r6,#5]
                  |L1.518|
;;;172    
;;;173    
;;;174    if((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
000206  78b1              LDRB     r1,[r6,#2]  ; tx_wr_index_sc16is700
000208  b149              CBZ      r1,|L1.542|
00020a  78f2              LDRB     r2,[r6,#3]  ; tx_rd_index_sc16is700
00020c  4291              CMP      r1,r2
00020e  d006              BEQ      |L1.542|
;;;175    	{
;;;176    	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
000210  7972              LDRB     r2,[r6,#5]  ; sc16is700TxPossibleFlag
000212  b122              CBZ      r2,|L1.542|
;;;177    		{
;;;178    		//char i;
;;;179    		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
;;;180    			//{
;;;181    		sc16is700RecieveDisableFlag=1;
000214  71b0              STRB     r0,[r6,#6]
;;;182    		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
000216  2000              MOVS     r0,#0
000218  f7fffffe          BL       sc16is700_wr_buff
;;;183    			//}
;;;184    		tx_wr_index_sc16is700=0;
00021c  70b5              STRB     r5,[r6,#2]
                  |L1.542|
;;;185    		}
;;;186    	}
;;;187    
;;;188    if((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
00021e  2005              MOVS     r0,#5
000220  f7fffffe          BL       sc16is700_rd_byte
000224  0640              LSLS     r0,r0,#25
000226  d500              BPL      |L1.554|
000228  71b5              STRB     r5,[r6,#6]
                  |L1.554|
;;;189    
;;;190    
;;;191    }
00022a  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

00022e  0000              DCW      0x0000
                  |L1.560|
                          DCD      0x4002c000
                  |L1.564|
                          DCD      0x40020000
                  |L1.568|
                          DCD      0x2009c000
                  |L1.572|
                          DCD      ||.bss||
                  |L1.576|
                          DCD      0x00098968
                  |L1.580|
                          DCD      ||.data||
                  |L1.584|
                          DCD      modbus_rx_buffer
                  |L1.588|
                          DCD      modbus_rx_buffer_ptr
                  |L1.592|
                          DCD      modbus_timeout_cnt

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_init_ PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;30     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
;;;31     }
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;32     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00
