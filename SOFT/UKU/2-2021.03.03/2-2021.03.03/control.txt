; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;331    	{
;;;332    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;330  ; spc_stat
00000c  2802              CMP      r0,#2                 ;330
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;333    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;334    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;335    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;338  ; snmp_bat_status
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;338
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;338  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;338
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;340  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;340  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;340
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;340
000052  f9b01000          LDRSH    r1,[r0,#0]            ;342
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;343
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;342
000062  8021              STRH     r1,[r4,#0]            ;342
000064  07c0              LSLS     r0,r0,#31             ;343
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;345
00006a  2208              MOVS     r2,#8                 ;345
00006c  2105              MOVS     r1,#5                 ;345
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;346  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;346
00007a  8028              STRH     r0,[r5,#0]            ;346
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;351
000082  8021              STRH     r1,[r4,#0]            ;351
000084  07c0              LSLS     r0,r0,#31             ;352
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;354
00008a  2208              MOVS     r2,#8                 ;354
00008c  2105              MOVS     r1,#5                 ;354
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;355  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;355
00009a  8028              STRH     r0,[r5,#0]            ;355
                  |L1.156|
00009c  f8980043          LDRB     r0,[r8,#0x43]         ;359  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;359
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;361  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;361
0000aa  8021              STRH     r1,[r4,#0]            ;361
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;362  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;362
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;365
0000b8  8029              STRH     r1,[r5,#0]            ;365
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;370  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;370
0000c2  8021              STRH     r1,[r4,#0]            ;370
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;371  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;371
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;374
0000d0  8029              STRH     r1,[r5,#0]            ;374
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;378
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;380  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;380
0000dc  8020              STRH     r0,[r4,#0]            ;380
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;381  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;381
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;384
0000ea  8028              STRH     r0,[r5,#0]            ;384
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;389  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;389
0000f4  8020              STRH     r0,[r4,#0]            ;389
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;390  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;390
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;393
000102  8028              STRH     r0,[r5,#0]            ;393
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960024          LDRB     r0,[r6,#0x24]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;402  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;402
0001b6  8020              STRH     r0,[r4,#0]            ;402
0001b8  8828              LDRH     r0,[r5,#0]            ;403  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;403
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;405
0001c0  2208              MOVS     r2,#8                 ;405
0001c2  2105              MOVS     r1,#5                 ;405
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;406  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;406
0001d0  8028              STRH     r0,[r5,#0]            ;406
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;421  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;421
0001da  8020              STRH     r0,[r4,#0]            ;421
0001dc  8828              LDRH     r0,[r5,#0]            ;422  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;422
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;424
0001e4  461a              MOV      r2,r3                 ;424
0001e6  2105              MOVS     r1,#5                 ;424
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;425  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;425
0001f4  8028              STRH     r0,[r5,#0]            ;425
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;459  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;459
000272  8020              STRH     r0,[r4,#0]            ;459
000274  8828              LDRH     r0,[r5,#0]            ;460  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;460
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;462
00027c  2208              MOVS     r2,#8                 ;462
00027e  2105              MOVS     r1,#5                 ;462
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;463  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;463
00028c  8028              STRH     r0,[r5,#0]            ;463
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;574    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;813    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.25||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b81052          LDRSH    r1,[r8,#0x52]         ;579  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;579  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;579
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;579
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;581  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;581
0006e6  8060              STRH     r0,[r4,#2]            ;581
0006e8  8868              LDRH     r0,[r5,#2]            ;582  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;582
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;584
0006f0  2208              MOVS     r2,#8                 ;584
0006f2  2105              MOVS     r1,#5                 ;584
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;585  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;585
000700  8068              STRH     r0,[r5,#2]            ;585
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;590  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;590
00070a  8060              STRH     r0,[r4,#2]            ;590
00070c  8868              LDRH     r0,[r5,#2]            ;591  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;591
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;593
000714  2208              MOVS     r2,#8                 ;593
000716  2105              MOVS     r1,#5                 ;593
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;594  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;594
000724  8068              STRH     r0,[r5,#2]            ;594
                  |L1.1830|
000726  f8980093          LDRB     r0,[r8,#0x93]         ;598  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;598
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;600  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;600
000734  8061              STRH     r1,[r4,#2]            ;600
000736  8829              LDRH     r1,[r5,#0]            ;601  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;601
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;604  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;604
000742  8069              STRH     r1,[r5,#2]            ;604
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;609  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;609
00074c  8061              STRH     r1,[r4,#2]            ;609
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;610  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;610
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;613
00075a  8069              STRH     r1,[r5,#2]            ;613
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;617
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;619  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;619
000766  8060              STRH     r0,[r4,#2]            ;619
000768  f9b50002          LDRSH    r0,[r5,#2]            ;620  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;620
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;623
000774  8068              STRH     r0,[r5,#2]            ;623
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;628  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;628
00077e  8060              STRH     r0,[r4,#2]            ;628
000780  f9b50002          LDRSH    r0,[r5,#2]            ;629  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;629
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;632
00078c  8068              STRH     r0,[r5,#2]            ;632
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;636  ; IKB
000792  f9b80058          LDRSH    r0,[r8,#0x58]         ;636  ; bat
000796  424a              RSBS     r2,r1,#0              ;636
000798  4290              CMP      r0,r2                 ;636
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;636
0007a2  8060              STRH     r0,[r4,#2]            ;636
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;637
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;637  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;637
0007b0  8060              STRH     r0,[r4,#2]            ;637
                  |L1.1970|
0007b2  f8960023          LDRB     r0,[r6,#0x23]         ;639  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;639
0007b8  d102              BNE      |L1.1984|
0007ba  f8960024          LDRB     r0,[r6,#0x24]         ;639  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;650  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;650
0007c6  8060              STRH     r0,[r4,#2]            ;650
0007c8  8868              LDRH     r0,[r5,#2]            ;651  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;651
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;653
0007d0  2208              MOVS     r2,#8                 ;653
0007d2  2105              MOVS     r1,#5                 ;653
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;654  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;654
0007e0  8068              STRH     r0,[r5,#2]            ;654
                  |L1.2018|
0007e2  f8960023          LDRB     r0,[r6,#0x23]         ;658  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;658
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;669  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;669
0007f0  8060              STRH     r0,[r4,#2]            ;669
0007f2  8868              LDRH     r0,[r5,#2]            ;670  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;670
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;672
0007fa  2208              MOVS     r2,#8                 ;672
0007fc  2105              MOVS     r1,#5                 ;672
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;673  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;673
00080a  8068              STRH     r0,[r5,#2]            ;673
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;677  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;679  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;679
000816  8060              STRH     r0,[r4,#2]            ;679
000818  8868              LDRH     r0,[r5,#2]            ;680  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;680
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;682
000820  2208              MOVS     r2,#8                 ;682
000822  2105              MOVS     r1,#5                 ;682
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;683  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;683
000830  8068              STRH     r0,[r5,#2]            ;683
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;641  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;641
00083c  8060              STRH     r0,[r4,#2]            ;641
00083e  8868              LDRH     r0,[r5,#2]            ;642  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;642
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;644
000846  2208              MOVS     r2,#8                 ;644
000848  2105              MOVS     r1,#5                 ;644
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;645  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;645
000856  8068              STRH     r0,[r5,#2]            ;645
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;660  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;660
000860  8060              STRH     r0,[r4,#2]            ;660
000862  8868              LDRH     r0,[r5,#2]            ;661  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;661
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;663
00086a  2208              MOVS     r2,#8                 ;663
00086c  2105              MOVS     r1,#5                 ;663
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;664  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;664
00087a  8068              STRH     r0,[r5,#2]            ;664
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;688  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;688
000886  8060              STRH     r0,[r4,#2]            ;688
000888  8868              LDRH     r0,[r5,#2]            ;689  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;689
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;691
000890  2208              MOVS     r2,#8                 ;691
000892  2105              MOVS     r1,#5                 ;691
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;692  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;692
0008a0  8068              STRH     r0,[r5,#2]            ;692
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;696  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;696
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;707  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;707
0008b0  8060              STRH     r0,[r4,#2]            ;707
0008b2  8868              LDRH     r0,[r5,#2]            ;708  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;708
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;710
0008ba  2208              MOVS     r2,#8                 ;710
0008bc  2105              MOVS     r1,#5                 ;710
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;711  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;711
0008ca  8068              STRH     r0,[r5,#2]            ;711
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;715  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;717  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;717
0008d6  8060              STRH     r0,[r4,#2]            ;717
0008d8  8868              LDRH     r0,[r5,#2]            ;718  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;718
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;720
0008e0  2208              MOVS     r2,#8                 ;720
0008e2  2105              MOVS     r1,#5                 ;720
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;721  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;721
0008f0  8068              STRH     r0,[r5,#2]            ;721
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;698  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;698
0008fa  8060              STRH     r0,[r4,#2]            ;698
0008fc  8868              LDRH     r0,[r5,#2]            ;699  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;699
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;701
000904  2208              MOVS     r2,#8                 ;701
000906  2105              MOVS     r1,#5                 ;701
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;702  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;702
000914  8068              STRH     r0,[r5,#2]            ;702
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;726  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;726
00091e  8060              STRH     r0,[r4,#2]            ;726
000920  8868              LDRH     r0,[r5,#2]            ;727  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;727
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;729
000928  2208              MOVS     r2,#8                 ;729
00092a  2105              MOVS     r1,#5                 ;729
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;730  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;730
000938  8068              STRH     r0,[r5,#2]            ;730
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;734  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;736  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;736
000944  8060              STRH     r0,[r4,#2]            ;736
000946  8868              LDRH     r0,[r5,#2]            ;737  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;737
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;739
00094e  2208              MOVS     r2,#8                 ;739
000950  2105              MOVS     r1,#5                 ;739
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;740  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;740
00095e  8068              STRH     r0,[r5,#2]            ;740
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;745  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;745
000968  8060              STRH     r0,[r4,#2]            ;745
00096a  8868              LDRH     r0,[r5,#2]            ;746  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;746
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;748
000972  2208              MOVS     r2,#8                 ;748
000974  2105              MOVS     r1,#5                 ;748
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;749  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;749
000982  8068              STRH     r0,[r5,#2]            ;749
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;753  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;755  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;755
00098e  8060              STRH     r0,[r4,#2]            ;755
000990  8868              LDRH     r0,[r5,#2]            ;756  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;756
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;758
000998  2208              MOVS     r2,#8                 ;758
00099a  2105              MOVS     r1,#5                 ;758
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;759  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;759
0009a8  8068              STRH     r0,[r5,#2]            ;759
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;764  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;764
0009b2  8060              STRH     r0,[r4,#2]            ;764
0009b4  8868              LDRH     r0,[r5,#2]            ;765  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;765
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;767
0009bc  2208              MOVS     r2,#8                 ;767
0009be  2105              MOVS     r1,#5                 ;767
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;768  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;768
0009cc  8068              STRH     r0,[r5,#2]            ;768
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;772  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;774  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;774
0009d8  8060              STRH     r0,[r4,#2]            ;774
0009da  8868              LDRH     r0,[r5,#2]            ;775  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;775
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;777
0009e2  2208              MOVS     r2,#8                 ;777
0009e4  2105              MOVS     r1,#5                 ;777
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;778  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;778
0009f2  8068              STRH     r0,[r5,#2]            ;778
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;783  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;783
0009fc  8060              STRH     r0,[r4,#2]            ;783
0009fe  8868              LDRH     r0,[r5,#2]            ;784  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;784
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;786
000a06  2208              MOVS     r2,#8                 ;786
000a08  2105              MOVS     r1,#5                 ;786
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;787  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;787
000a16  8068              STRH     r0,[r5,#2]            ;787
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;791  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;793  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;793
000a22  8060              STRH     r0,[r4,#2]            ;793
000a24  8868              LDRH     r0,[r5,#2]            ;794  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;794
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;796
000a2e  2208              MOVS     r2,#8                 ;796
000a30  2105              MOVS     r1,#5                 ;796
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;797  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;797
000a3e  8068              STRH     r0,[r5,#2]            ;797
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;802  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;802
000a48  8060              STRH     r0,[r4,#2]            ;802
000a4a  8868              LDRH     r0,[r5,#2]            ;803  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;803
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;805
000a52  2208              MOVS     r2,#8                 ;805
000a54  2105              MOVS     r1,#5                 ;805
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;806  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;806
000a62  8068              STRH     r0,[r5,#2]            ;806
000a64  e4c7              B        |L1.1014|
;;;939    
                          ENDP

                  ke_start PROC
;;;942    //-----------------------------------------------
;;;943    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;944    {          
000a6a  4606              MOV      r6,r0
;;;945    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;946    /*
;;;947    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;948    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;949    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;950    #endif
;;;951    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;952    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;953    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;954    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;955    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;957    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;958    else */
;;;959    	{
;;;960    
;;;961    	ke_start_stat=kssYES;
000a72  f105050a          ADD      r5,r5,#0xa
000a76  f04f0064          MOV      r0,#0x64
000a7a  7768              STRB     r0,[r5,#0x1d]
;;;962    
;;;963    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  766f              STRB     r7,[r5,#0x19]
;;;964    	__ee_spc_stat=spcKE;
000a82  f8a57060          STRH     r7,[r5,#0x60]
;;;965    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;966    	
;;;967    	spc_bat=0;
000a90  76ac              STRB     r4,[r5,#0x1a]
;;;968    	__ee_spc_bat=0;
000a92  f8a54062          STRH     r4,[r5,#0x62]
;;;969    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;970    
;;;971    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c8401c          STR      r4,[r8,#0x1c]  ; bat
;;;972    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;973    
;;;974    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404e          STRH     r4,[r8,#0x4e]
;;;975    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;976    
;;;977    	
;;;978    	spc_phase=0;
000ac2  76ec              STRB     r4,[r5,#0x1b]
;;;979    	__ee_spc_phase=0;
000ac4  f8a54064          STRH     r4,[r5,#0x64]
;;;980    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.25||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;981    
;;;982    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;983    
;;;984    		{					
;;;985    		signed short temp_temp;
;;;986    		signed char temp;
;;;987    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060086          ADD      r0,r6,r6,LSL #2
000d98  eb081100          ADD      r1,r8,r0,LSL #4
000d9c  48ff              LDR      r0,|L1.4508|
000d9e  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da0  f1000001          ADD      r0,r0,#1
000da4  f0000007          AND      r0,r0,#7
000da8  eb010040          ADD      r0,r1,r0,LSL #1
000dac  8c80              LDRH     r0,[r0,#0x24]
000dae  9001              STR      r0,[sp,#4]
;;;988    		    
;;;989    		temp=LPC_RTC->YEAR;
000db0  4efb              LDR      r6,|L1.4512|
000db2  8bb0              LDRH     r0,[r6,#0x1c]
000db4  9000              STR      r0,[sp,#0]
;;;990    		gran_char(&temp,1,99);
000db6  f04f0263          MOV      r2,#0x63
000dba  f04f0101          MOV      r1,#1
000dbe  4668              MOV      r0,sp
000dc0  f7fffffe          BL       gran_char
;;;991    		*((char*)(&(ke_date[0])))=temp;
000dc4  4cf7              LDR      r4,|L1.4516|
000dc6  f89d0000          LDRB     r0,[sp,#0]
000dca  7020              STRB     r0,[r4,#0]
;;;992    			
;;;993    		temp=LPC_RTC->MONTH;
000dcc  7e30              LDRB     r0,[r6,#0x18]
000dce  9000              STR      r0,[sp,#0]
;;;994    		gran_char(&temp,1,12);
000dd0  220c              MOVS     r2,#0xc
000dd2  2101              MOVS     r1,#1
000dd4  4668              MOV      r0,sp
000dd6  f7fffffe          BL       gran_char
;;;995    		*(((char*)(&(ke_date[0])))+1)=temp;
000dda  f89d0000          LDRB     r0,[sp,#0]
000dde  7060              STRB     r0,[r4,#1]
;;;996    		
;;;997    		temp=LPC_RTC->DOM;
000de0  7b30              LDRB     r0,[r6,#0xc]
000de2  9000              STR      r0,[sp,#0]
;;;998    		gran_char(&temp,1,31);
000de4  221f              MOVS     r2,#0x1f
000de6  2101              MOVS     r1,#1
000de8  4668              MOV      r0,sp
000dea  f7fffffe          BL       gran_char
;;;999    		*(((char*)(&(ke_date[0])))+2)=temp;			
000dee  f89d0000          LDRB     r0,[sp,#0]
000df2  70a0              STRB     r0,[r4,#2]
;;;1000   				
;;;1001   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df4  f89d0004          LDRB     r0,[sp,#4]
000df8  70e0              STRB     r0,[r4,#3]
;;;1002   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfa  f24020a2          MOV      r0,#0x2a2
000dfe  6821              LDR      r1,[r4,#0]  ; ke_date
000e00  f7fffffe          BL       lc640_write_long
;;;1003   
;;;1004   		temp=LPC_RTC->HOUR;
000e04  7a30              LDRB     r0,[r6,#8]
000e06  9000              STR      r0,[sp,#0]
;;;1005   		gran_char(&temp,0,23);
000e08  2217              MOVS     r2,#0x17
000e0a  2100              MOVS     r1,#0
000e0c  4668              MOV      r0,sp
000e0e  f7fffffe          BL       gran_char
;;;1006   		*((char*)(&(ke_date[1])))=temp;
000e12  f89d0000          LDRB     r0,[sp,#0]
000e16  7120              STRB     r0,[r4,#4]
;;;1007                  
;;;1008   		temp=LPC_RTC->MIN;
000e18  7930              LDRB     r0,[r6,#4]
000e1a  9000              STR      r0,[sp,#0]
;;;1009   		gran_char(&temp,0,59);
000e1c  223b              MOVS     r2,#0x3b
000e1e  2100              MOVS     r1,#0
000e20  4668              MOV      r0,sp
000e22  f7fffffe          BL       gran_char
;;;1010   		*(((char*)(&(ke_date[1])))+1)=temp;
000e26  f89d0000          LDRB     r0,[sp,#0]
000e2a  7160              STRB     r0,[r4,#5]
;;;1011   	          
;;;1012   		temp=LPC_RTC->SEC;
000e2c  7830              LDRB     r0,[r6,#0]
000e2e  9000              STR      r0,[sp,#0]
;;;1013   		gran_char(&temp,0,59);
000e30  223b              MOVS     r2,#0x3b
000e32  2100              MOVS     r1,#0
000e34  4668              MOV      r0,sp
000e36  f7fffffe          BL       gran_char
;;;1014   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3a  f89d0000          LDRB     r0,[sp,#0]
000e3e  71a0              STRB     r0,[r4,#6]
;;;1015   			
;;;1016   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e40  f89d0005          LDRB     r0,[sp,#5]
000e44  71e0              STRB     r0,[r4,#7]
;;;1017   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e46  f24020a6          MOV      r0,#0x2a6
000e4a  6861              LDR      r1,[r4,#4]  ; ke_date
000e4c  f7fffffe          BL       lc640_write_long
;;;1018   		}
;;;1019   	bat_hndl_zvu_ke_init=1;
000e50  702f              STRB     r7,[r5,#0]
;;;1020   	}
;;;1021   }
000e52  e8bd81fc          POP      {r2-r8,pc}
;;;1022   #endif
                          ENDP

                  ke_drv PROC
;;;1104   //-----------------------------------------------
;;;1105   void ke_drv(void)
000e56  e92d47f0          PUSH     {r4-r10,lr}
;;;1106   {
000e5a  b088              SUB      sp,sp,#0x20
;;;1107   static char ke_drv_cnt_10s;
;;;1108   static short i_bat_buff[6];
;;;1109   static char i_bat_buff_cnt;
;;;1110   short ke_drv_i_temp;
;;;1111   short ke_drv_i_avg;
;;;1112   char i;
;;;1113   short ke_drv_i_temp_temp;
;;;1114   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e5c  f04f021c          MOV      r2,#0x1c
000e60  49d1              LDR      r1,|L1.4520|
000e62  a801              ADD      r0,sp,#4
000e64  f7fffffe          BL       __aeabi_memcpy4
;;;1115   
;;;1116   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e68  4ed0              LDR      r6,|L1.4524|
;;;1117   	{
;;;1118   	
;;;1119   	i_bat_buff[0]=0;
000e6a  4bd1              LDR      r3,|L1.4528|
000e6c  2500              MOVS     r5,#0
000e6e  7ab0              LDRB     r0,[r6,#0xa]          ;1116  ; bat_hndl_zvu_ke_init
000e70  2801              CMP      r0,#1                 ;1116
000e72  d102              BNE      |L1.3706|
000e74  801d              STRH     r5,[r3,#0]
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff[0]=0;
;;;1125   	i_bat_buff_cnt=0;
000e76  73b5              STRB     r5,[r6,#0xe]
;;;1126   
;;;1127   	bat_hndl_zvu_ke_init=0;
000e78  72b5              STRB     r5,[r6,#0xa]
                  |L1.3706|
;;;1128   	}
;;;1129   
;;;1130   
;;;1131   
;;;1132   
;;;1133   if(spc_stat==spcKE)
000e7a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e7e  2801              CMP      r0,#1
000e80  d17e              BNE      |L1.3968|
;;;1134   	{
;;;1135   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e82  48cc              LDR      r0,|L1.4532|
000e84  f04f070a          MOV      r7,#0xa
000e88  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e8c  f1c00000          RSB      r0,r0,#0
000e90  fb90f0f7          SDIV     r0,r0,r7
000e94  b200              SXTH     r0,r0
;;;1136   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e96  2800              CMP      r0,#0
000e98  da01              BGE      |L1.3742|
000e9a  f04f0000          MOV      r0,#0
                  |L1.3742|
;;;1137   
;;;1138   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000e9e  4ac6              LDR      r2,|L1.4536|
000ea0  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000ea2  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1139   	if(++ke_drv_cnt_10s>10)
000ea4  1c49              ADDS     r1,r1,#1
;;;1140   		{
;;;1141   		ke_drv_cnt_10s=0;
;;;1142   
;;;1143   		i_bat_buff_cnt++;
;;;1144   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1145   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1146   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1147   		ke_drv_i_temp_temp=0;
;;;1148   		for(i=0;i<6;i++)
;;;1149   			{
;;;1150   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1151   			}
;;;1152   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1153   
;;;1154   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1155   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1156   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1157   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1158   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1159   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1160   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1161   		
;;;1162   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1163   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1164   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1165   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1166   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1167   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1168   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1169   
;;;1170   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1171   		bat_hndl_i_temp=ke_drv_i_avg;
000ea6  4cbf              LDR      r4,|L1.4516|
000ea8  b2c9              UXTB     r1,r1                 ;1139
000eaa  3c80              SUBS     r4,r4,#0x80
000eac  7371              STRB     r1,[r6,#0xd]          ;1139
000eae  290a              CMP      r1,#0xa               ;1139
000eb0  d967              BLS      |L1.3970|
000eb2  7375              STRB     r5,[r6,#0xd]          ;1141
000eb4  7bb1              LDRB     r1,[r6,#0xe]          ;1143  ; i_bat_buff_cnt
000eb6  f1010101          ADD      r1,r1,#1              ;1143
000eba  b2c9              UXTB     r1,r1                 ;1143
000ebc  73b1              STRB     r1,[r6,#0xe]          ;1143
000ebe  2906              CMP      r1,#6                 ;1144
000ec0  d300              BCC      |L1.3780|
000ec2  73b5              STRB     r5,[r6,#0xe]          ;1144
                  |L1.3780|
000ec4  7bb1              LDRB     r1,[r6,#0xe]          ;1145  ; i_bat_buff_cnt
000ec6  6091              STR      r1,[r2,#8]            ;1145  ; bat_hndl_plazma
000ec8  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1146
000ecc  f04f0100          MOV      r1,#0                 ;1147
000ed0  4608              MOV      r0,r1                 ;1148
                  |L1.3794|
000ed2  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1150
000ed6  4461              ADD      r1,r1,r12             ;1150
000ed8  b209              SXTH     r1,r1                 ;1150
000eda  f1000001          ADD      r0,r0,#1              ;1148
000ede  b2c0              UXTB     r0,r0                 ;1148
000ee0  2806              CMP      r0,#6                 ;1148
000ee2  d3f6              BCC      |L1.3794|
000ee4  f04f0006          MOV      r0,#6                 ;1152
000ee8  fb91f0f0          SDIV     r0,r1,r0              ;1152
000eec  b201              SXTH     r1,r0                 ;1152
000eee  48b3              LDR      r0,|L1.4540|
000ef0  f8df82c4          LDR      r8,|L1.4536|
000ef4  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_6
000ef6  f1a8081c          SUB      r8,r8,#0x1c           ;1154
000efa  eb000040          ADD      r0,r0,r0,LSL #1       ;1154
000efe  ea4f0040          LSL      r0,r0,#1              ;1154
000f02  f8a80000          STRH     r0,[r8,#0]            ;1154
000f06  48ae              LDR      r0,|L1.4544|
000f08  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1_2
000f0a  ea4f0040          LSL      r0,r0,#1              ;1155
000f0e  f8a80002          STRH     r0,[r8,#2]            ;1155
000f12  48ac              LDR      r0,|L1.4548|
000f14  8800              LDRH     r0,[r0,#0]            ;1156  ; BAT_C_POINT_1
000f16  f8a80004          STRH     r0,[r8,#4]            ;1156
000f1a  48ab              LDR      r0,|L1.4552|
000f1c  f04f0303          MOV      r3,#3                 ;1157
000f20  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_3
000f24  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f28  f8a80006          STRH     r0,[r8,#6]            ;1157
000f2c  48a7              LDR      r0,|L1.4556|
000f2e  f04f0305          MOV      r3,#5                 ;1158
000f32  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_5
000f36  fb90f0f3          SDIV     r0,r0,r3              ;1158
000f3a  f8a80008          STRH     r0,[r8,#8]            ;1158
000f3e  48a4              LDR      r0,|L1.4560|
000f40  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_10
000f44  fb90f0f7          SDIV     r0,r0,r7              ;1159
000f48  f8a8000a          STRH     r0,[r8,#0xa]          ;1159
000f4c  48a1              LDR      r0,|L1.4564|
000f4e  f04f0314          MOV      r3,#0x14              ;1160
000f52  f9b00000          LDRSH    r0,[r0,#0]            ;1160  ; BAT_C_POINT_20
000f56  fb90f0f3          SDIV     r0,r0,r3              ;1160
000f5a  f8a8000c          STRH     r0,[r8,#0xc]          ;1160
000f5e  489e              LDR      r0,|L1.4568|
000f60  f108090e          ADD      r9,r8,#0xe            ;1162
000f64  f9b07000          LDRSH    r7,[r0,#0]            ;1162  ; BAT_U_END_1_6
000f68  f8a97000          STRH     r7,[r9,#0]            ;1162
000f6c  489b              LDR      r0,|L1.4572|
000f6e  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1_2
000f70  f8a90002          STRH     r0,[r9,#2]            ;1163
000f74  489a              LDR      r0,|L1.4576|
000f76  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_1
000f78  f8a90004          STRH     r0,[r9,#4]            ;1164
000f7c  4899              LDR      r0,|L1.4580|
000f7e  e001              B        |L1.3972|
                  |L1.3968|
000f80  e0e8              B        |L1.4436|
                  |L1.3970|
000f82  e061              B        |L1.4168|
                  |L1.3972|
000f84  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_3
000f86  f8a90006          STRH     r0,[r9,#6]            ;1165
000f8a  4897              LDR      r0,|L1.4584|
000f8c  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_5
000f8e  f8a90008          STRH     r0,[r9,#8]            ;1166
000f92  4896              LDR      r0,|L1.4588|
000f94  8800              LDRH     r0,[r0,#0]            ;1167  ; BAT_U_END_10
000f96  f8a9000a          STRH     r0,[r9,#0xa]          ;1167
000f9a  4895              LDR      r0,|L1.4592|
000f9c  f9b0c000          LDRSH    r12,[r0,#0]           ;1168  ; BAT_U_END_20
000fa0  f8a9c00c          STRH     r12,[r9,#0xc]         ;1168
000fa4  6051              STR      r1,[r2,#4]            ;1170  ; bat_hndl_plazma
000fa6  8121              STRH     r1,[r4,#8]
;;;1172   		
;;;1173   		for(i=0;i<7;i++)
000fa8  f04f0000          MOV      r0,#0
                  |L1.4012|
;;;1174   			{
;;;1175   			if(bat_hndl_i_temp>=I_from_t_table[i])
000fac  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000fb0  428b              CMP      r3,r1
000fb2  dd04              BLE      |L1.4030|
000fb4  f1000001          ADD      r0,r0,#1              ;1173
000fb8  b2c0              UXTB     r0,r0                 ;1173
000fba  2807              CMP      r0,#7                 ;1173
000fbc  d3f6              BCC      |L1.4012|
                  |L1.4030|
;;;1176   				{
;;;1177   				break;
;;;1178   				}
;;;1179   			}
;;;1180   
;;;1181   		bat_hndl_plazma[0]=i;
000fbe  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fc0  f10d0a04          ADD      r10,sp,#4             ;1114
;;;1182   
;;;1183   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fc4  b1c8              CBZ      r0,|L1.4090|
;;;1184   		 else if((i>=1)&&(i<7))
000fc6  1e42              SUBS     r2,r0,#1
000fc8  2a06              CMP      r2,#6
000fca  d219              BCS      |L1.4096|
;;;1185   		 	{
;;;1186   			short i1,i2;
;;;1187   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fcc  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fd0  eba30101          SUB      r1,r3,r1
000fd4  b209              SXTH     r1,r1
;;;1188   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fd6  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fda  eba30308          SUB      r3,r3,r8
000fde  b21b              SXTH     r3,r3
;;;1189   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fe0  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fe4  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fe8  eba80802          SUB      r8,r8,r2
;;;1190   			bat_hndl_t_razr_ke*=(long)i1;
000fec  fb08f801          MUL      r8,r8,r1
;;;1191   			bat_hndl_t_razr_ke/=(long)i2;
000ff0  fb98f1f3          SDIV     r1,r8,r3
;;;1192   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000ff4  4411              ADD      r1,r1,r2
000ff6  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1193   			}
000ff8  e006              B        |L1.4104|
                  |L1.4090|
000ffa  9901              LDR      r1,[sp,#4]            ;1183
000ffc  6561              STR      r1,[r4,#0x54]         ;1183  ; bat_hndl_t_razr_ke
000ffe  e003              B        |L1.4104|
                  |L1.4096|
;;;1194   		else if(i>=7)
001000  2807              CMP      r0,#7
001002  d301              BCC      |L1.4104|
;;;1195   			{
;;;1196   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
001004  9907              LDR      r1,[sp,#0x1c]
001006  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4104|
;;;1197   			}
;;;1198   
;;;1199   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
001008  b1c0              CBZ      r0,|L1.4156|
;;;1200   		 else if((i>=1)&&(i<7))
00100a  1e41              SUBS     r1,r0,#1
00100c  2906              CMP      r1,#6
00100e  d217              BCS      |L1.4160|
;;;1201   		 	{
;;;1202   			long u1,tempL;
;;;1203   
;;;1204   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
001010  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001014  f9392011          LDRSH    r2,[r9,r1,LSL #1]
001018  eba30302          SUB      r3,r3,r2
;;;1205   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
00101c  f85a1021          LDR      r1,[r10,r1,LSL #2]
001020  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
001022  eba70701          SUB      r7,r7,r1
;;;1206   			tempL*=u1;
001026  fb03f307          MUL      r3,r3,r7
;;;1207   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00102a  f85a0020          LDR      r0,[r10,r0,LSL #2]
00102e  eba00001          SUB      r0,r0,r1
;;;1208   			tempL/=u1;
001032  fb93f0f0          SDIV     r0,r3,r0
;;;1209   			tempL+=(long)U_end_from_i_table[i-1];
001036  4410              ADD      r0,r0,r2
;;;1210   			bat_hndl_u_end=(short)tempL;
001038  8160              STRH     r0,[r4,#0xa]
;;;1211   			}
00103a  e005              B        |L1.4168|
                  |L1.4156|
00103c  8167              STRH     r7,[r4,#0xa]          ;1199
00103e  e003              B        |L1.4168|
                  |L1.4160|
;;;1212   		else if(i>=7)
001040  2807              CMP      r0,#7
001042  d301              BCC      |L1.4168|
;;;1213   			{
;;;1214   			bat_hndl_u_end=U_end_from_i_table[6];
001044  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4168|
;;;1215   			}
;;;1216   
;;;1217   		}
;;;1218   
;;;1219   
;;;1220   
;;;1221   	if(spc_phase==0)
001048  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1225   
;;;1226   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1227   	    	
;;;1228   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1229   			{
;;;1230   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1231   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
00104c  4f69              LDR      r7,|L1.4596|
;;;1232   			}
;;;1233   
;;;1234   		bat[0]._time_min_cnt_ke++;
;;;1235   		if(bat[0]._time_min_cnt_ke>=60)
;;;1236   			{
;;;1237   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00104e  f44f78e3          MOV      r8,#0x1c6
001052  bbd8              CBNZ     r0,|L1.4300|
001054  2314              MOVS     r3,#0x14              ;1224
001056  f04f32ff          MOV      r2,#0xffffffff        ;1224
00105a  21ce              MOVS     r1,#0xce              ;1224
00105c  20cd              MOVS     r0,#0xcd              ;1224
00105e  f7fffffe          BL       mess_send
001062  f8960024          LDRB     r0,[r6,#0x24]         ;1226  ; spc_bat
001066  f8df9190          LDR      r9,|L1.4600|
00106a  eb000080          ADD      r0,r0,r0,LSL #2       ;1226
00106e  eb091000          ADD      r0,r9,r0,LSL #4       ;1226
001072  f9b00008          LDRSH    r0,[r0,#8]            ;1226
001076  f7fffffe          BL       abs
00107a  f8d9101c          LDR      r1,[r9,#0x1c]         ;1226  ; bat
00107e  4401              ADD      r1,r1,r0              ;1226
001080  f8c9101c          STR      r1,[r9,#0x1c]         ;1226  ; bat
001084  f64840a0          MOV      r0,#0x8ca0            ;1228
001088  4281              CMP      r1,r0                 ;1228
00108a  db0c              BLT      |L1.4262|
00108c  eba10100          SUB      r1,r1,r0              ;1230
001090  f8c9101c          STR      r1,[r9,#0x1c]         ;1230  ; bat
001094  8838              LDRH     r0,[r7,#0]            ;1231  ; ADR_EE_BAT_ZAR_CNT_KE
001096  f7fffffe          BL       lc640_read_int
00109a  1c40              ADDS     r0,r0,#1              ;1231
00109c  b201              SXTH     r1,r0                 ;1231
00109e  f9b70000          LDRSH    r0,[r7,#0]            ;1231  ; ADR_EE_BAT_ZAR_CNT_KE
0010a2  f7fffffe          BL       lc640_write_int
                  |L1.4262|
0010a6  f8b9004e          LDRH     r0,[r9,#0x4e]         ;1234  ; bat
0010aa  f1000001          ADD      r0,r0,#1              ;1234
0010ae  b281              UXTH     r1,r0                 ;1234
0010b0  f8a9104e          STRH     r1,[r9,#0x4e]         ;1234
0010b4  293c              CMP      r1,#0x3c              ;1235
0010b6  d309              BCC      |L1.4300|
0010b8  4640              MOV      r0,r8
0010ba  f7fffffe          BL       lc640_read_int
0010be  1c40              ADDS     r0,r0,#1
0010c0  b201              SXTH     r1,r0
0010c2  4640              MOV      r0,r8
0010c4  f7fffffe          BL       lc640_write_int
;;;1238   			bat[0]._time_min_cnt_ke=0;
0010c8  f8a9504e          STRH     r5,[r9,#0x4e]
                  |L1.4300|
;;;1239   			}
;;;1240   		}
;;;1241   
;;;1242   	else if(spc_phase==1)
;;;1243   		{
;;;1244   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1245   		}
;;;1246   
;;;1247   	if(out_U<bat_hndl_u_end)
0010cc  484b              LDR      r0,|L1.4604|
0010ce  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010d2  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010d6  4288              CMP      r0,r1
0010d8  da3a              BGE      |L1.4432|
;;;1248   		{
;;;1249   		cnt_end_ke++;
0010da  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010de  f1000001          ADD      r0,r0,#1
0010e2  b201              SXTH     r1,r0
0010e4  f8a61066          STRH     r1,[r6,#0x66]
;;;1250   		if(cnt_end_ke>=30)
0010e8  291e              CMP      r1,#0x1e
0010ea  db33              BLT      |L1.4436|
;;;1251   			{
;;;1252   			
;;;1253   			if((spc_stat==spcKE)&&(spc_phase==0))
0010ec  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010f0  2801              CMP      r0,#1
0010f2  d121              BNE      |L1.4408|
0010f4  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
0010f8  b9f0              CBNZ     r0,|L1.4408|
;;;1254   				{
;;;1255   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0010fa  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0010fc  f7fffffe          BL       lc640_read_int
001100  b201              SXTH     r1,r0
001102  483f              LDR      r0,|L1.4608|
001104  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001108  f7fffffe          BL       lc640_write_int
;;;1256   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
00110c  4640              MOV      r0,r8
00110e  f7fffffe          BL       lc640_read_int
001112  b284              UXTH     r4,r0
001114  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001116  f7fffffe          BL       lc640_read_int
00111a  b281              UXTH     r1,r0
00111c  4622              MOV      r2,r4
00111e  2000              MOVS     r0,#0
001120  f7fffffe          BL       ke_zvu_mem_hndl
;;;1257   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
001124  4837              LDR      r0,|L1.4612|
001126  2100              MOVS     r1,#0
001128  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
00112c  f7fffffe          BL       lc640_write_int
;;;1258   				cntrl_stat=50;
001130  f04f0032          MOV      r0,#0x32
001134  8670              STRH     r0,[r6,#0x32]
;;;1259   				cntrl_stat_old=50;
001136  86b0              STRH     r0,[r6,#0x34]
                  |L1.4408|
;;;1260   				}
;;;1261   
;;;1262   			spc_stat=spcOFF;
001138  f8865023          STRB     r5,[r6,#0x23]
;;;1263   			__ee_spc_stat=spcOFF;
00113c  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1264   			lc640_write_int(EE_SPC_STAT,spcOFF);
001140  b008              ADD      sp,sp,#0x20
001142  2100              MOVS     r1,#0
001144  e8bd47f0          POP      {r4-r10,lr}
001148  f240209a          MOV      r0,#0x29a
00114c  f7ffbffe          B.W      lc640_write_int
                  |L1.4432|
;;;1265   
;;;1266   			}
;;;1267   		}
;;;1268   	else cnt_end_ke=0;
001150  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4436|
;;;1269   
;;;1270   	}
;;;1271   			
;;;1272   }
001154  b008              ADD      sp,sp,#0x20
001156  e8bd87f0          POP      {r4-r10,pc}
;;;1273   #endif
                          ENDP

                  vz_start PROC
;;;1343   //-----------------------------------------------
;;;1344   char vz_start(char hour)
00115a  b570              PUSH     {r4-r6,lr}
;;;1345   {          
00115c  4605              MOV      r5,r0
;;;1346   char out;
;;;1347   out=0;
00115e  f04f0600          MOV      r6,#0
;;;1348   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001162  4c12              LDR      r4,|L1.4524|
001164  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001168  b9b8              CBNZ     r0,|L1.4506|
00116a  4827              LDR      r0,|L1.4616|
00116c  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
00116e  2801              CMP      r0,#1
001170  d06a              BEQ      |L1.4680|
;;;1349   	{
;;;1350   	spc_stat=spcVZ;
001172  f104042c          ADD      r4,r4,#0x2c
001176  f04f0102          MOV      r1,#2
00117a  f8041c09          STRB     r1,[r4,#-9]
;;;1351   	__ee_spc_stat=spcVZ; 
00117e  87e1              STRH     r1,[r4,#0x3e]
;;;1352   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001180  f240209a          MOV      r0,#0x29a
001184  f7fffffe          BL       lc640_write_int
;;;1353   	vz_cnt_h=hour;
001188  86e5              STRH     r5,[r4,#0x36]
;;;1354   	__ee_vz_cnt=hour*60;
00118a  ebc51005          RSB      r0,r5,r5,LSL #4
00118e  ea4f0080          LSL      r0,r0,#2
001192  87a0              STRH     r0,[r4,#0x3c]
001194  f1a4042c          SUB      r4,r4,#0x2c
;;;1355   	if(hour==0)__ee_vz_cnt=30;
001198  e038              B        |L1.4620|
                  |L1.4506|
00119a  e055              B        |L1.4680|
                  |L1.4508|
                          DCD      bat_u_old_cnt
                  |L1.4512|
                          DCD      0x40024020
                  |L1.4516|
                          DCD      ||area_number.25||+0x100
                  |L1.4520|
                          DCD      ||area_number.19||+0x4
                  |L1.4524|
                          DCD      ||area_number.25||
                  |L1.4528|
                          DCD      ||.bss||
                  |L1.4532|
                          DCD      Ib_ips_termokompensat
                  |L1.4536|
                          DCD      ||.bss||+0x468
                  |L1.4540|
                          DCD      BAT_C_POINT_1_6
                  |L1.4544|
                          DCD      BAT_C_POINT_1_2
                  |L1.4548|
                          DCD      BAT_C_POINT_1
                  |L1.4552|
                          DCD      BAT_C_POINT_3
                  |L1.4556|
                          DCD      BAT_C_POINT_5
                  |L1.4560|
                          DCD      BAT_C_POINT_10
                  |L1.4564|
                          DCD      BAT_C_POINT_20
                  |L1.4568|
                          DCD      BAT_U_END_1_6
                  |L1.4572|
                          DCD      BAT_U_END_1_2
                  |L1.4576|
                          DCD      BAT_U_END_1
                  |L1.4580|
                          DCD      BAT_U_END_3
                  |L1.4584|
                          DCD      BAT_U_END_5
                  |L1.4588|
                          DCD      BAT_U_END_10
                  |L1.4592|
                          DCD      BAT_U_END_20
                  |L1.4596|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4600|
                          DCD      bat
                  |L1.4604|
                          DCD      out_U
                  |L1.4608|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4612|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4616|
                          DCD      speedChrgBlckStat
                  |L1.4620|
00120c  b91d              CBNZ     r5,|L1.4630|
00120e  f04f001e          MOV      r0,#0x1e
001212  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4630|
;;;1356   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001216  f104045e          ADD      r4,r4,#0x5e
00121a  f44f7027          MOV      r0,#0x29c
00121e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001222  f7fffffe          BL       lc640_write_int
;;;1357   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
001226  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00122a  f44f702a          MOV      r0,#0x2a8
00122e  f7fffffe          BL       lc640_write_int
;;;1358   	vz_cnt_h_=0;
001232  f04f0000          MOV      r0,#0
001236  80e0              STRH     r0,[r4,#6]
;;;1359   	vz_cnt_s=0;
001238  8020              STRH     r0,[r4,#0]
;;;1360   	vz_cnt_s_=0;
00123a  8060              STRH     r0,[r4,#2]
;;;1361   	out=1;
00123c  f04f0601          MOV      r6,#1
;;;1362   	vz_mem_hndl(1);
001240  f04f0001          MOV      r0,#1
001244  f7fffffe          BL       vz_mem_hndl
                  |L1.4680|
;;;1363   	}
;;;1364   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1365   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1366   //plazma=out;	
;;;1367   return out;
001248  4630              MOV      r0,r6
;;;1368   }
00124a  bd70              POP      {r4-r6,pc}
;;;1369   
                          ENDP

                  vz_stop PROC
;;;1370   //-----------------------------------------------
;;;1371   void vz_stop(void)
00124c  b510              PUSH     {r4,lr}
;;;1372   {
;;;1373   if(spc_stat==spcVZ)
00124e  4cff              LDR      r4,|L1.5708|
001250  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001254  2802              CMP      r0,#2
001256  d113              BNE      |L1.4736|
;;;1374        {
;;;1375   vz_mem_hndl(vz_cnt_h);          
001258  f104042c          ADD      r4,r4,#0x2c
00125c  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
00125e  f7fffffe          BL       vz_mem_hndl
;;;1376   vz_cnt_s=0;
001262  f04f0000          MOV      r0,#0
001266  8660              STRH     r0,[r4,#0x32]
;;;1377   vz_cnt_h=0;
001268  86e0              STRH     r0,[r4,#0x36]
;;;1378   vz_cnt_h_=0;
00126a  8720              STRH     r0,[r4,#0x38]
;;;1379   spc_stat=spcOFF;
00126c  f8040c09          STRB     r0,[r4,#-9]
;;;1380   
;;;1381   		__ee_spc_stat=spcOFF;
001270  87e0              STRH     r0,[r4,#0x3e]
;;;1382   		lc640_write_int(EE_SPC_STAT,spcOFF);
001272  4601              MOV      r1,r0
001274  e8bd4010          POP      {r4,lr}
001278  f240209a          MOV      r0,#0x29a
00127c  f7ffbffe          B.W      lc640_write_int
                  |L1.4736|
;;;1383        }
;;;1384   
;;;1385   }
001280  bd10              POP      {r4,pc}
;;;1386   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1388   //-----------------------------------------------
;;;1389   void amper_chas_cnt_drv(void)
001282  b510              PUSH     {r4,lr}
;;;1390   {
;;;1391   
;;;1392   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001284  4af1              LDR      r2,|L1.5708|
001286  49f2              LDR      r1,|L1.5712|
001288  3280              ADDS     r2,r2,#0x80
00128a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00128e  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
001290  4401              ADD      r1,r1,r0
001292  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1393   
;;;1394   if(amper_chas_cnt_drv_summ>=36000L)
001294  f64843a0          MOV      r3,#0x8ca0
;;;1395   	{
;;;1396   	amper_chas_cnt_drv_summ-=36000L;
;;;1397   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001298  f44f74e4          MOV      r4,#0x1c8
00129c  4299              CMP      r1,r3                 ;1394
00129e  db0c              BLT      |L1.4794|
0012a0  eba10103          SUB      r1,r1,r3              ;1396
0012a4  6651              STR      r1,[r2,#0x64]         ;1396  ; amper_chas_cnt_drv_summ
0012a6  4620              MOV      r0,r4
0012a8  f7fffffe          BL       lc640_read_int
0012ac  1c40              ADDS     r0,r0,#1
0012ae  b201              SXTH     r1,r0
0012b0  4620              MOV      r0,r4
0012b2  e8bd4010          POP      {r4,lr}
0012b6  f7ffbffe          B.W      lc640_write_int
                  |L1.4794|
;;;1398   	}
;;;1399   else if(amper_chas_cnt_drv_summ<=-36000L)
0012ba  48e6              LDR      r0,|L1.5716|
0012bc  4281              CMP      r1,r0
0012be  dc0c              BGT      |L1.4826|
;;;1400   	{
;;;1401   	amper_chas_cnt_drv_summ+=36000L;
0012c0  eb010003          ADD      r0,r1,r3
0012c4  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1402   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012c6  4620              MOV      r0,r4
0012c8  f7fffffe          BL       lc640_read_int
0012cc  1e40              SUBS     r0,r0,#1
0012ce  b201              SXTH     r1,r0
0012d0  4620              MOV      r0,r4
0012d2  e8bd4010          POP      {r4,lr}
0012d6  f7ffbffe          B.W      lc640_write_int
                  |L1.4826|
;;;1403   	}
;;;1404   }
0012da  bd10              POP      {r4,pc}
;;;1405   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1407   //-----------------------------------------------
;;;1408   void avz_next_date_hndl(void)
0012dc  b570              PUSH     {r4-r6,lr}
;;;1409   {
;;;1410   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012de  4cde              LDR      r4,|L1.5720|
0012e0  f8940038          LDRB     r0,[r4,#0x38]
0012e4  4ddd              LDR      r5,|L1.5724|
0012e6  7829              LDRB     r1,[r5,#0]  ; AVZ
0012e8  4408              ADD      r0,r0,r1
0012ea  280c              CMP      r0,#0xc
0012ec  d906              BLS      |L1.4860|
0012ee  8fa0              LDRH     r0,[r4,#0x3c]
0012f0  1c40              ADDS     r0,r0,#1
0012f2  b201              SXTH     r1,r0
0012f4  20b8              MOVS     r0,#0xb8
0012f6  f7fffffe          BL       lc640_write_int
0012fa  e004              B        |L1.4870|
                  |L1.4860|
;;;1411   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0012fc  f9b4103c          LDRSH    r1,[r4,#0x3c]
001300  20b8              MOVS     r0,#0xb8
001302  f7fffffe          BL       lc640_write_int
                  |L1.4870|
;;;1412   
;;;1413   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1414   
;;;1415   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001306  f8941038          LDRB     r1,[r4,#0x38]
00130a  7828              LDRB     r0,[r5,#0]  ; AVZ
00130c  4401              ADD      r1,r1,r0
00130e  290c              CMP      r1,#0xc
001310  d907              BLS      |L1.4898|
001312  f8941038          LDRB     r1,[r4,#0x38]
001316  380c              SUBS     r0,r0,#0xc
001318  4401              ADD      r1,r1,r0
00131a  20b6              MOVS     r0,#0xb6
00131c  f7fffffe          BL       lc640_write_int
001320  e005              B        |L1.4910|
                  |L1.4898|
;;;1416   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
001322  f8941038          LDRB     r1,[r4,#0x38]
001326  4401              ADD      r1,r1,r0
001328  20b6              MOVS     r0,#0xb6
00132a  f7fffffe          BL       lc640_write_int
                  |L1.4910|
;;;1417   
;;;1418   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1419   
;;;1420   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
00132e  f894002c          LDRB     r0,[r4,#0x2c]
001332  281c              CMP      r0,#0x1c
001334  d904              BLS      |L1.4928|
001336  211c              MOVS     r1,#0x1c
001338  20b4              MOVS     r0,#0xb4
00133a  f7fffffe          BL       lc640_write_int
00133e  e004              B        |L1.4938|
                  |L1.4928|
;;;1421   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001340  f894102c          LDRB     r1,[r4,#0x2c]
001344  20b4              MOVS     r0,#0xb4
001346  f7fffffe          BL       lc640_write_int
                  |L1.4938|
;;;1422   
;;;1423   //lc640_write_int(EE_DATE_AVZ,4);
;;;1424   
;;;1425   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
00134a  f1040420          ADD      r4,r4,#0x20
00134e  7a21              LDRB     r1,[r4,#8]
001350  f04f00ae          MOV      r0,#0xae
001354  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001358  7921              LDRB     r1,[r4,#4]
00135a  20b0              MOVS     r0,#0xb0
00135c  f7fffffe          BL       lc640_write_int
;;;1427   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001360  7821              LDRB     r1,[r4,#0]
001362  e8bd4070          POP      {r4-r6,lr}
001366  20b2              MOVS     r0,#0xb2
001368  f7ffbffe          B.W      lc640_write_int
;;;1428   
;;;1429   }
;;;1430   
                          ENDP

                  avz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void avz_drv(void)                               
00136c  b510              PUSH     {r4,lr}
;;;1433   {                
;;;1434   if(AVZ!=AVZ_OFF)
00136e  48bb              LDR      r0,|L1.5724|
;;;1435   	{
;;;1436   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1437   		{
;;;1438   		bAVZ=1;
001370  4cb6              LDR      r4,|L1.5708|
001372  7800              LDRB     r0,[r0,#0]            ;1434  ; AVZ
001374  b338              CBZ      r0,|L1.5062|
001376  48b8              LDR      r0,|L1.5720|
001378  8f82              LDRH     r2,[r0,#0x3c]         ;1436
00137a  49b9              LDR      r1,|L1.5728|
00137c  8809              LDRH     r1,[r1,#0]            ;1436  ; YEAR_AVZ
00137e  428a              CMP      r2,r1                 ;1436
001380  d121              BNE      |L1.5062|
001382  f8902038          LDRB     r2,[r0,#0x38]         ;1436
001386  49b7              LDR      r1,|L1.5732|
001388  8809              LDRH     r1,[r1,#0]            ;1436  ; MONTH_AVZ
00138a  428a              CMP      r2,r1                 ;1436
00138c  d11b              BNE      |L1.5062|
00138e  f890102c          LDRB     r1,[r0,#0x2c]         ;1436
001392  4ab5              LDR      r2,|L1.5736|
001394  8812              LDRH     r2,[r2,#0]            ;1436  ; DATE_AVZ
001396  4291              CMP      r1,r2                 ;1436
001398  d115              BNE      |L1.5062|
00139a  f8901028          LDRB     r1,[r0,#0x28]         ;1436
00139e  4ab3              LDR      r2,|L1.5740|
0013a0  8812              LDRH     r2,[r2,#0]            ;1436  ; HOUR_AVZ
0013a2  4291              CMP      r1,r2                 ;1436
0013a4  d10f              BNE      |L1.5062|
0013a6  f8901024          LDRB     r1,[r0,#0x24]         ;1436
0013aa  4ab1              LDR      r2,|L1.5744|
0013ac  8812              LDRH     r2,[r2,#0]            ;1436  ; MIN_AVZ
0013ae  4291              CMP      r1,r2                 ;1436
0013b0  d109              BNE      |L1.5062|
0013b2  f8900020          LDRB     r0,[r0,#0x20]         ;1436
0013b6  49af              LDR      r1,|L1.5748|
0013b8  8809              LDRH     r1,[r1,#0]            ;1436  ; SEC_AVZ
0013ba  4288              CMP      r0,r1                 ;1436
0013bc  d103              BNE      |L1.5062|
0013be  f04f0001          MOV      r0,#1
0013c2  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5062|
;;;1439   		}
;;;1440   	}
;;;1441   if(bAVZ)
0013c6  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013ca  2800              CMP      r0,#0
0013cc  d00d              BEQ      |L1.5098|
;;;1442   	{
;;;1443   	if(vz_start(AVZ_TIME))
0013ce  48aa              LDR      r0,|L1.5752|
0013d0  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013d2  b2c0              UXTB     r0,r0
0013d4  f7fffffe          BL       vz_start
0013d8  2800              CMP      r0,#0
0013da  d006              BEQ      |L1.5098|
;;;1444   		{
;;;1445   		bAVZ=0;
0013dc  f04f0000          MOV      r0,#0
0013e0  f8840026          STRB     r0,[r4,#0x26]
;;;1446   		avz_next_date_hndl();
0013e4  e8bd4010          POP      {r4,lr}
0013e8  e7fe              B        avz_next_date_hndl
                  |L1.5098|
;;;1447   		}
;;;1448   	}	
;;;1449   
;;;1450   }
0013ea  bd10              POP      {r4,pc}
;;;1451   
                          ENDP

                  vz_drv PROC
;;;1452   //-----------------------------------------------
;;;1453   void vz_drv(void)
0013ec  b538              PUSH     {r3-r5,lr}
;;;1454   { 
;;;1455   if(spc_stat==spcVZ)
0013ee  4c97              LDR      r4,|L1.5708|
0013f0  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013f4  2802              CMP      r0,#2
0013f6  d11d              BNE      |L1.5172|
;;;1456   	{
;;;1457   #ifndef UKU_6U
;;;1458   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0013f8  48a0              LDR      r0,|L1.5756|
0013fa  7800              LDRB     r0,[r0,#0]  ; sk_stat
0013fc  2801              CMP      r0,#1
0013fe  d01a              BEQ      |L1.5174|
001400  489f              LDR      r0,|L1.5760|
001402  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001404  2800              CMP      r0,#0
001406  d016              BEQ      |L1.5174|
;;;1459   #endif //UKU_6U
;;;1460   		{
;;;1461   
;;;1462   		if(vz_cnt_s_<3600)
;;;1463   			{
;;;1464   			vz_cnt_s_++;
;;;1465   			if(vz_cnt_s_>=3600)
;;;1466   				{
;;;1467   				vz_cnt_s_=0;
;;;1468   				if(vz_cnt_h)
;;;1469   					{
;;;1470   					vz_cnt_h--;
;;;1471   					vz_cnt_h_++;
;;;1472   					}
;;;1473   				}
;;;1474   			}
;;;1475   	
;;;1476   	
;;;1477   		if(vz_cnt_s<60)
;;;1478   			{
;;;1479   			vz_cnt_s++;
;;;1480   			if(vz_cnt_s>=60)
;;;1481   				{
;;;1482   				vz_cnt_s=0;
;;;1483   				
;;;1484   				__ee_vz_cnt--;
;;;1485   				lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1486   				if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1487   					{
;;;1488   					spc_stat=spcOFF;
;;;1489   							__ee_spc_stat=spcOFF;
;;;1490   			lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1491   	
;;;1492   	//				hv_vz_stat=hvsOFF;
;;;1493   	//		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1494   					vz_mem_hndl(0);
;;;1495   					}
;;;1496   				}
;;;1497   			}
;;;1498   		vz_error=0; 
;;;1499   		}
;;;1500   #ifndef UKU_6U
;;;1501   	else 
;;;1502   		{
;;;1503   		vz_error=1; 
001408  f04f0001          MOV      r0,#1
00140c  7060              STRB     r0,[r4,#1]
;;;1504   		if(((LPC_RTC->SEC)%10)==0)
00140e  489d              LDR      r0,|L1.5764|
001410  7800              LDRB     r0,[r0,#0]
001412  f04f010a          MOV      r1,#0xa
001416  fbb0f2f1          UDIV     r2,r0,r1
00141a  fb010012          MLS      r0,r1,r2,r0
00141e  2800              CMP      r0,#0
001420  d108              BNE      |L1.5172|
;;;1505   			{
;;;1506   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
001422  f2413088          MOV      r0,#0x1388
001426  9000              STR      r0,[sp,#0]
001428  a397              ADR      r3,|L1.5768|
00142a  a29d              ADR      r2,|L1.5792|
00142c  a1a2              ADR      r1,|L1.5816|
00142e  a0a8              ADR      r0,|L1.5840|
001430  f7fffffe          BL       show_mess
                  |L1.5172|
;;;1507   						"    ЗАБЛОКИРОВАН    ",
;;;1508   						"     НЕИСПРАВНА     ",
;;;1509   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1510   						5000);			
;;;1511   			}
;;;1512   		}
;;;1513   #endif //UKU_6U
;;;1514   /*	if(vz_cnt_s_>=3)
;;;1515   		{
;;;1516   		if(sk_stat[0]==0)
;;;1517   		} */
;;;1518   
;;;1519   	}
;;;1520   
;;;1521   
;;;1522   } 
001434  bd38              POP      {r3-r5,pc}
                  |L1.5174|
001436  f8b40060          LDRH     r0,[r4,#0x60]         ;1462  ; vz_cnt_s_
00143a  f44f6161          MOV      r1,#0xe10             ;1462
00143e  2500              MOVS     r5,#0                 ;1458
001440  4288              CMP      r0,r1                 ;1462
001442  d215              BCS      |L1.5232|
001444  f1000001          ADD      r0,r0,#1              ;1464
001448  b280              UXTH     r0,r0                 ;1464
00144a  f8a40060          STRH     r0,[r4,#0x60]         ;1464
00144e  4288              CMP      r0,r1                 ;1465
001450  d30e              BCC      |L1.5232|
001452  f8a45060          STRH     r5,[r4,#0x60]         ;1467
001456  f8b40062          LDRH     r0,[r4,#0x62]         ;1468  ; vz_cnt_h
00145a  b148              CBZ      r0,|L1.5232|
00145c  f1a00001          SUB      r0,r0,#1              ;1470
001460  f8240f62          STRH     r0,[r4,#0x62]!        ;1470
001464  8860              LDRH     r0,[r4,#2]            ;1471  ; vz_cnt_h_
001466  f1000001          ADD      r0,r0,#1              ;1471
00146a  8060              STRH     r0,[r4,#2]            ;1471
00146c  f1a40462          SUB      r4,r4,#0x62           ;1471
                  |L1.5232|
001470  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1477  ; vz_cnt_s
001474  283c              CMP      r0,#0x3c              ;1477
001476  d225              BCS      |L1.5316|
001478  f1000001          ADD      r0,r0,#1              ;1479
00147c  b280              UXTH     r0,r0                 ;1479
00147e  f8a4005e          STRH     r0,[r4,#0x5e]         ;1479
001482  283c              CMP      r0,#0x3c              ;1480
001484  d31e              BCC      |L1.5316|
001486  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1482
00148a  8960              LDRH     r0,[r4,#0xa]          ;1484  ; __ee_vz_cnt
00148c  f1a00001          SUB      r0,r0,#1              ;1484
001490  b201              SXTH     r1,r0                 ;1484
001492  8161              STRH     r1,[r4,#0xa]          ;1484
001494  f44f7027          MOV      r0,#0x29c             ;1485
001498  f7fffffe          BL       lc640_write_int
00149c  8960              LDRH     r0,[r4,#0xa]          ;1486  ; __ee_vz_cnt
00149e  f1a4045e          SUB      r4,r4,#0x5e           ;1486
0014a2  b118              CBZ      r0,|L1.5292|
0014a4  4890              LDR      r0,|L1.5864|
0014a6  8800              LDRH     r0,[r0,#0]            ;1486  ; speedChrgBlckStat
0014a8  2801              CMP      r0,#1                 ;1486
0014aa  d10b              BNE      |L1.5316|
                  |L1.5292|
0014ac  f8845023          STRB     r5,[r4,#0x23]         ;1488
0014b0  f8a4506a          STRH     r5,[r4,#0x6a]         ;1489
0014b4  2100              MOVS     r1,#0                 ;1490
0014b6  f240209a          MOV      r0,#0x29a             ;1490
0014ba  f7fffffe          BL       lc640_write_int
0014be  2000              MOVS     r0,#0                 ;1494
0014c0  f7fffffe          BL       vz_mem_hndl
                  |L1.5316|
0014c4  7065              STRB     r5,[r4,#1]            ;1498
0014c6  bd38              POP      {r3-r5,pc}
;;;1523   
                          ENDP

                  vz1_drv PROC
;;;1525   //драйвер уравнительного заряда
;;;1526   void vz1_drv(void)
0014c8  e92d4ff8          PUSH     {r3-r11,lr}
;;;1527   {
;;;1528   if(volt_region_cnt)volt_region_cnt--;
0014cc  f8df817c          LDR      r8,|L1.5708|
0014d0  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014d4  b118              CBZ      r0,|L1.5342|
0014d6  f1a00001          SUB      r0,r0,#1
0014da  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5342|
;;;1529   if(vz1_stat==vz1sOFF)
0014de  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014e2  b928              CBNZ     r0,|L1.5360|
;;;1530   	{
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014e4  2314              MOVS     r3,#0x14
0014e6  2200              MOVS     r2,#0
0014e8  2164              MOVS     r1,#0x64
0014ea  20d2              MOVS     r0,#0xd2
0014ec  f7fffffe          BL       mess_send
                  |L1.5360|
;;;1532   	}
;;;1533   if(vz1_stat==vz1sSTEP1)
0014f0  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1534   	{
;;;1535   	if(vz1_stat_old!=vz1_stat)
;;;1536   		{
;;;1537   		vz1_stat_cnt=5;
;;;1538   		}
;;;1539   	if(vz1_stat_cnt)
;;;1540   		{
;;;1541   		vz1_stat_cnt--;
;;;1542   		if(vz1_stat_cnt==0)
;;;1543   			{
;;;1544   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1545   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1546   			}
;;;1547   		}
;;;1548   	if(sk_stat[0]==1)
0014f4  4d61              LDR      r5,|L1.5756|
0014f6  f44f7bc9          MOV      r11,#0x192            ;1545
0014fa  2801              CMP      r0,#1                 ;1533
0014fc  d139              BNE      |L1.5490|
0014fe  f8980006          LDRB     r0,[r8,#6]            ;1535  ; vz1_stat_old
001502  2801              CMP      r0,#1                 ;1535
001504  d003              BEQ      |L1.5390|
001506  f04f0005          MOV      r0,#5                 ;1537
00150a  f8a80076          STRH     r0,[r8,#0x76]         ;1537
                  |L1.5390|
00150e  f9b80076          LDRSH    r0,[r8,#0x76]         ;1539  ; vz1_stat_cnt
001512  b168              CBZ      r0,|L1.5424|
001514  f1a00001          SUB      r0,r0,#1              ;1541
001518  b200              SXTH     r0,r0                 ;1541
00151a  f8a80076          STRH     r0,[r8,#0x76]         ;1541
00151e  b938              CBNZ     r0,|L1.5424|
001520  f04f000b          MOV      r0,#0xb               ;1544
001524  f8880005          STRB     r0,[r8,#5]            ;1544
001528  4601              MOV      r1,r0                 ;1545
00152a  4658              MOV      r0,r11                ;1545
00152c  f7fffffe          BL       lc640_write
                  |L1.5424|
001530  7828              LDRB     r0,[r5,#0]  ; sk_stat
001532  2801              CMP      r0,#1
001534  d117              BNE      |L1.5478|
;;;1549   		{
;;;1550   		vz1_stat=vz1sSTEP2;
001536  f04f0002          MOV      r0,#2
00153a  f8880005          STRB     r0,[r8,#5]
;;;1551   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
00153e  4601              MOV      r1,r0
001540  4658              MOV      r0,r11
001542  f7fffffe          BL       lc640_write
;;;1552   		tree_up(iVZ1_STEP2_2,1,0,0);
001546  2300              MOVS     r3,#0
001548  461a              MOV      r2,r3
00154a  2101              MOVS     r1,#1
00154c  20f3              MOVS     r0,#0xf3
00154e  f7fffffe          BL       tree_up
;;;1553   		tree_up(iVZ1_STEP2_1,0,0,0);
001552  2300              MOVS     r3,#0
001554  461a              MOV      r2,r3
001556  4619              MOV      r1,r3
001558  20f2              MOVS     r0,#0xf2
00155a  f7fffffe          BL       tree_up
;;;1554   		ret(1200);
00155e  f44f6096          MOV      r0,#0x4b0
001562  f7fffffe          BL       ||ret||
                  |L1.5478|
;;;1555   		}
;;;1556   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001566  2314              MOVS     r3,#0x14
001568  2200              MOVS     r2,#0
00156a  2164              MOVS     r1,#0x64
00156c  20d2              MOVS     r0,#0xd2
00156e  f7fffffe          BL       mess_send
                  |L1.5490|
;;;1557   	}
;;;1558   
;;;1559   if(vz1_stat==vz1sSTEP2)
001572  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1560   	{
;;;1561   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1562   		{
;;;1563   		vz1_stat_cnt=15;
001576  f04f090f          MOV      r9,#0xf
00157a  2802              CMP      r0,#2                 ;1559
00157c  d118              BNE      |L1.5552|
00157e  f8980006          LDRB     r0,[r8,#6]            ;1561  ; vz1_stat_old
001582  2802              CMP      r0,#2                 ;1561
001584  d102              BNE      |L1.5516|
001586  f8b80076          LDRH     r0,[r8,#0x76]         ;1561  ; vz1_stat_cnt
00158a  b908              CBNZ     r0,|L1.5520|
                  |L1.5516|
00158c  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5520|
;;;1564   		}
;;;1565   	vz1_stat_cnt--;
001590  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001594  f1a00001          SUB      r0,r0,#1
001598  f8a80076          STRH     r0,[r8,#0x76]
;;;1566   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00159c  f04f0314          MOV      r3,#0x14
0015a0  f04f0200          MOV      r2,#0
0015a4  f04f0164          MOV      r1,#0x64
0015a8  f04f00d2          MOV      r0,#0xd2
0015ac  f7fffffe          BL       mess_send
                  |L1.5552|
;;;1567   	}
;;;1568   
;;;1569   if(vz1_stat==vz1sSTEP3)
0015b0  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1570   	{
;;;1571   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1572   		{
;;;1573   		vz1_stat_cnt=10;
0015b4  240a              MOVS     r4,#0xa
0015b6  2600              MOVS     r6,#0                 ;1528
0015b8  f04f0a01          MOV      r10,#1                ;1529
;;;1574   
;;;1575   		}
;;;1576   	vz1_stat_cnt--;
;;;1577   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1578   		{
;;;1579   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015bc  f2413788          MOV      r7,#0x1388
0015c0  2803              CMP      r0,#3                 ;1569
0015c2  d131              BNE      |L1.5672|
0015c4  f8980006          LDRB     r0,[r8,#6]            ;1571  ; vz1_stat_old
0015c8  2803              CMP      r0,#3                 ;1571
0015ca  d102              BNE      |L1.5586|
0015cc  f8b80076          LDRH     r0,[r8,#0x76]         ;1571  ; vz1_stat_cnt
0015d0  b908              CBNZ     r0,|L1.5590|
                  |L1.5586|
0015d2  f8a84076          STRH     r4,[r8,#0x76]         ;1573
                  |L1.5590|
0015d6  f8b80076          LDRH     r0,[r8,#0x76]         ;1576  ; vz1_stat_cnt
0015da  f1a00001          SUB      r0,r0,#1              ;1576
0015de  b200              SXTH     r0,r0                 ;1576
0015e0  f8a80076          STRH     r0,[r8,#0x76]         ;1576
0015e4  280a              CMP      r0,#0xa               ;1577
0015e6  d001              BEQ      |L1.5612|
0015e8  2809              CMP      r0,#9                 ;1577
0015ea  d106              BNE      |L1.5626|
                  |L1.5612|
0015ec  a33f              ADR      r3,|L1.5868|
0015ee  a245              ADR      r2,|L1.5892|
0015f0  a14a              ADR      r1,|L1.5916|
0015f2  a050              ADR      r0,|L1.5940|
0015f4  9700              STR      r7,[sp,#0]
0015f6  f7fffffe          BL       show_mess
                  |L1.5626|
;;;1580   					"      ТУМБЛЕР       ",
;;;1581   					"     ВЫСОКОГО       ",
;;;1582   					"    НАПРЯЖЕНИЯ      ",
;;;1583   					5000);
;;;1584   		}
;;;1585   	if(sk_stat[1]==1)
0015fa  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015fc  2801              CMP      r0,#1
0015fe  d10d              BNE      |L1.5660|
;;;1586   		{
;;;1587   		vz1_stat=vz1sWRK;
001600  f8884005          STRB     r4,[r8,#5]
;;;1588   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001604  210a              MOVS     r1,#0xa
001606  4658              MOV      r0,r11
001608  f7fffffe          BL       lc640_write
;;;1589   		volt_region=1;
00160c  f888a02f          STRB     r10,[r8,#0x2f]
;;;1590   		cntrl_stat=0;
001610  f8a86032          STRH     r6,[r8,#0x32]
;;;1591   		cntrl_stat_new=0;
001614  f8a86048          STRH     r6,[r8,#0x48]
;;;1592   		cntrl_stat_old=0;
001618  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5660|
;;;1593   		}
;;;1594   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00161c  2314              MOVS     r3,#0x14
00161e  2200              MOVS     r2,#0
001620  2164              MOVS     r1,#0x64
001622  20d2              MOVS     r0,#0xd2
001624  f7fffffe          BL       mess_send
                  |L1.5672|
;;;1595   	}
;;;1596   
;;;1597   if(vz1_stat==vz1sWRK)
001628  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00162c  280a              CMP      r0,#0xa
00162e  d10b              BNE      |L1.5704|
;;;1598   	{
;;;1599   	if(vz1_stat_old!=vz1_stat)
;;;1600   		{
;;;1601   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001630  4906              LDR      r1,|L1.5708|
001632  f8980006          LDRB     r0,[r8,#6]            ;1599  ; vz1_stat_old
001636  3180              ADDS     r1,r1,#0x80
001638  280a              CMP      r0,#0xa               ;1599
00163a  d006              BEQ      |L1.5706|
00163c  4843              LDR      r0,|L1.5964|
00163e  f44f6261          MOV      r2,#0xe10
001642  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
001646  e083              B        |L1.5968|
                  |L1.5704|
001648  e0f6              B        |L1.6200|
                  |L1.5706|
00164a  e085              B        |L1.5976|
                  |L1.5708|
                          DCD      ||area_number.25||
                  |L1.5712|
                          DCD      Ib_ips_termokompensat
                  |L1.5716|
                          DCD      0xffff7360
                  |L1.5720|
                          DCD      0x40024000
                  |L1.5724|
                          DCD      AVZ
                  |L1.5728|
                          DCD      YEAR_AVZ
                  |L1.5732|
                          DCD      MONTH_AVZ
                  |L1.5736|
                          DCD      DATE_AVZ
                  |L1.5740|
                          DCD      HOUR_AVZ
                  |L1.5744|
                          DCD      MIN_AVZ
                  |L1.5748|
                          DCD      SEC_AVZ
                  |L1.5752|
                          DCD      AVZ_TIME
                  |L1.5756|
                          DCD      sk_stat
                  |L1.5760|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5764|
                          DCD      0x40024020
                  |L1.5768|
001688  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
00168c  c2c5cdd2
001690  c8cbdfd6
001694  c8df2121
001698  21202020
00169c  00      
00169d  00                DCB      0
00169e  00                DCB      0
00169f  00                DCB      0
                  |L1.5792|
0016a0  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016a4  20cdc5c8
0016a8  d1cfd0c0
0016ac  c2cdc020
0016b0  20202020
0016b4  00      
0016b5  00                DCB      0
0016b6  00                DCB      0
0016b7  00                DCB      0
                  |L1.5816|
0016b8  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016bc  c7c0c1cb
0016c0  cecac8d0
0016c4  cec2c0cd
0016c8  20      
0016c9  20202000          DCB      "   ",0
0016cd  00                DCB      0
0016ce  00                DCB      0
0016cf  00                DCB      0
                  |L1.5840|
0016d0  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016d4  c2cdc8c2
0016d8  c0ded9c8
0016dc  c920c7  
0016df  c0d0dfc4          DCB      192,208,223,196," ",0
0016e3  2000    
0016e5  00                DCB      0
0016e6  00                DCB      0
0016e7  00                DCB      0
                  |L1.5864|
                          DCD      speedChrgBlckStat
                  |L1.5868|
0016ec  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016f0  cdc0cfd0
0016f4  dfc6c5cd
0016f8  c8df2020
0016fc  20202020
001700  00      
001701  00                DCB      0
001702  00                DCB      0
001703  00                DCB      0
                  |L1.5892|
001704  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001708  20c2dbd1
00170c  cecacec3
001710  ce202020
001714  20202020
001718  00      
001719  00                DCB      0
00171a  00                DCB      0
00171b  00                DCB      0
                  |L1.5916|
00171c  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001720  2020d2d3
001724  ccc1cbc5
001728  d0202020
00172c  20202020
001730  00      
001731  00                DCB      0
001732  00                DCB      0
001733  00                DCB      0
                  |L1.5940|
001734  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001738  20c2cacb
00173c  ded7c8d2
001740  c5202020
001744  20202020
001748  00      
001749  00                DCB      0
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
                          DCD      UZ_T
                  |L1.5968|
001750  fb00f002          MUL      r0,r0,r2
001754  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1602   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1603   		vz1_up_cnt=0L;
001756  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5976|
;;;1604   
;;;1605   		}
;;;1606   	vz1_wrk_cnt--;
001758  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
00175a  f1a00001          SUB      r0,r0,#1
00175e  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1607   	vz1_up_cnt++;
001760  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
001762  f1020201          ADD      r2,r2,#1
001766  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1608   
;;;1609   	if(vz1_wrk_cnt==0)
001768  b940              CBNZ     r0,|L1.6012|
;;;1610   		{
;;;1611   		vz1_stat=vz1sFINE;
00176a  f8889005          STRB     r9,[r8,#5]
;;;1612   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00176e  210f              MOVS     r1,#0xf
001770  4658              MOV      r0,r11
001772  f7fffffe          BL       lc640_write
;;;1613   		uz_mem_hndl(0);
001776  2000              MOVS     r0,#0
001778  f7fffffe          BL       uz_mem_hndl
                  |L1.6012|
;;;1614   		}
;;;1615   	if(sk_stat[0]==0)
00177c  7828              LDRB     r0,[r5,#0]  ; sk_stat
00177e  b938              CBNZ     r0,|L1.6032|
;;;1616   		{
;;;1617   		vz1_stat=vz1sERR2;
001780  f04f000c          MOV      r0,#0xc
001784  f8880005          STRB     r0,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001788  4601              MOV      r1,r0
00178a  4658              MOV      r0,r11
00178c  f7fffffe          BL       lc640_write
                  |L1.6032|
;;;1619   		}
;;;1620   	if(sk_stat[1]==0)
001790  7868              LDRB     r0,[r5,#1]  ; sk_stat
001792  b938              CBNZ     r0,|L1.6052|
;;;1621   		{
;;;1622   		vz1_stat=vz1sERR3;
001794  f04f000d          MOV      r0,#0xd
001798  f8880005          STRB     r0,[r8,#5]
;;;1623   		lc640_write(EE_VZ1_STAT,vz1sERR3);
00179c  4601              MOV      r1,r0
00179e  4658              MOV      r0,r11
0017a0  f7fffffe          BL       lc640_write
                  |L1.6052|
;;;1624   		}
;;;1625   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017a4  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0017a8  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0017ac  fb90f0f4          SDIV     r0,r0,r4
;;;1626   		{
;;;1627   		volt_region=0;
;;;1628   		cntrl_stat=1000;
0017b0  f44f727a          MOV      r2,#0x3e8
0017b4  4288              CMP      r0,r1                 ;1625
0017b6  dd16              BLE      |L1.6118|
0017b8  f9b83032          LDRSH    r3,[r8,#0x32]         ;1625  ; cntrl_stat
0017bc  2b14              CMP      r3,#0x14              ;1625
0017be  dc12              BGT      |L1.6118|
0017c0  f898302f          LDRB     r3,[r8,#0x2f]         ;1625  ; volt_region
0017c4  2b01              CMP      r3,#1                 ;1625
0017c6  d10e              BNE      |L1.6118|
0017c8  f8b83078          LDRH     r3,[r8,#0x78]         ;1625  ; volt_region_cnt
0017cc  b95b              CBNZ     r3,|L1.6118|
0017ce  f888602f          STRB     r6,[r8,#0x2f]         ;1627
0017d2  f8a82032          STRH     r2,[r8,#0x32]
;;;1629   		cntrl_stat_new=1000;
0017d6  f8a82048          STRH     r2,[r8,#0x48]
;;;1630   		cntrl_stat_old=1000;
0017da  f8a82034          STRH     r2,[r8,#0x34]
;;;1631   		volt_region_cnt=110;
0017de  f04f036e          MOV      r3,#0x6e
0017e2  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6118|
;;;1632   		}
;;;1633   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017e6  4288              CMP      r0,r1
0017e8  da13              BGE      |L1.6162|
0017ea  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017ee  4290              CMP      r0,r2
0017f0  db0f              BLT      |L1.6162|
0017f2  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017f6  b960              CBNZ     r0,|L1.6162|
0017f8  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
0017fc  b948              CBNZ     r0,|L1.6162|
;;;1634   		{
;;;1635   		volt_region=1;
0017fe  f888a02f          STRB     r10,[r8,#0x2f]
;;;1636   		cntrl_stat=10;
001802  f8a84032          STRH     r4,[r8,#0x32]
;;;1637   		cntrl_stat_new=10;
001806  f8a84048          STRH     r4,[r8,#0x48]
;;;1638   		cntrl_stat_old=10;
00180a  f8a84034          STRH     r4,[r8,#0x34]
;;;1639   		volt_region_cnt=10;
00180e  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6162|
;;;1640   		}
;;;1641   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001812  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001816  b110              CBZ      r0,|L1.6174|
;;;1642   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001818  2801              CMP      r0,#1
00181a  d007              BEQ      |L1.6188|
00181c  e00c              B        |L1.6200|
                  |L1.6174|
00181e  2314              MOVS     r3,#0x14              ;1641
001820  2200              MOVS     r2,#0                 ;1641
001822  2164              MOVS     r1,#0x64              ;1641
001824  20d2              MOVS     r0,#0xd2              ;1641
001826  f7fffffe          BL       mess_send
00182a  e005              B        |L1.6200|
                  |L1.6188|
00182c  2314              MOVS     r3,#0x14
00182e  2201              MOVS     r2,#1
001830  2164              MOVS     r1,#0x64
001832  20d2              MOVS     r0,#0xd2
001834  f7fffffe          BL       mess_send
                  |L1.6200|
;;;1643   	}
;;;1644   
;;;1645   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001838  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00183c  280b              CMP      r0,#0xb
00183e  d120              BNE      |L1.6274|
;;;1646   	{
;;;1647   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001840  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001844  280b              CMP      r0,#0xb
001846  d102              BNE      |L1.6222|
001848  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00184c  b908              CBNZ     r0,|L1.6226|
                  |L1.6222|
;;;1648   		{
;;;1649   		vz1_stat_cnt=10;
00184e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6226|
;;;1650   		}
;;;1651   	vz1_stat_cnt--;
001852  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001856  f1a00001          SUB      r0,r0,#1
00185a  b200              SXTH     r0,r0
00185c  f8a80076          STRH     r0,[r8,#0x76]
;;;1652   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001860  280a              CMP      r0,#0xa
001862  d001              BEQ      |L1.6248|
001864  2809              CMP      r0,#9
001866  d106              BNE      |L1.6262|
                  |L1.6248|
;;;1653   		{
;;;1654   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001868  a3ee              ADR      r3,|L1.7204|
00186a  a2f4              ADR      r2,|L1.7228|
00186c  a1f9              ADR      r1,|L1.7252|
00186e  a0ff              ADR      r0,|L1.7276|
001870  9700              STR      r7,[sp,#0]
001872  f7fffffe          BL       show_mess
                  |L1.6262|
;;;1655   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1656   					"      ВКЛЮЧЕН       ",
;;;1657   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1658   					5000);
;;;1659   		}
;;;1660   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001876  2314              MOVS     r3,#0x14
001878  2200              MOVS     r2,#0
00187a  2164              MOVS     r1,#0x64
00187c  20d2              MOVS     r0,#0xd2
00187e  f7fffffe          BL       mess_send
                  |L1.6274|
;;;1661   	}
;;;1662   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
001882  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001886  280c              CMP      r0,#0xc
001888  d12c              BNE      |L1.6372|
;;;1663   	{
;;;1664   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00188a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00188e  280c              CMP      r0,#0xc
001890  d102              BNE      |L1.6296|
001892  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001896  b908              CBNZ     r0,|L1.6300|
                  |L1.6296|
;;;1665   		{
;;;1666   		vz1_stat_cnt=10;
001898  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6300|
;;;1667   		}
;;;1668   	vz1_stat_cnt--;
00189c  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018a0  f1a00001          SUB      r0,r0,#1
0018a4  b200              SXTH     r0,r0
0018a6  f8a80076          STRH     r0,[r8,#0x76]
;;;1669   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018aa  280a              CMP      r0,#0xa
0018ac  d001              BEQ      |L1.6322|
0018ae  2809              CMP      r0,#9
0018b0  d109              BNE      |L1.6342|
                  |L1.6322|
;;;1670   		{
;;;1671   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018b2  f2af232c          ADR      r3,|L1.5768|
0018b6  f2af2218          ADR      r2,|L1.5792|
0018ba  f2af2104          ADR      r1,|L1.5816|
0018be  a0eb              ADR      r0,|L1.7276|
0018c0  9700              STR      r7,[sp,#0]
0018c2  f7fffffe          BL       show_mess
                  |L1.6342|
;;;1672   					"    ЗАБЛОКИРОВАН    ",
;;;1673   					"     НЕИСПРАВНА     ",
;;;1674   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1675   					5000);
;;;1676   		}
;;;1677   	if(sk_stat[0]==1)
0018c6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018c8  2801              CMP      r0,#1
0018ca  d105              BNE      |L1.6360|
;;;1678   		{
;;;1679   		vz1_stat=vz1sWRK;
0018cc  f8884005          STRB     r4,[r8,#5]
;;;1680   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018d0  210a              MOVS     r1,#0xa
0018d2  4658              MOV      r0,r11
0018d4  f7fffffe          BL       lc640_write
                  |L1.6360|
;;;1681   		}
;;;1682   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018d8  2314              MOVS     r3,#0x14
0018da  2200              MOVS     r2,#0
0018dc  2164              MOVS     r1,#0x64
0018de  20d2              MOVS     r0,#0xd2
0018e0  f7fffffe          BL       mess_send
                  |L1.6372|
;;;1683   	}
;;;1684   
;;;1685   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018e4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018e8  280d              CMP      r0,#0xd
0018ea  d129              BNE      |L1.6464|
;;;1686   	{
;;;1687   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018ec  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018f0  280d              CMP      r0,#0xd
0018f2  d102              BNE      |L1.6394|
0018f4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018f8  b908              CBNZ     r0,|L1.6398|
                  |L1.6394|
;;;1688   		{
;;;1689   		vz1_stat_cnt=10;
0018fa  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6398|
;;;1690   		}
;;;1691   	vz1_stat_cnt--;
0018fe  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001902  f1a00001          SUB      r0,r0,#1
001906  b200              SXTH     r0,r0
001908  f8a80076          STRH     r0,[r8,#0x76]
;;;1692   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00190c  280a              CMP      r0,#0xa
00190e  d001              BEQ      |L1.6420|
001910  2809              CMP      r0,#9
001912  d106              BNE      |L1.6434|
                  |L1.6420|
;;;1693   		{
;;;1694   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001914  a3db              ADR      r3,|L1.7300|
001916  a2e1              ADR      r2,|L1.7324|
001918  a1e6              ADR      r1,|L1.7348|
00191a  a0d4              ADR      r0,|L1.7276|
00191c  9700              STR      r7,[sp,#0]
00191e  f7fffffe          BL       show_mess
                  |L1.6434|
;;;1695   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1696   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1697   					"*   ТУМБЛЕРА!!!     ",
;;;1698   					5000);
;;;1699   		}
;;;1700   	if(sk_stat[1]==1)
001922  7868              LDRB     r0,[r5,#1]  ; sk_stat
001924  2801              CMP      r0,#1
001926  d105              BNE      |L1.6452|
;;;1701   		{
;;;1702   		vz1_stat=vz1sWRK;
001928  f8884005          STRB     r4,[r8,#5]
;;;1703   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00192c  210a              MOVS     r1,#0xa
00192e  4658              MOV      r0,r11
001930  f7fffffe          BL       lc640_write
                  |L1.6452|
;;;1704   		}
;;;1705   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001934  2314              MOVS     r3,#0x14
001936  2200              MOVS     r2,#0
001938  2164              MOVS     r1,#0x64
00193a  20d2              MOVS     r0,#0xd2
00193c  f7fffffe          BL       mess_send
                  |L1.6464|
;;;1706   	}
;;;1707   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001940  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001944  280e              CMP      r0,#0xe
001946  d12d              BNE      |L1.6564|
;;;1708   	{
;;;1709   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001948  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00194c  280e              CMP      r0,#0xe
00194e  d102              BNE      |L1.6486|
001950  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001954  b908              CBNZ     r0,|L1.6490|
                  |L1.6486|
;;;1710   		{
;;;1711   		vz1_stat_cnt=10;
001956  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6490|
;;;1712   		}
;;;1713   	vz1_stat_cnt--;
00195a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00195e  f1a00001          SUB      r0,r0,#1
001962  b200              SXTH     r0,r0
001964  f8a80076          STRH     r0,[r8,#0x76]
;;;1714   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001968  280a              CMP      r0,#0xa
00196a  d001              BEQ      |L1.6512|
00196c  2809              CMP      r0,#9
00196e  d109              BNE      |L1.6532|
                  |L1.6512|
;;;1715   		{
;;;1716   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001970  f2af2388          ADR      r3,|L1.5868|
001974  f2af2274          ADR      r2,|L1.5892|
001978  f2af2160          ADR      r1,|L1.5916|
00197c  a0d3              ADR      r0,|L1.7372|
00197e  9700              STR      r7,[sp,#0]
001980  f7fffffe          BL       show_mess
                  |L1.6532|
;;;1717   					"      ТУМБЛЕР       ",
;;;1718   					"     ВЫСОКОГО       ",
;;;1719   					"    НАПРЯЖЕНИЯ      ",
;;;1720   					5000);
;;;1721   		}
;;;1722   	if(sk_stat[1]==0)
001984  7868              LDRB     r0,[r5,#1]  ; sk_stat
001986  b938              CBNZ     r0,|L1.6552|
;;;1723   		{
;;;1724   		vz1_stat=vz1sOFF;
001988  f8886005          STRB     r6,[r8,#5]
;;;1725   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00198c  2100              MOVS     r1,#0
00198e  4658              MOV      r0,r11
001990  f7fffffe          BL       lc640_write
;;;1726   		vz_stop();
001994  f7fffffe          BL       vz_stop
                  |L1.6552|
;;;1727   
;;;1728   		}
;;;1729   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001998  2314              MOVS     r3,#0x14
00199a  2201              MOVS     r2,#1
00199c  2164              MOVS     r1,#0x64
00199e  20d2              MOVS     r0,#0xd2
0019a0  f7fffffe          BL       mess_send
                  |L1.6564|
;;;1730   	}
;;;1731   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019a4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1732   	{
;;;1733   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1734   		{
;;;1735   		vz1_stat_cnt=10;
;;;1736   		}
;;;1737   	vz1_stat_cnt--;
;;;1738   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1739   		{
;;;1740   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019a8  f64037b8          MOV      r7,#0xbb8
0019ac  280f              CMP      r0,#0xf               ;1731
0019ae  d138              BNE      |L1.6690|
0019b0  f8980006          LDRB     r0,[r8,#6]            ;1733  ; vz1_stat_old
0019b4  280f              CMP      r0,#0xf               ;1733
0019b6  d102              BNE      |L1.6590|
0019b8  f8b80076          LDRH     r0,[r8,#0x76]         ;1733  ; vz1_stat_cnt
0019bc  b908              CBNZ     r0,|L1.6594|
                  |L1.6590|
0019be  f8a84076          STRH     r4,[r8,#0x76]         ;1735
                  |L1.6594|
0019c2  f8b80076          LDRH     r0,[r8,#0x76]         ;1737  ; vz1_stat_cnt
0019c6  f1a00001          SUB      r0,r0,#1              ;1737
0019ca  b200              SXTH     r0,r0                 ;1737
0019cc  f8a80076          STRH     r0,[r8,#0x76]         ;1737
0019d0  280a              CMP      r0,#0xa               ;1738
0019d2  d001              BEQ      |L1.6616|
0019d4  2809              CMP      r0,#9                 ;1738
0019d6  d106              BNE      |L1.6630|
                  |L1.6616|
0019d8  a3c2              ADR      r3,|L1.7396|
0019da  a2c8              ADR      r2,|L1.7420|
0019dc  a1cd              ADR      r1,|L1.7444|
0019de  a0d3              ADR      r0,|L1.7468|
0019e0  9700              STR      r7,[sp,#0]
0019e2  f7fffffe          BL       show_mess
                  |L1.6630|
;;;1741   					"       ЗАРЯД        ",
;;;1742   					"      УСПЕШНО       ",
;;;1743   					"     ЗАВЕРШЕН       ",
;;;1744   					3000);
;;;1745   		}
;;;1746   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019e6  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019ea  2806              CMP      r0,#6
0019ec  d001              BEQ      |L1.6642|
0019ee  2805              CMP      r0,#5
0019f0  d109              BNE      |L1.6662|
                  |L1.6642|
;;;1747   		{
;;;1748   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019f2  f2af3308          ADR      r3,|L1.5868|
0019f6  f2af22f4          ADR      r2,|L1.5892|
0019fa  f2af21e0          ADR      r1,|L1.5916|
0019fe  a0d1              ADR      r0,|L1.7492|
001a00  9700              STR      r7,[sp,#0]
001a02  f7fffffe          BL       show_mess
                  |L1.6662|
;;;1749   					"      ТУМБЛЕР       ",
;;;1750   					"     ВЫСОКОГО       ",
;;;1751   					"    НАПРЯЖЕНИЯ      ",
;;;1752   					3000);
;;;1753   		}
;;;1754   	if(sk_stat[1]==0)
001a06  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a08  b928              CBNZ     r0,|L1.6678|
;;;1755   		{
;;;1756   		vz1_stat=vz1sOFF;
001a0a  f8886005          STRB     r6,[r8,#5]
;;;1757   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a0e  2100              MOVS     r1,#0
001a10  4658              MOV      r0,r11
001a12  f7fffffe          BL       lc640_write
                  |L1.6678|
;;;1758   		}
;;;1759   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a16  2314              MOVS     r3,#0x14
001a18  2200              MOVS     r2,#0
001a1a  2164              MOVS     r1,#0x64
001a1c  20d2              MOVS     r0,#0xd2
001a1e  f7fffffe          BL       mess_send
                  |L1.6690|
;;;1760   	}
;;;1761   
;;;1762   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a22  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a26  2810              CMP      r0,#0x10
001a28  d138              BNE      |L1.6812|
;;;1763   	{
;;;1764   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a2a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a2e  2810              CMP      r0,#0x10
001a30  d102              BNE      |L1.6712|
001a32  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a36  b908              CBNZ     r0,|L1.6716|
                  |L1.6712|
;;;1765   		{
;;;1766   		vz1_stat_cnt=10;
001a38  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6716|
;;;1767   		}
;;;1768   	vz1_stat_cnt--;
001a3c  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a40  f1a00001          SUB      r0,r0,#1
001a44  b200              SXTH     r0,r0
001a46  f8a80076          STRH     r0,[r8,#0x76]
;;;1769   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a4a  280a              CMP      r0,#0xa
001a4c  d001              BEQ      |L1.6738|
001a4e  2809              CMP      r0,#9
001a50  d106              BNE      |L1.6752|
                  |L1.6738|
;;;1770   		{
;;;1771   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a52  a3c2              ADR      r3,|L1.7516|
001a54  a2c7              ADR      r2,|L1.7540|
001a56  a1af              ADR      r1,|L1.7444|
001a58  a0b4              ADR      r0,|L1.7468|
001a5a  9700              STR      r7,[sp,#0]
001a5c  f7fffffe          BL       show_mess
                  |L1.6752|
;;;1772   					"       ЗАРЯД        ",
;;;1773   					"     ПРЕКРАЩЕН      ",
;;;1774   					"                    ",
;;;1775   					3000);
;;;1776   		}
;;;1777   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a60  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a64  2806              CMP      r0,#6
001a66  d001              BEQ      |L1.6764|
001a68  2805              CMP      r0,#5
001a6a  d109              BNE      |L1.6784|
                  |L1.6764|
;;;1778   		{
;;;1779   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a6c  f2af3384          ADR      r3,|L1.5868|
001a70  f2af3270          ADR      r2,|L1.5892|
001a74  f2af315c          ADR      r1,|L1.5916|
001a78  a0b2              ADR      r0,|L1.7492|
001a7a  9700              STR      r7,[sp,#0]
001a7c  f7fffffe          BL       show_mess
                  |L1.6784|
;;;1780   					"      ТУМБЛЕР       ",
;;;1781   					"     ВЫСОКОГО       ",
;;;1782   					"    НАПРЯЖЕНИЯ      ",
;;;1783   					3000);
;;;1784   		}
;;;1785   	if(sk_stat[1]==0)
001a80  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a82  b928              CBNZ     r0,|L1.6800|
;;;1786   		{
;;;1787   		vz1_stat=vz1sOFF;
001a84  f8886005          STRB     r6,[r8,#5]
;;;1788   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a88  2100              MOVS     r1,#0
001a8a  4658              MOV      r0,r11
001a8c  f7fffffe          BL       lc640_write
                  |L1.6800|
;;;1789   		}
;;;1790   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a90  2314              MOVS     r3,#0x14
001a92  2200              MOVS     r2,#0
001a94  2164              MOVS     r1,#0x64
001a96  20d2              MOVS     r0,#0xd2
001a98  f7fffffe          BL       mess_send
                  |L1.6812|
;;;1791   	}
;;;1792   
;;;1793   vz1_stat_old=vz1_stat;
001a9c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001aa0  f8880006          STRB     r0,[r8,#6]
;;;1794   
;;;1795   
;;;1796   
;;;1797   }
001aa4  e8bd8ff8          POP      {r3-r11,pc}
;;;1798   
                          ENDP

                  vz1_start PROC
;;;1800   //старт уравнительног заряда
;;;1801   char vz1_start(char hour)
001aa8  b510              PUSH     {r4,lr}
;;;1802   {          
;;;1803   char out;
;;;1804   out=0;
001aaa  f04f0000          MOV      r0,#0
;;;1805   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001aae  49b7              LDR      r1,|L1.7564|
001ab0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001ab4  2a00              CMP      r2,#0
001ab6  d110              BNE      |L1.6874|
001ab8  4ab5              LDR      r2,|L1.7568|
001aba  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001abc  2a01              CMP      r2,#1
001abe  d00c              BEQ      |L1.6874|
001ac0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001ac2  2a00              CMP      r2,#0
001ac4  d109              BNE      |L1.6874|
;;;1806   	{
;;;1807   	if(vz1_stat==vz1sOFF)
;;;1808   		{
;;;1809   		vz1_stat=vz1sSTEP1;
001ac6  f04f0001          MOV      r0,#1
001aca  7148              STRB     r0,[r1,#5]
;;;1810   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001acc  4601              MOV      r1,r0
001ace  f44f70c9          MOV      r0,#0x192
001ad2  f7fffffe          BL       lc640_write
;;;1811   		out=1;
001ad6  f04f0001          MOV      r0,#1
                  |L1.6874|
;;;1812   		
;;;1813   		}
;;;1814   /*	spc_stat=spcVZ;
;;;1815   	__ee_spc_stat=spcVZ; 
;;;1816   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1817   	vz_cnt_h=hour;
;;;1818   	__ee_vz_cnt=hour*60;
;;;1819   	if(hour==0)__ee_vz_cnt=30;
;;;1820   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1821   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1822   	vz_cnt_h_=0;
;;;1823   	vz_cnt_s=0;
;;;1824   	vz_cnt_s_=0;
;;;1825   	
;;;1826   		*/
;;;1827   	}
;;;1828   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1829   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1830   //plazma=out;	
;;;1831   return out;
;;;1832   }
001ada  bd10              POP      {r4,pc}
;;;1833   
                          ENDP

                  vz1_stop PROC
;;;1835   //стоп уравнительног заряда
;;;1836   void vz1_stop(void)
001adc  48ab              LDR      r0,|L1.7564|
;;;1837   {
;;;1838   if(vz1_stat!=vz1sOFF)
001ade  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ae0  2900              CMP      r1,#0
001ae2  d006              BEQ      |L1.6898|
;;;1839   	{
;;;1840   	vz1_stat=vz1sSTOP;
001ae4  f04f0110          MOV      r1,#0x10
001ae8  7141              STRB     r1,[r0,#5]
;;;1841   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001aea  f44f70c9          MOV      r0,#0x192
001aee  f7ffbffe          B.W      lc640_write
                  |L1.6898|
;;;1842   	}
;;;1843   }
001af2  4770              BX       lr
;;;1844   
                          ENDP

                  vz2_drv PROC
;;;1846   //драйвер формовочного заряда
;;;1847   void vz2_drv(void)
001af4  e92d4ff8          PUSH     {r3-r11,lr}
;;;1848   {
;;;1849   
;;;1850   if(vz2_stat==vz2sSTEP1)
001af8  4ea4              LDR      r6,|L1.7564|
;;;1851   	{
;;;1852   	if(vz2_stat_old!=vz2_stat)
;;;1853   		{
;;;1854   		vz2_stat_cnt=5;
;;;1855   		}
;;;1856   	if(vz2_stat_cnt)
;;;1857   		{
;;;1858   		vz2_stat_cnt--;
;;;1859   		if(vz2_stat_cnt==0)
;;;1860   			{
;;;1861   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1862   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1863   			}
;;;1864   		}
;;;1865   	if(sk_stat[0]==1)
001afa  4da6              LDR      r5,|L1.7572|
001afc  79f0              LDRB     r0,[r6,#7]            ;1850  ; vz2_stat
001afe  2801              CMP      r0,#1                 ;1850
001b00  d138              BNE      |L1.7028|
001b02  7a30              LDRB     r0,[r6,#8]            ;1852  ; vz2_stat_old
001b04  2801              CMP      r0,#1                 ;1852
001b06  d003              BEQ      |L1.6928|
001b08  f04f0005          MOV      r0,#5                 ;1854
001b0c  f8a6007a          STRH     r0,[r6,#0x7a]         ;1854
                  |L1.6928|
001b10  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1856  ; vz2_stat_cnt
001b14  b168              CBZ      r0,|L1.6962|
001b16  f1a00001          SUB      r0,r0,#1              ;1858
001b1a  b200              SXTH     r0,r0                 ;1858
001b1c  f8a6007a          STRH     r0,[r6,#0x7a]         ;1858
001b20  b938              CBNZ     r0,|L1.6962|
001b22  f04f000c          MOV      r0,#0xc               ;1861
001b26  71f0              STRB     r0,[r6,#7]            ;1861
001b28  4601              MOV      r1,r0                 ;1862
001b2a  f44f70ca          MOV      r0,#0x194             ;1862
001b2e  f7fffffe          BL       lc640_write
                  |L1.6962|
001b32  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b34  2801              CMP      r0,#1
001b36  d117              BNE      |L1.7016|
;;;1866   		{
;;;1867   		vz2_stat=vz2sSTEP2;
001b38  f04f0002          MOV      r0,#2
001b3c  71f0              STRB     r0,[r6,#7]
;;;1868   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b3e  4601              MOV      r1,r0
001b40  f44f70ca          MOV      r0,#0x194
001b44  f7fffffe          BL       lc640_write
;;;1869   		tree_up(iVZ2_STEP2_2,1,0,0);
001b48  2300              MOVS     r3,#0
001b4a  461a              MOV      r2,r3
001b4c  2101              MOVS     r1,#1
001b4e  20f5              MOVS     r0,#0xf5
001b50  f7fffffe          BL       tree_up
;;;1870   		tree_up(iVZ2_STEP2_1,0,0,0);
001b54  2300              MOVS     r3,#0
001b56  461a              MOV      r2,r3
001b58  4619              MOV      r1,r3
001b5a  20f4              MOVS     r0,#0xf4
001b5c  f7fffffe          BL       tree_up
;;;1871   		ret(1200);
001b60  f44f6096          MOV      r0,#0x4b0
001b64  f7fffffe          BL       ||ret||
                  |L1.7016|
;;;1872   		}
;;;1873   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b68  2314              MOVS     r3,#0x14
001b6a  2200              MOVS     r2,#0
001b6c  2164              MOVS     r1,#0x64
001b6e  20d2              MOVS     r0,#0xd2
001b70  f7fffffe          BL       mess_send
                  |L1.7028|
;;;1874   	}
;;;1875   
;;;1876   if(vz2_stat==vz2sSTEP2)
001b74  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b76  2802              CMP      r0,#2
001b78  d119              BNE      |L1.7086|
;;;1877   	{
;;;1878   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b7a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b7c  2802              CMP      r0,#2
001b7e  d102              BNE      |L1.7046|
001b80  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b84  b918              CBNZ     r0,|L1.7054|
                  |L1.7046|
;;;1879   		{
;;;1880   		vz2_stat_cnt=15;
001b86  f04f000f          MOV      r0,#0xf
001b8a  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7054|
;;;1881   		}
;;;1882   	vz2_stat_cnt--;
001b8e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b92  f1a00001          SUB      r0,r0,#1
001b96  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1883   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b9a  f04f0314          MOV      r3,#0x14
001b9e  f04f0200          MOV      r2,#0
001ba2  f04f0164          MOV      r1,#0x64
001ba6  f04f00d2          MOV      r0,#0xd2
001baa  f7fffffe          BL       mess_send
                  |L1.7086|
;;;1884   	}
;;;1885   
;;;1886   if(vz2_stat==vz2sSTEP3)
001bae  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1887   	{
;;;1888   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1889   		{
;;;1890   		vz2_stat_cnt=10;
001bb0  240a              MOVS     r4,#0xa
001bb2  2700              MOVS     r7,#0
;;;1891   		cntrl_stat=0;
;;;1892   		cntrl_stat_new=0;
;;;1893   		cntrl_stat_old=0;
;;;1894   		}
;;;1895   	vz2_stat_cnt--;
;;;1896   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1897   		{
;;;1898   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bb4  f2413888          MOV      r8,#0x1388
001bb8  2803              CMP      r0,#3                 ;1886
001bba  d131              BNE      |L1.7200|
001bbc  7a30              LDRB     r0,[r6,#8]            ;1888  ; vz2_stat_old
001bbe  2803              CMP      r0,#3                 ;1888
001bc0  d102              BNE      |L1.7112|
001bc2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1888  ; vz2_stat_cnt
001bc6  b928              CBNZ     r0,|L1.7124|
                  |L1.7112|
001bc8  f8a6407a          STRH     r4,[r6,#0x7a]         ;1890
001bcc  8677              STRH     r7,[r6,#0x32]         ;1891
001bce  f8a67048          STRH     r7,[r6,#0x48]         ;1892
001bd2  86b7              STRH     r7,[r6,#0x34]         ;1893
                  |L1.7124|
001bd4  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1895  ; vz2_stat_cnt
001bd8  f1a00001          SUB      r0,r0,#1              ;1895
001bdc  b200              SXTH     r0,r0                 ;1895
001bde  f8a6007a          STRH     r0,[r6,#0x7a]         ;1895
001be2  280a              CMP      r0,#0xa               ;1896
001be4  d001              BEQ      |L1.7146|
001be6  2809              CMP      r0,#9                 ;1896
001be8  d10b              BNE      |L1.7170|
                  |L1.7146|
001bea  f2af5300          ADR      r3,|L1.5868|
001bee  f2af42ec          ADR      r2,|L1.5892|
001bf2  f2af41d8          ADR      r1,|L1.5916|
001bf6  f2af40c4          ADR      r0,|L1.5940|
001bfa  f8cd8000          STR      r8,[sp,#0]
001bfe  f7fffffe          BL       show_mess
                  |L1.7170|
;;;1899   					"      ТУМБЛЕР       ",
;;;1900   					"     ВЫСОКОГО       ",
;;;1901   					"    НАПРЯЖЕНИЯ      ",
;;;1902   					5000);
;;;1903   		}
;;;1904   	if(sk_stat[1]==1)
001c02  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c04  2801              CMP      r0,#1
001c06  d10c              BNE      |L1.7202|
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK1;
001c08  71f4              STRB     r4,[r6,#7]
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001c0a  210a              MOVS     r1,#0xa
001c0c  f44f70ca          MOV      r0,#0x194
001c10  f7fffffe          BL       lc640_write
;;;1908   		volt_region=1;
001c14  f04f0001          MOV      r0,#1
001c18  f886002f          STRB     r0,[r6,#0x2f]
;;;1909   		cntrl_stat=0;
001c1c  8677              STRH     r7,[r6,#0x32]
;;;1910   		cntrl_stat_new=0;
001c1e  e0bb              B        |L1.7576|
                  |L1.7200|
001c20  e0c3              B        |L1.7594|
                  |L1.7202|
001c22  e0bc              B        |L1.7582|
                  |L1.7204|
001c24  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c28  c720c2c5
001c2c  cdd2c8cb
001c30  dfd6c8  
001c33  c8212120          DCB      200,"!!  ",0
001c37  2000    
001c39  00                DCB      0
001c3a  00                DCB      0
001c3b  00                DCB      0
                  |L1.7228|
001c3c  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c40  2020c2ca
001c44  cbded7c5
001c48  cd202020
001c4c  20202020
001c50  00      
001c51  00                DCB      0
001c52  00                DCB      0
001c53  00                DCB      0
                  |L1.7252|
001c54  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c58  c520ccce
001c5c  c6c5d220
001c60  c1dbd2dc
001c64  20202020          DCB      "    ",0
001c68  00      
001c69  00                DCB      0
001c6a  00                DCB      0
001c6b  00                DCB      0
                  |L1.7276|
001c6c  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c70  cdc8d2c5
001c74  cbdccddb
001c78  c920c7  
001c7b  c0d0dfc4          DCB      192,208,223,196," ",0
001c7f  2000    
001c81  00                DCB      0
001c82  00                DCB      0
001c83  00                DCB      0
                  |L1.7300|
001c84  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c88  d2d3ccc1
001c8c  cbc5d0c0
001c90  21212120
001c94  20202020
001c98  00      
001c99  00                DCB      0
001c9a  00                DCB      0
001c9b  00                DCB      0
                  |L1.7324|
001c9c  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001ca0  d1cbc520
001ca4  c2cacbde
001ca8  d7c5cd  
001cab  c8df2020          DCB      200,223,"   ",0
001caf  2000    
001cb1  00                DCB      0
001cb2  00                DCB      0
001cb3  00                DCB      0
                  |L1.7348|
001cb4  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001cb8  c4c5d220
001cbc  cfd0cec4
001cc0  cecbc6  
001cc3  c5cd2020          DCB      197,205,"   ",0
001cc7  2000    
001cc9  00                DCB      0
001cca  00                DCB      0
001ccb  00                DCB      0
                  |L1.7372|
001ccc  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cd0  20c2dbca
001cd4  cbded7c8
001cd8  d2c52020
001cdc  20202020
001ce0  00      
001ce1  00                DCB      0
001ce2  00                DCB      0
001ce3  00                DCB      0
                  |L1.7396|
001ce4  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001ce8  20c7c0c2
001cec  c5d0d8c5
001cf0  cd202020
001cf4  20202020
001cf8  00      
001cf9  00                DCB      0
001cfa  00                DCB      0
001cfb  00                DCB      0
                  |L1.7420|
001cfc  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d00  2020d3d1
001d04  cfc5d8cd
001d08  ce202020
001d0c  20202020
001d10  00      
001d11  00                DCB      0
001d12  00                DCB      0
001d13  00                DCB      0
                  |L1.7444|
001d14  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d18  202020c7
001d1c  c0d0dfc4
001d20  20202020
001d24  20202020
001d28  00      
001d29  00                DCB      0
001d2a  00                DCB      0
001d2b  00                DCB      0
                  |L1.7468|
001d2c  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d30  d0c0c2cd
001d34  c8d2c5cb
001d38  dccddbc9
001d3c  20202020          DCB      "    ",0
001d40  00      
001d41  00                DCB      0
001d42  00                DCB      0
001d43  00                DCB      0
                  |L1.7492|
001d44  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d48  20c2dbca
001d4c  cbded7c8
001d50  d2c52020
001d54  20202020
001d58  00      
001d59  00                DCB      0
001d5a  00                DCB      0
001d5b  00                DCB      0
                  |L1.7516|
001d5c  20202020          DCB      "                    ",0
001d60  20202020
001d64  20202020
001d68  20202020
001d6c  20202020
001d70  00      
001d71  00                DCB      0
001d72  00                DCB      0
001d73  00                DCB      0
                  |L1.7540|
001d74  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d78  20cfd0c5
001d7c  cad0c0d9
001d80  c5cd2020
001d84  20202020
001d88  00      
001d89  00                DCB      0
001d8a  00                DCB      0
001d8b  00                DCB      0
                  |L1.7564|
                          DCD      ||area_number.25||
                  |L1.7568|
                          DCD      speedChrgBlckStat
                  |L1.7572|
                          DCD      sk_stat
                  |L1.7576|
001d98  f8a67048          STRH     r7,[r6,#0x48]
;;;1911   		cntrl_stat_old=0;
001d9c  86b7              STRH     r7,[r6,#0x34]
                  |L1.7582|
;;;1912   		}
;;;1913   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d9e  2314              MOVS     r3,#0x14
001da0  2200              MOVS     r2,#0
001da2  2164              MOVS     r1,#0x64
001da4  20d2              MOVS     r0,#0xd2
001da6  f7fffffe          BL       mess_send
                  |L1.7594|
;;;1914   	}
;;;1915   
;;;1916   if(vz2_stat==vz2sWRK1)
001daa  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1917   	{
;;;1918   
;;;1919   	if(vz2_stat_old!=vz2_stat)
;;;1920   		{
;;;1921   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001dac  f8df940c          LDR      r9,|L1.8636|
;;;1922   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1923   		vz2_up_cnt=0L;
;;;1924   
;;;1925   		}
;;;1926   	vz2_wrk_cnt--;
;;;1927   	vz2_up_cnt++;
;;;1928   
;;;1929   	if(vz2_wrk_cnt==0)
;;;1930   		{
;;;1931   		vz2_stat=vz2sWRK2;
;;;1932   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1933   		}
;;;1934   	if(sk_stat[0]==0)
;;;1935   		{
;;;1936   		vz2_stat=vz2sERR2;
;;;1937   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1938   		}
;;;1939   	if(sk_stat[1]==0)
;;;1940   		{
;;;1941   		vz2_stat=vz2sERR3;
;;;1942   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1943   		}
;;;1944   	//if(abs(out_U-FZ_U1)<10)
;;;1945   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1946   		{
;;;1947   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1948   			{
;;;1949   			if(vz2_stat_ph2_cnt)
;;;1950   				{
;;;1951   				vz2_stat_ph2_cnt--;
;;;1952   				if(vz2_stat_ph2_cnt==0)
;;;1953   					{
;;;1954   					vz2_stat=vz2sWRK2;
;;;1955   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1956   					}
;;;1957   				}
;;;1958   			}
;;;1959   		else
;;;1960   			{
;;;1961   			vz2_stat_ph2_cnt=60;
;;;1962   			}
;;;1963   		}
;;;1964   	else
;;;1965   		{
;;;1966   		vz2_stat_ph2_cnt=60;
;;;1967   		}
;;;1968   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1969   		{
;;;1970   		volt_region=0;
;;;1971   		cntrl_stat=1000;
001db0  f44f7b7a          MOV      r11,#0x3e8
001db4  f04f0a0b          MOV      r10,#0xb              ;1931
001db8  280a              CMP      r0,#0xa               ;1916
001dba  d17d              BNE      |L1.7864|
001dbc  7a30              LDRB     r0,[r6,#8]            ;1919  ; vz2_stat_old
001dbe  280a              CMP      r0,#0xa               ;1919
001dc0  d00a              BEQ      |L1.7640|
001dc2  48ff              LDR      r0,|L1.8640|
001dc4  f44f6161          MOV      r1,#0xe10             ;1921
001dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1921  ; FZ_T1
001dcc  fb00f001          MUL      r0,r0,r1              ;1921
001dd0  f8c90048          STR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001dd4  f8c9704c          STR      r7,[r9,#0x4c]         ;1923  ; vz2_up_cnt
                  |L1.7640|
001dd8  f8d90048          LDR      r0,[r9,#0x48]         ;1926  ; vz2_wrk_cnt
001ddc  f1a00001          SUB      r0,r0,#1              ;1926
001de0  f8c90048          STR      r0,[r9,#0x48]         ;1926  ; vz2_wrk_cnt
001de4  f8d9104c          LDR      r1,[r9,#0x4c]         ;1927  ; vz2_up_cnt
001de8  f1010101          ADD      r1,r1,#1              ;1927
001dec  f8c9104c          STR      r1,[r9,#0x4c]         ;1927  ; vz2_up_cnt
001df0  b930              CBNZ     r0,|L1.7680|
001df2  f886a007          STRB     r10,[r6,#7]           ;1931
001df6  210b              MOVS     r1,#0xb               ;1932
001df8  f44f70ca          MOV      r0,#0x194             ;1932
001dfc  f7fffffe          BL       lc640_write
                  |L1.7680|
001e00  7828              LDRB     r0,[r5,#0]            ;1934  ; sk_stat
001e02  b938              CBNZ     r0,|L1.7700|
001e04  f04f000d          MOV      r0,#0xd               ;1936
001e08  71f0              STRB     r0,[r6,#7]            ;1936
001e0a  4601              MOV      r1,r0                 ;1937
001e0c  f44f70ca          MOV      r0,#0x194             ;1937
001e10  f7fffffe          BL       lc640_write
                  |L1.7700|
001e14  7868              LDRB     r0,[r5,#1]            ;1939  ; sk_stat
001e16  b938              CBNZ     r0,|L1.7720|
001e18  f04f000e          MOV      r0,#0xe               ;1941
001e1c  71f0              STRB     r0,[r6,#7]            ;1941
001e1e  4601              MOV      r1,r0                 ;1942
001e20  f44f70ca          MOV      r0,#0x194             ;1942
001e24  f7fffffe          BL       lc640_write
                  |L1.7720|
001e28  48e6              LDR      r0,|L1.8644|
001e2a  223c              MOVS     r2,#0x3c              ;1961
001e2c  f9b01000          LDRSH    r1,[r0,#0]            ;1945  ; out_U
001e30  48e5              LDR      r0,|L1.8648|
001e32  f9b00000          LDRSH    r0,[r0,#0]            ;1945  ; FZ_U1
001e36  f100031e          ADD      r3,r0,#0x1e           ;1945
001e3a  4299              CMP      r1,r3                 ;1945
001e3c  da20              BGE      |L1.7808|
001e3e  380a              SUBS     r0,r0,#0xa            ;1945
001e40  4281              CMP      r1,r0                 ;1945
001e42  dd1d              BLE      |L1.7808|
001e44  48e1              LDR      r0,|L1.8652|
001e46  49e2              LDR      r1,|L1.8656|
001e48  f9b00000          LDRSH    r0,[r0,#0]            ;1947  ; Ib_ips_termokompensat
001e4c  f9b11000          LDRSH    r1,[r1,#0]            ;1947  ; FZ_ISW12
001e50  fb90f0f4          SDIV     r0,r0,r4              ;1947
001e54  4288              CMP      r0,r1                 ;1947
001e56  da10              BGE      |L1.7802|
001e58  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1949  ; vz2_stat_ph2_cnt
001e5c  b190              CBZ      r0,|L1.7812|
001e5e  f1a00001          SUB      r0,r0,#1              ;1951
001e62  b200              SXTH     r0,r0                 ;1951
001e64  f8a6007c          STRH     r0,[r6,#0x7c]         ;1951
001e68  b960              CBNZ     r0,|L1.7812|
001e6a  f886a007          STRB     r10,[r6,#7]           ;1954
001e6e  210b              MOVS     r1,#0xb               ;1955
001e70  f44f70ca          MOV      r0,#0x194             ;1955
001e74  f7fffffe          BL       lc640_write
001e78  e004              B        |L1.7812|
                  |L1.7802|
001e7a  f8a6207c          STRH     r2,[r6,#0x7c]         ;1961
001e7e  e001              B        |L1.7812|
                  |L1.7808|
001e80  f8a6207c          STRH     r2,[r6,#0x7c]         ;1966
                  |L1.7812|
001e84  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1968  ; Ibmax
001e88  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1968  ; IZMAX_
001e8c  fb90f0f4          SDIV     r0,r0,r4              ;1968
001e90  4288              CMP      r0,r1                 ;1968
001e92  dd18              BLE      |L1.7878|
001e94  f9b62032          LDRSH    r2,[r6,#0x32]         ;1968  ; cntrl_stat
001e98  2a14              CMP      r2,#0x14              ;1968
001e9a  dc14              BGT      |L1.7878|
001e9c  f896202f          LDRB     r2,[r6,#0x2f]         ;1968  ; volt_region
001ea0  2a01              CMP      r2,#1                 ;1968
001ea2  d110              BNE      |L1.7878|
001ea4  f8b62078          LDRH     r2,[r6,#0x78]         ;1968  ; volt_region_cnt
001ea8  b96a              CBNZ     r2,|L1.7878|
001eaa  f886702f          STRB     r7,[r6,#0x2f]         ;1970
001eae  f8a6b032          STRH     r11,[r6,#0x32]
;;;1972   		cntrl_stat_new=1000;
001eb2  f8a6b048          STRH     r11,[r6,#0x48]
;;;1973   		cntrl_stat_old=1000;
001eb6  e000              B        |L1.7866|
                  |L1.7864|
001eb8  e02e              B        |L1.7960|
                  |L1.7866|
001eba  f8a6b034          STRH     r11,[r6,#0x34]
;;;1974   		volt_region_cnt=110;
001ebe  f04f026e          MOV      r2,#0x6e
001ec2  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7878|
;;;1975   		}
;;;1976   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001ec6  4288              CMP      r0,r1
001ec8  da13              BGE      |L1.7922|
001eca  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ece  4558              CMP      r0,r11
001ed0  db0f              BLT      |L1.7922|
001ed2  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ed6  b960              CBNZ     r0,|L1.7922|
001ed8  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001edc  b948              CBNZ     r0,|L1.7922|
;;;1977   		{
;;;1978   		volt_region=1;
001ede  f04f0001          MOV      r0,#1
001ee2  f886002f          STRB     r0,[r6,#0x2f]
;;;1979   		cntrl_stat=10;
001ee6  8674              STRH     r4,[r6,#0x32]
;;;1980   		cntrl_stat_new=10;
001ee8  f8a64048          STRH     r4,[r6,#0x48]
;;;1981   		cntrl_stat_old=10;
001eec  86b4              STRH     r4,[r6,#0x34]
;;;1982   		volt_region_cnt=10;
001eee  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7922|
;;;1983   		}
;;;1984   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ef2  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ef6  b110              CBZ      r0,|L1.7934|
;;;1985   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ef8  2801              CMP      r0,#1
001efa  d007              BEQ      |L1.7948|
001efc  e00c              B        |L1.7960|
                  |L1.7934|
001efe  2314              MOVS     r3,#0x14              ;1984
001f00  2200              MOVS     r2,#0                 ;1984
001f02  2164              MOVS     r1,#0x64              ;1984
001f04  20d2              MOVS     r0,#0xd2              ;1984
001f06  f7fffffe          BL       mess_send
001f0a  e005              B        |L1.7960|
                  |L1.7948|
001f0c  2314              MOVS     r3,#0x14
001f0e  2201              MOVS     r2,#1
001f10  2164              MOVS     r1,#0x64
001f12  20d2              MOVS     r0,#0xd2
001f14  f7fffffe          BL       mess_send
                  |L1.7960|
;;;1986   	}
;;;1987   
;;;1988   if(vz2_stat==vz2sWRK2)
001f18  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f1a  280b              CMP      r0,#0xb
001f1c  d17f              BNE      |L1.8222|
;;;1989   	{
;;;1990   	if(vz2_stat_old!=vz2_stat)
001f1e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f20  280b              CMP      r0,#0xb
001f22  d008              BEQ      |L1.7990|
;;;1991   		{
;;;1992   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f24  48ab              LDR      r0,|L1.8660|
001f26  f44f6161          MOV      r1,#0xe10
001f2a  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f2e  fb00f001          MUL      r0,r0,r1
001f32  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7990|
;;;1993   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1994   		//vz2_up_cnt=0L;
;;;1995   		}
;;;1996   	vz2_wrk_cnt--;
001f36  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f3a  f1a00001          SUB      r0,r0,#1
001f3e  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1997   	vz2_up_cnt++;
001f42  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f46  f1010101          ADD      r1,r1,#1
001f4a  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1998   
;;;1999   	if(vz2_wrk_cnt==0)
001f4e  b950              CBNZ     r0,|L1.8038|
;;;2000   		{
;;;2001   		vz2_stat=vz2sFINE;
001f50  f04f0012          MOV      r0,#0x12
001f54  71f0              STRB     r0,[r6,#7]
;;;2002   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f56  4601              MOV      r1,r0
001f58  f44f70ca          MOV      r0,#0x194
001f5c  f7fffffe          BL       lc640_write
;;;2003   		fz_mem_hndl(0);
001f60  2000              MOVS     r0,#0
001f62  f7fffffe          BL       fz_mem_hndl
                  |L1.8038|
;;;2004   		}
;;;2005   	if(sk_stat[0]==0)
001f66  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f68  b938              CBNZ     r0,|L1.8058|
;;;2006   		{
;;;2007   		vz2_stat=vz2sERR5;
001f6a  f04f0010          MOV      r0,#0x10
001f6e  71f0              STRB     r0,[r6,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f70  4601              MOV      r1,r0
001f72  f44f70ca          MOV      r0,#0x194
001f76  f7fffffe          BL       lc640_write
                  |L1.8058|
;;;2009   		}
;;;2010   	if(sk_stat[1]==0)
001f7a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f7c  b938              CBNZ     r0,|L1.8078|
;;;2011   		{
;;;2012   		vz2_stat=vz2sERR6;
001f7e  f04f0011          MOV      r0,#0x11
001f82  71f0              STRB     r0,[r6,#7]
;;;2013   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f84  4601              MOV      r1,r0
001f86  f44f70ca          MOV      r0,#0x194
001f8a  f7fffffe          BL       lc640_write
                  |L1.8078|
;;;2014   		}
;;;2015   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f8e  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f92  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f96  fb90f0f4          SDIV     r0,r0,r4
001f9a  4288              CMP      r0,r1
001f9c  dd16              BLE      |L1.8140|
001f9e  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001fa2  2a14              CMP      r2,#0x14
001fa4  dc12              BGT      |L1.8140|
001fa6  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001faa  2a01              CMP      r2,#1
001fac  d10e              BNE      |L1.8140|
001fae  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fb2  b95a              CBNZ     r2,|L1.8140|
;;;2016   		{
;;;2017   		volt_region=0;
001fb4  f886702f          STRB     r7,[r6,#0x2f]
;;;2018   		cntrl_stat=1000;
001fb8  f8a6b032          STRH     r11,[r6,#0x32]
;;;2019   		cntrl_stat_new=1000;
001fbc  f8a6b048          STRH     r11,[r6,#0x48]
;;;2020   		cntrl_stat_old=1000;
001fc0  f8a6b034          STRH     r11,[r6,#0x34]
;;;2021   		volt_region_cnt=110;
001fc4  f04f026e          MOV      r2,#0x6e
001fc8  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8140|
;;;2022   		}
;;;2023   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fcc  4288              CMP      r0,r1
001fce  da13              BGE      |L1.8184|
001fd0  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fd4  4558              CMP      r0,r11
001fd6  db0f              BLT      |L1.8184|
001fd8  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fdc  b960              CBNZ     r0,|L1.8184|
001fde  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fe2  b948              CBNZ     r0,|L1.8184|
;;;2024   		{
;;;2025   		volt_region=1;
001fe4  f04f0001          MOV      r0,#1
001fe8  f886002f          STRB     r0,[r6,#0x2f]
;;;2026   		cntrl_stat=10;
001fec  8674              STRH     r4,[r6,#0x32]
;;;2027   		cntrl_stat_new=10;
001fee  f8a64048          STRH     r4,[r6,#0x48]
;;;2028   		cntrl_stat_old=10;
001ff2  86b4              STRH     r4,[r6,#0x34]
;;;2029   		volt_region_cnt=10;
001ff4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8184|
;;;2030   		}
;;;2031   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ff8  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ffc  b110              CBZ      r0,|L1.8196|
;;;2032   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ffe  2801              CMP      r0,#1
002000  d007              BEQ      |L1.8210|
002002  e00c              B        |L1.8222|
                  |L1.8196|
002004  2314              MOVS     r3,#0x14              ;2031
002006  2200              MOVS     r2,#0                 ;2031
002008  2164              MOVS     r1,#0x64              ;2031
00200a  20d2              MOVS     r0,#0xd2              ;2031
00200c  f7fffffe          BL       mess_send
002010  e005              B        |L1.8222|
                  |L1.8210|
002012  2314              MOVS     r3,#0x14
002014  2201              MOVS     r2,#1
002016  2164              MOVS     r1,#0x64
002018  20d2              MOVS     r0,#0xd2
00201a  f7fffffe          BL       mess_send
                  |L1.8222|
;;;2033   	}
;;;2034   
;;;2035   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
00201e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002020  280c              CMP      r0,#0xc
002022  d123              BNE      |L1.8300|
;;;2036   	{
;;;2037   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002024  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002026  280c              CMP      r0,#0xc
002028  d102              BNE      |L1.8240|
00202a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00202e  b908              CBNZ     r0,|L1.8244|
                  |L1.8240|
;;;2038   		{
;;;2039   		vz2_stat_cnt=10;
002030  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8244|
;;;2040   		}
;;;2041   	vz2_stat_cnt--;
002034  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002038  f1a00001          SUB      r0,r0,#1
00203c  b200              SXTH     r0,r0
00203e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2042   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002042  280a              CMP      r0,#0xa
002044  d001              BEQ      |L1.8266|
002046  2809              CMP      r0,#9
002048  d10a              BNE      |L1.8288|
                  |L1.8266|
;;;2043   		{
;;;2044   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00204a  f2af4328          ADR      r3,|L1.7204|
00204e  f2af4214          ADR      r2,|L1.7228|
002052  f2af4100          ADR      r1,|L1.7252|
002056  a060              ADR      r0,|L1.8664|
002058  f8cd8000          STR      r8,[sp,#0]
00205c  f7fffffe          BL       show_mess
                  |L1.8288|
;;;2045   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2046   					"      ВКЛЮЧЕН       ",
;;;2047   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2048   					5000);
;;;2049   		}
;;;2050   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002060  2314              MOVS     r3,#0x14
002062  2200              MOVS     r2,#0
002064  2164              MOVS     r1,#0x64
002066  20d2              MOVS     r0,#0xd2
002068  f7fffffe          BL       mess_send
                  |L1.8300|
;;;2051   	}
;;;2052   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
00206c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00206e  280d              CMP      r0,#0xd
002070  d12c              BNE      |L1.8396|
;;;2053   	{
;;;2054   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002072  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002074  280d              CMP      r0,#0xd
002076  d102              BNE      |L1.8318|
002078  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00207c  b908              CBNZ     r0,|L1.8322|
                  |L1.8318|
;;;2055   		{
;;;2056   		vz2_stat_cnt=10;
00207e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8322|
;;;2057   		}
;;;2058   	vz2_stat_cnt--;
002082  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002086  f1a00001          SUB      r0,r0,#1
00208a  b200              SXTH     r0,r0
00208c  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2059   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002090  280a              CMP      r0,#0xa
002092  d001              BEQ      |L1.8344|
002094  2809              CMP      r0,#9
002096  d10a              BNE      |L1.8366|
                  |L1.8344|
;;;2060   		{
;;;2061   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002098  f6af2314          ADR      r3,|L1.5768|
00209c  f6af2200          ADR      r2,|L1.5792|
0020a0  f6af11ec          ADR      r1,|L1.5816|
0020a4  a04c              ADR      r0,|L1.8664|
0020a6  f8cd8000          STR      r8,[sp,#0]
0020aa  f7fffffe          BL       show_mess
                  |L1.8366|
;;;2062   					"    ЗАБЛОКИРОВАН    ",
;;;2063   					"     НЕИСПРАВНА     ",
;;;2064   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2065   					5000);
;;;2066   		}
;;;2067   	if(sk_stat[0]==1)
0020ae  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020b0  2801              CMP      r0,#1
0020b2  d105              BNE      |L1.8384|
;;;2068   		{
;;;2069   		vz2_stat=vz2sWRK1;
0020b4  71f4              STRB     r4,[r6,#7]
;;;2070   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020b6  210a              MOVS     r1,#0xa
0020b8  f44f70ca          MOV      r0,#0x194
0020bc  f7fffffe          BL       lc640_write
                  |L1.8384|
;;;2071   		}
;;;2072   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020c0  2314              MOVS     r3,#0x14
0020c2  2200              MOVS     r2,#0
0020c4  2164              MOVS     r1,#0x64
0020c6  20d2              MOVS     r0,#0xd2
0020c8  f7fffffe          BL       mess_send
                  |L1.8396|
;;;2073   	}
;;;2074   
;;;2075   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020cc  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020ce  280e              CMP      r0,#0xe
0020d0  d12b              BNE      |L1.8490|
;;;2076   	{
;;;2077   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020d2  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020d4  280e              CMP      r0,#0xe
0020d6  d102              BNE      |L1.8414|
0020d8  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020dc  b908              CBNZ     r0,|L1.8418|
                  |L1.8414|
;;;2078   		{
;;;2079   		vz2_stat_cnt=10;
0020de  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8418|
;;;2080   		}
;;;2081   	vz2_stat_cnt--;
0020e2  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020e6  f1a00001          SUB      r0,r0,#1
0020ea  b200              SXTH     r0,r0
0020ec  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2082   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020f0  280a              CMP      r0,#0xa
0020f2  d001              BEQ      |L1.8440|
0020f4  2809              CMP      r0,#9
0020f6  d109              BNE      |L1.8460|
                  |L1.8440|
;;;2083   		{
;;;2084   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020f8  a33d              ADR      r3,|L1.8688|
0020fa  f2af4260          ADR      r2,|L1.7324|
0020fe  f2af414c          ADR      r1,|L1.7348|
002102  a035              ADR      r0,|L1.8664|
002104  f8cd8000          STR      r8,[sp,#0]
002108  f7fffffe          BL       show_mess
                  |L1.8460|
;;;2085   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2086   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2087   					"    ТУМБЛЕРА!!!     ",
;;;2088   					5000);
;;;2089   		}
;;;2090   	if(sk_stat[1]==1)
00210c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00210e  2801              CMP      r0,#1
002110  d105              BNE      |L1.8478|
;;;2091   		{
;;;2092   		vz2_stat=vz2sWRK1;
002112  71f4              STRB     r4,[r6,#7]
;;;2093   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
002114  210a              MOVS     r1,#0xa
002116  f44f70ca          MOV      r0,#0x194
00211a  f7fffffe          BL       lc640_write
                  |L1.8478|
;;;2094   		}
;;;2095   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00211e  2314              MOVS     r3,#0x14
002120  2200              MOVS     r2,#0
002122  2164              MOVS     r1,#0x64
002124  20d2              MOVS     r0,#0xd2
002126  f7fffffe          BL       mess_send
                  |L1.8490|
;;;2096   	}
;;;2097   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
00212a  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00212c  2810              CMP      r0,#0x10
00212e  d12d              BNE      |L1.8588|
;;;2098   	{
;;;2099   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002130  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002132  2810              CMP      r0,#0x10
002134  d102              BNE      |L1.8508|
002136  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00213a  b908              CBNZ     r0,|L1.8512|
                  |L1.8508|
;;;2100   		{
;;;2101   		vz2_stat_cnt=10;
00213c  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8512|
;;;2102   		}
;;;2103   	vz2_stat_cnt--;
002140  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002144  f1a00001          SUB      r0,r0,#1
002148  b200              SXTH     r0,r0
00214a  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2104   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00214e  280a              CMP      r0,#0xa
002150  d001              BEQ      |L1.8534|
002152  2809              CMP      r0,#9
002154  d10a              BNE      |L1.8556|
                  |L1.8534|
;;;2105   		{
;;;2106   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002156  f6af23d0          ADR      r3,|L1.5768|
00215a  f6af22bc          ADR      r2,|L1.5792|
00215e  f6af21a8          ADR      r1,|L1.5816|
002162  a01d              ADR      r0,|L1.8664|
002164  f8cd8000          STR      r8,[sp,#0]
002168  f7fffffe          BL       show_mess
                  |L1.8556|
;;;2107   					"    ЗАБЛОКИРОВАН    ",
;;;2108   					"     НЕИСПРАВНА     ",
;;;2109   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2110   					5000);
;;;2111   		}
;;;2112   	if(sk_stat[0]==1)
00216c  7828              LDRB     r0,[r5,#0]  ; sk_stat
00216e  2801              CMP      r0,#1
002170  d106              BNE      |L1.8576|
;;;2113   		{
;;;2114   		vz2_stat=vz2sWRK2;
002172  f886a007          STRB     r10,[r6,#7]
;;;2115   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002176  210b              MOVS     r1,#0xb
002178  f44f70ca          MOV      r0,#0x194
00217c  f7fffffe          BL       lc640_write
                  |L1.8576|
;;;2116   		}
;;;2117   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002180  2314              MOVS     r3,#0x14
002182  2200              MOVS     r2,#0
002184  2164              MOVS     r1,#0x64
002186  20d2              MOVS     r0,#0xd2
002188  f7fffffe          BL       mess_send
                  |L1.8588|
;;;2118   	}
;;;2119   
;;;2120   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00218c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00218e  2811              CMP      r0,#0x11
002190  d154              BNE      |L1.8764|
;;;2121   	{
;;;2122   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002192  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002194  2811              CMP      r0,#0x11
002196  d102              BNE      |L1.8606|
002198  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00219c  b908              CBNZ     r0,|L1.8610|
                  |L1.8606|
;;;2123   		{
;;;2124   		vz2_stat_cnt=10;
00219e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8610|
;;;2125   		}
;;;2126   	vz2_stat_cnt--;
0021a2  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021a6  f1a00001          SUB      r0,r0,#1
0021aa  b200              SXTH     r0,r0
0021ac  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2127   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021b0  280a              CMP      r0,#0xa
0021b2  d001              BEQ      |L1.8632|
0021b4  2809              CMP      r0,#9
0021b6  d131              BNE      |L1.8732|
                  |L1.8632|
;;;2128   		{
;;;2129   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021b8  a30d              ADR      r3,|L1.8688|
0021ba  e025              B        |L1.8712|
                  |L1.8636|
                          DCD      ||area_number.25||+0x80
                  |L1.8640|
                          DCD      FZ_T1
                  |L1.8644|
                          DCD      out_U
                  |L1.8648|
                          DCD      FZ_U1
                  |L1.8652|
                          DCD      Ib_ips_termokompensat
                  |L1.8656|
                          DCD      FZ_ISW12
                  |L1.8660|
                          DCD      FZ_T2
                  |L1.8664|
0021d8  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021dc  cccec2ce
0021e0  d7cddbc9
0021e4  20c7c0  
0021e7  d0dfc420          DCB      208,223,196,"  ",0
0021eb  2000    
0021ed  00                DCB      0
0021ee  00                DCB      0
0021ef  00                DCB      0
                  |L1.8688|
0021f0  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021f4  d2d3ccc1
0021f8  cbc5d0c0
0021fc  21212120
002200  20202020
002204  00      
002205  00                DCB      0
002206  00                DCB      0
002207  00                DCB      0
                  |L1.8712|
002208  f2af5270          ADR      r2,|L1.7324|
00220c  f2af515c          ADR      r1,|L1.7348|
002210  f2af003c          ADR      r0,|L1.8664|
002214  f8cd8000          STR      r8,[sp,#0]
002218  f7fffffe          BL       show_mess
                  |L1.8732|
;;;2130   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2131   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2132   					"    ТУМБЛЕРА!!!     ",
;;;2133   					5000);
;;;2134   		}
;;;2135   	if(sk_stat[1]==1)
00221c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00221e  2801              CMP      r0,#1
002220  d106              BNE      |L1.8752|
;;;2136   		{
;;;2137   		vz2_stat=vz2sWRK2;
002222  f886a007          STRB     r10,[r6,#7]
;;;2138   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002226  210b              MOVS     r1,#0xb
002228  f44f70ca          MOV      r0,#0x194
00222c  f7fffffe          BL       lc640_write
                  |L1.8752|
;;;2139   		}
;;;2140   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002230  2314              MOVS     r3,#0x14
002232  2200              MOVS     r2,#0
002234  2164              MOVS     r1,#0x64
002236  20d2              MOVS     r0,#0xd2
002238  f7fffffe          BL       mess_send
                  |L1.8764|
;;;2141   	}
;;;2142   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
00223c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00223e  280f              CMP      r0,#0xf
002240  d12e              BNE      |L1.8864|
;;;2143   	{
;;;2144   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002242  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002244  280f              CMP      r0,#0xf
002246  d102              BNE      |L1.8782|
002248  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00224c  b908              CBNZ     r0,|L1.8786|
                  |L1.8782|
;;;2145   		{
;;;2146   		vz2_stat_cnt=10;
00224e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8786|
;;;2147   		}
;;;2148   	vz2_stat_cnt--;
002252  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002256  f1a00001          SUB      r0,r0,#1
00225a  b200              SXTH     r0,r0
00225c  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2149   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002260  280a              CMP      r0,#0xa
002262  d001              BEQ      |L1.8808|
002264  2809              CMP      r0,#9
002266  d10b              BNE      |L1.8832|
                  |L1.8808|
;;;2150   		{
;;;2151   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002268  f6af3380          ADR      r3,|L1.5868|
00226c  f6af326c          ADR      r2,|L1.5892|
002270  f6af3158          ADR      r1,|L1.5916|
002274  f2af5034          ADR      r0,|L1.7492|
002278  f8cd8000          STR      r8,[sp,#0]
00227c  f7fffffe          BL       show_mess
                  |L1.8832|
;;;2152   					"      ТУМБЛЕР       ",
;;;2153   					"     ВЫСОКОГО       ",
;;;2154   					"    НАПРЯЖЕНИЯ      ",
;;;2155   					5000);
;;;2156   		}
;;;2157   	if(sk_stat[1]==0)
002280  7868              LDRB     r0,[r5,#1]  ; sk_stat
002282  b938              CBNZ     r0,|L1.8852|
;;;2158   		{
;;;2159   		vz2_stat=vz2sOFF;
002284  71f7              STRB     r7,[r6,#7]
;;;2160   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002286  2100              MOVS     r1,#0
002288  f44f70ca          MOV      r0,#0x194
00228c  f7fffffe          BL       lc640_write
;;;2161   		vz_stop();
002290  f7fffffe          BL       vz_stop
                  |L1.8852|
;;;2162   
;;;2163   		}
;;;2164   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002294  2314              MOVS     r3,#0x14
002296  2200              MOVS     r2,#0
002298  2164              MOVS     r1,#0x64
00229a  20d2              MOVS     r0,#0xd2
00229c  f7fffffe          BL       mess_send
                  |L1.8864|
;;;2165   	}
;;;2166   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022a0  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2167   	{
;;;2168   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2169   		{
;;;2170   		vz2_stat_cnt=10;
;;;2171   		}
;;;2172   	vz2_stat_cnt--;
;;;2173   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2174   		{
;;;2175   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022a2  f64038b8          MOV      r8,#0xbb8
0022a6  2812              CMP      r0,#0x12              ;2166
0022a8  d13d              BNE      |L1.8998|
0022aa  7a30              LDRB     r0,[r6,#8]            ;2168  ; vz2_stat_old
0022ac  2812              CMP      r0,#0x12              ;2168
0022ae  d102              BNE      |L1.8886|
0022b0  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2168  ; vz2_stat_cnt
0022b4  b908              CBNZ     r0,|L1.8890|
                  |L1.8886|
0022b6  f8a6407a          STRH     r4,[r6,#0x7a]         ;2170
                  |L1.8890|
0022ba  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2172  ; vz2_stat_cnt
0022be  f1a00001          SUB      r0,r0,#1              ;2172
0022c2  b200              SXTH     r0,r0                 ;2172
0022c4  f8a6007a          STRH     r0,[r6,#0x7a]         ;2172
0022c8  280a              CMP      r0,#0xa               ;2173
0022ca  d001              BEQ      |L1.8912|
0022cc  2809              CMP      r0,#9                 ;2173
0022ce  d10a              BNE      |L1.8934|
                  |L1.8912|
0022d0  f2af53f0          ADR      r3,|L1.7396|
0022d4  f2af52dc          ADR      r2,|L1.7420|
0022d8  f2af51c8          ADR      r1,|L1.7444|
0022dc  a0ff              ADR      r0,|L1.9948|
0022de  f8cd8000          STR      r8,[sp,#0]
0022e2  f7fffffe          BL       show_mess
                  |L1.8934|
;;;2176   					"       ЗАРЯД        ",
;;;2177   					"      УСПЕШНО       ",
;;;2178   					"     ЗАВЕРШЕН       ",
;;;2179   					3000);
;;;2180   		}
;;;2181   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022e6  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022ea  2806              CMP      r0,#6
0022ec  d001              BEQ      |L1.8946|
0022ee  2805              CMP      r0,#5
0022f0  d10b              BNE      |L1.8970|
                  |L1.8946|
;;;2182   		{
;;;2183   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022f2  f6af4308          ADR      r3,|L1.5868|
0022f6  f6af32f4          ADR      r2,|L1.5892|
0022fa  f6af31e0          ADR      r1,|L1.5916|
0022fe  f2af50bc          ADR      r0,|L1.7492|
002302  f8cd8000          STR      r8,[sp,#0]
002306  f7fffffe          BL       show_mess
                  |L1.8970|
;;;2184   					"      ТУМБЛЕР       ",
;;;2185   					"     ВЫСОКОГО       ",
;;;2186   					"    НАПРЯЖЕНИЯ      ",
;;;2187   					3000);
;;;2188   		}
;;;2189   	if(sk_stat[1]==0)
00230a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00230c  b928              CBNZ     r0,|L1.8986|
;;;2190   		{
;;;2191   		vz2_stat=vz2sOFF;
00230e  71f7              STRB     r7,[r6,#7]
;;;2192   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002310  2100              MOVS     r1,#0
002312  f44f70ca          MOV      r0,#0x194
002316  f7fffffe          BL       lc640_write
                  |L1.8986|
;;;2193   		}
;;;2194   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00231a  2314              MOVS     r3,#0x14
00231c  2200              MOVS     r2,#0
00231e  2164              MOVS     r1,#0x64
002320  20d2              MOVS     r0,#0xd2
002322  f7fffffe          BL       mess_send
                  |L1.8998|
;;;2195   	}
;;;2196   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
002326  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002328  2813              CMP      r0,#0x13
00232a  d13d              BNE      |L1.9128|
;;;2197   	{
;;;2198   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00232c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00232e  2813              CMP      r0,#0x13
002330  d102              BNE      |L1.9016|
002332  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002336  b908              CBNZ     r0,|L1.9020|
                  |L1.9016|
;;;2199   		{
;;;2200   		vz2_stat_cnt=10;
002338  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9020|
;;;2201   		}
;;;2202   	vz2_stat_cnt--;
00233c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002340  f1a00001          SUB      r0,r0,#1
002344  b200              SXTH     r0,r0
002346  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2203   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00234a  280a              CMP      r0,#0xa
00234c  d001              BEQ      |L1.9042|
00234e  2809              CMP      r0,#9
002350  d10a              BNE      |L1.9064|
                  |L1.9042|
;;;2204   		{
;;;2205   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002352  f2af53f8          ADR      r3,|L1.7516|
002356  f2af52e4          ADR      r2,|L1.7540|
00235a  f2af6148          ADR      r1,|L1.7444|
00235e  a0df              ADR      r0,|L1.9948|
002360  f8cd8000          STR      r8,[sp,#0]
002364  f7fffffe          BL       show_mess
                  |L1.9064|
;;;2206   					"       ЗАРЯД        ",
;;;2207   					"     ПРЕКРАЩЕН      ",
;;;2208   					"                    ",
;;;2209   					3000);
;;;2210   		}
;;;2211   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002368  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
00236c  2806              CMP      r0,#6
00236e  d001              BEQ      |L1.9076|
002370  2805              CMP      r0,#5
002372  d10b              BNE      |L1.9100|
                  |L1.9076|
;;;2212   		{
;;;2213   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002374  f6af438c          ADR      r3,|L1.5868|
002378  f6af4278          ADR      r2,|L1.5892|
00237c  f6af4164          ADR      r1,|L1.5916|
002380  f2af6040          ADR      r0,|L1.7492|
002384  f8cd8000          STR      r8,[sp,#0]
002388  f7fffffe          BL       show_mess
                  |L1.9100|
;;;2214   					"      ТУМБЛЕР       ",
;;;2215   					"     ВЫСОКОГО       ",
;;;2216   					"    НАПРЯЖЕНИЯ      ",
;;;2217   					3000);
;;;2218   		}
;;;2219   	if(sk_stat[1]==0)
00238c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00238e  b928              CBNZ     r0,|L1.9116|
;;;2220   		{
;;;2221   		vz2_stat=vz2sOFF;
002390  71f7              STRB     r7,[r6,#7]
;;;2222   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002392  2100              MOVS     r1,#0
002394  f44f70ca          MOV      r0,#0x194
002398  f7fffffe          BL       lc640_write
                  |L1.9116|
;;;2223   		}
;;;2224   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00239c  2314              MOVS     r3,#0x14
00239e  2200              MOVS     r2,#0
0023a0  2164              MOVS     r1,#0x64
0023a2  20d2              MOVS     r0,#0xd2
0023a4  f7fffffe          BL       mess_send
                  |L1.9128|
;;;2225   	}
;;;2226   vz2_stat_old=vz2_stat;
0023a8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0023aa  7230              STRB     r0,[r6,#8]
;;;2227   
;;;2228   }
0023ac  e8bd8ff8          POP      {r3-r11,pc}
;;;2229   
                          ENDP

                  vz2_start PROC
;;;2231   //старт уравнительног заряда
;;;2232   char vz2_start(char hour)
0023b0  b510              PUSH     {r4,lr}
;;;2233   {          
;;;2234   char out;
;;;2235   out=0;
0023b2  f04f0000          MOV      r0,#0
;;;2236   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023b6  49cf              LDR      r1,|L1.9972|
0023b8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023bc  2a00              CMP      r2,#0
0023be  d110              BNE      |L1.9186|
0023c0  4acd              LDR      r2,|L1.9976|
0023c2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023c4  2a01              CMP      r2,#1
0023c6  d00c              BEQ      |L1.9186|
0023c8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023ca  2a00              CMP      r2,#0
0023cc  d109              BNE      |L1.9186|
;;;2237   	{
;;;2238   	if(vz1_stat==vz1sOFF)
;;;2239   		{
;;;2240   		vz2_stat=vz2sSTEP1;
0023ce  f04f0001          MOV      r0,#1
0023d2  71c8              STRB     r0,[r1,#7]
;;;2241   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023d4  4601              MOV      r1,r0
0023d6  f44f70ca          MOV      r0,#0x194
0023da  f7fffffe          BL       lc640_write
;;;2242   		out=1;
0023de  f04f0001          MOV      r0,#1
                  |L1.9186|
;;;2243   		
;;;2244   		}
;;;2245   /*	spc_stat=spcVZ;
;;;2246   	__ee_spc_stat=spcVZ; 
;;;2247   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2248   	vz_cnt_h=hour;
;;;2249   	__ee_vz_cnt=hour*60;
;;;2250   	if(hour==0)__ee_vz_cnt=30;
;;;2251   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2252   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2253   	vz_cnt_h_=0;
;;;2254   	vz_cnt_s=0;
;;;2255   	vz_cnt_s_=0;
;;;2256   	
;;;2257   		*/
;;;2258   	}
;;;2259   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2260   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2261   //plazma=out;	
;;;2262   return out;
;;;2263   }
0023e2  bd10              POP      {r4,pc}
;;;2264   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2265   //стоп формовочного заряда
;;;2266   void vz2_stop(void)
0023e4  48c3              LDR      r0,|L1.9972|
;;;2267   {
;;;2268   if(vz2_stat!=vz2sOFF)
0023e6  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023e8  2900              CMP      r1,#0
0023ea  d006              BEQ      |L1.9210|
;;;2269   	{
;;;2270   	vz2_stat=vz2sSTOP;
0023ec  f04f0113          MOV      r1,#0x13
0023f0  71c1              STRB     r1,[r0,#7]
;;;2271   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023f2  f44f70ca          MOV      r0,#0x194
0023f6  f7ffbffe          B.W      lc640_write
                  |L1.9210|
;;;2272   	}
;;;2273   }
0023fa  4770              BX       lr
;;;2274   
                          ENDP

                  kb_init PROC
;;;2275   //-----------------------------------------------
;;;2276   void kb_init(void)
0023fc  48bf              LDR      r0,|L1.9980|
;;;2277   {
;;;2278   main_kb_cnt=(TBAT*60)-60/*120*/;
0023fe  f06f013b          MVN      r1,#0x3b
002402  8800              LDRH     r0,[r0,#0]  ; TBAT
002404  ebc01000          RSB      r0,r0,r0,LSL #4
002408  eb010080          ADD      r0,r1,r0,LSL #2
00240c  49b9              LDR      r1,|L1.9972|
00240e  f8a10052          STRH     r0,[r1,#0x52]
;;;2279   }
002412  4770              BX       lr
;;;2280   
                          ENDP

                  kb_hndl PROC
;;;2281   //-----------------------------------------------
;;;2282   void kb_hndl(void)
002414  e92d5ff0          PUSH     {r4-r12,lr}
;;;2283   {
;;;2284   
;;;2285   static signed short ibat[2],ibat_[2];
;;;2286   #ifdef UKU_TELECORE2015
;;;2287   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2288   #else 
;;;2289   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002418  f8df82d8          LDR      r8,|L1.9972|
;;;2290   #endif
;;;2291   	{
;;;2292   	main_kb_cnt=0;
;;;2293   	
;;;2294   	kb_start[0]=0;
;;;2295   	kb_start[1]=0;
;;;2296   	kb_start_ips=0;
;;;2297   
;;;2298   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2299   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2300   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2301   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
00241c  f8dfa2e0          LDR      r10,|L1.9984|
002420  2500              MOVS     r5,#0                 ;2289
002422  f8b80052          LDRH     r0,[r8,#0x52]         ;2289  ; main_kb_cnt
002426  4eb7              LDR      r6,|L1.9988|
002428  1c40              ADDS     r0,r0,#1              ;2289
00242a  b201              SXTH     r1,r0                 ;2289
00242c  48b3              LDR      r0,|L1.9980|
00242e  f8a81052          STRH     r1,[r8,#0x52]         ;2289
002432  f8df92d4          LDR      r9,|L1.9992|
002436  f9b00000          LDRSH    r0,[r0,#0]            ;2289  ; TBAT
;;;2302   #endif	
;;;2303   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2304   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2305   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2306   #endif
;;;2307   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2308    
;;;2309   		{
;;;2310   		kb_start[0]=0;
;;;2311   		kb_start[1]=0;
;;;2312   		kb_start_ips=0;
;;;2313   		}
;;;2314   
;;;2315   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2316   		{
;;;2317   		kb_cnt_1lev=10;
00243a  270a              MOVS     r7,#0xa
00243c  ebc01200          RSB      r2,r0,r0,LSL #4       ;2289
002440  f04f0b01          MOV      r11,#1                ;2298
002444  f1080458          ADD      r4,r8,#0x58           ;2294
002448  ebb10f82          CMP      r1,r2,LSL #2          ;2289
00244c  db6c              BLT      |L1.9512|
00244e  2800              CMP      r0,#0                 ;2289
002450  d06a              BEQ      |L1.9512|
002452  f8a85052          STRH     r5,[r8,#0x52]         ;2292
002456  7025              STRB     r5,[r4,#0]            ;2294
002458  7065              STRB     r5,[r4,#1]            ;2295
00245a  f888501d          STRB     r5,[r8,#0x1d]         ;2296
00245e  48ab              LDR      r0,|L1.9996|
002460  7800              LDRB     r0,[r0,#0]            ;2298  ; BAT_IS_ON
002462  2855              CMP      r0,#0x55              ;2298
002464  d111              BNE      |L1.9354|
002466  f9b60002          LDRSH    r0,[r6,#2]            ;2298  ; bat
00246a  2850              CMP      r0,#0x50              ;2298
00246c  dd0d              BLE      |L1.9354|
00246e  f9b60008          LDRSH    r0,[r6,#8]            ;2298  ; bat
002472  f7fffffe          BL       abs
002476  f9b91000          LDRSH    r1,[r9,#0]            ;2298  ; IKB
00247a  4288              CMP      r0,r1                 ;2298
00247c  db03              BLT      |L1.9350|
00247e  f8960041          LDRB     r0,[r6,#0x41]         ;2298  ; bat
002482  07c0              LSLS     r0,r0,#31             ;2298
002484  d001              BEQ      |L1.9354|
                  |L1.9350|
002486  f884b000          STRB     r11,[r4,#0]           ;2298
                  |L1.9354|
00248a  48a0              LDR      r0,|L1.9996|
00248c  7840              LDRB     r0,[r0,#1]            ;2299  ; BAT_IS_ON
00248e  2855              CMP      r0,#0x55              ;2299
002490  d111              BNE      |L1.9398|
002492  f9b60052          LDRSH    r0,[r6,#0x52]         ;2299  ; bat
002496  2850              CMP      r0,#0x50              ;2299
002498  dd0d              BLE      |L1.9398|
00249a  f9b60058          LDRSH    r0,[r6,#0x58]         ;2299  ; bat
00249e  f7fffffe          BL       abs
0024a2  f9b91000          LDRSH    r1,[r9,#0]            ;2299  ; IKB
0024a6  4288              CMP      r0,r1                 ;2299
0024a8  db03              BLT      |L1.9394|
0024aa  f8960091          LDRB     r0,[r6,#0x91]         ;2299  ; bat
0024ae  07c0              LSLS     r0,r0,#31             ;2299
0024b0  d001              BEQ      |L1.9398|
                  |L1.9394|
0024b2  f884b001          STRB     r11,[r4,#1]           ;2299
                  |L1.9398|
0024b6  4896              LDR      r0,|L1.10000|
0024b8  7800              LDRB     r0,[r0,#0]            ;2301  ; ips_bat_av_vzvod
0024ba  b970              CBNZ     r0,|L1.9434|
0024bc  f9ba0000          LDRSH    r0,[r10,#0]           ;2301  ; Ib_ips_termokompensat
0024c0  f7fffffe          BL       abs
0024c4  f9b91000          LDRSH    r1,[r9,#0]            ;2301  ; IKB
0024c8  4288              CMP      r0,r1                 ;2301
0024ca  db04              BLT      |L1.9430|
0024cc  4891              LDR      r0,|L1.10004|
0024ce  f8900041          LDRB     r0,[r0,#0x41]         ;2301  ; bat_ips
0024d2  07c0              LSLS     r0,r0,#31             ;2301
0024d4  d001              BEQ      |L1.9434|
                  |L1.9430|
0024d6  f888b01d          STRB     r11,[r8,#0x1d]        ;2301
                  |L1.9434|
0024da  488f              LDR      r0,|L1.10008|
0024dc  7800              LDRB     r0,[r0,#0]            ;2303  ; net_av
0024de  b998              CBNZ     r0,|L1.9480|
0024e0  f898001e          LDRB     r0,[r8,#0x1e]         ;2303  ; num_of_wrks_bps
0024e4  b180              CBZ      r0,|L1.9480|
0024e6  f8980023          LDRB     r0,[r8,#0x23]         ;2303  ; spc_stat
0024ea  b108              CBZ      r0,|L1.9456|
0024ec  2802              CMP      r0,#2                 ;2303
0024ee  d10b              BNE      |L1.9480|
                  |L1.9456|
0024f0  f8980005          LDRB     r0,[r8,#5]            ;2305  ; vz1_stat
0024f4  f8981007          LDRB     r1,[r8,#7]            ;2305  ; vz2_stat
0024f8  4308              ORRS     r0,r0,r1              ;2305
0024fa  d002              BEQ      |L1.9474|
0024fc  4887              LDR      r0,|L1.10012|
0024fe  8800              LDRH     r0,[r0,#0]            ;2305  ; SMART_SPC
002500  b910              CBNZ     r0,|L1.9480|
                  |L1.9474|
002502  4887              LDR      r0,|L1.10016|
002504  7800              LDRB     r0,[r0,#0]            ;2307  ; sp_ch_stat
002506  b118              CBZ      r0,|L1.9488|
                  |L1.9480|
002508  7025              STRB     r5,[r4,#0]            ;2310
00250a  7065              STRB     r5,[r4,#1]            ;2311
00250c  f888501d          STRB     r5,[r8,#0x1d]         ;2312
                  |L1.9488|
002510  7820              LDRB     r0,[r4,#0]            ;2315  ; kb_start
002512  2801              CMP      r0,#1                 ;2315
002514  d020              BEQ      |L1.9560|
002516  7860              LDRB     r0,[r4,#1]            ;2315  ; kb_start
002518  2801              CMP      r0,#1                 ;2315
00251a  d01d              BEQ      |L1.9560|
00251c  f898001d          LDRB     r0,[r8,#0x1d]         ;2315  ; kb_start_ips
002520  2801              CMP      r0,#1                 ;2315
002522  d019              BEQ      |L1.9560|
;;;2318   		}
;;;2319   	else kb_cnt_1lev=0;
002524  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9512|
;;;2320   	}
;;;2321   
;;;2322   if(kb_cnt_1lev)
002528  4641              MOV      r1,r8
00252a  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2323   	{
;;;2324   	kb_cnt_1lev--;
;;;2325   
;;;2326   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2327   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2328   
;;;2329   
;;;2330   	if(kb_cnt_1lev==5)
;;;2331   		{
;;;2332   		ibat[0]=abs(bat[0]._Ib);
00252e  f8df81c4          LDR      r8,|L1.9972|
002532  2800              CMP      r0,#0                 ;2322
002534  f1080890          ADD      r8,r8,#0x90
002538  d07e              BEQ      |L1.9784|
00253a  f1a00001          SUB      r0,r0,#1              ;2324
00253e  b200              SXTH     r0,r0                 ;2324
002540  468b              MOV      r11,r1                ;2324
002542  f8a10054          STRH     r0,[r1,#0x54]         ;2324
002546  2805              CMP      r0,#5                 ;2326
002548  dd09              BLE      |L1.9566|
00254a  230f              MOVS     r3,#0xf               ;2326
00254c  221e              MOVS     r2,#0x1e              ;2326
00254e  2164              MOVS     r1,#0x64              ;2326
002550  20e1              MOVS     r0,#0xe1              ;2326
002552  f7fffffe          BL       mess_send
002556  e00a              B        |L1.9582|
                  |L1.9560|
002558  f8a87054          STRH     r7,[r8,#0x54]         ;2317
00255c  e7e4              B        |L1.9512|
                  |L1.9566|
00255e  2800              CMP      r0,#0                 ;2327
002560  dd05              BLE      |L1.9582|
002562  230f              MOVS     r3,#0xf               ;2327
002564  221e              MOVS     r2,#0x1e              ;2327
002566  2169              MOVS     r1,#0x69              ;2327
002568  20e1              MOVS     r0,#0xe1              ;2327
00256a  f7fffffe          BL       mess_send
                  |L1.9582|
00256e  f8bb0054          LDRH     r0,[r11,#0x54]        ;2330  ; kb_cnt_1lev
002572  2805              CMP      r0,#5                 ;2330
002574  d111              BNE      |L1.9626|
002576  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00257a  f7fffffe          BL       abs
00257e  f8a80000          STRH     r0,[r8,#0]
;;;2333   		ibat[1]=abs(bat[1]._Ib);
002582  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
002586  f7fffffe          BL       abs
00258a  f8a80002          STRH     r0,[r8,#2]
;;;2334   		ibat_ips=abs(Ib_ips_termokompensat);
00258e  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002592  f7fffffe          BL       abs
002596  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9626|
;;;2335   		}
;;;2336   	
;;;2337   	if(kb_cnt_1lev==0)
00259a  4856              LDR      r0,|L1.9972|
00259c  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025a0  2800              CMP      r0,#0
0025a2  d158              BNE      |L1.9814|
;;;2338   		{
;;;2339   		ibat_[0]=abs(bat[0]._Ib);
0025a4  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025a8  f7fffffe          BL       abs
0025ac  f8dfb144          LDR      r11,|L1.9972|
0025b0  f10b0b94          ADD      r11,r11,#0x94
0025b4  f8ab0000          STRH     r0,[r11,#0]
;;;2340   		ibat_[1]=abs(bat[1]._Ib);
0025b8  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
0025bc  f7fffffe          BL       abs
0025c0  f8ab0002          STRH     r0,[r11,#2]
;;;2341   		ibat_ips_=abs(Ib_ips_termokompensat);
0025c4  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025c8  f7fffffe          BL       abs
0025cc  f8dfa124          LDR      r10,|L1.9972|
0025d0  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2342   
;;;2343   		kb_cnt_2lev=0;
0025d4  f8aa5056          STRH     r5,[r10,#0x56]
;;;2344   
;;;2345   
;;;2346   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025d8  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025dc  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025e0  4408              ADD      r0,r0,r1
0025e2  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025e6  4288              CMP      r0,r1
0025e8  da02              BGE      |L1.9712|
0025ea  7820              LDRB     r0,[r4,#0]  ; kb_start
0025ec  2801              CMP      r0,#1
0025ee  d034              BEQ      |L1.9818|
                  |L1.9712|
;;;2347   			{
;;;2348   			kb_cnt_2lev=10;  
;;;2349   			}
;;;2350   		else if(bat[0]._Ub>200)
0025f0  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025f4  28c8              CMP      r0,#0xc8
0025f6  dd04              BLE      |L1.9730|
;;;2351   			{
;;;2352   			kb_start[0]=0;
0025f8  7025              STRB     r5,[r4,#0]
;;;2353   			avar_bat_hndl(0,0);
0025fa  2100              MOVS     r1,#0
0025fc  4608              MOV      r0,r1
0025fe  f7fffffe          BL       avar_bat_hndl
                  |L1.9730|
;;;2354   			}
;;;2355   		
;;;2356   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
002602  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
002606  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
00260a  4408              ADD      r0,r0,r1
00260c  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002610  4288              CMP      r0,r1
002612  da02              BGE      |L1.9754|
002614  7860              LDRB     r0,[r4,#1]  ; kb_start
002616  2801              CMP      r0,#1
002618  d022              BEQ      |L1.9824|
                  |L1.9754|
;;;2357   			{
;;;2358   			kb_cnt_2lev=10;     
;;;2359   			}
;;;2360   		else  if(bat[1]._Ub>200)
00261a  f9b60052          LDRSH    r0,[r6,#0x52]  ; bat
00261e  28c8              CMP      r0,#0xc8
002620  dd04              BLE      |L1.9772|
;;;2361   			{
;;;2362   			kb_start[1]=0;
002622  7065              STRB     r5,[r4,#1]
;;;2363   			avar_bat_hndl(1,0);
002624  2100              MOVS     r1,#0
002626  2001              MOVS     r0,#1
002628  f7fffffe          BL       avar_bat_hndl
                  |L1.9772|
;;;2364   			}
;;;2365   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2366   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
00262c  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002630  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002634  4408              ADD      r0,r0,r1
002636  e000              B        |L1.9786|
                  |L1.9784|
002638  e01b              B        |L1.9842|
                  |L1.9786|
00263a  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00263e  4288              CMP      r0,r1
002640  da09              BGE      |L1.9814|
002642  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
002646  2801              CMP      r0,#1
002648  d105              BNE      |L1.9814|
;;;2367   			{
;;;2368   			if(KB_ALGORITM==1)
00264a  4836              LDR      r0,|L1.10020|
00264c  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
00264e  2801              CMP      r0,#1
002650  d009              BEQ      |L1.9830|
;;;2369   				{
;;;2370   				avar_bat_ips_hndl(1);
;;;2371   				kb_start_ips=0;
;;;2372   				}
;;;2373   			else
;;;2374   				{
;;;2375   				kb_cnt_2lev=10;     
002652  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9814|
;;;2376   				}
;;;2377   			}
;;;2378   #endif
;;;2379   		}	
;;;2380   
;;;2381   
;;;2382   	}
;;;2383   else if(kb_cnt_2lev)
;;;2384   	{
;;;2385   	kb_cnt_2lev--;
;;;2386   
;;;2387   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2388   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2389   
;;;2390   
;;;2391   	if(kb_cnt_2lev==5)
;;;2392   		{
;;;2393   		ibat[0]=abs(bat[0]._Ib);
;;;2394   		ibat[1]=abs(bat[1]._Ib);
;;;2395   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2396   		}
;;;2397   	
;;;2398   	if(kb_cnt_2lev==0)
;;;2399   		{
;;;2400   		ibat_[0]=abs(bat[0]._Ib);
;;;2401   		ibat_[1]=abs(bat[1]._Ib);
;;;2402   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2403   
;;;2404   		kb_full_ver=0;
;;;2405   
;;;2406   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2407   			{
;;;2408   			kb_full_ver=1;  
;;;2409   			}
;;;2410   		else if(bat[0]._Ub>200)			
;;;2411   			{
;;;2412   			kb_start[0]=0;
;;;2413   			avar_bat_hndl(0,0);
;;;2414   			}
;;;2415   
;;;2416   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2417   			{
;;;2418   			kb_full_ver=1;     
;;;2419   			}
;;;2420   		else	if(bat[1]._Ub>200)		
;;;2421   			{
;;;2422   			kb_start[1]=0;
;;;2423   			avar_bat_hndl(1,0);
;;;2424   			}
;;;2425   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2426   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2427   			{
;;;2428   			if(KB_ALGORITM==2)
;;;2429   				{
;;;2430   				avar_bat_ips_hndl(1);
;;;2431   				kb_start_ips=0;
;;;2432   				}
;;;2433   			else
;;;2434   				{
;;;2435   				kb_full_ver=1;     
;;;2436   				}
;;;2437   			}
;;;2438   #endif
;;;2439   		}	
;;;2440   	}
;;;2441   
;;;2442   else if(kb_full_ver)
;;;2443   	{
;;;2444   	
;;;2445   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2446   
;;;2447   	if( abs(bat[0]._Ib) > IKB ) 
;;;2448   		{
;;;2449   		if(kb_start[0]==1)
;;;2450   			{
;;;2451   			kb_start[0]=0;
;;;2452   			avar_bat_hndl(0,0);
;;;2453   			}
;;;2454   		}
;;;2455   
;;;2456   	if( abs(bat[1]._Ib) > IKB ) 
;;;2457   		{
;;;2458   		if(kb_start[1]==1)
;;;2459   			{
;;;2460   			kb_start[1]=0;
;;;2461   			avar_bat_hndl(1,0);
;;;2462   			}
;;;2463   		}
;;;2464   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2465   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2466   		{
;;;2467   		if(kb_start_ips==1)
;;;2468   			{
;;;2469   			kb_start_ips=0;
;;;2470   			avar_bat_ips_hndl(0);
;;;2471   			}
;;;2472   		}
;;;2473   #endif
;;;2474   
;;;2475   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2476   		{
;;;2477   		kb_full_ver=0;
;;;2478   		}
;;;2479   
;;;2480   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2481   		{
;;;2482   		kb_full_ver=0;
;;;2483   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2484   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2485   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2486   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2487   #endif
;;;2488   		}
;;;2489   	}
;;;2490   
;;;2491   }
002656  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9818|
00265a  f8aa7056          STRH     r7,[r10,#0x56]        ;2348
00265e  e7d0              B        |L1.9730|
                  |L1.9824|
002660  f8aa7056          STRH     r7,[r10,#0x56]        ;2358
002664  e7e2              B        |L1.9772|
                  |L1.9830|
002666  2001              MOVS     r0,#1                 ;2370
002668  f7fffffe          BL       avar_bat_ips_hndl
00266c  f88a501d          STRB     r5,[r10,#0x1d]        ;2371
                  |L1.9840|
002670  e7f1              B        |L1.9814|
                  |L1.9842|
002672  f9b10056          LDRSH    r0,[r1,#0x56]         ;2383  ; kb_cnt_2lev
002676  b380              CBZ      r0,|L1.9946|
002678  f1a00001          SUB      r0,r0,#1              ;2385
00267c  b200              SXTH     r0,r0                 ;2385
00267e  460f              MOV      r7,r1                 ;2385
002680  f8a10056          STRH     r0,[r1,#0x56]         ;2385
002684  2805              CMP      r0,#5                 ;2387
002686  dd06              BLE      |L1.9878|
002688  230f              MOVS     r3,#0xf               ;2387
00268a  22c8              MOVS     r2,#0xc8              ;2387
00268c  2164              MOVS     r1,#0x64              ;2387
00268e  20e1              MOVS     r0,#0xe1              ;2387
002690  f7fffffe          BL       mess_send
002694  e007              B        |L1.9894|
                  |L1.9878|
002696  2800              CMP      r0,#0                 ;2388
002698  dd05              BLE      |L1.9894|
00269a  230f              MOVS     r3,#0xf               ;2388
00269c  22c8              MOVS     r2,#0xc8              ;2388
00269e  2169              MOVS     r1,#0x69              ;2388
0026a0  20e1              MOVS     r0,#0xe1              ;2388
0026a2  f7fffffe          BL       mess_send
                  |L1.9894|
0026a6  f8b70056          LDRH     r0,[r7,#0x56]         ;2391  ; kb_cnt_2lev
0026aa  2805              CMP      r0,#5                 ;2391
0026ac  d111              BNE      |L1.9938|
0026ae  f9b60008          LDRSH    r0,[r6,#8]            ;2393  ; bat
0026b2  f7fffffe          BL       abs
0026b6  f8a80000          STRH     r0,[r8,#0]            ;2393
0026ba  f9b60058          LDRSH    r0,[r6,#0x58]         ;2394  ; bat
0026be  f7fffffe          BL       abs
0026c2  f8a80002          STRH     r0,[r8,#2]            ;2394
0026c6  f9ba0000          LDRSH    r0,[r10,#0]           ;2395  ; Ib_ips_termokompensat
0026ca  f7fffffe          BL       abs
0026ce  f8a7005a          STRH     r0,[r7,#0x5a]         ;2395
                  |L1.9938|
0026d2  4808              LDR      r0,|L1.9972|
0026d4  f8b00056          LDRH     r0,[r0,#0x56]         ;2398  ; kb_cnt_2lev
0026d8  e026              B        |L1.10024|
                  |L1.9946|
0026da  e087              B        |L1.10220|
                  |L1.9948|
0026dc  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026e0  d4ced0cc
0026e4  cec2ced7
0026e8  cddbc920
0026ec  202020  
0026ef  2000              DCB      " ",0
0026f1  00                DCB      0
0026f2  00                DCB      0
0026f3  00                DCB      0
                  |L1.9972|
                          DCD      ||area_number.25||
                  |L1.9976|
                          DCD      speedChrgBlckStat
                  |L1.9980|
                          DCD      TBAT
                  |L1.9984|
                          DCD      Ib_ips_termokompensat
                  |L1.9988|
                          DCD      bat
                  |L1.9992|
                          DCD      IKB
                  |L1.9996|
                          DCD      BAT_IS_ON
                  |L1.10000|
                          DCD      ips_bat_av_vzvod
                  |L1.10004|
                          DCD      bat_ips
                  |L1.10008|
                          DCD      net_av
                  |L1.10012|
                          DCD      SMART_SPC
                  |L1.10016|
                          DCD      sp_ch_stat
                  |L1.10020|
                          DCD      KB_ALGORITM
                  |L1.10024|
002728  2800              CMP      r0,#0                 ;2398
                  |L1.10026|
00272a  d194              BNE      |L1.9814|
00272c  f9b60008          LDRSH    r0,[r6,#8]            ;2400  ; bat
002730  f7fffffe          BL       abs
002734  4fff              LDR      r7,|L1.11060|
002736  8038              STRH     r0,[r7,#0]            ;2400
002738  f9b60058          LDRSH    r0,[r6,#0x58]         ;2401  ; bat
00273c  f7fffffe          BL       abs
002740  8078              STRH     r0,[r7,#2]            ;2401
002742  f9ba0000          LDRSH    r0,[r10,#0]           ;2402  ; Ib_ips_termokompensat
002746  f7fffffe          BL       abs
00274a  f1a70a94          SUB      r10,r7,#0x94          ;2402
00274e  f8aa005c          STRH     r0,[r10,#0x5c]        ;2402
002752  f88a501c          STRB     r5,[r10,#0x1c]        ;2404
002756  f9b80000          LDRSH    r0,[r8,#0]            ;2406  ; ibat
00275a  f9b71000          LDRSH    r1,[r7,#0]            ;2406  ; ibat_
00275e  4408              ADD      r0,r0,r1              ;2406
002760  f9b91000          LDRSH    r1,[r9,#0]            ;2406  ; IKB
002764  4288              CMP      r0,r1                 ;2406
002766  da02              BGE      |L1.10094|
002768  7820              LDRB     r0,[r4,#0]            ;2406  ; kb_start
00276a  2801              CMP      r0,#1                 ;2406
00276c  d032              BEQ      |L1.10196|
                  |L1.10094|
00276e  f9b60002          LDRSH    r0,[r6,#2]            ;2410  ; bat
002772  28c8              CMP      r0,#0xc8              ;2410
002774  dd04              BLE      |L1.10112|
002776  7025              STRB     r5,[r4,#0]            ;2412
002778  2100              MOVS     r1,#0                 ;2413
00277a  4608              MOV      r0,r1                 ;2413
00277c  f7fffffe          BL       avar_bat_hndl
                  |L1.10112|
002780  f9b80002          LDRSH    r0,[r8,#2]            ;2416  ; ibat
002784  f9b71002          LDRSH    r1,[r7,#2]            ;2416  ; ibat_
002788  4408              ADD      r0,r0,r1              ;2416
00278a  f9b91000          LDRSH    r1,[r9,#0]            ;2416  ; IKB
00278e  4288              CMP      r0,r1                 ;2416
002790  da02              BGE      |L1.10136|
002792  7860              LDRB     r0,[r4,#1]            ;2416  ; kb_start
002794  2801              CMP      r0,#1                 ;2416
002796  d020              BEQ      |L1.10202|
                  |L1.10136|
002798  f9b60052          LDRSH    r0,[r6,#0x52]         ;2420  ; bat
00279c  28c8              CMP      r0,#0xc8              ;2420
00279e  dd04              BLE      |L1.10154|
0027a0  7065              STRB     r5,[r4,#1]            ;2422
0027a2  2100              MOVS     r1,#0                 ;2423
0027a4  2001              MOVS     r0,#1                 ;2423
0027a6  f7fffffe          BL       avar_bat_hndl
                  |L1.10154|
0027aa  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2426  ; ibat_ips
0027ae  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2426  ; ibat_ips_
0027b2  4408              ADD      r0,r0,r1              ;2426
0027b4  f9b91000          LDRSH    r1,[r9,#0]            ;2426  ; IKB
0027b8  4288              CMP      r0,r1                 ;2426
0027ba  f6bfaf59          BGE      |L1.9840|
0027be  f89a001d          LDRB     r0,[r10,#0x1d]        ;2426  ; kb_start_ips
0027c2  2801              CMP      r0,#1                 ;2426
0027c4  d1b1              BNE      |L1.10026|
0027c6  48dc              LDR      r0,|L1.11064|
0027c8  8800              LDRH     r0,[r0,#0]            ;2428  ; KB_ALGORITM
0027ca  2802              CMP      r0,#2                 ;2428
0027cc  d008              BEQ      |L1.10208|
0027ce  f88ab01c          STRB     r11,[r10,#0x1c]       ;2435
                  |L1.10194|
0027d2  e740              B        |L1.9814|
                  |L1.10196|
0027d4  f88ab01c          STRB     r11,[r10,#0x1c]       ;2408
0027d8  e7d2              B        |L1.10112|
                  |L1.10202|
0027da  f88ab01c          STRB     r11,[r10,#0x1c]       ;2418
0027de  e7e4              B        |L1.10154|
                  |L1.10208|
0027e0  2001              MOVS     r0,#1                 ;2430
0027e2  f7fffffe          BL       avar_bat_ips_hndl
0027e6  f88a501d          STRB     r5,[r10,#0x1d]        ;2431
0027ea  e734              B        |L1.9814|
                  |L1.10220|
0027ec  7f08              LDRB     r0,[r1,#0x1c]         ;2442  ; kb_full_ver
0027ee  4688              MOV      r8,r1                 ;2442
0027f0  2800              CMP      r0,#0                 ;2442
0027f2  d0ee              BEQ      |L1.10194|
0027f4  230f              MOVS     r3,#0xf               ;2445
0027f6  2200              MOVS     r2,#0                 ;2445
0027f8  216e              MOVS     r1,#0x6e              ;2445
0027fa  20e1              MOVS     r0,#0xe1              ;2445
0027fc  f7fffffe          BL       mess_send
002800  f9b60008          LDRSH    r0,[r6,#8]            ;2447  ; bat
002804  f7fffffe          BL       abs
002808  f9b91000          LDRSH    r1,[r9,#0]            ;2447  ; IKB
00280c  4288              CMP      r0,r1                 ;2447
00280e  dd07              BLE      |L1.10272|
002810  7820              LDRB     r0,[r4,#0]            ;2449  ; kb_start
002812  2801              CMP      r0,#1                 ;2449
002814  d104              BNE      |L1.10272|
002816  7025              STRB     r5,[r4,#0]            ;2451
002818  2100              MOVS     r1,#0                 ;2452
00281a  4608              MOV      r0,r1                 ;2452
00281c  f7fffffe          BL       avar_bat_hndl
                  |L1.10272|
002820  f9b60058          LDRSH    r0,[r6,#0x58]         ;2456  ; bat
002824  f7fffffe          BL       abs
002828  f9b91000          LDRSH    r1,[r9,#0]            ;2456  ; IKB
00282c  4288              CMP      r0,r1                 ;2456
00282e  dd06              BLE      |L1.10302|
002830  7860              LDRB     r0,[r4,#1]            ;2458  ; kb_start
002832  2801              CMP      r0,#1                 ;2458
002834  d103              BNE      |L1.10302|
002836  7065              STRB     r5,[r4,#1]            ;2460
002838  2100              MOVS     r1,#0                 ;2461
00283a  f7fffffe          BL       avar_bat_hndl
                  |L1.10302|
00283e  f9ba0000          LDRSH    r0,[r10,#0]           ;2465  ; Ib_ips_termokompensat
002842  f7fffffe          BL       abs
002846  f9b91000          LDRSH    r1,[r9,#0]            ;2465  ; IKB
00284a  4288              CMP      r0,r1                 ;2465
00284c  dd08              BLE      |L1.10336|
00284e  f898001d          LDRB     r0,[r8,#0x1d]         ;2467  ; kb_start_ips
002852  2801              CMP      r0,#1                 ;2467
002854  d104              BNE      |L1.10336|
002856  f888501d          STRB     r5,[r8,#0x1d]         ;2469
00285a  2000              MOVS     r0,#0                 ;2470
00285c  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10336|
002860  7820              LDRB     r0,[r4,#0]            ;2475  ; kb_start
002862  b930              CBNZ     r0,|L1.10354|
002864  7860              LDRB     r0,[r4,#1]            ;2475  ; kb_start
002866  b920              CBNZ     r0,|L1.10354|
002868  f898001d          LDRB     r0,[r8,#0x1d]         ;2475  ; kb_start_ips
00286c  b908              CBNZ     r0,|L1.10354|
00286e  f888501c          STRB     r5,[r8,#0x1c]         ;2477
                  |L1.10354|
002872  20e6              MOVS     r0,#0xe6              ;2480
002874  f7fffffe          BL       mess_find
002878  b118              CBZ      r0,|L1.10370|
00287a  48b0              LDR      r0,|L1.11068|
00287c  6800              LDR      r0,[r0,#0]            ;2480  ; mess_data
00287e  28e7              CMP      r0,#0xe7              ;2480
002880  d00a              BEQ      |L1.10392|
                  |L1.10370|
002882  48af              LDR      r0,|L1.11072|
002884  49af              LDR      r1,|L1.11076|
002886  f9b00000          LDRSH    r0,[r0,#0]            ;2480  ; USIGN
00288a  f9b11000          LDRSH    r1,[r1,#0]            ;2480  ; load_U
00288e  eb000080          ADD      r0,r0,r0,LSL #2       ;2480
002892  ebb10f40          CMP      r1,r0,LSL #1          ;2480
                  |L1.10390|
002896  da9c              BGE      |L1.10194|
                  |L1.10392|
002898  f888501c          STRB     r5,[r8,#0x1c]         ;2482
00289c  7820              LDRB     r0,[r4,#0]            ;2483  ; kb_start
00289e  4daa              LDR      r5,|L1.11080|
0028a0  2801              CMP      r0,#1                 ;2483
0028a2  d10f              BNE      |L1.10436|
0028a4  f9b90000          LDRSH    r0,[r9,#0]            ;2483  ; IKB
0028a8  f9b51000          LDRSH    r1,[r5,#0]            ;2483  ; load_I
0028ac  0040              LSLS     r0,r0,#1              ;2483
0028ae  fb90f0f7          SDIV     r0,r0,r7              ;2483
0028b2  4288              CMP      r0,r1                 ;2483
0028b4  da06              BGE      |L1.10436|
0028b6  f8960041          LDRB     r0,[r6,#0x41]         ;2483  ; bat
0028ba  07c0              LSLS     r0,r0,#31             ;2483
0028bc  d102              BNE      |L1.10436|
0028be  2101              MOVS     r1,#1                 ;2483
0028c0  f7fffffe          BL       avar_bat_hndl
                  |L1.10436|
0028c4  7860              LDRB     r0,[r4,#1]            ;2484  ; kb_start
0028c6  2801              CMP      r0,#1                 ;2484
0028c8  d110              BNE      |L1.10476|
0028ca  f9b90000          LDRSH    r0,[r9,#0]            ;2484  ; IKB
0028ce  f9b51000          LDRSH    r1,[r5,#0]            ;2484  ; load_I
0028d2  0040              LSLS     r0,r0,#1              ;2484
0028d4  fb90f0f7          SDIV     r0,r0,r7              ;2484
0028d8  4288              CMP      r0,r1                 ;2484
0028da  da07              BGE      |L1.10476|
0028dc  f8960091          LDRB     r0,[r6,#0x91]         ;2484  ; bat
0028e0  07c0              LSLS     r0,r0,#31             ;2484
0028e2  d103              BNE      |L1.10476|
0028e4  2101              MOVS     r1,#1                 ;2484
0028e6  4608              MOV      r0,r1                 ;2484
0028e8  f7fffffe          BL       avar_bat_hndl
                  |L1.10476|
0028ec  f898001d          LDRB     r0,[r8,#0x1d]         ;2486  ; kb_start_ips
0028f0  2801              CMP      r0,#1                 ;2486
                  |L1.10482|
0028f2  f47faebd          BNE      |L1.9840|
0028f6  f9b90000          LDRSH    r0,[r9,#0]            ;2486  ; IKB
0028fa  f9b51000          LDRSH    r1,[r5,#0]            ;2486  ; load_I
0028fe  0040              LSLS     r0,r0,#1              ;2486
002900  fb90f0f7          SDIV     r0,r0,r7              ;2486
002904  4288              CMP      r0,r1                 ;2486
002906  dac6              BGE      |L1.10390|
002908  4890              LDR      r0,|L1.11084|
00290a  f8900041          LDRB     r0,[r0,#0x41]         ;2486  ; bat_ips
00290e  07c0              LSLS     r0,r0,#31             ;2486
002910  d1ef              BNE      |L1.10482|
002912  e8bd5ff0          POP      {r4-r12,lr}           ;2486
002916  2001              MOVS     r0,#1                 ;2486
002918  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2492   
                          ENDP

                  samokalibr_hndl PROC
;;;2501   //-----------------------------------------------
;;;2502   void samokalibr_hndl(void)
00291c  4770              BX       lr
;;;2503   {
;;;2504   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2505   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2506   
;;;2507   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2508   	{
;;;2509   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2510   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2511   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2512   	} 
;;;2513   
;;;2514   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2515   	{
;;;2516   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2517   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2518   	
;;;2519   	}
;;;2520   #endif	 	
;;;2521   }
;;;2522   
                          ENDP

                  ubat_old_drv PROC
;;;2525   //-----------------------------------------------
;;;2526   void ubat_old_drv(void)
00291e  b510              PUSH     {r4,lr}
;;;2527   {        
;;;2528   bat_u_old_cnt++;
002920  4c8b              LDR      r4,|L1.11088|
002922  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
002924  f1000001          ADD      r0,r0,#1
002928  8020              STRH     r0,[r4,#0]
;;;2529   gran_ring(&bat_u_old_cnt,0,8);
00292a  f04f0208          MOV      r2,#8
00292e  f04f0100          MOV      r1,#0
002932  4620              MOV      r0,r4
002934  f7fffffe          BL       gran_ring
;;;2530   
;;;2531   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002938  4986              LDR      r1,|L1.11092|
00293a  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
00293e  eb010040          ADD      r0,r1,r0,LSL #1
002942  884a              LDRH     r2,[r1,#2]  ; bat
002944  8482              STRH     r2,[r0,#0x24]
;;;2532   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002946  f8b11052          LDRH     r1,[r1,#0x52]  ; bat
00294a  f8a01074          STRH     r1,[r0,#0x74]
;;;2533   }
00294e  bd10              POP      {r4,pc}
;;;2534   
                          ENDP

                  unet_drv PROC
;;;2535   //-----------------------------------------------
;;;2536   void unet_drv(void)
002950  e92d41f0          PUSH     {r4-r8,lr}
;;;2537   {
;;;2538   if(net_av_2min_timer)net_av_2min_timer--;
002954  4980              LDR      r1,|L1.11096|
002956  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
00295a  b110              CBZ      r0,|L1.10594|
00295c  f1a00001          SUB      r0,r0,#1
002960  8008              STRH     r0,[r1,#0]
                  |L1.10594|
;;;2539   
;;;2540   if(net_U<UMN)
002962  f8df81f8          LDR      r8,|L1.11100|
002966  487e              LDR      r0,|L1.11104|
;;;2541   	{
;;;2542   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002968  4a7f              LDR      r2,|L1.11112|
;;;2543   		{
;;;2544   		unet_drv_cnt++;
;;;2545   		if(unet_drv_cnt>=10)
;;;2546   			{
;;;2547   			net_Ustore=net_U;
;;;2548   		 	avar_unet_hndl(1);
;;;2549   			
;;;2550   			}
;;;2551   		}
;;;2552   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2553   
;;;2554   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2555   	}
;;;2556   
;;;2557   else if(net_U>UMN)
;;;2558   	{                 
;;;2559   	if(unet_drv_cnt)
;;;2560   		{
;;;2561   		unet_drv_cnt--;
;;;2562   		if(unet_drv_cnt<=0)
;;;2563   			{
;;;2564   			avar_unet_hndl(0);
;;;2565   			avar_bps_reset_cnt=10;
00296a  4c72              LDR      r4,|L1.11060|
00296c  f9b81000          LDRSH    r1,[r8,#0]            ;2540  ; net_U
002970  f9b03000          LDRSH    r3,[r0,#0]            ;2540  ; UMN
002974  4e7b              LDR      r6,|L1.11108|
002976  f9920000          LDRSB    r0,[r2,#0]            ;2542
00297a  250a              MOVS     r5,#0xa               ;2552
00297c  3c94              SUBS     r4,r4,#0x94
00297e  4299              CMP      r1,r3                 ;2540
002980  da1c              BGE      |L1.10684|
002982  4f7a              LDR      r7,|L1.11116|
002984  280a              CMP      r0,#0xa               ;2542
002986  da0e              BGE      |L1.10662|
002988  f9b63000          LDRSH    r3,[r6,#0]            ;2542  ; main_1Hz_cnt
00298c  2b0f              CMP      r3,#0xf               ;2542
00298e  dd0a              BLE      |L1.10662|
002990  f1000001          ADD      r0,r0,#1              ;2544
002994  b240              SXTB     r0,r0                 ;2544
002996  7010              STRB     r0,[r2,#0]            ;2544
002998  280a              CMP      r0,#0xa               ;2545
00299a  db07              BLT      |L1.10668|
00299c  8039              STRH     r1,[r7,#0]            ;2547
00299e  2001              MOVS     r0,#1                 ;2548
0029a0  f7fffffe          BL       avar_unet_hndl
0029a4  e002              B        |L1.10668|
                  |L1.10662|
0029a6  280a              CMP      r0,#0xa               ;2552
0029a8  db00              BLT      |L1.10668|
0029aa  7015              STRB     r5,[r2,#0]            ;2552
                  |L1.10668|
0029ac  f9b80000          LDRSH    r0,[r8,#0]            ;2554  ; net_U
0029b0  f9b71000          LDRSH    r1,[r7,#0]            ;2554  ; net_Ustore
0029b4  4288              CMP      r0,r1                 ;2554
0029b6  da0e              BGE      |L1.10710|
0029b8  8038              STRH     r0,[r7,#0]            ;2554
0029ba  e00c              B        |L1.10710|
                  |L1.10684|
0029bc  dd0b              BLE      |L1.10710|
0029be  b150              CBZ      r0,|L1.10710|
0029c0  f1a00001          SUB      r0,r0,#1              ;2561
0029c4  b240              SXTB     r0,r0                 ;2561
0029c6  7010              STRB     r0,[r2,#0]            ;2561
0029c8  2800              CMP      r0,#0                 ;2562
0029ca  dc04              BGT      |L1.10710|
0029cc  2000              MOVS     r0,#0                 ;2564
0029ce  f7fffffe          BL       avar_unet_hndl
0029d2  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10710|
;;;2566   			}
;;;2567   		}
;;;2568   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2569   	
;;;2570   	}
;;;2571   //#ifdef UKU_6U || UKU_ZVU
;;;2572   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2573   if(net_Umax>UMAXN) //o_11
0029d6  f8df8198          LDR      r8,|L1.11120|
0029da  4866              LDR      r0,|L1.11124|
;;;2574   	{
;;;2575   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
0029dc  4a66              LDR      r2,|L1.11128|
0029de  f9b81000          LDRSH    r1,[r8,#0]            ;2573  ; net_Umax
0029e2  f9b00000          LDRSH    r0,[r0,#0]            ;2573  ; UMAXN
0029e6  4281              CMP      r1,r0                 ;2573
0029e8  dd1e              BLE      |L1.10792|
0029ea  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
;;;2576   		{
;;;2577   		unet_max_drv_cnt++;
;;;2578   		if(unet_max_drv_cnt>=10)
;;;2579   			{
;;;2580   			net_Ustore_max=net_Umax; //o_11
0029ee  4f63              LDR      r7,|L1.11132|
0029f0  280a              CMP      r0,#0xa               ;2575
0029f2  da0e              BGE      |L1.10770|
0029f4  f9b63000          LDRSH    r3,[r6,#0]            ;2575  ; main_1Hz_cnt
0029f8  2b0f              CMP      r3,#0xf               ;2575
0029fa  dd0a              BLE      |L1.10770|
0029fc  f1000001          ADD      r0,r0,#1              ;2577
002a00  b240              SXTB     r0,r0                 ;2577
002a02  7010              STRB     r0,[r2,#0]            ;2577
002a04  280a              CMP      r0,#0xa               ;2578
002a06  db07              BLT      |L1.10776|
002a08  8039              STRH     r1,[r7,#0]
;;;2581   		 	avar_unet_hndl(2);
002a0a  2002              MOVS     r0,#2
002a0c  f7fffffe          BL       avar_unet_hndl
002a10  e002              B        |L1.10776|
                  |L1.10770|
;;;2582   			
;;;2583   			}
;;;2584   		}
;;;2585   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002a12  280a              CMP      r0,#0xa
002a14  db00              BLT      |L1.10776|
002a16  7015              STRB     r5,[r2,#0]
                  |L1.10776|
;;;2586   
;;;2587   	if(net_Umax>net_Ustore_max) net_Ustore_max=net_Umax; //o_11	
002a18  f9b80000          LDRSH    r0,[r8,#0]  ; net_Umax
002a1c  f9b71000          LDRSH    r1,[r7,#0]  ; net_Ustore_max
002a20  4288              CMP      r0,r1
002a22  dd10              BLE      |L1.10822|
002a24  8038              STRH     r0,[r7,#0]
002a26  e00e              B        |L1.10822|
                  |L1.10792|
;;;2588   	}
;;;2589   
;;;2590   else if(net_Umax<UMAXN) //o_11
002a28  da0d              BGE      |L1.10822|
;;;2591   	{                 
;;;2592   	if(unet_max_drv_cnt)
002a2a  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002a2e  b150              CBZ      r0,|L1.10822|
;;;2593   		{
;;;2594   		unet_max_drv_cnt--;
002a30  f1a00001          SUB      r0,r0,#1
002a34  b240              SXTB     r0,r0
002a36  7010              STRB     r0,[r2,#0]
;;;2595   		if(unet_max_drv_cnt<=0)
002a38  2800              CMP      r0,#0
002a3a  dc04              BGT      |L1.10822|
;;;2596   			{
;;;2597   			avar_unet_hndl(4); //o_11
002a3c  2004              MOVS     r0,#4
002a3e  f7fffffe          BL       avar_unet_hndl
;;;2598   			avar_bps_reset_cnt=10;
002a42  f8845031          STRB     r5,[r4,#0x31]
                  |L1.10822|
;;;2599   			}
;;;2600   		}
;;;2601   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2602   	
;;;2603   	}
;;;2604   #endif /*UKU_6U*/
;;;2605   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a46  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002a4a  2800              CMP      r0,#0
002a4c  d003              BEQ      |L1.10838|
002a4e  f1a00001          SUB      r0,r0,#1
002a52  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10838|
;;;2606   }
002a56  e8bd81f0          POP      {r4-r8,pc}
;;;2607   
                          ENDP

                  matemat PROC
;;;2609   //-----------------------------------------------
;;;2610   void matemat(void)
002a5a  e92d5fff          PUSH     {r0-r12,lr}
;;;2611   {
;;;2612   //signed short temp_SS;
;;;2613   signed long temp_SL/*,temp_SL_*/;
;;;2614   char /*temp,*/i;
;;;2615   //signed short temp_SS;
;;;2616   
;;;2617   #ifdef UKU_MGTS
;;;2618   //напряжение сети
;;;2619   temp_SL=(signed long)net_buff_;
;;;2620   temp_SL*=Kunet;
;;;2621   temp_SL/=110000L;
;;;2622   net_U=(signed short)temp_SL;
;;;2623   #endif
;;;2624   
;;;2625   #ifdef UKU_RSTKM
;;;2626   //напряжение сети
;;;2627   temp_SL=(signed long)net_buff_;
;;;2628   temp_SL*=Kunet;
;;;2629   temp_SL/=110000L;
;;;2630   net_U=(signed short)temp_SL;
;;;2631   #endif
;;;2632   
;;;2633   #ifdef UKU_3U
;;;2634   //напряжение сети
;;;2635   temp_SL=(signed long)net_buff_;
;;;2636   temp_SL*=Kunet;
;;;2637   temp_SL/=36000L;
;;;2638   net_U=(signed short)temp_SL;
;;;2639   #endif
;;;2640   
;;;2641   #ifdef UKU_6U
;;;2642   //напряжение сети
;;;2643   
;;;2644   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2645   	{
;;;2646   
;;;2647   	if(bps[11]._device==dNET_METR)
;;;2648   		{
;;;2649   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2650   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2651   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2652   
;;;2653   		temp_SL=(signed long)net_metr_buff_[0];
;;;2654   		temp_SL*=KunetA;
;;;2655   		temp_SL/=6000L;
;;;2656   		net_Ua=(signed short)temp_SL;
;;;2657   	
;;;2658   		temp_SL=(signed long)net_metr_buff_[1];
;;;2659   		temp_SL*=KunetB;
;;;2660   		temp_SL/=6000L;
;;;2661   		net_Ub=(signed short)temp_SL;
;;;2662   	
;;;2663   		temp_SL=(signed long)net_metr_buff_[2];
;;;2664   		temp_SL*=KunetC;
;;;2665   		temp_SL/=6000L;
;;;2666   		net_Uc=(signed short)temp_SL;
;;;2667   		}
;;;2668   	else
;;;2669   		{
;;;2670   		temp_SL=(signed long)net_buff_;
;;;2671   		temp_SL*=KunetA;
;;;2672   		temp_SL/=110000L;
;;;2673   		net_Ua=(signed short)temp_SL;
;;;2674   	
;;;2675   		temp_SL=(signed long)adc_buff_[3];
;;;2676   		temp_SL*=KunetB;
;;;2677   		temp_SL/=6000L;
;;;2678   		net_Ub=(signed short)temp_SL;
;;;2679   	
;;;2680   		temp_SL=(signed long)adc_buff_[10];
;;;2681   		temp_SL*=KunetC;
;;;2682   		temp_SL/=6000L;
;;;2683   		net_Uc=(signed short)temp_SL;
;;;2684   		}
;;;2685   
;;;2686   	net_U=net_Ua;
;;;2687   	if(net_Ub<net_U)net_U=net_Ub;
;;;2688   	if(net_Uc<net_U)net_U=net_Uc;
;;;2689   	//o_10_s
;;;2690   	net_Umax=net_Ua;
;;;2691   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2692   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2693   	//o_10_e
;;;2694   	}
;;;2695   else 
;;;2696   	{
;;;2697   	temp_SL=(signed long)net_buff_;
;;;2698   	temp_SL*=Kunet;
;;;2699   	temp_SL/=110000L;
;;;2700   	net_U=(signed short)temp_SL;
;;;2701   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2702   	}
;;;2703   
;;;2704   
;;;2705   
;;;2706   
;;;2707   #endif
;;;2708   
;;;2709   #ifdef UKU_GLONASS
;;;2710   //напряжение сети
;;;2711   temp_SL=(signed long)net_buff_;
;;;2712   temp_SL*=Kunet;
;;;2713   temp_SL/=110000L;
;;;2714   net_U=(signed short)temp_SL;
;;;2715   #endif
;;;2716   
;;;2717   #ifdef UKU_KONTUR
;;;2718   //напряжение сети
;;;2719   temp_SL=(signed long)net_buff_;
;;;2720   temp_SL*=Kunet;
;;;2721   temp_SL/=110000L;
;;;2722   net_U=(signed short)temp_SL;
;;;2723   #endif
;;;2724   
;;;2725   #ifdef IPS_SGEP_GAZPROM
;;;2726   //напряжение сети
;;;2727   temp_SL=(signed long)net_buff_;
;;;2728   temp_SL*=Kunet;
;;;2729   temp_SL/=110000L;
;;;2730   net_U=(signed short)temp_SL;
;;;2731   #endif
;;;2732   
;;;2733   #ifdef UKU_220_V2
;;;2734   //напряжение сети
;;;2735   
;;;2736   if(AUSW_MAIN==22033)
;;;2737   	{
;;;2738   	temp_SL=(signed long)net_buff_;
;;;2739   	temp_SL*=KunetA;
;;;2740   	temp_SL/=6000L;
;;;2741   	net_Ua=(signed short)temp_SL;
;;;2742   
;;;2743   	temp_SL=(signed long)adc_buff_[3];
;;;2744   	temp_SL*=KunetB;
;;;2745   	temp_SL/=6000L;
;;;2746   	net_Ub=(signed short)temp_SL;
;;;2747   
;;;2748   	temp_SL=(signed long)adc_buff_[10];
;;;2749   	temp_SL*=KunetC;
;;;2750   	temp_SL/=6000L;
;;;2751   	net_Uc=(signed short)temp_SL;
;;;2752   
;;;2753   	net_U=net_Ua;
;;;2754   	if(net_Ub<net_U)net_U=net_Ub;
;;;2755   	if(net_Uc<net_U)net_U=net_Uc;
;;;2756   	}
;;;2757   else
;;;2758   	{
;;;2759   	temp_SL=(signed long)net_buff_;
;;;2760   	temp_SL*=Kunet;
;;;2761   	temp_SL/=5000L;
;;;2762   	net_U=(signed short)temp_SL;
;;;2763   	}
;;;2764   #endif
;;;2765   
;;;2766   
;;;2767   #ifdef UKU_220
;;;2768   //напряжение сети
;;;2769   
;;;2770   if(AUSW_MAIN==22035)
;;;2771   	{
;;;2772   	temp_SL=(signed long)net_buff_;
;;;2773   	temp_SL*=KunetA;
;;;2774   	temp_SL/=6000L;
;;;2775   	net_Ua=(signed short)temp_SL;
;;;2776   
;;;2777   	temp_SL=(signed long)adc_buff_[3];
;;;2778   	temp_SL*=KunetB;
;;;2779   	temp_SL/=6000L;
;;;2780   	net_Ub=(signed short)temp_SL;
;;;2781   
;;;2782   	temp_SL=(signed long)adc_buff_[10];
;;;2783   	temp_SL*=KunetC;
;;;2784   	temp_SL/=6000L;
;;;2785   	net_Uc=(signed short)temp_SL;
;;;2786   
;;;2787   	net_U=net_Ua;
;;;2788   	if(net_Ub<net_U)net_U=net_Ub;
;;;2789   	if(net_Uc<net_U)net_U=net_Uc;
;;;2790   	}
;;;2791   else
;;;2792   	{
;;;2793   	temp_SL=(signed long)net_buff_;
;;;2794   	temp_SL*=Kunet;
;;;2795   	#ifdef _ACDC_
;;;2796   	temp_SL/=500L;
;;;2797   	#else
;;;2798   	temp_SL/=5000L;
;;;2799   	#endif
;;;2800   	net_U=(signed short)temp_SL;
;;;2801   	
;;;2802   	}
;;;2803   #endif
;;;2804   
;;;2805   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2806   //напряжение сети
;;;2807   
;;;2808   
;;;2809   	if(bps[11]._device==dNET_METR)
002a5e  4848              LDR      r0,|L1.11136|
;;;2810   		{
;;;2811   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2812   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2813   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2814   
;;;2815   		temp_SL=(signed long)net_metr_buff_[2];
;;;2816   		temp_SL*=KunetA;
002a60  4b48              LDR      r3,|L1.11140|
;;;2817   		temp_SL/=6000L;
;;;2818   		net_Ua=(signed short)temp_SL;
;;;2819   	
;;;2820   		temp_SL=(signed long)net_metr_buff_[1];
;;;2821   		temp_SL*=KunetB;
002a62  4a49              LDR      r2,|L1.11144|
002a64  f890044c          LDRB     r0,[r0,#0x44c]        ;2809  ; bps
002a68  9003              STR      r0,[sp,#0xc]          ;2816
;;;2822   		temp_SL/=6000L;
;;;2823   		net_Ub=(signed short)temp_SL;
;;;2824   	
;;;2825   		temp_SL=(signed long)net_metr_buff_[0];
;;;2826   		temp_SL*=KunetC;
002a6a  4948              LDR      r1,|L1.11148|
;;;2827   		temp_SL/=6000L;
;;;2828   		net_Uc=(signed short)temp_SL;
;;;2829   
;;;2830   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2831   
;;;2832   		net_U=net_Ua;
;;;2833   		if(net_Ub<net_U)net_U=net_Ub;
;;;2834   		if(net_Uc<net_U)net_U=net_Uc;
;;;2835   		//o_10_s
;;;2836   		net_Umax=net_Ua;
;;;2837   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2838   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2839   		//o_10_e
;;;2840   		}
;;;2841   	  else if(AUSW_MAIN==22033)
;;;2842   	{
;;;2843   	temp_SL=(signed long)net_buff_;
002a6c  4e31              LDR      r6,|L1.11060|
002a6e  f9b38000          LDRSH    r8,[r3,#0]            ;2816
002a72  f9b22000          LDRSH    r2,[r2,#0]            ;2821
002a76  f9b19000          LDRSH    r9,[r1,#0]            ;2826
002a7a  f8dfc114          LDR      r12,|L1.11152|
002a7e  4d45              LDR      r5,|L1.11156|
002a80  4c45              LDR      r4,|L1.11160|
002a82  4b3b              LDR      r3,|L1.11120|
002a84  3e94              SUBS     r6,r6,#0x94
002a86  2807              CMP      r0,#7                 ;2809
002a88  d040              BEQ      |L1.11020|
002a8a  4631              MOV      r1,r6
;;;2844   	temp_SL*=KunetA;
;;;2845   	temp_SL/=4000L;
;;;2846   	net_Ua=(signed short)temp_SL;
;;;2847   
;;;2848   	temp_SL=(signed long)adc_buff_[3];
002a8c  f8dfa110          LDR      r10,|L1.11168|
002a90  8f4f              LDRH     r7,[r1,#0x3a]         ;2843
002a92  493c              LDR      r1,|L1.11140|
002a94  4a3c              LDR      r2,|L1.11144|
002a96  f2417970          MOV      r9,#0x1770            ;2817
002a9a  f9b11000          LDRSH    r1,[r1,#0]            ;2816
002a9e  f9b22000          LDRSH    r2,[r2,#0]            ;2821
002aa2  434f              MULS     r7,r1,r7              ;2844
002aa4  f9ba1006          LDRSH    r1,[r10,#6]
002aa8  483c              LDR      r0,|L1.11164|
;;;2849   	temp_SL*=KunetB;
002aaa  4351              MULS     r1,r2,r1
;;;2850   	temp_SL/=6000L;
002aac  fb91f1f9          SDIV     r1,r1,r9
;;;2851   	net_Ub=(signed short)temp_SL;
002ab0  b20a              SXTH     r2,r1
;;;2852   
;;;2853   	temp_SL=(signed long)adc_buff_[10];
002ab2  f9ba1014          LDRSH    r1,[r10,#0x14]
002ab6  f8dfa0d4          LDR      r10,|L1.11148|
002aba  8800              LDRH     r0,[r0,#0]            ;2841  ; AUSW_MAIN
002abc  f2456811          MOV      r8,#0x5611            ;2841
002ac0  f9baa000          LDRSH    r10,[r10,#0]          ;2826
002ac4  4540              CMP      r0,r8                 ;2841
;;;2854   	temp_SL*=KunetC;
002ac6  fb01f10a          MUL      r1,r1,r10
;;;2855   	temp_SL/=6000L;
002aca  fb91f1f9          SDIV     r1,r1,r9
;;;2856   	net_Uc=(signed short)temp_SL;
002ace  b209              SXTH     r1,r1
002ad0  d12f              BNE      |L1.11058|
002ad2  f44f607a          MOV      r0,#0xfa0             ;2845
002ad6  fb97f0f0          SDIV     r0,r7,r0              ;2845
002ada  b200              SXTH     r0,r0                 ;2846
002adc  f8ac0000          STRH     r0,[r12,#0]           ;2846
002ae0  802a              STRH     r2,[r5,#0]            ;2851
002ae2  8021              STRH     r1,[r4,#0]
;;;2857   
;;;2858   	net_U=net_Ua;
002ae4  4c1d              LDR      r4,|L1.11100|
002ae6  8020              STRH     r0,[r4,#0]
;;;2859   	if(net_Ub<net_U)net_U=net_Ub;
002ae8  4282              CMP      r2,r0
002aea  da00              BGE      |L1.10990|
002aec  8022              STRH     r2,[r4,#0]
                  |L1.10990|
;;;2860   	if(net_Uc<net_U)net_U=net_Uc;
002aee  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002af2  42a9              CMP      r1,r5
002af4  da00              BGE      |L1.11000|
002af6  8021              STRH     r1,[r4,#0]
                  |L1.11000|
;;;2861   	//o_10_s
;;;2862   	net_Umax=net_Ua;
002af8  8018              STRH     r0,[r3,#0]
;;;2863   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002afa  4282              CMP      r2,r0
002afc  dd00              BLE      |L1.11008|
002afe  801a              STRH     r2,[r3,#0]
                  |L1.11008|
;;;2864   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002b00  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002b04  4281              CMP      r1,r0
002b06  dd00              BLE      |L1.11018|
002b08  8019              STRH     r1,[r3,#0]
                  |L1.11018|
002b0a  e0d1              B        |L1.11440|
                  |L1.11020|
002b0c  4925              LDR      r1,|L1.11172|
002b0e  7808              LDRB     r0,[r1,#0]            ;2811  ; bps
002b10  784f              LDRB     r7,[r1,#1]            ;2811  ; bps
002b12  eb002007          ADD      r0,r0,r7,LSL #8       ;2811
002b16  4f07              LDR      r7,|L1.11060|
002b18  b280              UXTH     r0,r0                 ;2811
002b1a  f1070758          ADD      r7,r7,#0x58           ;2811
002b1e  8038              STRH     r0,[r7,#0]            ;2811
002b20  f891a002          LDRB     r10,[r1,#2]           ;2812  ; bps
002b24  f891b003          LDRB     r11,[r1,#3]           ;2812  ; bps
002b28  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2812
002b2c  fa1ffa8a          UXTH     r10,r10               ;2812
002b30  e03a              B        |L1.11176|
                  |L1.11058|
002b32  e074              B        |L1.11294|
                  |L1.11060|
                          DCD      ||area_number.25||+0x94
                  |L1.11064|
                          DCD      KB_ALGORITM
                  |L1.11068|
                          DCD      mess_data
                  |L1.11072|
                          DCD      USIGN
                  |L1.11076|
                          DCD      load_U
                  |L1.11080|
                          DCD      load_I
                  |L1.11084|
                          DCD      bat_ips
                  |L1.11088|
                          DCD      bat_u_old_cnt
                  |L1.11092|
                          DCD      bat
                  |L1.11096|
                          DCD      net_av_2min_timer
                  |L1.11100|
                          DCD      net_U
                  |L1.11104|
                          DCD      UMN
                  |L1.11108|
                          DCD      main_1Hz_cnt
                  |L1.11112|
                          DCD      unet_drv_cnt
                  |L1.11116|
                          DCD      net_Ustore
                  |L1.11120|
                          DCD      net_Umax
                  |L1.11124|
                          DCD      UMAXN
                  |L1.11128|
                          DCD      unet_max_drv_cnt
                  |L1.11132|
                          DCD      net_Ustore_max
                  |L1.11136|
                          DCD      bps
                  |L1.11140|
                          DCD      KunetA
                  |L1.11144|
                          DCD      KunetB
                  |L1.11148|
                          DCD      KunetC
                  |L1.11152|
                          DCD      net_Ua
                  |L1.11156|
                          DCD      net_Ub
                  |L1.11160|
                          DCD      net_Uc
                  |L1.11164|
                          DCD      AUSW_MAIN
                  |L1.11168|
                          DCD      ||.bss||+0x40c
                  |L1.11172|
                          DCD      bps+0x452
                  |L1.11176|
002ba8  f8a7a002          STRH     r10,[r7,#2]           ;2812
002bac  f891b004          LDRB     r11,[r1,#4]           ;2813  ; bps
002bb0  f891e005          LDRB     lr,[r1,#5]            ;2813  ; bps
002bb4  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2813
002bb8  fa1ffb8b          UXTH     r11,r11               ;2813
002bbc  f8a7b004          STRH     r11,[r7,#4]           ;2813
002bc0  fb0bfb08          MUL      r11,r11,r8            ;2816
002bc4  f2417870          MOV      r8,#0x1770            ;2817
002bc8  fb9bf7f8          SDIV     r7,r11,r8             ;2817
002bcc  b23f              SXTH     r7,r7                 ;2818
002bce  f8ac7000          STRH     r7,[r12,#0]           ;2818
002bd2  fb0afa02          MUL      r10,r10,r2            ;2821
002bd6  fb9af2f8          SDIV     r2,r10,r8             ;2822
002bda  b212              SXTH     r2,r2                 ;2823
002bdc  802a              STRH     r2,[r5,#0]            ;2823
002bde  fb00f009          MUL      r0,r0,r9              ;2826
002be2  fb90f0f8          SDIV     r0,r0,r8              ;2827
002be6  b200              SXTH     r0,r0                 ;2828
002be8  8020              STRH     r0,[r4,#0]            ;2828
002bea  798c              LDRB     r4,[r1,#6]            ;2830  ; bps
002bec  79c9              LDRB     r1,[r1,#7]            ;2830  ; bps
002bee  eb042401          ADD      r4,r4,r1,LSL #8       ;2830
002bf2  49fd              LDR      r1,|L1.12264|
002bf4  800c              STRH     r4,[r1,#0]            ;2830
002bf6  49fd              LDR      r1,|L1.12268|
002bf8  800f              STRH     r7,[r1,#0]            ;2832
002bfa  42ba              CMP      r2,r7                 ;2833
002bfc  da00              BGE      |L1.11264|
002bfe  800a              STRH     r2,[r1,#0]            ;2833
                  |L1.11264|
002c00  f9b14000          LDRSH    r4,[r1,#0]            ;2834  ; net_U
002c04  42a0              CMP      r0,r4                 ;2834
002c06  da00              BGE      |L1.11274|
002c08  8008              STRH     r0,[r1,#0]            ;2834
                  |L1.11274|
002c0a  801f              STRH     r7,[r3,#0]            ;2836
002c0c  42ba              CMP      r2,r7                 ;2837
002c0e  dd00              BLE      |L1.11282|
002c10  801a              STRH     r2,[r3,#0]            ;2837
                  |L1.11282|
002c12  f9b31000          LDRSH    r1,[r3,#0]            ;2838  ; net_Umax
002c16  4288              CMP      r0,r1                 ;2838
002c18  dd4a              BLE      |L1.11440|
002c1a  8018              STRH     r0,[r3,#0]            ;2838
002c1c  e048              B        |L1.11440|
                  |L1.11294|
;;;2865   	//o_10_e
;;;2866   	}
;;;2867   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002c1e  f5a048ac          SUB      r8,r0,#0x5600
002c22  f1b8082f          SUBS     r8,r8,#0x2f
002c26  d00b              BEQ      |L1.11328|
002c28  f1180828          ADDS     r8,r8,#0x28
002c2c  d008              BEQ      |L1.11328|
002c2e  f1b80814          SUBS     r8,r8,#0x14
002c32  d005              BEQ      |L1.11328|
002c34  f1b80801          SUBS     r8,r8,#1
002c38  d002              BEQ      |L1.11328|
002c3a  f118081a          ADDS     r8,r8,#0x1a
002c3e  d11c              BNE      |L1.11386|
                  |L1.11328|
;;;2868   	{
;;;2869   	temp_SL=(signed long)net_buff_;
;;;2870   	temp_SL*=KunetA;
;;;2871   	temp_SL/=40000L;
002c40  f6494040          MOV      r0,#0x9c40
002c44  fb97f0f0          SDIV     r0,r7,r0
;;;2872   	net_Ua=(signed short)temp_SL;
002c48  b200              SXTH     r0,r0
002c4a  f8ac0000          STRH     r0,[r12,#0]
;;;2873   
;;;2874   	temp_SL=(signed long)adc_buff_[3];
;;;2875   	temp_SL*=KunetB;
;;;2876   	temp_SL/=6000L;
;;;2877   	net_Ub=(signed short)temp_SL;
002c4e  802a              STRH     r2,[r5,#0]
;;;2878   
;;;2879   	temp_SL=(signed long)adc_buff_[10];
;;;2880   	temp_SL*=KunetC;
;;;2881   	temp_SL/=6000L;
;;;2882   	net_Uc=(signed short)temp_SL;
002c50  8021              STRH     r1,[r4,#0]
;;;2883   
;;;2884   	net_U=net_Ua;
002c52  4ce6              LDR      r4,|L1.12268|
002c54  8020              STRH     r0,[r4,#0]
;;;2885   	if(net_Ub<net_U)net_U=net_Ub;
002c56  4282              CMP      r2,r0
002c58  da00              BGE      |L1.11356|
002c5a  8022              STRH     r2,[r4,#0]
                  |L1.11356|
;;;2886   	if(net_Uc<net_U)net_U=net_Uc;
002c5c  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002c60  42a9              CMP      r1,r5
002c62  da00              BGE      |L1.11366|
002c64  8021              STRH     r1,[r4,#0]
                  |L1.11366|
;;;2887   	//o_10_s
;;;2888   	net_Umax=net_Ua;
002c66  8018              STRH     r0,[r3,#0]
;;;2889   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002c68  4282              CMP      r2,r0
002c6a  dd00              BLE      |L1.11374|
002c6c  801a              STRH     r2,[r3,#0]
                  |L1.11374|
;;;2890   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002c6e  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002c72  4281              CMP      r1,r0
002c74  dd1c              BLE      |L1.11440|
002c76  8019              STRH     r1,[r3,#0]
002c78  e01a              B        |L1.11440|
                  |L1.11386|
;;;2891   	//o_10_e
;;;2892   	}
;;;2893   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2894   	{
;;;2895   	temp_SL=(signed long)net_buff_;
;;;2896   	temp_SL*=Kunet;
002c7a  49dd              LDR      r1,|L1.12272|
002c7c  f5a044aa          SUB      r4,r0,#0x5500         ;2893
002c80  f9b12000          LDRSH    r2,[r1,#0]
002c84  49db              LDR      r1,|L1.12276|
002c86  8f49              LDRH     r1,[r1,#0x3a]         ;2843
002c88  4351              MULS     r1,r2,r1
002c8a  3cfa              SUBS     r4,r4,#0xfa           ;2893
002c8c  d001              BEQ      |L1.11410|
002c8e  1e62              SUBS     r2,r4,#1              ;2893
002c90  d107              BNE      |L1.11426|
                  |L1.11410|
;;;2897   	temp_SL/=35000L;
002c92  f64800b8          MOV      r0,#0x88b8
002c96  fb91f0f0          SDIV     r0,r1,r0
;;;2898   	net_U=(signed short)temp_SL;
002c9a  49d4              LDR      r1,|L1.12268|
002c9c  8008              STRH     r0,[r1,#0]
;;;2899   	net_Umax=net_U; //o_10
002c9e  8018              STRH     r0,[r3,#0]
002ca0  e006              B        |L1.11440|
                  |L1.11426|
;;;2900   	}
;;;2901   else
;;;2902   	{
;;;2903   	temp_SL=(signed long)net_buff_;
;;;2904   	temp_SL*=Kunet;
;;;2905   	#ifdef _ACDC_
;;;2906   	temp_SL/=500L;
002ca2  f44f70fa          MOV      r0,#0x1f4
002ca6  fb91f0f0          SDIV     r0,r1,r0
;;;2907   	#else
;;;2908   	temp_SL/=5000L;
;;;2909   	#endif
;;;2910   	net_U=(signed short)temp_SL;
002caa  49d0              LDR      r1,|L1.12268|
002cac  8008              STRH     r0,[r1,#0]
;;;2911   	net_Umax=net_U; //o_10
002cae  8018              STRH     r0,[r3,#0]
                  |L1.11440|
;;;2912   	
;;;2913   	}
;;;2914   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002cb0  9803              LDR      r0,[sp,#0xc]
002cb2  2807              CMP      r0,#7
002cb4  d003              BEQ      |L1.11454|
002cb6  48d0              LDR      r0,|L1.12280|
002cb8  8801              LDRH     r1,[r0,#0]  ; net_F
002cba  48cb              LDR      r0,|L1.12264|
002cbc  8001              STRH     r1,[r0,#0]
                  |L1.11454|
;;;2915   #endif
;;;2916   
;;;2917   #ifdef UKU_TELECORE2015
;;;2918   //напряжение сети
;;;2919   temp_SL=(signed long)net_buff_;
;;;2920   temp_SL*=Kunet;
;;;2921   temp_SL/=110000L;
;;;2922   net_U=(signed short)temp_SL;
;;;2923   #endif
;;;2924   
;;;2925   #ifdef UKU_TELECORE2017
;;;2926   //напряжение сети
;;;2927   temp_SL=(signed long)net_buff_;
;;;2928   temp_SL*=Kunet;
;;;2929   temp_SL/=110000L;
;;;2930   net_U=(signed short)temp_SL;
;;;2931   #endif
;;;2932   
;;;2933   
;;;2934   #ifdef UKU_FSO
;;;2935   //напряжение сети
;;;2936   if(NUMPHASE==1)
;;;2937   	{
;;;2938   	temp_SL=(signed long)net_buff_;
;;;2939   	temp_SL*=Kunet;
;;;2940   	temp_SL/=110000L;
;;;2941   	net_U=(signed short)temp_SL;
;;;2942   	net_Umax=net_U;
;;;2943   	}
;;;2944   else
;;;2945   	{
;;;2946   	temp_SL=(signed long)net_buff_;
;;;2947   	temp_SL*=KunetA;
;;;2948   	temp_SL/=40000L;
;;;2949   	net_Ua=(signed short)temp_SL;
;;;2950   
;;;2951   	temp_SL=(signed long)adc_buff_[3];
;;;2952   	temp_SL*=KunetB;
;;;2953   	temp_SL/=6000L;
;;;2954   	net_Ub=(signed short)temp_SL;
;;;2955   
;;;2956   	temp_SL=(signed long)adc_buff_[10];
;;;2957   	temp_SL*=KunetC;
;;;2958   	temp_SL/=6000L;
;;;2959   	net_Uc=(signed short)temp_SL;
;;;2960   
;;;2961   	net_U=net_Ua;
;;;2962   	if(net_Ub<net_U)net_U=net_Ub;
;;;2963   	if(net_Uc<net_U)net_U=net_Uc;
;;;2964   	//o_10_s
;;;2965   	net_Umax=net_Ua;
;;;2966   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2967   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2968   	}
;;;2969   #endif	//UKU_FSO
;;;2970   
;;;2971   //Напряжения батарей
;;;2972   temp_SL=(signed long)adc_buff_[0];
002cbe  f8df933c          LDR      r9,|L1.12284|
002cc2  f9b91000          LDRSH    r1,[r9,#0]  ; adc_buff_
;;;2973   temp_SL*=Kubat[0];
002cc6  4fce              LDR      r7,|L1.12288|
002cc8  f9b70000          LDRSH    r0,[r7,#0]  ; Kubat
002ccc  4348              MULS     r0,r1,r0
;;;2974   temp_SL/=2000L;
002cce  f44f64fa          MOV      r4,#0x7d0
002cd2  fb90f0f4          SDIV     r0,r0,r4
;;;2975   bat[0]._Ub=(signed short)temp_SL;
002cd6  4dcb              LDR      r5,|L1.12292|
002cd8  8068              STRH     r0,[r5,#2]
;;;2976   
;;;2977   #ifdef UKU_220
;;;2978   //Напряжения батарей
;;;2979   temp_SL=(signed long)adc_buff_[0];
;;;2980   temp_SL*=Kubat[0];
;;;2981   temp_SL/=400L;
;;;2982   bat[0]._Ub=(signed short)temp_SL;
;;;2983   #endif
;;;2984   
;;;2985   #ifdef UKU_220_V2
;;;2986   //Напряжения батарей
;;;2987   temp_SL=(signed long)adc_buff_[0];
;;;2988   temp_SL*=Kubat[0];
;;;2989   temp_SL/=400L;
;;;2990   bat[0]._Ub=(signed short)temp_SL;
;;;2991   #endif
;;;2992   
;;;2993   //adc_buff_[4]=300;
;;;2994   
;;;2995   temp_SL=(signed long)adc_buff_[4];
002cda  f9b90008          LDRSH    r0,[r9,#8]  ; adc_buff_
;;;2996   temp_SL*=Kubatm[0];
002cde  4aca              LDR      r2,|L1.12296|
002ce0  f9b21000          LDRSH    r1,[r2,#0]  ; Kubatm
002ce4  fb01f100          MUL      r1,r1,r0
;;;2997   temp_SL/=700L;
002ce8  f44f732f          MOV      r3,#0x2bc
002cec  fb91f0f3          SDIV     r0,r1,r3
;;;2998   bat[0]._Ubm=(signed short)temp_SL;
002cf0  80a8              STRH     r0,[r5,#4]
;;;2999   
;;;3000   #ifdef UKU_KONTUR
;;;3001   temp_SL=(signed long)adc_buff_[4];
;;;3002   temp_SL*=Kubatm[0];
;;;3003   temp_SL/=2000L;
;;;3004   bat[0]._Ubm=(signed short)temp_SL;
;;;3005   #endif
;;;3006   
;;;3007   #ifdef UKU_6U
;;;3008   temp_SL=(signed long)adc_buff_[4];
;;;3009   temp_SL*=Kubatm[0];
;;;3010   temp_SL/=2000L;
;;;3011   bat[0]._Ubm=(signed short)temp_SL;
;;;3012   #endif
;;;3013   
;;;3014   temp_SL=(signed long)adc_buff_[12];
002cf2  f9b91018          LDRSH    r1,[r9,#0x18]  ; adc_buff_
;;;3015   temp_SL*=Kubat[1];
002cf6  f9b70002          LDRSH    r0,[r7,#2]  ; Kubat
002cfa  fb00f001          MUL      r0,r0,r1
;;;3016   temp_SL/=2000L;
002cfe  fb90f0f4          SDIV     r0,r0,r4
;;;3017   bat[1]._Ub=(signed short)temp_SL;
002d02  f8a50052          STRH     r0,[r5,#0x52]
;;;3018   
;;;3019   #ifdef UKU_220
;;;3020   temp_SL=(signed long)adc_buff_[12];
;;;3021   temp_SL*=Kubat[1];
;;;3022   temp_SL/=400L;
;;;3023   bat[1]._Ub=(signed short)temp_SL;
;;;3024   #endif
;;;3025   
;;;3026   #ifdef UKU_220_V2
;;;3027   temp_SL=(signed long)adc_buff_[12];
;;;3028   temp_SL*=Kubat[1];
;;;3029   temp_SL/=400L;
;;;3030   bat[1]._Ub=(signed short)temp_SL;
;;;3031   #endif
;;;3032   
;;;3033   //adc_buff_[1]=300;
;;;3034   
;;;3035   temp_SL=(signed long)adc_buff_[1];
002d06  f9b91002          LDRSH    r1,[r9,#2]  ; adc_buff_
;;;3036   temp_SL*=Kubatm[1];
002d0a  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002d0e  fb00f001          MUL      r0,r0,r1
;;;3037   temp_SL/=700L;
002d12  fb90f0f3          SDIV     r0,r0,r3
;;;3038   bat[1]._Ubm=(signed short)temp_SL;
002d16  f8a50054          STRH     r0,[r5,#0x54]
;;;3039   #ifdef UKU_KONTUR
;;;3040   temp_SL=(signed long)adc_buff_[1];
;;;3041   temp_SL*=Kubatm[1];
;;;3042   temp_SL/=2000L;
;;;3043   bat[1]._Ubm=(signed short)temp_SL;
;;;3044   #endif
;;;3045   #ifdef UKU_6U
;;;3046   temp_SL=(signed long)adc_buff_[1];
;;;3047   temp_SL*=Kubatm[1];
;;;3048   temp_SL/=2000L;
;;;3049   bat[1]._Ubm=(signed short)temp_SL;
;;;3050   #endif
;;;3051   
;;;3052   #ifdef UKU_TELECORE2015
;;;3053   temp_SL=(signed long)adc_buff_[2];
;;;3054   temp_SL*=Kubat[0];
;;;3055   temp_SL/=2000L;
;;;3056   bat[0]._Ub=(signed short)temp_SL;
;;;3057   #endif
;;;3058   
;;;3059   /*
;;;3060   //Токи батарей
;;;3061   if(!mess_find_unvol(MESS2MATEMAT))
;;;3062   	{
;;;3063   	temp_SL=(signed long)ad7705_buff_[0];
;;;3064   	temp_SL-=(signed long)Kibat0[0];
;;;3065   	temp_SL*=(signed long)Kibat1[0];
;;;3066   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3067   	else temp_SL/=1000L;
;;;3068   	bat[0]._Ib=(signed short)temp_SL;
;;;3069   
;;;3070   	temp_SL=(signed long)ad7705_buff_[1];
;;;3071   	temp_SL-=(signed long)Kibat0[1];
;;;3072   	temp_SL*=(signed long)Kibat1[1];
;;;3073   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3074   	else temp_SL/=1000L;
;;;3075   	bat[1]._Ib=(signed short)temp_SL;
;;;3076   	}
;;;3077   */
;;;3078   
;;;3079   
;;;3080   //Токи батарей
;;;3081   if(!mess_find_unvol(MESS2MATEMAT))
002d1a  f04f00dc          MOV      r0,#0xdc
002d1e  f7fffffe          BL       mess_find_unvol
;;;3082   	{
;;;3083   	temp_SL=(signed long)ad7705_buff_[0];
;;;3084   	temp_SL-=(signed long)Kibat0[0];
;;;3085   	temp_SL*=(signed long)Kibat1[0];
;;;3086   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3087   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d22  f2456713          MOV      r7,#0x5613
002d26  bbf0              CBNZ     r0,|L1.11686|
002d28  48b8              LDR      r0,|L1.12300|
002d2a  8800              LDRH     r0,[r0,#0]            ;3083  ; ad7705_buff_
002d2c  49b8              LDR      r1,|L1.12304|
002d2e  f8b18000          LDRH     r8,[r1,#0]            ;3084  ; Kibat0
002d32  eba00008          SUB      r0,r0,r8              ;3084
002d36  f8dfb2dc          LDR      r11,|L1.12308|
002d3a  f9bb1000          LDRSH    r1,[r11,#0]           ;3085  ; Kibat1
002d3e  fb01fa00          MUL      r10,r1,r0             ;3085
002d42  48b5              LDR      r0,|L1.12312|
002d44  f6456292          MOV      r2,#0x5e92            ;3086
002d48  f44f7396          MOV      r3,#0x12c             ;3086
002d4c  8800              LDRH     r0,[r0,#0]            ;3086  ; AUSW_MAIN
;;;3088   	else temp_SL/=1000L;
002d4e  f44f7c7a          MOV      r12,#0x3e8
002d52  f5a04eb0          SUB      lr,r0,#0x5800         ;3086
002d56  f5be6ec7          SUBS     lr,lr,#0x638          ;3086
002d5a  d001              BEQ      |L1.11616|
002d5c  4290              CMP      r0,r2                 ;3086
002d5e  d102              BNE      |L1.11622|
                  |L1.11616|
002d60  fb9afaf3          SDIV     r10,r10,r3            ;3086
002d64  e00e              B        |L1.11652|
                  |L1.11622|
002d66  f5a04ea8          SUB      lr,r0,#0x5400         ;3087
002d6a  f5be7efd          SUBS     lr,lr,#0x1fa          ;3087
002d6e  d004              BEQ      |L1.11642|
002d70  42b8              CMP      r0,r7                 ;3087
002d72  d002              BEQ      |L1.11642|
002d74  f1be0e17          SUBS     lr,lr,#0x17           ;3087
002d78  d102              BNE      |L1.11648|
                  |L1.11642|
002d7a  fb9afaf4          SDIV     r10,r10,r4            ;3087
002d7e  e001              B        |L1.11652|
                  |L1.11648|
002d80  fb9afafc          SDIV     r10,r10,r12
                  |L1.11652|
;;;3089   	#ifdef UKU_TELECORE2015
;;;3090   	temp_SL/=2L;
;;;3091   	//temp_SL=-temp_SL;
;;;3092   	#endif
;;;3093   	//#ifdef UKU_TELECORE2017
;;;3094   	//temp_SL/=-2L;
;;;3095   	//temp_SL=-temp_SL;
;;;3096   	//#endif
;;;3097   	bat[0]._Ib=(signed short)temp_SL;
002d84  f8a5a008          STRH     r10,[r5,#8]
;;;3098   
;;;3099   	temp_SL=(signed long)ad7705_buff[0];
002d88  f8dfa290          LDR      r10,|L1.12316|
;;;3100   	temp_SL-=(signed long)Kibat0[0];
002d8c  f8dfe280          LDR      lr,|L1.12304|
002d90  ebaa0808          SUB      r8,r10,r8
;;;3101   	temp_SL*=(signed long)Kibat1[0];
002d94  fb01f108          MUL      r1,r1,r8
;;;3102   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002d98  f6456b38          MOV      r11,#0x5e38
002d9c  4558              CMP      r0,r11
002d9e  d001              BEQ      |L1.11684|
002da0  4290              CMP      r0,r2
002da2  d104              BNE      |L1.11694|
                  |L1.11684|
002da4  e000              B        |L1.11688|
                  |L1.11686|
002da6  e053              B        |L1.11856|
                  |L1.11688|
002da8  fb91f1f3          SDIV     r1,r1,r3
002dac  e00e              B        |L1.11724|
                  |L1.11694|
;;;3103   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002dae  f5a048a8          SUB      r8,r0,#0x5400
002db2  f5b878fd          SUBS     r8,r8,#0x1fa
002db6  d004              BEQ      |L1.11714|
002db8  42b8              CMP      r0,r7
002dba  d002              BEQ      |L1.11714|
002dbc  f1b80817          SUBS     r8,r8,#0x17
002dc0  d102              BNE      |L1.11720|
                  |L1.11714|
002dc2  fb91f1f4          SDIV     r1,r1,r4
002dc6  e001              B        |L1.11724|
                  |L1.11720|
;;;3104   	else temp_SL/=1000L;
002dc8  fb91f1fc          SDIV     r1,r1,r12
                  |L1.11724|
;;;3105   	#ifdef UKU_TELECORE2015
;;;3106   	temp_SL/=2L;
;;;3107   	#endif
;;;3108   	bat[0]._Ib_=(signed short)temp_SL;
002dcc  8169              STRH     r1,[r5,#0xa]
;;;3109   
;;;3110   
;;;3111   	temp_SL=(signed long)ad7705_buff_[1];
002dce  498f              LDR      r1,|L1.12300|
002dd0  8849              LDRH     r1,[r1,#2]  ; ad7705_buff_
;;;3112   	temp_SL-=(signed long)Kibat0[1];
002dd2  f8be8002          LDRH     r8,[lr,#2]  ; Kibat0
002dd6  eba10a08          SUB      r10,r1,r8
;;;3113   	temp_SL*=(signed long)Kibat1[1];
002dda  498e              LDR      r1,|L1.12308|
002ddc  f9b11002          LDRSH    r1,[r1,#2]  ; Kibat1
002de0  fb01fa0a          MUL      r10,r1,r10
;;;3114   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002de4  4558              CMP      r0,r11
002de6  d001              BEQ      |L1.11756|
002de8  4290              CMP      r0,r2
002dea  d102              BNE      |L1.11762|
                  |L1.11756|
002dec  fb9afaf3          SDIV     r10,r10,r3
002df0  e00e              B        |L1.11792|
                  |L1.11762|
;;;3115   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002df2  f5a04ea8          SUB      lr,r0,#0x5400
002df6  f5be7efd          SUBS     lr,lr,#0x1fa
002dfa  d004              BEQ      |L1.11782|
002dfc  42b8              CMP      r0,r7
002dfe  d002              BEQ      |L1.11782|
002e00  f1be0e17          SUBS     lr,lr,#0x17
002e04  d102              BNE      |L1.11788|
                  |L1.11782|
002e06  fb9afaf4          SDIV     r10,r10,r4
002e0a  e001              B        |L1.11792|
                  |L1.11788|
;;;3116   	else temp_SL/=1000L;
002e0c  fb9afafc          SDIV     r10,r10,r12
                  |L1.11792|
;;;3117   	bat[1]._Ib=(signed short)temp_SL;
002e10  f8a5a058          STRH     r10,[r5,#0x58]
;;;3118   
;;;3119   	temp_SL=(signed long)ad7705_buff[1];
002e14  f8dfa204          LDR      r10,|L1.12316|
002e18  f10a0a20          ADD      r10,r10,#0x20
;;;3120   	temp_SL-=(signed long)Kibat0[1];
002e1c  ebaa0808          SUB      r8,r10,r8
;;;3121   	temp_SL*=(signed long)Kibat1[1];
002e20  fb01f108          MUL      r1,r1,r8
;;;3122   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002e24  4558              CMP      r0,r11
002e26  d001              BEQ      |L1.11820|
002e28  4290              CMP      r0,r2
002e2a  d102              BNE      |L1.11826|
                  |L1.11820|
002e2c  fb91f0f3          SDIV     r0,r1,r3
002e30  e00c              B        |L1.11852|
                  |L1.11826|
;;;3123   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002e32  f5a042aa          SUB      r2,r0,#0x5500
002e36  3afa              SUBS     r2,r2,#0xfa
002e38  d003              BEQ      |L1.11842|
002e3a  42b8              CMP      r0,r7
002e3c  d001              BEQ      |L1.11842|
002e3e  3a17              SUBS     r2,r2,#0x17
002e40  d102              BNE      |L1.11848|
                  |L1.11842|
002e42  fb91f0f4          SDIV     r0,r1,r4
002e46  e001              B        |L1.11852|
                  |L1.11848|
;;;3124   	else temp_SL/=1000L;
002e48  fb91f0fc          SDIV     r0,r1,r12
                  |L1.11852|
;;;3125   	bat[1]._Ib_=(signed short)temp_SL;
002e4c  f8a5005a          STRH     r0,[r5,#0x5a]
                  |L1.11856|
;;;3126   	}
;;;3127   
;;;3128   
;;;3129   
;;;3130   
;;;3131   
;;;3132   //Температуры батарей
;;;3133   
;;;3134   #ifdef UKU_KONTUR
;;;3135   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3136   else bat[0]._nd=1;
;;;3137   temp_SL=(signed long)adc_buff_[6];
;;;3138   temp_SL*=Ktbat[0];
;;;3139   temp_SL/=20000L;
;;;3140   temp_SL-=273L;
;;;3141   bat[0]._Tb=(signed short)temp_SL;
;;;3142   #else
;;;3143   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002e50  f9b9000c          LDRSH    r0,[r9,#0xc]  ; adc_buff_
002e54  f6403eb7          MOV      lr,#0xbb7
002e58  4680              MOV      r8,r0
002e5a  f2a03021          SUB      r0,r0,#0x321
002e5e  2300              MOVS     r3,#0
;;;3144   else bat[0]._nd=1;
002e60  f04f0c01          MOV      r12,#1
002e64  9002              STR      r0,[sp,#8]            ;3143
002e66  4570              CMP      r0,lr                 ;3143
002e68  d201              BCS      |L1.11886|
002e6a  73ab              STRB     r3,[r5,#0xe]          ;3143
002e6c  e001              B        |L1.11890|
                  |L1.11886|
002e6e  f885c00e          STRB     r12,[r5,#0xe]
                  |L1.11890|
;;;3145   temp_SL=(signed long)adc_buff_[6];
;;;3146   temp_SL*=Ktbat[0];
002e72  486b              LDR      r0,|L1.12320|
002e74  f9b02000          LDRSH    r2,[r0,#0]  ; Ktbat
002e78  fb02f208          MUL      r2,r2,r8
;;;3147   temp_SL/=20000L;
002e7c  f6446120          MOV      r1,#0x4e20
002e80  fb92f2f1          SDIV     r2,r2,r1
;;;3148   temp_SL-=273L;
002e84  f2a21211          SUB      r2,r2,#0x111
;;;3149   bat[0]._Tb=(signed short)temp_SL;
002e88  81aa              STRH     r2,[r5,#0xc]
;;;3150   #endif
;;;3151   
;;;3152   #ifdef UKU_KONTUR
;;;3153   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3154   else bat[1]._nd=1;
;;;3155   temp_SL=(signed long)adc_buff_[7];
;;;3156   temp_SL*=Ktbat[1];
;;;3157   temp_SL/=20000L;
;;;3158   temp_SL-=273L;
;;;3159   bat[1]._Tb=(signed short)temp_SL;
;;;3160   #else
;;;3161   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002e8a  f9b9200e          LDRSH    r2,[r9,#0xe]  ; adc_buff_
002e8e  f2a23a21          SUB      r10,r2,#0x321
002e92  45f2              CMP      r10,lr
002e94  d202              BCS      |L1.11932|
002e96  f885305e          STRB     r3,[r5,#0x5e]
002e9a  e001              B        |L1.11936|
                  |L1.11932|
;;;3162   else bat[1]._nd=1;
002e9c  f885c05e          STRB     r12,[r5,#0x5e]
                  |L1.11936|
;;;3163   temp_SL=(signed long)adc_buff_[7];
;;;3164   temp_SL*=Ktbat[1];
002ea0  f9b00002          LDRSH    r0,[r0,#2]  ; Ktbat
002ea4  4350              MULS     r0,r2,r0
;;;3165   temp_SL/=20000L;
002ea6  f6446120          MOV      r1,#0x4e20
002eaa  fb90f0f1          SDIV     r0,r0,r1
;;;3166   temp_SL-=273L;
002eae  f2a01011          SUB      r0,r0,#0x111
;;;3167   bat[1]._Tb=(signed short)temp_SL;
002eb2  4954              LDR      r1,|L1.12292|
002eb4  f8a1005c          STRH     r0,[r1,#0x5c]
;;;3168   #endif
;;;3169   
;;;3170   #ifdef UKU_6U
;;;3171   
;;;3172   if(NUMMAKB==2)
;;;3173   	{
;;;3174   	if(makb[0]._cnt<5)
;;;3175   		{
;;;3176   		if(makb[0]._T_nd[0]==0)
;;;3177   			{
;;;3178   			bat[0]._Tb=makb[0]._T[0];
;;;3179   			bat[0]._nd=0;
;;;3180   			}
;;;3181   		}
;;;3182   
;;;3183   	if(makb[1]._cnt<5)
;;;3184   		{
;;;3185   		if(makb[1]._T_nd[0]==0)
;;;3186   			{
;;;3187   			bat[1]._Tb=makb[1]._T[0];
;;;3188   			bat[1]._nd=0;
;;;3189   			}
;;;3190   		}
;;;3191   
;;;3192   	}
;;;3193   else if(NUMMAKB==4)
;;;3194   	{
;;;3195   	signed short temp_t;
;;;3196   	temp_t=-20;
;;;3197   	if(makb[0]._cnt<5)
;;;3198   		{
;;;3199   		if(makb[0]._T_nd[0]==0)
;;;3200   			{
;;;3201   			temp_t=makb[0]._T[0];
;;;3202   			bat[0]._nd=0;
;;;3203   			}
;;;3204   		}
;;;3205   	if(makb[1]._cnt<5)
;;;3206   		{
;;;3207   		if(makb[1]._T_nd[0]==0)
;;;3208   			{
;;;3209   			if(temp_t<makb[1]._T[0])
;;;3210   				{
;;;3211   				bat[0]._nd=0;
;;;3212   				temp_t=makb[1]._T[0];
;;;3213   				}
;;;3214   			}
;;;3215   		}
;;;3216   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3217   
;;;3218    	temp_t=-20;
;;;3219   	if(makb[2]._cnt<5)
;;;3220   		{
;;;3221   		if(makb[2]._T_nd[0]==0)
;;;3222   			{
;;;3223   			temp_t=makb[2]._T[0];
;;;3224   			bat[1]._nd=0;
;;;3225   			}
;;;3226   		}
;;;3227   	if(makb[3]._cnt<5)
;;;3228   		{
;;;3229   		if(makb[3]._T_nd[0]==0)
;;;3230   			{
;;;3231   			if(temp_t<makb[3]._T[0])
;;;3232   				{
;;;3233   				bat[1]._nd=0;
;;;3234   				temp_t=makb[3]._T[0];
;;;3235   				}
;;;3236   			}
;;;3237   		}
;;;3238   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3239   	}
;;;3240   
;;;3241   #endif
;;;3242   
;;;3243   
;;;3244   //Напряжение нагрузки
;;;3245   temp_SL=(signed long)adc_buff_[2];
002eb8  f9b91004          LDRSH    r1,[r9,#4]  ; adc_buff_
;;;3246   temp_SL*=Kuload;
002ebc  4859              LDR      r0,|L1.12324|
002ebe  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002ec2  fb01f000          MUL      r0,r1,r0
;;;3247   temp_SL/=2000L;
002ec6  f44f62fa          MOV      r2,#0x7d0
002eca  fb90f0f2          SDIV     r0,r0,r2
;;;3248   load_U=(signed short)temp_SL;
002ece  f8dfb158          LDR      r11,|L1.12328|
002ed2  f8ab0000          STRH     r0,[r11,#0]
;;;3249   
;;;3250   #ifdef UKU_220 
;;;3251   //Напряжение нагрузки
;;;3252   temp_SL=(signed long)adc_buff_[2];
;;;3253   temp_SL*=Kuload;
;;;3254   temp_SL/=350L;
;;;3255   load_U=(signed short)temp_SL;
;;;3256   #endif
;;;3257   
;;;3258   #ifdef UKU_220_V2 
;;;3259   //Напряжение нагрузки
;;;3260   temp_SL=(signed long)adc_buff_[2];
;;;3261   temp_SL*=Kuload;
;;;3262   temp_SL/=350L;
;;;3263   load_U=(signed short)temp_SL;
;;;3264   #endif
;;;3265   
;;;3266   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3267   //Напряжение шины
;;;3268   temp_SL=(signed long)adc_buff_[1];
002ed6  f9b92002          LDRSH    r2,[r9,#2]  ; adc_buff_
;;;3269   temp_SL*=Kuout;
002eda  4854              LDR      r0,|L1.12332|
002edc  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002ee0  fb02f200          MUL      r2,r2,r0
;;;3270   if(AUSW_MAIN==22010)temp_SL/=400L;
002ee4  484c              LDR      r0,|L1.12312|
002ee6  f24554fa          MOV      r4,#0x55fa
002eea  f44f75c8          MOV      r5,#0x190
002eee  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002ef0  42a0              CMP      r0,r4
002ef2  d102              BNE      |L1.12026|
002ef4  fb92f2f5          SDIV     r2,r2,r5
002ef8  e003              B        |L1.12034|
                  |L1.12026|
;;;3271   else temp_SL/=500L;
002efa  f44f7afa          MOV      r10,#0x1f4
002efe  fb92f2fa          SDIV     r2,r2,r10
                  |L1.12034|
;;;3272   out_U=(signed short)temp_SL;
002f02  fa0ffa82          SXTH     r10,r2
002f06  4a4a              LDR      r2,|L1.12336|
002f08  f8a2a000          STRH     r10,[r2,#0]
;;;3273   load_U=out_U;
002f0c  f8aba000          STRH     r10,[r11,#0]
;;;3274   
;;;3275   //Напряжение выпрямителей
;;;3276   temp_SL=(signed long)adc_buff_[2];
;;;3277   temp_SL*=Kubps;
002f10  4a48              LDR      r2,|L1.12340|
002f12  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002f16  fb01f102          MUL      r1,r1,r2
;;;3278   if(AUSW_MAIN==22010)temp_SL/=400L;
002f1a  d102              BNE      |L1.12066|
002f1c  fb91f1f5          SDIV     r1,r1,r5
002f20  e003              B        |L1.12074|
                  |L1.12066|
;;;3279   else temp_SL/=500L;
002f22  f44f72fa          MOV      r2,#0x1f4
002f26  fb91f1f2          SDIV     r1,r1,r2
                  |L1.12074|
;;;3280   bps_U=(signed short)temp_SL;
002f2a  4d43              LDR      r5,|L1.12344|
002f2c  b209              SXTH     r1,r1
002f2e  8029              STRH     r1,[r5,#0]
;;;3281   
;;;3282   if(bps_U<100)
002f30  2964              CMP      r1,#0x64
002f32  da18              BGE      |L1.12134|
;;;3283   	{
;;;3284   	char i;
;;;3285   	for(i=0;i<NUMIST;i++)
002f34  f04f0100          MOV      r1,#0
002f38  4a40              LDR      r2,|L1.12348|
002f3a  f8dfb104          LDR      r11,|L1.12352|
002f3e  f9b29000          LDRSH    r9,[r2,#0]
002f42  e00e              B        |L1.12130|
                  |L1.12100|
;;;3286   		{
;;;3287   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002f44  eb0102c1          ADD      r2,r1,r1,LSL #3
002f48  eb021201          ADD      r2,r2,r1,LSL #4
002f4c  eb0b0282          ADD      r2,r11,r2,LSL #2
002f50  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002f54  6a12              LDR      r2,[r2,#0x20]
002f56  42a2              CMP      r2,r4
002f58  dd00              BLE      |L1.12124|
002f5a  802a              STRH     r2,[r5,#0]
                  |L1.12124|
002f5c  f1010101          ADD      r1,r1,#1              ;3285
002f60  b2c9              UXTB     r1,r1                 ;3285
                  |L1.12130|
002f62  4549              CMP      r1,r9                 ;3285
002f64  dbee              BLT      |L1.12100|
                  |L1.12134|
;;;3288   		}
;;;3289   	}
;;;3290   
;;;3291   //Суммарный ток выпрямителей
;;;3292   temp_SL=0;
002f66  f04f0500          MOV      r5,#0
;;;3293   for (i=0;i<NUMIST;i++)
002f6a  4629              MOV      r1,r5
002f6c  4a33              LDR      r2,|L1.12348|
002f6e  4c34              LDR      r4,|L1.12352|
002f70  f9b22000          LDRSH    r2,[r2,#0]            ;3285
002f74  e00b              B        |L1.12174|
                  |L1.12150|
;;;3294   	{
;;;3295   	temp_SL+=((signed long)bps[i]._Ii);
002f76  eb0109c1          ADD      r9,r1,r1,LSL #3
002f7a  eb091901          ADD      r9,r9,r1,LSL #4
002f7e  eb040989          ADD      r9,r4,r9,LSL #2
002f82  f8d99024          LDR      r9,[r9,#0x24]
002f86  444d              ADD      r5,r5,r9
002f88  f1010101          ADD      r1,r1,#1              ;3293
002f8c  b2c9              UXTB     r1,r1                 ;3293
                  |L1.12174|
002f8e  4291              CMP      r1,r2                 ;3293
002f90  dbf1              BLT      |L1.12150|
;;;3296   	}
;;;3297   bps_I=(signed short)temp_SL;
002f92  492c              LDR      r1,|L1.12356|
002f94  800d              STRH     r5,[r1,#0]
;;;3298   
;;;3299   
;;;3300   #endif
;;;3301   
;;;3302   
;;;3303   #ifdef UKU_KONTUR
;;;3304   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3305   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3306   else ND_EXT[0]=1;
;;;3307   temp_SL=(signed long)adc_buff_[5];
;;;3308   temp_SL*=Ktext[0];
;;;3309   temp_SL/=20000L;
;;;3310   temp_SL-=273L;
;;;3311   t_ext[0]=(signed short)temp_SL;
;;;3312   #else 
;;;3313   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3314   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002f96  4919              LDR      r1,|L1.12284|
002f98  f6403bb7          MOV      r11,#0xbb7
002f9c  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
002fa0  4929              LDR      r1,|L1.12360|
002fa2  f2a53921          SUB      r9,r5,#0x321
002fa6  f8cd9004          STR      r9,[sp,#4]
002faa  45d9              CMP      r9,r11
002fac  d201              BCS      |L1.12210|
002fae  700b              STRB     r3,[r1,#0]
002fb0  e001              B        |L1.12214|
                  |L1.12210|
;;;3315   else ND_EXT[0]=1;
002fb2  f881c000          STRB     r12,[r1,#0]
                  |L1.12214|
;;;3316   temp_SL=(signed long)adc_buff_[5];
;;;3317   temp_SL*=Ktext[0];
002fb6  f8df9094          LDR      r9,|L1.12364|
002fba  f9b99000          LDRSH    r9,[r9,#0]  ; Ktext
002fbe  fb09fb05          MUL      r11,r9,r5
;;;3318   temp_SL/=20000L;
002fc2  f6446e20          MOV      lr,#0x4e20
002fc6  fb9bfbfe          SDIV     r11,r11,lr
;;;3319   temp_SL-=273L;
002fca  f2ab1b11          SUB      r11,r11,#0x111
;;;3320   t_ext[0]=(signed short)temp_SL;
002fce  f8dfe080          LDR      lr,|L1.12368|
002fd2  f8aeb000          STRH     r11,[lr,#0]
;;;3321   /*
;;;3322   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3323   else ND_EXT[1]=1;
;;;3324   temp_SL=(signed long)adc_buff_[6];
;;;3325   temp_SL*=Ktext[1];
;;;3326   temp_SL/=20000L;
;;;3327   temp_SL-=273L;
;;;3328   t_ext[1]=(signed short)temp_SL;	*/
;;;3329   #endif
;;;3330   
;;;3331   #ifdef UKU_220
;;;3332   
;;;3333   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3334   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3335   else ND_EXT[1]=1;
;;;3336   temp_SL=(signed long)adc_buff_[3];
;;;3337   temp_SL*=Ktext[1];
;;;3338   temp_SL/=20000L;
;;;3339   temp_SL-=273L;
;;;3340   t_ext[1]=(signed short)temp_SL;
;;;3341   
;;;3342   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3343   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3344   else ND_EXT[2]=1;
;;;3345   temp_SL=(signed long)adc_buff_[10];
;;;3346   temp_SL*=Ktext[2];
;;;3347   temp_SL/=20000L;
;;;3348   temp_SL-=273L;
;;;3349   t_ext[2]=(signed short)temp_SL;
;;;3350   
;;;3351   #else
;;;3352   
;;;3353   
;;;3354   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3355   
;;;3356   //Внешний датчик температуры 
;;;3357   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002fd6  f8ddb008          LDR      r11,[sp,#8]
002fda  f6403eb7          MOV      lr,#0xbb7
002fde  45f3              CMP      r11,lr
002fe0  d238              BCS      |L1.12372|
002fe2  700b              STRB     r3,[r1,#0]
002fe4  e038              B        |L1.12376|
002fe6  0000              DCW      0x0000
                  |L1.12264|
                          DCD      net_F3
                  |L1.12268|
                          DCD      net_U
                  |L1.12272|
                          DCD      Kunet
                  |L1.12276|
                          DCD      ||area_number.25||
                  |L1.12280|
                          DCD      net_F
                  |L1.12284|
                          DCD      ||.bss||+0x40c
                  |L1.12288|
                          DCD      Kubat
                  |L1.12292|
                          DCD      bat
                  |L1.12296|
                          DCD      Kubatm
                  |L1.12300|
                          DCD      ad7705_buff_
                  |L1.12304|
                          DCD      Kibat0
                  |L1.12308|
                          DCD      Kibat1
                  |L1.12312|
                          DCD      AUSW_MAIN
                  |L1.12316|
                          DCD      ad7705_buff
                  |L1.12320|
                          DCD      Ktbat
                  |L1.12324|
                          DCD      Kuload
                  |L1.12328|
                          DCD      load_U
                  |L1.12332|
                          DCD      Kuout
                  |L1.12336|
                          DCD      out_U
                  |L1.12340|
                          DCD      Kubps
                  |L1.12344|
                          DCD      bps_U
                  |L1.12348|
                          DCD      NUMIST
                  |L1.12352|
                          DCD      bps
                  |L1.12356|
                          DCD      bps_I
                  |L1.12360|
                          DCD      ND_EXT
                  |L1.12364|
                          DCD      Ktext
                  |L1.12368|
                          DCD      t_ext
                  |L1.12372|
;;;3358   else ND_EXT[0]=1;
003054  f881c000          STRB     r12,[r1,#0]
                  |L1.12376|
;;;3359   temp_SL=(signed long)adc_buff_[6];
;;;3360   temp_SL*=Ktext[0];
003058  fb09f908          MUL      r9,r9,r8
;;;3361   temp_SL/=20000L;
00305c  f6446b20          MOV      r11,#0x4e20
003060  fb99f8fb          SDIV     r8,r9,r11
;;;3362   temp_SL-=273L;
003064  f2a81811          SUB      r8,r8,#0x111
;;;3363   t_ext[0]=(signed short)temp_SL;
003068  f8df947c          LDR      r9,|L1.13544|
00306c  f8a98000          STRH     r8,[r9,#0]
;;;3364   
;;;3365   //Внешний датчик температуры №2
;;;3366   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
003070  f8dd8004          LDR      r8,[sp,#4]
003074  45f0              CMP      r8,lr
003076  d201              BCS      |L1.12412|
003078  704b              STRB     r3,[r1,#1]
00307a  e001              B        |L1.12416|
                  |L1.12412|
;;;3367   else ND_EXT[1]=1;
00307c  f881c001          STRB     r12,[r1,#1]
                  |L1.12416|
;;;3368   temp_SL=(signed long)adc_buff_[5];
;;;3369   temp_SL*=Ktext[1];
003080  f8dfc468          LDR      r12,|L1.13548|
003084  f9bcc002          LDRSH    r12,[r12,#2]  ; Ktext
003088  fb0cfc05          MUL      r12,r12,r5
;;;3370   temp_SL/=20000L;
00308c  fb9cf5fb          SDIV     r5,r12,r11
;;;3371   temp_SL-=273L;
003090  f2a51511          SUB      r5,r5,#0x111
;;;3372   t_ext[1]=(signed short)temp_SL;
003094  f8dfc450          LDR      r12,|L1.13544|
003098  b22d              SXTH     r5,r5
00309a  f8ac5002          STRH     r5,[r12,#2]
00309e  9500              STR      r5,[sp,#0]
;;;3373   #else
;;;3374   
;;;3375   
;;;3376   
;;;3377   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3378   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3379   else ND_EXT[1]=1;
;;;3380   temp_SL=(signed long)adc_buff_[6];
;;;3381   temp_SL*=Ktext[1];
;;;3382   temp_SL/=20000L;
;;;3383   temp_SL-=273L;
;;;3384   t_ext[1]=(signed short)temp_SL;
;;;3385   
;;;3386   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3387   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3388   else ND_EXT[2]=1;
;;;3389   temp_SL=(signed long)adc_buff_[3];
;;;3390   temp_SL*=Ktext[2];
;;;3391   temp_SL/=20000L;
;;;3392   temp_SL-=273L;
;;;3393   t_ext[2]=(signed short)temp_SL;
;;;3394   
;;;3395   #endif
;;;3396   #endif
;;;3397   
;;;3398   #ifdef UKU_220_V2
;;;3399   
;;;3400   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3401   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3402   else ND_EXT[1]=1;
;;;3403   temp_SL=(signed long)adc_buff_[3];
;;;3404   temp_SL*=Ktext[1];
;;;3405   temp_SL/=20000L;
;;;3406   temp_SL-=273L;
;;;3407   t_ext[1]=(signed short)temp_SL;
;;;3408   
;;;3409   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3410   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3411   else ND_EXT[2]=1;
;;;3412   temp_SL=(signed long)adc_buff_[10];
;;;3413   temp_SL*=Ktext[2];
;;;3414   temp_SL/=20000L;
;;;3415   temp_SL-=273L;
;;;3416   t_ext[2]=(signed short)temp_SL;
;;;3417   
;;;3418   #else
;;;3419   
;;;3420   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3421   //Ток батареи
;;;3422   if(bps[8]._device==dIBAT_METR)
0030a0  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3423   	{
;;;3424   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3425   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3426   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3427   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3428   	if(!bIBAT_SMKLBR)
;;;3429   		{
;;;3430   		signed long temp_SL;
;;;3431   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3432   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3433   		temp_SL*=(signed long)Kibat1[0];
;;;3434   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3435   	
;;;3436   		Ib_ips_termokompensat =(signed short)temp_SL;
0030a4  f8dfc448          LDR      r12,|L1.13552|
0030a8  2d09              CMP      r5,#9                 ;3422
0030aa  d15a              BNE      |L1.12642|
0030ac  f8945326          LDRB     r5,[r4,#0x326]        ;3424  ; bps
0030b0  f8948327          LDRB     r8,[r4,#0x327]        ;3424  ; bps
0030b4  f8df943c          LDR      r9,|L1.13556|
0030b8  eb052508          ADD      r5,r5,r8,LSL #8       ;3424
0030bc  f8c95000          STR      r5,[r9,#0]            ;3424  ; ibat_metr_buff_
0030c0  f8948328          LDRB     r8,[r4,#0x328]        ;3425  ; bps
0030c4  f894b329          LDRB     r11,[r4,#0x329]       ;3425  ; bps
0030c8  eb08280b          ADD      r8,r8,r11,LSL #8      ;3425
0030cc  f8c98004          STR      r8,[r9,#4]            ;3425  ; ibat_metr_buff_
0030d0  f894932a          LDRB     r9,[r4,#0x32a]        ;3426  ; bps
0030d4  f894b32b          LDRB     r11,[r4,#0x32b]       ;3426  ; bps
0030d8  eb09290b          ADD      r9,r9,r11,LSL #8      ;3426
0030dc  fa0ffb89          SXTH     r11,r9                ;3426
0030e0  f8df9414          LDR      r9,|L1.13560|
0030e4  f8a9b000          STRH     r11,[r9,#0]           ;3426
0030e8  f8df9410          LDR      r9,|L1.13564|
0030ec  f1bb0f00          CMP      r11,#0                ;3427
0030f0  d003              BEQ      |L1.12538|
0030f2  f04f0b32          MOV      r11,#0x32             ;3427
0030f6  f8a9b000          STRH     r11,[r9,#0]           ;3427
                  |L1.12538|
0030fa  d132              BNE      |L1.12642|
0030fc  eba50808          SUB      r8,r5,r8              ;3432
003100  4dff              LDR      r5,|L1.13568|
003102  f9b55000          LDRSH    r5,[r5,#0]            ;3433  ; Kibat1
003106  fb05f508          MUL      r5,r5,r8              ;3433
00310a  f5a048a8          SUB      r8,r0,#0x5400         ;3434
00310e  f5b878fd          SUBS     r8,r8,#0x1fa          ;3434
003112  d00f              BEQ      |L1.12596|
003114  f1b80801          SUBS     r8,r8,#1              ;3434
003118  d00c              BEQ      |L1.12596|
00311a  42b8              CMP      r0,r7                 ;3434
00311c  d00a              BEQ      |L1.12596|
00311e  f1b80716          SUBS     r7,r8,#0x16           ;3434
003122  d007              BEQ      |L1.12596|
003124  3f1e              SUBS     r7,r7,#0x1e           ;3434
003126  d005              BEQ      |L1.12596|
003128  3728              ADDS     r7,r7,#0x28           ;3434
00312a  d003              BEQ      |L1.12596|
00312c  3f14              SUBS     r7,r7,#0x14           ;3434
00312e  d001              BEQ      |L1.12596|
003130  1e7f              SUBS     r7,r7,#1              ;3434
003132  d103              BNE      |L1.12604|
                  |L1.12596|
003134  f44f67fa          MOV      r7,#0x7d0             ;3434
003138  fb95f5f7          SDIV     r5,r5,r7              ;3434
                  |L1.12604|
00313c  b22f              SXTH     r7,r5
00313e  f8ac7000          STRH     r7,[r12,#0]
;;;3437   		if(bIBAT_SMKLBR_cnt)
003142  f9b95000          LDRSH    r5,[r9,#0]  ; bIBAT_SMKLBR_cnt
;;;3438   			{
;;;3439   			bIBAT_SMKLBR_cnt--;
;;;3440   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
003146  f8df83bc          LDR      r8,|L1.13572|
00314a  b145              CBZ      r5,|L1.12638|
00314c  f1a50501          SUB      r5,r5,#1              ;3439
003150  f8a95000          STRH     r5,[r9,#0]            ;3439
003154  f8b85000          LDRH     r5,[r8,#0]  ; Ib_ips_termokompensat_temp
003158  f8ac5000          STRH     r5,[r12,#0]
00315c  e001              B        |L1.12642|
                  |L1.12638|
;;;3441   			}
;;;3442   		else 
;;;3443   			{
;;;3444   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
00315e  f8a87000          STRH     r7,[r8,#0]
                  |L1.12642|
;;;3445   			}
;;;3446   		}
;;;3447   	}
;;;3448   
;;;3449   bat[0]._Ub=load_U;
003162  4de9              LDR      r5,|L1.13576|
003164  f8a5a002          STRH     r10,[r5,#2]
;;;3450   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
003168  f5a047ac          SUB      r7,r0,#0x5600
00316c  3f02              SUBS     r7,#2
00316e  d103              BNE      |L1.12664|
003170  8928              LDRH     r0,[r5,#8]  ; bat
003172  f8ac0000          STRH     r0,[r12,#0]
003176  e002              B        |L1.12670|
                  |L1.12664|
;;;3451   else bat[0]._Ib=Ib_ips_termokompensat;
003178  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
00317c  8128              STRH     r0,[r5,#8]
                  |L1.12670|
;;;3452   
;;;3453   #endif
;;;3454   #endif
;;;3455   
;;;3456   
;;;3457   #ifdef UKU_TELECORE2015
;;;3458   
;;;3459   //Внешний датчик температуры №1
;;;3460   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3461   else ND_EXT[0]=1;
;;;3462   temp_SL=(signed long)adc_buff_[7];
;;;3463   temp_SL*=Ktext[0];
;;;3464   temp_SL/=20000L;
;;;3465   temp_SL-=273L;
;;;3466   t_ext[0]=(signed short)temp_SL;
;;;3467   
;;;3468   
;;;3469   //Внешний датчик температуры №2
;;;3470   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3471   else ND_EXT[1]=1;
;;;3472   temp_SL=(signed long)adc_buff_[6];
;;;3473   temp_SL*=Ktext[1];
;;;3474   temp_SL/=20000L;
;;;3475   temp_SL-=273L;
;;;3476   t_ext[1]=(signed short)temp_SL;
;;;3477   
;;;3478   #endif
;;;3479   
;;;3480   #ifdef UKU_TELECORE2017
;;;3481   
;;;3482   //Внешний датчик температуры №1
;;;3483   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3484   else ND_EXT[0]=1;
;;;3485   temp_SL=(signed long)adc_buff_[7];
;;;3486   temp_SL*=Ktext[0];
;;;3487   temp_SL/=20000L;
;;;3488   temp_SL-=273L;
;;;3489   t_ext[0]=(signed short)temp_SL;
;;;3490   
;;;3491   
;;;3492   //Внешний датчик температуры №2
;;;3493   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3494   else ND_EXT[1]=1;
;;;3495   temp_SL=(signed long)adc_buff_[6];
;;;3496   temp_SL*=Ktext[1];
;;;3497   temp_SL/=20000L;
;;;3498   temp_SL-=273L;
;;;3499   t_ext[1]=(signed short)temp_SL;
;;;3500   
;;;3501   #endif
;;;3502   
;;;3503   //напряжение ввода
;;;3504   temp_SL=(signed long)adc_buff_ext_[0];
00317e  f8df838c          LDR      r8,|L1.13580|
003182  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3505   temp_SL*=Kunet_ext[0];
003186  f8df9388          LDR      r9,|L1.13584|
00318a  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
00318e  4378              MULS     r0,r7,r0
;;;3506   temp_SL/=4000L;
003190  f44f6b7a          MOV      r11,#0xfa0
003194  fb90f0fb          SDIV     r0,r0,r11
;;;3507   Uvv[0]=(signed short)temp_SL;
003198  4fde              LDR      r7,|L1.13588|
00319a  b280              UXTH     r0,r0
00319c  8038              STRH     r0,[r7,#0]
;;;3508   if(Uvv[0]<100) Uvv0=Uvv[0];
00319e  f8dfe378          LDR      lr,|L1.13592|
0031a2  2864              CMP      r0,#0x64
0031a4  d202              BCS      |L1.12716|
0031a6  f8ae0000          STRH     r0,[lr,#0]
0031aa  e003              B        |L1.12724|
                  |L1.12716|
;;;3509   else Uvv0=net_U;
0031ac  48db              LDR      r0,|L1.13596|
0031ae  8800              LDRH     r0,[r0,#0]  ; net_U
0031b0  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12724|
;;;3510   
;;;3511   //напряжение пэс
;;;3512   temp_SL=(signed long)adc_buff_ext_[1];
0031b4  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3513   temp_SL*=Kunet_ext[1];
0031b8  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
0031bc  fb00f008          MUL      r0,r0,r8
;;;3514   temp_SL/=4000L;
0031c0  fb90f0fb          SDIV     r0,r0,r11
;;;3515   Uvv[1]=(signed short)temp_SL;
0031c4  8078              STRH     r0,[r7,#2]
;;;3516   
;;;3517   
;;;3518   //напряжение ввода трехфазное
;;;3519   temp_SL=(signed long)eb2_data_short[0];
0031c6  4fd6              LDR      r7,|L1.13600|
0031c8  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3520   temp_SL*=Kvv_eb2[0];
0031cc  f8df8354          LDR      r8,|L1.13604|
0031d0  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
0031d4  fb09f900          MUL      r9,r9,r0
;;;3521   temp_SL/=6000L;
0031d8  f2417070          MOV      r0,#0x1770
0031dc  fb99fbf0          SDIV     r11,r9,r0
;;;3522   Uvv_eb2[0]=(signed short)temp_SL;
0031e0  f8df9344          LDR      r9,|L1.13608|
0031e4  f8a9b000          STRH     r11,[r9,#0]
;;;3523   
;;;3524   temp_SL=(signed long)eb2_data_short[1];
0031e8  f9b7b002          LDRSH    r11,[r7,#2]  ; eb2_data_short
;;;3525   temp_SL*=Kvv_eb2[1];
0031ec  f9b8e002          LDRSH    lr,[r8,#2]  ; Kvv_eb2
0031f0  fb0efe0b          MUL      lr,lr,r11
;;;3526   temp_SL/=6000L;
0031f4  fb9efbf0          SDIV     r11,lr,r0
;;;3527   Uvv_eb2[1]=(signed short)temp_SL;
0031f8  f8a9b002          STRH     r11,[r9,#2]
;;;3528   
;;;3529   temp_SL=(signed long)eb2_data_short[2];
0031fc  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3530   temp_SL*=Kvv_eb2[2];
003200  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
003204  fb08f80b          MUL      r8,r8,r11
;;;3531   temp_SL/=6000L;
003208  fb98f8f0          SDIV     r8,r8,r0
;;;3532   Uvv_eb2[2]=(signed short)temp_SL;
00320c  f8a98004          STRH     r8,[r9,#4]
;;;3533   
;;;3534   //напряжение пэс трехфазное
;;;3535   temp_SL=(signed long)eb2_data_short[3];
003210  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3536   temp_SL*=Kpes_eb2[0];
003214  f8df8314          LDR      r8,|L1.13612|
003218  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
00321c  fb09f90b          MUL      r9,r9,r11
;;;3537   temp_SL/=6000L;
003220  fb99fbf0          SDIV     r11,r9,r0
;;;3538   Upes_eb2[0]=(signed short)temp_SL;
003224  f8df9308          LDR      r9,|L1.13616|
003228  f8a9b000          STRH     r11,[r9,#0]
;;;3539   
;;;3540   temp_SL=(signed long)eb2_data_short[4];
00322c  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3541   temp_SL*=Kpes_eb2[1];
003230  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
003234  fb0bfb0e          MUL      r11,r11,lr
;;;3542   temp_SL/=6000L;
003238  fb9bfbf0          SDIV     r11,r11,r0
;;;3543   Upes_eb2[1]=(signed short)temp_SL;
00323c  f8a9b002          STRH     r11,[r9,#2]
;;;3544   
;;;3545   temp_SL=(signed long)eb2_data_short[5];
003240  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3546   temp_SL*=Kpes_eb2[2];
003244  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
003248  fb07f70b          MUL      r7,r7,r11
;;;3547   temp_SL/=6000L;
00324c  fb97f0f0          SDIV     r0,r7,r0
;;;3548   Upes_eb2[2]=(signed short)temp_SL;
003250  f8a90004          STRH     r0,[r9,#4]
;;;3549   
;;;3550   //Вычисление температуры шкафа
;;;3551   
;;;3552   ibt._T[0]=t_ext[1]+273;
003254  9f00              LDR      r7,[sp,#0]
003256  f8dfb2dc          LDR      r11,|L1.13620|
00325a  f2071711          ADD      r7,r7,#0x111
00325e  48a2              LDR      r0,|L1.13544|
003260  fa0ff887          SXTH     r8,r7
003264  f8ab8000          STRH     r8,[r11,#0]
;;;3553   ibt._T[1]=t_ext[2]+273;
003268  8880              LDRH     r0,[r0,#4]  ; t_ext
00326a  f2001011          ADD      r0,r0,#0x111
00326e  fa0ff980          SXTH     r9,r0
003272  f8ab9002          STRH     r9,[r11,#2]
;;;3554   
;;;3555   ibt._nd[0]=ND_EXT[1];
003276  784f              LDRB     r7,[r1,#1]  ; ND_EXT
003278  f88b7008          STRB     r7,[r11,#8]
;;;3556   ibt._nd[1]=ND_EXT[2];
00327c  7888              LDRB     r0,[r1,#2]  ; ND_EXT
00327e  f88b0009          STRB     r0,[r11,#9]
;;;3557   
;;;3558   #ifndef UKU_TELECORE2015
;;;3559   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3560   	{
;;;3561   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003282  49ad              LDR      r1,|L1.13624|
003284  b907              CBNZ     r7,|L1.12936|
003286  b110              CBZ      r0,|L1.12942|
                  |L1.12936|
;;;3562   	}
;;;3563   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
003288  2f01              CMP      r7,#1
00328a  d00a              BEQ      |L1.12962|
00328c  e00a              B        |L1.12964|
                  |L1.12942|
00328e  eb080009          ADD      r0,r8,r9              ;3561
003292  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3561
003296  f46f7788          MVN      r7,#0x110             ;3561
00329a  eb070060          ADD      r0,r7,r0,ASR #1       ;3561
00329e  8008              STRH     r0,[r1,#0]            ;3561
0032a0  e01e              B        |L1.13024|
                  |L1.12962|
0032a2  b108              CBZ      r0,|L1.12968|
                  |L1.12964|
;;;3564   	{
;;;3565   	t_box=ibt._T[1]-273;
;;;3566   	}
;;;3567   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
0032a4  b12f              CBZ      r7,|L1.12978|
0032a6  e006              B        |L1.12982|
                  |L1.12968|
0032a8  f2a91911          SUB      r9,r9,#0x111          ;3565
0032ac  f8a19000          STRH     r9,[r1,#0]            ;3565
0032b0  e016              B        |L1.13024|
                  |L1.12978|
0032b2  2801              CMP      r0,#1
0032b4  d002              BEQ      |L1.12988|
                  |L1.12982|
;;;3568   	{
;;;3569   	t_box=ibt._T[0]-273;
;;;3570   	}
;;;3571   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
0032b6  2f01              CMP      r7,#1
0032b8  d005              BEQ      |L1.12998|
0032ba  e011              B        |L1.13024|
                  |L1.12988|
0032bc  f2a81811          SUB      r8,r8,#0x111          ;3569
0032c0  f8a18000          STRH     r8,[r1,#0]            ;3569
0032c4  e00c              B        |L1.13024|
                  |L1.12998|
0032c6  2801              CMP      r0,#1
0032c8  d10a              BNE      |L1.13024|
;;;3572   	{
;;;3573   	if(t_ext_can_nd<5)t_box= t_ext_can;
0032ca  489c              LDR      r0,|L1.13628|
0032cc  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0032ce  2805              CMP      r0,#5
0032d0  d203              BCS      |L1.13018|
0032d2  489b              LDR      r0,|L1.13632|
0032d4  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0032d6  8008              STRH     r0,[r1,#0]
0032d8  e002              B        |L1.13024|
                  |L1.13018|
;;;3574   	else t_box=20;
0032da  f04f0014          MOV      r0,#0x14
0032de  8008              STRH     r0,[r1,#0]
                  |L1.13024|
;;;3575   	}
;;;3576   #endif
;;;3577   /*
;;;3578   //Вычисление температуры шкафа
;;;3579   
;;;3580   ibt._T[0]=bat[0]._Tb+273;
;;;3581   ibt._T[1]=bat[1]._Tb+273;
;;;3582   ibt._T[2]=t_ext[1]+273;
;;;3583   ibt._T[3]=t_ext[2]+273;
;;;3584   
;;;3585   ibt._nd[0]=bat[0]._nd;
;;;3586   ibt._nd[1]=bat[1]._nd;
;;;3587   ibt._nd[2]=ND_EXT[1];
;;;3588   ibt._nd[3]=ND_EXT[2];
;;;3589   
;;;3590   ibt._avg1=0;
;;;3591   ibt._avg_cnt=4;
;;;3592   
;;;3593   if(ibt._nd[0]==0)
;;;3594   	{
;;;3595   	ibt._avg1+=ibt._T[0];
;;;3596   	}
;;;3597   else 
;;;3598   	{
;;;3599   	ibt._avg_cnt--;
;;;3600   	}
;;;3601   
;;;3602   if(ibt._nd[1]==0)
;;;3603   	{
;;;3604   	ibt._avg1+=ibt._T[1];
;;;3605   	}
;;;3606   else 
;;;3607   	{
;;;3608   	ibt._avg_cnt--;
;;;3609   	}
;;;3610   
;;;3611   if(ibt._nd[2]==0)
;;;3612   	{
;;;3613   	ibt._avg1+=ibt._T[2];
;;;3614   	}
;;;3615   else 
;;;3616   	{
;;;3617   	ibt._avg_cnt--;
;;;3618   	}
;;;3619   
;;;3620   if(ibt._nd[3]==0)
;;;3621   	{
;;;3622   	ibt._avg1+=ibt._T[3];
;;;3623   	}
;;;3624   else 
;;;3625   	{
;;;3626   	ibt._avg_cnt--;
;;;3627   	}
;;;3628   
;;;3629   if(ibt._avg_cnt==0)
;;;3630   	{
;;;3631   	}
;;;3632   else
;;;3633   	{
;;;3634   	ibt._avg1/=ibt._avg_cnt;
;;;3635   	}
;;;3636   
;;;3637   
;;;3638   if(ibt._nd[0]!=0)
;;;3639   	{
;;;3640   	ibt._T_dispers[0]=0;
;;;3641   	}
;;;3642   else 
;;;3643   	{
;;;3644   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3645   	}
;;;3646   
;;;3647   if(ibt._nd[1]!=0)
;;;3648   	{
;;;3649   	ibt._T_dispers[1]=0;
;;;3650   	}
;;;3651   else 
;;;3652   	{
;;;3653   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3654   	}
;;;3655   
;;;3656   if(ibt._nd[2]!=0)
;;;3657   	{
;;;3658   	ibt._T_dispers[2]=0;
;;;3659   	}
;;;3660   else 
;;;3661   	{
;;;3662   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3663   	}
;;;3664   
;;;3665   if(ibt._nd[3]!=0)
;;;3666   	{
;;;3667   	ibt._T_dispers[3]=0;
;;;3668   	}
;;;3669   else 
;;;3670   	{
;;;3671   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3672   	}
;;;3673   
;;;3674   if(	ibt._nd[0]&&
;;;3675   	ibt._nd[1]&&
;;;3676   	ibt._nd[2]&&
;;;3677   	ibt._nd[3]
;;;3678   	)
;;;3679   	{
;;;3680   	t_box=(bps[0]._Ti);
;;;3681   	}
;;;3682   
;;;3683   else if(	ibt._nd[0]||
;;;3684   	ibt._nd[1]||
;;;3685   	ibt._nd[2]||
;;;3686   	ibt._nd[3]
;;;3687   	)
;;;3688   	{
;;;3689   	t_box=(ibt._avg1-273);
;;;3690   	}
;;;3691   else 
;;;3692   	{
;;;3693   	ibt._max_dispers_num=0;
;;;3694   	ibt._max_dispers=ibt._T_dispers[0];
;;;3695   
;;;3696   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3697   		{
;;;3698   		ibt._max_dispers_num=1;
;;;3699   		ibt._max_dispers=ibt._T_dispers[1];
;;;3700   		}
;;;3701   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3702   		{
;;;3703   		ibt._max_dispers_num=2;
;;;3704   		ibt._max_dispers=ibt._T_dispers[2];
;;;3705   		}
;;;3706   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3707   		{
;;;3708   		ibt._max_dispers_num=3;
;;;3709   		ibt._max_dispers=ibt._T_dispers[3];
;;;3710   		}
;;;3711   
;;;3712   	ibt._avg2=0;
;;;3713   
;;;3714   	if(ibt._max_dispers_num!=0)
;;;3715   		{
;;;3716   		ibt._avg2+=ibt._T[0];
;;;3717   		}
;;;3718   	if(ibt._max_dispers_num!=1)
;;;3719   		{
;;;3720   		ibt._avg2+=ibt._T[1];
;;;3721   		}
;;;3722   	if(ibt._max_dispers_num!=2)
;;;3723   		{
;;;3724   		ibt._avg2+=ibt._T[2];
;;;3725   		}
;;;3726   	if(ibt._max_dispers_num!=3)
;;;3727   		{
;;;3728   		ibt._avg2+=ibt._T[3];
;;;3729   		}
;;;3730   
;;;3731   	t_box=(ibt._avg2/3)-273;
;;;3732   
;;;3733   	}*/
;;;3734   
;;;3735   
;;;3736   //*********************************************
;;;3737   
;;;3738   #ifndef TELECORE
;;;3739   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
0032e0  4898              LDR      r0,|L1.13636|
0032e2  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
0032e4  2955              CMP      r1,#0x55
0032e6  d105              BNE      |L1.13044|
0032e8  f1ba0fc8          CMP      r10,#0xc8
0032ec  dd02              BLE      |L1.13044|
0032ee  8929              LDRH     r1,[r5,#8]  ; bat
0032f0  f8a6104a          STRH     r1,[r6,#0x4a]
                  |L1.13044|
;;;3740   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
0032f4  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
0032f6  2855              CMP      r0,#0x55
0032f8  d10b              BNE      |L1.13074|
0032fa  f9b50052          LDRSH    r0,[r5,#0x52]  ; bat
0032fe  28c8              CMP      r0,#0xc8
003300  dd07              BLE      |L1.13074|
003302  f9b50058          LDRSH    r0,[r5,#0x58]  ; bat
003306  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00330a  4288              CMP      r0,r1
00330c  dd01              BLE      |L1.13074|
00330e  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.13074|
;;;3741   #endif
;;;3742   
;;;3743   #ifdef TELECORE
;;;3744   Ibmax=0;
;;;3745   /*
;;;3746   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3747   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3748   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3749   */
;;;3750   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3751   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3752   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3753   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3754   #endif
;;;3755   
;;;3756   #ifdef UKU_FSO
;;;3757   Ibmax=0;
;;;3758   if((NUMBAT_FSO>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3759   if((NUMBAT_FSO>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3760   Ibmax_=0;
;;;3761   if((NUMBAT_FSO>0)&&(bat[0]._Ib_/10>Ibmax_))Ibmax_=bat[0]._Ib_/10;
;;;3762   if((NUMBAT_FSO>1)&&(bat[1]._Ib_/10>Ibmax_))Ibmax_=bat[1]._Ib_/10;
;;;3763   #endif
;;;3764   
;;;3765   #ifdef UKU_TELECORE2017
;;;3766   Ibmax=0;
;;;3767   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3768   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3769   #endif
;;;3770   
;;;3771   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3772   Ibmax=Ib_ips_termokompensat;
003312  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
003316  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3773   #endif
;;;3774   for(i=0;i<NUMIST;i++)
00331a  f04f0100          MOV      r1,#0
00331e  e02f              B        |L1.13184|
                  |L1.13088|
;;;3775   	{
;;;3776   	if(bps[i]._cnt<25)
003320  eb0100c1          ADD      r0,r1,r1,LSL #3
003324  eb001001          ADD      r0,r0,r1,LSL #4
003328  eb040080          ADD      r0,r4,r0,LSL #2
00332c  78c6              LDRB     r6,[r0,#3]
00332e  2e19              CMP      r6,#0x19
003330  d21c              BCS      |L1.13164|
;;;3777        	{
;;;3778        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
003332  7986              LDRB     r6,[r0,#6]
003334  79c7              LDRB     r7,[r0,#7]
003336  eb062607          ADD      r6,r6,r7,LSL #8
00333a  6246              STR      r6,[r0,#0x24]
;;;3779        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
00333c  7a06              LDRB     r6,[r0,#8]
00333e  7a47              LDRB     r7,[r0,#9]
003340  eb062607          ADD      r6,r6,r7,LSL #8
003344  6206              STR      r6,[r0,#0x20]
;;;3780        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
003346  7a86              LDRB     r6,[r0,#0xa]
003348  7ac7              LDRB     r7,[r0,#0xb]
00334a  eb062607          ADD      r6,r6,r7,LSL #8
00334e  61c6              STR      r6,[r0,#0x1c]
;;;3781        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003350  7b06              LDRB     r6,[r0,#0xc]
003352  6286              STR      r6,[r0,#0x28]
;;;3782        	bps[i]._adr_ee=bps[i]._buff[7];
003354  7b46              LDRB     r6,[r0,#0xd]
003356  f8806056          STRB     r6,[r0,#0x56]
;;;3783        	bps[i]._flags_tm=bps[i]._buff[8];
00335a  7b86              LDRB     r6,[r0,#0xe]
00335c  f8806042          STRB     r6,[r0,#0x42]
;;;3784   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003360  7c06              LDRB     r6,[r0,#0x10]
003362  7c47              LDRB     r7,[r0,#0x11]
003364  eb062607          ADD      r6,r6,r7,LSL #8
003368  6506              STR      r6,[r0,#0x50]
00336a  e006              B        |L1.13178|
                  |L1.13164|
;;;3785        	} 
;;;3786   	else 
;;;3787        	{
;;;3788        	bps[i]._Uii=0; 
00336c  61c3              STR      r3,[r0,#0x1c]
;;;3789        	bps[i]._Ii=0;
00336e  6243              STR      r3,[r0,#0x24]
;;;3790        	bps[i]._Uin=0;
003370  6203              STR      r3,[r0,#0x20]
;;;3791        	bps[i]._Ti=0;
003372  6283              STR      r3,[r0,#0x28]
;;;3792        	bps[i]._flags_tm=0; 
003374  f8803042          STRB     r3,[r0,#0x42]
;;;3793   	     bps[i]._rotor=0;    
003378  6503              STR      r3,[r0,#0x50]
                  |L1.13178|
00337a  f1010101          ADD      r1,r1,#1              ;3774
00337e  b2c9              UXTB     r1,r1                 ;3774
                  |L1.13184|
003380  4291              CMP      r1,r2                 ;3774
003382  dbcd              BLT      |L1.13088|
;;;3794        	}
;;;3795        
;;;3796        }
;;;3797   
;;;3798   load_I=0;
003384  4e70              LDR      r6,|L1.13640|
;;;3799   #ifdef TELECORE
;;;3800   
;;;3801   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3802   	{
;;;3803   	load_I-=lakb[i]._ch_curr/10;
;;;3804   	}*/
;;;3805   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3806   #elif UKU_TELECORE2017
;;;3807   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3808   #else
;;;3809   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003386  f9b51008          LDRSH    r1,[r5,#8]  ; bat
00338a  f04f000a          MOV      r0,#0xa
00338e  fb91f1f0          SDIV     r1,r1,r0
003392  f9b55058          LDRSH    r5,[r5,#0x58]  ; bat
003396  fb95f0f0          SDIV     r0,r5,r0
00339a  4408              ADD      r0,r0,r1
00339c  f1c00000          RSB      r0,r0,#0
0033a0  b207              SXTH     r7,r0
0033a2  8037              STRH     r7,[r6,#0]
;;;3810   #endif
;;;3811   Isumm=0;
0033a4  4d69              LDR      r5,|L1.13644|
0033a6  802b              STRH     r3,[r5,#0]
;;;3812   
;;;3813   for(i=0;i<NUMIST;i++)
0033a8  f04f0000          MOV      r0,#0
0033ac  e012              B        |L1.13268|
                  |L1.13230|
;;;3814        {
;;;3815        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0033ae  eb0001c0          ADD      r1,r0,r0,LSL #3
0033b2  eb011100          ADD      r1,r1,r0,LSL #4
0033b6  eb040181          ADD      r1,r4,r1,LSL #2
0033ba  f891c003          LDRB     r12,[r1,#3]
0033be  f1bc0f05          CMP      r12,#5
0033c2  d204              BCS      |L1.13262|
0033c4  6a49              LDR      r1,[r1,#0x24]
0033c6  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
0033ca  4461              ADD      r1,r1,r12
0033cc  8029              STRH     r1,[r5,#0]
                  |L1.13262|
0033ce  f1000001          ADD      r0,r0,#1              ;3813
0033d2  b2c0              UXTB     r0,r0                 ;3813
                  |L1.13268|
0033d4  4290              CMP      r0,r2                 ;3813
0033d6  dbea              BLT      |L1.13230|
;;;3816        }  
;;;3817        
;;;3818   load_I=load_I+Isumm;
0033d8  8828              LDRH     r0,[r5,#0]  ; Isumm
0033da  4438              ADD      r0,r0,r7
0033dc  b200              SXTH     r0,r0
0033de  8030              STRH     r0,[r6,#0]
;;;3819   if(load_I<0)load_I=0;
0033e0  2800              CMP      r0,#0
0033e2  da00              BGE      |L1.13286|
0033e4  8033              STRH     r3,[r6,#0]
                  |L1.13286|
;;;3820   
;;;3821   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3822   load_I=0;
0033e6  8033              STRH     r3,[r6,#0]
;;;3823   
;;;3824   Isumm=0;
0033e8  802b              STRH     r3,[r5,#0]
;;;3825   
;;;3826   for(i=0;i<NUMIST;i++)
0033ea  f04f0000          MOV      r0,#0
0033ee  e00f              B        |L1.13328|
                  |L1.13296|
;;;3827        {
;;;3828        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0033f0  eb0001c0          ADD      r1,r0,r0,LSL #3
0033f4  eb011100          ADD      r1,r1,r0,LSL #4
0033f8  eb040181          ADD      r1,r4,r1,LSL #2
0033fc  78cf              LDRB     r7,[r1,#3]
0033fe  2f05              CMP      r7,#5
003400  d203              BCS      |L1.13322|
003402  6a49              LDR      r1,[r1,#0x24]
003404  882f              LDRH     r7,[r5,#0]  ; Isumm
003406  4439              ADD      r1,r1,r7
003408  8029              STRH     r1,[r5,#0]
                  |L1.13322|
00340a  f1000001          ADD      r0,r0,#1              ;3826
00340e  b2c0              UXTB     r0,r0                 ;3826
                  |L1.13328|
003410  4290              CMP      r0,r2                 ;3826
003412  dbed              BLT      |L1.13296|
;;;3829        }  
;;;3830        
;;;3831   load_I=load_I+Isumm;
003414  8829              LDRH     r1,[r5,#0]  ; Isumm
003416  eb030001          ADD      r0,r3,r1
00341a  b200              SXTH     r0,r0
00341c  8030              STRH     r0,[r6,#0]
;;;3832   if(load_I<0)load_I=0;
00341e  2800              CMP      r0,#0
003420  da00              BGE      |L1.13348|
003422  8033              STRH     r3,[r6,#0]
                  |L1.13348|
;;;3833   
;;;3834   #endif
;;;3835   #ifdef IPS_SGEP_GAZPROM
;;;3836   load_I=Isumm;
;;;3837   #endif
;;;3838   
;;;3839   
;;;3840   #ifdef UKU_GLONASS
;;;3841   inv[0]._Uio=6;
;;;3842   if (NUMINV)
;;;3843   	{
;;;3844   	for(i=0;i<NUMINV;i++)
;;;3845   		{
;;;3846   		if(bps[i+first_inv_slot]._cnt<25)
;;;3847        		{
;;;3848        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3849        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3850        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3851        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3852        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3853   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3854   			inv[i]._cnt=0;    
;;;3855        		} 
;;;3856   		else 
;;;3857        		{
;;;3858        		inv[i]._Uio=0; 
;;;3859        		inv[i]._Ii=0;
;;;3860        		inv[i]._Uin=0;
;;;3861        		inv[i]._Ti=0;
;;;3862        		inv[i]._flags_tm=0; 
;;;3863   //	     	inv[i]._rotor0;
;;;3864   			inv[i]._cnt=25;    
;;;3865        		}
;;;3866        	}
;;;3867      	}
;;;3868   #endif
;;;3869   
;;;3870   #ifndef UKU_GLONASS
;;;3871   if (NUMINV)
003424  484a              LDR      r0,|L1.13648|
003426  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
00342a  2d00              CMP      r5,#0
00342c  d05a              BEQ      |L1.13540|
;;;3872   	{
;;;3873   	for(i=0;i<NUMINV;i++)
00342e  f04f0200          MOV      r2,#0
;;;3874   		{
;;;3875   		if(bps[i+20]._cnt<25)
;;;3876        		{
;;;3877        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
003432  4e48              LDR      r6,|L1.13652|
003434  e09b              B        |L1.13678|
                  |L1.13366|
003436  f1020014          ADD      r0,r2,#0x14           ;3875
00343a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3875
00343e  eb011000          ADD      r0,r1,r0,LSL #4       ;3875
003442  eb040080          ADD      r0,r4,r0,LSL #2       ;3875
003446  78c1              LDRB     r1,[r0,#3]            ;3875
003448  2919              CMP      r1,#0x19              ;3875
00344a  d239              BCS      |L1.13504|
00344c  7981              LDRB     r1,[r0,#6]
00344e  79c7              LDRB     r7,[r0,#7]
003450  eb012707          ADD      r7,r1,r7,LSL #8
003454  eb020142          ADD      r1,r2,r2,LSL #1
003458  eb061141          ADD      r1,r6,r1,LSL #5
00345c  61cf              STR      r7,[r1,#0x1c]
;;;3878        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
00345e  7a07              LDRB     r7,[r0,#8]
003460  f890c009          LDRB     r12,[r0,#9]
003464  eb07270c          ADD      r7,r7,r12,LSL #8
003468  62cf              STR      r7,[r1,#0x2c]
;;;3879        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
00346a  7a87              LDRB     r7,[r0,#0xa]
00346c  f890c00b          LDRB     r12,[r0,#0xb]
003470  eb07270c          ADD      r7,r7,r12,LSL #8
003474  618f              STR      r7,[r1,#0x18]
;;;3880        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
003476  7b07              LDRB     r7,[r0,#0xc]
003478  620f              STR      r7,[r1,#0x20]
;;;3881        		inv[i]._flags_tm=bps[i+20]._buff[7];
00347a  7b47              LDRB     r7,[r0,#0xd]
00347c  f8817046          STRB     r7,[r1,#0x46]
;;;3882        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003480  7b87              LDRB     r7,[r0,#0xe]
003482  f890c00f          LDRB     r12,[r0,#0xf]
003486  eb07270c          ADD      r7,r7,r12,LSL #8
00348a  628f              STR      r7,[r1,#0x28]
;;;3883        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00348c  7c07              LDRB     r7,[r0,#0x10]
00348e  f890c011          LDRB     r12,[r0,#0x11]
003492  eb07270c          ADD      r7,r7,r12,LSL #8
003496  624f              STR      r7,[r1,#0x24]
;;;3884   			inv[i]._cnt=0;
003498  708b              STRB     r3,[r1,#2]
;;;3885   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00349a  7c87              LDRB     r7,[r0,#0x12]
00349c  f8817059          STRB     r7,[r1,#0x59]
;;;3886   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0034a0  7cc7              LDRB     r7,[r0,#0x13]
0034a2  f881705a          STRB     r7,[r1,#0x5a]
;;;3887   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0034a6  7d07              LDRB     r7,[r0,#0x14]
0034a8  f8817058          STRB     r7,[r1,#0x58]
;;;3888   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0034ac  7d47              LDRB     r7,[r0,#0x15]
0034ae  f881705b          STRB     r7,[r1,#0x5b]
;;;3889   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0034b2  7d87              LDRB     r7,[r0,#0x16]
0034b4  f881705c          STRB     r7,[r1,#0x5c]
;;;3890   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0034b8  7dc0              LDRB     r0,[r0,#0x17]
0034ba  f881005d          STRB     r0,[r1,#0x5d]
0034be  e053              B        |L1.13672|
                  |L1.13504|
;;;3891        		} 
;;;3892   		else 
;;;3893        		{
;;;3894         		inv[i]._Ii=0;
0034c0  eb020042          ADD      r0,r2,r2,LSL #1
0034c4  eb061040          ADD      r0,r6,r0,LSL #5
0034c8  61c3              STR      r3,[r0,#0x1c]
;;;3895   			inv[i]._Pio=0;
0034ca  62c3              STR      r3,[r0,#0x2c]
;;;3896   			inv[i]._Uio=0;
0034cc  6183              STR      r3,[r0,#0x18]
;;;3897        		inv[i]._Ti=0;
0034ce  6203              STR      r3,[r0,#0x20]
;;;3898        		inv[i]._flags_tm=0; 
0034d0  f8803046          STRB     r3,[r0,#0x46]
;;;3899        		inv[i]._Uil=0;
0034d4  6243              STR      r3,[r0,#0x24]
;;;3900        		inv[i]._Uin=0;
0034d6  6283              STR      r3,[r0,#0x28]
;;;3901   			inv[i]._cnt=25; 
0034d8  f04f0119          MOV      r1,#0x19
0034dc  7081              STRB     r1,[r0,#2]
;;;3902   			inv[i]._Uoutmin=0; 
0034de  f8803059          STRB     r3,[r0,#0x59]
;;;3903   			inv[i]._Uoutmax=0; 
0034e2  e039              B        |L1.13656|
                  |L1.13540|
0034e4  e046              B        |L1.13684|
0034e6  0000              DCW      0x0000
                  |L1.13544|
                          DCD      t_ext
                  |L1.13548|
                          DCD      Ktext
                  |L1.13552|
                          DCD      Ib_ips_termokompensat
                  |L1.13556|
                          DCD      ibat_metr_buff_
                  |L1.13560|
                          DCD      bIBAT_SMKLBR
                  |L1.13564|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13568|
                          DCD      Kibat1
                  |L1.13572|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13576|
                          DCD      bat
                  |L1.13580|
                          DCD      adc_buff_ext_
                  |L1.13584|
                          DCD      Kunet_ext
                  |L1.13588|
                          DCD      Uvv
                  |L1.13592|
                          DCD      Uvv0
                  |L1.13596|
                          DCD      net_U
                  |L1.13600|
                          DCD      eb2_data_short
                  |L1.13604|
                          DCD      Kvv_eb2
                  |L1.13608|
                          DCD      Uvv_eb2
                  |L1.13612|
                          DCD      Kpes_eb2
                  |L1.13616|
                          DCD      Upes_eb2
                  |L1.13620|
                          DCD      ibt
                  |L1.13624|
                          DCD      t_box
                  |L1.13628|
                          DCD      t_ext_can_nd
                  |L1.13632|
                          DCD      t_ext_can
                  |L1.13636|
                          DCD      BAT_IS_ON
                  |L1.13640|
                          DCD      load_I
                  |L1.13644|
                          DCD      Isumm
                  |L1.13648|
                          DCD      NUMINV
                  |L1.13652|
                          DCD      inv
                  |L1.13656|
003558  f880305a          STRB     r3,[r0,#0x5a]
;;;3904   			inv[i]._Pnom=0; 
00355c  f8803058          STRB     r3,[r0,#0x58]
;;;3905   			inv[i]._net_contr_en=0;
003560  f880305b          STRB     r3,[r0,#0x5b]
;;;3906   			inv[i]._pwm_en=0;   
003564  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13672|
003568  f1020201          ADD      r2,r2,#1              ;3873
00356c  b2d2              UXTB     r2,r2                 ;3873
                  |L1.13678|
00356e  42aa              CMP      r2,r5                 ;3873
003570  f6ffaf61          BLT      |L1.13366|
                  |L1.13684|
;;;3907   			   
;;;3908        		}
;;;3909        	}
;;;3910      	}
;;;3911   #endif
;;;3912   
;;;3913   #ifdef GLADKOV
;;;3914   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3915   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3916   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3917   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3918   inv[0]._flags_tm=bps[4]._buff[7];
;;;3919   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3920   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3921   inv[0]._cnt=0;    
;;;3922   
;;;3923   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3924   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3925   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3926   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3927   inv[1]._flags_tm=bps[21]._buff[7];
;;;3928   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3929   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3930   inv[1]._cnt=0;    
;;;3931   #endif
;;;3932   
;;;3933   /*
;;;3934   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3935   	{
;;;3936   	lakb[0]._battCommState=0;
;;;3937   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3938   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3939   	
;;;3940   	if(lakb[0]._battCommState==0)
;;;3941   		{	
;;;3942   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3943   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3944   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3945   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3946   		}
;;;3947   	}
;;;3948   */
;;;3949   
;;;3950   #ifdef UKU_FSO
;;;3951   
;;;3952   	//if(BAT_TYPE==2)
;;;3953   		//{
;;;3954   		lakb[numOfPacks_]._ch_curr=((ascii2halFhex(liBatteryInBuff[105]))<<12)+
;;;3955   					 		((ascii2halFhex(liBatteryInBuff[106]))<<8)+
;;;3956   							((ascii2halFhex(liBatteryInBuff[107]))<<4)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[108])));
;;;3958   		
;;;3959   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3960   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3961   	
;;;3962   		lakb[numOfPacks_]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[109]))<<12)+
;;;3963   							((ascii2halFhex(liBatteryInBuff[110]))<<8)+
;;;3964   							((ascii2halFhex(liBatteryInBuff[111]))<<4)+
;;;3965   							((ascii2halFhex(liBatteryInBuff[112]))))/10;
;;;3966   
;;;3967   
;;;3968   		lakb[numOfPacks_]._cell_temp_1= (signed char)((((ascii2halFhex(liBatteryInBuff[81]))<<12)+
;;;3969   							((ascii2halFhex(liBatteryInBuff[82]))<<8)+
;;;3970   							((ascii2halFhex(liBatteryInBuff[83]))<<4)+
;;;3971   							((ascii2halFhex(liBatteryInBuff[84]))))/100);
;;;3972   		lakb[numOfPacks_]._cell_temp_2= (signed char)((((ascii2halFhex(liBatteryInBuff[85]))<<12)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[86]))<<8)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[87]))<<4)+
;;;3975   							((ascii2halFhex(liBatteryInBuff[88]))))/100);
;;;3976   		lakb[numOfPacks_]._cell_temp_3= (signed char)((((ascii2halFhex(liBatteryInBuff[89]))<<12)+
;;;3977   							((ascii2halFhex(liBatteryInBuff[90]))<<8)+
;;;3978   							((ascii2halFhex(liBatteryInBuff[91]))<<4)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[92]))))/100);
;;;3980   		lakb[numOfPacks_]._cell_temp_4= (signed char)((((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3981   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3982   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3983   							((ascii2halFhex(liBatteryInBuff[96]))))/100);
;;;3984   		lakb[numOfPacks_]._cell_temp_ambient= (signed char)((((ascii2halFhex(liBatteryInBuff[97]))<<12)+
;;;3985   							((ascii2halFhex(liBatteryInBuff[98]))<<8)+
;;;3986   							((ascii2halFhex(liBatteryInBuff[99]))<<4)+
;;;3987   							((ascii2halFhex(liBatteryInBuff[100]))))/100);
;;;3988   		lakb[numOfPacks_]._cell_temp_power= (signed char)((((ascii2halFhex(liBatteryInBuff[101]))<<12)+
;;;3989   							((ascii2halFhex(liBatteryInBuff[102]))<<8)+
;;;3990   							((ascii2halFhex(liBatteryInBuff[103]))<<4)+
;;;3991   							((ascii2halFhex(liBatteryInBuff[104]))))/100);
;;;3992   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_ambient,'[',0);
;;;3993   			//int2lcd_mmm(lakb[sub_ind1]._cell_temp_power,']',0);
;;;3994   	
;;;3995   /*		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3996   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3997   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3998   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;	*/
;;;3999   	
;;;4000   		lakb[numOfPacks_]._s_o_c=		(unsigned short)((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4001   							((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4002   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4003   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4004   	
;;;4005   		lakb[numOfPacks_]._s_o_h=		(unsigned short)((ascii2halFhex(liBatteryInBuff[119]))<<12)+
;;;4006   							((ascii2halFhex(liBatteryInBuff[120]))<<8)+
;;;4007   							((ascii2halFhex(liBatteryInBuff[121]))<<4)+
;;;4008   							((ascii2halFhex(liBatteryInBuff[122])));
;;;4009   
;;;4010   		if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;4011   
;;;4012   		temp_SL=((signed long)lakb[numOfPacks_]._s_o_c)*100L;
;;;4013   		temp_SL/=(signed long)lakb[numOfPacks_]._s_o_h;
;;;4014   		lakb[numOfPacks_]._s_o_c_percent=(signed short)temp_SL;
;;;4015   			
;;;4016   
;;;4017   		lakb[numOfPacks_]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4018   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4019   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4020   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4021   	
;;;4022   		//lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4023   
;;;4024   		if(sTARKSilentCnt[numOfPacks_]==10)
;;;4025   			{
;;;4026   		lakb[numOfPacks_]._ch_curr=0;
;;;4027   		lakb[numOfPacks_]._tot_bat_volt=0;
;;;4028   		lakb[numOfPacks_]._cell_temp_1=0;
;;;4029   		lakb[numOfPacks_]._cell_temp_2=0;
;;;4030   		lakb[numOfPacks_]._cell_temp_3=0;
;;;4031   		lakb[numOfPacks_]._cell_temp_4=0;
;;;4032   		lakb[numOfPacks_]._cell_temp_ambient=0;
;;;4033   		lakb[numOfPacks_]._cell_temp_power=0;
;;;4034   		lakb[numOfPacks_]._s_o_c=0;
;;;4035   		lakb[numOfPacks_]._s_o_h=0;
;;;4036   		if(lakb[numOfPacks_]._s_o_h==0)lakb[numOfPacks_]._s_o_h=1;
;;;4037   		lakb[numOfPacks_]._s_o_c_percent=0;
;;;4038   		lakb[numOfPacks_]._rat_cap=0;
;;;4039   			}
;;;4040   
;;;4041   
;;;4042   //Внешний датчик температуры 
;;;4043   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
;;;4044   else ND_EXT[0]=1;
;;;4045   temp_SL=(signed long)adc_buff_[6];
;;;4046   temp_SL*=Ktext[0];
;;;4047   temp_SL/=20000L;
;;;4048   temp_SL-=273L;
;;;4049   t_ext[0]=(signed short)temp_SL;
;;;4050   
;;;4051   
;;;4052   	
;;;4053   #endif //UKU_FSO	
;;;4054   
;;;4055   
;;;4056   
;;;4057   #ifdef UKU_TELECORE2015
;;;4058   
;;;4059   	if(BAT_TYPE==2)
;;;4060   		{
;;;4061   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;4062   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;4063   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;4064   							((ascii2halFhex(liBatteryInBuff[116])));
;;;4065   		
;;;4066   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;4067   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;4068   	
;;;4069   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;4070   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;4071   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;4072   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;4073   	
;;;4074   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;4075   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;4076   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;4077   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;4078   	
;;;4079   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;4080   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;4081   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;4082   							((ascii2halFhex(liBatteryInBuff[124])));
;;;4083   	
;;;4084   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;4085   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;4086   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;4087   							((ascii2halFhex(liBatteryInBuff[130])));
;;;4088   	
;;;4089   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;4090   	
;;;4091   	
;;;4092   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4093   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4094   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4095   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;4096   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;4097   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4098   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;4099   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4100   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;4101   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;4102   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4103   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;4104   	
;;;4105   		if(lakb[i]._rat_cap==0)
;;;4106   			{
;;;4107   			if(lakb[i]._isOnCnt)
;;;4108   				{
;;;4109   				lakb[i]._isOnCnt--;
;;;4110   				if(lakb[i]._isOnCnt==0)
;;;4111   					{
;;;4112   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4113   					}
;;;4114   				}
;;;4115   			}
;;;4116   		else 
;;;4117   			{
;;;4118   			if(lakb[i]._isOnCnt<50)
;;;4119   				{
;;;4120   				lakb[i]._isOnCnt++;
;;;4121   				if(lakb[i]._isOnCnt==50)
;;;4122   					{
;;;4123   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4124   					}
;;;4125   				}
;;;4126   			}
;;;4127   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;4128   		}
;;;4129   	else if(BAT_TYPE==3)
;;;4130   		{
;;;4131   		//short numOfPacks;
;;;4132   		//short numOfCells, numOfTemperCells, baseOfData;
;;;4133   		
;;;4134   		#ifndef UKU_TELECORE2016
;;;4135   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;4136   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;4137   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;4138   		if(numOfPacks)numOfPacks-=1;
;;;4139   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;4140   		plazma_numOfCells=numOfCells;
;;;4141   		plazma_numOfTemperCells=numOfTemperCells;
;;;4142   		plazma_numOfPacks=numOfPacks;
;;;4143   
;;;4144   
;;;4145   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;4146   
;;;4147   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;4148   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;4149   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;4150   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;4151   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;4152   							);	  
;;;4153   
;;;4154   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;4155   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;4156   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;4157   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;4158   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;4159   							)/10;
;;;4160   
;;;4161   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;4162   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;4163   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;4164   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;4165   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;4166   							)-2730;
;;;4167   
;;;4168   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;4169   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;4170   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;4171   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;4172   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;4173   							)/10;
;;;4174   
;;;4175   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;4176   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4177   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4178   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4179   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4180   							)/10;
;;;4181   		#endif
;;;4182   		
;;;4183   		#ifdef UKU_TELECORE2016
;;;4184   		{
;;;4185   		char i;
;;;4186   		
;;;4187   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4188   			{
;;;4189   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4190   			}
;;;4191   		}
;;;4192   		#endif
;;;4193   		
;;;4194   										  
;;;4195   		}
;;;4196   	
;;;4197   if(sacredSunSilentCnt<3) 
;;;4198   	{
;;;4199       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4200       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4201      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4202   	}
;;;4203   else 
;;;4204   	{
;;;4205       	//bat[0]._Ub=0;
;;;4206       	//bat[0]._Tb=0;
;;;4207      	//bat[0]._Ib=0;
;;;4208   	}
;;;4209   
;;;4210   if(BAT_TYPE==1)
;;;4211   	{
;;;4212   	char i;
;;;4213   	for(i=0;i<1;i++)
;;;4214   		{
;;;4215   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4216   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4217   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4218   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4219   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4220   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4221   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4222   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4223   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4224   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4225   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4226   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4227   		lakb[i]._flags1= lakb_damp[i][34];
;;;4228   		lakb[i]._flags2= lakb_damp[i][35];
;;;4229   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4230   
;;;4231   /*		if(lakb[i]._rat_cap==0)
;;;4232   			{
;;;4233   			if(lakb[i]._isOnCnt)
;;;4234   				{
;;;4235   				lakb[i]._isOnCnt--;
;;;4236   				if(lakb[i]._isOnCnt==0)
;;;4237   					{
;;;4238   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4239   					}
;;;4240   				}
;;;4241   			}
;;;4242   		else 
;;;4243   			{
;;;4244   			if(lakb[i]._isOnCnt<50)
;;;4245   				{
;;;4246   				lakb[i]._isOnCnt++;
;;;4247   				if(lakb[i]._isOnCnt==50)
;;;4248   					{
;;;4249   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4250   					}
;;;4251   				}
;;;4252   			} */
;;;4253   		gran(&lakb[i]._isOnCnt,0,50);
;;;4254   	 	}
;;;4255   
;;;4256   	if(lakb_damp[0][41]==100)
;;;4257   		{
;;;4258   		li_bat._485Error=1;
;;;4259   		}
;;;4260   	if(lakb_damp[0][41]==0)
;;;4261   		{
;;;4262   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4263   		li_bat._485Error=0;
;;;4264   		}
;;;4265   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4266   
;;;4267   
;;;4268   	}
;;;4269   
;;;4270   
;;;4271   #endif
;;;4272   
;;;4273   		#ifdef UKU_TELECORE2017
;;;4274   		{
;;;4275   		char i;
;;;4276   		
;;;4277   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4278   			{
;;;4279   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4280   			}
;;;4281   		}
;;;4282   		#endif
;;;4283   #ifdef UKU_TELECORE2015
;;;4284   //вычисление параметров работы батареи
;;;4285   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4286   li_bat._batStat=bsOK;
;;;4287   if(BAT_TYPE==1) //COSLIGHT
;;;4288   	{
;;;4289   	if(li_bat._batStat==bsOK)
;;;4290   		{
;;;4291   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4292   
;;;4293   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4294   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4295   	
;;;4296   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4297   		li_bat._soc=lakb[0]._s_o_c;
;;;4298   		li_bat._soh=lakb[0]._s_o_h;
;;;4299   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4300   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4301   		li_bat._rbt=lakb[0]._r_b_t;
;;;4302   		}
;;;4303   	else 
;;;4304   		{
;;;4305   		li_bat._Ub=bat[0]._Ub;
;;;4306   		li_bat._Ib=bat[0]._Ib/10;
;;;4307   		li_bat._Tb=bat[0]._Tb;
;;;4308   		}
;;;4309   
;;;4310   	if((li_bat._485Error)||(li_bat._canError))
;;;4311   		{
;;;4312   		li_bat._batStat=bsOFF;
;;;4313   		}
;;;4314   	else li_bat._batStat=bsOK;
;;;4315   	}
;;;4316   else if(BAT_TYPE==2) //SACRED SUN
;;;4317   	{
;;;4318   	}
;;;4319   else if(BAT_TYPE==3) //ZTT
;;;4320   	{
;;;4321   	if(li_bat._batStat==bsOK)
;;;4322   		{
;;;4323   
;;;4324   		}
;;;4325   	}
;;;4326   #endif
;;;4327   
;;;4328   
;;;4329   /*
;;;4330   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4331   	{
;;;4332   
;;;4333   
;;;4334   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4335   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4336   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4337   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4338   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4339   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4340   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4341   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4342   
;;;4343   	tempSS=0;
;;;4344   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4345   
;;;4346   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4347   
;;;4348   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4349   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4350   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4351   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4352   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4353   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4354   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4355   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4356   
;;;4357   	tempSS=0;
;;;4358   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4359   
;;;4360   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4361   
;;;4362   
;;;4363   	}*/
;;;4364   }
003574  e8bd9fff          POP      {r0-r12,pc}
;;;4365   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4425   //-----------------------------------------------
;;;4426   void mnemo_hndl(void)
003578  4afb              LDR      r2,|L1.14696|
;;;4427   {
;;;4428   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4429   	{
;;;4430   	if(mnemo_cnt)mnemo_cnt--;
00357a  49fc              LDR      r1,|L1.14700|
00357c  7810              LDRB     r0,[r2,#0]            ;4428  ; a_ind
00357e  2804              CMP      r0,#4                 ;4428
003580  d001              BEQ      |L1.13702|
003582  2801              CMP      r0,#1                 ;4428
003584  d105              BNE      |L1.13714|
                  |L1.13702|
003586  7850              LDRB     r0,[r2,#1]            ;4428  ; a_ind
003588  b918              CBNZ     r0,|L1.13714|
00358a  48f9              LDR      r0,|L1.14704|
00358c  7800              LDRB     r0,[r0,#0]            ;4428  ; MNEMO_ON
00358e  2855              CMP      r0,#0x55              ;4428
003590  d003              BEQ      |L1.13722|
                  |L1.13714|
;;;4431   	}
;;;4432   else mnemo_cnt=MNEMO_TIME;
003592  48f8              LDR      r0,|L1.14708|
003594  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003596  7008              STRB     r0,[r1,#0]
                  |L1.13720|
;;;4433   }
003598  4770              BX       lr
                  |L1.13722|
00359a  7808              LDRB     r0,[r1,#0]            ;4430  ; mnemo_cnt
00359c  2800              CMP      r0,#0                 ;4430
00359e  d0fb              BEQ      |L1.13720|
0035a0  f1a00001          SUB      r0,r0,#1              ;4430
0035a4  7008              STRB     r0,[r1,#0]            ;4430
0035a6  4770              BX       lr
;;;4434   
                          ENDP

                  apv_start PROC
;;;4435   //-----------------------------------------------
;;;4436   void apv_start(char in)
0035a8  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4437   {
;;;4438   if(	(bps[in]._apv_timer_1_lev==0)&&
0035ac  eb011100          ADD      r1,r1,r0,LSL #4
0035b0  48f1              LDR      r0,|L1.14712|
0035b2  eb000081          ADD      r0,r0,r1,LSL #2
0035b6  f890105e          LDRB     r1,[r0,#0x5e]
0035ba  2900              CMP      r1,#0
0035bc  d115              BNE      |L1.13802|
;;;4439   	(bps[in]._apv_cnt_1_lev==0)&&
0035be  f890105f          LDRB     r1,[r0,#0x5f]
0035c2  2900              CMP      r1,#0
0035c4  d111              BNE      |L1.13802|
;;;4440   	(bps[in]._apv_timer_2_lev==0) )
0035c6  f8b01060          LDRH     r1,[r0,#0x60]
0035ca  2900              CMP      r1,#0
0035cc  d10d              BNE      |L1.13802|
;;;4441   		{
;;;4442    		bps[in]._apv_timer_1_lev=60;
0035ce  f04f013c          MOV      r1,#0x3c
0035d2  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4443   		bps[in]._apv_cnt_1_lev=3;
0035d6  f04f0103          MOV      r1,#3
0035da  7041              STRB     r1,[r0,#1]
;;;4444   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
0035dc  49e7              LDR      r1,|L1.14716|
0035de  f44f6261          MOV      r2,#0xe10
0035e2  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
0035e4  fb01f102          MUL      r1,r1,r2
0035e8  8041              STRH     r1,[r0,#2]
                  |L1.13802|
;;;4445   		}
;;;4446   }
0035ea  4770              BX       lr
;;;4447   
                          ENDP

                  apv_stop PROC
;;;4448   //-----------------------------------------------
;;;4449   void apv_stop(char in)
0035ec  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4450   {
;;;4451   bps[in]._apv_timer_1_lev=0;
0035f0  eb021200          ADD      r2,r2,r0,LSL #4
0035f4  48e0              LDR      r0,|L1.14712|
0035f6  f04f0100          MOV      r1,#0
0035fa  eb000082          ADD      r0,r0,r2,LSL #2
0035fe  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4452   bps[in]._apv_cnt_1_lev=0;
003602  7041              STRB     r1,[r0,#1]
;;;4453   bps[in]._apv_timer_2_lev=0;
003604  8041              STRH     r1,[r0,#2]
;;;4454   }
003606  4770              BX       lr
;;;4455   
                          ENDP

                  apv_drv PROC
;;;4456   //-----------------------------------------------
;;;4457   void apv_drv(void)		//1 Гц
003608  e92d43f0          PUSH     {r4-r9,lr}
;;;4458   {
;;;4459   for(i=0;i<NUMIST;i++)
00360c  4edc              LDR      r6,|L1.14720|
00360e  f04f0300          MOV      r3,#0
003612  75f3              STRB     r3,[r6,#0x17]
;;;4460   	{
;;;4461   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4462   		{
;;;4463   		bps[i]._apv_timer_1_lev=0;
;;;4464   		bps[i]._apv_cnt_1_lev=0;
;;;4465   		bps[i]._apv_timer_2_lev=0;
;;;4466   		}
;;;4467   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
003614  4cdb              LDR      r4,|L1.14724|
;;;4468   		{
;;;4469   		bps[i]._apv_timer_2_lev=0;
;;;4470   		}
;;;4471   
;;;4472   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4473   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4474   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4475   			{
;;;4476   			if(bps[i]._state==bsWRK)
;;;4477   				{
;;;4478   				if(bps[i]._apv_succes_timer<60)
;;;4479   					{
;;;4480   					bps[i]._apv_succes_timer++;
;;;4481   					if(bps[i]._apv_succes_timer>=60)
;;;4482   						{
;;;4483   						apv_stop(i);
;;;4484   						}
;;;4485   					}
;;;4486   				}
;;;4487   			else bps[i]._apv_succes_timer=0;
;;;4488   			}
;;;4489   
;;;4490   	if(bps[i]._apv_timer_1_lev)
;;;4491   		{
;;;4492   		bps[i]._apv_timer_2_lev=0;
;;;4493   		bps[i]._apv_timer_1_lev--;
;;;4494   		if(bps[i]._apv_timer_1_lev==0)
;;;4495   			{
;;;4496   			if(bps[i]._apv_cnt_1_lev)
;;;4497   				{
;;;4498   				bps[i]._apv_cnt_1_lev--;
;;;4499   				bps[i]._apv_timer_1_lev=60;
003616  f04f073c          MOV      r7,#0x3c
;;;4500   				bps[i]._apv_reset_av_timer=2;
00361a  f04f0802          MOV      r8,#2
00361e  4dd6              LDR      r5,|L1.14712|
003620  f8df9364          LDR      r9,|L1.14728|
003624  e079              B        |L1.14106|
                  |L1.13862|
003626  49d9              LDR      r1,|L1.14732|
003628  7809              LDRB     r1,[r1,#0]            ;4461  ; APV_ON1
00362a  b949              CBNZ     r1,|L1.13888|
00362c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4463
003630  eb011100          ADD      r1,r1,r0,LSL #4       ;4463
003634  eb050181          ADD      r1,r5,r1,LSL #2       ;4463
003638  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4463
00363c  704b              STRB     r3,[r1,#1]            ;4464
00363e  804b              STRH     r3,[r1,#2]            ;4465
                  |L1.13888|
003640  7821              LDRB     r1,[r4,#0]            ;4467  ; APV_ON2
003642  b939              CBNZ     r1,|L1.13908|
003644  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4469
003648  eb011100          ADD      r1,r1,r0,LSL #4       ;4469
00364c  eb050181          ADD      r1,r5,r1,LSL #2       ;4469
003650  f8a13060          STRH     r3,[r1,#0x60]         ;4469
                  |L1.13908|
003654  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4472
003658  eb011100          ADD      r1,r1,r0,LSL #4       ;4472
00365c  eb050181          ADD      r1,r5,r1,LSL #2       ;4472
003660  f891205e          LDRB     r2,[r1,#0x5e]         ;4472
003664  b92a              CBNZ     r2,|L1.13938|
003666  f891205f          LDRB     r2,[r1,#0x5f]         ;4473
00366a  b912              CBNZ     r2,|L1.13938|
00366c  f8b12060          LDRH     r2,[r1,#0x60]         ;4474
003670  b122              CBZ      r2,|L1.13948|
                  |L1.13938|
003672  788a              LDRB     r2,[r1,#2]            ;4476
003674  2a01              CMP      r2,#1                 ;4476
003676  d014              BEQ      |L1.13986|
003678  f8813063          STRB     r3,[r1,#0x63]         ;4487
                  |L1.13948|
00367c  7df1              LDRB     r1,[r6,#0x17]         ;4490  ; i
00367e  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4490
003682  eb001001          ADD      r0,r0,r1,LSL #4       ;4490
003686  eb050080          ADD      r0,r5,r0,LSL #2       ;4490
00368a  f890205e          LDRB     r2,[r0,#0x5e]         ;4490
00368e  b30a              CBZ      r2,|L1.14036|
003690  f8a03060          STRH     r3,[r0,#0x60]         ;4492
003694  f1a20201          SUB      r2,r2,#1              ;4493
003698  b2d2              UXTB     r2,r2                 ;4493
00369a  f880205e          STRB     r2,[r0,#0x5e]         ;4493
00369e  b172              CBZ      r2,|L1.14014|
0036a0  e024              B        |L1.14060|
                  |L1.13986|
0036a2  f8912063          LDRB     r2,[r1,#0x63]         ;4478
0036a6  2a3c              CMP      r2,#0x3c              ;4478
0036a8  d2e8              BCS      |L1.13948|
0036aa  f1020201          ADD      r2,r2,#1              ;4480
0036ae  b2d2              UXTB     r2,r2                 ;4480
0036b0  f8812063          STRB     r2,[r1,#0x63]         ;4480
0036b4  2a3c              CMP      r2,#0x3c              ;4481
0036b6  d3e1              BCC      |L1.13948|
0036b8  f7fffffe          BL       apv_stop
0036bc  e7de              B        |L1.13948|
                  |L1.14014|
0036be  f890205f          LDRB     r2,[r0,#0x5f]         ;4496
0036c2  b142              CBZ      r2,|L1.14038|
0036c4  f1a20201          SUB      r2,r2,#1              ;4498
0036c8  f880205f          STRB     r2,[r0,#0x5f]         ;4498
0036cc  f880705e          STRB     r7,[r0,#0x5e]         ;4499
0036d0  f8808062          STRB     r8,[r0,#0x62]
                  |L1.14036|
0036d4  e00a              B        |L1.14060|
                  |L1.14038|
;;;4501   				}
;;;4502   			else
;;;4503   				{
;;;4504   				if(APV_ON2==apvON)
0036d6  7822              LDRB     r2,[r4,#0]  ; APV_ON2
0036d8  2a01              CMP      r2,#1
0036da  d107              BNE      |L1.14060|
;;;4505   					{
;;;4506   					bps[i]._apv_timer_1_lev=0;
;;;4507   					bps[i]._apv_cnt_1_lev=0;
;;;4508   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
0036dc  4aa7              LDR      r2,|L1.14716|
0036de  f44f6c61          MOV      r12,#0xe10
0036e2  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
0036e4  fb02f20c          MUL      r2,r2,r12
0036e8  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.14060|
;;;4509   					}
;;;4510   				}
;;;4511   			
;;;4512   			}
;;;4513   		}
;;;4514   	if(bps[i]._apv_timer_2_lev)
0036ec  f8b02060          LDRH     r2,[r0,#0x60]
0036f0  b14a              CBZ      r2,|L1.14086|
;;;4515   		{
;;;4516   		bps[i]._apv_timer_2_lev--;
0036f2  f1a20201          SUB      r2,r2,#1
0036f6  b292              UXTH     r2,r2
0036f8  f8a02060          STRH     r2,[r0,#0x60]
;;;4517   		if(bps[i]._apv_timer_2_lev==0)
0036fc  b91a              CBNZ     r2,|L1.14086|
;;;4518   			{
;;;4519   			bps[i]._apv_cnt_1_lev=2;
0036fe  f880805f          STRB     r8,[r0,#0x5f]
;;;4520   			bps[i]._apv_timer_1_lev=60;
003702  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.14086|
;;;4521   			}
;;;4522   		}
;;;4523   
;;;4524   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
003706  f8902062          LDRB     r2,[r0,#0x62]
00370a  b11a              CBZ      r2,|L1.14100|
00370c  f1a20201          SUB      r2,r2,#1
003710  f8802062          STRB     r2,[r0,#0x62]
                  |L1.14100|
003714  f1010101          ADD      r1,r1,#1              ;4459
003718  75f1              STRB     r1,[r6,#0x17]         ;4459
                  |L1.14106|
00371a  7df0              LDRB     r0,[r6,#0x17]         ;4459  ; i
00371c  f9b91000          LDRSH    r1,[r9,#0]            ;4459  ; NUMIST
003720  4288              CMP      r0,r1                 ;4459
003722  db80              BLT      |L1.13862|
;;;4525   	} 
;;;4526   /*char i;
;;;4527   for(i=0;i<2;i++) 
;;;4528   	{
;;;4529   	if(apv_cnt_sec[i])
;;;4530   		{
;;;4531   		apv_cnt_sec[i]--;
;;;4532   		if(apv_cnt_sec[i]==0)
;;;4533   			{
;;;4534   			cnt_av_umax[i]=0;
;;;4535   			cnt_av_umin[i]=0;
;;;4536   			reset_apv_cnt[i]=600;
;;;4537   			}
;;;4538   		}
;;;4539   	
;;;4540   	if(reset_apv_cnt[i])
;;;4541   		{
;;;4542   		reset_apv_cnt[i]--;
;;;4543   		if(reset_apv_cnt[i]==0)
;;;4544   			{
;;;4545   			apv_cnt[i]=0;
;;;4546   			}
;;;4547   		}	
;;;4548   		
;;;4549   	if(hour_apv_cnt[i])
;;;4550   		{
;;;4551   		hour_apv_cnt[i]--;
;;;4552   		if(hour_apv_cnt[i]==0)
;;;4553   			{
;;;4554   			apv_cnt[i]=0;
;;;4555   			avar_src_reset(i);
;;;4556   			}
;;;4557   		}			
;;;4558   	}
;;;4559   
;;;4560   
;;;4561   
;;;4562   
;;;4563   if(apv_cnt_1)
;;;4564   	{
;;;4565   	apv_cnt_1--;
;;;4566   	if(!apv_cnt_1) 
;;;4567   		{
;;;4568   		avar_src_reset(0);
;;;4569   		avar_src_reset(1);
;;;4570   		//cntrl_stat=0;
;;;4571   		}
;;;4572   	}*/		
;;;4573   }
003724  e8bd83f0          POP      {r4-r9,pc}
;;;4574   
                          ENDP

                  adc_init PROC
;;;4575   //-----------------------------------------------
;;;4576   void adc_init(void)
003728  4899              LDR      r0,|L1.14736|
;;;4577   {
;;;4578   
;;;4579   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
00372a  6841              LDR      r1,[r0,#4]
00372c  f4212140          BIC      r1,r1,#0xc0000
003730  f4412180          ORR      r1,r1,#0x40000
003734  6041              STR      r1,[r0,#4]
;;;4580   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
003736  6841              LDR      r1,[r0,#4]
003738  f4213140          BIC      r1,r1,#0x30000
00373c  f4413180          ORR      r1,r1,#0x10000
003740  6041              STR      r1,[r0,#4]
;;;4581   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
003742  6841              LDR      r1,[r0,#4]
003744  f4214140          BIC      r1,r1,#0xc000
003748  f4414180          ORR      r1,r1,#0x4000
00374c  6041              STR      r1,[r0,#4]
;;;4582   
;;;4583   
;;;4584   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
00374e  6c41              LDR      r1,[r0,#0x44]
003750  f4212140          BIC      r1,r1,#0xc0000
003754  f4412100          ORR      r1,r1,#0x80000
003758  6441              STR      r1,[r0,#0x44]
;;;4585   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
00375a  6c41              LDR      r1,[r0,#0x44]
00375c  f4213140          BIC      r1,r1,#0x30000
003760  f4413100          ORR      r1,r1,#0x20000
003764  6441              STR      r1,[r0,#0x44]
;;;4586   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
003766  6c41              LDR      r1,[r0,#0x44]
003768  f4214140          BIC      r1,r1,#0xc000
00376c  f4414100          ORR      r1,r1,#0x8000
003770  6441              STR      r1,[r0,#0x44]
;;;4587   
;;;4588   SET_REG(LPC_ADC->ADCR,0,24,3);
003772  4888              LDR      r0,|L1.14740|
003774  6801              LDR      r1,[r0,#0]
003776  f02161e0          BIC      r1,r1,#0x7000000
00377a  6001              STR      r1,[r0,#0]
;;;4589   
;;;4590   SET_REG(LPC_ADC->ADCR,1,21,1);
00377c  6801              LDR      r1,[r0,#0]
00377e  f4411100          ORR      r1,r1,#0x200000
003782  6001              STR      r1,[r0,#0]
;;;4591   SET_REG(LPC_ADC->ADCR,0,16,1);
003784  6801              LDR      r1,[r0,#0]
003786  f4213180          BIC      r1,r1,#0x10000
00378a  6001              STR      r1,[r0,#0]
;;;4592   SET_REG(LPC_ADC->ADCR,1,8,8);
00378c  6801              LDR      r1,[r0,#0]
00378e  f421417f          BIC      r1,r1,#0xff00
003792  f4417180          ORR      r1,r1,#0x100
003796  6001              STR      r1,[r0,#0]
;;;4593   
;;;4594   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4595   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4596   	
;;;4597   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4598        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4599        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4600   
;;;4601   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003798  f44f7180          MOV      r1,#0x100
00379c  60c1              STR      r1,[r0,#0xc]
00379e  487e              LDR      r0,|L1.14744|
0037a0  f44f0180          MOV      r1,#0x400000
0037a4  6001              STR      r1,[r0,#0]
;;;4602   
;;;4603   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4604   
;;;4605   
;;;4606   }
0037a6  4770              BX       lr
;;;4607   
                          ENDP

                  adc_drv7 PROC
;;;4608   //-----------------------------------------------
;;;4609   void adc_drv7(void) //(Uсети - постоянка)
0037a8  e92d41f0          PUSH     {r4-r8,lr}
;;;4610   {
;;;4611   //int temp_S;
;;;4612   //char i;
;;;4613   //signed short temp_SS;
;;;4614   
;;;4615   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0037ac  4c74              LDR      r4,|L1.14720|
0037ae  34f2              ADDS     r4,r4,#0xf2
0037b0  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0037b2  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0037b4  1a40              SUBS     r0,r0,r1
0037b6  b200              SXTH     r0,r0
0037b8  f7fffffe          BL       abs_pal
0037bc  1da6              ADDS     r6,r4,#6
0037be  8030              STRH     r0,[r6,#0]
;;;4616   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0037c0  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0037c2  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0037c4  1a40              SUBS     r0,r0,r1
0037c6  b200              SXTH     r0,r0
0037c8  f7fffffe          BL       abs_pal
0037cc  8070              STRH     r0,[r6,#2]
;;;4617   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
0037ce  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0037d0  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0037d2  1a40              SUBS     r0,r0,r1
0037d4  b200              SXTH     r0,r0
0037d6  f7fffffe          BL       abs_pal
0037da  80b0              STRH     r0,[r6,#4]
;;;4618   
;;;4619   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4620   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4621   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4622   
;;;4623   
;;;4624   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
0037dc  f44f7196          MOV      r1,#0x12c
;;;4625   	{
;;;4626   	adc_result=adc_self_ch_buff[2];
0037e0  4d67              LDR      r5,|L1.14720|
0037e2  4288              CMP      r0,r1                 ;4624
0037e4  da02              BGE      |L1.14316|
0037e6  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0037e8  87a8              STRH     r0,[r5,#0x3c]
0037ea  e00c              B        |L1.14342|
                  |L1.14316|
;;;4627   	} 
;;;4628   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0037ec  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0037f0  4288              CMP      r0,r1
0037f2  da02              BGE      |L1.14330|
;;;4629   	{
;;;4630   	adc_result=adc_self_ch_buff[1];
0037f4  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0037f6  87a8              STRH     r0,[r5,#0x3c]
0037f8  e005              B        |L1.14342|
                  |L1.14330|
;;;4631   	}
;;;4632   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0037fa  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0037fe  4288              CMP      r0,r1
003800  da01              BGE      |L1.14342|
;;;4633   	{
;;;4634   	adc_result=adc_self_ch_buff[0];
003802  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003804  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14342|
;;;4635   	}
;;;4636       //adc_result=92;
;;;4637   
;;;4638   if(adc_ch_net)
003806  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003808  2600              MOVS     r6,#0
00380a  b347              CBZ      r7,|L1.14430|
;;;4639   	{
;;;4640   
;;;4641   	main_power_buffer[0]+=(long)(adc_result);
00380c  4863              LDR      r0,|L1.14748|
00380e  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003812  6802              LDR      r2,[r0,#0]  ; main_power_buffer
003814  440a              ADD      r2,r2,r1
003816  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4642   	main_power_buffer[1]+=(long)(adc_result);
003818  6842              LDR      r2,[r0,#4]  ; main_power_buffer
00381a  440a              ADD      r2,r2,r1
00381c  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4643   	main_power_buffer[2]+=(long)(adc_result);
00381e  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003820  440a              ADD      r2,r2,r1
003822  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4644   	main_power_buffer[3]+=(long)(adc_result);
003824  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
003826  4411              ADD      r1,r1,r2
003828  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4645   
;;;4646   	adc_net_buff_cnt++;
00382a  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
00382e  f1010101          ADD      r1,r1,#1
003832  b209              SXTH     r1,r1
003834  f8a51044          STRH     r1,[r5,#0x44]
;;;4647   	if(adc_net_buff_cnt>=0x1000)
003838  f5b15f80          CMP      r1,#0x1000
00383c  db01              BLT      |L1.14402|
;;;4648   		{
;;;4649   		adc_net_buff_cnt=0;
00383e  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14402|
;;;4650   		}
;;;4651   	if((adc_net_buff_cnt&0x03ff)==0)
003842  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
003846  058a              LSLS     r2,r1,#22
003848  d131              BNE      |L1.14510|
;;;4652   		{
;;;4653   		#ifdef UKU_220
;;;4654   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4655   		#else
;;;4656   		#ifdef UKU_220_V2
;;;4657   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4658   		#else
;;;4659   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00384a  ea4f21a1          ASR      r1,r1,#10
00384e  f8502021          LDR      r2,[r0,r1,LSL #2]
003852  ea4f2222          ASR      r2,r2,#8
003856  876a              STRH     r2,[r5,#0x3a]
;;;4660   		#endif
;;;4661   		#endif
;;;4662   		main_power_buffer[adc_net_buff_cnt>>10]=0;
003858  f8406021          STR      r6,[r0,r1,LSL #2]
00385c  e027              B        |L1.14510|
                  |L1.14430|
;;;4663   		}
;;;4664   
;;;4665   
;;;4666   	} 
;;;4667   else if(!adc_ch_net)
;;;4668   	{
;;;4669   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
00385e  4850              LDR      r0,|L1.14752|
003860  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
003862  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003864  eb001384          ADD      r3,r0,r4,LSL #6
003868  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
00386c  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4670   	
;;;4671   	if((adc_ch_cnt&0x03)==0)
003870  0790              LSLS     r0,r2,#30
003872  d10f              BNE      |L1.14484|
;;;4672   		{
;;;4673   		long temp_L;
;;;4674   		char i;
;;;4675   		temp_L=0;
003874  4601              MOV      r1,r0
                  |L1.14454|
;;;4676   		for(i=0;i<16;i++)
;;;4677   			{
;;;4678   			temp_L+=adc_buff[adc_ch][i];
003876  f853c020          LDR      r12,[r3,r0,LSL #2]
00387a  4461              ADD      r1,r1,r12
00387c  f1000001          ADD      r0,r0,#1              ;4676
003880  b2c0              UXTB     r0,r0                 ;4676
003882  2810              CMP      r0,#0x10              ;4676
003884  d3f7              BCC      |L1.14454|
;;;4679   			}
;;;4680   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003886  ea4f1021          ASR      r0,r1,#4
00388a  4944              LDR      r1,|L1.14748|
00388c  f1a10120          SUB      r1,r1,#0x20
003890  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14484|
;;;4681   
;;;4682   		//adc_buff_[3]=346;
;;;4683   		}
;;;4684   	if(++adc_ch>=16) 
003894  1c64              ADDS     r4,r4,#1
003896  b2e0              UXTB     r0,r4
003898  74a8              STRB     r0,[r5,#0x12]
00389a  2810              CMP      r0,#0x10
00389c  d307              BCC      |L1.14510|
;;;4685   		{
;;;4686   		adc_ch=0;
00389e  74ae              STRB     r6,[r5,#0x12]
;;;4687   		adc_ch_cnt++;
0038a0  f1020201          ADD      r2,r2,#1
0038a4  b2d0              UXTB     r0,r2
0038a6  74e8              STRB     r0,[r5,#0x13]
;;;4688   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0038a8  2810              CMP      r0,#0x10
0038aa  d300              BCC      |L1.14510|
0038ac  74ee              STRB     r6,[r5,#0x13]
                  |L1.14510|
;;;4689   		}
;;;4690   	}
;;;4691   
;;;4692   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4693   
;;;4694   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4695   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4696   /*
;;;4697   	{
;;;4698   	if((adc_cnt1&0x03)==0)
;;;4699   		{
;;;4700   		temp_S=0;
;;;4701   		for(i=0;i<16;i++)
;;;4702   			{
;;;4703   			temp_S+=adc_buff[adc_ch][i];
;;;4704   			} 
;;;4705            	adc_buff_[adc_ch]=temp_S>>4;
;;;4706             }
;;;4707   	}*/
;;;4708   
;;;4709   
;;;4710   		  
;;;4711   
;;;4712   adc_self_ch_cnt=0;
0038ae  742e              STRB     r6,[r5,#0x10]
;;;4713   
;;;4714   adc_ch_net++;
0038b0  f1070701          ADD      r7,r7,#1
;;;4715   adc_ch_net&=1;
0038b4  f0070001          AND      r0,r7,#1
0038b8  7468              STRB     r0,[r5,#0x11]
;;;4716   
;;;4717   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4718   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4719   
;;;4720   if(adc_ch_net)
;;;4721   	{
;;;4722   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4723   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4724   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0038ba  4a36              LDR      r2,|L1.14740|
0038bc  b130              CBZ      r0,|L1.14540|
0038be  6810              LDR      r0,[r2,#0]
0038c0  f02000ff          BIC      r0,r0,#0xff
0038c4  f1000004          ADD      r0,r0,#4
0038c8  6010              STR      r0,[r2,#0]
0038ca  e03d              B        |L1.14664|
                  |L1.14540|
;;;4725   	}
;;;4726   else
;;;4727   	{
;;;4728   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4729   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4730   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0038cc  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
0038ce  0708              LSLS     r0,r1,#28
0038d0  d406              BMI      |L1.14560|
0038d2  6810              LDR      r0,[r2,#0]
0038d4  f02000ff          BIC      r0,r0,#0xff
0038d8  f1000001          ADD      r0,r0,#1
0038dc  6010              STR      r0,[r2,#0]
0038de  e005              B        |L1.14572|
                  |L1.14560|
;;;4731   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0038e0  6810              LDR      r0,[r2,#0]
0038e2  f02000ff          BIC      r0,r0,#0xff
0038e6  f1000002          ADD      r0,r0,#2
0038ea  6010              STR      r0,[r2,#0]
                  |L1.14572|
;;;4732   
;;;4733   
;;;4734   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0038ec  482d              LDR      r0,|L1.14756|
0038ee  6803              LDR      r3,[r0,#0]
0038f0  f0435380          ORR      r3,r3,#0x10000000
0038f4  6003              STR      r3,[r0,#0]
;;;4735   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0038f6  6a03              LDR      r3,[r0,#0x20]
0038f8  f0434380          ORR      r3,r3,#0x40000000
0038fc  6203              STR      r3,[r0,#0x20]
;;;4736   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0038fe  6e03              LDR      r3,[r0,#0x60]
003900  f0436380          ORR      r3,r3,#0x4000000
003904  6603              STR      r3,[r0,#0x60]
;;;4737   
;;;4738   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003906  07cb              LSLS     r3,r1,#31
003908  d00a              BEQ      |L1.14624|
;;;4739   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00390a  6943              LDR      r3,[r0,#0x14]
00390c  f0435380          ORR      r3,r3,#0x10000000
003910  6143              STR      r3,[r0,#0x14]
                  |L1.14610|
;;;4740   
;;;4741   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003912  078b              LSLS     r3,r1,#30
003914  d409              BMI      |L1.14634|
003916  6b43              LDR      r3,[r0,#0x34]
003918  f0234380          BIC      r3,r3,#0x40000000
00391c  6343              STR      r3,[r0,#0x34]
00391e  e008              B        |L1.14642|
                  |L1.14624|
003920  6943              LDR      r3,[r0,#0x14]         ;4738
003922  f0235380          BIC      r3,r3,#0x10000000     ;4738
003926  6143              STR      r3,[r0,#0x14]         ;4738
003928  e7f3              B        |L1.14610|
                  |L1.14634|
;;;4742   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00392a  6b43              LDR      r3,[r0,#0x34]
00392c  f0434380          ORR      r3,r3,#0x40000000
003930  6343              STR      r3,[r0,#0x34]
                  |L1.14642|
;;;4743   
;;;4744   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003932  0749              LSLS     r1,r1,#29
003934  d404              BMI      |L1.14656|
003936  6f41              LDR      r1,[r0,#0x74]
003938  f0216180          BIC      r1,r1,#0x4000000
00393c  6741              STR      r1,[r0,#0x74]
00393e  e003              B        |L1.14664|
                  |L1.14656|
;;;4745   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003940  6f41              LDR      r1,[r0,#0x74]
003942  f0416180          ORR      r1,r1,#0x4000000
003946  6741              STR      r1,[r0,#0x74]
                  |L1.14664|
;;;4746   	}
;;;4747   	
;;;4748   
;;;4749   
;;;4750   
;;;4751   LPC_ADC->ADCR |=  (1<<24);
003948  6810              LDR      r0,[r2,#0]
00394a  f0407080          ORR      r0,r0,#0x1000000
00394e  6010              STR      r0,[r2,#0]
                  |L1.14672|
;;;4752   
;;;4753   }
003950  e8bd81f0          POP      {r4-r8,pc}
;;;4754   
                          ENDP

                  avg_hndl PROC
;;;5011   //-----------------------------------------------
;;;5012   void avg_hndl(void)
003954  e92d41f0          PUSH     {r4-r8,lr}
;;;5013   { 
;;;5014   char i;
;;;5015   
;;;5016   //#define AVGCNTMAX	5
;;;5017   if(avg_main_cnt)
003958  4d09              LDR      r5,|L1.14720|
00395a  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
00395e  b318              CBZ      r0,|L1.14760|
;;;5018   	{
;;;5019   	avg_main_cnt--;
003960  f1a00001          SUB      r0,r0,#1
003964  86e8              STRH     r0,[r5,#0x36]
;;;5020   	//goto avg_hndl_end;
;;;5021   	return;
;;;5022   	}                 
;;;5023   
;;;5024   avg_main_cnt=5;
;;;5025   avg_num=0;
;;;5026   
;;;5027   for(i=0;i<NUMIST;i++)
;;;5028   	{
;;;5029   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;5030   	}
;;;5031   
;;;5032   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;5033   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;5034   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;5035   
;;;5036   if(avg_vektor) avg_vektor=0;
;;;5037   else avg_vektor=1;
;;;5038   	
;;;5039   if(avg_num<2)
;;;5040   	{
;;;5041   	//goto avg_hndl_end;
;;;5042   	return;
;;;5043   	}
;;;5044   	
;;;5045   else
;;;5046   	{
;;;5047   	i_avg_min=5000;
;;;5048   	i_avg_max=0;
;;;5049   	i_avg_summ=0;
;;;5050   	for(i=0;i<NUMIST;i++)
;;;5051   		{
;;;5052   		if(bps[i]._state==bsWRK)
;;;5053   			{
;;;5054   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;5055   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;5056   			
;;;5057   			i_avg_summ+=bps[i]._Ii;
;;;5058   			}
;;;5059   		}
;;;5060   	i_avg=i_avg_summ/avg_num;	
;;;5061   	
;;;5062   	if(i_avg_min==0)i_avg_min=1;
;;;5063   
;;;5064   	avg=i_avg_max;
;;;5065   	avg*=100;
;;;5066   	avg/=i_avg_min;
;;;5067   
;;;5068   	if(avg>130) bAVG=1;
;;;5069   	if(avg<110) bAVG=0;
;;;5070   
;;;5071   	if(bAVG==1)
;;;5072   		{
;;;5073   		for(i=0;i<NUMIST;i++)
;;;5074   			{
;;;5075   			if(bps[i]._state==bsWRK)
;;;5076   				{
;;;5077   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;5078   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;5079   			
;;;5080   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;5081   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;5082   				}
;;;5083   			}		
;;;5084   		}			
;;;5085   	}   	 
;;;5086   
;;;5087   
;;;5088   avg_hndl_end:
;;;5089   __nop();  
;;;5090   }
003966  e7f3              B        |L1.14672|
                  |L1.14696|
                          DCD      a_ind
                  |L1.14700|
                          DCD      mnemo_cnt
                  |L1.14704|
                          DCD      MNEMO_ON
                  |L1.14708|
                          DCD      MNEMO_TIME
                  |L1.14712|
                          DCD      bps
                  |L1.14716|
                          DCD      APV_ON2_TIME
                  |L1.14720|
                          DCD      ||area_number.25||
                  |L1.14724|
                          DCD      APV_ON2
                  |L1.14728|
                          DCD      NUMIST
                  |L1.14732|
                          DCD      APV_ON1
                  |L1.14736|
                          DCD      0x4002c000
                  |L1.14740|
                          DCD      0x40034000
                  |L1.14744|
                          DCD      0xe000e100
                  |L1.14748|
                          DCD      ||.bss||+0x42c
                  |L1.14752|
                          DCD      ||.bss||+0xc
                  |L1.14756|
                          DCD      0x2009c000
                  |L1.14760|
0039a8  f04f0005          MOV      r0,#5                 ;5024
0039ac  86e8              STRH     r0,[r5,#0x36]         ;5024
0039ae  f04f0700          MOV      r7,#0                 ;5025
0039b2  76af              STRB     r7,[r5,#0x1a]         ;5025
0039b4  f04f0000          MOV      r0,#0                 ;5027
0039b8  49f8              LDR      r1,|L1.15772|
0039ba  4cf7              LDR      r4,|L1.15768|
0039bc  f9b12000          LDRSH    r2,[r1,#0]            ;5027
0039c0  e012              B        |L1.14824|
                  |L1.14786|
0039c2  eb0001c0          ADD      r1,r0,r0,LSL #3       ;5029
0039c6  eb011100          ADD      r1,r1,r0,LSL #4       ;5029
0039ca  eb040181          ADD      r1,r4,r1,LSL #2       ;5029
0039ce  788b              LDRB     r3,[r1,#2]            ;5029
0039d0  2b01              CMP      r3,#1                 ;5029
0039d2  d106              BNE      |L1.14818|
0039d4  78c9              LDRB     r1,[r1,#3]            ;5029
0039d6  2914              CMP      r1,#0x14              ;5029
0039d8  d203              BCS      |L1.14818|
0039da  7ea9              LDRB     r1,[r5,#0x1a]         ;5029  ; avg_num
0039dc  f1010101          ADD      r1,r1,#1              ;5029
0039e0  76a9              STRB     r1,[r5,#0x1a]         ;5029
                  |L1.14818|
0039e2  f1000001          ADD      r0,r0,#1              ;5027
0039e6  b2c0              UXTB     r0,r0                 ;5027
                  |L1.14824|
0039e8  4290              CMP      r0,r2                 ;5027
0039ea  dbea              BLT      |L1.14786|
0039ec  7ee8              LDRB     r0,[r5,#0x1b]         ;5036  ; avg_vektor
0039ee  f04f0c01          MOV      r12,#1                ;5029
0039f2  b108              CBZ      r0,|L1.14840|
0039f4  76ef              STRB     r7,[r5,#0x1b]         ;5036
0039f6  e001              B        |L1.14844|
                  |L1.14840|
0039f8  f885c01b          STRB     r12,[r5,#0x1b]        ;5037
                  |L1.14844|
0039fc  7eae              LDRB     r6,[r5,#0x1a]         ;5039  ; avg_num
0039fe  2e02              CMP      r6,#2                 ;5039
003a00  d3a6              BCC      |L1.14672|
003a02  4be7              LDR      r3,|L1.15776|
003a04  f2413088          MOV      r0,#0x1388            ;5047
003a08  61d8              STR      r0,[r3,#0x1c]         ;5047  ; i_avg_min
003a0a  619f              STR      r7,[r3,#0x18]         ;5048  ; i_avg_max
003a0c  621f              STR      r7,[r3,#0x20]         ;5049  ; i_avg_summ
003a0e  f04f0100          MOV      r1,#0                 ;5050
003a12  e01c              B        |L1.14926|
                  |L1.14868|
003a14  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5052
003a18  eb001001          ADD      r0,r0,r1,LSL #4       ;5052
003a1c  eb040080          ADD      r0,r4,r0,LSL #2       ;5052
003a20  f8908002          LDRB     r8,[r0,#2]            ;5052
003a24  f1b80f01          CMP      r8,#1                 ;5052
003a28  d10e              BNE      |L1.14920|
003a2a  6a40              LDR      r0,[r0,#0x24]         ;5054
003a2c  f8d38018          LDR      r8,[r3,#0x18]         ;5054  ; i_avg_max
003a30  4540              CMP      r0,r8                 ;5054
003a32  dd00              BLE      |L1.14902|
003a34  6198              STR      r0,[r3,#0x18]         ;5054  ; i_avg_max
                  |L1.14902|
003a36  f8d3801c          LDR      r8,[r3,#0x1c]         ;5055  ; i_avg_min
003a3a  4540              CMP      r0,r8                 ;5055
003a3c  da00              BGE      |L1.14912|
003a3e  61d8              STR      r0,[r3,#0x1c]         ;5055  ; i_avg_min
                  |L1.14912|
003a40  f8d38020          LDR      r8,[r3,#0x20]         ;5057  ; i_avg_summ
003a44  4440              ADD      r0,r0,r8              ;5057
003a46  6218              STR      r0,[r3,#0x20]         ;5057  ; i_avg_summ
                  |L1.14920|
003a48  f1010101          ADD      r1,r1,#1              ;5050
003a4c  b2c9              UXTB     r1,r1                 ;5050
                  |L1.14926|
003a4e  4291              CMP      r1,r2                 ;5050
003a50  dbe0              BLT      |L1.14868|
003a52  6a18              LDR      r0,[r3,#0x20]         ;5060  ; i_avg_summ
003a54  fb90f6f6          SDIV     r6,r0,r6              ;5060
003a58  625e              STR      r6,[r3,#0x24]         ;5060  ; i_avg
003a5a  69d8              LDR      r0,[r3,#0x1c]         ;5062  ; i_avg_min
003a5c  b908              CBNZ     r0,|L1.14946|
003a5e  f8c3c01c          STR      r12,[r3,#0x1c]        ;5062  ; i_avg_min
                  |L1.14946|
003a62  6998              LDR      r0,[r3,#0x18]         ;5064  ; i_avg_max
003a64  f04f0164          MOV      r1,#0x64              ;5065
003a68  fb00f001          MUL      r0,r0,r1              ;5065
003a6c  69d9              LDR      r1,[r3,#0x1c]         ;5066  ; i_avg_min
003a6e  fb90f0f1          SDIV     r0,r0,r1              ;5066
003a72  6298              STR      r0,[r3,#0x28]         ;5066  ; avg
003a74  2882              CMP      r0,#0x82              ;5068
003a76  dd01              BLE      |L1.14972|
003a78  f885c019          STRB     r12,[r5,#0x19]        ;5068
                  |L1.14972|
003a7c  286e              CMP      r0,#0x6e              ;5069
003a7e  da00              BGE      |L1.14978|
003a80  766f              STRB     r7,[r5,#0x19]         ;5069
                  |L1.14978|
003a82  7e68              LDRB     r0,[r5,#0x19]         ;5071  ; bAVG
003a84  2801              CMP      r0,#1                 ;5071
003a86  d138              BNE      |L1.15098|
003a88  f04f0100          MOV      r1,#0                 ;5073
003a8c  f06f0731          MVN      r7,#0x31              ;5080
003a90  e031              B        |L1.15094|
                  |L1.14994|
003a92  eb0100c1          ADD      r0,r1,r1,LSL #3       ;5075
003a96  eb001001          ADD      r0,r0,r1,LSL #4       ;5075
003a9a  eb040080          ADD      r0,r4,r0,LSL #2       ;5075
003a9e  7883              LDRB     r3,[r0,#2]            ;5075
003aa0  2b01              CMP      r3,#1                 ;5075
003aa2  d125              BNE      |L1.15088|
003aa4  6a43              LDR      r3,[r0,#0x24]         ;5077
003aa6  42b3              CMP      r3,r6                 ;5077
003aa8  dd0a              BLE      |L1.15040|
003aaa  f895c01b          LDRB     r12,[r5,#0x1b]        ;5077  ; avg_vektor
003aae  f1bc0f00          CMP      r12,#0                ;5077
003ab2  d105              BNE      |L1.15040|
003ab4  f8b0c054          LDRH     r12,[r0,#0x54]        ;5077
003ab8  f1ac0c01          SUB      r12,r12,#1            ;5077
003abc  f8a0c054          STRH     r12,[r0,#0x54]        ;5077
                  |L1.15040|
003ac0  42b3              CMP      r3,r6                 ;5078
003ac2  da07              BGE      |L1.15060|
003ac4  7eeb              LDRB     r3,[r5,#0x1b]         ;5078  ; avg_vektor
003ac6  b12b              CBZ      r3,|L1.15060|
003ac8  f8b03054          LDRH     r3,[r0,#0x54]         ;5078
003acc  f1030301          ADD      r3,r3,#1              ;5078
003ad0  f8a03054          STRH     r3,[r0,#0x54]         ;5078
                  |L1.15060|
003ad4  f9b03054          LDRSH    r3,[r0,#0x54]         ;5080
003ad8  42bb              CMP      r3,r7                 ;5080
003ada  da01              BGE      |L1.15072|
003adc  f8a07054          STRH     r7,[r0,#0x54]         ;5080
                  |L1.15072|
003ae0  f9b03054          LDRSH    r3,[r0,#0x54]         ;5081
003ae4  2b32              CMP      r3,#0x32              ;5081
003ae6  dd03              BLE      |L1.15088|
003ae8  f04f0332          MOV      r3,#0x32              ;5081
003aec  f8a03054          STRH     r3,[r0,#0x54]         ;5081
                  |L1.15088|
003af0  f1010101          ADD      r1,r1,#1              ;5073
003af4  b2c9              UXTB     r1,r1                 ;5073
                  |L1.15094|
003af6  4291              CMP      r1,r2                 ;5073
003af8  dbcb              BLT      |L1.14994|
                  |L1.15098|
003afa  bf00              NOP                            ;5089
003afc  e728              B        |L1.14672|
;;;5091   
                          ENDP

                  rele_hndl PROC
;;;5104   //*************-----------------------------------------------
;;;5105   void rele_hndl(void)
003afe  e92d5ff0          PUSH     {r4-r12,lr}
;;;5106   {
;;;5107   //static char cnt_rel_sam;
;;;5108   //char temp;
;;;5109   
;;;5110   //temp=0;
;;;5111   
;;;5112   
;;;5113   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003b02  48a8              LDR      r0,|L1.15780|
003b04  6801              LDR      r1,[r0,#0]
003b06  4aa8              LDR      r2,|L1.15784|
003b08  ea010102          AND      r1,r1,r2
003b0c  6001              STR      r1,[r0,#0]
;;;5114   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003b0e  4ca7              LDR      r4,|L1.15788|
003b10  6821              LDR      r1,[r4,#0]
003b12  f441717c          ORR      r1,r1,#0x3f0
003b16  6021              STR      r1,[r4,#0]
;;;5115   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003b18  69c1              LDR      r1,[r0,#0x1c]
003b1a  f4212140          BIC      r1,r1,#0xc0000
003b1e  61c1              STR      r1,[r0,#0x1c]
;;;5116   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003b20  6e21              LDR      r1,[r4,#0x60]
003b22  f0417100          ORR      r1,r1,#0x2000000
003b26  6621              STR      r1,[r4,#0x60]
;;;5117   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003b28  6841              LDR      r1,[r0,#4]
003b2a  f0216140          BIC      r1,r1,#0xc000000
003b2e  6041              STR      r1,[r0,#4]
;;;5118   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003b30  6820              LDR      r0,[r4,#0]
003b32  f0405000          ORR      r0,r0,#0x20000000
003b36  6020              STR      r0,[r4,#0]
;;;5119   
;;;5120   
;;;5121   
;;;5122   
;;;5123   
;;;5124   
;;;5125   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003b38  489e              LDR      r0,|L1.15796|
003b3a  4d9d              LDR      r5,|L1.15792|
003b3c  499f              LDR      r1,|L1.15804|
003b3e  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003b40  489d              LDR      r0,|L1.15800|
003b42  f8953040          LDRB     r3,[r5,#0x40]  ; bat
003b46  f9b11000          LDRSH    r1,[r1,#0]
003b4a  7800              LDRB     r0,[r0,#0]
003b4c  4313              ORRS     r3,r3,r2
003b4e  d007              BEQ      |L1.15200|
003b50  b130              CBZ      r0,|L1.15200|
003b52  2905              CMP      r1,#5
003b54  dd04              BLE      |L1.15200|
;;;5126   	{
;;;5127   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003b56  69a3              LDR      r3,[r4,#0x18]
003b58  f4437380          ORR      r3,r3,#0x100
003b5c  61a3              STR      r3,[r4,#0x18]
003b5e  e003              B        |L1.15208|
                  |L1.15200|
;;;5128   	}
;;;5129   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003b60  69e3              LDR      r3,[r4,#0x1c]
003b62  f4437380          ORR      r3,r3,#0x100
003b66  61e3              STR      r3,[r4,#0x1c]
                  |L1.15208|
;;;5130   
;;;5131   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003b68  f8953090          LDRB     r3,[r5,#0x90]  ; bat
003b6c  4313              ORRS     r3,r3,r2
003b6e  d007              BEQ      |L1.15232|
003b70  b130              CBZ      r0,|L1.15232|
003b72  2905              CMP      r1,#5
003b74  dd04              BLE      |L1.15232|
;;;5132   	{
;;;5133   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003b76  69a0              LDR      r0,[r4,#0x18]
003b78  f0400040          ORR      r0,r0,#0x40
003b7c  61a0              STR      r0,[r4,#0x18]
003b7e  e003              B        |L1.15240|
                  |L1.15232|
;;;5134   	}
;;;5135   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003b80  69e0              LDR      r0,[r4,#0x1c]
003b82  f0400040          ORR      r0,r0,#0x40
003b86  61e0              STR      r0,[r4,#0x1c]
                  |L1.15240|
;;;5136   
;;;5137   
;;;5138   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003b88  20d2              MOVS     r0,#0xd2
003b8a  f7fffffe          BL       mess_find_unvol
003b8e  4d8c              LDR      r5,|L1.15808|
003b90  b110              CBZ      r0,|L1.15256|
003b92  6828              LDR      r0,[r5,#0]  ; mess_data
003b94  2864              CMP      r0,#0x64
003b96  d048              BEQ      |L1.15402|
                  |L1.15256|
;;;5139   	{
;;;5140   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;5141   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;5142   	}
;;;5143   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003b98  69e0              LDR      r0,[r4,#0x1c]
003b9a  f0405000          ORR      r0,r0,#0x20000000
003b9e  61e0              STR      r0,[r4,#0x1c]
                  |L1.15264|
;;;5144   
;;;5145   
;;;5146   #ifndef UKU2071x
;;;5147   //Реле аварии сети
;;;5148   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5149   	{
;;;5150   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5151   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5152   	}
;;;5153   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5154   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5155   #endif
;;;5156   #ifdef UKU2071x
;;;5157   //Реле аварии сети
;;;5158   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ba0  20d2              MOVS     r0,#0xd2
003ba2  f7fffffe          BL       mess_find_unvol
;;;5159   	{
;;;5160   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;5161   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5162   	}
;;;5163   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003ba6  4e87              LDR      r6,|L1.15812|
003ba8  b110              CBZ      r0,|L1.15280|
003baa  6828              LDR      r0,[r5,#0]            ;5158  ; mess_data
003bac  2866              CMP      r0,#0x66              ;5158
003bae  d04b              BEQ      |L1.15432|
                  |L1.15280|
003bb0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bb2  07c0              LSLS     r0,r0,#31
003bb4  d054              BEQ      |L1.15456|
;;;5164   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003bb6  6fa0              LDR      r0,[r4,#0x78]
003bb8  f0407000          ORR      r0,r0,#0x2000000
003bbc  67a0              STR      r0,[r4,#0x78]
                  |L1.15294|
;;;5165   #endif
;;;5166   
;;;5167   #ifdef UKU_3U
;;;5168   //Реле аварий батарей
;;;5169   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5170   	{
;;;5171   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5172   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5173        }
;;;5174   else 
;;;5175   	{
;;;5176   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5177        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5178   	} 
;;;5179   
;;;5180   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5181   	{
;;;5182   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5183   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5184        }
;;;5185   else 
;;;5186   	{
;;;5187   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5188        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5189   	} 
;;;5190   
;;;5191   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5192   	{
;;;5193   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5194   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5195        }
;;;5196   else 
;;;5197   	{
;;;5198   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5199        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5200   	} 
;;;5201   
;;;5202   #endif
;;;5203   
;;;5204   
;;;5205   #ifdef UKU_GLONASS
;;;5206   //Реле аварий батарей
;;;5207   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5208   	{
;;;5209   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5210   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5211        }
;;;5212   else 
;;;5213   	{
;;;5214   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5215        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5216   	} 
;;;5217   
;;;5218   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5219   	{
;;;5220   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5221   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5222        }
;;;5223   else 
;;;5224   	{
;;;5225   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5226        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5227   	} 
;;;5228   
;;;5229   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5230   	{
;;;5231   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5232   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5233        }
;;;5234   else 
;;;5235   	{
;;;5236   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5237        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5238   	} 
;;;5239   
;;;5240   #endif
;;;5241   
;;;5242   #ifdef U 
;;;5243   
;;;5244   #endif
;;;5245   
;;;5246   #ifdef UKU_RSTKM
;;;5247   
;;;5248   //Реле общей аварии
;;;5249   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5250   	{
;;;5251   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5252   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5253   	}
;;;5254   else 
;;;5255   	{
;;;5256        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5257             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5258             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5259             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5260             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5261        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5262   	}
;;;5263   	
;;;5264   
;;;5265   //Реле освещения
;;;5266   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5267   	{
;;;5268   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5269   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5270        }
;;;5271   else 
;;;5272   	{
;;;5273   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5274        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5275   	}
;;;5276   
;;;5277   
;;;5278   //Реле выключения нагрузки
;;;5279   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5280   	{
;;;5281   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5282   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5283        }
;;;5284   else if(tloaddisable_cmnd==0)
;;;5285   	{
;;;5286   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5287   	}
;;;5288   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5289   	{
;;;5290   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5291   	}
;;;5292   
;;;5293   else 
;;;5294   	{
;;;5295   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5296        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5297   	} 
;;;5298   
;;;5299   //Реле осевого вентилятора
;;;5300   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5301   	{
;;;5302   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5303   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5304   	}
;;;5305   else 
;;;5306   	{
;;;5307   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5308        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5309   	} 
;;;5310   
;;;5311   #endif
;;;5312   
;;;5313   #ifdef UKU_KONTUR
;;;5314   
;;;5315   //Реле общей аварии
;;;5316   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5317   	{
;;;5318   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5319   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5320   	}
;;;5321   else 
;;;5322   	{
;;;5323        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5324             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5325             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5326             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5327             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5328        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5329   	}
;;;5330   
;;;5331   	
;;;5332   //rel_warm_plazma=0;
;;;5333   //Реле освещения   
;;;5334   /*
;;;5335   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5336   	{
;;;5337   	if(mess_data[1]==0)
;;;5338   		{
;;;5339   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5340   		rel_warm_plazma=1;
;;;5341   		}
;;;5342   	else if(mess_data[1]==1) 
;;;5343   		{
;;;5344   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5345   		rel_warm_plazma=2;
;;;5346   		}
;;;5347        }
;;;5348   else 
;;;5349   	{
;;;5350   	if(warm_stat_k==wsOFF) 
;;;5351   		{
;;;5352   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5353   		rel_warm_plazma=3;
;;;5354   		}
;;;5355        else 
;;;5356   		{
;;;5357   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5358   		rel_warm_plazma=4;
;;;5359   		}
;;;5360   	}
;;;5361   */
;;;5362   //Реле освещения
;;;5363   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5364   	{
;;;5365   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5366   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5367        }
;;;5368   else 
;;;5369   	{
;;;5370   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5371        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5372   	}
;;;5373   
;;;5374   
;;;5375   
;;;5376   //Реле выключения нагрузки
;;;5377   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5378   	{
;;;5379   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5380   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5381        }
;;;5382   else if(tloaddisable_cmnd==0)
;;;5383   	{
;;;5384   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5385   	}
;;;5386   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5387   	{
;;;5388   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5389   	}
;;;5390   
;;;5391   else 
;;;5392   	{
;;;5393   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5394        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5395   	} 
;;;5396   
;;;5397   //Реле осевого вентилятора или отопителя
;;;5398   if(RELE_LOG)
;;;5399   	{
;;;5400   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5401   		{
;;;5402   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5403   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5404   		}
;;;5405   	else 
;;;5406   		{
;;;5407   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5408   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5409   		} 
;;;5410   
;;;5411   	}
;;;5412   else 
;;;5413   	{
;;;5414   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5415   		{
;;;5416   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5417   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5418   		}
;;;5419   	else 
;;;5420   		{
;;;5421   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5422   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5423   		} 
;;;5424   	}
;;;5425   #endif
;;;5426   
;;;5427   #ifdef UKU_6U
;;;5428   //Реле аварий батарей
;;;5429   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5430   	{
;;;5431   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5432   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5433        }
;;;5434   else 
;;;5435   	{
;;;5436   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5437        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5438   	} 
;;;5439   
;;;5440   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5441   	{
;;;5442   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5443   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5444       }
;;;5445   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5446   	{
;;;5447   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5448   		{
;;;5449   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5450   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5451        	}
;;;5452   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5453   	}
;;;5454   else 
;;;5455   	{
;;;5456   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5457       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5458   	} 
;;;5459   
;;;5460   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5461   	{
;;;5462   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5463   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5464        }
;;;5465   else 
;;;5466   	{
;;;5467   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5468        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5469   	} 
;;;5470   
;;;5471   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5472   	{
;;;5473   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5474   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5475   	}
;;;5476   else if((NPN_OUT==npnoRELEVENT))
;;;5477   	{
;;;5478   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5479   		{
;;;5480   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5481   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5482       	}
;;;5483   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5484   	}
;;;5485   else 
;;;5486   	{
;;;5487   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5488   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5489   	}
;;;5490   
;;;5491   #endif
;;;5492   
;;;5493   #ifdef UKU_220
;;;5494   //Реле аварий батарей
;;;5495   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5496   	{
;;;5497   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5498   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5499        }
;;;5500   else 
;;;5501   	{
;;;5502   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5503        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5504   	} 
;;;5505   
;;;5506   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5507   	{
;;;5508   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5509   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5510        }
;;;5511   else 
;;;5512   	{
;;;5513   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5514        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5515   	} 
;;;5516   
;;;5517   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5518   	{
;;;5519   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5520   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5521   	}
;;;5522   else 
;;;5523   	{
;;;5524   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5525   		{
;;;5526   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5527   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5528   		}
;;;5529   	else 
;;;5530   		{
;;;5531   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5532        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5533   		}
;;;5534   	}
;;;5535   
;;;5536   #endif
;;;5537   
;;;5538   #ifdef UKU_220_V2
;;;5539   //Реле аварий батарей
;;;5540   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5541   	{
;;;5542   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5543   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5544        }
;;;5545   else 
;;;5546   	{
;;;5547   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5548        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5549   	} 
;;;5550   
;;;5551   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5552   	{
;;;5553   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5554   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5555        }
;;;5556   else 
;;;5557   	{
;;;5558   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5559        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5560   	} 
;;;5561   
;;;5562   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5563   	{
;;;5564   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5565   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5566   	}
;;;5567   else 
;;;5568   	{
;;;5569   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5570   		{
;;;5571   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5572   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5573   		}
;;;5574   	else 
;;;5575   		{
;;;5576   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5577        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5578   		}
;;;5579   	}
;;;5580   
;;;5581   #endif
;;;5582   
;;;5583   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5584   
;;;5585   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003bbe  4882              LDR      r0,|L1.15816|
;;;5586   	{
;;;5587   	#ifndef UKU2071x
;;;5588   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5589   		{
;;;5590   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5591   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5592   		}
;;;5593   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5594   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5595   	#endif
;;;5596   
;;;5597   	#ifdef UKU2071x
;;;5598   		#ifndef APSENERGIA
;;;5599   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5600   			{
;;;5601   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5602   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5603   			}
;;;5604   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5605   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5606   		#endif
;;;5607   
;;;5608   		#ifdef APSENERGIA
;;;5609   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5610   			{
;;;5611   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5612   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5613   			}
;;;5614   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5615   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5616   		#endif
;;;5617   
;;;5618   	#endif
;;;5619   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5620   		{
;;;5621   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5622   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5623   	     }
;;;5624   	else 
;;;5625   		{
;;;5626   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5627   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5628   		} 
;;;5629   
;;;5630   	//Реле аварий батарей
;;;5631   	#ifndef APSENERGIA
;;;5632   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5633   		{
;;;5634   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5635   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5636        	}
;;;5637   	else 
;;;5638   		{
;;;5639   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003bc0  f8df8208          LDR      r8,|L1.15820|
003bc4  4f82              LDR      r7,|L1.15824|
003bc6  8800              LDRH     r0,[r0,#0]            ;5585  ; AUSW_MAIN
003bc8  f5a041aa          SUB      r1,r0,#0x5500         ;5585
003bcc  39fa              SUBS     r1,r1,#0xfa           ;5585
003bce  d001              BEQ      |L1.15316|
003bd0  1e49              SUBS     r1,r1,#1              ;5585
003bd2  d16f              BNE      |L1.15540|
                  |L1.15316|
003bd4  20d2              MOVS     r0,#0xd2              ;5599
003bd6  f7fffffe          BL       mess_find_unvol
003bda  b110              CBZ      r0,|L1.15330|
003bdc  6828              LDR      r0,[r5,#0]            ;5599  ; mess_data
003bde  2866              CMP      r0,#0x66              ;5599
003be0  d043              BEQ      |L1.15466|
                  |L1.15330|
003be2  6830              LDR      r0,[r6,#0]            ;5604  ; avar_ind_stat
003be4  07c0              LSLS     r0,r0,#31             ;5604
003be6  d04d              BEQ      |L1.15492|
003be8  6fa0              LDR      r0,[r4,#0x78]         ;5605
003bea  f0407000          ORR      r0,r0,#0x2000000      ;5605
003bee  67a0              STR      r0,[r4,#0x78]         ;5605
                  |L1.15344|
003bf0  20d2              MOVS     r0,#0xd2              ;5619
003bf2  f7fffffe          BL       mess_find_unvol
003bf6  b110              CBZ      r0,|L1.15358|
003bf8  6828              LDR      r0,[r5,#0]            ;5619  ; mess_data
003bfa  286a              CMP      r0,#0x6a              ;5619
003bfc  d047              BEQ      |L1.15502|
                  |L1.15358|
003bfe  6830              LDR      r0,[r6,#0]            ;5626  ; avar_ind_stat
003c00  4238              TST      r0,r7                 ;5626
003c02  d052              BEQ      |L1.15530|
003c04  69a0              LDR      r0,[r4,#0x18]         ;5627
003c06  f0400080          ORR      r0,r0,#0x80           ;5627
003c0a  61a0              STR      r0,[r4,#0x18]         ;5627
                  |L1.15372|
003c0c  20d2              MOVS     r0,#0xd2              ;5632
003c0e  f7fffffe          BL       mess_find_unvol
003c12  b110              CBZ      r0,|L1.15386|
003c14  6828              LDR      r0,[r5,#0]            ;5632  ; mess_data
003c16  2867              CMP      r0,#0x67              ;5632
003c18  d04d              BEQ      |L1.15542|
                  |L1.15386|
003c1a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c1e  b380              CBZ      r0,|L1.15490|
;;;5640        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c20  69a0              LDR      r0,[r4,#0x18]
003c22  f0400010          ORR      r0,r0,#0x10
003c26  61a0              STR      r0,[r4,#0x18]
003c28  e1f1              B        |L1.16398|
                  |L1.15402|
003c2a  6868              LDR      r0,[r5,#4]            ;5140  ; mess_data
003c2c  2801              CMP      r0,#1                 ;5140
003c2e  d006              BEQ      |L1.15422|
003c30  2800              CMP      r0,#0                 ;5141
003c32  d1b5              BNE      |L1.15264|
003c34  69e0              LDR      r0,[r4,#0x1c]         ;5141
003c36  f0405000          ORR      r0,r0,#0x20000000     ;5141
003c3a  61e0              STR      r0,[r4,#0x1c]         ;5141
003c3c  e7b0              B        |L1.15264|
                  |L1.15422|
003c3e  69a0              LDR      r0,[r4,#0x18]         ;5140
003c40  f0405000          ORR      r0,r0,#0x20000000     ;5140
003c44  61a0              STR      r0,[r4,#0x18]         ;5140
003c46  e7ab              B        |L1.15264|
                  |L1.15432|
003c48  6868              LDR      r0,[r5,#4]            ;5160  ; mess_data
003c4a  b120              CBZ      r0,|L1.15446|
003c4c  6fa0              LDR      r0,[r4,#0x78]         ;5161
003c4e  f0407000          ORR      r0,r0,#0x2000000      ;5161
003c52  67a0              STR      r0,[r4,#0x78]         ;5161
003c54  e7b3              B        |L1.15294|
                  |L1.15446|
003c56  6fe0              LDR      r0,[r4,#0x7c]         ;5160
003c58  f0407000          ORR      r0,r0,#0x2000000      ;5160
003c5c  67e0              STR      r0,[r4,#0x7c]         ;5160
003c5e  e7ae              B        |L1.15294|
                  |L1.15456|
003c60  6fe0              LDR      r0,[r4,#0x7c]         ;5163
003c62  f0407000          ORR      r0,r0,#0x2000000      ;5163
003c66  67e0              STR      r0,[r4,#0x7c]         ;5163
003c68  e7a9              B        |L1.15294|
                  |L1.15466|
003c6a  6868              LDR      r0,[r5,#4]            ;5601  ; mess_data
003c6c  b120              CBZ      r0,|L1.15480|
003c6e  6fa0              LDR      r0,[r4,#0x78]         ;5602
003c70  f0407000          ORR      r0,r0,#0x2000000      ;5602
003c74  67a0              STR      r0,[r4,#0x78]         ;5602
003c76  e7bb              B        |L1.15344|
                  |L1.15480|
003c78  6fe0              LDR      r0,[r4,#0x7c]         ;5601
003c7a  f0407000          ORR      r0,r0,#0x2000000      ;5601
003c7e  67e0              STR      r0,[r4,#0x7c]         ;5601
003c80  e7b6              B        |L1.15344|
                  |L1.15490|
003c82  e027              B        |L1.15572|
                  |L1.15492|
003c84  6fe0              LDR      r0,[r4,#0x7c]         ;5604
003c86  f0407000          ORR      r0,r0,#0x2000000      ;5604
003c8a  67e0              STR      r0,[r4,#0x7c]         ;5604
003c8c  e7b0              B        |L1.15344|
                  |L1.15502|
003c8e  6868              LDR      r0,[r5,#4]            ;5621  ; mess_data
003c90  b130              CBZ      r0,|L1.15520|
003c92  2801              CMP      r0,#1                 ;5622
003c94  d1ba              BNE      |L1.15372|
003c96  69a0              LDR      r0,[r4,#0x18]         ;5622
003c98  f0400080          ORR      r0,r0,#0x80           ;5622
003c9c  61a0              STR      r0,[r4,#0x18]         ;5622
003c9e  e7b5              B        |L1.15372|
                  |L1.15520|
003ca0  69e0              LDR      r0,[r4,#0x1c]         ;5621
003ca2  f0400080          ORR      r0,r0,#0x80           ;5621
003ca6  61e0              STR      r0,[r4,#0x1c]         ;5621
003ca8  e7b0              B        |L1.15372|
                  |L1.15530|
003caa  69e0              LDR      r0,[r4,#0x1c]         ;5626
003cac  f0400080          ORR      r0,r0,#0x80           ;5626
003cb0  61e0              STR      r0,[r4,#0x1c]         ;5626
003cb2  e7ab              B        |L1.15372|
                  |L1.15540|
003cb4  e013              B        |L1.15582|
                  |L1.15542|
003cb6  6868              LDR      r0,[r5,#4]            ;5634  ; mess_data
003cb8  b110              CBZ      r0,|L1.15552|
003cba  2801              CMP      r0,#1                 ;5635
003cbc  d005              BEQ      |L1.15562|
003cbe  e1a6              B        |L1.16398|
                  |L1.15552|
003cc0  69e0              LDR      r0,[r4,#0x1c]         ;5634
003cc2  f0400010          ORR      r0,r0,#0x10           ;5634
003cc6  61e0              STR      r0,[r4,#0x1c]         ;5634
003cc8  e1a1              B        |L1.16398|
                  |L1.15562|
003cca  69a0              LDR      r0,[r4,#0x18]         ;5635
003ccc  f0400010          ORR      r0,r0,#0x10           ;5635
003cd0  61a0              STR      r0,[r4,#0x18]         ;5635
003cd2  e19c              B        |L1.16398|
                  |L1.15572|
003cd4  69e0              LDR      r0,[r4,#0x1c]         ;5639
003cd6  f0400010          ORR      r0,r0,#0x10           ;5639
003cda  61e0              STR      r0,[r4,#0x1c]         ;5639
003cdc  e197              B        |L1.16398|
                  |L1.15582|
;;;5641   		}
;;;5642   	#endif
;;;5643   	#ifdef APSENERGIA
;;;5644   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5645   		{
;;;5646   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5647   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5648        	}
;;;5649   	else 
;;;5650   		{
;;;5651   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5652   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5653   		}
;;;5654   	#endif
;;;5655   	}
;;;5656   
;;;5657   else	if(AUSW_MAIN==22023)
003cde  f5a041ac          SUB      r1,r0,#0x5600
003ce2  3907              SUBS     r1,#7
003ce4  d176              BNE      |L1.15828|
;;;5658   	{
;;;5659   
;;;5660   	//Реле аварий батарей
;;;5661   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003ce6  20d2              MOVS     r0,#0xd2
003ce8  f7fffffe          BL       mess_find_unvol
003cec  b110              CBZ      r0,|L1.15604|
003cee  6828              LDR      r0,[r5,#0]  ; mess_data
003cf0  2867              CMP      r0,#0x67
003cf2  d023              BEQ      |L1.15676|
                  |L1.15604|
;;;5662   		{
;;;5663   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5664   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5665        	}
;;;5666   	else 
;;;5667   		{
;;;5668   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003cf4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003cf8  b370              CBZ      r0,|L1.15704|
;;;5669        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003cfa  69a0              LDR      r0,[r4,#0x18]
003cfc  f0400010          ORR      r0,r0,#0x10
003d00  61a0              STR      r0,[r4,#0x18]
                  |L1.15618|
;;;5670   		} 
;;;5671   
;;;5672   
;;;5673   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5674   	#ifndef UKU2071x
;;;5675   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5676   		{
;;;5677   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5678   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5679   		}
;;;5680   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5681   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5682   	#endif
;;;5683   	#ifdef UKU2071x
;;;5684   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d02  20d2              MOVS     r0,#0xd2
003d04  f7fffffe          BL       mess_find_unvol
003d08  b110              CBZ      r0,|L1.15632|
003d0a  6828              LDR      r0,[r5,#0]  ; mess_data
003d0c  2866              CMP      r0,#0x66
003d0e  d028              BEQ      |L1.15714|
                  |L1.15632|
;;;5685   		{
;;;5686   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5687   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5688   		}
;;;5689   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d10  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d12  07c0              LSLS     r0,r0,#31
003d14  d031              BEQ      |L1.15738|
;;;5690   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d16  6fa0              LDR      r0,[r4,#0x78]
003d18  f0407000          ORR      r0,r0,#0x2000000
003d1c  67a0              STR      r0,[r4,#0x78]
                  |L1.15646|
;;;5691   	#endif
;;;5692   
;;;5693   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d1e  20d2              MOVS     r0,#0xd2
003d20  f7fffffe          BL       mess_find_unvol
003d24  b110              CBZ      r0,|L1.15660|
003d26  6828              LDR      r0,[r5,#0]  ; mess_data
003d28  286a              CMP      r0,#0x6a
003d2a  d02b              BEQ      |L1.15748|
                  |L1.15660|
;;;5694   		{
;;;5695   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5696   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5697   	     }
;;;5698   	else 
;;;5699   		{
;;;5700   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003d2c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d2e  4238              TST      r0,r7
003d30  d056              BEQ      |L1.15840|
;;;5701   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003d32  69a0              LDR      r0,[r4,#0x18]
003d34  f0400080          ORR      r0,r0,#0x80
003d38  61a0              STR      r0,[r4,#0x18]
003d3a  e168              B        |L1.16398|
                  |L1.15676|
003d3c  6868              LDR      r0,[r5,#4]            ;5663  ; mess_data
003d3e  b130              CBZ      r0,|L1.15694|
003d40  2801              CMP      r0,#1                 ;5664
003d42  d1de              BNE      |L1.15618|
003d44  69a0              LDR      r0,[r4,#0x18]         ;5664
003d46  f0400010          ORR      r0,r0,#0x10           ;5664
003d4a  61a0              STR      r0,[r4,#0x18]         ;5664
003d4c  e7d9              B        |L1.15618|
                  |L1.15694|
003d4e  69e0              LDR      r0,[r4,#0x1c]         ;5663
003d50  f0400010          ORR      r0,r0,#0x10           ;5663
003d54  61e0              STR      r0,[r4,#0x1c]         ;5663
003d56  e7d4              B        |L1.15618|
                  |L1.15704|
003d58  69e0              LDR      r0,[r4,#0x1c]         ;5668
003d5a  f0400010          ORR      r0,r0,#0x10           ;5668
003d5e  61e0              STR      r0,[r4,#0x1c]         ;5668
003d60  e7cf              B        |L1.15618|
                  |L1.15714|
003d62  6868              LDR      r0,[r5,#4]            ;5686  ; mess_data
003d64  b120              CBZ      r0,|L1.15728|
003d66  69e0              LDR      r0,[r4,#0x1c]         ;5687
003d68  f0407000          ORR      r0,r0,#0x2000000      ;5687
003d6c  61e0              STR      r0,[r4,#0x1c]         ;5687
003d6e  e7d6              B        |L1.15646|
                  |L1.15728|
003d70  69a0              LDR      r0,[r4,#0x18]         ;5686
003d72  f0407000          ORR      r0,r0,#0x2000000      ;5686
003d76  61a0              STR      r0,[r4,#0x18]         ;5686
003d78  e7d1              B        |L1.15646|
                  |L1.15738|
003d7a  6ba0              LDR      r0,[r4,#0x38]         ;5689
003d7c  f0407000          ORR      r0,r0,#0x2000000      ;5689
003d80  63a0              STR      r0,[r4,#0x38]         ;5689
003d82  e7cc              B        |L1.15646|
                  |L1.15748|
003d84  6868              LDR      r0,[r5,#4]            ;5695  ; mess_data
003d86  b110              CBZ      r0,|L1.15758|
003d88  2801              CMP      r0,#1                 ;5696
003d8a  d024              BEQ      |L1.15830|
003d8c  e13f              B        |L1.16398|
                  |L1.15758|
003d8e  69e0              LDR      r0,[r4,#0x1c]         ;5695
003d90  f0400080          ORR      r0,r0,#0x80           ;5695
003d94  61e0              STR      r0,[r4,#0x1c]         ;5695
003d96  e13a              B        |L1.16398|
                  |L1.15768|
                          DCD      bps
                  |L1.15772|
                          DCD      NUMIST
                  |L1.15776|
                          DCD      ||area_number.25||+0x80
                  |L1.15780|
                          DCD      0x4002c000
                  |L1.15784|
                          DCD      0xfff000ff
                  |L1.15788|
                          DCD      0x2009c000
                  |L1.15792|
                          DCD      bat
                  |L1.15796|
                          DCD      tbatdisable_stat
                  |L1.15800|
                          DCD      tbatdisable_cmnd
                  |L1.15804|
                          DCD      main_1Hz_cnt
                  |L1.15808|
                          DCD      mess_data
                  |L1.15812|
                          DCD      avar_ind_stat
                  |L1.15816|
                          DCD      AUSW_MAIN
                  |L1.15820|
                          DCD      ips_bat_av_stat
                  |L1.15824|
                          DCD      0x100007f8
                  |L1.15828|
003dd4  e009              B        |L1.15850|
                  |L1.15830|
003dd6  69a0              LDR      r0,[r4,#0x18]         ;5696
003dd8  f0400080          ORR      r0,r0,#0x80           ;5696
003ddc  61a0              STR      r0,[r4,#0x18]         ;5696
003dde  e116              B        |L1.16398|
                  |L1.15840|
003de0  69e0              LDR      r0,[r4,#0x1c]         ;5700
003de2  f0400080          ORR      r0,r0,#0x80           ;5700
003de6  61e0              STR      r0,[r4,#0x1c]         ;5700
003de8  e111              B        |L1.16398|
                  |L1.15850|
;;;5702   		} 
;;;5703   	}
;;;5704   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003dea  f5a041ac          SUB      r1,r0,#0x5600
003dee  391b              SUBS     r1,r1,#0x1b
003df0  d001              BEQ      |L1.15862|
003df2  1e49              SUBS     r1,r1,#1
003df4  d170              BNE      |L1.16088|
                  |L1.15862|
;;;5705   	{
;;;5706   	//Реле аварий батарей
;;;5707   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003df6  20d2              MOVS     r0,#0xd2
003df8  f7fffffe          BL       mess_find_unvol
003dfc  b110              CBZ      r0,|L1.15876|
003dfe  6828              LDR      r0,[r5,#0]  ; mess_data
003e00  2867              CMP      r0,#0x67
003e02  d031              BEQ      |L1.15976|
                  |L1.15876|
;;;5708   		{
;;;5709   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5710   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5711        	}
;;;5712   	else 
;;;5713   		{
;;;5714   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003e04  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003e08  b3b8              CBZ      r0,|L1.15994|
;;;5715        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003e0a  69a0              LDR      r0,[r4,#0x18]
003e0c  f0400010          ORR      r0,r0,#0x10
003e10  61a0              STR      r0,[r4,#0x18]
                  |L1.15890|
;;;5716   		} 
;;;5717   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5718   	#ifndef UKU2071x 
;;;5719   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5720   		{
;;;5721   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5722   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5723   		}
;;;5724   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5725   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5726   	#endif
;;;5727   	#ifdef UKU2071x 
;;;5728   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e12  20d2              MOVS     r0,#0xd2
003e14  f7fffffe          BL       mess_find_unvol
003e18  b110              CBZ      r0,|L1.15904|
003e1a  6828              LDR      r0,[r5,#0]  ; mess_data
003e1c  2866              CMP      r0,#0x66
003e1e  d037              BEQ      |L1.16016|
                  |L1.15904|
;;;5729   		{
;;;5730   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5731   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5732   		}
;;;5733   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003e20  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e22  07c0              LSLS     r0,r0,#31
003e24  d040              BEQ      |L1.16040|
;;;5734   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003e26  6fa0              LDR      r0,[r4,#0x78]
003e28  f0407000          ORR      r0,r0,#0x2000000
003e2c  67a0              STR      r0,[r4,#0x78]
                  |L1.15918|
;;;5735   	#endif
;;;5736   
;;;5737   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e2e  20d2              MOVS     r0,#0xd2
003e30  f7fffffe          BL       mess_find_unvol
003e34  b110              CBZ      r0,|L1.15932|
003e36  6828              LDR      r0,[r5,#0]  ; mess_data
003e38  286a              CMP      r0,#0x6a
003e3a  d03a              BEQ      |L1.16050|
                  |L1.15932|
;;;5738   		{
;;;5739   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5740   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5741   	     }
;;;5742   	else 
;;;5743   		{
;;;5744   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003e3c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e3e  4238              TST      r0,r7
003e40  d045              BEQ      |L1.16078|
;;;5745   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003e42  69a0              LDR      r0,[r4,#0x18]
003e44  f0400080          ORR      r0,r0,#0x80
003e48  61a0              STR      r0,[r4,#0x18]
                  |L1.15946|
;;;5746   		}
;;;5747   	//Реле аварии БПС
;;;5748   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e4a  20d2              MOVS     r0,#0xd2
003e4c  f7fffffe          BL       mess_find_unvol
003e50  b110              CBZ      r0,|L1.15960|
003e52  6828              LDR      r0,[r5,#0]  ; mess_data
003e54  286a              CMP      r0,#0x6a
003e56  d040              BEQ      |L1.16090|
                  |L1.15960|
;;;5749   		{
;;;5750   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5751   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5752        	}
;;;5753   	else 
;;;5754   		{
;;;5755   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003e58  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e5a  4238              TST      r0,r7
003e5c  d04c              BEQ      |L1.16120|
;;;5756        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003e5e  69a0              LDR      r0,[r4,#0x18]
003e60  f0400020          ORR      r0,r0,#0x20
003e64  61a0              STR      r0,[r4,#0x18]
003e66  e0d2              B        |L1.16398|
                  |L1.15976|
003e68  6868              LDR      r0,[r5,#4]            ;5709  ; mess_data
003e6a  b138              CBZ      r0,|L1.15996|
003e6c  2801              CMP      r0,#1                 ;5710
003e6e  d1d0              BNE      |L1.15890|
003e70  69a0              LDR      r0,[r4,#0x18]         ;5710
003e72  f0400010          ORR      r0,r0,#0x10           ;5710
003e76  61a0              STR      r0,[r4,#0x18]         ;5710
003e78  e7cb              B        |L1.15890|
                  |L1.15994|
003e7a  e004              B        |L1.16006|
                  |L1.15996|
003e7c  69e0              LDR      r0,[r4,#0x1c]         ;5709
003e7e  f0400010          ORR      r0,r0,#0x10           ;5709
003e82  61e0              STR      r0,[r4,#0x1c]         ;5709
003e84  e7c5              B        |L1.15890|
                  |L1.16006|
003e86  69e0              LDR      r0,[r4,#0x1c]         ;5714
003e88  f0400010          ORR      r0,r0,#0x10           ;5714
003e8c  61e0              STR      r0,[r4,#0x1c]         ;5714
003e8e  e7c0              B        |L1.15890|
                  |L1.16016|
003e90  6868              LDR      r0,[r5,#4]            ;5730  ; mess_data
003e92  b120              CBZ      r0,|L1.16030|
003e94  69e0              LDR      r0,[r4,#0x1c]         ;5731
003e96  f0407000          ORR      r0,r0,#0x2000000      ;5731
003e9a  61e0              STR      r0,[r4,#0x1c]         ;5731
003e9c  e7c7              B        |L1.15918|
                  |L1.16030|
003e9e  69a0              LDR      r0,[r4,#0x18]         ;5730
003ea0  f0407000          ORR      r0,r0,#0x2000000      ;5730
003ea4  61a0              STR      r0,[r4,#0x18]         ;5730
003ea6  e7c2              B        |L1.15918|
                  |L1.16040|
003ea8  6ba0              LDR      r0,[r4,#0x38]         ;5733
003eaa  f0407000          ORR      r0,r0,#0x2000000      ;5733
003eae  63a0              STR      r0,[r4,#0x38]         ;5733
003eb0  e7bd              B        |L1.15918|
                  |L1.16050|
003eb2  6868              LDR      r0,[r5,#4]            ;5739  ; mess_data
003eb4  b130              CBZ      r0,|L1.16068|
003eb6  2801              CMP      r0,#1                 ;5740
003eb8  d1c7              BNE      |L1.15946|
003eba  69a0              LDR      r0,[r4,#0x18]         ;5740
003ebc  f0400080          ORR      r0,r0,#0x80           ;5740
003ec0  61a0              STR      r0,[r4,#0x18]         ;5740
003ec2  e7c2              B        |L1.15946|
                  |L1.16068|
003ec4  69e0              LDR      r0,[r4,#0x1c]         ;5739
003ec6  f0400080          ORR      r0,r0,#0x80           ;5739
003eca  61e0              STR      r0,[r4,#0x1c]         ;5739
003ecc  e7bd              B        |L1.15946|
                  |L1.16078|
003ece  69e0              LDR      r0,[r4,#0x1c]         ;5744
003ed0  f0400080          ORR      r0,r0,#0x80           ;5744
003ed4  61e0              STR      r0,[r4,#0x1c]         ;5744
003ed6  e7b8              B        |L1.15946|
                  |L1.16088|
003ed8  e013              B        |L1.16130|
                  |L1.16090|
003eda  6868              LDR      r0,[r5,#4]            ;5750  ; mess_data
003edc  b110              CBZ      r0,|L1.16100|
003ede  2801              CMP      r0,#1                 ;5751
003ee0  d005              BEQ      |L1.16110|
003ee2  e094              B        |L1.16398|
                  |L1.16100|
003ee4  69e0              LDR      r0,[r4,#0x1c]         ;5750
003ee6  f0400020          ORR      r0,r0,#0x20           ;5750
003eea  61e0              STR      r0,[r4,#0x1c]         ;5750
003eec  e08f              B        |L1.16398|
                  |L1.16110|
003eee  69a0              LDR      r0,[r4,#0x18]         ;5751
003ef0  f0400020          ORR      r0,r0,#0x20           ;5751
003ef4  61a0              STR      r0,[r4,#0x18]         ;5751
003ef6  e08a              B        |L1.16398|
                  |L1.16120|
003ef8  69e0              LDR      r0,[r4,#0x1c]         ;5755
003efa  f0400020          ORR      r0,r0,#0x20           ;5755
003efe  61e0              STR      r0,[r4,#0x1c]         ;5755
003f00  e085              B        |L1.16398|
                  |L1.16130|
;;;5757   		} 
;;;5758   	}
;;;5759   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003f02  f5a041ac          SUB      r1,r0,#0x5600
003f06  3911              SUBS     r1,r1,#0x11
003f08  d001              BEQ      |L1.16142|
003f0a  310f              ADDS     r1,r1,#0xf
003f0c  d163              BNE      |L1.16342|
                  |L1.16142|
;;;5760   	{
;;;5761   	#ifndef UKU2071x 
;;;5762   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5763   		{
;;;5764   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5765   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5766   		}
;;;5767   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5768   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5769   	#endif
;;;5770   	#ifdef UKU2071x 
;;;5771   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003f0e  20d2              MOVS     r0,#0xd2
003f10  f7fffffe          BL       mess_find_unvol
003f14  b110              CBZ      r0,|L1.16156|
003f16  6828              LDR      r0,[r5,#0]  ; mess_data
003f18  2866              CMP      r0,#0x66
003f1a  d023              BEQ      |L1.16228|
                  |L1.16156|
;;;5772   		{
;;;5773   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5774   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5775   		}
;;;5776   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003f1c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f1e  07c0              LSLS     r0,r0,#31
003f20  d02c              BEQ      |L1.16252|
;;;5777   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003f22  6fa0              LDR      r0,[r4,#0x78]
003f24  f0407000          ORR      r0,r0,#0x2000000
003f28  67a0              STR      r0,[r4,#0x78]
                  |L1.16170|
;;;5778   	#endif
;;;5779   	
;;;5780   	
;;;5781   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f2a  20d2              MOVS     r0,#0xd2
003f2c  f7fffffe          BL       mess_find_unvol
003f30  b110              CBZ      r0,|L1.16184|
003f32  6828              LDR      r0,[r5,#0]  ; mess_data
003f34  286a              CMP      r0,#0x6a
003f36  d026              BEQ      |L1.16262|
                  |L1.16184|
;;;5782   		{
;;;5783   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5784   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5785   	     }
;;;5786   	else 
;;;5787   		{
;;;5788   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003f38  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f3a  4238              TST      r0,r7
003f3c  d031              BEQ      |L1.16290|
;;;5789   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003f3e  69a0              LDR      r0,[r4,#0x18]
003f40  f0400080          ORR      r0,r0,#0x80
003f44  61a0              STR      r0,[r4,#0x18]
                  |L1.16198|
;;;5790   		} 
;;;5791   
;;;5792   	//Реле аварий батарей
;;;5793   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003f46  20d2              MOVS     r0,#0xd2
003f48  f7fffffe          BL       mess_find_unvol
003f4c  b110              CBZ      r0,|L1.16212|
003f4e  6828              LDR      r0,[r5,#0]  ; mess_data
003f50  2867              CMP      r0,#0x67
003f52  d02b              BEQ      |L1.16300|
                  |L1.16212|
;;;5794   		{
;;;5795   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5796   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5797        	}
;;;5798   	else 
;;;5799   		{
;;;5800   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003f54  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003f58  b390              CBZ      r0,|L1.16320|
;;;5801        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003f5a  69a0              LDR      r0,[r4,#0x18]
003f5c  f0400010          ORR      r0,r0,#0x10
003f60  61a0              STR      r0,[r4,#0x18]
003f62  e054              B        |L1.16398|
                  |L1.16228|
003f64  6868              LDR      r0,[r5,#4]            ;5773  ; mess_data
003f66  b120              CBZ      r0,|L1.16242|
003f68  6fa0              LDR      r0,[r4,#0x78]         ;5774
003f6a  f0407000          ORR      r0,r0,#0x2000000      ;5774
003f6e  67a0              STR      r0,[r4,#0x78]         ;5774
003f70  e7db              B        |L1.16170|
                  |L1.16242|
003f72  6fe0              LDR      r0,[r4,#0x7c]         ;5773
003f74  f0407000          ORR      r0,r0,#0x2000000      ;5773
003f78  67e0              STR      r0,[r4,#0x7c]         ;5773
003f7a  e7d6              B        |L1.16170|
                  |L1.16252|
003f7c  6fe0              LDR      r0,[r4,#0x7c]         ;5776
003f7e  f0407000          ORR      r0,r0,#0x2000000      ;5776
003f82  67e0              STR      r0,[r4,#0x7c]         ;5776
003f84  e7d1              B        |L1.16170|
                  |L1.16262|
003f86  6868              LDR      r0,[r5,#4]            ;5783  ; mess_data
003f88  b130              CBZ      r0,|L1.16280|
003f8a  2801              CMP      r0,#1                 ;5784
003f8c  d1db              BNE      |L1.16198|
003f8e  69a0              LDR      r0,[r4,#0x18]         ;5784
003f90  f0400080          ORR      r0,r0,#0x80           ;5784
003f94  61a0              STR      r0,[r4,#0x18]         ;5784
003f96  e7d6              B        |L1.16198|
                  |L1.16280|
003f98  69e0              LDR      r0,[r4,#0x1c]         ;5783
003f9a  f0400080          ORR      r0,r0,#0x80           ;5783
003f9e  61e0              STR      r0,[r4,#0x1c]         ;5783
003fa0  e7d1              B        |L1.16198|
                  |L1.16290|
003fa2  69e0              LDR      r0,[r4,#0x1c]         ;5788
003fa4  f0400080          ORR      r0,r0,#0x80           ;5788
003fa8  61e0              STR      r0,[r4,#0x1c]         ;5788
003faa  e7cc              B        |L1.16198|
                  |L1.16300|
003fac  6868              LDR      r0,[r5,#4]            ;5795  ; mess_data
003fae  b110              CBZ      r0,|L1.16310|
003fb0  2801              CMP      r0,#1                 ;5796
003fb2  d006              BEQ      |L1.16322|
003fb4  e02b              B        |L1.16398|
                  |L1.16310|
003fb6  69e0              LDR      r0,[r4,#0x1c]         ;5795
003fb8  f0400010          ORR      r0,r0,#0x10           ;5795
003fbc  61e0              STR      r0,[r4,#0x1c]         ;5795
003fbe  e026              B        |L1.16398|
                  |L1.16320|
003fc0  e004              B        |L1.16332|
                  |L1.16322|
003fc2  69a0              LDR      r0,[r4,#0x18]         ;5796
003fc4  f0400010          ORR      r0,r0,#0x10           ;5796
003fc8  61a0              STR      r0,[r4,#0x18]         ;5796
003fca  e020              B        |L1.16398|
                  |L1.16332|
003fcc  69e0              LDR      r0,[r4,#0x1c]         ;5800
003fce  f0400010          ORR      r0,r0,#0x10           ;5800
003fd2  61e0              STR      r0,[r4,#0x1c]         ;5800
003fd4  e01b              B        |L1.16398|
                  |L1.16342|
;;;5802   		} 
;;;5803   	} 	 
;;;5804   else	
;;;5805   	{
;;;5806   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5807   	#ifndef UKU2071x 
;;;5808   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5809   		{
;;;5810   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5811   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5812   		}
;;;5813   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5814   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5815   	#endif
;;;5816   	#ifdef UKU2071x 
;;;5817   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003fd6  20d2              MOVS     r0,#0xd2
003fd8  f7fffffe          BL       mess_find_unvol
003fdc  b110              CBZ      r0,|L1.16356|
003fde  6828              LDR      r0,[r5,#0]  ; mess_data
003fe0  2866              CMP      r0,#0x66
003fe2  d026              BEQ      |L1.16434|
                  |L1.16356|
;;;5818   		{
;;;5819   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5820   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5821   		}
;;;5822   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003fe4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fe6  07c0              LSLS     r0,r0,#31
003fe8  d02f              BEQ      |L1.16458|
;;;5823   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003fea  6fa0              LDR      r0,[r4,#0x78]
003fec  f0407000          ORR      r0,r0,#0x2000000
003ff0  67a0              STR      r0,[r4,#0x78]
                  |L1.16370|
;;;5824   	#endif
;;;5825   
;;;5826   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ff2  20d2              MOVS     r0,#0xd2
003ff4  f7fffffe          BL       mess_find_unvol
003ff8  b110              CBZ      r0,|L1.16384|
003ffa  6828              LDR      r0,[r5,#0]  ; mess_data
003ffc  286a              CMP      r0,#0x6a
003ffe  d029              BEQ      |L1.16468|
                  |L1.16384|
;;;5827   		{
;;;5828   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5829   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5830        	}
;;;5831   	else 
;;;5832   		{
;;;5833   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
004000  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
004002  4238              TST      r0,r7
004004  d034              BEQ      |L1.16496|
;;;5834        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
004006  69a0              LDR      r0,[r4,#0x18]
004008  f0400020          ORR      r0,r0,#0x20
00400c  61a0              STR      r0,[r4,#0x18]
                  |L1.16398|
;;;5835   		}
;;;5836   	}
;;;5837   //Дополнительное реле УКУ 
;;;5838   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
00400e  20d2              MOVS     r0,#0xd2
004010  f7fffffe          BL       mess_find_unvol
;;;5839   	{
;;;5840   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5841   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5842   	}
;;;5843   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5844   	{
;;;5845   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
004014  f8df83f8          LDR      r8,|L1.17424|
004018  4ffe              LDR      r7,|L1.17428|
00401a  4eff              LDR      r6,|L1.17432|
00401c  b110              CBZ      r0,|L1.16420|
00401e  6828              LDR      r0,[r5,#0]            ;5838  ; mess_data
004020  2871              CMP      r0,#0x71              ;5838
004022  d02a              BEQ      |L1.16506|
                  |L1.16420|
004024  48fd              LDR      r0,|L1.17436|
004026  f9b00000          LDRSH    r0,[r0,#0]            ;5843  ; DOP_RELE_FUNC
00402a  b380              CBZ      r0,|L1.16526|
;;;5846   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5847   	}
;;;5848   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
00402c  2801              CMP      r0,#1
00402e  d066              BEQ      |L1.16638|
004030  e070              B        |L1.16660|
                  |L1.16434|
004032  6868              LDR      r0,[r5,#4]            ;5819  ; mess_data
004034  b120              CBZ      r0,|L1.16448|
004036  69e0              LDR      r0,[r4,#0x1c]         ;5820
004038  f0407000          ORR      r0,r0,#0x2000000      ;5820
00403c  61e0              STR      r0,[r4,#0x1c]         ;5820
00403e  e7d8              B        |L1.16370|
                  |L1.16448|
004040  69a0              LDR      r0,[r4,#0x18]         ;5819
004042  f0407000          ORR      r0,r0,#0x2000000      ;5819
004046  61a0              STR      r0,[r4,#0x18]         ;5819
004048  e7d3              B        |L1.16370|
                  |L1.16458|
00404a  6ba0              LDR      r0,[r4,#0x38]         ;5822
00404c  f0407000          ORR      r0,r0,#0x2000000      ;5822
004050  63a0              STR      r0,[r4,#0x38]         ;5822
004052  e7ce              B        |L1.16370|
                  |L1.16468|
004054  6868              LDR      r0,[r5,#4]            ;5828  ; mess_data
004056  b130              CBZ      r0,|L1.16486|
004058  2801              CMP      r0,#1                 ;5829
00405a  d1d8              BNE      |L1.16398|
00405c  69a0              LDR      r0,[r4,#0x18]         ;5829
00405e  f0400020          ORR      r0,r0,#0x20           ;5829
004062  61a0              STR      r0,[r4,#0x18]         ;5829
004064  e7d3              B        |L1.16398|
                  |L1.16486|
004066  69e0              LDR      r0,[r4,#0x1c]         ;5828
004068  f0400020          ORR      r0,r0,#0x20           ;5828
00406c  61e0              STR      r0,[r4,#0x1c]         ;5828
00406e  e7ce              B        |L1.16398|
                  |L1.16496|
004070  69e0              LDR      r0,[r4,#0x1c]         ;5833
004072  f0400020          ORR      r0,r0,#0x20           ;5833
004076  61e0              STR      r0,[r4,#0x1c]         ;5833
004078  e7c9              B        |L1.16398|
                  |L1.16506|
00407a  6868              LDR      r0,[r5,#4]            ;5840  ; mess_data
00407c  b110              CBZ      r0,|L1.16516|
00407e  2801              CMP      r0,#1                 ;5841
004080  d006              BEQ      |L1.16528|
004082  e047              B        |L1.16660|
                  |L1.16516|
004084  69e0              LDR      r0,[r4,#0x1c]         ;5840
004086  f4407000          ORR      r0,r0,#0x200          ;5840
00408a  61e0              STR      r0,[r4,#0x1c]         ;5840
00408c  e042              B        |L1.16660|
                  |L1.16526|
00408e  e004              B        |L1.16538|
                  |L1.16528|
004090  69a0              LDR      r0,[r4,#0x18]         ;5841
004092  f4407000          ORR      r0,r0,#0x200          ;5841
004096  61a0              STR      r0,[r4,#0x18]         ;5841
004098  e03c              B        |L1.16660|
                  |L1.16538|
00409a  48e1              LDR      r0,|L1.17440|
00409c  49e1              LDR      r1,|L1.17444|
00409e  f9b00000          LDRSH    r0,[r0,#0]            ;5845  ; speedChIsOn
0040a2  b9d0              CBNZ     r0,|L1.16602|
0040a4  f8962023          LDRB     r2,[r6,#0x23]         ;5845  ; spc_stat
0040a8  2a02              CMP      r2,#2                 ;5845
0040aa  d016              BEQ      |L1.16602|
0040ac  780a              LDRB     r2,[r1,#0]            ;5845  ; hv_vz_stat
0040ae  b9a2              CBNZ     r2,|L1.16602|
0040b0  783a              LDRB     r2,[r7,#0]            ;5845  ; sp_ch_stat
0040b2  b992              CBNZ     r2,|L1.16602|
0040b4  7972              LDRB     r2,[r6,#5]            ;5845  ; vz1_stat
0040b6  b982              CBNZ     r2,|L1.16602|
0040b8  79f2              LDRB     r2,[r6,#7]            ;5845  ; vz2_stat
0040ba  b972              CBNZ     r2,|L1.16602|
0040bc  f9b82000          LDRSH    r2,[r8,#0]            ;5845  ; load_U
0040c0  230a              MOVS     r3,#0xa               ;5845
0040c2  fb92f2f3          SDIV     r2,r2,r3              ;5845
0040c6  4bd8              LDR      r3,|L1.17448|
0040c8  f9b33000          LDRSH    r3,[r3,#0]            ;5845  ; UVENTOFF
0040cc  429a              CMP      r2,r3                 ;5845
0040ce  da04              BGE      |L1.16602|
0040d0  69e0              LDR      r0,[r4,#0x1c]         ;5845
0040d2  f4407000          ORR      r0,r0,#0x200          ;5845
0040d6  61e0              STR      r0,[r4,#0x1c]         ;5845
0040d8  e01c              B        |L1.16660|
                  |L1.16602|
0040da  b958              CBNZ     r0,|L1.16628|
0040dc  f8960023          LDRB     r0,[r6,#0x23]         ;5846  ; spc_stat
0040e0  2802              CMP      r0,#2                 ;5846
0040e2  d007              BEQ      |L1.16628|
0040e4  7808              LDRB     r0,[r1,#0]            ;5846  ; hv_vz_stat
0040e6  b928              CBNZ     r0,|L1.16628|
0040e8  7838              LDRB     r0,[r7,#0]            ;5846  ; sp_ch_stat
0040ea  b918              CBNZ     r0,|L1.16628|
0040ec  7970              LDRB     r0,[r6,#5]            ;5846  ; vz1_stat
0040ee  b908              CBNZ     r0,|L1.16628|
0040f0  79f0              LDRB     r0,[r6,#7]            ;5846  ; vz2_stat
0040f2  b178              CBZ      r0,|L1.16660|
                  |L1.16628|
0040f4  69a0              LDR      r0,[r4,#0x18]         ;5846
0040f6  f4407000          ORR      r0,r0,#0x200          ;5846
0040fa  61a0              STR      r0,[r4,#0x18]         ;5846
0040fc  e00a              B        |L1.16660|
                  |L1.16638|
;;;5849   	{
;;;5850   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0040fe  20d2              MOVS     r0,#0xd2
004100  f7fffffe          BL       mess_find_unvol
004104  b110              CBZ      r0,|L1.16652|
004106  6828              LDR      r0,[r5,#0]  ; mess_data
004108  2872              CMP      r0,#0x72
00410a  d017              BEQ      |L1.16700|
                  |L1.16652|
;;;5851   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
00410c  69a0              LDR      r0,[r4,#0x18]
00410e  f4407000          ORR      r0,r0,#0x200
004112  61a0              STR      r0,[r4,#0x18]
                  |L1.16660|
;;;5852   	}
;;;5853   
;;;5854   #endif //o_9
;;;5855   
;;;5856   #ifdef UKU_FSO	
;;;5857   #ifndef UKU_FSO_MINI
;;;5858   //Реле аварий батарей
;;;5859   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5860   	{
;;;5861   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5862   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5863        }
;;;5864   else 
;;;5865   	{
;;;5866   	if(!(vent_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5867       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5868   	} 
;;;5869   #endif //!UKU_FSO_MINI
;;;5870   
;;;5871   #ifdef UKU_FSO_MINI
;;;5872   //Реле D1
;;;5873   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D1))
;;;5874   	{
;;;5875   	if(mess_data[1]==0)  		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5876   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5877        }
;;;5878   else 
;;;5879   	{
;;;5880   	if(uku_fso_D1_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D1,1);
;;;5881       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D1,1);
;;;5882   	} 
;;;5883   
;;;5884   //Реле D2
;;;5885   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D2))
;;;5886   	{
;;;5887   	if(mess_data[1]==0) 	 	SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5888   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5889        }
;;;5890   else 
;;;5891   	{
;;;5892   	if(uku_fso_D2_stat) 		SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5893       else 						SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5894   	}
;;;5895   
;;;5896   //Реле D5
;;;5897   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_D5))
;;;5898   	{
;;;5899   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;5900   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;5901        }
;;;5902   else 
;;;5903   	{
;;;5904   	if(uku_fso_D5_stat) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_D5,1);
;;;5905       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_D5,1);
;;;5906   	}
;;;5907   
;;;5908   //Реле SYSOK
;;;5909   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_SYSOK))
;;;5910   	{
;;;5911   	if(mess_data[1]==0) 		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;5912   	else if(mess_data[1]==1) 	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;5913        }
;;;5914   else 
;;;5915   	{
;;;5916   	if(uku_fso_SYSOK_stat) 	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_SYSOK,1);
;;;5917       else 						SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_SYSOK,1);
;;;5918   	}/**/
;;;5919   #endif //UKU_FSO_MINI
;;;5920   #endif //UKU_FSO
;;;5921   
;;;5922   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5923   //Блок выносной реле
;;;5924   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
004114  20d2              MOVS     r0,#0xd2
004116  f7fffffe          BL       mess_find_unvol
;;;5925   	{
;;;5926   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
00411a  f8df9310          LDR      r9,|L1.17452|
;;;5927   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5928   	}
;;;5929   else 
;;;5930   	{
;;;5931   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
00411e  4cc4              LDR      r4,|L1.17456|
004120  b110              CBZ      r0,|L1.16680|
004122  6828              LDR      r0,[r5,#0]            ;5924  ; mess_data
004124  2875              CMP      r0,#0x75              ;5924
004126  d00e              BEQ      |L1.16710|
                  |L1.16680|
004128  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00412a  07c0              LSLS     r0,r0,#31
00412c  d01e              BEQ      |L1.16748|
00412e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004132  f0400001          ORR      r0,r0,#1
004136  f8890000          STRB     r0,[r9,#0]
00413a  e01d              B        |L1.16760|
                  |L1.16700|
00413c  69e0              LDR      r0,[r4,#0x1c]         ;5850
00413e  f4407000          ORR      r0,r0,#0x200          ;5850
004142  61e0              STR      r0,[r4,#0x1c]         ;5850
004144  e7e6              B        |L1.16660|
                  |L1.16710|
004146  6868              LDR      r0,[r5,#4]            ;5926  ; mess_data
004148  b110              CBZ      r0,|L1.16720|
00414a  2801              CMP      r0,#1                 ;5927
00414c  d007              BEQ      |L1.16734|
00414e  e013              B        |L1.16760|
                  |L1.16720|
004150  f8990000          LDRB     r0,[r9,#0]            ;5926  ; bdr_transmit_stat
004154  f00000fe          AND      r0,r0,#0xfe           ;5926
004158  f8890000          STRB     r0,[r9,#0]            ;5926
00415c  e00c              B        |L1.16760|
                  |L1.16734|
00415e  f8990000          LDRB     r0,[r9,#0]            ;5927  ; bdr_transmit_stat
004162  f0400001          ORR      r0,r0,#1              ;5927
004166  f8890000          STRB     r0,[r9,#0]            ;5927
00416a  e005              B        |L1.16760|
                  |L1.16748|
;;;5932   	else 						bdr_transmit_stat&=0xfe;
00416c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004170  f00000fe          AND      r0,r0,#0xfe
004174  f8890000          STRB     r0,[r9,#0]
                  |L1.16760|
;;;5933   	}	
;;;5934   
;;;5935   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
004178  20d2              MOVS     r0,#0xd2
00417a  f7fffffe          BL       mess_find_unvol
00417e  b110              CBZ      r0,|L1.16774|
004180  6828              LDR      r0,[r5,#0]  ; mess_data
004182  2876              CMP      r0,#0x76
004184  d009              BEQ      |L1.16794|
                  |L1.16774|
;;;5936   	{
;;;5937   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5938   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5939   	}
;;;5940   else 
;;;5941   	{
;;;5942   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
004186  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004188  0780              LSLS     r0,r0,#30
00418a  d519              BPL      |L1.16832|
00418c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004190  f0400002          ORR      r0,r0,#2
004194  f8890000          STRB     r0,[r9,#0]
004198  e018              B        |L1.16844|
                  |L1.16794|
00419a  6868              LDR      r0,[r5,#4]            ;5937  ; mess_data
00419c  b110              CBZ      r0,|L1.16804|
00419e  2801              CMP      r0,#1                 ;5938
0041a0  d007              BEQ      |L1.16818|
0041a2  e013              B        |L1.16844|
                  |L1.16804|
0041a4  f8990000          LDRB     r0,[r9,#0]            ;5937  ; bdr_transmit_stat
0041a8  f00000fd          AND      r0,r0,#0xfd           ;5937
0041ac  f8890000          STRB     r0,[r9,#0]            ;5937
0041b0  e00c              B        |L1.16844|
                  |L1.16818|
0041b2  f8990000          LDRB     r0,[r9,#0]            ;5938  ; bdr_transmit_stat
0041b6  f0400002          ORR      r0,r0,#2              ;5938
0041ba  f8890000          STRB     r0,[r9,#0]            ;5938
0041be  e005              B        |L1.16844|
                  |L1.16832|
;;;5943   	else 						bdr_transmit_stat&=0xfd;
0041c0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041c4  f00000fd          AND      r0,r0,#0xfd
0041c8  f8890000          STRB     r0,[r9,#0]
                  |L1.16844|
;;;5944   	}	
;;;5945   	
;;;5946   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
0041cc  20d2              MOVS     r0,#0xd2
0041ce  f7fffffe          BL       mess_find_unvol
0041d2  b110              CBZ      r0,|L1.16858|
0041d4  6828              LDR      r0,[r5,#0]  ; mess_data
0041d6  2877              CMP      r0,#0x77
0041d8  d009              BEQ      |L1.16878|
                  |L1.16858|
;;;5947   	{
;;;5948   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5949   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5950   	}
;;;5951   else 
;;;5952   	{
;;;5953   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
0041da  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0041dc  0740              LSLS     r0,r0,#29
0041de  d519              BPL      |L1.16916|
0041e0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041e4  f0400004          ORR      r0,r0,#4
0041e8  f8890000          STRB     r0,[r9,#0]
0041ec  e018              B        |L1.16928|
                  |L1.16878|
0041ee  6868              LDR      r0,[r5,#4]            ;5948  ; mess_data
0041f0  b110              CBZ      r0,|L1.16888|
0041f2  2801              CMP      r0,#1                 ;5949
0041f4  d007              BEQ      |L1.16902|
0041f6  e013              B        |L1.16928|
                  |L1.16888|
0041f8  f8990000          LDRB     r0,[r9,#0]            ;5948  ; bdr_transmit_stat
0041fc  f00000fb          AND      r0,r0,#0xfb           ;5948
004200  f8890000          STRB     r0,[r9,#0]            ;5948
004204  e00c              B        |L1.16928|
                  |L1.16902|
004206  f8990000          LDRB     r0,[r9,#0]            ;5949  ; bdr_transmit_stat
00420a  f0400004          ORR      r0,r0,#4              ;5949
00420e  f8890000          STRB     r0,[r9,#0]            ;5949
004212  e005              B        |L1.16928|
                  |L1.16916|
;;;5954   	else 						bdr_transmit_stat&=0xfb;
004214  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004218  f00000fb          AND      r0,r0,#0xfb
00421c  f8890000          STRB     r0,[r9,#0]
                  |L1.16928|
;;;5955   	}	
;;;5956   	
;;;5957   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
004220  20d2              MOVS     r0,#0xd2
004222  f7fffffe          BL       mess_find_unvol
004226  b110              CBZ      r0,|L1.16942|
004228  6828              LDR      r0,[r5,#0]  ; mess_data
00422a  2878              CMP      r0,#0x78
00422c  d009              BEQ      |L1.16962|
                  |L1.16942|
;;;5958   	{
;;;5959   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5960   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5961   	}
;;;5962   else 
;;;5963   	{
;;;5964   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
00422e  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004230  0700              LSLS     r0,r0,#28
004232  d519              BPL      |L1.17000|
004234  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004238  f0400008          ORR      r0,r0,#8
00423c  f8890000          STRB     r0,[r9,#0]
004240  e018              B        |L1.17012|
                  |L1.16962|
004242  6868              LDR      r0,[r5,#4]            ;5959  ; mess_data
004244  b110              CBZ      r0,|L1.16972|
004246  2801              CMP      r0,#1                 ;5960
004248  d007              BEQ      |L1.16986|
00424a  e013              B        |L1.17012|
                  |L1.16972|
00424c  f8990000          LDRB     r0,[r9,#0]            ;5959  ; bdr_transmit_stat
004250  f00000f7          AND      r0,r0,#0xf7           ;5959
004254  f8890000          STRB     r0,[r9,#0]            ;5959
004258  e00c              B        |L1.17012|
                  |L1.16986|
00425a  f8990000          LDRB     r0,[r9,#0]            ;5960  ; bdr_transmit_stat
00425e  f0400008          ORR      r0,r0,#8              ;5960
004262  f8890000          STRB     r0,[r9,#0]            ;5960
004266  e005              B        |L1.17012|
                  |L1.17000|
;;;5965   	else 						bdr_transmit_stat&=0xf7;
004268  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00426c  f00000f7          AND      r0,r0,#0xf7
004270  f8890000          STRB     r0,[r9,#0]
                  |L1.17012|
;;;5966   	}	
;;;5967   					 	
;;;5968   #endif
;;;5969   
;;;5970   #ifdef UKU_KONTUR
;;;5971   
;;;5972   //Реле общей аварии
;;;5973   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5974   	{
;;;5975   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5976   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5977   	}
;;;5978   else 
;;;5979   	{
;;;5980        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5981             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5982             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5983             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5984             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5985        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5986   	}
;;;5987   
;;;5988   	
;;;5989   //rel_warm_plazma=0;
;;;5990   //Реле освещения   
;;;5991   /*
;;;5992   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5993   	{
;;;5994   	if(mess_data[1]==0)
;;;5995   		{
;;;5996   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5997   		rel_warm_plazma=1;
;;;5998   		}
;;;5999   	else if(mess_data[1]==1) 
;;;6000   		{
;;;6001   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6002   		rel_warm_plazma=2;
;;;6003   		}
;;;6004        }
;;;6005   else 
;;;6006   	{
;;;6007   	if(warm_stat_k==wsOFF) 
;;;6008   		{
;;;6009   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6010   		rel_warm_plazma=3;
;;;6011   		}
;;;6012        else 
;;;6013   		{
;;;6014   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6015   		rel_warm_plazma=4;
;;;6016   		}
;;;6017   	}
;;;6018   */
;;;6019   //Реле освещения
;;;6020   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6021   	{
;;;6022   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6023   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6024        }
;;;6025   else 
;;;6026   	{
;;;6027   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6028        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6029   	}
;;;6030   
;;;6031   
;;;6032   
;;;6033   //Реле выключения нагрузки
;;;6034   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6035   	{
;;;6036   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6037   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6038        }
;;;6039   else if(tloaddisable_cmnd==0)
;;;6040   	{
;;;6041   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6042   	}
;;;6043   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6044   	{
;;;6045   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6046   	}
;;;6047   
;;;6048   else 
;;;6049   	{
;;;6050   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6051        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6052   	} 
;;;6053   
;;;6054   //Реле осевого вентилятора или отопителя
;;;6055   if(RELE_LOG)
;;;6056   	{
;;;6057   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6058   		{
;;;6059   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6060   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6061   		}
;;;6062   	else 
;;;6063   		{
;;;6064   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6065   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6066   		} 
;;;6067   
;;;6068   	}
;;;6069   else 
;;;6070   	{
;;;6071   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;6072   		{
;;;6073   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6074   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6075   		}
;;;6076   	else 
;;;6077   		{
;;;6078   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;6079   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;6080   		} 
;;;6081   	}
;;;6082   #endif
;;;6083   
;;;6084   
;;;6085   #ifdef UKU_TELECORE2015
;;;6086   //Реле аварии сети
;;;6087   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6088   	{
;;;6089   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6090   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6091   	}
;;;6092   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6093   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6094   
;;;6095   
;;;6096   //Реле освещения
;;;6097   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6098   	{
;;;6099   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6100   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6101        }
;;;6102   else 
;;;6103   	{
;;;6104   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6105        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6106   	}
;;;6107   
;;;6108   //Реле отопителя
;;;6109   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6110   	{
;;;6111   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6112   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6113   	}
;;;6114   else 
;;;6115   	{
;;;6116   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6117        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6118   	} 
;;;6119   //Реле вентилятора
;;;6120   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6121   	{
;;;6122   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6123   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6124   	}
;;;6125   else 
;;;6126   	{
;;;6127   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6128        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6129   	} 
;;;6130   
;;;6131   //Реле внутреннего вентилятора
;;;6132   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6133   	{
;;;6134   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6135   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6136   	}
;;;6137   else 
;;;6138   	{
;;;6139   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6140        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6141   	} 
;;;6142   
;;;6143   #endif
;;;6144   
;;;6145   #ifdef UKU_TELECORE2017
;;;6146   //Реле аварии сети
;;;6147   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6148   	{
;;;6149   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6150   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6151   	}
;;;6152   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;6153   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;6154   
;;;6155   
;;;6156   //Реле освещения
;;;6157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;6158   	{
;;;6159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6161        }
;;;6162   else 
;;;6163   	{
;;;6164   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;6165        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;6166   	}
;;;6167   
;;;6168   //Реле отопителя
;;;6169   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;6170   	{
;;;6171   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6172   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6173   	}
;;;6174   else 
;;;6175   	{
;;;6176   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;6177        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;6178   	} 
;;;6179   //Реле вентилятора
;;;6180   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;6181   	{
;;;6182   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6183   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6184   	}
;;;6185   else 
;;;6186   	{
;;;6187   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;6188        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;6189   	} 
;;;6190   
;;;6191   //Реле внутреннего вентилятора
;;;6192   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;6193   	{
;;;6194   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6195   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6196   	}
;;;6197   else 
;;;6198   	{
;;;6199   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;6200        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;6201   	} 
;;;6202   
;;;6203   //Реле выключения нагрузки
;;;6204   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;6205   	{
;;;6206   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6207   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6208        }
;;;6209   else if(tloaddisable_cmnd==0)
;;;6210   	{
;;;6211   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6212   	}
;;;6213   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;6214   	{
;;;6215   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6216   	}
;;;6217   
;;;6218   else 
;;;6219   	{
;;;6220   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;6221        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;6222   	} 
;;;6223   
;;;6224   
;;;6225   #endif
;;;6226   
;;;6227   #ifdef IPS_SGEP_GAZPROM
;;;6228   rele_hndl_plazma[0]++;
;;;6229   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;6230   	{
;;;6231   	rele_hndl_plazma[1]++;
;;;6232   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6233   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6234        }
;;;6235   else 
;;;6236   	{
;;;6237   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;6238        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;6239   	} 
;;;6240   
;;;6241   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;6242   	{
;;;6243   	rele_hndl_plazma[2]++;
;;;6244   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6245   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6246   	}
;;;6247   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6248   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6249   #endif
;;;6250   
;;;6251   if(NUMBDR==1)
004274  486f              LDR      r0,|L1.17460|
004276  8800              LDRH     r0,[r0,#0]  ; NUMBDR
004278  2801              CMP      r0,#1
00427a  d17e              BNE      |L1.17274|
;;;6252   	{
;;;6253   	char ii_;
;;;6254   	char bdr_avar_stat_temp=0;
00427c  f04f0000          MOV      r0,#0
;;;6255   	for	(ii_=0;ii_<4;ii_++)
004280  4601              MOV      r1,r0
;;;6256   		{
;;;6257   	//o_9_s
;;;6258   	#ifdef UKU_6U
;;;6259   		 //АБ разряжена
;;;6260   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6261   			( (bat[0]._Ub<(USIGN*10) && (BAT_IS_ON[0]==bisON) ) || 
;;;6262   			(bat[1]._Ub<(USIGN*10) && (BAT_IS_ON[1]==bisON) ) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6263   		//Выравнивающий заряд
;;;6264   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6265   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6266   	   	//Общая авария ИБЭП
;;;6267   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6268   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6269   		//Ток АКБ<-0,5А
;;;6270   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6271   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6272   	   	//отключение НПН
;;;6273   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6274   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6275   		//контроль емкости АКБ1
;;;6276   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6277   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6278   		//контроль емкости АКБ2
;;;6279   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6280   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6281   	#else
;;;6282   	//o_9_e		//АБ разряжена
;;;6283   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6284   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6285   		//Ускоренный заряд
;;;6286   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6287   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6288   		//Выравнивающий заряд
;;;6289   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6290   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6291   		//Общая авария ЗВУ
;;;6292   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6293   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6294   		//Uвых завышено
;;;6295   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6296   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
004282  f8dfa1b4          LDR      r10,|L1.17464|
;;;6297   		//Uвых занижено
;;;6298   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6299   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6300   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6301   			(
;;;6302   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
004286  f8df91b4          LDR      r9,|L1.17468|
00428a  4d6d              LDR      r5,|L1.17472|
00428c  f8dfb1b4          LDR      r11,|L1.17476|
004290  f04f0301          MOV      r3,#1                 ;5140
                  |L1.17044|
004294  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6283
004298  ea5f7cc2          LSLS     r12,r2,#31            ;6283
00429c  d010              BEQ      |L1.17088|
00429e  f8dfc1a8          LDR      r12,|L1.17480|
0042a2  f9b8e000          LDRSH    lr,[r8,#0]            ;6284  ; load_U
0042a6  f9bcc000          LDRSH    r12,[r12,#0]          ;6284  ; USIGN
0042aa  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6284
0042ae  ebbe0f4c          CMP      lr,r12,LSL #1         ;6284
0042b2  da05              BGE      |L1.17088|
0042b4  fa03fc01          LSL      r12,r3,r1             ;6284
0042b8  ea4c0c00          ORR      r12,r12,r0            ;6284
0042bc  f00c00ff          AND      r0,r12,#0xff          ;6284
                  |L1.17088|
0042c0  ea5f7c82          LSLS     r12,r2,#30            ;6286
0042c4  d50a              BPL      |L1.17116|
0042c6  f897c000          LDRB     r12,[r7,#0]           ;6287  ; sp_ch_stat
0042ca  f1bc0f02          CMP      r12,#2                ;6287
0042ce  d105              BNE      |L1.17116|
0042d0  fa03fc01          LSL      r12,r3,r1             ;6287
0042d4  ea4c0c00          ORR      r12,r12,r0            ;6287
0042d8  f00c00ff          AND      r0,r12,#0xff          ;6287
                  |L1.17116|
0042dc  ea5f7c42          LSLS     r12,r2,#29            ;6289
0042e0  d50a              BPL      |L1.17144|
0042e2  f896c023          LDRB     r12,[r6,#0x23]        ;6290  ; spc_stat
0042e6  f1bc0f02          CMP      r12,#2                ;6290
0042ea  d105              BNE      |L1.17144|
0042ec  fa03fc01          LSL      r12,r3,r1             ;6290
0042f0  ea4c0c00          ORR      r12,r12,r0            ;6290
0042f4  f00c00ff          AND      r0,r12,#0xff          ;6290
                  |L1.17144|
0042f8  ea5f7c02          LSLS     r12,r2,#28            ;6292
0042fc  d50c              BPL      |L1.17176|
0042fe  f8dfc14c          LDR      r12,|L1.17484|
004302  f8dcc000          LDR      r12,[r12,#0]          ;6293  ; avar_stat
004306  f1bc0f00          CMP      r12,#0                ;6293
00430a  d005              BEQ      |L1.17176|
00430c  fa03fc01          LSL      r12,r3,r1             ;6293
004310  ea4c0c00          ORR      r12,r12,r0            ;6293
004314  f00c00ff          AND      r0,r12,#0xff          ;6293
                  |L1.17176|
004318  ea5f6cc2          LSLS     r12,r2,#27            ;6295
00431c  d50a              BPL      |L1.17204|
00431e  f89ac000          LDRB     r12,[r10,#0]          ;6296  ; uout_av
004322  f1bc0f01          CMP      r12,#1                ;6296
004326  d105              BNE      |L1.17204|
004328  fa03fc01          LSL      r12,r3,r1             ;6296
00432c  ea4c0c00          ORR      r12,r12,r0            ;6296
004330  f00c00ff          AND      r0,r12,#0xff          ;6296
                  |L1.17204|
004334  ea5f6c82          LSLS     r12,r2,#26            ;6298
004338  d50a              BPL      |L1.17232|
00433a  f89ac000          LDRB     r12,[r10,#0]          ;6299  ; uout_av
00433e  f1bc0f02          CMP      r12,#2                ;6299
004342  d105              BNE      |L1.17232|
004344  fa03fc01          LSL      r12,r3,r1             ;6299
004348  ea4c0c00          ORR      r12,r12,r0            ;6299
00434c  f00c00ff          AND      r0,r12,#0xff          ;6299
                  |L1.17232|
004350  ea5f6c42          LSLS     r12,r2,#25            ;6300
004354  d525              BPL      |L1.17314|
004356  f899c001          LDRB     r12,[r9,#1]  ; bps
00435a  ea5f6ccc          LSLS     r12,r12,#27
00435e  d504              BPL      |L1.17258|
004360  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004364  f1bc0f01          CMP      r12,#1
004368  da15              BGE      |L1.17302|
                  |L1.17258|
;;;6303   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
00436a  f899c065          LDRB     r12,[r9,#0x65]  ; bps
00436e  ea5f6ccc          LSLS     r12,r12,#27
004372  d506              BPL      |L1.17282|
004374  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004378  e000              B        |L1.17276|
                  |L1.17274|
00437a  e047              B        |L1.17420|
                  |L1.17276|
00437c  f1bc0f02          CMP      r12,#2
004380  da09              BGE      |L1.17302|
                  |L1.17282|
;;;6304   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
004382  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004386  ea5f6ccc          LSLS     r12,r12,#27
00438a  d50a              BPL      |L1.17314|
00438c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004390  f1bc0f03          CMP      r12,#3
004394  db05              BLT      |L1.17314|
                  |L1.17302|
;;;6305   			))bdr_avar_stat_temp|=(1<<ii_);
004396  fa03fc01          LSL      r12,r3,r1
00439a  ea4c0c00          ORR      r12,r12,r0
00439e  f00c00ff          AND      r0,r12,#0xff
                  |L1.17314|
;;;6306   		if((RELE_SET_MASK[ii_]&0x80)&&
0043a2  ea5f6c02          LSLS     r12,r2,#24
0043a6  d523              BPL      |L1.17392|
;;;6307   			(
;;;6308   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
0043a8  f899c001          LDRB     r12,[r9,#1]  ; bps
0043ac  ea5f7c0c          LSLS     r12,r12,#28
0043b0  d004              BEQ      |L1.17340|
0043b2  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0043b6  f1bc0f01          CMP      r12,#1
0043ba  da13              BGE      |L1.17380|
                  |L1.17340|
;;;6309   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
0043bc  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0043c0  ea5f7c0c          LSLS     r12,r12,#28
0043c4  d004              BEQ      |L1.17360|
0043c6  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0043ca  f1bc0f02          CMP      r12,#2
0043ce  da09              BGE      |L1.17380|
                  |L1.17360|
;;;6310   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
0043d0  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0043d4  ea5f7c0c          LSLS     r12,r12,#28
0043d8  d00a              BEQ      |L1.17392|
0043da  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0043de  f1bc0f03          CMP      r12,#3
0043e2  db05              BLT      |L1.17392|
                  |L1.17380|
;;;6311   			))bdr_avar_stat_temp|=(1<<ii_);
0043e4  fa03fc01          LSL      r12,r3,r1
0043e8  ea4c0c00          ORR      r12,r12,r0
0043ec  f00c00ff          AND      r0,r12,#0xff
                  |L1.17392|
;;;6312   	  #endif											 //o_9
;;;6313   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0043f0  0412              LSLS     r2,r2,#16
0043f2  d404              BMI      |L1.17406|
0043f4  fa03f201          LSL      r2,r3,r1
0043f8  ea820200          EOR      r2,r2,r0
0043fc  b2d0              UXTB     r0,r2
                  |L1.17406|
0043fe  f1010101          ADD      r1,r1,#1              ;6255
004402  b2c9              UXTB     r1,r1                 ;6255
004404  2904              CMP      r1,#4                 ;6255
004406  f4ffaf45          BCC      |L1.17044|
;;;6314   		}
;;;6315   	bdr_avar_stat=bdr_avar_stat_temp;
00440a  7020              STRB     r0,[r4,#0]
                  |L1.17420|
;;;6316   	}
;;;6317   }
00440c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17424|
                          DCD      load_U
                  |L1.17428|
                          DCD      sp_ch_stat
                  |L1.17432|
                          DCD      ||area_number.25||
                  |L1.17436|
                          DCD      DOP_RELE_FUNC
                  |L1.17440|
                          DCD      speedChIsOn
                  |L1.17444|
                          DCD      hv_vz_stat
                  |L1.17448|
                          DCD      UVENTOFF
                  |L1.17452|
                          DCD      bdr_transmit_stat
                  |L1.17456|
                          DCD      bdr_avar_stat
                  |L1.17460|
                          DCD      NUMBDR
                  |L1.17464|
                          DCD      uout_av
                  |L1.17468|
                          DCD      bps
                  |L1.17472|
                          DCD      NUMIST
                  |L1.17476|
                          DCD      RELE_SET_MASK
                  |L1.17480|
                          DCD      USIGN
                  |L1.17484|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6320   //-----------------------------------------------
;;;6321   void bps_hndl(void)
004450  e92d5ff0          PUSH     {r4-r12,lr}
;;;6322   {
;;;6323   char ptr__,i;
;;;6324   unsigned short tempUS;
;;;6325   
;;;6326   if(sh_cnt0<10)
004454  f8dfb40c          LDR      r11,|L1.18532|
;;;6327   	{
;;;6328   	sh_cnt0++;
;;;6329   	if(sh_cnt0>=10)
;;;6330   		{
;;;6331   		sh_cnt0=0;
004458  2600              MOVS     r6,#0
;;;6332   		b1Hz_sh=1;
00445a  f04f0a01          MOV      r10,#1
00445e  f89b0021          LDRB     r0,[r11,#0x21]        ;6326  ; sh_cnt0
004462  280a              CMP      r0,#0xa               ;6326
004464  d20a              BCS      |L1.17532|
004466  f1000001          ADD      r0,r0,#1              ;6328
00446a  b2c0              UXTB     r0,r0                 ;6328
00446c  f88b0021          STRB     r0,[r11,#0x21]        ;6328
004470  280a              CMP      r0,#0xa               ;6329
004472  d303              BCC      |L1.17532|
004474  f88b6021          STRB     r6,[r11,#0x21]        ;6331
004478  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17532|
;;;6333   		}
;;;6334   	}
;;;6335   
;;;6336   /*if(sh_cnt1<5)
;;;6337   	{
;;;6338   	sh_cnt1++;
;;;6339   	if(sh_cnt1==5)
;;;6340   		{
;;;6341   		sh_cnt1=0;
;;;6342   		b2Hz_sh=1;
;;;6343   		}
;;;6344   	} */
;;;6345   
;;;6346   
;;;6347   /*
;;;6348   if(mess_find(MESS_SRC_ON_OFF))
;;;6349   	{
;;;6350   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6351   		{
;;;6352   		char i;
;;;6353   		for(i=0;i<NUMIST;i++)
;;;6354   			{
;;;6355   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6356   			}
;;;6357   		
;;;6358   		}
;;;6359   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6360   		{
;;;6361   		char i;
;;;6362   		for(i=0;i<NUMIST;i++)
;;;6363   			{
;;;6364   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6365   			}
;;;6366   		
;;;6367   		}
;;;6368   	}
;;;6369   	
;;;6370   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6371   	{				
;;;6372   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6373   		{
;;;6374   		char i;
;;;6375   		for(i=0;i<NUMIST;i++)
;;;6376   			{
;;;6377   			if(mess_data[1]&(1<<i))
;;;6378   				{
;;;6379   				src[i]._ist_blok_cnt=0;
;;;6380   				src[i]._flags_tu=2;
;;;6381   				}
;;;6382   			}
;;;6383   		
;;;6384   		}				
;;;6385   	}*/
;;;6386   
;;;6387   
;;;6388   
;;;6389   /*else*/ 
;;;6390   bps_on_mask=0;
00447c  4ff9              LDR      r7,|L1.18532|
00447e  3780              ADDS     r7,r7,#0x80
004480  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6391   bps_off_mask=0;
004482  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6392   
;;;6393   if(mess_find_unvol(MESS2BPS_HNDL))
004484  20cd              MOVS     r0,#0xcd
004486  f7fffffe          BL       mess_find_unvol
;;;6394   	{
;;;6395   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6396   		{
;;;6397   		bps_off_mask=0xffff;
;;;6398   		}
;;;6399   
;;;6400   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6401   		{
;;;6402   		bps_off_mask=mess_data[1];
;;;6403   		}
;;;6404   
;;;6405   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6406   		{
;;;6407   		bps_on_mask=mess_data[1];
;;;6408   		}
;;;6409   
;;;6410   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6411   		{
;;;6412   		bps_on_mask=0xffff;
;;;6413   		}
;;;6414   
;;;6415   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6416   		{
;;;6417   		bps_on_mask=(unsigned)mess_data[1];
;;;6418   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6419   		}
;;;6420   
;;;6421    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6422   		{
;;;6423   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6424   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6425   		}
;;;6426   
;;;6427   	for(i=0;i<=NUMIST;i++)
;;;6428   		{
;;;6429   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
00448a  f8df83dc          LDR      r8,|L1.18536|
00448e  b3b8              CBZ      r0,|L1.17664|
004490  4af6              LDR      r2,|L1.18540|
004492  f64f71ff          MOV      r1,#0xffff            ;6397
004496  6810              LDR      r0,[r2,#0]            ;6395  ; mess_data
004498  28ce              CMP      r0,#0xce              ;6395
00449a  d100              BNE      |L1.17566|
00449c  6339              STR      r1,[r7,#0x30]         ;6397  ; bps_off_mask
                  |L1.17566|
00449e  28cf              CMP      r0,#0xcf              ;6400
0044a0  d101              BNE      |L1.17574|
0044a2  6853              LDR      r3,[r2,#4]            ;6402  ; mess_data
0044a4  633b              STR      r3,[r7,#0x30]         ;6402  ; bps_off_mask
                  |L1.17574|
0044a6  28d1              CMP      r0,#0xd1              ;6405
0044a8  d101              BNE      |L1.17582|
0044aa  6853              LDR      r3,[r2,#4]            ;6407  ; mess_data
0044ac  62fb              STR      r3,[r7,#0x2c]         ;6407  ; bps_on_mask
                  |L1.17582|
0044ae  28d2              CMP      r0,#0xd2              ;6410
0044b0  d100              BNE      |L1.17588|
0044b2  62f9              STR      r1,[r7,#0x2c]         ;6412  ; bps_on_mask
                  |L1.17588|
0044b4  28d0              CMP      r0,#0xd0              ;6415
0044b6  d104              BNE      |L1.17602|
0044b8  6851              LDR      r1,[r2,#4]            ;6417  ; mess_data
0044ba  62f9              STR      r1,[r7,#0x2c]         ;6417  ; bps_on_mask
0044bc  ea6f0101          MVN      r1,r1                 ;6418
0044c0  6339              STR      r1,[r7,#0x30]         ;6418  ; bps_off_mask
                  |L1.17602|
0044c2  f5b07f9a          CMP      r0,#0x134             ;6421
0044c6  d106              BNE      |L1.17622|
0044c8  6851              LDR      r1,[r2,#4]            ;6423  ; mess_data
0044ca  fa0af001          LSL      r0,r10,r1             ;6423
0044ce  62f8              STR      r0,[r7,#0x2c]         ;6423  ; bps_on_mask
0044d0  ea6f0000          MVN      r0,r0                 ;6424
0044d4  6338              STR      r0,[r7,#0x30]         ;6424  ; bps_off_mask
                  |L1.17622|
0044d6  f04f0400          MOV      r4,#0                 ;6427
0044da  e035              B        |L1.17736|
                  |L1.17628|
0044dc  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
0044de  fa0af904          LSL      r9,r10,r4
0044e2  ea190f00          TST      r9,r0
0044e6  d00c              BEQ      |L1.17666|
0044e8  eb0400c4          ADD      r0,r4,r4,LSL #3
0044ec  eb001004          ADD      r0,r0,r4,LSL #4
0044f0  eb080080          ADD      r0,r8,r0,LSL #2
0044f4  f8301f40          LDRH     r1,[r0,#0x40]!
0044f8  f1010101          ADD      r1,r1,#1
0044fc  8001              STRH     r1,[r0,#0]
0044fe  e008              B        |L1.17682|
                  |L1.17664|
004500  e028              B        |L1.17748|
                  |L1.17666|
;;;6430   		else bps[i]._blok_cnt=0;
004502  eb0400c4          ADD      r0,r4,r4,LSL #3
004506  eb001004          ADD      r0,r0,r4,LSL #4
00450a  eb080080          ADD      r0,r8,r0,LSL #2
00450e  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17682|
;;;6431   		gran(&bps[i]._blok_cnt,0,50);
004512  eb0400c4          ADD      r0,r4,r4,LSL #3
004516  eb001004          ADD      r0,r0,r4,LSL #4
00451a  eb080580          ADD      r5,r8,r0,LSL #2
00451e  f1050040          ADD      r0,r5,#0x40
004522  2232              MOVS     r2,#0x32
004524  2100              MOVS     r1,#0
004526  f7fffffe          BL       gran
;;;6432   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
00452a  f9b50040          LDRSH    r0,[r5,#0x40]
00452e  2814              CMP      r0,#0x14
004530  dd01              BLE      |L1.17718|
004532  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17718|
;;;6433   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
004536  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
004538  ea190f00          TST      r9,r0
00453c  d001              BEQ      |L1.17730|
00453e  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17730|
004542  f1040401          ADD      r4,r4,#1              ;6427
004546  b2e4              UXTB     r4,r4                 ;6427
                  |L1.17736|
004548  48c9              LDR      r0,|L1.18544|
00454a  f9b00000          LDRSH    r0,[r0,#0]            ;6427  ; NUMIST
00454e  4284              CMP      r4,r0                 ;6427
004550  ddc4              BLE      |L1.17628|
004552  e08e              B        |L1.18034|
                  |L1.17748|
;;;6434   	     }
;;;6435   
;;;6436   	
;;;6437   /*
;;;6438   
;;;6439   	if(bps_all_off_cnt>20)
;;;6440   		{
;;;6441   		for(i=0;i<=NUMIST;i++)
;;;6442   			{
;;;6443   	     	bps[i]._flags_tu=1;
;;;6444   	     	}
;;;6445   		}
;;;6446   	else if(bps_mask_off_cnt>20)
;;;6447   		{
;;;6448   		for(i=0;i<=NUMIST;i++)
;;;6449   			{
;;;6450   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6451   	     	}
;;;6452   		}	
;;;6453   		
;;;6454   	else if(bps_mask_on_off_cnt>20)
;;;6455   		{
;;;6456   		for(i=0;i<=NUMIST;i++)
;;;6457   			{
;;;6458   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6459   			else bps[i]._flags_tu=0;
;;;6460   	     	}
;;;6461   		}
;;;6462   		
;;;6463   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6464   		{
;;;6465   		for(i=0;i<=NUMIST;i++)
;;;6466   			{
;;;6467   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6468   	     	}
;;;6469   		}
;;;6470   */										
;;;6471   	}
;;;6472   
;;;6473   
;;;6474   else if(b1Hz_sh)
004554  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
004558  b3f0              CBZ      r0,|L1.17880|
;;;6475   	{
;;;6476   	ptr__=0;
00455a  f04f0400          MOV      r4,#0
;;;6477        for(i=0;i<=NUMIST;i++)
00455e  4621              MOV      r1,r4
004560  48c3              LDR      r0,|L1.18544|
004562  f9b00000          LDRSH    r0,[r0,#0]            ;6427
004566  e00a              B        |L1.17790|
                  |L1.17768|
;;;6478   		{
;;;6479   	     bps[i]._flags_tu=1;
004568  eb0102c1          ADD      r2,r1,r1,LSL #3
00456c  eb021201          ADD      r2,r2,r1,LSL #4
004570  eb080282          ADD      r2,r8,r2,LSL #2
004574  f882a02c          STRB     r10,[r2,#0x2c]
004578  f1010101          ADD      r1,r1,#1              ;6477
00457c  b2c9              UXTB     r1,r1                 ;6477
                  |L1.17790|
00457e  4281              CMP      r1,r0                 ;6477
004580  ddf2              BLE      |L1.17768|
;;;6480   	     }	
;;;6481     	     
;;;6482     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
004582  f04f0100          MOV      r1,#0
004586  e023              B        |L1.17872|
                  |L1.17800|
;;;6483     		{
;;;6484   		char ii,iii;
;;;6485   
;;;6486   		ii=(char)NUMIST;
004588  b2c2              UXTB     r2,r0
;;;6487   		//if(ii<0)ii=0;
;;;6488   		if(ii>32)ii=32;
00458a  2a20              CMP      r2,#0x20
00458c  d901              BLS      |L1.17810|
00458e  f04f0220          MOV      r2,#0x20
                  |L1.17810|
;;;6489   		iii=numOfForvardBps;
004592  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6490   		//if(iii<0)iii=0;
;;;6491   		if(iii>=NUMIST)iii=0;
004596  4283              CMP      r3,r0
004598  db01              BLT      |L1.17822|
00459a  f04f0300          MOV      r3,#0
                  |L1.17822|
;;;6492   		iii+=i;
00459e  440b              ADD      r3,r3,r1
0045a0  b2db              UXTB     r3,r3
;;;6493   		iii=iii%ii;
0045a2  fbb3f5f2          UDIV     r5,r3,r2
0045a6  fb023215          MLS      r2,r2,r5,r3
;;;6494   		
;;;6495     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
0045aa  eb0203c2          ADD      r3,r2,r2,LSL #3
0045ae  eb031202          ADD      r2,r3,r2,LSL #4
0045b2  eb080282          ADD      r2,r8,r2,LSL #2
0045b6  7893              LDRB     r3,[r2,#2]
0045b8  2b02              CMP      r3,#2
0045ba  d001              BEQ      |L1.17856|
0045bc  2b01              CMP      r3,#1
0045be  d104              BNE      |L1.17866|
                  |L1.17856|
;;;6496     	         	{
;;;6497     	         	bps[iii]._flags_tu=0;
0045c0  f882602c          STRB     r6,[r2,#0x2c]
;;;6498     	         	ptr__++;
0045c4  f1040401          ADD      r4,r4,#1
0045c8  b2e4              UXTB     r4,r4
                  |L1.17866|
0045ca  f1010101          ADD      r1,r1,#1              ;6482
0045ce  b2c9              UXTB     r1,r1                 ;6482
                  |L1.17872|
0045d0  4281              CMP      r1,r0                 ;6482
0045d2  da06              BGE      |L1.17890|
0045d4  4aa7              LDR      r2,|L1.18548|
0045d6  e000              B        |L1.17882|
                  |L1.17880|
0045d8  e04b              B        |L1.18034|
                  |L1.17882|
0045da  f9b22000          LDRSH    r2,[r2,#0]            ;6482  ; num_necc
0045de  4294              CMP      r4,r2                 ;6482
0045e0  dbd2              BLT      |L1.17800|
                  |L1.17890|
;;;6499     	         	}
;;;6500   			
;;;6501     	     }
;;;6502   	bps[numOfForvardBps_old]._flags_tu=0;
0045e2  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
0045e6  eb0102c1          ADD      r2,r1,r1,LSL #3
0045ea  eb021101          ADD      r1,r2,r1,LSL #4
0045ee  eb080181          ADD      r1,r8,r1,LSL #2
0045f2  f881602c          STRB     r6,[r1,#0x2c]
;;;6503   
;;;6504   	if(main_1Hz_cnt<60)
0045f6  49a0              LDR      r1,|L1.18552|
0045f8  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0045fc  293c              CMP      r1,#0x3c
0045fe  da0f              BGE      |L1.17952|
;;;6505   		{
;;;6506        	for(i=0;i<=NUMIST;i++)
004600  f04f0100          MOV      r1,#0
004604  e00a              B        |L1.17948|
                  |L1.17926|
;;;6507   			{
;;;6508   	     	bps[i]._flags_tu=0;
004606  eb0102c1          ADD      r2,r1,r1,LSL #3
00460a  eb021201          ADD      r2,r2,r1,LSL #4
00460e  eb080282          ADD      r2,r8,r2,LSL #2
004612  f882602c          STRB     r6,[r2,#0x2c]
004616  f1010101          ADD      r1,r1,#1              ;6506
00461a  b2c9              UXTB     r1,r1                 ;6506
                  |L1.17948|
00461c  4281              CMP      r1,r0                 ;6506
00461e  ddf2              BLE      |L1.17926|
                  |L1.17952|
;;;6509   	     	}	
;;;6510   		}
;;;6511   	if(ipsBlckStat)
004620  4996              LDR      r1,|L1.18556|
004622  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
004624  b179              CBZ      r1,|L1.17990|
;;;6512   		{
;;;6513        	for(i=0;i<=NUMIST;i++)
004626  f04f0100          MOV      r1,#0
00462a  e00a              B        |L1.17986|
                  |L1.17964|
;;;6514   			{
;;;6515   	     	bps[i]._flags_tu=1;
00462c  eb0102c1          ADD      r2,r1,r1,LSL #3
004630  eb021201          ADD      r2,r2,r1,LSL #4
004634  eb080282          ADD      r2,r8,r2,LSL #2
004638  f882a02c          STRB     r10,[r2,#0x2c]
00463c  f1010101          ADD      r1,r1,#1              ;6513
004640  b2c9              UXTB     r1,r1                 ;6513
                  |L1.17986|
004642  4281              CMP      r1,r0                 ;6513
004644  ddf2              BLE      |L1.17964|
                  |L1.17990|
;;;6516   	     	}
;;;6517   		}
;;;6518   
;;;6519        for(i=0;i<=NUMIST;i++)
004646  f04f0100          MOV      r1,#0
;;;6520   		{
;;;6521   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
00464a  f06f0331          MVN      r3,#0x31
00464e  e00e              B        |L1.18030|
                  |L1.18000|
004650  eb0102c1          ADD      r2,r1,r1,LSL #3
004654  eb021201          ADD      r2,r2,r1,LSL #4
004658  eb080282          ADD      r2,r8,r2,LSL #2
00465c  f892402c          LDRB     r4,[r2,#0x2c]
004660  2c01              CMP      r4,#1
004662  d101              BNE      |L1.18024|
004664  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.18024|
004668  f1010101          ADD      r1,r1,#1              ;6519
00466c  b2c9              UXTB     r1,r1                 ;6519
                  |L1.18030|
00466e  4281              CMP      r1,r0                 ;6519
004670  ddee              BLE      |L1.18000|
                  |L1.18034|
;;;6522   	   	}	
;;;6523   		 
;;;6524     	}
;;;6525   
;;;6526   
;;;6527   for(i=0;i<NUMIST;i++)
004672  f04f0000          MOV      r0,#0
004676  497e              LDR      r1,|L1.18544|
;;;6528        {
;;;6529        if(bps[i]._ist_blok_host_cnt!=0)
;;;6530             {
;;;6531             bps[i]._flags_tu=99;
004678  f04f0463          MOV      r4,#0x63
00467c  f9b11000          LDRSH    r1,[r1,#0]            ;6427
004680  e00f              B        |L1.18082|
                  |L1.18050|
004682  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6529
004686  eb021200          ADD      r2,r2,r0,LSL #4       ;6529
00468a  eb080282          ADD      r2,r8,r2,LSL #2       ;6529
00468e  6bd3              LDR      r3,[r2,#0x3c]         ;6529
004690  b123              CBZ      r3,|L1.18076|
004692  f882402c          STRB     r4,[r2,#0x2c]
;;;6532   	     bps[i]._ist_blok_host_cnt--;
004696  f1a30301          SUB      r3,r3,#1
00469a  63d3              STR      r3,[r2,#0x3c]
                  |L1.18076|
00469c  f1000001          ADD      r0,r0,#1              ;6527
0046a0  b2c0              UXTB     r0,r0                 ;6527
                  |L1.18082|
0046a2  4288              CMP      r0,r1                 ;6527
0046a4  dbed              BLT      |L1.18050|
;;;6533             }
;;;6534        }
;;;6535   
;;;6536   
;;;6537   
;;;6538   
;;;6539   b1Hz_sh=0;
0046a6  f88b6022          STRB     r6,[r11,#0x22]
;;;6540   
;;;6541   
;;;6542   num_of_wrks_bps=0;
0046aa  f88b601e          STRB     r6,[r11,#0x1e]
;;;6543   tempUS=0;
0046ae  f04f0200          MOV      r2,#0
;;;6544   for(i=0;i<NUMIST;i++)
0046b2  4610              MOV      r0,r2
0046b4  e015              B        |L1.18146|
                  |L1.18102|
;;;6545   	{
;;;6546   	if(bps[i]._state==bsWRK)
0046b6  eb0003c0          ADD      r3,r0,r0,LSL #3
0046ba  eb031300          ADD      r3,r3,r0,LSL #4
0046be  eb080383          ADD      r3,r8,r3,LSL #2
0046c2  789c              LDRB     r4,[r3,#2]
0046c4  2c01              CMP      r4,#1
0046c6  d109              BNE      |L1.18140|
;;;6547   		{
;;;6548   		num_of_wrks_bps++;
0046c8  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
0046cc  f1040401          ADD      r4,r4,#1
0046d0  f88b401e          STRB     r4,[r11,#0x1e]
;;;6549   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
0046d4  69db              LDR      r3,[r3,#0x1c]
0046d6  4293              CMP      r3,r2
0046d8  dd00              BLE      |L1.18140|
0046da  b29a              UXTH     r2,r3
                  |L1.18140|
0046dc  f1000001          ADD      r0,r0,#1              ;6544
0046e0  b2c0              UXTB     r0,r0                 ;6544
                  |L1.18146|
0046e2  4288              CMP      r0,r1                 ;6544
0046e4  dbe7              BLT      |L1.18102|
;;;6550   		}
;;;6551   	}
;;;6552   Ubpsmax=tempUS;
0046e6  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6553   
;;;6554   bPARALLEL_ENOUG=0;
0046ea  f88b602c          STRB     r6,[r11,#0x2c]
;;;6555   bPARALLEL_NOT_ENOUG=1;
0046ee  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6556   
;;;6557   for(i=0;i<NUMIST;i++)
0046f2  f04f0000          MOV      r0,#0
;;;6558   	{
;;;6559   	if(bps[i]._Ti>=TSIGN)
0046f6  4a62              LDR      r2,|L1.18560|
0046f8  f9b23000          LDRSH    r3,[r2,#0]
;;;6560   		{
;;;6561   		bPARALLEL_ENOUG=1;
;;;6562   		}
;;;6563   	if(bps[i]._Ti>=(TSIGN-5))
0046fc  f1a30405          SUB      r4,r3,#5
004700  e011              B        |L1.18214|
                  |L1.18178|
004702  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6559
004706  eb021200          ADD      r2,r2,r0,LSL #4       ;6559
00470a  eb080282          ADD      r2,r8,r2,LSL #2       ;6559
00470e  6a92              LDR      r2,[r2,#0x28]         ;6559
004710  429a              CMP      r2,r3                 ;6559
004712  db01              BLT      |L1.18200|
004714  f88ba02c          STRB     r10,[r11,#0x2c]       ;6561
                  |L1.18200|
004718  42a2              CMP      r2,r4
00471a  db01              BLT      |L1.18208|
;;;6564   		{
;;;6565   		bPARALLEL_NOT_ENOUG=0;
00471c  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.18208|
004720  f1000001          ADD      r0,r0,#1              ;6557
004724  b2c0              UXTB     r0,r0                 ;6557
                  |L1.18214|
004726  4288              CMP      r0,r1                 ;6557
004728  dbeb              BLT      |L1.18178|
;;;6566   		}
;;;6567   	}
;;;6568   
;;;6569   if(bPARALLEL_ENOUG==1)
00472a  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
00472e  2801              CMP      r0,#1
004730  d00a              BEQ      |L1.18248|
;;;6570   	{
;;;6571   	bPARALLEL=1;
;;;6572   	}
;;;6573   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
004732  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
004736  2800              CMP      r0,#0
004738  d005              BEQ      |L1.18246|
00473a  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
00473e  2800              CMP      r0,#0
004740  d001              BEQ      |L1.18246|
;;;6574   	{
;;;6575   	bPARALLEL=0;
004742  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.18246|
;;;6576   	}
;;;6577   }
004746  e661              B        |L1.17420|
                  |L1.18248|
004748  f88ba02d          STRB     r10,[r11,#0x2d]       ;6571
00474c  e65e              B        |L1.17420|
;;;6578   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6585   //-----------------------------------------------
;;;6586   void powerAntiAliasingHndl(void)
00474e  b570              PUSH     {r4-r6,lr}
;;;6587   {
;;;6588   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
004750  230a              MOVS     r3,#0xa
004752  4c4d              LDR      r4,|L1.18568|
004754  484b              LDR      r0,|L1.18564|
;;;6589   	{
;;;6590   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6591   	if(powerSummaryCnt>=10)
;;;6592   		{
;;;6593   		power_summary=power_summary_tempo;
;;;6594   		}
;;;6595   	}
;;;6596   else powerSummaryCnt=0;
004756  2500              MOVS     r5,#0
004758  6822              LDR      r2,[r4,#0]            ;6588  ; power_summary_tempo_old
00475a  6800              LDR      r0,[r0,#0]            ;6588  ; power_summary_tempo
00475c  fbb2f6f3          UDIV     r6,r2,r3              ;6588
004760  fbb0f1f3          UDIV     r1,r0,r3              ;6588
004764  4a49              LDR      r2,|L1.18572|
004766  42b1              CMP      r1,r6                 ;6588
004768  d10b              BNE      |L1.18306|
00476a  7811              LDRB     r1,[r2,#0]            ;6590  ; powerSummaryCnt
00476c  290f              CMP      r1,#0xf               ;6590
00476e  d202              BCS      |L1.18294|
004770  f1010101          ADD      r1,r1,#1              ;6590
004774  7011              STRB     r1,[r2,#0]            ;6590
                  |L1.18294|
004776  7811              LDRB     r1,[r2,#0]            ;6591  ; powerSummaryCnt
004778  290a              CMP      r1,#0xa               ;6591
00477a  d303              BCC      |L1.18308|
00477c  4944              LDR      r1,|L1.18576|
00477e  6008              STR      r0,[r1,#0]            ;6593  ; power_summary
004780  e000              B        |L1.18308|
                  |L1.18306|
004782  7015              STRB     r5,[r2,#0]
                  |L1.18308|
;;;6597   power_summary_tempo_old=power_summary_tempo;
004784  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6598   
;;;6599   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
004786  4843              LDR      r0,|L1.18580|
004788  4c43              LDR      r4,|L1.18584|
00478a  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
00478e  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
004792  fbb0f1f3          UDIV     r1,r0,r3
004796  fbb2f3f3          UDIV     r3,r2,r3
;;;6600   	{
;;;6601   	if(powerCurrentCnt<15)powerCurrentCnt++;
00479a  4a40              LDR      r2,|L1.18588|
00479c  4299              CMP      r1,r3                 ;6599
00479e  d10b              BNE      |L1.18360|
0047a0  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0047a2  290f              CMP      r1,#0xf
0047a4  d202              BCS      |L1.18348|
0047a6  f1010101          ADD      r1,r1,#1
0047aa  7011              STRB     r1,[r2,#0]
                  |L1.18348|
;;;6602   	if(powerCurrentCnt>=10)
0047ac  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0047ae  290a              CMP      r1,#0xa
0047b0  d303              BCC      |L1.18362|
;;;6603   		{
;;;6604   		power_current=power_current_tempo;
0047b2  493b              LDR      r1,|L1.18592|
0047b4  8008              STRH     r0,[r1,#0]
0047b6  e000              B        |L1.18362|
                  |L1.18360|
;;;6605   		}
;;;6606   	}
;;;6607   else powerCurrentCnt=0;
0047b8  7015              STRB     r5,[r2,#0]
                  |L1.18362|
;;;6608   power_current_tempo_old=power_current_tempo;
0047ba  8020              STRH     r0,[r4,#0]
;;;6609   }
0047bc  bd70              POP      {r4-r6,pc}
;;;6610   
                          ENDP

                  energometr_hndl PROC
;;;6720   //-----------------------------------------------
;;;6721   void energometr_hndl(void)
0047be  4770              BX       lr
;;;6722   {
;;;6723   //2F 3F 21 0D 0A 
;;;6724   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6725   //2F 3F 21 0D 0A 
;;;6726   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6727   //06 30 35 31 0D 0A 
;;;6728   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6729   
;;;6730   #ifdef CE102M_ENABLED
;;;6731   /*if
;;;6732   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6733   
;;;6734   if(read_power_cnt_main_cnt)
;;;6735   	{
;;;6736   	read_power_cnt_main_cnt--;
;;;6737   	if(read_power_cnt_main_cnt==0)
;;;6738   		{
;;;6739   		rx_read_power_cnt_phase=0;
;;;6740   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6741   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6742   		else bENERGOMETR_UIP=0;
;;;6743   		//bENERGOMETR_UIP=2;
;;;6744   		}
;;;6745   	}
;;;6746   
;;;6747   if (rx_read_power_cnt_phase==0)
;;;6748   	{
;;;6749   	char command_with_crc[20];
;;;6750   	
;;;6751      	command_with_crc[0]=0xaf;  // /
;;;6752   	command_with_crc[1]=0x3f;  // ?
;;;6753   	command_with_crc[2]=0x21;  // !
;;;6754   	command_with_crc[3]=0x8d;  // CR
;;;6755   	command_with_crc[4]=0x0a;  // LF
;;;6756   
;;;6757   	uart_out__adr1(command_with_crc,5);
;;;6758   
;;;6759   	rx_wr_index1=0;
;;;6760   	rx_read_power_cnt_phase=1;
;;;6761   
;;;6762   	read_power_cnt_main_cnt=50;
;;;6763   	}
;;;6764   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6765   	{
;;;6766   	char command_with_crc[20];
;;;6767   	
;;;6768   	command_with_crc[0]=0x06;  //  
;;;6769   	command_with_crc[1]=0x30;  // 0
;;;6770   	command_with_crc[2]=0x35;  // 5
;;;6771   	command_with_crc[3]=0xb1;  // 1
;;;6772   	command_with_crc[4]=0x8d;  // CR
;;;6773   	command_with_crc[5]=0x0a;  // LF
;;;6774   	
;;;6775   	uart_out__adr1(command_with_crc,6);
;;;6776   	
;;;6777   	rx_wr_index1=0;
;;;6778   	rx_read_power_cnt_phase=3;
;;;6779   
;;;6780   	read_power_cnt_main_cnt=50;
;;;6781   	}  
;;;6782   
;;;6783   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6784   	{
;;;6785   	char command_with_crc[20];
;;;6786   	
;;;6787   	command_with_crc[0]=0x81;  //  
;;;6788   	command_with_crc[1]=0xd2;  // 0
;;;6789   	command_with_crc[2]=0xb1;  // 5
;;;6790   	command_with_crc[3]=0x82;  // 1
;;;6791   	command_with_crc[4]=0x56;  // CR
;;;6792   	command_with_crc[5]=0xcf;  // LF
;;;6793   	command_with_crc[6]=0xcc;  // 1
;;;6794   	command_with_crc[7]=0xd4;  // CR
;;;6795   	command_with_crc[8]=0x41;  // LF
;;;6796   	command_with_crc[9]=0x28;  // 1
;;;6797   	command_with_crc[10]=0xa9;  // CR
;;;6798   	command_with_crc[11]=0x03;  // LF
;;;6799   	command_with_crc[12]=0x5f;  // LF
;;;6800   		
;;;6801   	uart_out__adr1(command_with_crc,13);
;;;6802   	
;;;6803   	rx_wr_index1=0;
;;;6804   	rx_read_power_cnt_phase=5;
;;;6805   
;;;6806   	read_power_cnt_main_cnt=50;
;;;6807   	}  
;;;6808   
;;;6809   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6810   	{
;;;6811   	char command_with_crc[20];
;;;6812   	
;;;6813   	command_with_crc[0]=0x81;  //  
;;;6814   	command_with_crc[1]=0xd2;  // 0
;;;6815   	command_with_crc[2]=0xb1;  // 5
;;;6816   	command_with_crc[3]=0x82;  // 1
;;;6817   	command_with_crc[4]=0xc3;  // CR
;;;6818   	command_with_crc[5]=0x55;  // LF
;;;6819   	command_with_crc[6]=0xd2;  // 1
;;;6820   	command_with_crc[7]=0xd2;  // CR
;;;6821   	command_with_crc[8]=0xc5;  // LF
;;;6822   	command_with_crc[9]=0x28;  // 1
;;;6823   	command_with_crc[10]=0xa9;  // CR
;;;6824   	command_with_crc[11]=0x03;  // LF
;;;6825   	command_with_crc[12]=0x5a;  // LF
;;;6826   		
;;;6827   	uart_out__adr1(command_with_crc,13);
;;;6828   	
;;;6829   	rx_wr_index1=0;
;;;6830   	rx_read_power_cnt_phase=9;
;;;6831   
;;;6832   	read_power_cnt_main_cnt=50;
;;;6833   	}  
;;;6834   
;;;6835   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6836   	{
;;;6837   	char command_with_crc[20];
;;;6838   	
;;;6839   	command_with_crc[0]=0x81;  //  		01
;;;6840   	command_with_crc[1]=0xd2;  // R		52
;;;6841   	command_with_crc[2]=0xb1;  // 1		31
;;;6842   	command_with_crc[3]=0x82;  // 		02
;;;6843   	command_with_crc[4]=0x50;  // P		50
;;;6844   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6845   	command_with_crc[6]=0xd7;  // W		57
;;;6846   	command_with_crc[7]=0xc5;  // E		45
;;;6847   	command_with_crc[8]=0x50;  // P		50
;;;6848   	command_with_crc[9]=0x28;  // (		28
;;;6849   	command_with_crc[10]=0xa9;  // )	29
;;;6850   	command_with_crc[11]=0x03;  // 		03
;;;6851   	command_with_crc[12]=0xe4;  // d	64
;;;6852   		
;;;6853   	uart_out__adr1(command_with_crc,13);
;;;6854   	
;;;6855   	rx_wr_index1=0;
;;;6856   	rx_read_power_cnt_phase=21;
;;;6857   
;;;6858   	read_power_cnt_main_cnt=50;
;;;6859   	}  
;;;6860   
;;;6861   
;;;6862   #endif
;;;6863   }
;;;6864   
                          ENDP

                  ips_current_average_hndl PROC
;;;6865   //-----------------------------------------------
;;;6866   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
0047c0  e92d4ff0          PUSH     {r4-r11,lr}
;;;6867   {
0047c4  b089              SUB      sp,sp,#0x24
;;;6868   
;;;6869   if(++ica_timer_cnt>=10) 
0047c6  4e37              LDR      r6,|L1.18596|
;;;6870   	{
;;;6871   	ica_timer_cnt=0;
0047c8  2400              MOVS     r4,#0
0047ca  7830              LDRB     r0,[r6,#0]            ;6869  ; ica_timer_cnt
0047cc  1c40              ADDS     r0,r0,#1              ;6869
0047ce  b2c0              UXTB     r0,r0                 ;6869
0047d0  7030              STRB     r0,[r6,#0]            ;6869
0047d2  280a              CMP      r0,#0xa               ;6869
0047d4  d300              BCC      |L1.18392|
0047d6  7034              STRB     r4,[r6,#0]
                  |L1.18392|
;;;6872   	}
;;;6873   
;;;6874   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
0047d8  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
0047da  4f33              LDR      r7,|L1.18600|
;;;6875   	{
;;;6876   	
;;;6877   	ica_plazma[0]++;
;;;6878   
;;;6879   	ica_my_current=bps_I;
;;;6880   
;;;6881   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
0047dc  f8dfb0cc          LDR      r11,|L1.18604|
0047e0  4d20              LDR      r5,|L1.18532|
0047e2  bbe8              CBNZ     r0,|L1.18528|
0047e4  7fa8              LDRB     r0,[r5,#0x1e]         ;6874  ; num_of_wrks_bps
0047e6  b3d8              CBZ      r0,|L1.18528|
0047e8  f8950023          LDRB     r0,[r5,#0x23]         ;6874  ; spc_stat
0047ec  7969              LDRB     r1,[r5,#5]            ;6874  ; vz1_stat
0047ee  4308              ORRS     r0,r0,r1              ;6874
0047f0  79e9              LDRB     r1,[r5,#7]            ;6874  ; vz2_stat
0047f2  4308              ORRS     r0,r0,r1              ;6874
0047f4  7839              LDRB     r1,[r7,#0]            ;6874  ; sp_ch_stat
0047f6  4308              ORRS     r0,r0,r1              ;6874
0047f8  d17f              BNE      |L1.18682|
0047fa  f8df90b4          LDR      r9,|L1.18608|
0047fe  f8990000          LDRB     r0,[r9,#0]            ;6877  ; ica_plazma
004802  f1000001          ADD      r0,r0,#1              ;6877
004806  f8890000          STRB     r0,[r9,#0]            ;6877
00480a  482a              LDR      r0,|L1.18612|
00480c  f9b01000          LDRSH    r1,[r0,#0]            ;6879  ; bps_I
004810  4829              LDR      r0,|L1.18616|
004812  8001              STRH     r1,[r0,#0]            ;6879
004814  4829              LDR      r0,|L1.18620|
;;;6882   		{
;;;6883   		ica_plazma[1]++;
;;;6884   		ica_u_necc--;
004816  f8dfa0a8          LDR      r10,|L1.18624|
00481a  f9b02000          LDRSH    r2,[r0,#0]            ;6881  ; ica_your_current
00481e  4648              MOV      r0,r9                 ;6877
004820  f9bac000          LDRSH    r12,[r10,#0]
004824  7843              LDRB     r3,[r0,#1]            ;6883
004826  4827              LDR      r0,|L1.18628|
004828  4291              CMP      r1,r2                 ;6881
00482a  f9b08000          LDRSH    r8,[r0,#0]            ;6881
00482e  4658              MOV      r0,r11                ;6881
004830  f9b00000          LDRSH    r0,[r0,#0]            ;6881
004834  dd48              BLE      |L1.18632|
004836  eba10e02          SUB      lr,r1,r2              ;6881
00483a  f1be0f05          CMP      lr,#5                 ;6881
00483e  db43              BLT      |L1.18632|
004840  2801              CMP      r0,#1                 ;6881
004842  d004              BEQ      |L1.18510|
004844  2802              CMP      r0,#2                 ;6881
004846  d13f              BNE      |L1.18632|
004848  f1b80f05          CMP      r8,#5                 ;6881
00484c  dd3c              BLE      |L1.18632|
                  |L1.18510|
00484e  f1030301          ADD      r3,r3,#1              ;6883
004852  f8893001          STRB     r3,[r9,#1]            ;6883
004856  f1ac0c01          SUB      r12,r12,#1
00485a  f8aac000          STRH     r12,[r10,#0]
00485e  e047              B        |L1.18672|
                  |L1.18528|
004860  e04b              B        |L1.18682|
004862  0000              DCW      0x0000
                  |L1.18532|
                          DCD      ||area_number.25||
                  |L1.18536|
                          DCD      bps
                  |L1.18540|
                          DCD      mess_data
                  |L1.18544|
                          DCD      NUMIST
                  |L1.18548|
                          DCD      num_necc
                  |L1.18552|
                          DCD      main_1Hz_cnt
                  |L1.18556|
                          DCD      ipsBlckStat
                  |L1.18560|
                          DCD      TSIGN
                  |L1.18564|
                          DCD      power_summary_tempo
                  |L1.18568|
                          DCD      power_summary_tempo_old
                  |L1.18572|
                          DCD      powerSummaryCnt
                  |L1.18576|
                          DCD      power_summary
                  |L1.18580|
                          DCD      power_current_tempo
                  |L1.18584|
                          DCD      power_current_tempo_old
                  |L1.18588|
                          DCD      powerCurrentCnt
                  |L1.18592|
                          DCD      power_current
                  |L1.18596|
                          DCD      ica_timer_cnt
                  |L1.18600|
                          DCD      sp_ch_stat
                  |L1.18604|
                          DCD      ICA_EN
                  |L1.18608|
                          DCD      ica_plazma
                  |L1.18612|
                          DCD      bps_I
                  |L1.18616|
                          DCD      ica_my_current
                  |L1.18620|
                          DCD      ica_your_current
                  |L1.18624|
                          DCD      ica_u_necc
                  |L1.18628|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18632|
;;;6885   		}
;;;6886   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
0048c8  4291              CMP      r1,r2
0048ca  da11              BGE      |L1.18672|
0048cc  1a51              SUBS     r1,r2,r1
0048ce  2905              CMP      r1,#5
0048d0  db0e              BLT      |L1.18672|
0048d2  2801              CMP      r0,#1
0048d4  d004              BEQ      |L1.18656|
0048d6  2802              CMP      r0,#2
0048d8  d10a              BNE      |L1.18672|
0048da  f1b80f05          CMP      r8,#5
0048de  dd07              BLE      |L1.18672|
                  |L1.18656|
;;;6887   		{
;;;6888   		ica_plazma[1]--;
0048e0  f1a30301          SUB      r3,r3,#1
0048e4  f8893001          STRB     r3,[r9,#1]
;;;6889   		ica_u_necc++;
0048e8  f10c0c01          ADD      r12,r12,#1
0048ec  f8aac000          STRH     r12,[r10,#0]
                  |L1.18672|
;;;6890   		}
;;;6891   	gran(&ica_u_necc,-100,100);
0048f0  2264              MOVS     r2,#0x64
0048f2  4251              RSBS     r1,r2,#0
0048f4  48fc              LDR      r0,|L1.19688|
0048f6  f7fffffe          BL       gran
                  |L1.18682|
;;;6892   	}
;;;6893   
;;;6894   
;;;6895   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
0048fa  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0048fe  2801              CMP      r0,#1
004900  d169              BNE      |L1.18902|
004902  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
004906  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004908  4308              ORRS     r0,r0,r1
00490a  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
00490c  4308              ORRS     r0,r0,r1
00490e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004910  4308              ORRS     r0,r0,r1
004912  d160              BNE      |L1.18902|
004914  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
004916  2800              CMP      r0,#0
004918  d05d              BEQ      |L1.18902|
;;;6896   	{
;;;6897   	
;;;6898   //	ica_connect_cnt++;
;;;6899   
;;;6900   	if(ica_timer_cnt==8)
00491a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6901   		{
;;;6902   		char modbus_buff[20],i;
;;;6903   		short crc_temp;
;;;6904   	
;;;6905   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00491c  4bf3              LDR      r3,|L1.19692|
;;;6906   		modbus_buff[1] = 4;
;;;6907   		modbus_buff[2] = 0;
;;;6908   		modbus_buff[3] = 2;
;;;6909   		modbus_buff[4] = 0;	
;;;6910   		modbus_buff[5] = 1;
;;;6911   	
;;;6912   		crc_temp= CRC16_2(modbus_buff,6);
;;;6913   	
;;;6914   		modbus_buff[6]= (char)crc_temp;
;;;6915   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6916   	
;;;6917   		if(ICA_CH==0)
00491e  4ff4              LDR      r7,|L1.19696|
004920  2808              CMP      r0,#8                 ;6900
004922  d05b              BEQ      |L1.18908|
;;;6918   			{
;;;6919   			for (i=0;i<8;i++)
;;;6920   				{
;;;6921   				putchar_sc16is700(modbus_buff[i]);
;;;6922   				}
;;;6923   			}
;;;6924   		else if(ICA_CH==2)
;;;6925   			{
;;;6926   			uart_out1 (5,4,0,2,0,1,0);
;;;6927   			}
;;;6928   		}
;;;6929   	else
;;;6930   		{
;;;6931   		char modbus_buff[20],i;
;;;6932   		short crc_temp, tempSSSS;
;;;6933   
;;;6934   		tempSSSS=cntrl_stat_old;
004924  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6935   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004928  48f2              LDR      r0,|L1.19700|
00492a  f06f0214          MVN      r2,#0x14
00492e  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004932  ebc01100          RSB      r1,r0,r0,LSL #4
004936  eb020c81          ADD      r12,r2,r1,LSL #2
00493a  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
00493e  4594              CMP      r12,r2
004940  d00b              BEQ      |L1.18778|
004942  f06f0c13          MVN      r12,#0x13
004946  eb0c0c81          ADD      r12,r12,r1,LSL #2
00494a  4594              CMP      r12,r2
00494c  d005              BEQ      |L1.18778|
00494e  f06f0c12          MVN      r12,#0x12
004952  eb0c0181          ADD      r1,r12,r1,LSL #2
004956  4291              CMP      r1,r2
004958  d101              BNE      |L1.18782|
                  |L1.18778|
00495a  f4404680          ORR      r6,r0,#0x4000
                  |L1.18782|
;;;6936   
;;;6937   
;;;6938   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00495e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004960  f88d0010          STRB     r0,[sp,#0x10]
;;;6939   		modbus_buff[1] = 6;
004964  f04f0006          MOV      r0,#6
004968  f88d0011          STRB     r0,[sp,#0x11]
;;;6940   		modbus_buff[2] = 0;
00496c  f88d4012          STRB     r4,[sp,#0x12]
;;;6941   		modbus_buff[3] = 100;
004970  f04f0064          MOV      r0,#0x64
004974  f88d0013          STRB     r0,[sp,#0x13]
;;;6942   		modbus_buff[4] = (char)(tempSSSS/256);	
004978  ea4f70e6          ASR      r0,r6,#31
00497c  eb066010          ADD      r0,r6,r0,LSR #24
004980  ea4f2120          ASR      r1,r0,#8
004984  f88d1014          STRB     r1,[sp,#0x14]
;;;6943   		modbus_buff[5] = (char)(tempSSSS%256);
004988  4630              MOV      r0,r6
00498a  f88d0015          STRB     r0,[sp,#0x15]
;;;6944   	
;;;6945   		crc_temp= CRC16_2(modbus_buff,6);
00498e  f04f0106          MOV      r1,#6
004992  a804              ADD      r0,sp,#0x10
004994  f7fffffe          BL       CRC16_2
;;;6946   	
;;;6947   		modbus_buff[6]= (char)crc_temp;
004998  f88d0016          STRB     r0,[sp,#0x16]
;;;6948   		modbus_buff[7]= (char)(crc_temp>>8);
00499c  ea4f2020          ASR      r0,r0,#8
0049a0  f88d0017          STRB     r0,[sp,#0x17]
;;;6949   	
;;;6950   		crc_temp= CRC16_2(modbus_buff,6);
0049a4  f04f0106          MOV      r1,#6
0049a8  a804              ADD      r0,sp,#0x10
0049aa  f7fffffe          BL       CRC16_2
;;;6951   	
;;;6952   		plazma_ica1=tempSSSS;
0049ae  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6953   		if(ICA_CH==0)
0049b2  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
0049b6  b3f0              CBZ      r0,|L1.18998|
;;;6954   			{
;;;6955   			for (i=0;i<8;i++)
;;;6956   				{
;;;6957   				putchar_sc16is700(modbus_buff[i]);
;;;6958   				}
;;;6959   			}
;;;6960   		else if(ICA_CH==2)
0049b8  2802              CMP      r0,#2
0049ba  d10c              BNE      |L1.18902|
;;;6961   			{
;;;6962   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
0049bc  f89d0015          LDRB     r0,[sp,#0x15]
0049c0  f89d1014          LDRB     r1,[sp,#0x14]
0049c4  e9cd0401          STRD     r0,r4,[sp,#4]
0049c8  9100              STR      r1,[sp,#0]
0049ca  2364              MOVS     r3,#0x64
0049cc  2200              MOVS     r2,#0
0049ce  2106              MOVS     r1,#6
0049d0  2005              MOVS     r0,#5
0049d2  f7fffffe          BL       uart_out1
                  |L1.18902|
;;;6963   			}
;;;6964   		}
;;;6965   	}
;;;6966   }
0049d6  b009              ADD      sp,sp,#0x24
0049d8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18908|
0049dc  8818              LDRH     r0,[r3,#0]            ;6905  ; ICA_MODBUS_ADDRESS
0049de  f88d0010          STRB     r0,[sp,#0x10]         ;6905
0049e2  f04f0004          MOV      r0,#4                 ;6906
0049e6  f88d0011          STRB     r0,[sp,#0x11]         ;6906
0049ea  f88d4012          STRB     r4,[sp,#0x12]         ;6907
0049ee  f04f0002          MOV      r0,#2                 ;6908
0049f2  f88d0013          STRB     r0,[sp,#0x13]         ;6908
0049f6  f88d4014          STRB     r4,[sp,#0x14]         ;6909
0049fa  f04f0501          MOV      r5,#1                 ;6910
0049fe  f88d5015          STRB     r5,[sp,#0x15]         ;6910
004a02  f04f0106          MOV      r1,#6                 ;6912
004a06  a804              ADD      r0,sp,#0x10           ;6912
004a08  f7fffffe          BL       CRC16_2
004a0c  f88d0016          STRB     r0,[sp,#0x16]         ;6914
004a10  ea4f2020          ASR      r0,r0,#8              ;6915
004a14  f88d0017          STRB     r0,[sp,#0x17]         ;6915
004a18  f9b70000          LDRSH    r0,[r7,#0]            ;6917  ; ICA_CH
004a1c  b160              CBZ      r0,|L1.19000|
004a1e  2802              CMP      r0,#2                 ;6924
004a20  d1d9              BNE      |L1.18902|
004a22  e9cd4500          STRD     r4,r5,[sp,#0]         ;6926
004a26  2302              MOVS     r3,#2                 ;6926
004a28  2200              MOVS     r2,#0                 ;6926
004a2a  2104              MOVS     r1,#4                 ;6926
004a2c  2005              MOVS     r0,#5                 ;6926
004a2e  9402              STR      r4,[sp,#8]            ;6926
004a30  f7fffffe          BL       uart_out1
004a34  e7cf              B        |L1.18902|
                  |L1.18998|
004a36  e00b              B        |L1.19024|
                  |L1.19000|
004a38  f04f0400          MOV      r4,#0                 ;6919
004a3c  ad04              ADD      r5,sp,#0x10           ;6902
                  |L1.19006|
004a3e  5d28              LDRB     r0,[r5,r4]            ;6921
004a40  f7fffffe          BL       putchar_sc16is700
004a44  f1040401          ADD      r4,r4,#1              ;6919
004a48  b2e4              UXTB     r4,r4                 ;6919
004a4a  2c08              CMP      r4,#8                 ;6919
004a4c  d3f7              BCC      |L1.19006|
004a4e  e7c2              B        |L1.18902|
                  |L1.19024|
004a50  f04f0400          MOV      r4,#0                 ;6955
004a54  ad04              ADD      r5,sp,#0x10           ;6931
                  |L1.19030|
004a56  5d28              LDRB     r0,[r5,r4]            ;6957
004a58  f7fffffe          BL       putchar_sc16is700
004a5c  f1040401          ADD      r4,r4,#1              ;6955
004a60  b2e4              UXTB     r4,r4                 ;6955
004a62  2c08              CMP      r4,#8                 ;6955
004a64  d3f7              BCC      |L1.19030|
004a66  e7b6              B        |L1.18902|
;;;6967   
                          ENDP

                  ipsBlckHndl PROC
;;;7050   //-----------------------------------------------
;;;7051   void ipsBlckHndl(char in)
004a68  b510              PUSH     {r4,lr}
;;;7052   {
;;;7053   
;;;7054   ipsBlckStat=0;
004a6a  4ba3              LDR      r3,|L1.19704|
004a6c  f04f0000          MOV      r0,#0
004a70  8018              STRH     r0,[r3,#0]
;;;7055   if(ipsBlckSrc==1)
004a72  48a2              LDR      r0,|L1.19708|
004a74  f04f0401          MOV      r4,#1
;;;7056   	{
;;;7057   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004a78  f44f62fa          MOV      r2,#0x7d0
004a7c  f9b01000          LDRSH    r1,[r0,#0]            ;7055  ; ipsBlckSrc
004a80  489f              LDR      r0,|L1.19712|
004a82  2901              CMP      r1,#1                 ;7055
004a84  f9b00000          LDRSH    r0,[r0,#0]
004a88  d006              BEQ      |L1.19096|
;;;7058   	}
;;;7059   else if(ipsBlckSrc==2)
004a8a  2902              CMP      r1,#2
004a8c  d10f              BNE      |L1.19118|
004a8e  499d              LDR      r1,|L1.19716|
;;;7060   	{
;;;7061   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
004a90  f9b1101a          LDRSH    r1,[r1,#0x1a]
004a94  b160              CBZ      r0,|L1.19120|
004a96  e00d              B        |L1.19124|
                  |L1.19096|
004a98  499a              LDR      r1,|L1.19716|
004a9a  f9b11016          LDRSH    r1,[r1,#0x16]         ;7057
004a9e  b908              CBNZ     r0,|L1.19108|
004aa0  4291              CMP      r1,r2                 ;7057
004aa2  dc03              BGT      |L1.19116|
                  |L1.19108|
004aa4  2801              CMP      r0,#1                 ;7057
004aa6  d102              BNE      |L1.19118|
004aa8  4291              CMP      r1,r2                 ;7057
004aaa  da00              BGE      |L1.19118|
                  |L1.19116|
004aac  801c              STRH     r4,[r3,#0]            ;7057
                  |L1.19118|
;;;7062   	}
;;;7063   }
004aae  bd10              POP      {r4,pc}
                  |L1.19120|
004ab0  4291              CMP      r1,r2                 ;7061
004ab2  dc03              BGT      |L1.19132|
                  |L1.19124|
004ab4  2801              CMP      r0,#1                 ;7061
004ab6  d1fa              BNE      |L1.19118|
004ab8  4291              CMP      r1,r2                 ;7061
004aba  daf8              BGE      |L1.19118|
                  |L1.19132|
004abc  801c              STRH     r4,[r3,#0]            ;7061
004abe  bd10              POP      {r4,pc}
;;;7064   
                          ENDP

                  bps_drv PROC
;;;7065   //-----------------------------------------------
;;;7066   void bps_drv(char in)
004ac0  e92d41f0          PUSH     {r4-r8,lr}
;;;7067   {
004ac4  4606              MOV      r6,r0
;;;7068   char temp;
;;;7069   
;;;7070   if (bps[in]._device!=dSRC) return;
004ac6  eb0600c6          ADD      r0,r6,r6,LSL #3
004aca  498f              LDR      r1,|L1.19720|
004acc  eb001006          ADD      r0,r0,r6,LSL #4
004ad0  f8112020          LDRB     r2,[r1,r0,LSL #2]
004ad4  2a03              CMP      r2,#3
004ad6  d17d              BNE      |L1.19412|
;;;7071   temp=bps[in]._flags_tm;
004ad8  eb010480          ADD      r4,r1,r0,LSL #2
004adc  f8945042          LDRB     r5,[r4,#0x42]
;;;7072   if(temp&(1<<AV_T))
004ae0  07a8              LSLS     r0,r5,#30
004ae2  d517              BPL      |L1.19220|
;;;7073   	{
;;;7074   	if(bps[in]._temp_av_cnt<1200) 
004ae4  f9b41046          LDRSH    r1,[r4,#0x46]
004ae8  f44f6296          MOV      r2,#0x4b0
004aec  4291              CMP      r1,r2
004aee  da22              BGE      |L1.19254|
;;;7075   		{
;;;7076   		bps[in]._temp_av_cnt++;
004af0  f1010101          ADD      r1,r1,#1
004af4  b208              SXTH     r0,r1
004af6  f8a40046          STRH     r0,[r4,#0x46]
;;;7077   		if(bps[in]._temp_av_cnt>=1200)
004afa  4290              CMP      r0,r2
004afc  db1b              BLT      |L1.19254|
;;;7078   			{
;;;7079   			bps[in]._temp_av_cnt=1200;
004afe  f8a42046          STRH     r2,[r4,#0x46]
;;;7080   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004b02  7860              LDRB     r0,[r4,#1]
004b04  07c0              LSLS     r0,r0,#31
004b06  d116              BNE      |L1.19254|
004b08  2201              MOVS     r2,#1
004b0a  2100              MOVS     r1,#0
004b0c  4630              MOV      r0,r6
004b0e  f7fffffe          BL       avar_bps_hndl
004b12  e010              B        |L1.19254|
                  |L1.19220|
;;;7081   			}
;;;7082   		}
;;;7083   	}
;;;7084   
;;;7085   else if(!(temp&(1<<AV_T)))
;;;7086   	{
;;;7087   	if(bps[in]._temp_av_cnt) 
004b14  f9b41046          LDRSH    r1,[r4,#0x46]
004b18  b169              CBZ      r1,|L1.19254|
;;;7088   		{
;;;7089   		bps[in]._temp_av_cnt--;
004b1a  f1a10101          SUB      r1,r1,#1
004b1e  b208              SXTH     r0,r1
004b20  f8a40046          STRH     r0,[r4,#0x46]
;;;7090   		if(!bps[in]._temp_av_cnt)
004b24  b938              CBNZ     r0,|L1.19254|
;;;7091   			{
;;;7092   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004b26  7860              LDRB     r0,[r4,#1]
004b28  07c0              LSLS     r0,r0,#31
004b2a  d004              BEQ      |L1.19254|
004b2c  2200              MOVS     r2,#0
004b2e  4611              MOV      r1,r2
004b30  4630              MOV      r0,r6
004b32  f7fffffe          BL       avar_bps_hndl
                  |L1.19254|
;;;7093   			}
;;;7094   		} 	
;;;7095   
;;;7096   	}
;;;7097   
;;;7098   if((temp&(1<<AVUMAX)))
004b36  0728              LSLS     r0,r5,#28
;;;7099   	{
;;;7100   	if(bps[in]._umax_av_cnt<10) 
;;;7101   		{
;;;7102   		bps[in]._umax_av_cnt++;
;;;7103   		if(bps[in]._umax_av_cnt>=10)
;;;7104   			{ 
;;;7105   			bps[in]._umax_av_cnt=10;
004b38  f04f080a          MOV      r8,#0xa
004b3c  f04f0700          MOV      r7,#0                 ;7080
004b40  d518              BPL      |L1.19316|
004b42  f9b41048          LDRSH    r1,[r4,#0x48]         ;7100
004b46  290a              CMP      r1,#0xa               ;7100
004b48  da29              BGE      |L1.19358|
004b4a  f1010101          ADD      r1,r1,#1              ;7102
004b4e  b208              SXTH     r0,r1                 ;7102
004b50  f8a40048          STRH     r0,[r4,#0x48]         ;7102
004b54  280a              CMP      r0,#0xa               ;7103
004b56  db22              BLT      |L1.19358|
004b58  f8a48048          STRH     r8,[r4,#0x48]
;;;7106   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004b5c  7860              LDRB     r0,[r4,#1]
004b5e  0780              LSLS     r0,r0,#30
004b60  d404              BMI      |L1.19308|
004b62  2201              MOVS     r2,#1
004b64  4611              MOV      r1,r2
004b66  4630              MOV      r0,r6
004b68  f7fffffe          BL       avar_bps_hndl
                  |L1.19308|
;;;7107   			apv_start(in);
004b6c  4630              MOV      r0,r6
004b6e  f7fffffe          BL       apv_start
004b72  e014              B        |L1.19358|
                  |L1.19316|
;;;7108   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;7109   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7110   				{
;;;7111   				apv_cnt[in,0]=APV_INIT;
;;;7112   				apv_cnt[in,1]=APV_INIT;
;;;7113   				apv_cnt[in,2]=APV_INIT;
;;;7114   				apv_flags[in]=afOFF;
;;;7115   				}				*/
;;;7116   						
;;;7117   			}
;;;7118   		} 
;;;7119   	}		
;;;7120   else if(!(temp&(1<<AVUMAX)))
;;;7121   	{
;;;7122   	if(bps[in]._umax_av_cnt>0) 
004b74  f9b41048          LDRSH    r1,[r4,#0x48]
004b78  2900              CMP      r1,#0
004b7a  dd0d              BLE      |L1.19352|
;;;7123   		{
;;;7124   		bps[in]._umax_av_cnt--;
004b7c  f1a10101          SUB      r1,r1,#1
004b80  b208              SXTH     r0,r1
004b82  f8a40048          STRH     r0,[r4,#0x48]
;;;7125   		if(bps[in]._umax_av_cnt==0)
004b86  b950              CBNZ     r0,|L1.19358|
;;;7126   			{
;;;7127   			bps[in]._umax_av_cnt=0;
;;;7128   			avar_bps_hndl(in,1,0);
004b88  f04f0200          MOV      r2,#0
004b8c  f04f0101          MOV      r1,#1
004b90  4630              MOV      r0,r6
004b92  f7fffffe          BL       avar_bps_hndl
004b96  e002              B        |L1.19358|
                  |L1.19352|
;;;7129   			//apv_stop(in);
;;;7130   	 //		apv_cnt[in,0]=0;
;;;7131   	//		apv_cnt[in,1]=0;
;;;7132   	 //		apv_cnt[in,2]=0;			
;;;7133   			}
;;;7134   		}
;;;7135   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004b98  da01              BGE      |L1.19358|
004b9a  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19358|
;;;7136   	}
;;;7137   
;;;7138   if(temp&(1<<AVUMIN))
004b9e  06e8              LSLS     r0,r5,#27
004ba0  d519              BPL      |L1.19414|
;;;7139   	{
;;;7140   	if(bps[in]._umin_av_cnt<10) 
004ba2  f9b4104a          LDRSH    r1,[r4,#0x4a]
004ba6  290a              CMP      r1,#0xa
004ba8  da23              BGE      |L1.19442|
;;;7141   		{
;;;7142   		bps[in]._umin_av_cnt++;
004baa  f1010101          ADD      r1,r1,#1
004bae  b208              SXTH     r0,r1
004bb0  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7143   		if(bps[in]._umin_av_cnt>=10)
004bb4  280a              CMP      r0,#0xa
004bb6  db1c              BLT      |L1.19442|
;;;7144   			{ 
;;;7145   			bps[in]._umin_av_cnt=10;
004bb8  f8a4804a          STRH     r8,[r4,#0x4a]
;;;7146   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004bbc  7860              LDRB     r0,[r4,#1]
004bbe  0740              LSLS     r0,r0,#29
004bc0  d404              BMI      |L1.19404|
004bc2  2201              MOVS     r2,#1
004bc4  2102              MOVS     r1,#2
004bc6  4630              MOV      r0,r6
004bc8  f7fffffe          BL       avar_bps_hndl
                  |L1.19404|
;;;7147   			apv_start(in);
004bcc  4630              MOV      r0,r6
004bce  f7fffffe          BL       apv_start
004bd2  e00e              B        |L1.19442|
                  |L1.19412|
004bd4  e0b1              B        |L1.19770|
                  |L1.19414|
;;;7148   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7149   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7150   				{
;;;7151   				apv_cnt[in,0]=APV_INIT;
;;;7152   				apv_cnt[in,1]=APV_INIT;
;;;7153   				apv_cnt[in,2]=APV_INIT;
;;;7154   				apv_flags[in]=afOFF;
;;;7155   				}*/				
;;;7156   			}
;;;7157   		} 
;;;7158   	}	
;;;7159   	
;;;7160   else if(!(temp&(1<<AVUMIN)))
;;;7161   	{
;;;7162   	if(bps[in]._umin_av_cnt) 
004bd6  f9b4004a          LDRSH    r0,[r4,#0x4a]
004bda  b150              CBZ      r0,|L1.19442|
;;;7163   		{
;;;7164   		bps[in]._umin_av_cnt--;
004bdc  f1a00001          SUB      r0,r0,#1
004be0  b200              SXTH     r0,r0
004be2  f8a4004a          STRH     r0,[r4,#0x4a]
;;;7165   		if(bps[in]._umin_av_cnt==0)
004be6  b920              CBNZ     r0,|L1.19442|
;;;7166   			{
;;;7167   			bps[in]._umin_av_cnt=0;
;;;7168   			avar_bps_hndl(in,2,0);
004be8  2200              MOVS     r2,#0
004bea  2102              MOVS     r1,#2
004bec  4630              MOV      r0,r6
004bee  f7fffffe          BL       avar_bps_hndl
                  |L1.19442|
;;;7169   			//apv_stop(in);
;;;7170   		//	apv_cnt[in,0]=0;
;;;7171   		//	apv_cnt[in,1]=0;
;;;7172   		//	apv_cnt[in,2]=0;
;;;7173   			}
;;;7174   		}
;;;7175   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;7176   	}
;;;7177   
;;;7178   if((bps[in]._Uii<(UB20-DU)))
004bf2  4846              LDR      r0,|L1.19724|
004bf4  69e1              LDR      r1,[r4,#0x1c]
004bf6  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004bfa  4845              LDR      r0,|L1.19728|
004bfc  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004c00  1a10              SUBS     r0,r2,r0
004c02  4281              CMP      r1,r0
004c04  da1d              BGE      |L1.19522|
;;;7179   	{
;;;7180   	if(bps[in]._state==bsWRK)
004c06  78a0              LDRB     r0,[r4,#2]
004c08  2801              CMP      r0,#1
004c0a  d128              BNE      |L1.19550|
;;;7181   		{
;;;7182   		if(bps[in]._umin_av_cnt_uku<300) 
004c0c  f9b4004c          LDRSH    r0,[r4,#0x4c]
004c10  f44f7196          MOV      r1,#0x12c
004c14  4288              CMP      r0,r1
004c16  da11              BGE      |L1.19516|
;;;7183   			{
;;;7184   			bps[in]._umin_av_cnt_uku++;
004c18  f1000001          ADD      r0,r0,#1
004c1c  b200              SXTH     r0,r0
004c1e  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7185   			if(bps[in]._umin_av_cnt_uku>=300)
004c22  4288              CMP      r0,r1
004c24  db1b              BLT      |L1.19550|
;;;7186   				{ 
;;;7187   				bps[in]._umin_av_cnt_uku=300;
004c26  f8a4104c          STRH     r1,[r4,#0x4c]
;;;7188   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004c2a  7860              LDRB     r0,[r4,#1]
004c2c  0740              LSLS     r0,r0,#29
004c2e  d416              BMI      |L1.19550|
004c30  2201              MOVS     r2,#1
004c32  2102              MOVS     r1,#2
004c34  4630              MOV      r0,r6
004c36  f7fffffe          BL       avar_bps_hndl
004c3a  e010              B        |L1.19550|
                  |L1.19516|
;;;7189   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;7190   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;7191   					{
;;;7192   					apv_cnt[in,0]=APV_INIT;
;;;7193   					apv_cnt[in,1]=APV_INIT;
;;;7194   					apv_cnt[in,2]=APV_INIT;
;;;7195   					apv_flags[in]=afOFF;
;;;7196   					}*/				
;;;7197   				}
;;;7198   			}
;;;7199   		else
;;;7200   			{
;;;7201   			bps[in]._umin_av_cnt_uku=0;
004c3c  f8a4704c          STRH     r7,[r4,#0x4c]
004c40  e00d              B        |L1.19550|
                  |L1.19522|
;;;7202   			} 
;;;7203   		}
;;;7204   	}	
;;;7205   	
;;;7206   else if(bps[in]._Uii>=(UB20-DU))
;;;7207   	{
;;;7208   	if(bps[in]._umin_av_cnt_uku) 
004c42  f9b4004c          LDRSH    r0,[r4,#0x4c]
004c46  b150              CBZ      r0,|L1.19550|
;;;7209   		{
;;;7210   		bps[in]._umin_av_cnt_uku--;
004c48  f1a00001          SUB      r0,r0,#1
004c4c  b200              SXTH     r0,r0
004c4e  f8a4004c          STRH     r0,[r4,#0x4c]
;;;7211   		if(bps[in]._umin_av_cnt_uku==0)
004c52  b920              CBNZ     r0,|L1.19550|
;;;7212   			{
;;;7213   			bps[in]._umin_av_cnt_uku=0;
;;;7214   			avar_bps_hndl(in,2,0);
004c54  2200              MOVS     r2,#0
004c56  2102              MOVS     r1,#2
004c58  4630              MOV      r0,r6
004c5a  f7fffffe          BL       avar_bps_hndl
                  |L1.19550|
;;;7215   		//	apv_cnt[in,0]=0;
;;;7216   		//	apv_cnt[in,1]=0;
;;;7217   		//	apv_cnt[in,2]=0;
;;;7218   			}
;;;7219   		}
;;;7220   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;7221   	}
;;;7222   
;;;7223   //bps[in]._state=bsOFF;
;;;7224   
;;;7225   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004c5e  7860              LDRB     r0,[r4,#1]
004c60  0700              LSLS     r0,r0,#28
004c62  d003              BEQ      |L1.19564|
004c64  f04f0004          MOV      r0,#4
004c68  70a0              STRB     r0,[r4,#2]
004c6a  e017              B        |L1.19612|
                  |L1.19564|
;;;7226   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004c6c  4829              LDR      r0,|L1.19732|
004c6e  7800              LDRB     r0,[r0,#0]  ; net_av
004c70  b130              CBZ      r0,|L1.19584|
004c72  78e0              LDRB     r0,[r4,#3]
004c74  2814              CMP      r0,#0x14
004c76  d903              BLS      |L1.19584|
;;;7227   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004c78  f04f0005          MOV      r0,#5
004c7c  70a0              STRB     r0,[r4,#2]
004c7e  e00d              B        |L1.19612|
                  |L1.19584|
;;;7228   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004c80  f8940042          LDRB     r0,[r4,#0x42]
004c84  0680              LSLS     r0,r0,#26
004c86  d503              BPL      |L1.19600|
004c88  f04f0002          MOV      r0,#2
004c8c  70a0              STRB     r0,[r4,#2]
004c8e  e005              B        |L1.19612|
                  |L1.19600|
;;;7229   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004c90  78e0              LDRB     r0,[r4,#3]
004c92  2814              CMP      r0,#0x14
004c94  d202              BCS      |L1.19612|
004c96  f04f0001          MOV      r0,#1
004c9a  70a0              STRB     r0,[r4,#2]
                  |L1.19612|
;;;7230   
;;;7231   
;;;7232   
;;;7233   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;7234   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;7235   //else bps[0]._state=ssNOT;
;;;7236   
;;;7237   //bps[in]._is_ready=0;
;;;7238   //bps[in]._is_wrk=0;
;;;7239   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;7240   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;7241   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;7242   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;7243   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7244   //	{
;;;7245   //	bps[in]._flags_bp='B';// заблокирован
;;;7246   //	bps[in]._is_ready=1;
;;;7247   //	}
;;;7248   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7249   //     {
;;;7250   //     bps[in]._flags_bp='W';// работает
;;;7251   //     bps[in]._is_ready=1;
;;;7252   //     bps[in]._is_wrk=1;
;;;7253        
;;;7254   //     }
;;;7255   //else bps[in]._is_ready=1;     
;;;7256   
;;;7257   
;;;7258   
;;;7259   
;;;7260   
;;;7261   /*
;;;7262   bps[in]._flags_tu&=BIN8(11111110);
;;;7263   if(bps[in]._ist_blok_cnt)
;;;7264   	{
;;;7265   	bps[in]._ist_blok_cnt--;
;;;7266   	bps[in]._flags_tu|=BIN8(1);
;;;7267   	}
;;;7268   
;;;7269   	   */ 
;;;7270   
;;;7271   //Пересброс БПСа при потере связи
;;;7272   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004c9c  78e0              LDRB     r0,[r4,#3]
004c9e  280a              CMP      r0,#0xa
004ca0  d306              BCC      |L1.19632|
004ca2  f894002c          LDRB     r0,[r4,#0x2c]
004ca6  f0400080          ORR      r0,r0,#0x80
004caa  f884002c          STRB     r0,[r4,#0x2c]
004cae  e005              B        |L1.19644|
                  |L1.19632|
;;;7273   else bps[in]._flags_tu&=BIN8(1111111);
004cb0  f894002c          LDRB     r0,[r4,#0x2c]
004cb4  f000007f          AND      r0,r0,#0x7f
004cb8  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19644|
;;;7274   
;;;7275   if(avar_bps_reset_cnt) 
004cbc  4816              LDR      r0,|L1.19736|
004cbe  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004cc2  b139              CBZ      r1,|L1.19668|
;;;7276   	{
;;;7277   	bps[in]._flags_tu|=BIN8(10);
004cc4  f894102c          LDRB     r1,[r4,#0x2c]
004cc8  f0410102          ORR      r1,r1,#2
004ccc  f884102c          STRB     r1,[r4,#0x2c]
;;;7278   	bps[in]._av=0;
004cd0  7067              STRB     r7,[r4,#1]
004cd2  e029              B        |L1.19752|
                  |L1.19668|
;;;7279   	}
;;;7280   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004cd4  f8941062          LDRB     r1,[r4,#0x62]
004cd8  b301              CBZ      r1,|L1.19740|
004cda  f894102c          LDRB     r1,[r4,#0x2c]
004cde  f0410102          ORR      r1,r1,#2
004ce2  f884102c          STRB     r1,[r4,#0x2c]
004ce6  e01f              B        |L1.19752|
                  |L1.19688|
                          DCD      ica_u_necc
                  |L1.19692|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19696|
                          DCD      ICA_CH
                  |L1.19700|
                          DCD      TBAT
                  |L1.19704|
                          DCD      ipsBlckStat
                  |L1.19708|
                          DCD      ipsBlckSrc
                  |L1.19712|
                          DCD      ipsBlckLog
                  |L1.19716|
                          DCD      ||.bss||+0x40c
                  |L1.19720|
                          DCD      bps
                  |L1.19724|
                          DCD      UB20
                  |L1.19728|
                          DCD      ||DU||
                  |L1.19732|
                          DCD      net_av
                  |L1.19736|
                          DCD      ||area_number.25||
                  |L1.19740|
;;;7281   else bps[in]._flags_tu&=BIN8(11111101);
004d1c  f894102c          LDRB     r1,[r4,#0x2c]
004d20  f00101fd          AND      r1,r1,#0xfd
004d24  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19752|
;;;7282   	
;;;7283   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004d28  f9b41054          LDRSH    r1,[r4,#0x54]
004d2c  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004d30  4408              ADD      r0,r0,r1
004d32  6320              STR      r0,[r4,#0x30]
;;;7284   bps[in]._vol_i=1000;
004d34  f44f707a          MOV      r0,#0x3e8
004d38  6360              STR      r0,[r4,#0x34]
                  |L1.19770|
;;;7285   //bps[0]._vol_u=500;
;;;7286   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7287   }
004d3a  e8bd81f0          POP      {r4-r8,pc}
;;;7288   
                          ENDP

                  avt_hndl PROC
;;;7289   //-----------------------------------------------
;;;7290   void avt_hndl(void)
004d3e  b570              PUSH     {r4-r6,lr}
;;;7291   {
;;;7292   char i;
;;;7293   for(i=0;i<12;i++)
004d40  f04f0000          MOV      r0,#0
;;;7294   	{
;;;7295   	if(eb2_data_short[6]&(1<<i))
004d44  49f9              LDR      r1,|L1.20780|
;;;7296   		{
;;;7297   		avt_stat[i]=avtON;
004d46  4dfa              LDR      r5,|L1.20784|
004d48  f04f0401          MOV      r4,#1                 ;7295
004d4c  f9b1200c          LDRSH    r2,[r1,#0xc]          ;7295
004d50  4603              MOV      r3,r0                 ;7293
                  |L1.19794|
004d52  fa04f100          LSL      r1,r4,r0              ;7295
004d56  420a              TST      r2,r1                 ;7295
004d58  d001              BEQ      |L1.19806|
004d5a  542c              STRB     r4,[r5,r0]
004d5c  e000              B        |L1.19808|
                  |L1.19806|
;;;7298   		}
;;;7299   	else avt_stat[i]=avtOFF;
004d5e  542b              STRB     r3,[r5,r0]
                  |L1.19808|
004d60  f1000001          ADD      r0,r0,#1              ;7293
004d64  b2c0              UXTB     r0,r0                 ;7293
004d66  280c              CMP      r0,#0xc               ;7293
004d68  d3f3              BCC      |L1.19794|
;;;7300   	}
;;;7301   
;;;7302   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004d6a  4ef2              LDR      r6,|L1.20788|
004d6c  7828              LDRB     r0,[r5,#0]  ; avt_stat
004d6e  4cf2              LDR      r4,|L1.20792|
004d70  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004d72  4281              CMP      r1,r0
004d74  d00b              BEQ      |L1.19854|
004d76  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d7a  2901              CMP      r1,#1
004d7c  db07              BLT      |L1.19854|
;;;7303   	{
;;;7304   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004d7e  2801              CMP      r0,#1
004d80  d07e              BEQ      |L1.20096|
;;;7305   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004d82  2300              MOVS     r3,#0
004d84  2201              MOVS     r2,#1
004d86  210b              MOVS     r1,#0xb
004d88  a0ec              ADR      r0,|L1.20796|
004d8a  f7fffffe          BL       snmp_trap_send
                  |L1.19854|
;;;7306   	}
;;;7307   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004d8e  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004d90  7868              LDRB     r0,[r5,#1]  ; avt_stat
004d92  4281              CMP      r1,r0
004d94  d00b              BEQ      |L1.19886|
004d96  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d9a  2902              CMP      r1,#2
004d9c  db07              BLT      |L1.19886|
;;;7308   	{
;;;7309   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004d9e  2801              CMP      r0,#1
004da0  d06f              BEQ      |L1.20098|
;;;7310   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004da2  2300              MOVS     r3,#0
004da4  2202              MOVS     r2,#2
004da6  210b              MOVS     r1,#0xb
004da8  a0e9              ADR      r0,|L1.20816|
004daa  f7fffffe          BL       snmp_trap_send
                  |L1.19886|
;;;7311   	}
;;;7312   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004dae  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004db0  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004db2  4281              CMP      r1,r0
004db4  d00b              BEQ      |L1.19918|
004db6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dba  2903              CMP      r1,#3
004dbc  db07              BLT      |L1.19918|
;;;7313   	{
;;;7314   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004dbe  2801              CMP      r0,#1
004dc0  d072              BEQ      |L1.20136|
;;;7315   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004dc2  2300              MOVS     r3,#0
004dc4  2203              MOVS     r2,#3
004dc6  210b              MOVS     r1,#0xb
004dc8  a0e6              ADR      r0,|L1.20836|
004dca  f7fffffe          BL       snmp_trap_send
                  |L1.19918|
;;;7316   	}
;;;7317   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004dce  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004dd0  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004dd2  4281              CMP      r1,r0
004dd4  d00b              BEQ      |L1.19950|
004dd6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dda  2904              CMP      r1,#4
004ddc  db07              BLT      |L1.19950|
;;;7318   	{
;;;7319   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004dde  2801              CMP      r0,#1
004de0  d079              BEQ      |L1.20182|
;;;7320   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004de2  2300              MOVS     r3,#0
004de4  2204              MOVS     r2,#4
004de6  210b              MOVS     r1,#0xb
004de8  a0e3              ADR      r0,|L1.20856|
004dea  f7fffffe          BL       snmp_trap_send
                  |L1.19950|
;;;7321   	}
;;;7322   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004dee  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004df0  7928              LDRB     r0,[r5,#4]  ; avt_stat
004df2  4281              CMP      r1,r0
004df4  d00b              BEQ      |L1.19982|
004df6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dfa  2905              CMP      r1,#5
004dfc  db07              BLT      |L1.19982|
;;;7323   	{
;;;7324   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004dfe  2801              CMP      r0,#1
004e00  d071              BEQ      |L1.20198|
;;;7325   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004e02  2300              MOVS     r3,#0
004e04  2205              MOVS     r2,#5
004e06  210b              MOVS     r1,#0xb
004e08  a0e0              ADR      r0,|L1.20876|
004e0a  f7fffffe          BL       snmp_trap_send
                  |L1.19982|
;;;7326   	}
;;;7327   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004e0e  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004e10  7968              LDRB     r0,[r5,#5]  ; avt_stat
004e12  4281              CMP      r1,r0
004e14  d00b              BEQ      |L1.20014|
004e16  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e1a  2906              CMP      r1,#6
004e1c  db07              BLT      |L1.20014|
;;;7328   	{
;;;7329   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004e1e  2801              CMP      r0,#1
004e20  d068              BEQ      |L1.20212|
;;;7330   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004e22  2300              MOVS     r3,#0
004e24  2206              MOVS     r2,#6
004e26  210b              MOVS     r1,#0xb
004e28  a0dd              ADR      r0,|L1.20896|
004e2a  f7fffffe          BL       snmp_trap_send
                  |L1.20014|
;;;7331   	}
;;;7332   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004e2e  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004e30  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004e32  4281              CMP      r1,r0
004e34  d00b              BEQ      |L1.20046|
004e36  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e3a  2907              CMP      r1,#7
004e3c  db07              BLT      |L1.20046|
;;;7333   	{
;;;7334   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004e3e  2801              CMP      r0,#1
004e40  d05f              BEQ      |L1.20226|
;;;7335   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004e42  2300              MOVS     r3,#0
004e44  2207              MOVS     r2,#7
004e46  210b              MOVS     r1,#0xb
004e48  a0da              ADR      r0,|L1.20916|
004e4a  f7fffffe          BL       snmp_trap_send
                  |L1.20046|
;;;7336   	}
;;;7337   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004e4e  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004e50  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004e52  4281              CMP      r1,r0
004e54  d00b              BEQ      |L1.20078|
004e56  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e5a  2908              CMP      r1,#8
004e5c  db07              BLT      |L1.20078|
;;;7338   	{
;;;7339   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004e5e  2801              CMP      r0,#1
004e60  d056              BEQ      |L1.20240|
;;;7340   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004e62  2300              MOVS     r3,#0
004e64  2208              MOVS     r2,#8
004e66  210b              MOVS     r1,#0xb
004e68  a0d7              ADR      r0,|L1.20936|
004e6a  f7fffffe          BL       snmp_trap_send
                  |L1.20078|
;;;7341   	}
;;;7342   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004e6e  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004e70  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004e72  4281              CMP      r1,r0
004e74  d00e              BEQ      |L1.20116|
004e76  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e7a  2909              CMP      r1,#9
004e7c  db0a              BLT      |L1.20116|
;;;7343   	{
;;;7344   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004e7e  e001              B        |L1.20100|
                  |L1.20096|
004e80  e013              B        |L1.20138|
                  |L1.20098|
004e82  e019              B        |L1.20152|
                  |L1.20100|
004e84  2801              CMP      r0,#1
004e86  d04a              BEQ      |L1.20254|
;;;7345   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004e88  2300              MOVS     r3,#0
004e8a  2209              MOVS     r2,#9
004e8c  210b              MOVS     r1,#0xb
004e8e  a0d3              ADR      r0,|L1.20956|
004e90  f7fffffe          BL       snmp_trap_send
                  |L1.20116|
;;;7346   	}
;;;7347   
;;;7348   for(i=0;i<12;i++)
004e94  f04f0000          MOV      r0,#0
                  |L1.20120|
;;;7349   	{
;;;7350   	avt_stat_old[i]=avt_stat[i];
004e98  5c29              LDRB     r1,[r5,r0]
004e9a  5431              STRB     r1,[r6,r0]
004e9c  f1000001          ADD      r0,r0,#1              ;7348
004ea0  b2c0              UXTB     r0,r0                 ;7348
004ea2  280c              CMP      r0,#0xc               ;7348
004ea4  d3f8              BCC      |L1.20120|
                  |L1.20134|
;;;7351   	}
;;;7352   }
004ea6  bd70              POP      {r4-r6,pc}
                  |L1.20136|
004ea8  e00e              B        |L1.20168|
                  |L1.20138|
004eaa  2301              MOVS     r3,#1                 ;7304
004eac  461a              MOV      r2,r3                 ;7304
004eae  210b              MOVS     r1,#0xb               ;7304
004eb0  a0cf              ADR      r0,|L1.20976|
004eb2  f7fffffe          BL       snmp_trap_send
004eb6  e76a              B        |L1.19854|
                  |L1.20152|
004eb8  2301              MOVS     r3,#1                 ;7309
004eba  2202              MOVS     r2,#2                 ;7309
004ebc  210b              MOVS     r1,#0xb               ;7309
004ebe  a0d1              ADR      r0,|L1.20996|
004ec0  f7fffffe          BL       snmp_trap_send
004ec4  e773              B        |L1.19886|
004ec6  e006              B        |L1.20182|
                  |L1.20168|
004ec8  2301              MOVS     r3,#1                 ;7314
004eca  2203              MOVS     r2,#3                 ;7314
004ecc  210b              MOVS     r1,#0xb               ;7314
004ece  a0d2              ADR      r0,|L1.21016|
004ed0  f7fffffe          BL       snmp_trap_send
004ed4  e77b              B        |L1.19918|
                  |L1.20182|
004ed6  2301              MOVS     r3,#1                 ;7319
004ed8  2204              MOVS     r2,#4                 ;7319
004eda  210b              MOVS     r1,#0xb               ;7319
004edc  a0d3              ADR      r0,|L1.21036|
004ede  f7fffffe          BL       snmp_trap_send
004ee2  e784              B        |L1.19950|
004ee4  e7ff              B        |L1.20198|
                  |L1.20198|
004ee6  2301              MOVS     r3,#1                 ;7324
004ee8  2205              MOVS     r2,#5                 ;7324
004eea  210b              MOVS     r1,#0xb               ;7324
004eec  a0d4              ADR      r0,|L1.21056|
004eee  f7fffffe          BL       snmp_trap_send
004ef2  e78c              B        |L1.19982|
                  |L1.20212|
004ef4  2301              MOVS     r3,#1                 ;7329
004ef6  2206              MOVS     r2,#6                 ;7329
004ef8  210b              MOVS     r1,#0xb               ;7329
004efa  a0d6              ADR      r0,|L1.21076|
004efc  f7fffffe          BL       snmp_trap_send
004f00  e795              B        |L1.20014|
                  |L1.20226|
004f02  2301              MOVS     r3,#1                 ;7334
004f04  2207              MOVS     r2,#7                 ;7334
004f06  210b              MOVS     r1,#0xb               ;7334
004f08  a0d7              ADR      r0,|L1.21096|
004f0a  f7fffffe          BL       snmp_trap_send
004f0e  e79e              B        |L1.20046|
                  |L1.20240|
004f10  2301              MOVS     r3,#1                 ;7339
004f12  2208              MOVS     r2,#8                 ;7339
004f14  210b              MOVS     r1,#0xb               ;7339
004f16  a0d9              ADR      r0,|L1.21116|
004f18  f7fffffe          BL       snmp_trap_send
004f1c  e7a7              B        |L1.20078|
                  |L1.20254|
004f1e  2301              MOVS     r3,#1                 ;7344
004f20  2209              MOVS     r2,#9                 ;7344
004f22  210b              MOVS     r1,#0xb               ;7344
004f24  a0da              ADR      r0,|L1.21136|
004f26  f7fffffe          BL       snmp_trap_send
004f2a  e7b3              B        |L1.20116|
;;;7353   
                          ENDP

                  bat_hndl PROC
;;;7354   //-----------------------------------------------
;;;7355   void bat_hndl(void)
004f2c  b570              PUSH     {r4-r6,lr}
;;;7356   {
;;;7357   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7358   	{
;;;7359   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7360   		{
;;;7361   		char i;
;;;7362   		for(i=0;i<2;i++)
;;;7363   			{
;;;7364   			if(mess_data[1]&(1<<i))
;;;7365   				{
;;;7366   				bat[i]._cnt_to_block=0;
;;;7367        			bat[i]._rel_stat=0;
;;;7368        			}
;;;7369   			}
;;;7370   		}
;;;7371   	}
;;;7372   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7373   	{		
;;;7374   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7375   		{
;;;7376   		char i;
;;;7377   		for(i=0;i<2;i++)
;;;7378   			{
;;;7379   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7380   				{
;;;7381   				bat[i]._cnt_to_block=20;
;;;7382   				bat[i]._rel_stat=1;
;;;7383        			}
;;;7384   			}
;;;7385   		
;;;7386   		}		
;;;7387   	}*/
;;;7388   
;;;7389   if(mess_find_unvol(MESS2BAT_HNDL))
004f2e  20c8              MOVS     r0,#0xc8
004f30  f7fffffe          BL       mess_find_unvol
;;;7390   	{ 
;;;7391   	char i;
;;;7392   	
;;;7393   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7394   		{
;;;7395   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7396   			{
;;;7397   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004f34  4bdb              LDR      r3,|L1.21156|
004f36  2400              MOVS     r4,#0                 ;7395
004f38  b378              CBZ      r0,|L1.20378|
004f3a  49db              LDR      r1,|L1.21160|
;;;7398   			}
;;;7399   		}
;;;7400   
;;;7401   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7402   		{
;;;7403   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7404   			{
;;;7405   			if(mess_data[1]&(1<<i))
004f3c  2501              MOVS     r5,#1
004f3e  6808              LDR      r0,[r1,#0]            ;7393  ; mess_data
004f40  28c9              CMP      r0,#0xc9              ;7393
004f42  d018              BEQ      |L1.20342|
004f44  28ca              CMP      r0,#0xca              ;7401
004f46  d029              BEQ      |L1.20380|
;;;7406   				{
;;;7407   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7408   				}
;;;7409   			else bat[i]._cnt_to_block=0;
;;;7410   			}
;;;7411   		}
;;;7412   	else 
;;;7413   	 	{
;;;7414   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004f48  4620              MOV      r0,r4
                  |L1.20298|
;;;7415   			{
;;;7416   			bat[i]._cnt_to_block=0;
004f4a  eb000180          ADD      r1,r0,r0,LSL #2
004f4e  eb031101          ADD      r1,r3,r1,LSL #4
004f52  700c              STRB     r4,[r1,#0]
004f54  f1000001          ADD      r0,r0,#1              ;7414
004f58  b2c0              UXTB     r0,r0                 ;7414
004f5a  2802              CMP      r0,#2                 ;7414
004f5c  d3f5              BCC      |L1.20298|
                  |L1.20318|
;;;7417   			}
;;;7418   
;;;7419   		}
;;;7420   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004f5e  f04f0000          MOV      r0,#0
                  |L1.20322|
;;;7421   		{
;;;7422   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004f62  eb000180          ADD      r1,r0,r0,LSL #2
004f66  eb031101          ADD      r1,r3,r1,LSL #4
004f6a  780a              LDRB     r2,[r1,#0]
004f6c  2a14              CMP      r2,#0x14
004f6e  d932              BLS      |L1.20438|
004f70  f8815040          STRB     r5,[r1,#0x40]
004f74  e031              B        |L1.20442|
                  |L1.20342|
004f76  f04f0000          MOV      r0,#0                 ;7395
                  |L1.20346|
004f7a  eb000180          ADD      r1,r0,r0,LSL #2       ;7397
004f7e  eb031201          ADD      r2,r3,r1,LSL #4       ;7397
004f82  7811              LDRB     r1,[r2,#0]            ;7397
004f84  2932              CMP      r1,#0x32              ;7397
004f86  d202              BCS      |L1.20366|
004f88  f1010101          ADD      r1,r1,#1              ;7397
004f8c  7011              STRB     r1,[r2,#0]            ;7397
                  |L1.20366|
004f8e  f1000001          ADD      r0,r0,#1              ;7395
004f92  b2c0              UXTB     r0,r0                 ;7395
004f94  2802              CMP      r0,#2                 ;7395
004f96  d3f0              BCC      |L1.20346|
004f98  e7e1              B        |L1.20318|
                  |L1.20378|
004f9a  e024              B        |L1.20454|
                  |L1.20380|
004f9c  f04f0000          MOV      r0,#0                 ;7403
004fa0  684e              LDR      r6,[r1,#4]            ;7405
                  |L1.20386|
004fa2  fa05f100          LSL      r1,r5,r0              ;7405
004fa6  420e              TST      r6,r1                 ;7405
004fa8  d00a              BEQ      |L1.20416|
004faa  eb000180          ADD      r1,r0,r0,LSL #2       ;7407
004fae  eb031201          ADD      r2,r3,r1,LSL #4       ;7407
004fb2  7811              LDRB     r1,[r2,#0]            ;7407
004fb4  2932              CMP      r1,#0x32              ;7407
004fb6  d208              BCS      |L1.20426|
004fb8  f1010101          ADD      r1,r1,#1              ;7407
004fbc  7011              STRB     r1,[r2,#0]            ;7407
004fbe  e004              B        |L1.20426|
                  |L1.20416|
004fc0  eb000180          ADD      r1,r0,r0,LSL #2       ;7409
004fc4  eb031101          ADD      r1,r3,r1,LSL #4       ;7409
004fc8  700c              STRB     r4,[r1,#0]            ;7409
                  |L1.20426|
004fca  f1000001          ADD      r0,r0,#1              ;7403
004fce  b2c0              UXTB     r0,r0                 ;7403
004fd0  2802              CMP      r0,#2                 ;7403
004fd2  d3e6              BCC      |L1.20386|
004fd4  e7c3              B        |L1.20318|
                  |L1.20438|
;;;7423   		else bat[i]._rel_stat=0;
004fd6  f8814040          STRB     r4,[r1,#0x40]
                  |L1.20442|
004fda  f1000001          ADD      r0,r0,#1              ;7420
004fde  b2c0              UXTB     r0,r0                 ;7420
004fe0  2802              CMP      r0,#2                 ;7420
004fe2  d3be              BCC      |L1.20322|
;;;7424   		}
;;;7425   
;;;7426   	}
;;;7427   
;;;7428   else 
;;;7429   	{
;;;7430   	char i;
;;;7431   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7432   		{
;;;7433   		bat[i]._cnt_to_block=0;
;;;7434   		bat[i]._rel_stat=0;
;;;7435   		}
;;;7436   
;;;7437   	}
;;;7438   
;;;7439   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7440   	{
;;;7441   	if(PARAM_BAT_ON)
;;;7442   		{
;;;7443   		char i;
;;;7444   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7445   			{
;;;7446   			if(mess_data[1]&(1<<i))
;;;7447   				{
;;;7448   				bat[i]._cnt_to_block=0;
;;;7449   				bat[i]._rel_stat=0;
;;;7450   				}
;;;7451   			}
;;;7452   		}
;;;7453   	} */
;;;7454   }
004fe4  e75f              B        |L1.20134|
                  |L1.20454|
004fe6  f04f0000          MOV      r0,#0                 ;7431
                  |L1.20458|
004fea  eb000180          ADD      r1,r0,r0,LSL #2       ;7433
004fee  eb031101          ADD      r1,r3,r1,LSL #4       ;7433
004ff2  700c              STRB     r4,[r1,#0]            ;7433
004ff4  f8814040          STRB     r4,[r1,#0x40]         ;7434
004ff8  f1000001          ADD      r0,r0,#1              ;7431
004ffc  b2c0              UXTB     r0,r0                 ;7431
004ffe  2802              CMP      r0,#2                 ;7431
005000  d3f3              BCC      |L1.20458|
005002  e750              B        |L1.20134|
;;;7455   
                          ENDP

                  bat_drv PROC
;;;8093   //-----------------------------------------------
;;;8094   void bat_drv(char in)
005004  e92d4ffe          PUSH     {r1-r11,lr}
;;;8095   {
005008  4605              MOV      r5,r0
;;;8096   unsigned short /*tempUS,*/tempUS_;
;;;8097   unsigned long tempUL,tempUL_;
;;;8098   unsigned short b_zar;
;;;8099   //static unsigned short time_cnt[2];
;;;8100   
;;;8101   
;;;8102   
;;;8103   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
00500a  49a8              LDR      r1,|L1.21164|
00500c  f9310015          LDRSH    r0,[r1,r5,LSL #1]
005010  b118              CBZ      r0,|L1.20506|
005012  f1a00001          SUB      r0,r0,#1
005016  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20506|
;;;8104   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
00501a  4aa4              LDR      r2,|L1.21164|
00501c  1d12              ADDS     r2,r2,#4
00501e  f9320015          LDRSH    r0,[r2,r5,LSL #1]
005022  b118              CBZ      r0,|L1.20524|
005024  f1a00001          SUB      r0,r0,#1
005028  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20524|
;;;8105   
;;;8106   
;;;8107   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
00502c  4b9d              LDR      r3,|L1.21156|
00502e  eb050085          ADD      r0,r5,r5,LSL #2
005032  eb031400          ADD      r4,r3,r0,LSL #4
005036  4b9e              LDR      r3,|L1.21168|
005038  9002              STR      r0,[sp,#8]
00503a  f9b40008          LDRSH    r0,[r4,#8]
00503e  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
005042  2364              MOVS     r3,#0x64
005044  42b0              CMP      r0,r6
005046  dd01              BLE      |L1.20556|
005048  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20556|
;;;8108   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
00504c  2800              CMP      r0,#0
00504e  da01              BGE      |L1.20564|
005050  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20564|
;;;8109   
;;;8110   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;8111        {
;;;8112        if(!cntrl_stat_blok_cnt_)
005054  4895              LDR      r0,|L1.21164|
005056  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;8110
00505a  38b4              SUBS     r0,r0,#0xb4
00505c  2700              MOVS     r7,#0
00505e  b14b              CBZ      r3,|L1.20596|
005060  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;8110
005064  b133              CBZ      r3,|L1.20596|
005066  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
00506a  b1a3              CBZ      r3,|L1.20630|
;;;8113             {
;;;8114             cntrl_stat_blok_cnt_=600; 
;;;8115             cntrl_stat_blok_cnt_plus[in]=0;
;;;8116             cntrl_stat_blok_cnt_minus[in]=0;
;;;8117             }
;;;8118        else cntrl_stat_blok_cnt=3000;
00506c  f64031b8          MOV      r1,#0xbb8
005070  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.20596|
;;;8119        }
;;;8120   cntrl_stat_blok_cnt=0;
005074  f8a07070          STRH     r7,[r0,#0x70]
;;;8121   
;;;8122   if(++(bat[in]._time_cnt)>=10)
005078  f8940042          LDRB     r0,[r4,#0x42]
00507c  1c40              ADDS     r0,r0,#1
00507e  b2c0              UXTB     r0,r0
005080  f8840042          STRB     r0,[r4,#0x42]
005084  280a              CMP      r0,#0xa
005086  d301              BCC      |L1.20620|
;;;8123   	{
;;;8124   	bat[in]._time_cnt=0;
005088  f8847042          STRB     r7,[r4,#0x42]
                  |L1.20620|
;;;8125   	//bat[in]._zar_cnt++;
;;;8126   	}
;;;8127   
;;;8128   if(main_10Hz_cnt==50)
00508c  4e89              LDR      r6,|L1.21172|
00508e  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005090  2832              CMP      r0,#0x32
005092  d009              BEQ      |L1.20648|
005094  e017              B        |L1.20678|
                  |L1.20630|
005096  f44f7316          MOV      r3,#0x258             ;8114
00509a  f8a03072          STRH     r3,[r0,#0x72]         ;8114
00509e  f8217015          STRH     r7,[r1,r5,LSL #1]     ;8115
0050a2  f8227015          STRH     r7,[r2,r5,LSL #1]     ;8116
0050a6  e7e5              B        |L1.20596|
                  |L1.20648|
;;;8129   	{
;;;8130   	if(!bat[in]._rel_stat)
0050a8  f8940040          LDRB     r0,[r4,#0x40]
0050ac  b958              CBNZ     r0,|L1.20678|
;;;8131   		{
;;;8132   		
;;;8133   		if(bat[in]._Ub<80) 
0050ae  f9b40002          LDRSH    r0,[r4,#2]
0050b2  2850              CMP      r0,#0x50
0050b4  da07              BGE      |L1.20678|
;;;8134   			{
;;;8135   			
;;;8136   			if(!(bat[in]._av&1))
0050b6  f8940041          LDRB     r0,[r4,#0x41]
0050ba  07c0              LSLS     r0,r0,#31
0050bc  d103              BNE      |L1.20678|
;;;8137   				{
;;;8138   				avar_bat_hndl(in,1);
0050be  2101              MOVS     r1,#1
0050c0  4628              MOV      r0,r5
0050c2  f7fffffe          BL       avar_bat_hndl
                  |L1.20678|
;;;8139   				//if(in==0)plazma_bat++;
;;;8140   				}
;;;8141   			}				
;;;8142   
;;;8143   		}
;;;8144   	}
;;;8145   
;;;8146   if(main_10Hz_cnt>200)
0050c6  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;8147   	{
;;;8148   	if(abs(bat[in]._Ib)>IKB) 
0050ca  4e7b              LDR      r6,|L1.21176|
0050cc  28c8              CMP      r0,#0xc8              ;8146
0050ce  dd0f              BLE      |L1.20720|
0050d0  f9b40008          LDRSH    r0,[r4,#8]
0050d4  f7fffffe          BL       abs
0050d8  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
0050dc  4288              CMP      r0,r1
0050de  dd07              BLE      |L1.20720|
;;;8149   		{
;;;8150   		if((bat[in]._av&1))avar_bat_hndl(in,0);
0050e0  f8940041          LDRB     r0,[r4,#0x41]
0050e4  07c0              LSLS     r0,r0,#31
0050e6  d003              BEQ      |L1.20720|
0050e8  2100              MOVS     r1,#0
0050ea  4628              MOV      r0,r5
0050ec  f7fffffe          BL       avar_bat_hndl
                  |L1.20720|
;;;8151   		}
;;;8152   	}
;;;8153   
;;;8154   #ifdef APSENERGIA
;;;8155   //if(bat[in]._Ib>(-IKB))
;;;8156   
;;;8157   
;;;8158   #endif
;;;8159   
;;;8160   if(bat[in]._Ib>(-IKB))
0050f0  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
0050f4  f9b40008          LDRSH    r0,[r4,#8]
0050f8  4249              RSBS     r1,r1,#0
0050fa  4288              CMP      r0,r1
0050fc  dd14              BLE      |L1.20776|
;;;8161   	{
;;;8162   	if(bat[in]._cnt_wrk<10)
0050fe  7be0              LDRB     r0,[r4,#0xf]
005100  280a              CMP      r0,#0xa
005102  d20d              BCS      |L1.20768|
;;;8163   		{
;;;8164   		bat[in]._cnt_wrk++;
005104  f1000001          ADD      r0,r0,#1
005108  b2c0              UXTB     r0,r0
00510a  73e0              STRB     r0,[r4,#0xf]
;;;8165   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
00510c  280a              CMP      r0,#0xa
00510e  d306              BCC      |L1.20766|
005110  7c20              LDRB     r0,[r4,#0x10]
005112  2800              CMP      r0,#0
005114  d003              BEQ      |L1.20766|
;;;8166   			{
;;;8167   			bat[in]._wrk=0;
005116  7427              STRB     r7,[r4,#0x10]
;;;8168   			//beep_init(0x7L,'O');
;;;8169   			//wrk_mem_hndl(0);
;;;8170   			wrk_mem_hndl(in);
005118  4628              MOV      r0,r5
00511a  f7fffffe          BL       wrk_mem_hndl
                  |L1.20766|
00511e  e133              B        |L1.21384|
                  |L1.20768|
;;;8171   			//plazma++;
;;;8172   			}
;;;8173   		}
;;;8174   	else bat[in]._cnt_wrk=10;	
005120  f04f000a          MOV      r0,#0xa
005124  73e0              STRB     r0,[r4,#0xf]
005126  e12f              B        |L1.21384|
                  |L1.20776|
005128  e0c8              B        |L1.21180|
00512a  0000              DCW      0x0000
                  |L1.20780|
                          DCD      eb2_data_short
                  |L1.20784|
                          DCD      avt_stat
                  |L1.20788|
                          DCD      avt_stat_old
                  |L1.20792|
                          DCD      NUMAVT
                  |L1.20796|
00513c  4176746f          DCB      "Avtomat #1 is OFF",0
005140  6d617420
005144  23312069
005148  73204f46
00514c  4600    
00514e  00                DCB      0
00514f  00                DCB      0
                  |L1.20816|
005150  4176746f          DCB      "Avtomat #2 is OFF",0
005154  6d617420
005158  23322069
00515c  73204f46
005160  4600    
005162  00                DCB      0
005163  00                DCB      0
                  |L1.20836|
005164  4176746f          DCB      "Avtomat #3 is OFF",0
005168  6d617420
00516c  23332069
005170  73204f46
005174  4600    
005176  00                DCB      0
005177  00                DCB      0
                  |L1.20856|
005178  4176746f          DCB      "Avtomat #4 is OFF",0
00517c  6d617420
005180  23342069
005184  73204f46
005188  4600    
00518a  00                DCB      0
00518b  00                DCB      0
                  |L1.20876|
00518c  4176746f          DCB      "Avtomat #5 is OFF",0
005190  6d617420
005194  23352069
005198  73204f46
00519c  4600    
00519e  00                DCB      0
00519f  00                DCB      0
                  |L1.20896|
0051a0  4176746f          DCB      "Avtomat #6 is OFF",0
0051a4  6d617420
0051a8  23362069
0051ac  73204f46
0051b0  4600    
0051b2  00                DCB      0
0051b3  00                DCB      0
                  |L1.20916|
0051b4  4176746f          DCB      "Avtomat #7 is OFF",0
0051b8  6d617420
0051bc  23372069
0051c0  73204f46
0051c4  4600    
0051c6  00                DCB      0
0051c7  00                DCB      0
                  |L1.20936|
0051c8  4176746f          DCB      "Avtomat #8 is OFF",0
0051cc  6d617420
0051d0  23382069
0051d4  73204f46
0051d8  4600    
0051da  00                DCB      0
0051db  00                DCB      0
                  |L1.20956|
0051dc  4176746f          DCB      "Avtomat #9 is OFF",0
0051e0  6d617420
0051e4  23392069
0051e8  73204f46
0051ec  4600    
0051ee  00                DCB      0
0051ef  00                DCB      0
                  |L1.20976|
0051f0  4176746f          DCB      "Avtomat #1 is ON ",0
0051f4  6d617420
0051f8  23312069
0051fc  73204f4e
005200  2000    
005202  00                DCB      0
005203  00                DCB      0
                  |L1.20996|
005204  4176746f          DCB      "Avtomat #2 is ON ",0
005208  6d617420
00520c  23322069
005210  73204f4e
005214  2000    
005216  00                DCB      0
005217  00                DCB      0
                  |L1.21016|
005218  4176746f          DCB      "Avtomat #3 is ON ",0
00521c  6d617420
005220  23332069
005224  73204f4e
005228  2000    
00522a  00                DCB      0
00522b  00                DCB      0
                  |L1.21036|
00522c  4176746f          DCB      "Avtomat #4 is ON ",0
005230  6d617420
005234  23342069
005238  73204f4e
00523c  2000    
00523e  00                DCB      0
00523f  00                DCB      0
                  |L1.21056|
005240  4176746f          DCB      "Avtomat #5 is ON ",0
005244  6d617420
005248  23352069
00524c  73204f4e
005250  2000    
005252  00                DCB      0
005253  00                DCB      0
                  |L1.21076|
005254  4176746f          DCB      "Avtomat #6 is ON ",0
005258  6d617420
00525c  23362069
005260  73204f4e
005264  2000    
005266  00                DCB      0
005267  00                DCB      0
                  |L1.21096|
005268  4176746f          DCB      "Avtomat #7 is ON ",0
00526c  6d617420
005270  23372069
005274  73204f4e
005278  2000    
00527a  00                DCB      0
00527b  00                DCB      0
                  |L1.21116|
00527c  4176746f          DCB      "Avtomat #8 is ON ",0
005280  6d617420
005284  23382069
005288  73204f4e
00528c  2000    
00528e  00                DCB      0
00528f  00                DCB      0
                  |L1.21136|
005290  4176746f          DCB      "Avtomat #9 is ON ",0
005294  6d617420
005298  23392069
00529c  73204f4e
0052a0  2000    
0052a2  00                DCB      0
0052a3  00                DCB      0
                  |L1.21156|
                          DCD      bat
                  |L1.21160|
                          DCD      mess_data
                  |L1.21164|
                          DCD      ||area_number.25||+0xb4
                  |L1.21168|
                          DCD      IZMAX
                  |L1.21172|
                          DCD      main_10Hz_cnt
                  |L1.21176|
                          DCD      IKB
                  |L1.21180|
;;;8175   	}	
;;;8176   
;;;8177   else if(bat[in]._Ib<(-IKB))
0052bc  da64              BGE      |L1.21384|
;;;8178   	{
;;;8179   	if(bat[in]._cnt_wrk)
0052be  7be0              LDRB     r0,[r4,#0xf]
0052c0  b3f0              CBZ      r0,|L1.21312|
;;;8180   		{
;;;8181   		bat[in]._cnt_wrk--;
0052c2  f1a00001          SUB      r0,r0,#1
0052c6  b2c0              UXTB     r0,r0
0052c8  73e0              STRB     r0,[r4,#0xf]
;;;8182   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
0052ca  bbc8              CBNZ     r0,|L1.21312|
0052cc  7c20              LDRB     r0,[r4,#0x10]
0052ce  bbb8              CBNZ     r0,|L1.21312|
;;;8183   			{
;;;8184   			bat[in]._wrk=1;
0052d0  f04f0001          MOV      r0,#1
0052d4  7420              STRB     r0,[r4,#0x10]
;;;8185   
;;;8186   				{
;;;8187   				char temp;
;;;8188   				signed short temp_temp;
;;;8189   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
0052d6  48ff              LDR      r0,|L1.22228|
0052d8  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
0052da  f1000001          ADD      r0,r0,#1
0052de  f0000007          AND      r0,r0,#7
0052e2  eb040040          ADD      r0,r4,r0,LSL #1
0052e6  8c80              LDRH     r0,[r0,#0x24]
0052e8  9000              STR      r0,[sp,#0]
;;;8190   			 
;;;8191   				temp=LPC_RTC->YEAR;
0052ea  4efb              LDR      r6,|L1.22232|
0052ec  8bb0              LDRH     r0,[r6,#0x1c]
0052ee  9001              STR      r0,[sp,#4]
;;;8192   				gran_char((signed char*)&temp,1,99);
0052f0  f04f0263          MOV      r2,#0x63
0052f4  f04f0101          MOV      r1,#1
0052f8  a801              ADD      r0,sp,#4
0052fa  f7fffffe          BL       gran_char
;;;8193   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
0052fe  f1040420          ADD      r4,r4,#0x20
005302  f89d0004          LDRB     r0,[sp,#4]
005306  7620              STRB     r0,[r4,#0x18]
;;;8194   			
;;;8195   				temp=LPC_RTC->MONTH;
005308  7e30              LDRB     r0,[r6,#0x18]
00530a  9001              STR      r0,[sp,#4]
;;;8196   				gran_char((signed char*)&temp,1,12);
00530c  f04f020c          MOV      r2,#0xc
005310  f04f0101          MOV      r1,#1
005314  a801              ADD      r0,sp,#4
005316  f7fffffe          BL       gran_char
;;;8197   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
00531a  f89d0004          LDRB     r0,[sp,#4]
00531e  7660              STRB     r0,[r4,#0x19]
;;;8198   			
;;;8199   				temp=LPC_RTC->DOM;
005320  7b30              LDRB     r0,[r6,#0xc]
005322  9001              STR      r0,[sp,#4]
;;;8200   				gran_char((signed char*)&temp,1,31);
005324  221f              MOVS     r2,#0x1f
005326  2101              MOVS     r1,#1
005328  a801              ADD      r0,sp,#4
00532a  f7fffffe          BL       gran_char
;;;8201   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
00532e  f89d0004          LDRB     r0,[sp,#4]
005332  76a0              STRB     r0,[r4,#0x1a]
;;;8202   				
;;;8203   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
005334  f89d0000          LDRB     r0,[sp,#0]
005338  76e0              STRB     r0,[r4,#0x1b]
;;;8204   
;;;8205   				temp=LPC_RTC->HOUR;
00533a  7a30              LDRB     r0,[r6,#8]
00533c  9001              STR      r0,[sp,#4]
;;;8206   				gran_char((signed char*)&temp,0,23);
00533e  e000              B        |L1.21314|
                  |L1.21312|
005340  e022              B        |L1.21384|
                  |L1.21314|
005342  2217              MOVS     r2,#0x17
005344  2100              MOVS     r1,#0
005346  a801              ADD      r0,sp,#4
005348  f7fffffe          BL       gran_char
;;;8207   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
00534c  f89d0004          LDRB     r0,[sp,#4]
005350  7720              STRB     r0,[r4,#0x1c]
;;;8208                  	
;;;8209   				temp=LPC_RTC->MIN;
005352  7930              LDRB     r0,[r6,#4]
005354  9001              STR      r0,[sp,#4]
;;;8210   				gran_char((signed char*)&temp,0,59);
005356  223b              MOVS     r2,#0x3b
005358  2100              MOVS     r1,#0
00535a  a801              ADD      r0,sp,#4
00535c  f7fffffe          BL       gran_char
;;;8211   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
005360  f89d0004          LDRB     r0,[sp,#4]
005364  7760              STRB     r0,[r4,#0x1d]
;;;8212   	          
;;;8213   				temp=LPC_RTC->SEC;
005366  7830              LDRB     r0,[r6,#0]
005368  9001              STR      r0,[sp,#4]
;;;8214   				gran_char((signed char*)&temp,0,59);
00536a  223b              MOVS     r2,#0x3b
00536c  2100              MOVS     r1,#0
00536e  a801              ADD      r0,sp,#4
005370  f7fffffe          BL       gran_char
;;;8215   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005374  f89d0004          LDRB     r0,[sp,#4]
005378  77a0              STRB     r0,[r4,#0x1e]
;;;8216   			
;;;8217   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
00537a  f89d0001          LDRB     r0,[sp,#1]
00537e  77e0              STRB     r0,[r4,#0x1f]
;;;8218   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005380  8027              STRH     r7,[r4,#0]
;;;8219   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005382  8067              STRH     r7,[r4,#2]
005384  f1a40420          SUB      r4,r4,#0x20
                  |L1.21384|
;;;8220   				}
;;;8221   	
;;;8222   			}
;;;8223   
;;;8224   		}
;;;8225   	else bat[in]._cnt_wrk=0;	 
;;;8226   	
;;;8227   	}					
;;;8228   
;;;8229   /*
;;;8230   if(Ibat>=(-IKB))
;;;8231   	{
;;;8232   	if(cnt_wrk<10)
;;;8233   		{
;;;8234   		cnt_wrk++;
;;;8235   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;8236   			{
;;;8237   			wrk=wrkOFF;
;;;8238   			//beep_init(0x7L,'O');
;;;8239   			wrk_mem_hndl(ibat_integr);
;;;8240   			}
;;;8241   		}
;;;8242   	else cnt_wrk=10;	
;;;8243   	}	
;;;8244   
;;;8245   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8246   	{
;;;8247   	if(cnt_wrk)
;;;8248   		{
;;;8249   		cnt_wrk--;
;;;8250   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8251   			{
;;;8252   			char temp;
;;;8253   			signed short temp_temp;
;;;8254   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8255   			 
;;;8256   			wrk=wrkON;
;;;8257   			
;;;8258   			temp=_year;
;;;8259   			gran_char(&temp,1,99);
;;;8260   			*((char*)(&(wrk_date[0])))=temp;
;;;8261   			
;;;8262   			temp=_month;
;;;8263   			gran_char(&temp,1,12);
;;;8264   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8265   			
;;;8266   			temp=_date;
;;;8267   			gran_char(&temp,1,31);
;;;8268   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8269   				
;;;8270   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8271   
;;;8272   			temp=_hour;
;;;8273   			gran_char(&temp,0,23);
;;;8274   			*((char*)(&(wrk_date[1])))=temp;
;;;8275                  
;;;8276   			temp=_min;
;;;8277   			gran_char(&temp,0,59);
;;;8278   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8279   	          
;;;8280   			temp=_sec;
;;;8281   			gran_char(&temp,0,59);
;;;8282   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8283   			
;;;8284   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8285   
;;;8286   			
;;;8287   			//beep_init(0xFL,'O'); 
;;;8288   			ibat_integr=0;
;;;8289   			ibat_integr_=0;
;;;8290   			}
;;;8291   		}
;;;8292   	else cnt_wrk=0;	 
;;;8293   	
;;;8294   	}
;;;8295   if(wrk==wrkON)
;;;8296   	{
;;;8297   	ibat_integr_+=-Ibat;
;;;8298   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8299   		{
;;;8300   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8301   		ibat_integr++;
;;;8302   		}
;;;8303   	}
;;;8304   
;;;8305   */
;;;8306   
;;;8307   
;;;8308   /*if(bat[in]._cnt_to_block)
;;;8309   	{
;;;8310   	bat[in]._cnt_to_block--;
;;;8311   	if(!(bat[in]._cnt_to_block))
;;;8312   		{
;;;8313   		//bat[in]._rel_stat=1;
;;;8314   		}
;;;8315   	}
;;;8316   */
;;;8317   
;;;8318   
;;;8319   
;;;8320   
;;;8321   //unsigned int tempUI,tempUI_;
;;;8322   //unsigned int b_zar; 
;;;8323   //char i;
;;;8324   //Ibat[0]=5000;                     
;;;8325   
;;;8326   
;;;8327                               
;;;8328   if(bat[in]._time_cnt==0)
;;;8329   	{
;;;8330   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8331   	
;;;8332   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005388  f64848a0          MOV      r8,#0x8ca0
00538c  f8940042          LDRB     r0,[r4,#0x42]         ;8328
005390  bba8              CBNZ     r0,|L1.21502|
005392  f9b41008          LDRSH    r1,[r4,#8]            ;8330
005396  69a0              LDR      r0,[r4,#0x18]         ;8330
005398  4408              ADD      r0,r0,r1              ;8330
00539a  61a0              STR      r0,[r4,#0x18]         ;8330
;;;8333   		{
;;;8334   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8335   		else tempUS_=BAT_C_REAL[in];
;;;8336   		
;;;8337   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00539c  f8df933c          LDR      r9,|L1.22236|
0053a0  f8dfa33c          LDR      r10,|L1.22240|
0053a4  f2455b55          MOV      r11,#0x5555           ;8334
0053a8  4540              CMP      r0,r8                 ;8332
0053aa  db29              BLT      |L1.21504|
0053ac  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8334
0053b0  4558              CMP      r0,r11                ;8334
0053b2  d103              BNE      |L1.21436|
0053b4  48cb              LDR      r0,|L1.22244|
0053b6  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8334
0053ba  e001              B        |L1.21440|
                  |L1.21436|
0053bc  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8335
                  |L1.21440|
0053c0  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053c4  f7fffffe          BL       lc640_read_int
0053c8  b280              UXTH     r0,r0
;;;8338   
;;;8339   		if(b_zar<(tempUS_/**10*/))
0053ca  42b0              CMP      r0,r6
0053cc  d20e              BCS      |L1.21484|
;;;8340   			{
;;;8341   			bat[in]._zar_cnt-=AH_CONSTANT;
0053ce  69a1              LDR      r1,[r4,#0x18]
0053d0  f5a14100          SUB      r1,r1,#0x8000
0053d4  f5a1614a          SUB      r1,r1,#0xca0
0053d8  61a1              STR      r1,[r4,#0x18]
;;;8342   
;;;8343   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
0053da  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0053de  f1000001          ADD      r0,r0,#1
0053e2  b201              SXTH     r1,r0
0053e4  4610              MOV      r0,r2
0053e6  f7fffffe          BL       lc640_write_int
0053ea  e032              B        |L1.21586|
                  |L1.21484|
;;;8344   			}
;;;8345   		else if(b_zar>(tempUS_/**10*/))  
0053ec  d931              BLS      |L1.21586|
;;;8346   			{
;;;8347   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0053ee  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0053f2  b231              SXTH     r1,r6
0053f4  f7fffffe          BL       lc640_write_int
;;;8348   			bat[in]._zar_cnt=AH_CONSTANT;
0053f8  f8c48018          STR      r8,[r4,#0x18]
0053fc  e029              B        |L1.21586|
                  |L1.21502|
0053fe  e054              B        |L1.21674|
                  |L1.21504|
;;;8349   
;;;8350   			}
;;;8351   
;;;8352   		}
;;;8353   
;;;8354   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005400  49b9              LDR      r1,|L1.22248|
005402  4288              CMP      r0,r1
005404  dc25              BGT      |L1.21586|
;;;8355   		{
;;;8356   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
005406  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
00540a  4558              CMP      r0,r11
00540c  d103              BNE      |L1.21526|
00540e  48b5              LDR      r0,|L1.22244|
005410  f8306015          LDRH     r6,[r0,r5,LSL #1]
005414  e001              B        |L1.21530|
                  |L1.21526|
;;;8357   		else tempUS_=BAT_C_REAL[in];
005416  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21530|
;;;8358   		
;;;8359   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00541a  f8390015          LDRH     r0,[r9,r5,LSL #1]
00541e  f7fffffe          BL       lc640_read_int
005422  b280              UXTH     r0,r0
;;;8360   
;;;8361   		if(b_zar>tempUS_)
005424  42b0              CMP      r0,r6
005426  d905              BLS      |L1.21556|
;;;8362   			{
;;;8363   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005428  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00542c  b231              SXTH     r1,r6
00542e  f7fffffe          BL       lc640_write_int
;;;8364   			b_zar=tempUS_;
005432  4630              MOV      r0,r6
                  |L1.21556|
;;;8365   			}
;;;8366   		if(b_zar)
005434  b158              CBZ      r0,|L1.21582|
;;;8367   			{
;;;8368   			bat[in]._zar_cnt+=AH_CONSTANT;
005436  69a1              LDR      r1,[r4,#0x18]
005438  4441              ADD      r1,r1,r8
00543a  61a1              STR      r1,[r4,#0x18]
;;;8369   
;;;8370   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
00543c  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005440  f1a00001          SUB      r0,r0,#1
005444  b201              SXTH     r1,r0
005446  4610              MOV      r0,r2
005448  f7fffffe          BL       lc640_write_int
00544c  e001              B        |L1.21586|
                  |L1.21582|
;;;8371   			}
;;;8372   		else 
;;;8373   			{
;;;8374   			bat[in]._zar_cnt=-AH_CONSTANT;
00544e  48a6              LDR      r0,|L1.22248|
005450  61a0              STR      r0,[r4,#0x18]
                  |L1.21586|
;;;8375   			}
;;;8376   
;;;8377   		}
;;;8378   
;;;8379   			
;;;8380   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005452  f8390015          LDRH     r0,[r9,r5,LSL #1]
005456  f7fffffe          BL       lc640_read_int
00545a  4601              MOV      r1,r0
;;;8381   	
;;;8382   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
00545c  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005460  4558              CMP      r0,r11
005462  d102              BNE      |L1.21610|
005464  489f              LDR      r0,|L1.22244|
005466  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21610|
;;;8383   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8384   		           	
;;;8385   	tempUL*=1000L;
00546a  f44f727a          MOV      r2,#0x3e8
00546e  fb01f102          MUL      r1,r1,r2
;;;8386   
;;;8387   
;;;8388   	if(tempUL_==0) tempUL=0;
005472  b158              CBZ      r0,|L1.21644|
;;;8389   	else tempUL/=tempUL_;
005474  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21624|
;;;8390   
;;;8391   	tempUL/=10L;
005478  f04f010a          MOV      r1,#0xa
00547c  fbb0f0f1          UDIV     r0,r0,r1
;;;8392   
;;;8393   	bat[in]._zar=(unsigned short)tempUL;
005480  8260              STRH     r0,[r4,#0x12]
;;;8394   
;;;8395   	if(BAT_TYPE==1)
005482  489a              LDR      r0,|L1.22252|
005484  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
005486  2801              CMP      r0,#1
005488  d003              BEQ      |L1.21650|
00548a  e008              B        |L1.21662|
                  |L1.21644|
00548c  f04f0000          MOV      r0,#0                 ;8388
005490  e7f2              B        |L1.21624|
                  |L1.21650|
;;;8396   		{
;;;8397   		bat[in]._zar=lakb[in]._s_o_c;
005492  4997              LDR      r1,|L1.22256|
005494  9802              LDR      r0,[sp,#8]
005496  eb011000          ADD      r0,r1,r0,LSL #4
00549a  8a40              LDRH     r0,[r0,#0x12]
00549c  8260              STRH     r0,[r4,#0x12]
                  |L1.21662|
;;;8398   		}
;;;8399   	
;;;8400   	gran((signed short*)&bat[in]._zar,0,100);
00549e  f1040012          ADD      r0,r4,#0x12
0054a2  2264              MOVS     r2,#0x64
0054a4  2100              MOVS     r1,#0
0054a6  f7fffffe          BL       gran
                  |L1.21674|
;;;8401        }
;;;8402   
;;;8403   
;;;8404   //Подсчет тока разряда батареи      
;;;8405   if(bat[in]._wrk==1)
0054aa  7c20              LDRB     r0,[r4,#0x10]
0054ac  2801              CMP      r0,#1
0054ae  d113              BNE      |L1.21720|
;;;8406   	{
;;;8407   	if(bat[in]._Iintegr<36000)
0054b0  8c20              LDRH     r0,[r4,#0x20]
0054b2  4540              CMP      r0,r8
0054b4  d20f              BCS      |L1.21718|
;;;8408   		{          
;;;8409   		bat[in]._Iintegr+=abs(bat[in]._Ib);
0054b6  f9b40008          LDRSH    r0,[r4,#8]
0054ba  f7fffffe          BL       abs
0054be  8c21              LDRH     r1,[r4,#0x20]
0054c0  4408              ADD      r0,r0,r1
0054c2  b280              UXTH     r0,r0
0054c4  8420              STRH     r0,[r4,#0x20]
;;;8410   		if(bat[in]._Iintegr>=36000)
0054c6  4540              CMP      r0,r8
0054c8  d306              BCC      |L1.21720|
;;;8411   			{
;;;8412   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0054ca  8427              STRH     r7,[r4,#0x20]
;;;8413   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
0054cc  8c60              LDRH     r0,[r4,#0x22]
0054ce  f1000001          ADD      r0,r0,#1
0054d2  8460              STRH     r0,[r4,#0x22]
0054d4  e000              B        |L1.21720|
                  |L1.21718|
;;;8414   			}
;;;8415   		}
;;;8416   	else 
;;;8417   		{
;;;8418   		bat[in]._Iintegr=0;
0054d6  8427              STRH     r7,[r4,#0x20]
                  |L1.21720|
;;;8419   		}	
;;;8420   	} 
;;;8421   	    
;;;8422   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8423   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
0054d8  4e86              LDR      r6,|L1.22260|
0054da  4987              LDR      r1,|L1.22264|
0054dc  f8df921c          LDR      r9,|L1.22268|
0054e0  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
0054e4  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
0054e8  4288              CMP      r0,r1
0054ea  dd02              BLE      |L1.21746|
0054ec  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
0054f0  b380              CBZ      r0,|L1.21844|
                  |L1.21746|
;;;8424   	{
;;;8425   	bat[in]._sign_temper_cnt++;
;;;8426   	}
;;;8427   else 
;;;8428   	{
;;;8429   	bat[in]._sign_temper_cnt--;
0054f2  f8b40044          LDRH     r0,[r4,#0x44]
0054f6  f1a00001          SUB      r0,r0,#1
0054fa  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.21758|
;;;8430   	}
;;;8431   #else
;;;8432   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8433   	{
;;;8434   	bat[in]._sign_temper_cnt++;
;;;8435   	}
;;;8436   else 
;;;8437   	{
;;;8438   	bat[in]._sign_temper_cnt--;
;;;8439   	}
;;;8440   #endif
;;;8441   gran(&bat[in]._sign_temper_cnt,0,600);
0054fe  f44f7b16          MOV      r11,#0x258
005502  f1040044          ADD      r0,r4,#0x44
005506  465a              MOV      r2,r11
005508  2100              MOVS     r1,#0
00550a  f7fffffe          BL       gran
;;;8442   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
00550e  f9b40044          LDRSH    r0,[r4,#0x44]
005512  f2402a4e          MOV      r10,#0x24e
005516  4550              CMP      r0,r10
005518  db05              BLT      |L1.21798|
00551a  f8941043          LDRB     r1,[r4,#0x43]
00551e  f0410101          ORR      r1,r1,#1
005522  f8841043          STRB     r1,[r4,#0x43]
                  |L1.21798|
;;;8443   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
005526  280a              CMP      r0,#0xa
005528  dc05              BGT      |L1.21814|
00552a  f8940043          LDRB     r0,[r4,#0x43]
00552e  f0200001          BIC      r0,r0,#1
005532  f8840043          STRB     r0,[r4,#0x43]
                  |L1.21814|
;;;8444   
;;;8445   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
005536  f8940043          LDRB     r0,[r4,#0x43]
00553a  07c1              LSLS     r1,r0,#31
00553c  d005              BEQ      |L1.21834|
00553e  06c0              LSLS     r0,r0,#27
005540  d403              BMI      |L1.21834|
005542  2101              MOVS     r1,#1
005544  4628              MOV      r0,r5
005546  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21834|
;;;8446   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
00554a  f8940043          LDRB     r0,[r4,#0x43]
00554e  07c1              LSLS     r1,r0,#31
005550  d008              BEQ      |L1.21860|
005552  e00d              B        |L1.21872|
                  |L1.21844|
005554  e7ff              B        |L1.21846|
                  |L1.21846|
005556  f8b40044          LDRH     r0,[r4,#0x44]         ;8425
00555a  f1000001          ADD      r0,r0,#1              ;8425
00555e  f8a40044          STRH     r0,[r4,#0x44]         ;8425
005562  e7cc              B        |L1.21758|
                  |L1.21860|
005564  06c0              LSLS     r0,r0,#27
005566  d503              BPL      |L1.21872|
005568  2100              MOVS     r1,#0
00556a  4628              MOV      r0,r5
00556c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21872|
;;;8447   
;;;8448   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
005570  f8940043          LDRB     r0,[r4,#0x43]
005574  07c1              LSLS     r1,r0,#31
005576  d004              BEQ      |L1.21890|
005578  f0400010          ORR      r0,r0,#0x10
00557c  f8840043          STRB     r0,[r4,#0x43]
005580  e003              B        |L1.21898|
                  |L1.21890|
;;;8449   else 								bat[in]._temper_stat&=~(1<<4);
005582  f0200010          BIC      r0,r0,#0x10
005586  f8840043          STRB     r0,[r4,#0x43]
                  |L1.21898|
;;;8450   
;;;8451   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8452   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
00558a  495d              LDR      r1,|L1.22272|
00558c  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005590  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005594  4288              CMP      r0,r1
005596  dd02              BLE      |L1.21918|
005598  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00559c  b3d0              CBZ      r0,|L1.22036|
                  |L1.21918|
;;;8453   	{
;;;8454   	bat[in]._max_temper_cnt++;
;;;8455   	}
;;;8456   else 
;;;8457   	{
;;;8458   	bat[in]._max_temper_cnt--;
00559e  f8b40046          LDRH     r0,[r4,#0x46]
0055a2  f1a00001          SUB      r0,r0,#1
0055a6  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.21930|
;;;8459   	}
;;;8460   #else
;;;8461   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8462   	{
;;;8463   	bat[in]._max_temper_cnt++;
;;;8464   	}
;;;8465   else 
;;;8466   	{
;;;8467   	bat[in]._max_temper_cnt--;
;;;8468   	}
;;;8469   #endif
;;;8470   
;;;8471   gran(&bat[in]._max_temper_cnt,0,600);
0055aa  f1040046          ADD      r0,r4,#0x46
0055ae  465a              MOV      r2,r11
0055b0  2100              MOVS     r1,#0
0055b2  f7fffffe          BL       gran
;;;8472   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
0055b6  f9b40046          LDRSH    r0,[r4,#0x46]
0055ba  4550              CMP      r0,r10
0055bc  db05              BLT      |L1.21962|
0055be  f8941043          LDRB     r1,[r4,#0x43]
0055c2  f0410102          ORR      r1,r1,#2
0055c6  f8841043          STRB     r1,[r4,#0x43]
                  |L1.21962|
;;;8473   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0055ca  280a              CMP      r0,#0xa
0055cc  dc05              BGT      |L1.21978|
0055ce  f8940043          LDRB     r0,[r4,#0x43]
0055d2  f0200002          BIC      r0,r0,#2
0055d6  f8840043          STRB     r0,[r4,#0x43]
                  |L1.21978|
;;;8474   
;;;8475   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
0055da  f8940043          LDRB     r0,[r4,#0x43]
0055de  0781              LSLS     r1,r0,#30
0055e0  d505              BPL      |L1.21998|
0055e2  0680              LSLS     r0,r0,#26
0055e4  d403              BMI      |L1.21998|
0055e6  2103              MOVS     r1,#3
0055e8  4628              MOV      r0,r5
0055ea  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21998|
;;;8476   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
0055ee  f8940043          LDRB     r0,[r4,#0x43]
0055f2  0781              LSLS     r1,r0,#30
0055f4  d405              BMI      |L1.22018|
0055f6  0680              LSLS     r0,r0,#26
0055f8  d503              BPL      |L1.22018|
0055fa  2102              MOVS     r1,#2
0055fc  4628              MOV      r0,r5
0055fe  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22018|
;;;8477   
;;;8478   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005602  f8940043          LDRB     r0,[r4,#0x43]
005606  0781              LSLS     r1,r0,#30
005608  d50c              BPL      |L1.22052|
00560a  f0400020          ORR      r0,r0,#0x20
00560e  f8840043          STRB     r0,[r4,#0x43]
005612  e00b              B        |L1.22060|
                  |L1.22036|
005614  e7ff              B        |L1.22038|
                  |L1.22038|
005616  f8b40046          LDRH     r0,[r4,#0x46]         ;8454
00561a  f1000001          ADD      r0,r0,#1              ;8454
00561e  f8a40046          STRH     r0,[r4,#0x46]         ;8454
005622  e7c2              B        |L1.21930|
                  |L1.22052|
;;;8479   else 								bat[in]._temper_stat&=~(1<<5);
005624  f0200020          BIC      r0,r0,#0x20
005628  f8840043          STRB     r0,[r4,#0x43]
                  |L1.22060|
;;;8480   
;;;8481   //Подсчет наработки батареи
;;;8482   if(bat[in]._resurs_cnt<36000)
00562c  6ca0              LDR      r0,[r4,#0x48]
00562e  4540              CMP      r0,r8
005630  da13              BGE      |L1.22106|
;;;8483   	{               
;;;8484   	bat[in]._resurs_cnt++;
005632  f1000001          ADD      r0,r0,#1
005636  64a0              STR      r0,[r4,#0x48]
;;;8485   	if(bat[in]._resurs_cnt>=36000)
005638  4540              CMP      r0,r8
00563a  db0f              BLT      |L1.22108|
;;;8486   		{
;;;8487   		bat[in]._resurs_cnt=0;
00563c  64a7              STR      r7,[r4,#0x48]
;;;8488   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
00563e  4c31              LDR      r4,|L1.22276|
005640  f8340015          LDRH     r0,[r4,r5,LSL #1]
005644  f7fffffe          BL       lc640_read_int
005648  1c40              ADDS     r0,r0,#1
00564a  b201              SXTH     r1,r0
00564c  f9340015          LDRSH    r0,[r4,r5,LSL #1]
005650  b003              ADD      sp,sp,#0xc
005652  e8bd4ff0          POP      {r4-r11,lr}
005656  f7ffbffe          B.W      lc640_write_int
                  |L1.22106|
;;;8489   		}
;;;8490   	}
;;;8491   else bat[in]._resurs_cnt=0;
00565a  64a7              STR      r7,[r4,#0x48]
                  |L1.22108|
;;;8492   
;;;8493   
;;;8494   #ifndef UKU_220_V2
;;;8495   #ifndef UKU_GLONASS
;;;8496   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8497   //#ifndef UKU_6U
;;;8498   //#ifndef UKU_220
;;;8499   if(UBM_AV)
;;;8500        {
;;;8501        signed short temp_SS;
;;;8502   #ifdef UKU_220
;;;8503   temp_SS=bat[in]._Ub/2;
;;;8504   #else
;;;8505        if(U0B<600)
;;;8506             {
;;;8507   
;;;8508             temp_SS=bat[in]._Ub/4;
;;;8509             }
;;;8510        else temp_SS=bat[in]._Ub/5;
;;;8511   	
;;;8512   	temp_SS+=temp_SS;     
;;;8513   #endif
;;;8514        temp_SS-=(bat[in]._Ubm);
;;;8515   
;;;8516        temp_SS=abs(temp_SS);
;;;8517   
;;;8518        temp_SS*=10;
;;;8519   
;;;8520        temp_SS/=12;
;;;8521   
;;;8522        bat[in]._dUbm=temp_SS;
;;;8523   
;;;8524   
;;;8525        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8526   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8527   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8528   		(!(bat[in]._av & 2))  )
;;;8529   		{
;;;8530   		bat[in]._cnt_as++;
;;;8531   		if(bat[in]._cnt_as==3000)
;;;8532   			{
;;;8533   			avar_bat_as_hndl(in,1);
;;;8534   			}
;;;8535   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8536   		}
;;;8537   	else 
;;;8538   		{
;;;8539   		if(bat[in]._cnt_as)
;;;8540   			{
;;;8541   			bat[in]._cnt_as--;
;;;8542   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8543   			}
;;;8544   		}
;;;8545        
;;;8546        }
;;;8547   //#endif 
;;;8548   #endif 
;;;8549   #endif
;;;8550   #endif
;;;8551   
;;;8552   }
00565c  e8bd8ffe          POP      {r1-r11,pc}
;;;8553   
                          ENDP

                  bat_hndl_zvu PROC
;;;8555   //-----------------------------------------------
;;;8556   void bat_hndl_zvu(void)
005660  e92d4ff0          PUSH     {r4-r11,lr}
;;;8557   {
005664  b089              SUB      sp,sp,#0x24
;;;8558   char i;
;;;8559   short bat_hndl_i_temp;
;;;8560   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005666  f04f021c          MOV      r2,#0x1c
00566a  4927              LDR      r1,|L1.22280|
00566c  4668              MOV      r0,sp
00566e  f7fffffe          BL       __aeabi_memcpy4
;;;8561   
;;;8562   //Ib_ips_termokompensat=-17000;
;;;8563    
;;;8564   if(bat_hndl_zvu_init==0)
005672  4c26              LDR      r4,|L1.22284|
;;;8565   	{
;;;8566   	//Инициализация при включении системы
;;;8567   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8568   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005674  2564              MOVS     r5,#0x64
;;;8569   	bat_hndl_zvu_Q*=10000L;
;;;8570   
;;;8571   	bat_hndl_zvu_init=1;
;;;8572   	}
;;;8573   else 
;;;8574   	{
;;;8575   	if(Ib_ips_termokompensat<-IKB)
;;;8576   		{
;;;8577   		bat_hndl_i_vector=0;
;;;8578   		bat_hndl_i_zar_price=0L;
;;;8579   			
;;;8580   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8581   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8582   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8583   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8584   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8585   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8586   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8587   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8588   		
;;;8589   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8590   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8591   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8592   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8593   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8594   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8595   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8596   
;;;8597   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8598   		for(i=0;i<7;i++)
;;;8599   			{
;;;8600   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8601   				{
;;;8602   				break;
;;;8603   				}
;;;8604   			}
;;;8605   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8606   		 else if((i>=1)&&(i<7))
;;;8607   		 	{
;;;8608   			short i1,i2;
;;;8609   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8610   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8611   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8612   			bat_hndl_t_razr*=(long)i1;
;;;8613   			bat_hndl_t_razr/=(long)i2;
;;;8614   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8615   			}
;;;8616   		else if(i>=7)
;;;8617   			{
;;;8618   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8619   			}
;;;8620   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005676  f8df8098          LDR      r8,|L1.22288|
00567a  7a60              LDRB     r0,[r4,#9]            ;8564  ; bat_hndl_zvu_init
00567c  2700              MOVS     r7,#0                 ;8564
00567e  f04f0901          MOV      r9,#1                 ;8571
005682  f1040680          ADD      r6,r4,#0x80           ;8567
005686  2800              CMP      r0,#0                 ;8564
005688  d07d              BEQ      |L1.22406|
00568a  4923              LDR      r1,|L1.22296|
00568c  4821              LDR      r0,|L1.22292|
00568e  f9b12000          LDRSH    r2,[r1,#0]            ;8575  ; IKB
005692  4631              MOV      r1,r6                 ;8567
005694  f9b00000          LDRSH    r0,[r0,#0]            ;8575  ; Ib_ips_termokompensat
005698  4253              RSBS     r3,r2,#0              ;8575
00569a  6d89              LDR      r1,[r1,#0x58]         ;8567
00569c  4298              CMP      r0,r3                 ;8575
00569e  da73              BGE      |L1.22408|
0056a0  72e7              STRB     r7,[r4,#0xb]          ;8577
0056a2  60f7              STR      r7,[r6,#0xc]          ;8578  ; bat_hndl_i_zar_price
0056a4  f1c00000          RSB      r0,r0,#0              ;8580
0056a8  b200              SXTH     r0,r0                 ;8580
0056aa  8030              STRH     r0,[r6,#0]            ;8580
0056ac  9008              STR      r0,[sp,#0x20]         ;8580
0056ae  481b              LDR      r0,|L1.22300|
0056b0  4a1b              LDR      r2,|L1.22304|
0056b2  8800              LDRH     r0,[r0,#0]            ;8581  ; BAT_C_POINT_1_6
0056b4  eb000040          ADD      r0,r0,r0,LSL #1       ;8581
0056b8  ea4f0040          LSL      r0,r0,#1              ;8581
0056bc  fa0ffb80          SXTH     r11,r0                ;8581
0056c0  4818              LDR      r0,|L1.22308|
0056c2  8800              LDRH     r0,[r0,#0]            ;8582  ; BAT_C_POINT_1_2
0056c4  ea4f0040          LSL      r0,r0,#1              ;8582
0056c8  b203              SXTH     r3,r0                 ;8582
0056ca  4817              LDR      r0,|L1.22312|
0056cc  f9b0c000          LDRSH    r12,[r0,#0]           ;8583  ; BAT_C_POINT_1
0056d0  4816              LDR      r0,|L1.22316|
0056d2  e02d              B        |L1.22320|
                  |L1.22228|
                          DCD      bat_u_old_cnt
                  |L1.22232|
                          DCD      0x40024020
                  |L1.22236|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22240|
                          DCD      BAT_C_REAL
                  |L1.22244|
                          DCD      BAT_C_NOM
                  |L1.22248|
                          DCD      0xffff7360
                  |L1.22252|
                          DCD      BAT_TYPE
                  |L1.22256|
                          DCD      lakb
                  |L1.22260|
                          DCD      t_ext
                  |L1.22264|
                          DCD      TBATSIGN
                  |L1.22268|
                          DCD      ND_EXT
                  |L1.22272|
                          DCD      TBATMAX
                  |L1.22276|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22280|
                          DCD      ||area_number.19||+0x20
                  |L1.22284|
                          DCD      ||area_number.25||
                  |L1.22288|
                          DCD      0x000f4240
                  |L1.22292|
                          DCD      Ib_ips_termokompensat
                  |L1.22296|
                          DCD      IKB
                  |L1.22300|
                          DCD      BAT_C_POINT_1_6
                  |L1.22304|
                          DCD      ||.bss||+0x44c
                  |L1.22308|
                          DCD      BAT_C_POINT_1_2
                  |L1.22312|
                          DCD      BAT_C_POINT_1
                  |L1.22316|
                          DCD      BAT_C_POINT_3
                  |L1.22320|
005730  f9b00000          LDRSH    r0,[r0,#0]            ;8584  ; BAT_C_POINT_3
005734  f04f0903          MOV      r9,#3                 ;8584
005738  fb90f0f9          SDIV     r0,r0,r9              ;8584
00573c  b200              SXTH     r0,r0                 ;8584
00573e  9007              STR      r0,[sp,#0x1c]         ;8584
005740  48ff              LDR      r0,|L1.23360|
005742  f04f0905          MOV      r9,#5                 ;8585
005746  f9b00000          LDRSH    r0,[r0,#0]            ;8585  ; BAT_C_POINT_5
00574a  fb90f0f9          SDIV     r0,r0,r9              ;8585
00574e  fa0ff980          SXTH     r9,r0                 ;8585
005752  48fc              LDR      r0,|L1.23364|
005754  f9b0a000          LDRSH    r10,[r0,#0]           ;8586  ; BAT_C_POINT_10
005758  f04f000a          MOV      r0,#0xa               ;8586
00575c  fb9af0f0          SDIV     r0,r10,r0             ;8586
005760  fa0ffe80          SXTH     lr,r0                 ;8586
005764  48f8              LDR      r0,|L1.23368|
005766  f04f0a14          MOV      r10,#0x14             ;8587
00576a  f9b00000          LDRSH    r0,[r0,#0]            ;8587  ; BAT_C_POINT_20
00576e  fb90f0fa          SDIV     r0,r0,r10             ;8587
005772  fa0ffa80          SXTH     r10,r0                ;8587
005776  48f5              LDR      r0,|L1.23372|
005778  f9b00000          LDRSH    r0,[r0,#0]            ;8589  ; BAT_K_OLD
00577c  fb0bfb00          MUL      r11,r11,r0            ;8589
005780  fb9bfbf5          SDIV     r11,r11,r5            ;8589
005784  e001              B        |L1.22410|
                  |L1.22406|
005786  e04e              B        |L1.22566|
                  |L1.22408|
005788  e082              B        |L1.22672|
                  |L1.22410|
00578a  f8a2b000          STRH     r11,[r2,#0]           ;8589
00578e  fb03f300          MUL      r3,r3,r0              ;8590
005792  fb93f3f5          SDIV     r3,r3,r5              ;8590
005796  8053              STRH     r3,[r2,#2]            ;8590
005798  fb0cfc00          MUL      r12,r12,r0            ;8591
00579c  fb9cf3f5          SDIV     r3,r12,r5             ;8591
0057a0  8093              STRH     r3,[r2,#4]            ;8591
0057a2  9b07              LDR      r3,[sp,#0x1c]         ;8592
0057a4  fb03f300          MUL      r3,r3,r0              ;8592
0057a8  fb93f3f5          SDIV     r3,r3,r5              ;8592
0057ac  80d3              STRH     r3,[r2,#6]            ;8592
0057ae  fb09f900          MUL      r9,r9,r0              ;8593
0057b2  fb99f3f5          SDIV     r3,r9,r5              ;8593
0057b6  8113              STRH     r3,[r2,#8]            ;8593
0057b8  fb0efe00          MUL      lr,lr,r0              ;8594
0057bc  fb9ef3f5          SDIV     r3,lr,r5              ;8594
0057c0  8153              STRH     r3,[r2,#0xa]          ;8594
0057c2  fb0afa00          MUL      r10,r10,r0            ;8595
0057c6  fb9af0f5          SDIV     r0,r10,r5             ;8595
0057ca  8190              STRH     r0,[r2,#0xc]          ;8595
0057cc  9808              LDR      r0,[sp,#0x20]         ;8597
0057ce  f04f030a          MOV      r3,#0xa               ;8597
0057d2  fb90f0f3          SDIV     r0,r0,r3              ;8597
0057d6  b203              SXTH     r3,r0                 ;8597
0057d8  f04f0000          MOV      r0,#0                 ;8598
                  |L1.22492|
0057dc  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8600
0057e0  429d              CMP      r5,r3                 ;8600
0057e2  dd04              BLE      |L1.22510|
0057e4  f1000001          ADD      r0,r0,#1              ;8598
0057e8  b2c0              UXTB     r0,r0                 ;8598
0057ea  2807              CMP      r0,#7                 ;8598
0057ec  d3f6              BCC      |L1.22492|
                  |L1.22510|
0057ee  b358              CBZ      r0,|L1.22600|
0057f0  1e45              SUBS     r5,r0,#1              ;8606
0057f2  2d06              CMP      r5,#6                 ;8606
0057f4  d22b              BCS      |L1.22606|
0057f6  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8609
0057fa  ebac0303          SUB      r3,r12,r3             ;8609
0057fe  b21b              SXTH     r3,r3                 ;8609
005800  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8610
005804  ebac0202          SUB      r2,r12,r2             ;8610
005808  fa0ffc82          SXTH     r12,r2                ;8610
00580c  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8611
005810  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8611
005814  eba90200          SUB      r2,r9,r0              ;8611
005818  fb02f203          MUL      r2,r2,r3              ;8612
00581c  fb92f2fc          SDIV     r2,r2,r12             ;8613
005820  4410              ADD      r0,r0,r2              ;8614
005822  6530              STR      r0,[r6,#0x50]         ;8614  ; bat_hndl_t_razr
005824  e017              B        |L1.22614|
                  |L1.22566|
005826  f44f70ef          MOV      r0,#0x1de             ;8567
00582a  f7fffffe          BL       lc640_read_int
00582e  65b0              STR      r0,[r6,#0x58]         ;8567  ; bat_hndl_zvu_Q
005830  2865              CMP      r0,#0x65              ;8568
005832  d300              BCC      |L1.22582|
005834  65b5              STR      r5,[r6,#0x58]         ;8568  ; bat_hndl_zvu_Q
                  |L1.22582|
005836  6db0              LDR      r0,[r6,#0x58]         ;8569  ; bat_hndl_zvu_Q
005838  f2427110          MOV      r1,#0x2710            ;8569
00583c  fb00f001          MUL      r0,r0,r1              ;8569
005840  65b0              STR      r0,[r6,#0x58]         ;8569  ; bat_hndl_zvu_Q
005842  f8849009          STRB     r9,[r4,#9]            ;8571
005846  e066              B        |L1.22806|
                  |L1.22600|
005848  9800              LDR      r0,[sp,#0]            ;8605
00584a  6530              STR      r0,[r6,#0x50]         ;8605  ; bat_hndl_t_razr
00584c  e003              B        |L1.22614|
                  |L1.22606|
00584e  2807              CMP      r0,#7                 ;8616
005850  d301              BCC      |L1.22614|
005852  9806              LDR      r0,[sp,#0x18]         ;8618
005854  6530              STR      r0,[r6,#0x50]         ;8618  ; bat_hndl_t_razr
                  |L1.22614|
005856  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
005858  fb98f0f0          SDIV     r0,r8,r0
00585c  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8621   
;;;8622   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00585e  4281              CMP      r1,r0
005860  dd03              BLE      |L1.22634|
005862  eba10000          SUB      r0,r1,r0
005866  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005868  e000              B        |L1.22636|
                  |L1.22634|
;;;8623   		else bat_hndl_zvu_Q=0L;
00586a  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22636|
;;;8624   
;;;8625   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
00586c  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
00586e  f44f6061          MOV      r0,#0xe10
005872  fb91f0f0          SDIV     r0,r1,r0
005876  8070              STRH     r0,[r6,#2]
;;;8626   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005878  f04f003c          MOV      r0,#0x3c
00587c  fb91f1f0          SDIV     r1,r1,r0
005880  b209              SXTH     r1,r1
005882  80b1              STRH     r1,[r6,#4]
;;;8627   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005884  fb91f2f0          SDIV     r2,r1,r0
005888  fb001012          MLS      r0,r0,r2,r1
00588c  80f0              STRH     r0,[r6,#6]
00588e  e016              B        |L1.22718|
                  |L1.22672|
;;;8628   
;;;8629   		}
;;;8630   	else if(Ib_ips_termokompensat>IKB)
005890  4290              CMP      r0,r2
005892  dd14              BLE      |L1.22718|
;;;8631   		{
;;;8632   		bat_hndl_i_vector=1;
005894  f884900b          STRB     r9,[r4,#0xb]
;;;8633   
;;;8634   		bat_hndl_i=Ib_ips_termokompensat;
005898  8030              STRH     r0,[r6,#0]
;;;8635   		bat_hndl_i_summ+=(long)bat_hndl_i;
00589a  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
00589c  4410              ADD      r0,r0,r2
00589e  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8636   		if(bat_hndl_i_summ>=36000L)
0058a0  f64842a0          MOV      r2,#0x8ca0
0058a4  4290              CMP      r0,r2
0058a6  db0a              BLT      |L1.22718|
;;;8637   
;;;8638   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8639   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8640   			{
;;;8641   			bat_hndl_i_summ-=36000L;
0058a8  eba00002          SUB      r0,r0,r2
0058ac  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8642   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0058ae  4541              CMP      r1,r8
0058b0  da03              BGE      |L1.22714|
0058b2  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
0058b4  4408              ADD      r0,r0,r1
0058b6  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0058b8  e001              B        |L1.22718|
                  |L1.22714|
;;;8643   			else bat_hndl_zvu_Q=1000000L; 
0058ba  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22718|
;;;8644   			}
;;;8645   		}
;;;8646   
;;;8647   
;;;8648   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0058be  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0058c0  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0058c2  4288              CMP      r0,r1
0058c4  d00d              BEQ      |L1.22754|
;;;8649   		{
;;;8650   		if(bat_hndl_i_vector==1)
0058c6  2801              CMP      r0,#1
0058c8  d10b              BNE      |L1.22754|
;;;8651   			{
;;;8652   			signed short tempSS;
;;;8653   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0058ca  f44f70e4          MOV      r0,#0x1c8
0058ce  f7fffffe          BL       lc640_read_int
0058d2  b200              SXTH     r0,r0
;;;8654   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
0058d4  4a9e              LDR      r2,|L1.23376|
0058d6  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
0058d8  4411              ADD      r1,r1,r2
0058da  fb91f0f0          SDIV     r0,r1,r0
0058de  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8655   			bat_hndl_i_summ=0;
0058e0  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.22754|
;;;8656   			}
;;;8657   		}
;;;8658   	bat_hndl_i_vector_old=bat_hndl_i_vector;
0058e2  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0058e4  7320              STRB     r0,[r4,#0xc]
;;;8659   
;;;8660   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
0058e6  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0058e8  f2427a10          MOV      r10,#0x2710
0058ec  fb90f5fa          SDIV     r5,r0,r10
0058f0  f44f79ef          MOV      r9,#0x1de
0058f4  4648              MOV      r0,r9
0058f6  f7fffffe          BL       lc640_read_int
0058fa  4285              CMP      r5,r0
0058fc  d006              BEQ      |L1.22796|
0058fe  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005900  fb90f0fa          SDIV     r0,r0,r10
005904  b201              SXTH     r1,r0
005906  4648              MOV      r0,r9
005908  f7fffffe          BL       lc640_write_int
                  |L1.22796|
;;;8661   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00590c  e9d60116          LDRD     r0,r1,[r6,#0x58]
005910  fb90f0f1          SDIV     r0,r0,r1
005914  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.22806|
;;;8662   	}
;;;8663   
;;;8664   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
005916  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005918  4540              CMP      r0,r8
00591a  dd02              BLE      |L1.22818|
00591c  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
005920  e002              B        |L1.22824|
                  |L1.22818|
;;;8665   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005922  2800              CMP      r0,#0
005924  da00              BGE      |L1.22824|
005926  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22824|
;;;8666   
;;;8667   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005928  488a              LDR      r0,|L1.23380|
00592a  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00592e  200a              MOVS     r0,#0xa
005930  fb91f0f0          SDIV     r0,r1,r0
005934  4988              LDR      r1,|L1.23384|
005936  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00593a  ebb00f41          CMP      r0,r1,LSL #1
00593e  da30              BGE      |L1.22946|
005940  4249              RSBS     r1,r1,#0
005942  ebb00f41          CMP      r0,r1,LSL #1
005946  dd2c              BLE      |L1.22946|
005948  4884              LDR      r0,|L1.23388|
00594a  f8900041          LDRB     r0,[r0,#0x41]  ; bat
00594e  07c0              LSLS     r0,r0,#31
005950  d127              BNE      |L1.22946|
005952  4883              LDR      r0,|L1.23392|
005954  4983              LDR      r1,|L1.23396|
005956  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
00595a  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00595e  4288              CMP      r0,r1
005960  dc1f              BGT      |L1.22946|
005962  4981              LDR      r1,|L1.23400|
005964  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005968  4288              CMP      r0,r1
00596a  dd1a              BLE      |L1.22946|
00596c  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005970  280a              CMP      r0,#0xa
005972  db16              BLT      |L1.22946|
005974  28c8              CMP      r0,#0xc8
005976  dc14              BGT      |L1.22946|
;;;8668   	{
;;;8669   	if(bat_hndl_zvu_Q_cnt<60)
005978  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
00597c  283c              CMP      r0,#0x3c
00597e  d20d              BCS      |L1.22940|
;;;8670   		{
;;;8671   		bat_hndl_zvu_Q_cnt++;
005980  f1000001          ADD      r0,r0,#1
005984  b2c0              UXTB     r0,r0
005986  f8840030          STRB     r0,[r4,#0x30]
;;;8672   		if(bat_hndl_zvu_Q_cnt>=60)
00598a  283c              CMP      r0,#0x3c
00598c  d306              BCC      |L1.22940|
;;;8673   			{
;;;8674   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
00598e  2164              MOVS     r1,#0x64
005990  f44f70ef          MOV      r0,#0x1de
005994  f7fffffe          BL       lc640_write_int
;;;8675   			bat_hndl_zvu_Q=1000000L;
005998  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22940|
;;;8676   
;;;8677   
;;;8678   			}
;;;8679   		}
;;;8680   	}
;;;8681   else 
;;;8682   	{
;;;8683   	bat_hndl_zvu_Q_cnt=0;
;;;8684   	}
;;;8685   
;;;8686   
;;;8687   
;;;8688   };
00599c  b009              ADD      sp,sp,#0x24
00599e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22946|
0059a2  f8847030          STRB     r7,[r4,#0x30]         ;8683
0059a6  e7f9              B        |L1.22940|
;;;8689   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8693   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8694   void u_avt_set_hndl(void)
0059a8  e92d5fff          PUSH     {r0-r12,lr}
;;;8695   {
;;;8696   if(uavt_set_stat==uassSTEP1)
0059ac  4d6f              LDR      r5,|L1.23404|
;;;8697   	{
;;;8698   	char i,find_succes;
;;;8699   
;;;8700   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8701   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8702   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8703   		{
;;;8704   		uavt_set_error_cnt=60;
0059ae  4e70              LDR      r6,|L1.23408|
0059b0  f8df81c0          LDR      r8,|L1.23412|
0059b4  7828              LDRB     r0,[r5,#0]            ;8696  ; uavt_set_stat
;;;8705   		}
;;;8706   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8707   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8708   	find_succes=0;
;;;8709   /*	for(i=0;i<NUMIST;i++)
;;;8710   		{
;;;8711   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8712   		else
;;;8713   			{
;;;8714   			find_succes=0;
;;;8715   			break;
;;;8716   			}
;;;8717   		}*/
;;;8718   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0059b6  f8dfa1c0          LDR      r10,|L1.23416|
0059ba  2400              MOVS     r4,#0                 ;8707
;;;8719   
;;;8720   	if(find_succes==1)
;;;8721   		{
;;;8722   		uavt_set_stat=uassSTEP2;
0059bc  f04f0902          MOV      r9,#2
;;;8723   		}
;;;8724   	if(uavt_set_error_cnt)
;;;8725   		{
;;;8726   		uavt_set_error_cnt--;
;;;8727   		if(!uavt_set_error_cnt)
;;;8728   			{
;;;8729   			uavt_set_stat=uassOFF;
;;;8730   			uavt_set_result_stat=uasrsERR;
;;;8731   			avt_error_bps=100;
0059c0  f04f0b64          MOV      r11,#0x64
0059c4  2801              CMP      r0,#1                 ;8696
0059c6  d12e              BNE      |L1.23078|
0059c8  f8980000          LDRB     r0,[r8,#0]            ;8702  ; uavt_set_stat_old
0059cc  2801              CMP      r0,#1                 ;8702
0059ce  d002              BEQ      |L1.22998|
0059d0  f04f003c          MOV      r0,#0x3c              ;8704
0059d4  7030              STRB     r0,[r6,#0]            ;8704
                  |L1.22998|
0059d6  230a              MOVS     r3,#0xa               ;8707
0059d8  2200              MOVS     r2,#0                 ;8707
0059da  21e6              MOVS     r1,#0xe6              ;8707
0059dc  20e1              MOVS     r0,#0xe1              ;8707
0059de  f7fffffe          BL       mess_send
0059e2  f04f0000          MOV      r0,#0                 ;8708
0059e6  4965              LDR      r1,|L1.23420|
0059e8  f9b12000          LDRSH    r2,[r1,#0]            ;8718  ; bps_U
0059ec  f9ba1000          LDRSH    r1,[r10,#0]           ;8718  ; U_AVT
0059f0  f1a10301          SUB      r3,r1,#1              ;8718
0059f4  429a              CMP      r2,r3                 ;8718
0059f6  db04              BLT      |L1.23042|
0059f8  1c49              ADDS     r1,r1,#1              ;8718
0059fa  428a              CMP      r2,r1                 ;8718
0059fc  dc01              BGT      |L1.23042|
0059fe  f04f0001          MOV      r0,#1                 ;8718
                  |L1.23042|
005a02  2801              CMP      r0,#1                 ;8720
005a04  d101              BNE      |L1.23050|
005a06  f8859000          STRB     r9,[r5,#0]            ;8722
                  |L1.23050|
005a0a  7830              LDRB     r0,[r6,#0]            ;8724  ; uavt_set_error_cnt
005a0c  b158              CBZ      r0,|L1.23078|
005a0e  f1a00001          SUB      r0,r0,#1              ;8726
005a12  b2c0              UXTB     r0,r0                 ;8726
005a14  7030              STRB     r0,[r6,#0]            ;8726
005a16  b930              CBNZ     r0,|L1.23078|
005a18  702c              STRB     r4,[r5,#0]            ;8729
005a1a  4859              LDR      r0,|L1.23424|
005a1c  f8809000          STRB     r9,[r0,#0]            ;8730
005a20  4858              LDR      r0,|L1.23428|
005a22  f880b000          STRB     r11,[r0,#0]
                  |L1.23078|
;;;8732   			}
;;;8733   		}
;;;8734   	}
;;;8735   if(uavt_set_stat==uassSTEP2)
005a26  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8736   	{
;;;8737   	char i,find_succes;
;;;8738   
;;;8739   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005a28  4957              LDR      r1,|L1.23432|
;;;8740   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005a2a  4858              LDR      r0,|L1.23436|
;;;8741   
;;;8742   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8743   		{
;;;8744   		uavt_set_error_cnt=60;
;;;8745   		}
;;;8746   
;;;8747   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8748   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8749   	find_succes=1;
;;;8750   
;;;8751   	for(i=0;i<NUMIST;i++)
;;;8752   		{
;;;8753   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8754   		else
;;;8755   			{
;;;8756   			find_succes=0;
;;;8757   			avt_error_bps=i+1;
;;;8758   			break;
;;;8759   			}
;;;8760   		}
;;;8761   
;;;8762   	if(find_succes==1)
;;;8763   		{
;;;8764   		uavt_set_stat=uassSTEP3;
;;;8765   		uavt_bps_pntr=0;
005a2c  4f58              LDR      r7,|L1.23440|
005a2e  2a02              CMP      r2,#2                 ;8735
005a30  d002              BEQ      |L1.23096|
;;;8766   		avt_plazma=0;
;;;8767   		}
;;;8768   
;;;8769   	if(uavt_set_error_cnt)
;;;8770   		{
;;;8771   		uavt_set_error_cnt--;
;;;8772   		if(!uavt_set_error_cnt)
;;;8773   			{
;;;8774   			uavt_set_stat=uassOFF;
;;;8775   			uavt_set_result_stat=uasrsERR;
;;;8776   			}
;;;8777   		}
;;;8778   	}
;;;8779   else if(uavt_set_stat==uassSTEP3)
005a32  2a03              CMP      r2,#3
005a34  d05e              BEQ      |L1.23284|
005a36  e0fb              B        |L1.23600|
                  |L1.23096|
005a38  f9ba2000          LDRSH    r2,[r10,#0]           ;8739  ; U_AVT
005a3c  f04f0365          MOV      r3,#0x65              ;8739
005a40  fb02f303          MUL      r3,r2,r3              ;8739
005a44  fbb3f3fb          UDIV     r3,r3,r11             ;8739
005a48  468a              MOV      r10,r1                ;8739
005a4a  800b              STRH     r3,[r1,#0]            ;8739
005a4c  eb021142          ADD      r1,r2,r2,LSL #5       ;8740
005a50  eb010141          ADD      r1,r1,r1,LSL #1       ;8740
005a54  fbb1f1fb          UDIV     r1,r1,r11             ;8740
005a58  4683              MOV      r11,r0                ;8740
005a5a  8001              STRH     r1,[r0,#0]            ;8740
005a5c  f8980000          LDRB     r0,[r8,#0]            ;8742  ; uavt_set_stat_old
005a60  2802              CMP      r0,#2                 ;8742
005a62  d002              BEQ      |L1.23146|
005a64  f04f003c          MOV      r0,#0x3c              ;8744
005a68  7030              STRB     r0,[r6,#0]            ;8744
                  |L1.23146|
005a6a  230a              MOVS     r3,#0xa               ;8747
005a6c  21bf              MOVS     r1,#0xbf              ;8747
005a6e  20be              MOVS     r0,#0xbe              ;8747
005a70  f7fffffe          BL       mess_send
005a74  230a              MOVS     r3,#0xa               ;8748
005a76  2200              MOVS     r2,#0                 ;8748
005a78  21e6              MOVS     r1,#0xe6              ;8748
005a7a  20e1              MOVS     r0,#0xe1              ;8748
005a7c  f7fffffe          BL       mess_send
005a80  f04f0201          MOV      r2,#1                 ;8749
005a84  f04f0000          MOV      r0,#0                 ;8751
005a88  4943              LDR      r1,|L1.23448|
005a8a  f9ba3000          LDRSH    r3,[r10,#0]           ;8751
005a8e  f8dfe104          LDR      lr,|L1.23444|
005a92  f9bbc000          LDRSH    r12,[r11,#0]          ;8753
005a96  f9b1a000          LDRSH    r10,[r1,#0]           ;8751
005a9a  e00d              B        |L1.23224|
                  |L1.23196|
005a9c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8753
005aa0  eb011100          ADD      r1,r1,r0,LSL #4       ;8753
005aa4  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8753
005aa8  69c9              LDR      r1,[r1,#0x1c]         ;8753
005aaa  4299              CMP      r1,r3                 ;8753
005aac  da09              BGE      |L1.23234|
005aae  4561              CMP      r1,r12                ;8753
005ab0  dd07              BLE      |L1.23234|
005ab2  f1000001          ADD      r0,r0,#1              ;8751
005ab6  b2c0              UXTB     r0,r0                 ;8751
                  |L1.23224|
005ab8  4550              CMP      r0,r10                ;8751
005aba  dbef              BLT      |L1.23196|
                  |L1.23228|
005abc  2a01              CMP      r2,#1                 ;8762
005abe  d007              BEQ      |L1.23248|
005ac0  e00c              B        |L1.23260|
                  |L1.23234|
005ac2  f04f0200          MOV      r2,#0                 ;8756
005ac6  492f              LDR      r1,|L1.23428|
005ac8  f1000001          ADD      r0,r0,#1              ;8757
005acc  7008              STRB     r0,[r1,#0]            ;8757
005ace  e7f5              B        |L1.23228|
                  |L1.23248|
005ad0  f04f0003          MOV      r0,#3                 ;8764
005ad4  7028              STRB     r0,[r5,#0]            ;8764
005ad6  703c              STRB     r4,[r7,#0]            ;8765
005ad8  4830              LDR      r0,|L1.23452|
005ada  7004              STRB     r4,[r0,#0]            ;8766
                  |L1.23260|
005adc  7830              LDRB     r0,[r6,#0]            ;8769  ; uavt_set_error_cnt
005ade  b370              CBZ      r0,|L1.23358|
005ae0  f1a00001          SUB      r0,r0,#1              ;8771
005ae4  b2c0              UXTB     r0,r0                 ;8771
005ae6  7030              STRB     r0,[r6,#0]            ;8771
005ae8  bb48              CBNZ     r0,|L1.23358|
005aea  702c              STRB     r4,[r5,#0]            ;8774
005aec  4824              LDR      r0,|L1.23424|
005aee  f8809000          STRB     r9,[r0,#0]            ;8775
005af2  e09d              B        |L1.23600|
                  |L1.23284|
;;;8780   	{
;;;8781   	char i,find_succes;
;;;8782   
;;;8783   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005af4  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005af8  f04f0365          MOV      r3,#0x65
005afc  fb02f303          MUL      r3,r2,r3
005b00  fbb3f3fb          UDIV     r3,r3,r11
005b04  468a              MOV      r10,r1
005b06  800b              STRH     r3,[r1,#0]
;;;8784   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005b08  eb021142          ADD      r1,r2,r2,LSL #5
005b0c  eb010141          ADD      r1,r1,r1,LSL #1
005b10  fbb1f1fb          UDIV     r1,r1,r11
005b14  4683              MOV      r11,r0
005b16  8001              STRH     r1,[r0,#0]
;;;8785   	
;;;8786   	if(uavt_set_stat_old!=uavt_set_stat)
005b18  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005b1c  2803              CMP      r0,#3
005b1e  d000              BEQ      |L1.23330|
;;;8787   		{
;;;8788   		uavt_bps_pntr=0;
005b20  703c              STRB     r4,[r7,#0]
                  |L1.23330|
;;;8789   		}
;;;8790   
;;;8791   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005b22  230a              MOVS     r3,#0xa
005b24  21bf              MOVS     r1,#0xbf
005b26  20be              MOVS     r0,#0xbe
005b28  f7fffffe          BL       mess_send
;;;8792   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005b2c  230a              MOVS     r3,#0xa
005b2e  2200              MOVS     r2,#0
005b30  21e6              MOVS     r1,#0xe6
005b32  20e1              MOVS     r0,#0xe1
005b34  f7fffffe          BL       mess_send
;;;8793   
;;;8794   	find_succes=1;
005b38  f04f0601          MOV      r6,#1
;;;8795   	for(i=0;i<NUMIST;i++)
005b3c  e030              B        |L1.23456|
                  |L1.23358|
005b3e  e077              B        |L1.23600|
                  |L1.23360|
                          DCD      BAT_C_POINT_5
                  |L1.23364|
                          DCD      BAT_C_POINT_10
                  |L1.23368|
                          DCD      BAT_C_POINT_20
                  |L1.23372|
                          DCD      BAT_K_OLD
                  |L1.23376|
                          DCD      0xfff0bdc0
                  |L1.23380|
                          DCD      Ib_ips_termokompensat
                  |L1.23384|
                          DCD      IKB
                  |L1.23388|
                          DCD      bat
                  |L1.23392|
                          DCD      out_U
                  |L1.23396|
                          DCD      u_necc_up
                  |L1.23400|
                          DCD      u_necc_dn
                  |L1.23404|
                          DCD      uavt_set_stat
                  |L1.23408|
                          DCD      uavt_set_error_cnt
                  |L1.23412|
                          DCD      uavt_set_stat_old
                  |L1.23416|
                          DCD      U_AVT
                  |L1.23420|
                          DCD      bps_U
                  |L1.23424|
                          DCD      uavt_set_result_stat
                  |L1.23428|
                          DCD      avt_error_bps
                  |L1.23432|
                          DCD      u_max_temp
                  |L1.23436|
                          DCD      u_min_temp
                  |L1.23440|
                          DCD      uavt_bps_pntr
                  |L1.23444|
                          DCD      bps
                  |L1.23448|
                          DCD      NUMIST
                  |L1.23452|
                          DCD      avt_plazma
                  |L1.23456|
005ba0  f04f0000          MOV      r0,#0
005ba4  f8df942c          LDR      r9,|L1.24532|
005ba8  f9ba2000          LDRSH    r2,[r10,#0]
005bac  f8dfc420          LDR      r12,|L1.24528|
005bb0  f9bb3000          LDRSH    r3,[r11,#0]           ;8753
005bb4  f9b9a000          LDRSH    r10,[r9,#0]           ;8751
005bb8  e00d              B        |L1.23510|
                  |L1.23482|
;;;8796   		{
;;;8797   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005bba  eb0001c0          ADD      r1,r0,r0,LSL #3
005bbe  eb011100          ADD      r1,r1,r0,LSL #4
005bc2  eb0c0181          ADD      r1,r12,r1,LSL #2
005bc6  69c9              LDR      r1,[r1,#0x1c]
005bc8  4291              CMP      r1,r2
005bca  da0f              BGE      |L1.23532|
005bcc  4299              CMP      r1,r3
005bce  dd0d              BLE      |L1.23532|
005bd0  f1000001          ADD      r0,r0,#1              ;8795
005bd4  b2c0              UXTB     r0,r0                 ;8795
                  |L1.23510|
005bd6  4550              CMP      r0,r10                ;8795
005bd8  dbef              BLT      |L1.23482|
                  |L1.23514|
;;;8798   		else
;;;8799   			{
;;;8800   			find_succes=0;
;;;8801   			break;
;;;8802   			}
;;;8803   		}
;;;8804   
;;;8805   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005bda  20d7              MOVS     r0,#0xd7
005bdc  f7fffffe          BL       mess_find
005be0  b1a0              CBZ      r0,|L1.23564|
005be2  48fd              LDR      r0,|L1.24536|
005be4  6800              LDR      r0,[r0,#0]  ; mess_data
005be6  28d9              CMP      r0,#0xd9
005be8  d003              BEQ      |L1.23538|
005bea  e00f              B        |L1.23564|
                  |L1.23532|
005bec  f04f0600          MOV      r6,#0                 ;8800
005bf0  e7f3              B        |L1.23514|
                  |L1.23538|
;;;8806   		{
;;;8807   		if(++uavt_bps_pntr>=NUMIST)
005bf2  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005bf4  1c40              ADDS     r0,r0,#1
005bf6  b2c0              UXTB     r0,r0
005bf8  7038              STRB     r0,[r7,#0]
005bfa  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005bfe  4288              CMP      r0,r1
005c00  db04              BLT      |L1.23564|
;;;8808   			{
;;;8809   			uavt_set_stat=uassOFF;
005c02  702c              STRB     r4,[r5,#0]
;;;8810   			uavt_set_result_stat=uasrsSUCCESS;
005c04  49f5              LDR      r1,|L1.24540|
005c06  f04f0003          MOV      r0,#3
005c0a  7008              STRB     r0,[r1,#0]
                  |L1.23564|
;;;8811   			}
;;;8812   		//uavt_bps_pntr++;
;;;8813   		//if()
;;;8814   		}
;;;8815   	if(find_succes==1)
005c0c  2e01              CMP      r6,#1
005c0e  d10f              BNE      |L1.23600|
;;;8816   		{
;;;8817   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005c10  20ee              MOVS     r0,#0xee
005c12  e9cd0400          STRD     r0,r4,[sp,#0]
005c16  9402              STR      r4,[sp,#8]
005c18  9403              STR      r4,[sp,#0xc]
005c1a  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005c1c  4603              MOV      r3,r0
005c1e  2216              MOVS     r2,#0x16
005c20  4608              MOV      r0,r1
005c22  f7fffffe          BL       mcp2515_transmit
;;;8818   		avt_plazma++;
005c26  48ee              LDR      r0,|L1.24544|
005c28  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005c2a  f1010101          ADD      r1,r1,#1
005c2e  7001              STRB     r1,[r0,#0]
                  |L1.23600|
;;;8819   		}
;;;8820   	}
;;;8821   
;;;8822   
;;;8823   
;;;8824   uavt_set_stat_old=uavt_set_stat;
005c30  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005c32  f8880000          STRB     r0,[r8,#0]
;;;8825   
;;;8826   }
005c36  e8bd9fff          POP      {r0-r12,pc}
;;;8827   
                          ENDP

                  u_necc_hndl PROC
;;;8902   //-----------------------------------------------
;;;8903   void u_necc_hndl(void)
005c3a  b5f8              PUSH     {r3-r7,lr}
;;;8904   {
;;;8905   signed long temp_L;
;;;8906   signed long temp_SL;
;;;8907   //signed short temp_SS;
;;;8908   
;;;8909   //char i;
;;;8910   
;;;8911   //temp_SS=0;
;;;8912   signed short t[2];
;;;8913   
;;;8914   
;;;8915   
;;;8916   
;;;8917   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8918   
;;;8919   if(!TERMOKOMPENS)
005c3c  48e9              LDR      r0,|L1.24548|
;;;8920   	{
;;;8921   	//u_necc=U0B;
;;;8922   	u_necc=UB20;
;;;8923   	}
;;;8924   else
;;;8925   	{
;;;8926   	if(ND_EXT[0])t[0]=20;
;;;8927   	else t[0]=t_ext[0];
;;;8928   
;;;8929   	mat_temper=t[0];
;;;8930   			
;;;8931   	if(mat_temper<0)temp_SL=UB0; 
;;;8932   	else 
;;;8933   		{
;;;8934   		if(mat_temper>40)mat_temper=40; 
;;;8935   		temp_SL=(UB20-UB0)*10;
;;;8936   		temp_SL*=mat_temper;
;;;8937   		temp_SL/=200;
;;;8938   		temp_SL+=UB0;
;;;8939   		}
;;;8940   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005c3e  4dec              LDR      r5,|L1.24560|
005c40  4cec              LDR      r4,|L1.24564|
005c42  8801              LDRH     r1,[r0,#0]            ;8919  ; TERMOKOMPENS
005c44  48e8              LDR      r0,|L1.24552|
005c46  f9b03000          LDRSH    r3,[r0,#0]            ;8922
;;;8941   		{
;;;8942   		temp_SL=UVZ;
005c4a  48e8              LDR      r0,|L1.24556|
005c4c  f9b02000          LDRSH    r2,[r0,#0]
005c50  b139              CBZ      r1,|L1.23650|
005c52  48e9              LDR      r0,|L1.24568|
005c54  7800              LDRB     r0,[r0,#0]            ;8926  ; ND_EXT
005c56  b130              CBZ      r0,|L1.23654|
005c58  f04f0014          MOV      r0,#0x14              ;8926
005c5c  f8ad0000          STRH     r0,[sp,#0]            ;8926
005c60  e005              B        |L1.23662|
                  |L1.23650|
005c62  8023              STRH     r3,[r4,#0]            ;8922
005c64  e02c              B        |L1.23744|
                  |L1.23654|
005c66  48e5              LDR      r0,|L1.24572|
005c68  8800              LDRH     r0,[r0,#0]            ;8927  ; t_ext
005c6a  f8ad0000          STRH     r0,[sp,#0]            ;8927
                  |L1.23662|
005c6e  4ee4              LDR      r6,|L1.24576|
005c70  f9bd1000          LDRSH    r1,[sp,#0]            ;8929
005c74  6031              STR      r1,[r6,#0]            ;8929  ; mat_temper
005c76  48e3              LDR      r0,|L1.24580|
005c78  2900              CMP      r1,#0                 ;8931
005c7a  f9b00000          LDRSH    r0,[r0,#0]            ;8931
005c7e  db12              BLT      |L1.23718|
005c80  2928              CMP      r1,#0x28              ;8934
005c82  dd02              BLE      |L1.23690|
005c84  f04f0128          MOV      r1,#0x28              ;8934
005c88  6031              STR      r1,[r6,#0]            ;8934  ; mat_temper
                  |L1.23690|
005c8a  eba30100          SUB      r1,r3,r0              ;8935
005c8e  eb010181          ADD      r1,r1,r1,LSL #2       ;8935
005c92  ea4f0141          LSL      r1,r1,#1              ;8935
005c96  6833              LDR      r3,[r6,#0]            ;8936  ; mat_temper
005c98  fb01f103          MUL      r1,r1,r3              ;8936
005c9c  f04f03c8          MOV      r3,#0xc8              ;8937
005ca0  fb91f1f3          SDIV     r1,r1,r3              ;8937
005ca4  4408              ADD      r0,r0,r1              ;8938
                  |L1.23718|
005ca6  f8951023          LDRB     r1,[r5,#0x23]         ;8940  ; spc_stat
005caa  2902              CMP      r1,#2                 ;8940
005cac  d107              BNE      |L1.23742|
005cae  49d6              LDR      r1,|L1.24584|
005cb0  7809              LDRB     r1,[r1,#0]            ;8940  ; sk_stat
005cb2  2901              CMP      r1,#1                 ;8940
005cb4  d002              BEQ      |L1.23740|
005cb6  49d5              LDR      r1,|L1.24588|
005cb8  8809              LDRH     r1,[r1,#0]            ;8940  ; VZ_CH_VENT_BLOK
005cba  b901              CBNZ     r1,|L1.23742|
                  |L1.23740|
005cbc  4610              MOV      r0,r2
                  |L1.23742|
;;;8943   		}
;;;8944   	u_necc=(unsigned int)temp_SL;
005cbe  8020              STRH     r0,[r4,#0]
                  |L1.23744|
;;;8945   	///u_necc=3456;
;;;8946   	}  
;;;8947   
;;;8948   //u_necc=2355;
;;;8949   
;;;8950   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005cc0  48d3              LDR      r0,|L1.24592|
005cc2  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005cc4  b918              CBNZ     r0,|L1.23758|
005cc6  48d3              LDR      r0,|L1.24596|
005cc8  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005cca  2802              CMP      r0,#2
005ccc  d102              BNE      |L1.23764|
                  |L1.23758|
;;;8951   	{
;;;8952   	u_necc=speedChrgVolt;
005cce  48d2              LDR      r0,|L1.24600|
005cd0  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005cd2  8020              STRH     r0,[r4,#0]
                  |L1.23764|
;;;8953   	}
;;;8954   if(hv_vz_stat==hvsWRK)
005cd4  48d1              LDR      r0,|L1.24604|
005cd6  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005cd8  2805              CMP      r0,#5
005cda  d100              BNE      |L1.23774|
;;;8955   	{
;;;8956   	u_necc=UVZ;
005cdc  8022              STRH     r2,[r4,#0]
                  |L1.23774|
;;;8957   	}
;;;8958   if(vz1_stat==vz1sWRK)
005cde  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005ce0  280a              CMP      r0,#0xa
005ce2  d102              BNE      |L1.23786|
;;;8959   	{
;;;8960   	u_necc=UZ_U;
005ce4  48ce              LDR      r0,|L1.24608|
005ce6  8800              LDRH     r0,[r0,#0]  ; UZ_U
005ce8  8020              STRH     r0,[r4,#0]
                  |L1.23786|
;;;8961   	}
;;;8962   if(vz2_stat==vz2sWRK1)
005cea  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005cec  280a              CMP      r0,#0xa
005cee  d102              BNE      |L1.23798|
;;;8963   	{
;;;8964   	u_necc=FZ_U1;
005cf0  49cc              LDR      r1,|L1.24612|
005cf2  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005cf4  8021              STRH     r1,[r4,#0]
                  |L1.23798|
;;;8965   	}
;;;8966   if(vz2_stat==vz2sWRK2)
005cf6  280b              CMP      r0,#0xb
005cf8  d102              BNE      |L1.23808|
;;;8967   	{
;;;8968   	u_necc=FZ_U2;
005cfa  48cb              LDR      r0,|L1.24616|
005cfc  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005cfe  8020              STRH     r0,[r4,#0]
                  |L1.23808|
;;;8969   	}
;;;8970   
;;;8971   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005d00  48ca              LDR      r0,|L1.24620|
005d02  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005d04  2801              CMP      r0,#1
005d06  d001              BEQ      |L1.23820|
005d08  2802              CMP      r0,#2
005d0a  d102              BNE      |L1.23826|
                  |L1.23820|
;;;8972   	{
;;;8973   	u_necc=U_AVT;
005d0c  48c8              LDR      r0,|L1.24624|
005d0e  8800              LDRH     r0,[r0,#0]  ; U_AVT
005d10  8020              STRH     r0,[r4,#0]
                  |L1.23826|
;;;8974   	}
;;;8975   
;;;8976   if(mess_find_unvol(MESS2UNECC_HNDL))
005d12  20be              MOVS     r0,#0xbe
005d14  f7fffffe          BL       mess_find_unvol
005d18  b128              CBZ      r0,|L1.23846|
;;;8977   	{		
;;;8978   	if(mess_data[0]==PARAM_UNECC_SET)
005d1a  48af              LDR      r0,|L1.24536|
005d1c  6801              LDR      r1,[r0,#0]  ; mess_data
005d1e  29bf              CMP      r1,#0xbf
005d20  d101              BNE      |L1.23846|
;;;8979   		{
;;;8980   		u_necc=mess_data[1];
005d22  6840              LDR      r0,[r0,#4]  ; mess_data
005d24  8020              STRH     r0,[r4,#0]
                  |L1.23846|
;;;8981   		}		
;;;8982   	} 
;;;8983   
;;;8984   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8985   #endif
;;;8986   
;;;8987   
;;;8988   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8989   
;;;8990   #ifndef UKU_TELECORE2015
;;;8991   #ifndef UKU_TELECORE2017
;;;8992   if(unh_cnt0<10)
;;;8993   	{
;;;8994   	unh_cnt0++;
;;;8995   	if(unh_cnt0>=10)
;;;8996   		{
;;;8997   		unh_cnt0=0;
;;;8998   		b1Hz_unh=1;
;;;8999   		}
;;;9000   	}
;;;9001   
;;;9002   if(unh_cnt1<5)
;;;9003   	{
;;;9004   	unh_cnt1++;
;;;9005   	if(unh_cnt1==5)
;;;9006   		{
;;;9007   		unh_cnt1=0;
;;;9008   //		b2Hz_unh=1;
;;;9009   		}
;;;9010   	} 
;;;9011   
;;;9012   
;;;9013   
;;;9014   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9015   	{		
;;;9016   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9017   		{
;;;9018   		u_necc=mess_data[1];
;;;9019   		}		
;;;9020   	}
;;;9021   
;;;9022   
;;;9023   else if(b1Hz_unh)
;;;9024   	{
;;;9025   	
;;;9026   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;9027   		{
;;;9028   		
;;;9029   		u_necc=U0B;
;;;9030   		#ifdef IPS_SGEP_GAZPROM
;;;9031   		u_necc=UB0;
;;;9032   		#endif
;;;9033   		}
;;;9034   	else 
;;;9035   		{
;;;9036   		if(BAT_TYPE==0) //если батарея обычная
;;;9037   			{
;;;9038   			for(i=0;i<2;i++)
;;;9039   				{
;;;9040   				if(BAT_IS_ON[i]==bisON)
;;;9041   					{
;;;9042   					if(bat[i]._nd)t[i]=20;
;;;9043   					else t[i]=bat[i]._Tb;
;;;9044   					}
;;;9045   				else
;;;9046   					{
;;;9047   					t[i]=-20;
;;;9048   					}
;;;9049   				}
;;;9050   			if(t[0]>t[1])mat_temper=t[0];
;;;9051   			else mat_temper=t[1];
;;;9052   			
;;;9053   		
;;;9054   			if(mat_temper<0)temp_SL=UB0; 
;;;9055   			else 
;;;9056   				{
;;;9057   				if(mat_temper>40)mat_temper=40; 
;;;9058   				temp_SL=(UB20-UB0)*10;
;;;9059   				temp_SL*=mat_temper;
;;;9060   				temp_SL/=200;
;;;9061   				temp_SL+=UB0;
;;;9062   				}
;;;9063   			if((spc_stat==spcVZ)
;;;9064   #ifndef UKU_6U			
;;;9065   			&&(sk_stat[0]==1)
;;;9066   #endif //UKU_6U
;;;9067   			)
;;;9068   				{
;;;9069   				temp_SL=UVZ;
;;;9070   				}
;;;9071   			u_necc=(unsigned int)temp_SL;
;;;9072   			}
;;;9073   		else if(BAT_TYPE==1) //если батарея китайская
;;;9074   			{
;;;9075   			u_necc=U0B;
;;;9076   					
;;;9077   			u_necc=bat[0]._Ub+10;
;;;9078   
;;;9079   			
;;;9080   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9081   				{
;;;9082   				u_necc=UVZ;
;;;9083   				}
;;;9084   			if(u_necc>=UB0) u_necc=UB0;
;;;9085   			if(u_necc>=UB20) u_necc=UB20;
;;;9086   			}
;;;9087   		}  
;;;9088   	}
;;;9089   #endif
;;;9090   #endif
;;;9091   
;;;9092   #ifdef UKU_TELECORE2015
;;;9093   
;;;9094   if(unh_cnt0<10)
;;;9095   	{
;;;9096   	unh_cnt0++;
;;;9097   	if(unh_cnt0>=10)
;;;9098   		{
;;;9099   		unh_cnt0=0;
;;;9100   		b1Hz_unh=1;
;;;9101   		}
;;;9102   	}
;;;9103   
;;;9104   if(unh_cnt1<5)
;;;9105   	{
;;;9106   	unh_cnt1++;
;;;9107   	if(unh_cnt1==5)
;;;9108   		{
;;;9109   		unh_cnt1=0;
;;;9110   //		b2Hz_unh=1;
;;;9111   		}
;;;9112   	} 
;;;9113   
;;;9114   
;;;9115   
;;;9116   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9117   	{		
;;;9118   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9119   		{
;;;9120   		u_necc=mess_data[1];
;;;9121   		}		
;;;9122   	}
;;;9123   
;;;9124   
;;;9125   else if(b1Hz_unh)
;;;9126   	{
;;;9127   	b1Hz_unh=0;
;;;9128   
;;;9129   	if(BAT_TYPE==0)
;;;9130   		{
;;;9131   		if(bat[0]._nd)mat_temper=20;
;;;9132   		else mat_temper=bat[0]._Tb;
;;;9133   
;;;9134   			
;;;9135   		if(mat_temper<0)temp_SL=UB0; 
;;;9136   		else 
;;;9137   			{
;;;9138   			if(mat_temper>40)mat_temper=40; 
;;;9139   			temp_SL=(UB20-UB0)*10;
;;;9140   			temp_SL*=mat_temper;
;;;9141   			temp_SL/=200;
;;;9142   			temp_SL+=UB0;
;;;9143   			}
;;;9144   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9145   			{
;;;9146   			temp_SL=UVZ;
;;;9147   			}
;;;9148   		u_necc=(unsigned int)temp_SL;
;;;9149   	///u_necc=3456;
;;;9150   		}
;;;9151   	else if(BAT_TYPE==1)
;;;9152   		{
;;;9153   		
;;;9154   		gran(&DU_LI_BAT,1,30);
;;;9155   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9156   		gran(&u_necc,0,UB0);
;;;9157   		gran(&u_necc,0,UB20);
;;;9158   		gran(&u_necc,0,540);		
;;;9159   
;;;9160   
;;;9161   		if(li_bat._batStat!=bsOK)
;;;9162   			{
;;;9163   			u_necc=U0B;
;;;9164   			}
;;;9165   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9166   			{
;;;9167   			u_necc=UVZ;
;;;9168   			}
;;;9169   		/* 
;;;9170   		u_necc=U0B;
;;;9171   		
;;;9172   
;;;9173   	
;;;9174   		u_necc=UB0;
;;;9175   		u_necc=li_bat._Ub+10;
;;;9176   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;9177   			{
;;;9178   			lakb_error_cnt++;
;;;9179   			if(lakb_error_cnt>=30)
;;;9180   				{
;;;9181   				lakb_error_cnt=30;
;;;9182   				u_necc=U0B;
;;;9183   				}
;;;9184   			}
;;;9185   		else lakb_error_cnt=0;*/
;;;9186   		}
;;;9187   	else if(BAT_TYPE==2)
;;;9188   		{
;;;9189   		u_necc=U0B;
;;;9190   		
;;;9191   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9192   			{
;;;9193   			u_necc=UVZ;
;;;9194   			}
;;;9195   	
;;;9196   		u_necc=UB0;
;;;9197   		}
;;;9198   
;;;9199   	else if(BAT_TYPE==3)
;;;9200   		{
;;;9201   		u_necc=U0B;
;;;9202   		
;;;9203   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9204   			{
;;;9205   			u_necc=UVZ;
;;;9206   			}
;;;9207   
;;;9208   		gran(&DU_LI_BAT,1,30);
;;;9209   
;;;9210   
;;;9211   		if(lakbNotErrorNum==0)
;;;9212   			{
;;;9213   			u_necc=U0B;
;;;9214   			}
;;;9215   		else 
;;;9216   			{
;;;9217   			signed short i;
;;;9218   			//signed short u_necc_max;
;;;9219   			//u_necc_max=0;
;;;9220   			char soc_flag=0;
;;;9221   
;;;9222   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9223   				{
;;;9224   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9225   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9226   				}
;;;9227   
;;;9228   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9229   			}
;;;9230   		gran(&u_necc,0,UB0);
;;;9231   		//gran(&u_necc,0,UB20);
;;;9232   		gran(&u_necc,0,540);
;;;9233   		}
;;;9234   	}
;;;9235   
;;;9236   #endif 
;;;9237   
;;;9238   #ifdef UKU_TELECORE2017
;;;9239   
;;;9240   if(unh_cnt0<10)
;;;9241   	{
;;;9242   	unh_cnt0++;
;;;9243   	if(unh_cnt0>=10)
;;;9244   		{
;;;9245   		unh_cnt0=0;
;;;9246   		b1Hz_unh=1;
;;;9247   		}
;;;9248   	}
;;;9249   
;;;9250   if(unh_cnt1<5)
;;;9251   	{
;;;9252   	unh_cnt1++;
;;;9253   	if(unh_cnt1==5)
;;;9254   		{
;;;9255   		unh_cnt1=0;
;;;9256   //		b2Hz_unh=1;
;;;9257   		}
;;;9258   	} 
;;;9259   
;;;9260   
;;;9261   
;;;9262   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9263   	{		
;;;9264   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9265   		{
;;;9266   		u_necc=mess_data[1];
;;;9267   		}		
;;;9268   	}
;;;9269   
;;;9270   
;;;9271   else if(b1Hz_unh)
;;;9272   	{
;;;9273   	b1Hz_unh=0;
;;;9274   
;;;9275   	if(BAT_TYPE==0)
;;;9276   		{
;;;9277   		if(bat[0]._nd)mat_temper=20;
;;;9278   		else mat_temper=bat[0]._Tb;
;;;9279   
;;;9280   			
;;;9281   		if(mat_temper<0)temp_SL=UB0; 
;;;9282   		else 
;;;9283   			{
;;;9284   			if(mat_temper>40)mat_temper=40; 
;;;9285   			temp_SL=(UB20-UB0)*10;
;;;9286   			temp_SL*=mat_temper;
;;;9287   			temp_SL/=200;
;;;9288   			temp_SL+=UB0;
;;;9289   			}
;;;9290   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9291   			{
;;;9292   			temp_SL=UVZ;
;;;9293   			}
;;;9294   		u_necc=(unsigned int)temp_SL;
;;;9295   	///u_necc=3456;
;;;9296   		}
;;;9297   	else if(BAT_TYPE==1)
;;;9298   		{
;;;9299   		
;;;9300   		gran(&DU_LI_BAT,1,30);
;;;9301   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9302   		gran(&u_necc,0,UB0);
;;;9303   		gran(&u_necc,0,UB20);
;;;9304   		gran(&u_necc,0,540);		
;;;9305   
;;;9306   
;;;9307   		if(li_bat._batStat!=bsOK)
;;;9308   			{
;;;9309   			u_necc=U0B;
;;;9310   			}
;;;9311   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9312   			{
;;;9313   			u_necc=UVZ;
;;;9314   			}
;;;9315   		}
;;;9316   	else if(BAT_TYPE==2)
;;;9317   		{
;;;9318   		u_necc=U0B;
;;;9319   		
;;;9320   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9321   			{
;;;9322   			u_necc=UVZ;
;;;9323   			}
;;;9324   	
;;;9325   		u_necc=UB0;
;;;9326   		}
;;;9327   
;;;9328   	else if(BAT_TYPE==3)
;;;9329   		{
;;;9330   		u_necc=U0B;
;;;9331   		
;;;9332   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9333   			{
;;;9334   			u_necc=UVZ;
;;;9335   			}
;;;9336   
;;;9337   		gran(&DU_LI_BAT,1,30);
;;;9338   
;;;9339   
;;;9340   		if(lakbNotErrorNum==0)
;;;9341   			{
;;;9342   			u_necc=U0B;
;;;9343   			}
;;;9344   		else 
;;;9345   			{
;;;9346   			signed short i;
;;;9347   			//signed short u_necc_max;
;;;9348   			//u_necc_max=0;
;;;9349   			char soc_flag=0;
;;;9350   
;;;9351   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9352   				{
;;;9353   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9354   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9355   				}
;;;9356   
;;;9357   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9358   			}
;;;9359   		gran(&u_necc,0,UB0);
;;;9360   		//gran(&u_necc,0,UB20);
;;;9361   		gran(&u_necc,0,540);
;;;9362   		}
;;;9363   	}
;;;9364   
;;;9365   #endif 
;;;9366   //u_necc=2356;
;;;9367   
;;;9368   #ifdef UKU_FSO
;;;9369   
;;;9370   if(unh_cnt0<10)
;;;9371   	{
;;;9372   	unh_cnt0++;
;;;9373   	if(unh_cnt0>=10)
;;;9374   		{
;;;9375   		unh_cnt0=0;
;;;9376   		b1Hz_unh=1;
;;;9377   		}
;;;9378   	}
;;;9379   
;;;9380   if(unh_cnt1<5)
;;;9381   	{
;;;9382   	unh_cnt1++;
;;;9383   	if(unh_cnt1==5)
;;;9384   		{
;;;9385   		unh_cnt1=0;
;;;9386   //		b2Hz_unh=1;
;;;9387   		}
;;;9388   	} 
;;;9389   
;;;9390   
;;;9391   
;;;9392   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9393   	{		
;;;9394   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9395   		{
;;;9396   		u_necc=mess_data[1];
;;;9397   		}		
;;;9398   	}
;;;9399   
;;;9400   
;;;9401   else if(b1Hz_unh)
;;;9402   	{
;;;9403   	b1Hz_unh=0;
;;;9404   
;;;9405   	if(BAT_TYPE==4)
;;;9406   		{
;;;9407   		u_necc=TELECORE2017_ULINECC;
;;;9408   		
;;;9409   	/**	if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9410   			{
;;;9411   			u_necc=UVZ;
;;;9412   			}*/
;;;9413   
;;;9414   		gran(&DU_LI_BAT,1,30);
;;;9415   
;;;9416   		/*
;;;9417   		if(lakbNotErrorNum==0)
;;;9418   			{
;;;9419   			u_necc=U0B;
;;;9420   			}
;;;9421   		else 
;;;9422   			{
;;;9423   			signed short i;
;;;9424   			//signed short u_necc_max;
;;;9425   			//u_necc_max=0;
;;;9426   			char soc_flag=0;
;;;9427   
;;;9428   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9429   				{
;;;9430   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9431   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9432   				}
;;;9433   
;;;9434   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9435   			}
;;;9436   		*/
;;;9437   		//u_necc=512;
;;;9438   		gran(&u_necc,0,UB0);
;;;9439   		//gran(&u_necc,0,UB20);
;;;9440   		gran(&u_necc,0,560);
;;;9441   		}
;;;9442   	}
;;;9443   
;;;9444   #endif //UKU_FSO
;;;9445   
;;;9446   
;;;9447   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9448   	{
;;;9449   	u_necc=speedChrgVolt;
;;;9450   	}
;;;9451   #endif//gran(&u_necc,400,UMAX);
;;;9452   
;;;9453   
;;;9454   
;;;9455   temp_L=(signed long) u_necc;
005d26  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9456   temp_L*=98L;
005d2a  f04f0162          MOV      r1,#0x62
005d2e  fb00f101          MUL      r1,r0,r1
;;;9457   temp_L/=100L;
005d32  f04f0264          MOV      r2,#0x64
005d36  fb91f1f2          SDIV     r1,r1,r2
;;;9458   u_necc_dn=(signed short)temp_L;
005d3a  4bbe              LDR      r3,|L1.24628|
005d3c  8019              STRH     r1,[r3,#0]
;;;9459   
;;;9460   temp_L=(signed long) u_necc;
;;;9461   temp_L*=102L;
005d3e  f04f0166          MOV      r1,#0x66
005d42  fb00f001          MUL      r0,r0,r1
;;;9462   temp_L/=100L;
005d46  fb90f0f2          SDIV     r0,r0,r2
;;;9463   u_necc_up=(signed short)temp_L;
005d4a  49bb              LDR      r1,|L1.24632|
005d4c  8008              STRH     r0,[r1,#0]
;;;9464   /*
;;;9465   #ifdef IPS_SGEP_GAZPROM
;;;9466   u_necc=248;
;;;9467   #endif */
;;;9468   }
005d4e  bdf8              POP      {r3-r7,pc}
;;;9469   
                          ENDP

                  num_necc_hndl PROC
;;;9471   //-----------------------------------------------
;;;9472   void num_necc_hndl(void)
005d50  e92d41f0          PUSH     {r4-r8,lr}
;;;9473   {
;;;9474   
;;;9475   static short num_necc_block_cnt;
;;;9476   if(num_necc_block_cnt) num_necc_block_cnt--;
005d54  4ca6              LDR      r4,|L1.24560|
005d56  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005d5a  b110              CBZ      r0,|L1.23906|
005d5c  f1a00001          SUB      r0,r0,#1
005d60  8720              STRH     r0,[r4,#0x38]
                  |L1.23906|
;;;9477   
;;;9478   Isumm_=Isumm;
005d62  48b6              LDR      r0,|L1.24636|
005d64  4db6              LDR      r5,|L1.24640|
005d66  8800              LDRH     r0,[r0,#0]  ; Isumm
005d68  8028              STRH     r0,[r5,#0]
;;;9479   
;;;9480   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005d6a  4eb6              LDR      r6,|L1.24644|
005d6c  270a              MOVS     r7,#0xa
005d6e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005d72  2800              CMP      r0,#0
005d74  da06              BGE      |L1.23940|
005d76  f7fffffe          BL       abs
005d7a  fb90f0f7          SDIV     r0,r0,r7
005d7e  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d80  4408              ADD      r0,r0,r1
005d82  8028              STRH     r0,[r5,#0]
                  |L1.23940|
;;;9481   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005d84  f9b60058          LDRSH    r0,[r6,#0x58]  ; bat
005d88  2800              CMP      r0,#0
005d8a  da06              BGE      |L1.23962|
005d8c  f7fffffe          BL       abs
005d90  fb90f0f7          SDIV     r0,r0,r7
005d94  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d96  4408              ADD      r0,r0,r1
005d98  8028              STRH     r0,[r5,#0]
                  |L1.23962|
;;;9482   
;;;9483   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005d9a  49ab              LDR      r1,|L1.24648|
005d9c  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005da0  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005da4  fb90f1f1          SDIV     r1,r0,r1
005da8  f1010101          ADD      r1,r1,#1
005dac  b2c9              UXTB     r1,r1
005dae  77e1              STRB     r1,[r4,#0x1f]
;;;9484   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9485   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9486   
;;;9487   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005db0  4aa6              LDR      r2,|L1.24652|
005db2  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005db6  fb90f0f2          SDIV     r0,r0,r2
005dba  f1000001          ADD      r0,r0,#1
005dbe  b2c2              UXTB     r2,r0
005dc0  f8842020          STRB     r2,[r4,#0x20]
;;;9488   
;;;9489   if(num_necc_up>num_necc)
005dc4  48a2              LDR      r0,|L1.24656|
;;;9490   	{
;;;9491   	num_necc=num_necc_up;
;;;9492   	num_necc_block_cnt=60;
005dc6  f04f053c          MOV      r5,#0x3c
005dca  f9b03000          LDRSH    r3,[r0,#0]            ;9489  ; num_necc
005dce  4299              CMP      r1,r3                 ;9489
005dd0  dd02              BLE      |L1.24024|
005dd2  8001              STRH     r1,[r0,#0]            ;9491
005dd4  8725              STRH     r5,[r4,#0x38]
005dd6  e005              B        |L1.24036|
                  |L1.24024|
;;;9493   	}
;;;9494   else if(num_necc_down<num_necc)
005dd8  429a              CMP      r2,r3
005dda  da03              BGE      |L1.24036|
;;;9495   	{
;;;9496   	if(!num_necc_block_cnt)
005ddc  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005dde  b909              CBNZ     r1,|L1.24036|
;;;9497   		{
;;;9498   		num_necc=num_necc_down;
005de0  8002              STRH     r2,[r0,#0]
;;;9499   		num_necc_block_cnt=60;
005de2  8725              STRH     r5,[r4,#0x38]
                  |L1.24036|
;;;9500   		}
;;;9501   	}
;;;9502   
;;;9503   if(PAR) num_necc=NUMIST;
005de4  499b              LDR      r1,|L1.24660|
005de6  880a              LDRH     r2,[r1,#0]  ; PAR
005de8  497a              LDR      r1,|L1.24532|
005dea  b10a              CBZ      r2,|L1.24048|
005dec  880a              LDRH     r2,[r1,#0]  ; NUMIST
005dee  8002              STRH     r2,[r0,#0]
                  |L1.24048|
;;;9504   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9505   if(bPARALLEL) num_necc=NUMIST;
005df0  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005df4  b10a              CBZ      r2,|L1.24058|
005df6  880a              LDRH     r2,[r1,#0]  ; NUMIST
005df8  8002              STRH     r2,[r0,#0]
                  |L1.24058|
;;;9506   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005dfa  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005dfc  2a0a              CMP      r2,#0xa
005dfe  d101              BNE      |L1.24068|
005e00  880a              LDRH     r2,[r1,#0]  ; NUMIST
005e02  8002              STRH     r2,[r0,#0]
                  |L1.24068|
;;;9507   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005e04  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005e06  2a0a              CMP      r2,#0xa
005e08  d001              BEQ      |L1.24078|
005e0a  2a0b              CMP      r2,#0xb
005e0c  d101              BNE      |L1.24082|
                  |L1.24078|
005e0e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005e10  8002              STRH     r2,[r0,#0]
                  |L1.24082|
;;;9508   #endif
;;;9509   
;;;9510   gran(&num_necc,1,NUMIST);
005e12  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005e16  e8bd41f0          POP      {r4-r8,lr}
005e1a  2101              MOVS     r1,#1
005e1c  488c              LDR      r0,|L1.24656|
005e1e  f7ffbffe          B.W      gran
;;;9511   
;;;9512   }
;;;9513   
                          ENDP

                  cntrl_hndl PROC
;;;9516   //-----------------------------------------------
;;;9517   void cntrl_hndl(void)
005e22  e92d5ff0          PUSH     {r4-r12,lr}
;;;9518   {
;;;9519   
;;;9520   
;;;9521   
;;;9522   IZMAX_=IZMAX;
005e26  488c              LDR      r0,|L1.24664|
005e28  4c71              LDR      r4,|L1.24560|
005e2a  8800              LDRH     r0,[r0,#0]  ; IZMAX
005e2c  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9523   
;;;9524   //cntrl_hndl_plazma=10;
;;;9525   
;;;9526   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005e30  4877              LDR      r0,|L1.24592|
005e32  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005e34  b918              CBNZ     r0,|L1.24126|
005e36  4877              LDR      r0,|L1.24596|
005e38  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005e3a  2802              CMP      r0,#2
005e3c  d103              BNE      |L1.24134|
                  |L1.24126|
005e3e  4887              LDR      r0,|L1.24668|
005e40  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005e42  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24134|
;;;9527   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005e46  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005e48  280a              CMP      r0,#0xa
005e4a  d103              BNE      |L1.24148|
005e4c  4884              LDR      r0,|L1.24672|
005e4e  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005e50  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24148|
;;;9528   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005e54  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005e56  280a              CMP      r0,#0xa
005e58  d103              BNE      |L1.24162|
005e5a  4982              LDR      r1,|L1.24676|
005e5c  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005e5e  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.24162|
;;;9529   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005e62  280b              CMP      r0,#0xb
005e64  d103              BNE      |L1.24174|
005e66  4880              LDR      r0,|L1.24680|
005e68  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005e6a  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24174|
;;;9530   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9531   
;;;9532   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005e6e  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt
005e72  b118              CBZ      r0,|L1.24188|
005e74  f1a00001          SUB      r0,r0,#1
005e78  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.24188|
;;;9533   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005e7c  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt_
005e80  b118              CBZ      r0,|L1.24202|
005e82  f1a00001          SUB      r0,r0,#1
005e86  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.24202|
;;;9534   
;;;9535   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005e8a  486e              LDR      r0,|L1.24644|
005e8c  f04f080a          MOV      r8,#0xa               ;9527
005e90  f8901043          LDRB     r1,[r0,#0x43]  ; bat
005e94  0789              LSLS     r1,r1,#30
005e96  d103              BNE      |L1.24224|
005e98  f8900093          LDRB     r0,[r0,#0x93]  ; bat
005e9c  0780              LSLS     r0,r0,#30
005e9e  d005              BEQ      |L1.24236|
                  |L1.24224|
005ea0  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005ea4  fbb0f0f8          UDIV     r0,r0,r8
005ea8  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24236|
;;;9536   
;;;9537   
;;;9538   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9539   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005eac  486f              LDR      r0,|L1.24684|
005eae  2601              MOVS     r6,#1
005eb0  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005eb4  1e49              SUBS     r1,r1,#1
005eb6  2905              CMP      r1,#5
005eb8  d300              BCC      |L1.24252|
005eba  8006              STRH     r6,[r0,#0]
                  |L1.24252|
;;;9540   if(ch_cnt0<(10*REG_SPEED))
005ebc  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005ec0  2500              MOVS     r5,#0                 ;9526
005ec2  eb000180          ADD      r1,r0,r0,LSL #2
005ec6  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005ec8  ebb00f41          CMP      r0,r1,LSL #1
005ecc  da08              BGE      |L1.24288|
;;;9541   	{
;;;9542   	ch_cnt0++;
005ece  f1000001          ADD      r0,r0,#1
005ed2  b2c0              UXTB     r0,r0
005ed4  7560              STRB     r0,[r4,#0x15]
;;;9543   	if(ch_cnt0>=10*REG_SPEED)
005ed6  ebb00f41          CMP      r0,r1,LSL #1
005eda  db01              BLT      |L1.24288|
;;;9544   		{
;;;9545   		ch_cnt0=0;
005edc  7565              STRB     r5,[r4,#0x15]
;;;9546   		b1Hz_ch=1;
005ede  75a6              STRB     r6,[r4,#0x16]
                  |L1.24288|
;;;9547   		}
;;;9548   	}
;;;9549   #endif
;;;9550   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9551   if(ch_cnt0<10)
;;;9552   	{
;;;9553   	ch_cnt0++;
;;;9554   	if(ch_cnt0>=10)
;;;9555   		{
;;;9556   		ch_cnt0=0;
;;;9557   		b1Hz_ch=1;
;;;9558   		}
;;;9559   	}
;;;9560   #endif
;;;9561   
;;;9562   
;;;9563   if(mess_find_unvol(MESS2CNTRL_HNDL))
005ee0  20e1              MOVS     r0,#0xe1
005ee2  f7fffffe          BL       mess_find_unvol
;;;9564   	{
;;;9565   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9566   		{
;;;9567   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9568   		}
;;;9569   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9570   		{
;;;9571   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9572   		}
;;;9573   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9574   		{
;;;9575   		static char cntrlStatIsDownCnt;
;;;9576   		cntrl_stat--;
;;;9577   
;;;9578   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9579   			{
;;;9580   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9581   			}
;;;9582   		else 
;;;9583   			{
;;;9584   			cntrlStatIsDownCnt=0;
;;;9585   			}
;;;9586   
;;;9587   		}
;;;9588   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9589   		{
;;;9590   		cntrl_stat/*_new*/=mess_data[1];
;;;9591   		}
;;;9592   
;;;9593   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9594   		{
;;;9595   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9596   		if(bps_U>u_necc)
005ee6  f8dfc188          LDR      r12,|L1.24688|
005eea  4a42              LDR      r2,|L1.24564|
;;;9597   			{
;;;9598   			cntrl_hndl_plazma=11;
;;;9599   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9600   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9601   			}
;;;9602   		else if(bps_U<u_necc)
;;;9603   			{
;;;9604   			cntrl_hndl_plazma=12;	
;;;9605   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9606   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9607   			}
;;;9608   		#elif defined(UKU_220)
;;;9609   		if(load_U>u_necc)
;;;9610   			{
;;;9611   			cntrl_hndl_plazma=13;
;;;9612   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9613   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9614   			}
;;;9615   		else if(load_U<u_necc)
;;;9616   			{
;;;9617   			cntrl_hndl_plazma=14;	
;;;9618   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9619   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9620   			}
;;;9621   		#elif defined(UKU_220_V2)
;;;9622   		if(load_U>u_necc)
;;;9623   			{
;;;9624   			cntrl_hndl_plazma=15;
;;;9625   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9626   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9627   			}
;;;9628   		else if(load_U<u_necc)
;;;9629   			{
;;;9630   			cntrl_hndl_plazma=16;	
;;;9631   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9632   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9633   			}
;;;9634   		#else
;;;9635   
;;;9636   		if(load_U>u_necc)
;;;9637   			{
;;;9638   			cntrl_hndl_plazma=17;
;;;9639   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9640   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9641   			}
;;;9642   		else if(load_U<u_necc)
;;;9643   			{
;;;9644   			cntrl_hndl_plazma=18;	
;;;9645   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9646   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9647   			}
;;;9648   		#endif	
;;;9649   	 	}
;;;9650   
;;;9651   	/*gran(&cntrl_stat_new,10,1010);			
;;;9652   	cntrl_stat_old=cntrl_stat_new;
;;;9653   	cntrl_stat=cntrl_stat_new;*/
;;;9654   	}
;;;9655   
;;;9656   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9657   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005eec  f8df90e0          LDR      r9,|L1.24528|
;;;9658   	{
;;;9659   	cntrl_stat_new=cntrl_stat_old;
;;;9660   	cntrl_hndl_plazma=19;
;;;9661   	if((Ibmax/10)>(2*IZMAX_))
;;;9662   		{
;;;9663   		cntrl_hndl_plazma=20;
;;;9664             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9665   		else	cntrl_stat_new-=10;
;;;9666   		}		
;;;9667   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9668   		{
;;;9669   		cntrl_hndl_plazma=21;
;;;9670             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9671             else	cntrl_stat_new-=3;
;;;9672   		}   
;;;9673   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9674   		{
;;;9675   		cntrl_hndl_plazma=22;
;;;9676   		cntrl_stat_new--;
;;;9677   		}
;;;9678   		
;;;9679   	else if(bps_U<u_necc)
;;;9680   		{
;;;9681   		cntrl_hndl_plazma=23;
;;;9682   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9683   			{
;;;9684   			cntrl_hndl_plazma=24;
;;;9685   			if(Ibmax<0)
;;;9686   				{
;;;9687   				cntrl_hndl_plazma=25;
;;;9688                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9689   				else cntrl_stat_new+=10;
;;;9690   				}
;;;9691   			else if(Ibmax<(IZMAX_*5))
;;;9692   				{
;;;9693   				cntrl_hndl_plazma=26;
;;;9694                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9695   				else	cntrl_stat_new+=2;
;;;9696   				}
;;;9697   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9698   				{
;;;9699   				cntrl_hndl_plazma=27;
;;;9700   				cntrl_stat_new++;
;;;9701   				}					
;;;9702   			}
;;;9703   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9704   			{
;;;9705   			cntrl_hndl_plazma=28;
;;;9706   			if(Ibmax<(IZMAX_*5))
;;;9707   				{
;;;9708   				cntrl_hndl_plazma=29;
;;;9709                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9710   				else	cntrl_stat_new+=2;
;;;9711   				}
;;;9712   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9713   				{
;;;9714   				cntrl_hndl_plazma=30;
;;;9715   				cntrl_stat_new++;
;;;9716   				}					
;;;9717   			}	
;;;9718   		else if(bps_U<(u_necc-1))
;;;9719   			{
;;;9720   			cntrl_hndl_plazma=31;
;;;9721   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9722   				{
;;;9723   				cntrl_hndl_plazma=32;
;;;9724   				cntrl_stat_new++;
;;;9725   				}					
;;;9726   			}					
;;;9727   		}	
;;;9728   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9729   		{ 	
;;;9730   		cntrl_hndl_plazma=33;
;;;9731   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9732   			{
;;;9733   			cntrl_hndl_plazma=34;
;;;9734                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9735   			else	cntrl_stat_new-=10;
;;;9736   			}
;;;9737   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9738   			{
;;;9739   			cntrl_hndl_plazma=35;
;;;9740                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9741   			else cntrl_stat_new-=2;
;;;9742   			}	
;;;9743   		else if(bps_U>(u_necc+1))
;;;9744   			{
;;;9745   			cntrl_hndl_plazma=36;
;;;9746   			cntrl_stat_new--;
;;;9747   			}					
;;;9748   		}
;;;9749   
;;;9750   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9751   		{
;;;9752   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9753   		}
;;;9754   
;;;9755   	gran(&cntrl_stat_new,10,1010);
;;;9756   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9757   	cntrl_stat_old=cntrl_stat_new;
;;;9758   	cntrl_stat=cntrl_stat_new;
;;;9759   	
;;;9760   	if(ICA_EN==0)
;;;9761   		{
;;;9762   		if(ica_cntrl_hndl_cnt)
005ef0  4f60              LDR      r7,|L1.24692|
005ef2  b398              CBZ      r0,|L1.24412|
005ef4  4938              LDR      r1,|L1.24536|
005ef6  6808              LDR      r0,[r1,#0]            ;9565  ; mess_data
005ef8  2864              CMP      r0,#0x64              ;9565
005efa  d008              BEQ      |L1.24334|
005efc  2869              CMP      r0,#0x69              ;9569
005efe  d00b              BEQ      |L1.24344|
005f00  286e              CMP      r0,#0x6e              ;9573
005f02  d00f              BEQ      |L1.24356|
005f04  28e5              CMP      r0,#0xe5              ;9588
005f06  d02c              BEQ      |L1.24418|
005f08  28e6              CMP      r0,#0xe6              ;9593
005f0a  d02d              BEQ      |L1.24424|
                  |L1.24332|
005f0c  e22b              B        |L1.25446|
                  |L1.24334|
005f0e  6848              LDR      r0,[r1,#4]            ;9567  ; mess_data
005f10  8ea1              LDRH     r1,[r4,#0x34]         ;9567  ; cntrl_stat_old
005f12  4408              ADD      r0,r0,r1              ;9567
005f14  8660              STRH     r0,[r4,#0x32]         ;9567
005f16  e226              B        |L1.25446|
                  |L1.24344|
005f18  6848              LDR      r0,[r1,#4]            ;9571  ; mess_data
005f1a  8ea1              LDRH     r1,[r4,#0x34]         ;9571  ; cntrl_stat_old
005f1c  eba10000          SUB      r0,r1,r0              ;9571
005f20  8660              STRH     r0,[r4,#0x32]         ;9571
005f22  e220              B        |L1.25446|
                  |L1.24356|
005f24  8e60              LDRH     r0,[r4,#0x32]         ;9576  ; cntrl_stat
005f26  f1a00001          SUB      r0,r0,#1              ;9576
005f2a  b200              SXTH     r0,r0                 ;9576
005f2c  8660              STRH     r0,[r4,#0x32]         ;9576
005f2e  281e              CMP      r0,#0x1e              ;9578
005f30  dd07              BLE      |L1.24386|
005f32  4851              LDR      r0,|L1.24696|
005f34  4951              LDR      r1,|L1.24700|
005f36  f9b00000          LDRSH    r0,[r0,#0]            ;9578  ; load_U
005f3a  f9b11000          LDRSH    r1,[r1,#0]            ;9578  ; USIGN
005f3e  4288              CMP      r0,r1                 ;9578
005f40  da0d              BGE      |L1.24414|
                  |L1.24386|
005f42  7be0              LDRB     r0,[r4,#0xf]          ;9580  ; cntrlStatIsDownCnt
005f44  1c40              ADDS     r0,r0,#1              ;9580
005f46  b2c0              UXTB     r0,r0                 ;9580
005f48  73e0              STRB     r0,[r4,#0xf]          ;9580
005f4a  28fa              CMP      r0,#0xfa              ;9580
005f4c  d1de              BNE      |L1.24332|
005f4e  230a              MOVS     r3,#0xa               ;9580
005f50  2200              MOVS     r2,#0                 ;9580
005f52  21e7              MOVS     r1,#0xe7              ;9580
005f54  20e6              MOVS     r0,#0xe6              ;9580
005f56  f7fffffe          BL       mess_send
005f5a  e204              B        |L1.25446|
                  |L1.24412|
005f5c  e09c              B        |L1.24728|
                  |L1.24414|
005f5e  73e5              STRB     r5,[r4,#0xf]          ;9584
005f60  e201              B        |L1.25446|
                  |L1.24418|
005f62  6848              LDR      r0,[r1,#4]            ;9590  ; mess_data
005f64  8660              STRH     r0,[r4,#0x32]         ;9590
005f66  e1fe              B        |L1.25446|
                  |L1.24424|
005f68  f9bc0000          LDRSH    r0,[r12,#0]           ;9596  ; bps_U
005f6c  f9b21000          LDRSH    r1,[r2,#0]            ;9596  ; u_necc
005f70  4288              CMP      r0,r1                 ;9596
005f72  dd1a              BLE      |L1.24490|
005f74  f04f020b          MOV      r2,#0xb               ;9598
005f78  f884202e          STRB     r2,[r4,#0x2e]         ;9598
005f7c  eba00001          SUB      r0,r0,r1              ;9599
005f80  2828              CMP      r0,#0x28              ;9599
005f82  dd07              BLE      |L1.24468|
005f84  f9b40032          LDRSH    r0,[r4,#0x32]         ;9599  ; cntrl_stat
005f88  2800              CMP      r0,#0                 ;9599
005f8a  dd03              BLE      |L1.24468|
005f8c  f1a00005          SUB      r0,r0,#5              ;9599
005f90  8660              STRH     r0,[r4,#0x32]         ;9599
005f92  e1e8              B        |L1.25446|
                  |L1.24468|
005f94  f9b40032          LDRSH    r0,[r4,#0x32]         ;9600  ; cntrl_stat
005f98  2800              CMP      r0,#0                 ;9600
005f9a  d0b7              BEQ      |L1.24332|
005f9c  7da1              LDRB     r1,[r4,#0x16]         ;9600  ; b1Hz_ch
005f9e  2900              CMP      r1,#0                 ;9600
005fa0  d0b4              BEQ      |L1.24332|
005fa2  f1a00001          SUB      r0,r0,#1              ;9600
005fa6  8660              STRH     r0,[r4,#0x32]         ;9600
                  |L1.24488|
005fa8  e1dd              B        |L1.25446|
                  |L1.24490|
005faa  daaf              BGE      |L1.24332|
005fac  f04f020c          MOV      r2,#0xc               ;9604
005fb0  f884202e          STRB     r2,[r4,#0x2e]         ;9604
005fb4  eba10000          SUB      r0,r1,r0              ;9605
005fb8  2828              CMP      r0,#0x28              ;9605
005fba  dd61              BLE      |L1.24704|
005fbc  f9b40032          LDRSH    r0,[r4,#0x32]         ;9605  ; cntrl_stat
005fc0  f24031f7          MOV      r1,#0x3f7             ;9605
005fc4  4288              CMP      r0,r1                 ;9605
005fc6  da5b              BGE      |L1.24704|
005fc8  f1000005          ADD      r0,r0,#5              ;9605
005fcc  8660              STRH     r0,[r4,#0x32]         ;9605
                  |L1.24526|
005fce  e1ca              B        |L1.25446|
                  |L1.24528|
                          DCD      bps
                  |L1.24532|
                          DCD      NUMIST
                  |L1.24536|
                          DCD      mess_data
                  |L1.24540|
                          DCD      uavt_set_result_stat
                  |L1.24544|
                          DCD      avt_plazma
                  |L1.24548|
                          DCD      TERMOKOMPENS
                  |L1.24552|
                          DCD      UB20
                  |L1.24556|
                          DCD      UVZ
                  |L1.24560|
                          DCD      ||area_number.25||
                  |L1.24564|
                          DCD      u_necc
                  |L1.24568|
                          DCD      ND_EXT
                  |L1.24572|
                          DCD      t_ext
                  |L1.24576|
                          DCD      mat_temper
                  |L1.24580|
                          DCD      UB0
                  |L1.24584|
                          DCD      sk_stat
                  |L1.24588|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24592|
                          DCD      speedChIsOn
                  |L1.24596|
                          DCD      sp_ch_stat
                  |L1.24600|
                          DCD      speedChrgVolt
                  |L1.24604|
                          DCD      hv_vz_stat
                  |L1.24608|
                          DCD      UZ_U
                  |L1.24612|
                          DCD      FZ_U1
                  |L1.24616|
                          DCD      FZ_U2
                  |L1.24620|
                          DCD      uavt_set_stat
                  |L1.24624|
                          DCD      U_AVT
                  |L1.24628|
                          DCD      u_necc_dn
                  |L1.24632|
                          DCD      u_necc_up
                  |L1.24636|
                          DCD      Isumm
                  |L1.24640|
                          DCD      Isumm_
                  |L1.24644|
                          DCD      bat
                  |L1.24648|
                          DCD      IMAX
                  |L1.24652|
                          DCD      IMIN
                  |L1.24656|
                          DCD      num_necc
                  |L1.24660|
                          DCD      PAR
                  |L1.24664|
                          DCD      IZMAX
                  |L1.24668|
                          DCD      speedChrgCurr
                  |L1.24672|
                          DCD      UZ_IMAX
                  |L1.24676|
                          DCD      FZ_IMAX1
                  |L1.24680|
                          DCD      FZ_IMAX2
                  |L1.24684|
                          DCD      REG_SPEED
                  |L1.24688|
                          DCD      bps_U
                  |L1.24692|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24696|
                          DCD      load_U
                  |L1.24700|
                          DCD      USIGN
                  |L1.24704|
006080  f9b40032          LDRSH    r0,[r4,#0x32]         ;9606  ; cntrl_stat
006084  f5b07f7f          CMP      r0,#0x3fc             ;9606
006088  da8e              BGE      |L1.24488|
00608a  7da1              LDRB     r1,[r4,#0x16]         ;9606  ; b1Hz_ch
00608c  2900              CMP      r1,#0                 ;9606
00608e  d08b              BEQ      |L1.24488|
006090  f1000001          ADD      r0,r0,#1              ;9606
006094  8660              STRH     r0,[r4,#0x32]         ;9606
006096  e166              B        |L1.25446|
                  |L1.24728|
006098  7da0              LDRB     r0,[r4,#0x16]         ;9657  ; b1Hz_ch
00609a  2800              CMP      r0,#0                 ;9657
00609c  d084              BEQ      |L1.24488|
00609e  48fd              LDR      r0,|L1.25748|
0060a0  8800              LDRH     r0,[r0,#0]            ;9657  ; bIBAT_SMKLBR
0060a2  b118              CBZ      r0,|L1.24748|
0060a4  f8990323          LDRB     r0,[r9,#0x323]        ;9657  ; bps
0060a8  2828              CMP      r0,#0x28              ;9657
0060aa  d990              BLS      |L1.24526|
                  |L1.24748|
0060ac  f104042e          ADD      r4,r4,#0x2e           ;9659
0060b0  f9b40006          LDRSH    r0,[r4,#6]            ;9659  ; cntrl_stat_old
0060b4  8360              STRH     r0,[r4,#0x1a]         ;9659
0060b6  f04f0113          MOV      r1,#0x13              ;9660
0060ba  7021              STRB     r1,[r4,#0]            ;9660
0060bc  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9661  ; Ibmax
0060c0  8be3              LDRH     r3,[r4,#0x1e]         ;9661  ; IZMAX_
0060c2  fb91f8f8          SDIV     r8,r1,r8              ;9661
0060c6  f1a4042e          SUB      r4,r4,#0x2e           ;9661
0060ca  ebb80f43          CMP      r8,r3,LSL #1          ;9661
0060ce  dd10              BLE      |L1.24818|
0060d0  f04f0114          MOV      r1,#0x14              ;9663
0060d4  f884102e          STRB     r1,[r4,#0x2e]         ;9663
0060d8  f8b41070          LDRH     r1,[r4,#0x70]         ;9664  ; cntrl_stat_blok_cnt
0060dc  b121              CBZ      r1,|L1.24808|
0060de  f1a00001          SUB      r0,r0,#1              ;9664
0060e2  f8a40048          STRH     r0,[r4,#0x48]         ;9664
0060e6  e102              B        |L1.25326|
                  |L1.24808|
0060e8  f1a0000a          SUB      r0,r0,#0xa            ;9665
0060ec  f8a40048          STRH     r0,[r4,#0x48]         ;9665
0060f0  e0fd              B        |L1.25326|
                  |L1.24818|
0060f2  da14              BGE      |L1.24862|
0060f4  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9667
0060f8  458a              CMP      r10,r1                ;9667
0060fa  da10              BGE      |L1.24862|
0060fc  f04f0115          MOV      r1,#0x15              ;9669
006100  f884102e          STRB     r1,[r4,#0x2e]         ;9669
006104  f8b41070          LDRH     r1,[r4,#0x70]         ;9670  ; cntrl_stat_blok_cnt
006108  b121              CBZ      r1,|L1.24852|
00610a  f1a00001          SUB      r0,r0,#1              ;9670
00610e  f8a40048          STRH     r0,[r4,#0x48]         ;9670
006112  e0ec              B        |L1.25326|
                  |L1.24852|
006114  f1a00003          SUB      r0,r0,#3              ;9671
006118  f8a40048          STRH     r0,[r4,#0x48]         ;9671
00611c  e0e7              B        |L1.25326|
                  |L1.24862|
00611e  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9673
006122  458a              CMP      r10,r1                ;9673
006124  dd0a              BLE      |L1.24892|
006126  4598              CMP      r8,r3                 ;9673
006128  dd08              BLE      |L1.24892|
00612a  f04f0116          MOV      r1,#0x16              ;9675
00612e  f884102e          STRB     r1,[r4,#0x2e]         ;9675
006132  f1a00001          SUB      r0,r0,#1              ;9676
006136  f8a40048          STRH     r0,[r4,#0x48]         ;9676
00613a  e0d8              B        |L1.25326|
                  |L1.24892|
00613c  f9bcc000          LDRSH    r12,[r12,#0]          ;9679  ; bps_U
006140  f9b22000          LDRSH    r2,[r2,#0]            ;9679  ; u_necc
006144  f8df8350          LDR      r8,|L1.25752|
006148  f8dfb350          LDR      r11,|L1.25756|
00614c  4594              CMP      r12,r2                ;9679
00614e  da72              BGE      |L1.25142|
006150  f04f0a17          MOV      r10,#0x17             ;9681
006154  f884a02e          STRB     r10,[r4,#0x2e]        ;9681
006158  f9b88000          LDRSH    r8,[r8,#0]            ;9682  ; UB0
00615c  f9bba000          LDRSH    r10,[r11,#0]          ;9682  ; UB20
006160  eba8080a          SUB      r8,r8,r10             ;9682
006164  eba20a08          SUB      r10,r2,r8             ;9682
006168  45e2              CMP      r10,r12               ;9682
00616a  dd37              BLE      |L1.25052|
00616c  f04f0218          MOV      r2,#0x18              ;9684
006170  f884202e          STRB     r2,[r4,#0x2e]         ;9684
006174  2900              CMP      r1,#0                 ;9685
006176  da10              BGE      |L1.24986|
006178  f04f0119          MOV      r1,#0x19              ;9687
00617c  f884102e          STRB     r1,[r4,#0x2e]         ;9687
006180  f8b41070          LDRH     r1,[r4,#0x70]         ;9688  ; cntrl_stat_blok_cnt
006184  b121              CBZ      r1,|L1.24976|
006186  f1000001          ADD      r0,r0,#1              ;9688
00618a  f8a40048          STRH     r0,[r4,#0x48]         ;9688
00618e  e0ae              B        |L1.25326|
                  |L1.24976|
006190  f100000a          ADD      r0,r0,#0xa            ;9689
006194  f8a40048          STRH     r0,[r4,#0x48]         ;9689
006198  e0a9              B        |L1.25326|
                  |L1.24986|
00619a  eb030283          ADD      r2,r3,r3,LSL #2       ;9691
00619e  428a              CMP      r2,r1                 ;9691
0061a0  dd10              BLE      |L1.25028|
0061a2  f04f011a          MOV      r1,#0x1a              ;9693
0061a6  f884102e          STRB     r1,[r4,#0x2e]         ;9693
0061aa  f8b41070          LDRH     r1,[r4,#0x70]         ;9694  ; cntrl_stat_blok_cnt
0061ae  b121              CBZ      r1,|L1.25018|
0061b0  f1000001          ADD      r0,r0,#1              ;9694
0061b4  f8a40048          STRH     r0,[r4,#0x48]         ;9694
0061b8  e099              B        |L1.25326|
                  |L1.25018|
0061ba  f1000002          ADD      r0,r0,#2              ;9695
0061be  f8a40048          STRH     r0,[r4,#0x48]         ;9695
0061c2  e094              B        |L1.25326|
                  |L1.25028|
0061c4  ebb10f42          CMP      r1,r2,LSL #1          ;9697
0061c8  da07              BGE      |L1.25050|
0061ca  f04f011b          MOV      r1,#0x1b              ;9699
0061ce  f884102e          STRB     r1,[r4,#0x2e]         ;9699
0061d2  f1000001          ADD      r0,r0,#1              ;9700
0061d6  f8a40048          STRH     r0,[r4,#0x48]         ;9700
                  |L1.25050|
0061da  e088              B        |L1.25326|
                  |L1.25052|
0061dc  ea4f7ae8          ASR      r10,r8,#31            ;9703
0061e0  eb08789a          ADD      r8,r8,r10,LSR #30     ;9703
0061e4  eba208a8          SUB      r8,r2,r8,ASR #2       ;9703
0061e8  45e0              CMP      r8,r12                ;9703
0061ea  dd25              BLE      |L1.25144|
0061ec  f04f021c          MOV      r2,#0x1c              ;9705
0061f0  f884202e          STRB     r2,[r4,#0x2e]         ;9705
0061f4  eb030283          ADD      r2,r3,r3,LSL #2       ;9706
0061f8  428a              CMP      r2,r1                 ;9706
0061fa  dd10              BLE      |L1.25118|
0061fc  f04f011d          MOV      r1,#0x1d              ;9708
006200  f884102e          STRB     r1,[r4,#0x2e]         ;9708
006204  f8b41070          LDRH     r1,[r4,#0x70]         ;9709  ; cntrl_stat_blok_cnt
006208  b121              CBZ      r1,|L1.25108|
00620a  f1000001          ADD      r0,r0,#1              ;9709
00620e  f8a40048          STRH     r0,[r4,#0x48]         ;9709
006212  e06c              B        |L1.25326|
                  |L1.25108|
006214  f1000002          ADD      r0,r0,#2              ;9710
006218  f8a40048          STRH     r0,[r4,#0x48]         ;9710
00621c  e067              B        |L1.25326|
                  |L1.25118|
00621e  ebb10f42          CMP      r1,r2,LSL #1          ;9712
006222  da64              BGE      |L1.25326|
006224  f04f011e          MOV      r1,#0x1e              ;9714
006228  f884102e          STRB     r1,[r4,#0x2e]         ;9714
00622c  f1000001          ADD      r0,r0,#1              ;9715
006230  f8a40048          STRH     r0,[r4,#0x48]         ;9715
006234  e05b              B        |L1.25326|
                  |L1.25142|
006236  e014              B        |L1.25186|
                  |L1.25144|
006238  1e52              SUBS     r2,r2,#1              ;9718
00623a  4594              CMP      r12,r2                ;9718
00623c  da57              BGE      |L1.25326|
00623e  f04f021f          MOV      r2,#0x1f              ;9720
006242  f884202e          STRB     r2,[r4,#0x2e]         ;9720
006246  eb030283          ADD      r2,r3,r3,LSL #2       ;9721
00624a  ebb10f42          CMP      r1,r2,LSL #1          ;9721
00624e  da4e              BGE      |L1.25326|
006250  f04f0120          MOV      r1,#0x20              ;9723
006254  f884102e          STRB     r1,[r4,#0x2e]         ;9723
006258  f1000001          ADD      r0,r0,#1              ;9724
00625c  f8a40048          STRH     r0,[r4,#0x48]         ;9724
006260  e045              B        |L1.25326|
                  |L1.25186|
006262  dd44              BLE      |L1.25326|
006264  f04f0121          MOV      r1,#0x21              ;9730
006268  f884102e          STRB     r1,[r4,#0x2e]         ;9730
00626c  f9b81000          LDRSH    r1,[r8,#0]            ;9731  ; UB0
006270  f9bb3000          LDRSH    r3,[r11,#0]           ;9731  ; UB20
006274  eba10103          SUB      r1,r1,r3              ;9731
006278  eb010302          ADD      r3,r1,r2              ;9731
00627c  4563              CMP      r3,r12                ;9731
00627e  da13              BGE      |L1.25256|
006280  f04f0122          MOV      r1,#0x22              ;9733
006284  f884102e          STRB     r1,[r4,#0x2e]         ;9733
006288  f8b41070          LDRH     r1,[r4,#0x70]         ;9734  ; cntrl_stat_blok_cnt
00628c  b939              CBNZ     r1,|L1.25246|
00628e  4984              LDR      r1,|L1.25760|
006290  8809              LDRH     r1,[r1,#0]            ;9734  ; TERMOKOMPENS
006292  b121              CBZ      r1,|L1.25246|
006294  f1a0000a          SUB      r0,r0,#0xa            ;9735
006298  f8a40048          STRH     r0,[r4,#0x48]         ;9735
00629c  e027              B        |L1.25326|
                  |L1.25246|
00629e  f1a00001          SUB      r0,r0,#1              ;9734
0062a2  f8a40048          STRH     r0,[r4,#0x48]         ;9734
0062a6  e022              B        |L1.25326|
                  |L1.25256|
0062a8  17cb              ASRS     r3,r1,#31             ;9737
0062aa  eb017193          ADD      r1,r1,r3,LSR #30      ;9737
0062ae  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9737
0062b2  4561              CMP      r1,r12                ;9737
0062b4  da10              BGE      |L1.25304|
0062b6  f04f0123          MOV      r1,#0x23              ;9739
0062ba  f884102e          STRB     r1,[r4,#0x2e]         ;9739
0062be  f8b41070          LDRH     r1,[r4,#0x70]         ;9740  ; cntrl_stat_blok_cnt
0062c2  b121              CBZ      r1,|L1.25294|
0062c4  f1a00001          SUB      r0,r0,#1              ;9740
0062c8  f8a40048          STRH     r0,[r4,#0x48]         ;9740
0062cc  e00f              B        |L1.25326|
                  |L1.25294|
0062ce  f1a00002          SUB      r0,r0,#2              ;9741
0062d2  f8a40048          STRH     r0,[r4,#0x48]         ;9741
0062d6  e00a              B        |L1.25326|
                  |L1.25304|
0062d8  1c52              ADDS     r2,r2,#1              ;9743
0062da  4594              CMP      r12,r2                ;9743
0062dc  dd07              BLE      |L1.25326|
0062de  f04f0124          MOV      r1,#0x24              ;9745
0062e2  f884102e          STRB     r1,[r4,#0x2e]         ;9745
0062e6  f1a00001          SUB      r0,r0,#1              ;9746
0062ea  f8a40048          STRH     r0,[r4,#0x48]         ;9746
                  |L1.25326|
0062ee  486d              LDR      r0,|L1.25764|
0062f0  7961              LDRB     r1,[r4,#5]            ;9750  ; vz1_stat
0062f2  7800              LDRB     r0,[r0,#0]            ;9750  ; hv_vz_stat
0062f4  4308              ORRS     r0,r0,r1              ;9750
0062f6  79e1              LDRB     r1,[r4,#7]            ;9750  ; vz2_stat
0062f8  4308              ORRS     r0,r0,r1              ;9750
0062fa  d10e              BNE      |L1.25370|
0062fc  486a              LDR      r0,|L1.25768|
0062fe  7840              LDRB     r0,[r0,#1]            ;9752  ; sk_stat
006300  2801              CMP      r0,#1                 ;9752
006302  d10a              BNE      |L1.25370|
006304  4869              LDR      r0,|L1.25772|
006306  7840              LDRB     r0,[r0,#1]            ;9752  ; sk_stat_old
006308  b938              CBNZ     r0,|L1.25370|
00630a  4869              LDR      r0,|L1.25776|
00630c  8800              LDRH     r0,[r0,#0]            ;9752  ; VZ_KIND
00630e  2801              CMP      r0,#1                 ;9752
006310  d103              BNE      |L1.25370|
006312  f04f0032          MOV      r0,#0x32              ;9752
006316  f8a40048          STRH     r0,[r4,#0x48]         ;9752
                  |L1.25370|
00631a  f24032f2          MOV      r2,#0x3f2             ;9755
00631e  210a              MOVS     r1,#0xa               ;9755
006320  4864              LDR      r0,|L1.25780|
006322  f7fffffe          BL       gran
006326  4864              LDR      r0,|L1.25784|
006328  8800              LDRH     r0,[r0,#0]            ;9756  ; net_av_2min_timer
00632a  b110              CBZ      r0,|L1.25394|
00632c  8ea0              LDRH     r0,[r4,#0x34]         ;9756  ; cntrl_stat_old
00632e  f8a40048          STRH     r0,[r4,#0x48]         ;9756
                  |L1.25394|
006332  f8b40048          LDRH     r0,[r4,#0x48]         ;9757  ; cntrl_stat_new
006336  86a0              STRH     r0,[r4,#0x34]         ;9757
006338  8660              STRH     r0,[r4,#0x32]         ;9758
00633a  4860              LDR      r0,|L1.25788|
00633c  f9b00000          LDRSH    r0,[r0,#0]            ;9760  ; ICA_EN
006340  b938              CBNZ     r0,|L1.25426|
006342  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
006344  b129              CBZ      r1,|L1.25426|
;;;9763   			{
;;;9764   			cntrl_stat = ica_cntrl_hndl;
006346  495e              LDR      r1,|L1.25792|
006348  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
00634a  8661              STRH     r1,[r4,#0x32]
;;;9765   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
00634c  f8a41048          STRH     r1,[r4,#0x48]
;;;9766   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
006350  86a1              STRH     r1,[r4,#0x34]
                  |L1.25426|
;;;9767   			}
;;;9768   		}
;;;9769   	
;;;9770   	if((ICA_EN==1)||(ICA_EN==2))
006352  2801              CMP      r0,#1
006354  d001              BEQ      |L1.25434|
006356  2802              CMP      r0,#2
006358  d105              BNE      |L1.25446|
                  |L1.25434|
;;;9771   		{
;;;9772   		cntrl_stat=cntrl_stat_new+ica_u_necc;
00635a  495a              LDR      r1,|L1.25796|
00635c  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
006360  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
006362  4408              ADD      r0,r0,r1
006364  8660              STRH     r0,[r4,#0x32]
                  |L1.25446|
;;;9773   		}			
;;;9774   	}
;;;9775   #else
;;;9776   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9777   	{
;;;9778   	cntrl_hndl_plazma=37;
;;;9779   	cntrl_stat_new=cntrl_stat_old;
;;;9780   	
;;;9781   	if((Ibmax/10)>(2*IZMAX_))
;;;9782   		{
;;;9783   		cntrl_hndl_plazma=38;
;;;9784             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9785   		else	cntrl_stat_new-=10;
;;;9786   		}		
;;;9787   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9788   		{
;;;9789   		cntrl_hndl_plazma=39;
;;;9790             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9791             else	cntrl_stat_new-=3;
;;;9792   		}   
;;;9793   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9794   		{
;;;9795   		cntrl_hndl_plazma=40;
;;;9796   		cntrl_stat_new--;
;;;9797   		}
;;;9798   		
;;;9799   	else if(load_U<u_necc)
;;;9800   		{
;;;9801   		cntrl_hndl_plazma=41;
;;;9802   		if(load_U<(u_necc-(UB0-UB20)))
;;;9803   			{
;;;9804   			cntrl_hndl_plazma=42;
;;;9805   			if(Ibmax<0)
;;;9806   				{
;;;9807   				cntrl_hndl_plazma=43;
;;;9808                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9809   				else cntrl_stat_new+=10;
;;;9810   				}
;;;9811   			else if(Ibmax<(IZMAX_*5))
;;;9812   				{
;;;9813   				cntrl_hndl_plazma=44;
;;;9814                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9815   				else	cntrl_stat_new+=2;
;;;9816   				}
;;;9817   			else if(Ibmax<((IZMAX_*95)/10))
;;;9818   				{
;;;9819   				cntrl_hndl_plazma=45;
;;;9820   				cntrl_stat_new++;
;;;9821   				}					
;;;9822   			}
;;;9823   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9824   			{
;;;9825   			cntrl_hndl_plazma=46;
;;;9826   			if(Ibmax<(IZMAX_*5))
;;;9827   				{
;;;9828   				cntrl_hndl_plazma=47;
;;;9829                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9830   				else	cntrl_stat_new+=2;
;;;9831   				}
;;;9832   			else if(Ibmax<((IZMAX_*95)/10))
;;;9833   				{
;;;9834   				cntrl_hndl_plazma=48;
;;;9835   				cntrl_stat_new++;
;;;9836   				}					
;;;9837   			}	
;;;9838   		else if(load_U<(u_necc-1))
;;;9839   			{
;;;9840   			cntrl_hndl_plazma=49;
;;;9841   			if(Ibmax<((IZMAX_*95)/10))
;;;9842   				{
;;;9843   				cntrl_hndl_plazma=50;
;;;9844   				cntrl_stat_new++;
;;;9845   				}					
;;;9846   			}					
;;;9847   		}	
;;;9848   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9849   		{
;;;9850   		cntrl_hndl_plazma=51;
;;;9851   		if(load_U>(u_necc+(UB0-UB20)))
;;;9852   			{
;;;9853   			cntrl_hndl_plazma=52;
;;;9854                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9855   			else	cntrl_stat_new-=10;
;;;9856   			}
;;;9857   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9858   			{
;;;9859   			cntrl_hndl_plazma=53;
;;;9860                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9861   			else cntrl_stat_new-=2;
;;;9862   			}	
;;;9863   		else if(load_U>(u_necc+1))
;;;9864   			{
;;;9865   			cntrl_hndl_plazma=54;
;;;9866   			cntrl_stat_new--;
;;;9867   			}					
;;;9868   		}
;;;9869   
;;;9870   	gran(&cntrl_stat_new,10,1022);
;;;9871   				
;;;9872   	cntrl_stat_old=cntrl_stat_new;
;;;9873   	cntrl_stat=cntrl_stat_new;	
;;;9874   	}
;;;9875   #endif
;;;9876   
;;;9877   iiii=0;
006366  7625              STRB     r5,[r4,#0x18]
;;;9878   for(i=0;i<NUMIST;i++)
006368  75e5              STRB     r5,[r4,#0x17]
00636a  4857              LDR      r0,|L1.25800|
00636c  f9b01000          LDRSH    r1,[r0,#0]
006370  e00c              B        |L1.25484|
                  |L1.25458|
;;;9879        {
;;;9880        if(bps[i]._cnt<30)iiii=1;
006372  eb0002c0          ADD      r2,r0,r0,LSL #3
006376  eb021200          ADD      r2,r2,r0,LSL #4
00637a  eb090282          ADD      r2,r9,r2,LSL #2
00637e  78d2              LDRB     r2,[r2,#3]
006380  2a1e              CMP      r2,#0x1e
006382  d200              BCS      |L1.25478|
006384  7626              STRB     r6,[r4,#0x18]
                  |L1.25478|
006386  f1000001          ADD      r0,r0,#1              ;9878
00638a  75e0              STRB     r0,[r4,#0x17]         ;9878
                  |L1.25484|
00638c  7de0              LDRB     r0,[r4,#0x17]         ;9878  ; i
00638e  4288              CMP      r0,r1                 ;9878
006390  dbef              BLT      |L1.25458|
;;;9881        }
;;;9882   
;;;9883   if(iiii==0)
006392  7e20              LDRB     r0,[r4,#0x18]  ; iiii
006394  b948              CBNZ     r0,|L1.25514|
;;;9884   	{
;;;9885   	cntrl_stat=620;	
;;;9886   	cntrl_stat_old=620;
;;;9887   	cntrl_stat_new=620;
;;;9888   	cntrl_stat=10*PWM_START;
006396  484d              LDR      r0,|L1.25804|
006398  8800              LDRH     r0,[r0,#0]  ; PWM_START
00639a  eb000080          ADD      r0,r0,r0,LSL #2
00639e  ea4f0040          LSL      r0,r0,#1
0063a2  8660              STRH     r0,[r4,#0x32]
;;;9889   	cntrl_stat_old=10*PWM_START;
0063a4  86a0              STRH     r0,[r4,#0x34]
;;;9890   	cntrl_stat_new=10*PWM_START;
0063a6  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25514|
;;;9891   	}
;;;9892   
;;;9893   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9894   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
0063aa  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
0063ae  b110              CBZ      r0,|L1.25526|
0063b0  f1a00001          SUB      r0,r0,#1
0063b4  8038              STRH     r0,[r7,#0]
                  |L1.25526|
;;;9895   
;;;9896   
;;;9897   
;;;9898   #endif
;;;9899   
;;;9900   
;;;9901   gran(&cntrl_stat,10,1022); 
0063b6  483f              LDR      r0,|L1.25780|
0063b8  f24032fe          MOV      r2,#0x3fe
0063bc  210a              MOVS     r1,#0xa
0063be  3816              SUBS     r0,r0,#0x16
0063c0  f7fffffe          BL       gran
;;;9902   b1Hz_ch=0;
0063c4  75a5              STRB     r5,[r4,#0x16]
                  |L1.25542|
;;;9903   }
0063c6  e8bd9ff0          POP      {r4-r12,pc}
;;;9904   #endif
                          ENDP

                  ext_drv PROC
;;;10647  //-----------------------------------------------
;;;10648  void ext_drv(void)
0063ca  e92d5ff0          PUSH     {r4-r12,lr}
;;;10649  {
;;;10650  char i;
;;;10651  
;;;10652  #ifdef UKU_FSO
;;;10653  NUMSK=3;
;;;10654  #endif
;;;10655  
;;;10656  for(i=0;i<NUMSK;i++)
0063ce  f04f0000          MOV      r0,#0
0063d2  4a40              LDR      r2,|L1.25812|
;;;10657  	{
;;;10658  	#ifdef UKU_MGTS
;;;10659  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10660  	#endif
;;;10661  	#ifdef UKU_RSTKM
;;;10662  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10663  	#endif
;;;10664  	#ifdef UKU_3U
;;;10665  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10666  	#endif
;;;10667  	#ifdef UKU_GLONASS
;;;10668  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10669  	#endif
;;;10670  	#ifdef UKU_KONTUR
;;;10671  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10672  	#endif
;;;10673  	#ifdef UKU_6U
;;;10674  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10675  	#endif
;;;10676  	#ifdef UKU_220
;;;10677  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10678  	#endif
;;;10679  	#ifdef UKU_220_V2
;;;10680  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10681  	#endif
;;;10682  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10683  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10684  	#endif
;;;10685  	#ifdef UKU_TELECORE2015	
;;;10686  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10687  	#endif
;;;10688  	#ifdef UKU_TELECORE2017
;;;10689  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10690  	#endif
;;;10691  	#ifdef IPS_SGEP_GAZPROM
;;;10692  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10693  	#endif		
;;;10694   	#ifdef UKU_FSO
;;;10695  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10696  	#endif	
;;;10697  		{
;;;10698  		if(sk_cnt[i]<10)
0063d4  4b3e              LDR      r3,|L1.25808|
;;;10699  			{
;;;10700  			sk_cnt[i]++;
;;;10701  			if(sk_cnt[i]>=10)
;;;10702  				{
;;;10703  				sk_stat[i]=ssON;
0063d6  4d34              LDR      r5,|L1.25768|
0063d8  f04f0a01          MOV      r10,#1
;;;10704  				}
;;;10705  			}
;;;10706  		else 
;;;10707  			{
;;;10708  			sk_cnt[i]=10;
0063dc  f04f0b0a          MOV      r11,#0xa
0063e0  4606              MOV      r6,r0                 ;10656
0063e2  f9b24000          LDRSH    r4,[r2,#0]            ;10656
0063e6  e025              B        |L1.25652|
                  |L1.25576|
0063e8  493b              LDR      r1,|L1.25816|
0063ea  4f3c              LDR      r7,|L1.25820|
0063ec  5c09              LDRB     r1,[r1,r0]            ;10683
0063ee  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10683
0063f2  f5b16ffa          CMP      r1,#0x7d0             ;10683
0063f6  da0e              BGE      |L1.25622|
0063f8  5619              LDRSB    r1,[r3,r0]            ;10698
0063fa  290a              CMP      r1,#0xa               ;10698
0063fc  da08              BGE      |L1.25616|
0063fe  f1010101          ADD      r1,r1,#1              ;10700
006402  b249              SXTB     r1,r1                 ;10700
006404  5419              STRB     r1,[r3,r0]            ;10700
006406  290a              CMP      r1,#0xa               ;10701
006408  db11              BLT      |L1.25646|
00640a  f805a000          STRB     r10,[r5,r0]           ;10703
00640e  e00e              B        |L1.25646|
                  |L1.25616|
006410  f803b000          STRB     r11,[r3,r0]
006414  e00b              B        |L1.25646|
                  |L1.25622|
;;;10709  			}
;;;10710                 
;;;10711  		}
;;;10712  	else
;;;10713  		{
;;;10714  		if(sk_cnt[i]>0)
006416  5619              LDRSB    r1,[r3,r0]
006418  2900              CMP      r1,#0
00641a  dd07              BLE      |L1.25644|
;;;10715  			{
;;;10716  			sk_cnt[i]--;
00641c  f1a10101          SUB      r1,r1,#1
006420  b249              SXTB     r1,r1
006422  5419              STRB     r1,[r3,r0]
;;;10717  			if(sk_cnt[i]<=0)
006424  2900              CMP      r1,#0
006426  dc02              BGT      |L1.25646|
;;;10718  				{
;;;10719  				sk_stat[i]=ssOFF;
006428  542e              STRB     r6,[r5,r0]
00642a  e000              B        |L1.25646|
                  |L1.25644|
;;;10720  				}
;;;10721  			}
;;;10722  		else 
;;;10723  			{
;;;10724  			sk_cnt[i]=0;
00642c  541e              STRB     r6,[r3,r0]
                  |L1.25646|
00642e  f1000001          ADD      r0,r0,#1              ;10656
006432  b2c0              UXTB     r0,r0                 ;10656
                  |L1.25652|
006434  42a0              CMP      r0,r4                 ;10656
006436  dbd7              BLT      |L1.25576|
;;;10725  			}
;;;10726  		}
;;;10727  	}
;;;10728  
;;;10729  for(i=0;i<NUMSK;i++)
006438  f04f0400          MOV      r4,#0
;;;10730  	{
;;;10731  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10732  		{
;;;10733  		if(sk_av_cnt[i]<10)
00643c  f8df90a0          LDR      r9,|L1.25824|
;;;10734  			{
;;;10735  			sk_av_cnt[i]++;
;;;10736  			if(sk_av_cnt[i]>=10)
;;;10737  				{
;;;10738  				sk_av_stat[i]=sasON;
006440  4f28              LDR      r7,|L1.25828|
;;;10739  				}
;;;10740  			}
;;;10741  		else 
;;;10742  			{
;;;10743  			sk_av_cnt[i]=10;
;;;10744  			}
;;;10745  		}
;;;10746  	else
;;;10747  		{
;;;10748  		if(sk_av_cnt[i]>=0)
;;;10749  			{
;;;10750  			sk_av_cnt[i]--;
;;;10751  			if(sk_av_cnt[i]<=0)
;;;10752  				{
;;;10753  				sk_av_stat[i]=sasOFF;
;;;10754  				}
;;;10755  			}
;;;10756  		else 
;;;10757  			{
;;;10758  			sk_av_cnt[i]=0;
;;;10759  			}
;;;10760  		}
;;;10761  
;;;10762  #ifndef UKU_KONTUR
;;;10763  	if(sk_av_stat_old[i]!=sk_av_stat[i])
006442  f8df80a4          LDR      r8,|L1.25832|
006446  e0b1              B        |L1.26028|
                  |L1.25672|
006448  4828              LDR      r0,|L1.25836|
00644a  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10731
00644e  b910              CBNZ     r0,|L1.25686|
006450  5d29              LDRB     r1,[r5,r4]            ;10731
006452  2901              CMP      r1,#1                 ;10731
006454  d00f              BEQ      |L1.25718|
                  |L1.25686|
006456  b108              CBZ      r0,|L1.25692|
006458  5d28              LDRB     r0,[r5,r4]            ;10731
00645a  b160              CBZ      r0,|L1.25718|
                  |L1.25692|
00645c  f9190004          LDRSB    r0,[r9,r4]            ;10748
006460  2800              CMP      r0,#0                 ;10748
006462  db48              BLT      |L1.25846|
006464  f1a00001          SUB      r0,r0,#1              ;10750
006468  b240              SXTB     r0,r0                 ;10750
00646a  f8090004          STRB     r0,[r9,r4]            ;10750
00646e  2800              CMP      r0,#0                 ;10751
006470  dc43              BGT      |L1.25850|
006472  553e              STRB     r6,[r7,r4]            ;10753
006474  e041              B        |L1.25850|
                  |L1.25718|
006476  f9190004          LDRSB    r0,[r9,r4]            ;10733
00647a  280a              CMP      r0,#0xa               ;10733
00647c  da38              BGE      |L1.25840|
00647e  f1000001          ADD      r0,r0,#1              ;10735
006482  b240              SXTB     r0,r0                 ;10735
006484  f8090004          STRB     r0,[r9,r4]            ;10735
006488  280a              CMP      r0,#0xa               ;10736
00648a  db36              BLT      |L1.25850|
00648c  f807a004          STRB     r10,[r7,r4]           ;10738
006490  e033              B        |L1.25850|
006492  0000              DCW      0x0000
                  |L1.25748|
                          DCD      bIBAT_SMKLBR
                  |L1.25752|
                          DCD      UB0
                  |L1.25756|
                          DCD      UB20
                  |L1.25760|
                          DCD      TERMOKOMPENS
                  |L1.25764|
                          DCD      hv_vz_stat
                  |L1.25768|
                          DCD      sk_stat
                  |L1.25772|
                          DCD      sk_stat_old
                  |L1.25776|
                          DCD      VZ_KIND
                  |L1.25780|
                          DCD      ||area_number.25||+0x48
                  |L1.25784|
                          DCD      net_av_2min_timer
                  |L1.25788|
                          DCD      ICA_EN
                  |L1.25792|
                          DCD      ica_cntrl_hndl
                  |L1.25796|
                          DCD      ica_u_necc
                  |L1.25800|
                          DCD      NUMIST
                  |L1.25804|
                          DCD      PWM_START
                  |L1.25808|
                          DCD      sk_cnt
                  |L1.25812|
                          DCD      NUMSK
                  |L1.25816|
                          DCD      ||area_number.19||
                  |L1.25820|
                          DCD      ||.bss||+0x40c
                  |L1.25824|
                          DCD      sk_av_cnt
                  |L1.25828|
                          DCD      sk_av_stat
                  |L1.25832|
                          DCD      sk_av_stat_old
                  |L1.25836|
                          DCD      SK_SIGN
                  |L1.25840|
0064f0  f809b004          STRB     r11,[r9,r4]           ;10743
0064f4  e001              B        |L1.25850|
                  |L1.25846|
0064f6  f8096004          STRB     r6,[r9,r4]            ;10758
                  |L1.25850|
0064fa  f8181004          LDRB     r1,[r8,r4]
0064fe  5d38              LDRB     r0,[r7,r4]
006500  4281              CMP      r1,r0
006502  d04d              BEQ      |L1.26016|
;;;10764  		{
;;;10765  		plazma_sk++;
006504  4af8              LDR      r2,|L1.26856|
006506  8811              LDRH     r1,[r2,#0]  ; plazma_sk
006508  f1010101          ADD      r1,r1,#1
00650c  8011              STRH     r1,[r2,#0]
;;;10766  		if(sk_av_stat[i]==sasON)
00650e  2801              CMP      r0,#1
006510  d007              BEQ      |L1.25890|
;;;10767  			{
;;;10768  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10769  			else if(i==1)
;;;10770  				{
;;;10771  				#ifndef UKU_TELEKORE2017
;;;10772  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10773  				#endif
;;;10774  				#ifdef UKU_TELEKORE2017
;;;10775  				snmp_trap_send("Door open",15,2,1);
;;;10776  				#endif
;;;10777  				}
;;;10778  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10779  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10780  			}
;;;10781  		else 
;;;10782  			{
;;;10783  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
006512  b354              CBZ      r4,|L1.25962|
;;;10784  			else if(i==1)
006514  2c01              CMP      r4,#1
006516  d02f              BEQ      |L1.25976|
;;;10785  				{
;;;10786  				#ifndef UKU_TELEKORE2017
;;;10787  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10788  				#endif
;;;10789  				#ifdef UKU_TELEKORE2017
;;;10790  				snmp_trap_send("Door open clear",15,2,0);
;;;10791  				#endif
;;;10792  				}
;;;10793  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
006518  2c02              CMP      r4,#2
00651a  d034              BEQ      |L1.25990|
;;;10794  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
00651c  2c03              CMP      r4,#3
00651e  d039              BEQ      |L1.26004|
006520  e03e              B        |L1.26016|
                  |L1.25890|
006522  b134              CBZ      r4,|L1.25906|
006524  2c01              CMP      r4,#1                 ;10769
006526  d00b              BEQ      |L1.25920|
006528  2c02              CMP      r4,#2                 ;10778
00652a  d010              BEQ      |L1.25934|
00652c  2c03              CMP      r4,#3                 ;10779
00652e  d015              BEQ      |L1.25948|
006530  e036              B        |L1.26016|
                  |L1.25906|
006532  2301              MOVS     r3,#1                 ;10768
006534  461a              MOV      r2,r3                 ;10768
006536  210f              MOVS     r1,#0xf               ;10768
006538  a0ec              ADR      r0,|L1.26860|
00653a  f7fffffe          BL       snmp_trap_send
00653e  e02f              B        |L1.26016|
                  |L1.25920|
006540  2301              MOVS     r3,#1                 ;10772
006542  2202              MOVS     r2,#2                 ;10772
006544  210f              MOVS     r1,#0xf               ;10772
006546  a0ec              ADR      r0,|L1.26872|
006548  f7fffffe          BL       snmp_trap_send
00654c  e028              B        |L1.26016|
                  |L1.25934|
00654e  2301              MOVS     r3,#1                 ;10778
006550  2203              MOVS     r2,#3                 ;10778
006552  210f              MOVS     r1,#0xf               ;10778
006554  a0eb              ADR      r0,|L1.26884|
006556  f7fffffe          BL       snmp_trap_send
00655a  e021              B        |L1.26016|
                  |L1.25948|
00655c  2301              MOVS     r3,#1                 ;10779
00655e  2204              MOVS     r2,#4                 ;10779
006560  210f              MOVS     r1,#0xf               ;10779
006562  a0eb              ADR      r0,|L1.26896|
006564  f7fffffe          BL       snmp_trap_send
006568  e01a              B        |L1.26016|
                  |L1.25962|
00656a  2300              MOVS     r3,#0                 ;10783
00656c  2201              MOVS     r2,#1                 ;10783
00656e  210f              MOVS     r1,#0xf               ;10783
006570  a0ea              ADR      r0,|L1.26908|
006572  f7fffffe          BL       snmp_trap_send
006576  e013              B        |L1.26016|
                  |L1.25976|
006578  2300              MOVS     r3,#0                 ;10787
00657a  2202              MOVS     r2,#2                 ;10787
00657c  210f              MOVS     r1,#0xf               ;10787
00657e  a0ec              ADR      r0,|L1.26928|
006580  f7fffffe          BL       snmp_trap_send
006584  e00c              B        |L1.26016|
                  |L1.25990|
006586  2300              MOVS     r3,#0                 ;10793
006588  2203              MOVS     r2,#3                 ;10793
00658a  210f              MOVS     r1,#0xf               ;10793
00658c  a0ed              ADR      r0,|L1.26948|
00658e  f7fffffe          BL       snmp_trap_send
006592  e005              B        |L1.26016|
                  |L1.26004|
006594  2300              MOVS     r3,#0
006596  2204              MOVS     r2,#4
006598  210f              MOVS     r1,#0xf
00659a  a0ef              ADR      r0,|L1.26968|
00659c  f7fffffe          BL       snmp_trap_send
                  |L1.26016|
;;;10795  			}
;;;10796  	 	}
;;;10797  #endif
;;;10798  
;;;10799  #ifdef UKU_KONTUR
;;;10800  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10801  		{
;;;10802  		plazma_sk++;
;;;10803  		if(sk_av_stat[i]==sasON)
;;;10804  			{
;;;10805  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10806  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10807  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10808  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10809  			}
;;;10810  		else 
;;;10811  			{
;;;10812  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10813  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10814  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10815  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10816  			}
;;;10817  	 	}
;;;10818  #endif
;;;10819  	sk_av_stat_old[i]=sk_av_stat[i];
0065a0  5d38              LDRB     r0,[r7,r4]
0065a2  f8080004          STRB     r0,[r8,r4]
0065a6  f1040401          ADD      r4,r4,#1              ;10729
0065aa  b2e4              UXTB     r4,r4                 ;10729
                  |L1.26028|
0065ac  48ef              LDR      r0,|L1.26988|
0065ae  f9b00000          LDRSH    r0,[r0,#0]            ;10729  ; NUMSK
0065b2  4284              CMP      r4,r0                 ;10729
0065b4  f6ffaf48          BLT      |L1.25672|
;;;10820  	}
;;;10821  }
0065b8  e705              B        |L1.25542|
;;;10822  
                          ENDP

                  zar_superviser_start PROC
;;;10859  //-----------------------------------------------
;;;10860  void zar_superviser_start(void)
0065ba  4aed              LDR      r2,|L1.26992|
;;;10861  {
;;;10862  sign_U[0]=1;
0065bc  f04f0001          MOV      r0,#1
0065c0  7010              STRB     r0,[r2,#0]
;;;10863  sign_I[0]=1;
0065c2  49ec              LDR      r1,|L1.26996|
0065c4  7008              STRB     r0,[r1,#0]
;;;10864  sign_U[1]=1;
0065c6  7050              STRB     r0,[r2,#1]
;;;10865  sign_I[1]=1;
0065c8  7048              STRB     r0,[r1,#1]
;;;10866  
;;;10867  }
0065ca  4770              BX       lr
;;;10868  
                          ENDP

                  zar_superviser_drv PROC
;;;10824  //-----------------------------------------------
;;;10825  void zar_superviser_drv(void)
0065cc  e92d5ff0          PUSH     {r4-r12,lr}
;;;10826  {
;;;10827  
;;;10828  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
0065d0  48ea              LDR      r0,|L1.27004|
0065d2  f8df93ac          LDR      r9,|L1.27008|
0065d6  f8df83a0          LDR      r8,|L1.27000|
0065da  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
0065de  f9b90000          LDRSH    r0,[r9,#0]
0065e2  4cc1              LDR      r4,|L1.26856|
0065e4  ebc01100          RSB      r1,r0,r0,LSL #4
0065e8  3c46              SUBS     r4,r4,#0x46
0065ea  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0065ee  f06f0a1d          MVN      r10,#0x1d
0065f2  f06f0b95          MVN      r11,#0x95
0065f6  2500              MOVS     r5,#0
0065f8  4edd              LDR      r6,|L1.26992|
0065fa  f9b40052          LDRSH    r0,[r4,#0x52]
0065fe  eb0a0281          ADD      r2,r10,r1,LSL #2
006602  eb0b0381          ADD      r3,r11,r1,LSL #2
006606  4567              CMP      r7,r12
006608  dc05              BGT      |L1.26134|
00660a  f8dfc378          LDR      r12,|L1.27012|
00660e  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
006612  4567              CMP      r7,r12
006614  da04              BGE      |L1.26144|
                  |L1.26134|
006616  4282              CMP      r2,r0
006618  dd02              BLE      |L1.26144|
00661a  4283              CMP      r3,r0
00661c  da00              BGE      |L1.26144|
00661e  7035              STRB     r5,[r6,#0]
                  |L1.26144|
;;;10829  
;;;10830  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
006620  4fd9              LDR      r7,|L1.27016|
006622  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
006626  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
00662a  4fd2              LDR      r7,|L1.26996|
00662c  ebbc0f4e          CMP      r12,lr,LSL #1
006630  dc04              BGT      |L1.26172|
006632  f1ce0e00          RSB      lr,lr,#0
006636  ebbc0f4e          CMP      r12,lr,LSL #1
00663a  da04              BGE      |L1.26182|
                  |L1.26172|
00663c  4282              CMP      r2,r0
00663e  dd02              BLE      |L1.26182|
006640  4283              CMP      r3,r0
006642  da00              BGE      |L1.26182|
006644  703d              STRB     r5,[r7,#0]
                  |L1.26182|
;;;10831  																 
;;;10832  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
006646  f06f0209          MVN      r2,#9
00664a  eb020181          ADD      r1,r2,r1,LSL #2
00664e  4281              CMP      r1,r0
006650  d121              BNE      |L1.26262|
006652  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006656  b9f0              CBNZ     r0,|L1.26262|
;;;10833  	{
;;;10834  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
006658  7830              LDRB     r0,[r6,#0]  ; sign_U
00665a  2801              CMP      r0,#1
00665c  d11b              BNE      |L1.26262|
00665e  7838              LDRB     r0,[r7,#0]  ; sign_I
006660  2801              CMP      r0,#1
006662  d118              BNE      |L1.26262|
006664  f44f70ef          MOV      r0,#0x1de
006668  f7fffffe          BL       lc640_read_int
00666c  49c7              LDR      r1,|L1.27020|
00666e  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006672  4288              CMP      r0,r1
006674  d00f              BEQ      |L1.26262|
006676  48c6              LDR      r0,|L1.27024|
006678  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00667a  b160              CBZ      r0,|L1.26262|
00667c  f8980041          LDRB     r0,[r8,#0x41]  ; bat
006680  07c0              LSLS     r0,r0,#31
006682  d108              BNE      |L1.26262|
;;;10835  		{
;;;10836  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006684  f44f70ef          MOV      r0,#0x1de
006688  f7fffffe          BL       lc640_write_int
;;;10837  		superviser_cnt++;
00668c  48c1              LDR      r0,|L1.27028|
00668e  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006690  f1010101          ADD      r1,r1,#1
006694  7001              STRB     r1,[r0,#0]
                  |L1.26262|
;;;10838  		}
;;;10839  	
;;;10840  	}
;;;10841  
;;;10842  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
006696  48b9              LDR      r0,|L1.27004|
006698  f9b81002          LDRSH    r1,[r8,#2]  ; bat
00669c  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
0066a0  4281              CMP      r1,r0
0066a2  dc06              BGT      |L1.26290|
0066a4  48b7              LDR      r0,|L1.27012|
0066a6  f9b81052          LDRSH    r1,[r8,#0x52]  ; bat
0066aa  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
0066ae  4281              CMP      r1,r0
0066b0  da0e              BGE      |L1.26320|
                  |L1.26290|
0066b2  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0066b6  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0066ba  ebc01000          RSB      r0,r0,r0,LSL #4
0066be  eb0a0280          ADD      r2,r10,r0,LSL #2
0066c2  428a              CMP      r2,r1
0066c4  dd04              BLE      |L1.26320|
0066c6  eb0b0080          ADD      r0,r11,r0,LSL #2
0066ca  4288              CMP      r0,r1
0066cc  da00              BGE      |L1.26320|
0066ce  7075              STRB     r5,[r6,#1]
                  |L1.26320|
;;;10843  
;;;10844  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
0066d0  49ad              LDR      r1,|L1.27016|
0066d2  f9b80058          LDRSH    r0,[r8,#0x58]  ; bat
0066d6  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0066da  ebb00f41          CMP      r0,r1,LSL #1
0066de  dc03              BGT      |L1.26344|
0066e0  4249              RSBS     r1,r1,#0
0066e2  ebb00f41          CMP      r0,r1,LSL #1
0066e6  da0e              BGE      |L1.26374|
                  |L1.26344|
0066e8  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0066ec  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0066f0  ebc01000          RSB      r0,r0,r0,LSL #4
0066f4  eb0a0280          ADD      r2,r10,r0,LSL #2
0066f8  428a              CMP      r2,r1
0066fa  dd04              BLE      |L1.26374|
0066fc  eb0b0080          ADD      r0,r11,r0,LSL #2
006700  4288              CMP      r0,r1
006702  da00              BGE      |L1.26374|
006704  707d              STRB     r5,[r7,#1]
                  |L1.26374|
;;;10845  																 
;;;10846  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
006706  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00670a  ebc01100          RSB      r1,r0,r0,LSL #4
00670e  f06f0009          MVN      r0,#9
006712  eb000081          ADD      r0,r0,r1,LSL #2
006716  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00671a  4288              CMP      r0,r1
00671c  d122              BNE      |L1.26468|
00671e  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006722  b9f8              CBNZ     r0,|L1.26468|
;;;10847  	{
;;;10848  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
006724  7870              LDRB     r0,[r6,#1]  ; sign_U
006726  2801              CMP      r0,#1
006728  d11c              BNE      |L1.26468|
00672a  7878              LDRB     r0,[r7,#1]  ; sign_I
00672c  2801              CMP      r0,#1
00672e  d119              BNE      |L1.26468|
006730  f44f75fe          MOV      r5,#0x1fc
006734  4628              MOV      r0,r5
006736  f7fffffe          BL       lc640_read_int
00673a  4994              LDR      r1,|L1.27020|
00673c  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006740  4288              CMP      r0,r1
006742  d00f              BEQ      |L1.26468|
006744  4892              LDR      r0,|L1.27024|
006746  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006748  2802              CMP      r0,#2
00674a  d10b              BNE      |L1.26468|
00674c  f8980091          LDRB     r0,[r8,#0x91]  ; bat
006750  07c0              LSLS     r0,r0,#31
006752  d107              BNE      |L1.26468|
;;;10849  		{
;;;10850  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006754  4628              MOV      r0,r5
006756  f7fffffe          BL       lc640_write_int
;;;10851  		superviser_cnt++;
00675a  488e              LDR      r0,|L1.27028|
00675c  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00675e  f1010101          ADD      r1,r1,#1
006762  7001              STRB     r1,[r0,#0]
                  |L1.26468|
;;;10852  		}
;;;10853  	
;;;10854  	}
;;;10855  
;;;10856  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006764  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006768  f06f0101          MVN      r1,#1
00676c  ebc01000          RSB      r0,r0,r0,LSL #4
006770  eb010080          ADD      r0,r1,r0,LSL #2
006774  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006778  4288              CMP      r0,r1
00677a  d102              BNE      |L1.26498|
00677c  e8bd5ff0          POP      {r4-r12,lr}
006780  e7fe              B        zar_superviser_start
                  |L1.26498|
;;;10857  }
006782  e620              B        |L1.25542|
;;;10858  
                          ENDP

                  npn_hndl PROC
;;;10869  //-----------------------------------------------
;;;10870  void npn_hndl(void)
006784  e92d03f0          PUSH     {r4-r9}
;;;10871  {
;;;10872  if(NPN_OUT!=npnoOFF)
006788  4883              LDR      r0,|L1.27032|
;;;10873  	{
;;;10874  /*	if(NPN_SIGN==npnsAVNET)
;;;10875  		{
;;;10876  		if(net_av==1)
;;;10877  			{
;;;10878  			if(npn_tz_cnt<TZNPN)
;;;10879  				{
;;;10880  				npn_tz_cnt++;
;;;10881  				if(npn_tz_cnt==TZNPN)
;;;10882  					{
;;;10883  					npn_stat=npnsOFF;
;;;10884  					}
;;;10885  				}
;;;10886  			}
;;;10887  		else
;;;10888  			{
;;;10889  			if(npn_tz_cnt)
;;;10890  				{
;;;10891  				npn_tz_cnt--;
;;;10892  				if(npn_tz_cnt==0)
;;;10893  					{
;;;10894  					npn_stat=npnsON;
;;;10895  					}
;;;10896  				}
;;;10897  			}
;;;10898  		}*/
;;;10899  /*	if(NPN_SIGN==npnsULOAD)
;;;10900  		{
;;;10901  		if(load_U<UONPN)
;;;10902  			{
;;;10903  			if(npn_tz_cnt<TZNPN)
;;;10904  				{
;;;10905  				npn_tz_cnt++;
;;;10906  				if(npn_tz_cnt==TZNPN)
;;;10907  					{
;;;10908  					npn_stat=npnsOFF;
;;;10909  					}
;;;10910  				}
;;;10911  			}
;;;10912  		else if(load_U>UVNPN)
;;;10913  			{
;;;10914  			if(npn_tz_cnt)
;;;10915  				{
;;;10916  				npn_tz_cnt--;
;;;10917  				if(npn_tz_cnt==0)
;;;10918  					{
;;;10919  					npn_stat=npnsON;
;;;10920  					}
;;;10921  				}
;;;10922  			}
;;;10923  		}*/
;;;10924  
;;;10925  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10926  		{
;;;10927  		if(npn_tz_cnt<TZNPN)
00678a  4f84              LDR      r7,|L1.27036|
;;;10928  			{
;;;10929  			npn_tz_cnt++;
;;;10930  			if(npn_tz_cnt==TZNPN)
;;;10931  				{
;;;10932  				npn_stat=npnsOFF;
00678c  4e84              LDR      r6,|L1.27040|
00678e  7800              LDRB     r0,[r0,#0]            ;10872  ; NPN_OUT
006790  f04f0c00          MOV      r12,#0                ;10872
;;;10933  				}
;;;10934  			}
;;;10935  		}
;;;10936  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10937  		{
;;;10938  		if(npn_tz_cnt)
;;;10939  			{
;;;10940  			npn_tz_cnt--;
;;;10941  			if(npn_tz_cnt==0)
;;;10942  				{
;;;10943  				npn_stat=npnsON;
006794  f04f0801          MOV      r8,#1
006798  b3e8              CBZ      r0,|L1.26646|
00679a  4882              LDR      r0,|L1.27044|
00679c  4639              MOV      r1,r7                 ;10927
00679e  f9b05000          LDRSH    r5,[r0,#0]            ;10925  ; load_U
0067a2  4881              LDR      r0,|L1.27048|
0067a4  f9b11000          LDRSH    r1,[r1,#0]            ;10927
0067a8  f9b09000          LDRSH    r9,[r0,#0]            ;10925  ; UONPN
0067ac  487f              LDR      r0,|L1.27052|
0067ae  454d              CMP      r5,r9                 ;10925
0067b0  f9b02000          LDRSH    r2,[r0,#0]            ;10925
0067b4  487e              LDR      r0,|L1.27056|
0067b6  f9b03000          LDRSH    r3,[r0,#0]            ;10925
0067ba  487e              LDR      r0,|L1.27060|
0067bc  f9b04000          LDRSH    r4,[r0,#0]            ;10925
0067c0  487d              LDR      r0,|L1.27064|
0067c2  f9b00000          LDRSH    r0,[r0,#0]            ;10925
0067c6  da13              BGE      |L1.26608|
0067c8  4282              CMP      r2,r0                 ;10925
0067ca  db03              BLT      |L1.26580|
0067cc  4283              CMP      r3,r0                 ;10925
0067ce  db01              BLT      |L1.26580|
0067d0  4284              CMP      r4,r0                 ;10925
0067d2  da0d              BGE      |L1.26608|
                  |L1.26580|
0067d4  4879              LDR      r0,|L1.27068|
0067d6  f9b02000          LDRSH    r2,[r0,#0]            ;10927  ; TZNPN
0067da  4291              CMP      r1,r2                 ;10927
0067dc  da23              BGE      |L1.26662|
0067de  f1010101          ADD      r1,r1,#1              ;10929
0067e2  b208              SXTH     r0,r1                 ;10929
0067e4  8038              STRH     r0,[r7,#0]            ;10929
0067e6  4290              CMP      r0,r2                 ;10930
0067e8  d11d              BNE      |L1.26662|
0067ea  f886c000          STRB     r12,[r6,#0]           ;10932
0067ee  e01a              B        |L1.26662|
                  |L1.26608|
0067f0  f8dfc1cc          LDR      r12,|L1.27072|
0067f4  f9bcc000          LDRSH    r12,[r12,#0]          ;10936  ; UVNPN
0067f8  4565              CMP      r5,r12                ;10936
0067fa  dd14              BLE      |L1.26662|
0067fc  4282              CMP      r2,r0                 ;10936
0067fe  dd12              BLE      |L1.26662|
006800  4283              CMP      r3,r0                 ;10936
006802  dd10              BLE      |L1.26662|
006804  4284              CMP      r4,r0                 ;10936
006806  dd0e              BLE      |L1.26662|
006808  b169              CBZ      r1,|L1.26662|
00680a  f1a10101          SUB      r1,r1,#1              ;10940
00680e  b208              SXTH     r0,r1                 ;10940
006810  8038              STRH     r0,[r7,#0]            ;10940
006812  b940              CBNZ     r0,|L1.26662|
006814  e000              B        |L1.26648|
                  |L1.26646|
006816  e002              B        |L1.26654|
                  |L1.26648|
006818  f8868000          STRB     r8,[r6,#0]
00681c  e003              B        |L1.26662|
                  |L1.26654|
;;;10944  				}
;;;10945  			}
;;;10946  		}
;;;10947  	}
;;;10948  else
;;;10949  	{
;;;10950  	npn_tz_cnt=0;
00681e  f8a7c000          STRH     r12,[r7,#0]
;;;10951  	npn_stat=npnsON;
006822  f8868000          STRB     r8,[r6,#0]
                  |L1.26662|
;;;10952  	}
;;;10953  
;;;10954  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
006826  7830              LDRB     r0,[r6,#0]  ; npn_stat
006828  2800              CMP      r0,#0
00682a  d107              BNE      |L1.26684|
00682c  e8bd03f0          POP      {r4-r9}
006830  230f              MOVS     r3,#0xf
006832  2201              MOVS     r2,#1
006834  216e              MOVS     r1,#0x6e
006836  20d2              MOVS     r0,#0xd2
006838  f7ffbffe          B.W      mess_send
                  |L1.26684|
;;;10955  
;;;10956  
;;;10957  }
00683c  e8bd03f0          POP      {r4-r9}
006840  4770              BX       lr
;;;10958  
                          ENDP

                  loadoff_hndl PROC
;;;10960  //-----------------------------------------------
;;;10961  void loadoff_hndl(void)
006842  b5f0              PUSH     {r4-r7,lr}
;;;10962  {
;;;10963  if((load_U>UONPN)||(load_U<UVNPN))
006844  4857              LDR      r0,|L1.27044|
;;;10964  	{
;;;10965  	if(load_off_cnt<TZNPN)
006846  4d5f              LDR      r5,|L1.27076|
;;;10966  		{
;;;10967  		load_off_cnt++;
;;;10968  		if(load_off_cnt>=TZNPN)
;;;10969  			{
;;;10970  			load_off_stat=npnsOFF;
006848  2700              MOVS     r7,#0
00684a  f9b01000          LDRSH    r1,[r0,#0]            ;10963  ; load_U
00684e  4856              LDR      r0,|L1.27048|
006850  4e5d              LDR      r6,|L1.27080|
006852  f9b02000          LDRSH    r2,[r0,#0]            ;10963  ; UONPN
006856  f9b50000          LDRSH    r0,[r5,#0]            ;10965
00685a  4291              CMP      r1,r2                 ;10963
00685c  dc04              BGT      |L1.26728|
00685e  4b58              LDR      r3,|L1.27072|
006860  f9b33000          LDRSH    r3,[r3,#0]            ;10963  ; UVNPN
006864  4299              CMP      r1,r3                 ;10963
006866  da0d              BGE      |L1.26756|
                  |L1.26728|
006868  4954              LDR      r1,|L1.27068|
00686a  f9b11000          LDRSH    r1,[r1,#0]            ;10965  ; TZNPN
00686e  4288              CMP      r0,r1                 ;10965
006870  da1c              BGE      |L1.26796|
006872  f1000001          ADD      r0,r0,#1              ;10967
006876  b200              SXTH     r0,r0                 ;10967
006878  8028              STRH     r0,[r5,#0]            ;10967
00687a  4288              CMP      r0,r1                 ;10968
00687c  db16              BLT      |L1.26796|
00687e  7037              STRB     r7,[r6,#0]
;;;10971  			load_off_cnt=TZNPN;
006880  8029              STRH     r1,[r5,#0]
006882  e013              B        |L1.26796|
                  |L1.26756|
;;;10972  			}
;;;10973  		}
;;;10974  	}
;;;10975  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006884  4c51              LDR      r4,|L1.27084|
006886  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
00688a  4423              ADD      r3,r3,r4
00688c  428b              CMP      r3,r1
00688e  da0d              BGE      |L1.26796|
006890  1b12              SUBS     r2,r2,r4
006892  428a              CMP      r2,r1
006894  dd0a              BLE      |L1.26796|
;;;10976  	{
;;;10977  	if(load_off_cnt)
006896  b148              CBZ      r0,|L1.26796|
;;;10978  		{
;;;10979  		load_off_cnt--;
006898  f1a00001          SUB      r0,r0,#1
00689c  b200              SXTH     r0,r0
00689e  8028              STRH     r0,[r5,#0]
;;;10980  		if(load_off_cnt<=0)
0068a0  2800              CMP      r0,#0
0068a2  dc03              BGT      |L1.26796|
;;;10981  			{
;;;10982  			load_off_stat=npnsON;
0068a4  f04f0001          MOV      r0,#1
0068a8  7030              STRB     r0,[r6,#0]
;;;10983  			load_off_cnt=0;
0068aa  802f              STRH     r7,[r5,#0]
                  |L1.26796|
;;;10984  			}
;;;10985  		}
;;;10986  	}
;;;10987  
;;;10988  
;;;10989  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
0068ac  7830              LDRB     r0,[r6,#0]  ; load_off_stat
0068ae  2800              CMP      r0,#0
0068b0  d103              BNE      |L1.26810|
0068b2  4947              LDR      r1,|L1.27088|
0068b4  f04f000a          MOV      r0,#0xa
0068b8  7008              STRB     r0,[r1,#0]
                  |L1.26810|
;;;10990  
;;;10991  
;;;10992  }
0068ba  bdf0              POP      {r4-r7,pc}
;;;10993  
                          ENDP

                  speedChargeStartStop PROC
;;;11181  //-----------------------------------------------
;;;11182  void speedChargeStartStop(void)
0068bc  b538              PUSH     {r3-r5,lr}
;;;11183  {
;;;11184  spch_plazma[1]++;
0068be  4c45              LDR      r4,|L1.27092|
0068c0  7860              LDRB     r0,[r4,#1]  ; spch_plazma
0068c2  f1000001          ADD      r0,r0,#1
0068c6  7060              STRB     r0,[r4,#1]
;;;11185  /*if(speedChIsOn)
;;;11186  	{
;;;11187  	speedChIsOn=0;
;;;11188  	}
;;;11189  
;;;11190  else
;;;11191  	{
;;;11192  	if(speedChrgBlckStat==0)
;;;11193  		{
;;;11194  		speedChIsOn=1;
;;;11195  		speedChTimeCnt=0;
;;;11196  		}
;;;11197  	else
;;;11198  		{
;;;11199  		show_mess(	"     Ускоренный     ",
;;;11200  	          		"       заряд        ",
;;;11201  	          		"    заблокирован!   ",
;;;11202  	          		"                    ",2000);	 
;;;11203  		}
;;;11204  	}*/
;;;11205  
;;;11206  if(sp_ch_stat!=scsOFF)
0068c8  4843              LDR      r0,|L1.27096|
0068ca  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0068cc  b151              CBZ      r1,|L1.26852|
;;;11207  	{
;;;11208  	sp_ch_stat=scsOFF;
0068ce  f04f0100          MOV      r1,#0
0068d2  7001              STRB     r1,[r0,#0]
;;;11209  	speedz_mem_hndl(10);
0068d4  f04f000a          MOV      r0,#0xa
0068d8  f7fffffe          BL       speedz_mem_hndl
;;;11210  	spch_plazma[1]=10;
0068dc  f04f000a          MOV      r0,#0xa
0068e0  7060              STRB     r0,[r4,#1]
                  |L1.26850|
;;;11211  	}
;;;11212  
;;;11213  else
;;;11214  	{
;;;11215  	spch_plazma[1]=20;
;;;11216  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;11217  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11218  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11219  		#endif
;;;11220  		)
;;;11221  		{
;;;11222  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11223  		sp_ch_stat=scsSTEP1;
;;;11224  		#else
;;;11225  		sp_ch_stat=scsWRK;
;;;11226  		#endif
;;;11227  		speedz_mem_hndl(1);
;;;11228  		}
;;;11229  	else 
;;;11230  		{
;;;11231  		show_mess(	"     Ускоренный     ",
;;;11232  	          		"       заряд        ",
;;;11233  	          		"    заблокирован!   ",
;;;11234  	          		"                    ",2000);
;;;11235  		}
;;;11236  	}
;;;11237  }
0068e2  bd38              POP      {r3-r5,pc}
                  |L1.26852|
0068e4  e07a              B        |L1.27100|
0068e6  0000              DCW      0x0000
                  |L1.26856|
                          DCD      ||area_number.25||+0x46
                  |L1.26860|
0068ec  534b2023          DCB      "SK #1 Alarm",0
0068f0  3120416c
0068f4  61726d00
                  |L1.26872|
0068f8  534b2023          DCB      "SK #2 Alarm",0
0068fc  3220416c
006900  61726d00
                  |L1.26884|
006904  534b2023          DCB      "SK #3 Alarm",0
006908  3320416c
00690c  61726d00
                  |L1.26896|
006910  534b2023          DCB      "SK #4 Alarm",0
006914  3420416c
006918  61726d00
                  |L1.26908|
00691c  534b2023          DCB      "SK #1 Alarm is off",0
006920  3120416c
006924  61726d20
006928  6973206f
00692c  666600  
00692f  00                DCB      0
                  |L1.26928|
006930  534b2023          DCB      "SK #2 Alarm is off",0
006934  3220416c
006938  61726d20
00693c  6973206f
006940  666600  
006943  00                DCB      0
                  |L1.26948|
006944  534b2023          DCB      "SK #3 Alarm is off",0
006948  3320416c
00694c  61726d20
006950  6973206f
006954  666600  
006957  00                DCB      0
                  |L1.26968|
006958  534b2023          DCB      "SK #4 Alarm is off",0
00695c  3420416c
006960  61726d20
006964  6973206f
006968  666600  
00696b  00                DCB      0
                  |L1.26988|
                          DCD      NUMSK
                  |L1.26992|
                          DCD      sign_U
                  |L1.26996|
                          DCD      sign_I
                  |L1.27000|
                          DCD      bat
                  |L1.27004|
                          DCD      u_necc_up
                  |L1.27008|
                          DCD      TBAT
                  |L1.27012|
                          DCD      u_necc_dn
                  |L1.27016|
                          DCD      IKB
                  |L1.27020|
                          DCD      BAT_C_REAL
                  |L1.27024|
                          DCD      NUMBAT
                  |L1.27028|
                          DCD      superviser_cnt
                  |L1.27032|
                          DCD      NPN_OUT
                  |L1.27036|
                          DCD      npn_tz_cnt
                  |L1.27040|
                          DCD      npn_stat
                  |L1.27044|
                          DCD      load_U
                  |L1.27048|
                          DCD      UONPN
                  |L1.27052|
                          DCD      net_Ua
                  |L1.27056|
                          DCD      net_Ub
                  |L1.27060|
                          DCD      net_Uc
                  |L1.27064|
                          DCD      UMN
                  |L1.27068|
                          DCD      TZNPN
                  |L1.27072|
                          DCD      UVNPN
                  |L1.27076|
                          DCD      load_off_cnt
                  |L1.27080|
                          DCD      load_off_stat
                  |L1.27084|
                          DCD      dUNPN
                  |L1.27088|
                          DCD      tloaddisable_cmnd
                  |L1.27092|
                          DCD      spch_plazma
                  |L1.27096|
                          DCD      sp_ch_stat
                  |L1.27100|
0069dc  f04f0114          MOV      r1,#0x14              ;11215
0069e0  7061              STRB     r1,[r4,#1]            ;11215
0069e2  49fa              LDR      r1,|L1.28108|
0069e4  f9b12000          LDRSH    r2,[r1,#0]            ;11216  ; speedChrgBlckStat
0069e8  49f9              LDR      r1,|L1.28112|
0069ea  f8913023          LDRB     r3,[r1,#0x23]         ;11216  ; spc_stat
0069ee  ea420203          ORR      r2,r2,r3              ;11216
0069f2  794b              LDRB     r3,[r1,#5]            ;11216  ; vz1_stat
0069f4  79c9              LDRB     r1,[r1,#7]            ;11216  ; vz2_stat
0069f6  ea420203          ORR      r2,r2,r3              ;11216
0069fa  430a              ORRS     r2,r2,r1              ;11216
0069fc  d009              BEQ      |L1.27154|
0069fe  f44f60fa          MOV      r0,#0x7d0             ;11231
006a02  9000              STR      r0,[sp,#0]            ;11231
006a04  4bf3              LDR      r3,|L1.28116|
006a06  a2f4              ADR      r2,|L1.28120|
006a08  a1f9              ADR      r1,|L1.28144|
006a0a  a0ff              ADR      r0,|L1.28168|
006a0c  f7fffffe          BL       show_mess
006a10  e767              B        |L1.26850|
                  |L1.27154|
006a12  f04f0101          MOV      r1,#1                 ;11223
006a16  7001              STRB     r1,[r0,#0]            ;11223
006a18  e8bd4038          POP      {r3-r5,lr}            ;11227
006a1c  4608              MOV      r0,r1                 ;11227
006a1e  f7ffbffe          B.W      speedz_mem_hndl
;;;11238  
                          ENDP

                  speedChargeHndl PROC
;;;10994  //-----------------------------------------------
;;;10995  void speedChargeHndl(void)
006a22  e92d4ff8          PUSH     {r3-r11,lr}
;;;10996  {
;;;10997  /*
;;;10998  if(sp_ch_stat==scsOFF)
;;;10999  	{
;;;11000  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11001  	}*/
;;;11002  	 
;;;11003  if(sp_ch_stat==scsSTEP1)
006a26  4ffe              LDR      r7,|L1.28192|
;;;11004  	{
;;;11005  	if(sp_ch_stat_old!=sp_ch_stat)
;;;11006  		{
;;;11007  		sp_ch_stat_cnt=5;
;;;11008  		if(SP_CH_VENT_BLOK==0)
006a28  f8dfa3f8          LDR      r10,|L1.28196|
;;;11009  			{
;;;11010  			sp_ch_stat_cnt=0;
;;;11011  			sp_ch_stat=scsWRK;
;;;11012  			}
;;;11013  		}
;;;11014  	if(sp_ch_stat_cnt)
;;;11015  		{
;;;11016  		sp_ch_stat_cnt--;
;;;11017  		if(sp_ch_stat_cnt==0)
;;;11018  			{
;;;11019  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;11020  
;;;11021  			}
;;;11022  		}
;;;11023  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006a2c  f8df93f8          LDR      r9,|L1.28200|
006a30  7839              LDRB     r1,[r7,#0]            ;11003  ; sp_ch_stat
006a32  f04f0802          MOV      r8,#2                 ;11011
006a36  4efd              LDR      r6,|L1.28204|
006a38  4cfd              LDR      r4,|L1.28208|
006a3a  2500              MOVS     r5,#0                 ;11008
006a3c  7830              LDRB     r0,[r6,#0]            ;11005
006a3e  2901              CMP      r1,#1                 ;11003
006a40  d11b              BNE      |L1.27258|
006a42  2801              CMP      r0,#1                 ;11005
006a44  d008              BEQ      |L1.27224|
006a46  f04f0105          MOV      r1,#5                 ;11007
006a4a  8021              STRH     r1,[r4,#0]            ;11007
006a4c  f8ba1000          LDRH     r1,[r10,#0]           ;11008  ; SP_CH_VENT_BLOK
006a50  b911              CBNZ     r1,|L1.27224|
006a52  8025              STRH     r5,[r4,#0]            ;11010
006a54  f8878000          STRB     r8,[r7,#0]            ;11011
                  |L1.27224|
006a58  f9b41000          LDRSH    r1,[r4,#0]            ;11014  ; sp_ch_stat_cnt
006a5c  b139              CBZ      r1,|L1.27246|
006a5e  f1a10101          SUB      r1,r1,#1              ;11016
006a62  b209              SXTH     r1,r1                 ;11016
006a64  8021              STRH     r1,[r4,#0]            ;11016
006a66  b911              CBNZ     r1,|L1.27246|
006a68  f04f0103          MOV      r1,#3                 ;11019
006a6c  7039              STRB     r1,[r7,#0]            ;11019
                  |L1.27246|
006a6e  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006a72  2901              CMP      r1,#1
006a74  d101              BNE      |L1.27258|
006a76  f8878000          STRB     r8,[r7,#0]
                  |L1.27258|
;;;11024  	}
;;;11025  
;;;11026  if(sp_ch_stat==scsWRK)
006a7a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006a7c  2902              CMP      r1,#2
006a7e  d123              BNE      |L1.27336|
;;;11027  	{
;;;11028  	if(sp_ch_stat_old!=sp_ch_stat)
;;;11029  		{
;;;11030  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006a80  4aec              LDR      r2,|L1.28212|
;;;11031  		hv_vz_up_cnt=0;
006a82  49ed              LDR      r1,|L1.28216|
006a84  2802              CMP      r0,#2                 ;11028
006a86  d008              BEQ      |L1.27290|
006a88  48ec              LDR      r0,|L1.28220|
006a8a  f44f6361          MOV      r3,#0xe10             ;11030
006a8e  f9b00000          LDRSH    r0,[r0,#0]            ;11030  ; speedChrgTimeInHour
006a92  fb00f003          MUL      r0,r0,r3              ;11030
006a96  6010              STR      r0,[r2,#0]            ;11030  ; sp_ch_wrk_cnt
006a98  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27290|
;;;11032  		}
;;;11033  	sp_ch_wrk_cnt--;
006a9a  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006a9c  f1a00001          SUB      r0,r0,#1
006aa0  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;11034  	hv_vz_up_cnt++;
006aa2  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006aa4  f1020201          ADD      r2,r2,#1
006aa8  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11035  	if(sp_ch_wrk_cnt==0)
006aaa  b918              CBNZ     r0,|L1.27316|
;;;11036  		{
;;;11037  		sp_ch_stat=scsOFF;
006aac  703d              STRB     r5,[r7,#0]
;;;11038  		speedz_mem_hndl(0);
006aae  2000              MOVS     r0,#0
006ab0  f7fffffe          BL       speedz_mem_hndl
                  |L1.27316|
;;;11039  		}
;;;11040  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11041  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006ab4  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006ab8  b930              CBNZ     r0,|L1.27336|
006aba  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006abe  2801              CMP      r0,#1
006ac0  d102              BNE      |L1.27336|
006ac2  f04f0004          MOV      r0,#4
006ac6  7038              STRB     r0,[r7,#0]
                  |L1.27336|
;;;11042  	#endif
;;;11043  	}
;;;11044  
;;;11045  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006ac8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;11046  	{
;;;11047  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;11048  		{
;;;11049  		sp_ch_stat_cnt=10;
;;;11050  		}
;;;11051  	sp_ch_stat_cnt--;
;;;11052  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;11053  		{
;;;11054  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006aca  f2413b88          MOV      r11,#0x1388
006ace  f04f0a0a          MOV      r10,#0xa              ;11049
006ad2  2803              CMP      r0,#3                 ;11045
006ad4  d119              BNE      |L1.27402|
006ad6  7830              LDRB     r0,[r6,#0]            ;11047  ; sp_ch_stat_old
006ad8  2803              CMP      r0,#3                 ;11047
006ada  d101              BNE      |L1.27360|
006adc  8820              LDRH     r0,[r4,#0]            ;11047  ; sp_ch_stat_cnt
006ade  b908              CBNZ     r0,|L1.27364|
                  |L1.27360|
006ae0  f8a4a000          STRH     r10,[r4,#0]           ;11049
                  |L1.27364|
006ae4  8820              LDRH     r0,[r4,#0]            ;11051  ; sp_ch_stat_cnt
006ae6  f1a00001          SUB      r0,r0,#1              ;11051
006aea  b200              SXTH     r0,r0                 ;11051
006aec  8020              STRH     r0,[r4,#0]            ;11051
006aee  280a              CMP      r0,#0xa               ;11052
006af0  d001              BEQ      |L1.27382|
006af2  2809              CMP      r0,#9                 ;11052
006af4  d109              BNE      |L1.27402|
                  |L1.27382|
006af6  4bd2              LDR      r3,|L1.28224|
006af8  a0d2              ADR      r0,|L1.28228|
006afa  f1030218          ADD      r2,r3,#0x18
006afe  f1020118          ADD      r1,r2,#0x18
006b02  f8cdb000          STR      r11,[sp,#0]
006b06  f7fffffe          BL       show_mess
                  |L1.27402|
;;;11055  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11056  					"      ВКЛЮЧЕН       ",
;;;11057  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11058  					5000);
;;;11059  		}
;;;11060  	}
;;;11061  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006b0a  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006b0c  2804              CMP      r0,#4
006b0e  d11f              BNE      |L1.27472|
;;;11062  	{
;;;11063  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006b10  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006b12  2804              CMP      r0,#4
006b14  d101              BNE      |L1.27418|
006b16  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006b18  b908              CBNZ     r0,|L1.27422|
                  |L1.27418|
;;;11064  		{
;;;11065  		sp_ch_stat_cnt=10;
006b1a  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27422|
;;;11066  		}
;;;11067  	sp_ch_stat_cnt--;
006b1e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006b20  f1a00001          SUB      r0,r0,#1
006b24  b200              SXTH     r0,r0
006b26  8020              STRH     r0,[r4,#0]
;;;11068  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006b28  280a              CMP      r0,#0xa
006b2a  d001              BEQ      |L1.27440|
006b2c  2809              CMP      r0,#9
006b2e  d109              BNE      |L1.27460|
                  |L1.27440|
;;;11069  		{
;;;11070  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006b30  4bca              LDR      r3,|L1.28252|
006b32  a0c4              ADR      r0,|L1.28228|
006b34  f1030218          ADD      r2,r3,#0x18
006b38  f1020118          ADD      r1,r2,#0x18
006b3c  f8cdb000          STR      r11,[sp,#0]
006b40  f7fffffe          BL       show_mess
                  |L1.27460|
;;;11071  					"    ЗАБЛОКИРОВАН    ",
;;;11072  					"     НЕИСПРАВНА     ",
;;;11073  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11074  					5000);
;;;11075  		}
;;;11076  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006b44  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006b48  2801              CMP      r0,#1
006b4a  d101              BNE      |L1.27472|
006b4c  f8878000          STRB     r8,[r7,#0]
                  |L1.27472|
;;;11077  	}
;;;11078  
;;;11079  
;;;11080  sp_ch_stat_old=sp_ch_stat;
006b50  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006b52  7030              STRB     r0,[r6,#0]
;;;11081  
;;;11082  
;;;11083  
;;;11084  if(speedChrgAvtEn==1)
006b54  49c2              LDR      r1,|L1.28256|
;;;11085  	{
;;;11086  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;11087  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11088  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;11089  		#endif
;;;11090  		)
;;;11091  		{
;;;11092  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;11093  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;11094  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;11095  		#endif
;;;11096  		#ifdef UKU_220_V2
;;;11097  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;11098  		#endif
;;;11099  		&&(!speedChrgBlckStat))
006b56  4c9d              LDR      r4,|L1.28108|
006b58  8809              LDRH     r1,[r1,#0]            ;11084  ; speedChrgAvtEn
006b5a  2901              CMP      r1,#1                 ;11084
006b5c  d10a              BNE      |L1.27508|
006b5e  499c              LDR      r1,|L1.28112|
;;;11100  			{
;;;11101  			speedChargeStartCnt++;
006b60  4ec0              LDR      r6,|L1.28260|
006b62  f8912023          LDRB     r2,[r1,#0x23]         ;11086  ; spc_stat
006b66  4310              ORRS     r0,r0,r2              ;11086
006b68  794a              LDRB     r2,[r1,#5]            ;11086  ; vz1_stat
006b6a  79c9              LDRB     r1,[r1,#7]            ;11086  ; vz2_stat
006b6c  4310              ORRS     r0,r0,r2              ;11086
006b6e  4308              ORRS     r0,r0,r1              ;11086
006b70  d007              BEQ      |L1.27522|
;;;11102  			if(speedChargeStartCnt>=60)
;;;11103  				{
;;;11104  				speedChargeStartStop();
;;;11105  				speedz_mem_hndl(5);
;;;11106  				}
;;;11107  			}
;;;11108  		else speedChargeStartCnt=0;
;;;11109  		}
;;;11110  	else speedChargeStartCnt=0;
006b72  7035              STRB     r5,[r6,#0]
                  |L1.27508|
;;;11111  	}
;;;11112  
;;;11113  
;;;11114  
;;;11115  /*
;;;11116  if(speedChIsOn)
;;;11117  	{
;;;11118  	speedChTimeCnt++;
;;;11119  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11120  		{
;;;11121  		speedChIsOn=0;
;;;11122  		}
;;;11123  	if(speedChrgBlckStat)
;;;11124  		{
;;;11125  		speedChIsOn=0;
;;;11126  		speedChTimeCnt=0;
;;;11127  		}
;;;11128  	}
;;;11129  
;;;11130  
;;;11131  
;;;11132  if(speedChrgAvtEn)
;;;11133  	{
;;;11134  	if(!speedChIsOn)
;;;11135  		{
;;;11136  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11137  			{
;;;11138  			speedChIsOn=1;
;;;11139  			}
;;;11140  		}
;;;11141  	}
;;;11142  
;;;11143  
;;;11144  */
;;;11145  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006b74  48bc              LDR      r0,|L1.28264|
006b76  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006b78  2802              CMP      r0,#2
006b7a  d02e              BEQ      |L1.27610|
006b7c  8025              STRH     r5,[r4,#0]
                  |L1.27518|
;;;11146  else
;;;11147  	{
;;;11148  	speedChrgBlckStat=0;
;;;11149  	if(speedChrgBlckSrc==1)
;;;11150  		{
;;;11151  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11152  		}
;;;11153  	else if(speedChrgBlckSrc==2)
;;;11154  		{
;;;11155  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11156  		}
;;;11157  	}
;;;11158  
;;;11159  /*
;;;11160  if(speedChrgBlckStat==1)
;;;11161  	{
;;;11162  
;;;11163  	//speedChargeStartStop();
;;;11164  
;;;11165  	speedChrgShowCnt++;
;;;11166  	if(speedChrgShowCnt>=30)	
;;;11167  		{
;;;11168  		speedChrgShowCnt=0;
;;;11169  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11170  					"       ЗАРЯД        ",
;;;11171  					"     ЗАПРЕЩЕН!!!    ",
;;;11172  					"                    ",
;;;11173  					5000);
;;;11174  		}
;;;11175  	} 
;;;11176  else speedChrgShowCnt=0;  */
;;;11177  
;;;11178  
;;;11179  }
006b7e  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27522|
006b82  48ba              LDR      r0,|L1.28268|
006b84  49ba              LDR      r1,|L1.28272|
006b86  f9b00000          LDRSH    r0,[r0,#0]            ;11092  ; load_U
006b8a  f9b11000          LDRSH    r1,[r1,#0]            ;11092  ; u_necc
006b8e  4288              CMP      r0,r1                 ;11092
006b90  da14              BGE      |L1.27580|
006b92  1a08              SUBS     r0,r1,r0              ;11092
006b94  49b7              LDR      r1,|L1.28276|
006b96  f9b11000          LDRSH    r1,[r1,#0]            ;11092  ; speedChrgDU
006b9a  4288              CMP      r0,r1                 ;11092
006b9c  dd0e              BLE      |L1.27580|
006b9e  48b6              LDR      r0,|L1.28280|
006ba0  49b6              LDR      r1,|L1.28284|
006ba2  f9b00000          LDRSH    r0,[r0,#0]            ;11094  ; Ib_ips_termokompensat
006ba6  8809              LDRH     r1,[r1,#0]            ;11094  ; IZMAX
006ba8  fb90f0fa          SDIV     r0,r0,r10             ;11094
006bac  1a40              SUBS     r0,r0,r1              ;11094
006bae  b200              SXTH     r0,r0                 ;11094
006bb0  f7fffffe          BL       abs
006bb4  2805              CMP      r0,#5                 ;11094
006bb6  da01              BGE      |L1.27580|
006bb8  8820              LDRH     r0,[r4,#0]            ;11099  ; speedChrgBlckStat
006bba  b108              CBZ      r0,|L1.27584|
                  |L1.27580|
006bbc  7035              STRB     r5,[r6,#0]            ;11108
006bbe  e7d9              B        |L1.27508|
                  |L1.27584|
006bc0  7830              LDRB     r0,[r6,#0]            ;11101  ; speedChargeStartCnt
006bc2  f1000001          ADD      r0,r0,#1              ;11101
006bc6  b2c0              UXTB     r0,r0                 ;11101
006bc8  7030              STRB     r0,[r6,#0]            ;11101
006bca  283c              CMP      r0,#0x3c              ;11102
006bcc  d3d2              BCC      |L1.27508|
006bce  f7fffffe          BL       speedChargeStartStop
006bd2  2005              MOVS     r0,#5                 ;11105
006bd4  f7fffffe          BL       speedz_mem_hndl
006bd8  e7cc              B        |L1.27508|
                  |L1.27610|
006bda  8025              STRH     r5,[r4,#0]            ;11148
006bdc  48a8              LDR      r0,|L1.28288|
006bde  49a9              LDR      r1,|L1.28292|
006be0  f44f63fa          MOV      r3,#0x7d0             ;11151
006be4  f9b00000          LDRSH    r0,[r0,#0]            ;11155  ; speedChrgBlckLog
006be8  b918              CBNZ     r0,|L1.27634|
006bea  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;11155  ; adc_buff_
006bee  429a              CMP      r2,r3                 ;11155
006bf0  dc05              BGT      |L1.27646|
                  |L1.27634|
006bf2  2801              CMP      r0,#1                 ;11155
006bf4  d1c3              BNE      |L1.27518|
006bf6  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;11155  ; adc_buff_
006bfa  4298              CMP      r0,r3                 ;11155
006bfc  dabf              BGE      |L1.27518|
                  |L1.27646|
006bfe  f04f0001          MOV      r0,#1                 ;11155
006c02  8020              STRH     r0,[r4,#0]            ;11155
006c04  e7bb              B        |L1.27518|
;;;11180  
                          ENDP

                  averageChargeHndl PROC
;;;11239  //-----------------------------------------------
;;;11240  void averageChargeHndl(void)
006c06  e92d4ff8          PUSH     {r3-r11,lr}
;;;11241  {
;;;11242  /*
;;;11243  if(hv_vz_stat==hvsOFF)
;;;11244  	{
;;;11245  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;11246  	} */
;;;11247  if(hv_vz_stat!=hvsOFF)
006c0a  f8dfa27c          LDR      r10,|L1.28296|
006c0e  f04f0b00          MOV      r11,#0
006c12  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c16  b130              CBZ      r0,|L1.27686|
;;;11248  	{
;;;11249  	hv_vz_stat=hvsOFF; 	
006c18  f88ab000          STRB     r11,[r10,#0]
;;;11250  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006c1c  2100              MOVS     r1,#0
006c1e  f44f70b4          MOV      r0,#0x168
006c22  f7fffffe          BL       lc640_write
                  |L1.27686|
;;;11251  	}
;;;11252  
;;;11253  if(hv_vz_stat==hvsSTEP1)
006c26  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;11254  	{
;;;11255  	if(hv_vz_stat_old!=hv_vz_stat)
;;;11256  		{
;;;11257  		hv_vz_stat_cnt=5;
;;;11258  		}
;;;11259  	if(hv_vz_stat_cnt)
;;;11260  		{
;;;11261  		hv_vz_stat_cnt--;
;;;11262  		if(hv_vz_stat_cnt==0)
;;;11263  			{
;;;11264  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;11265  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;11266  			}
;;;11267  		}
;;;11268  	if(sk_stat[0]==1)
006c2a  4e7f              LDR      r6,|L1.28200|
006c2c  4d97              LDR      r5,|L1.28300|
006c2e  4c98              LDR      r4,|L1.28304|
006c30  f04f0905          MOV      r9,#5                 ;11257
006c34  2801              CMP      r0,#1                 ;11253
006c36  d131              BNE      |L1.27804|
006c38  7828              LDRB     r0,[r5,#0]            ;11255  ; hv_vz_stat_old
006c3a  2801              CMP      r0,#1                 ;11255
006c3c  d001              BEQ      |L1.27714|
006c3e  f8a49000          STRH     r9,[r4,#0]            ;11257
                  |L1.27714|
006c42  f9b40000          LDRSH    r0,[r4,#0]            ;11259  ; hv_vz_stat_cnt
006c46  b168              CBZ      r0,|L1.27748|
006c48  f1a00001          SUB      r0,r0,#1              ;11261
006c4c  b200              SXTH     r0,r0                 ;11261
006c4e  8020              STRH     r0,[r4,#0]            ;11261
006c50  b940              CBNZ     r0,|L1.27748|
006c52  f04f0006          MOV      r0,#6                 ;11264
006c56  f88a0000          STRB     r0,[r10,#0]           ;11264
006c5a  4601              MOV      r1,r0                 ;11265
006c5c  f44f70b4          MOV      r0,#0x168             ;11265
006c60  f7fffffe          BL       lc640_write
                  |L1.27748|
006c64  7830              LDRB     r0,[r6,#0]  ; sk_stat
006c66  2801              CMP      r0,#1
006c68  d118              BNE      |L1.27804|
;;;11269  		{
;;;11270  		hv_vz_stat=hvsSTEP2;
006c6a  f04f0002          MOV      r0,#2
006c6e  f88a0000          STRB     r0,[r10,#0]
;;;11271  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006c72  4601              MOV      r1,r0
006c74  f44f70b4          MOV      r0,#0x168
006c78  f7fffffe          BL       lc640_write
;;;11272  		tree_up(iHV_STEP2_2,1,0,0);
006c7c  2300              MOVS     r3,#0
006c7e  461a              MOV      r2,r3
006c80  2101              MOVS     r1,#1
006c82  20f1              MOVS     r0,#0xf1
006c84  f7fffffe          BL       tree_up
;;;11273  		tree_up(iHV_STEP2_1,0,0,0);
006c88  2300              MOVS     r3,#0
006c8a  461a              MOV      r2,r3
006c8c  4619              MOV      r1,r3
006c8e  20f0              MOVS     r0,#0xf0
006c90  f7fffffe          BL       tree_up
;;;11274  		ret(1200);
006c94  f44f6096          MOV      r0,#0x4b0
006c98  f7fffffe          BL       ||ret||
                  |L1.27804|
;;;11275  		}
;;;11276  	}
;;;11277  
;;;11278  if(hv_vz_stat==hvsSTEP2)
006c9c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ca0  2802              CMP      r0,#2
006ca2  d10b              BNE      |L1.27836|
;;;11279  	{
;;;11280  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ca4  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006ca6  2902              CMP      r1,#2
006ca8  d101              BNE      |L1.27822|
006caa  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006cac  b911              CBNZ     r1,|L1.27828|
                  |L1.27822|
;;;11281  		{
;;;11282  		hv_vz_stat_cnt=15;
006cae  f04f010f          MOV      r1,#0xf
006cb2  8021              STRH     r1,[r4,#0]
                  |L1.27828|
;;;11283  		}
;;;11284  	hv_vz_stat_cnt--;
006cb4  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006cb6  f1a10101          SUB      r1,r1,#1
006cba  8021              STRH     r1,[r4,#0]
                  |L1.27836|
;;;11285  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;11286  	//	{
;;;11287  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;11288  	//				"  Напряжение будет  ",
;;;11289  	//				" увеличено до     @В",
;;;11290  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;11291  	//				4800,UVZ,1);
;;;11292  	//	}
;;;11293  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;11294  	//	{
;;;11295  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;11296  	//				"     НАЖАТИЕМ       ",
;;;11297  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;11298  	//				"      КНОПКИ        ",
;;;11299  	//				4800);
;;;11300  	//	} 
;;;11301  /*	if(sk_stat[1]==1)
;;;11302  		{
;;;11303  		hv_vz_stat=hvsWRK;
;;;11304  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;11305  		}*/
;;;11306  	}
;;;11307  
;;;11308  if(hv_vz_stat==hvsSTEP3)
;;;11309  	{
;;;11310  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;11311  		{
;;;11312  		hv_vz_stat_cnt=10;
006cbc  270a              MOVS     r7,#0xa
;;;11313  		}
;;;11314  	hv_vz_stat_cnt--;
;;;11315  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;11316  		{
;;;11317  		show_mess(	"     ВКЛЮЧИТЕ       ",
006cbe  f2413888          MOV      r8,#0x1388
006cc2  2803              CMP      r0,#3                 ;11308
006cc4  d123              BNE      |L1.27918|
006cc6  7828              LDRB     r0,[r5,#0]            ;11310  ; hv_vz_stat_old
006cc8  2803              CMP      r0,#3                 ;11310
006cca  d101              BNE      |L1.27856|
006ccc  8820              LDRH     r0,[r4,#0]            ;11310  ; hv_vz_stat_cnt
006cce  b900              CBNZ     r0,|L1.27858|
                  |L1.27856|
006cd0  8027              STRH     r7,[r4,#0]            ;11312
                  |L1.27858|
006cd2  8820              LDRH     r0,[r4,#0]            ;11314  ; hv_vz_stat_cnt
006cd4  f1a00001          SUB      r0,r0,#1              ;11314
006cd8  b200              SXTH     r0,r0                 ;11314
006cda  8020              STRH     r0,[r4,#0]            ;11314
006cdc  280a              CMP      r0,#0xa               ;11315
006cde  d001              BEQ      |L1.27876|
006ce0  2809              CMP      r0,#9                 ;11315
006ce2  d10a              BNE      |L1.27898|
                  |L1.27876|
006ce4  4b3b              LDR      r3,|L1.28116|
006ce6  a26b              ADR      r2,|L1.28308|
006ce8  3b48              SUBS     r3,r3,#0x48
006cea  f5a361bf          SUB      r1,r3,#0x5f8
006cee  f1010018          ADD      r0,r1,#0x18
006cf2  f8cd8000          STR      r8,[sp,#0]
006cf6  f7fffffe          BL       show_mess
                  |L1.27898|
;;;11318  					"      ТУМБЛЕР       ",
;;;11319  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11320  					"       ЗАРЯД        ",
;;;11321  					5000);
;;;11322  		}
;;;11323  	if(sk_stat[1]==1)
006cfa  7870              LDRB     r0,[r6,#1]  ; sk_stat
006cfc  2801              CMP      r0,#1
006cfe  d106              BNE      |L1.27918|
;;;11324  		{
;;;11325  		hv_vz_stat=hvsWRK;
006d00  f88a9000          STRB     r9,[r10,#0]
;;;11326  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006d04  2105              MOVS     r1,#5
006d06  f44f70b4          MOV      r0,#0x168
006d0a  f7fffffe          BL       lc640_write
                  |L1.27918|
;;;11327  		}
;;;11328  	}
;;;11329  
;;;11330  if(hv_vz_stat==hvsWRK)
006d0e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d12  2805              CMP      r0,#5
006d14  d13a              BNE      |L1.28044|
;;;11331  	{
;;;11332  	if(hv_vz_stat_old!=hv_vz_stat)
006d16  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;11333  		{
;;;11334  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006d18  4a64              LDR      r2,|L1.28332|
;;;11335  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;11336  		hv_vz_up_cnt=0L;
006d1a  4947              LDR      r1,|L1.28216|
006d1c  2805              CMP      r0,#5                 ;11332
006d1e  d00d              BEQ      |L1.27964|
006d20  4863              LDR      r0,|L1.28336|
006d22  f44f6361          MOV      r3,#0xe10             ;11334
006d26  f9b00000          LDRSH    r0,[r0,#0]            ;11334  ; VZ_HR
006d2a  fb00f303          MUL      r3,r0,r3              ;11334
006d2e  6013              STR      r3,[r2,#0]            ;11334  ; hv_vz_wrk_cnt
006d30  b910              CBNZ     r0,|L1.27960|
006d32  f44f60e1          MOV      r0,#0x708             ;11335
006d36  6010              STR      r0,[r2,#0]            ;11335  ; hv_vz_wrk_cnt
                  |L1.27960|
006d38  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27964|
;;;11337  		}
;;;11338  	hv_vz_wrk_cnt--;
006d3c  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006d3e  f1a00001          SUB      r0,r0,#1
006d42  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;11339  	hv_vz_up_cnt++;
006d44  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006d46  f1020201          ADD      r2,r2,#1
006d4a  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;11340  
;;;11341  	if(hv_vz_wrk_cnt==0)
006d4c  b940              CBNZ     r0,|L1.28000|
;;;11342  		{
;;;11343  		hv_vz_stat=hvsERR4;
006d4e  f04f0009          MOV      r0,#9
006d52  f88a0000          STRB     r0,[r10,#0]
;;;11344  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006d56  4601              MOV      r1,r0
006d58  f44f70b4          MOV      r0,#0x168
006d5c  f7fffffe          BL       lc640_write
                  |L1.28000|
;;;11345  		}
;;;11346  	if(sk_stat[0]==0)
006d60  7830              LDRB     r0,[r6,#0]  ; sk_stat
006d62  b940              CBNZ     r0,|L1.28022|
;;;11347  		{
;;;11348  		hv_vz_stat=hvsERR2;
006d64  f04f0007          MOV      r0,#7
006d68  f88a0000          STRB     r0,[r10,#0]
;;;11349  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006d6c  4601              MOV      r1,r0
006d6e  f44f70b4          MOV      r0,#0x168
006d72  f7fffffe          BL       lc640_write
                  |L1.28022|
;;;11350  		}
;;;11351  	if(sk_stat[1]==0)
006d76  7870              LDRB     r0,[r6,#1]  ; sk_stat
006d78  b940              CBNZ     r0,|L1.28044|
;;;11352  		{
;;;11353  		hv_vz_stat=hvsERR3;
006d7a  f04f0008          MOV      r0,#8
006d7e  f88a0000          STRB     r0,[r10,#0]
;;;11354  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006d82  4601              MOV      r1,r0
006d84  f44f70b4          MOV      r0,#0x168
006d88  f7fffffe          BL       lc640_write
                  |L1.28044|
;;;11355  		}
;;;11356  	}
;;;11357  
;;;11358  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006d8c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d90  2806              CMP      r0,#6
006d92  d119              BNE      |L1.28104|
;;;11359  	{
;;;11360  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006d94  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006d96  2806              CMP      r0,#6
006d98  d101              BNE      |L1.28062|
006d9a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d9c  b900              CBNZ     r0,|L1.28064|
                  |L1.28062|
;;;11361  		{
;;;11362  		hv_vz_stat_cnt=10;
006d9e  8027              STRH     r7,[r4,#0]
                  |L1.28064|
;;;11363  		}
;;;11364  	hv_vz_stat_cnt--;
006da0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006da2  f1a00001          SUB      r0,r0,#1
006da6  b200              SXTH     r0,r0
006da8  8020              STRH     r0,[r4,#0]
;;;11365  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006daa  280a              CMP      r0,#0xa
006dac  d001              BEQ      |L1.28082|
006dae  2809              CMP      r0,#9
006db0  d10a              BNE      |L1.28104|
                  |L1.28082|
;;;11366  		{
;;;11367  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006db2  4b23              LDR      r3,|L1.28224|
006db4  f8cd8000          STR      r8,[sp,#0]
006db8  f1030218          ADD      r2,r3,#0x18
006dbc  f1020118          ADD      r1,r2,#0x18
006dc0  f2a15084          SUB      r0,r1,#0x584
006dc4  f7fffffe          BL       show_mess
                  |L1.28104|
;;;11368  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;11369  					"      ВКЛЮЧЕН       ",
;;;11370  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;11371  					5000);
;;;11372  		}
;;;11373  	}
;;;11374  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006dc8  e074              B        |L1.28340|
006dca  0000              DCW      0x0000
                  |L1.28108|
                          DCD      speedChrgBlckStat
                  |L1.28112|
                          DCD      ||area_number.25||
                  |L1.28116|
                          DCD      ||.text||+0x1d5c
                  |L1.28120|
006dd8  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006ddc  e7e0e1eb
006de0  eeeae8f0
006de4  eee2e0ed
006de8  21      
006de9  20202000          DCB      "   ",0
006ded  00                DCB      0
006dee  00                DCB      0
006def  00                DCB      0
                  |L1.28144|
006df0  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006df4  202020e7
006df8  e0f0ffe4
006dfc  20202020
006e00  20202020
006e04  00      
006e05  00                DCB      0
006e06  00                DCB      0
006e07  00                DCB      0
                  |L1.28168|
006e08  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006e0c  20d3f1ea
006e10  eef0e5ed
006e14  edfbe920
006e18  20202020
006e1c  00      
006e1d  00                DCB      0
006e1e  00                DCB      0
006e1f  00                DCB      0
                  |L1.28192|
                          DCD      sp_ch_stat
                  |L1.28196|
                          DCD      SP_CH_VENT_BLOK
                  |L1.28200|
                          DCD      sk_stat
                  |L1.28204|
                          DCD      sp_ch_stat_old
                  |L1.28208|
                          DCD      sp_ch_stat_cnt
                  |L1.28212|
                          DCD      sp_ch_wrk_cnt
                  |L1.28216|
                          DCD      hv_vz_up_cnt
                  |L1.28220|
                          DCD      speedChrgTimeInHour
                  |L1.28224|
                          DCD      ||.text||+0x1c24
                  |L1.28228|
006e44  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006e48  caced0c5
006e4c  cdcddbc9
006e50  20c7c0  
006e53  d0dfc420          DCB      208,223,196,"  ",0
006e57  2000    
006e59  00                DCB      0
006e5a  00                DCB      0
006e5b  00                DCB      0
                  |L1.28252|
                          DCD      ||.text||+0x1688
                  |L1.28256|
                          DCD      speedChrgAvtEn
                  |L1.28260|
                          DCD      speedChargeStartCnt
                  |L1.28264|
                          DCD      speedChrgBlckSrc
                  |L1.28268|
                          DCD      load_U
                  |L1.28272|
                          DCD      u_necc
                  |L1.28276|
                          DCD      speedChrgDU
                  |L1.28280|
                          DCD      Ib_ips_termokompensat
                  |L1.28284|
                          DCD      IZMAX
                  |L1.28288|
                          DCD      speedChrgBlckLog
                  |L1.28292|
                          DCD      ||.bss||+0x40c
                  |L1.28296|
                          DCD      hv_vz_stat
                  |L1.28300|
                          DCD      hv_vz_stat_old
                  |L1.28304|
                          DCD      hv_vz_stat_cnt
                  |L1.28308|
006e94  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006e98  dbd0c0c2
006e9c  cdc8c2c0
006ea0  ded9c8c9
006ea4  20202020          DCB      "    ",0
006ea8  00      
006ea9  00                DCB      0
006eaa  00                DCB      0
006eab  00                DCB      0
                  |L1.28332|
                          DCD      hv_vz_wrk_cnt
                  |L1.28336|
                          DCD      VZ_HR
                  |L1.28340|
006eb4  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006eb8  2807              CMP      r0,#7
006eba  d123              BNE      |L1.28420|
;;;11375  	{
;;;11376  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ebc  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006ebe  2807              CMP      r0,#7
006ec0  d101              BNE      |L1.28358|
006ec2  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ec4  b900              CBNZ     r0,|L1.28360|
                  |L1.28358|
;;;11377  		{
;;;11378  		hv_vz_stat_cnt=10;
006ec6  8027              STRH     r7,[r4,#0]
                  |L1.28360|
;;;11379  		}
;;;11380  	hv_vz_stat_cnt--;
006ec8  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006eca  f1a00001          SUB      r0,r0,#1
006ece  b200              SXTH     r0,r0
006ed0  8020              STRH     r0,[r4,#0]
;;;11381  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006ed2  280a              CMP      r0,#0xa
006ed4  d001              BEQ      |L1.28378|
006ed6  2809              CMP      r0,#9
006ed8  d10a              BNE      |L1.28400|
                  |L1.28378|
;;;11382  		{
;;;11383  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006eda  4bff              LDR      r3,|L1.29400|
006edc  f8cd8000          STR      r8,[sp,#0]
006ee0  f1030218          ADD      r2,r3,#0x18
006ee4  f1020118          ADD      r1,r2,#0x18
006ee8  f1010018          ADD      r0,r1,#0x18
006eec  f7fffffe          BL       show_mess
                  |L1.28400|
;;;11384  					"    ЗАБЛОКИРОВАН    ",
;;;11385  					"     НЕИСПРАВНА     ",
;;;11386  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;11387  					5000);
;;;11388  		}
;;;11389  	if(sk_stat[0]==1)
006ef0  7830              LDRB     r0,[r6,#0]  ; sk_stat
006ef2  2801              CMP      r0,#1
006ef4  d106              BNE      |L1.28420|
;;;11390  		{
;;;11391  		hv_vz_stat=hvsWRK;
006ef6  f88a9000          STRB     r9,[r10,#0]
;;;11392  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006efa  2105              MOVS     r1,#5
006efc  f44f70b4          MOV      r0,#0x168
006f00  f7fffffe          BL       lc640_write
                  |L1.28420|
;;;11393  		}
;;;11394  	}
;;;11395  
;;;11396  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006f04  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006f08  2808              CMP      r0,#8
006f0a  d123              BNE      |L1.28500|
;;;11397  	{
;;;11398  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006f0c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006f0e  2808              CMP      r0,#8
006f10  d101              BNE      |L1.28438|
006f12  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006f14  b900              CBNZ     r0,|L1.28440|
                  |L1.28438|
;;;11399  		{
;;;11400  		hv_vz_stat_cnt=10;
006f16  8027              STRH     r7,[r4,#0]
                  |L1.28440|
;;;11401  		}
;;;11402  	hv_vz_stat_cnt--;
006f18  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006f1a  f1a00001          SUB      r0,r0,#1
006f1e  b200              SXTH     r0,r0
006f20  8020              STRH     r0,[r4,#0]
;;;11403  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006f22  280a              CMP      r0,#0xa
006f24  d001              BEQ      |L1.28458|
006f26  2809              CMP      r0,#9
006f28  d10a              BNE      |L1.28480|
                  |L1.28458|
;;;11404  		{
;;;11405  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006f2a  4bec              LDR      r3,|L1.29404|
006f2c  f8cd8000          STR      r8,[sp,#0]
006f30  f2a35254          SUB      r2,r3,#0x554
006f34  f1020118          ADD      r1,r2,#0x18
006f38  f2a150e4          SUB      r0,r1,#0x5e4
006f3c  f7fffffe          BL       show_mess
                  |L1.28480|
;;;11406  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;11407  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;11408  					"    ТУМБЛЕРА!!!     ",
;;;11409  					5000);
;;;11410  		}
;;;11411  	if(sk_stat[1]==1)
006f40  7870              LDRB     r0,[r6,#1]  ; sk_stat
006f42  2801              CMP      r0,#1
006f44  d106              BNE      |L1.28500|
;;;11412  		{
;;;11413  		hv_vz_stat=hvsWRK;
006f46  f88a9000          STRB     r9,[r10,#0]
;;;11414  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006f4a  2105              MOVS     r1,#5
006f4c  f44f70b4          MOV      r0,#0x168
006f50  f7fffffe          BL       lc640_write
                  |L1.28500|
;;;11415  		}
;;;11416  	}
;;;11417  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006f54  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006f58  2809              CMP      r0,#9
006f5a  d124              BNE      |L1.28582|
;;;11418  	{
;;;11419  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006f5c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006f5e  2809              CMP      r0,#9
006f60  d101              BNE      |L1.28518|
006f62  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006f64  b900              CBNZ     r0,|L1.28520|
                  |L1.28518|
;;;11420  		{
;;;11421  		hv_vz_stat_cnt=10;
006f66  8027              STRH     r7,[r4,#0]
                  |L1.28520|
;;;11422  		}
;;;11423  	hv_vz_stat_cnt--;
006f68  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006f6a  f1a00001          SUB      r0,r0,#1
006f6e  b200              SXTH     r0,r0
006f70  8020              STRH     r0,[r4,#0]
;;;11424  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006f72  280a              CMP      r0,#0xa
006f74  d001              BEQ      |L1.28538|
006f76  2809              CMP      r0,#9
006f78  d10a              BNE      |L1.28560|
                  |L1.28538|
;;;11425  		{
;;;11426  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006f7a  4bd9              LDR      r3,|L1.29408|
006f7c  f2af02ec          ADR      r2,|L1.28308|
006f80  f5a361bf          SUB      r1,r3,#0x5f8
006f84  f50160c5          ADD      r0,r1,#0x628
006f88  f8cd8000          STR      r8,[sp,#0]
006f8c  f7fffffe          BL       show_mess
                  |L1.28560|
;;;11427  					"      ТУМБЛЕР       ",
;;;11428  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;11429  					"       ЗАРЯД        ",
;;;11430  					5000);
;;;11431  		}
;;;11432  	if(sk_stat[1]==0)
006f90  7870              LDRB     r0,[r6,#1]  ; sk_stat
006f92  b940              CBNZ     r0,|L1.28582|
;;;11433  		{
;;;11434  		hv_vz_stat=hvsOFF;
006f94  f88ab000          STRB     r11,[r10,#0]
;;;11435  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006f98  2100              MOVS     r1,#0
006f9a  f44f70b4          MOV      r0,#0x168
006f9e  f7fffffe          BL       lc640_write
;;;11436  		vz_stop();
006fa2  f7fffffe          BL       vz_stop
                  |L1.28582|
;;;11437  
;;;11438  		}
;;;11439  	}
;;;11440  hv_vz_stat_old=hv_vz_stat;
006fa6  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006faa  7028              STRB     r0,[r5,#0]
;;;11441  /*
;;;11442  if(speedChIsOn)
;;;11443  	{
;;;11444  	speedChTimeCnt++;
;;;11445  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;11446  		{
;;;11447  		speedChIsOn=0;
;;;11448  		}
;;;11449  	if(speedChrgBlckStat)
;;;11450  		{
;;;11451  		speedChIsOn=0;
;;;11452  		speedChTimeCnt=0;
;;;11453  		}
;;;11454  	}
;;;11455  
;;;11456  
;;;11457  
;;;11458  if(speedChrgAvtEn)
;;;11459  	{
;;;11460  	if(!speedChIsOn)
;;;11461  		{
;;;11462  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;11463  			{
;;;11464  			speedChIsOn=1;
;;;11465  			}
;;;11466  		}
;;;11467  	}
;;;11468  
;;;11469  
;;;11470  
;;;11471  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;11472  else
;;;11473  	{
;;;11474  	speedChrgBlckStat=0;
;;;11475  	if(speedChrgBlckSrc==1)
;;;11476  		{
;;;11477  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;11478  		}
;;;11479  	else if(speedChrgBlckSrc==2)
;;;11480  		{
;;;11481  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;11482  		}
;;;11483  	}
;;;11484  
;;;11485  
;;;11486  if(speedChrgBlckStat==1)
;;;11487  	{
;;;11488  
;;;11489  	//speedChargeStartStop();
;;;11490  
;;;11491  	speedChrgShowCnt++;
;;;11492  	if(speedChrgShowCnt>=30)	
;;;11493  		{
;;;11494  		speedChrgShowCnt=0;
;;;11495  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;11496  					"       ЗАРЯД        ",
;;;11497  					"     ЗАПРЕЩЕН!!!    ",
;;;11498  					"                    ",
;;;11499  					5000);
;;;11500  		}
;;;11501  	}
;;;11502  else speedChrgShowCnt=0;
;;;11503  
;;;11504  */
;;;11505  }
006fac  e5e7              B        |L1.27518|
;;;11506  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;11523  //-----------------------------------------------
;;;11524  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006fae  e92d41f0          PUSH     {r4-r8,lr}
;;;11525  {
;;;11526  
;;;11527  numOfForvardBps_old=numOfForvardBps;
006fb2  4ccc              LDR      r4,|L1.29412|
006fb4  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006fb6  7060              STRB     r0,[r4,#1]
;;;11528  
;;;11529  numOfForvardBps=0;
006fb8  f04f0500          MOV      r5,#0
006fbc  f8045928          STRB     r5,[r4],#-0x28
;;;11530  
;;;11531  //FORVARDBPSCHHOUR=10;
;;;11532  
;;;11533  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006fc0  4ec9              LDR      r6,|L1.29416|
006fc2  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006fc6  2800              CMP      r0,#0
006fc8  dd02              BLE      |L1.28624|
006fca  f5b07ffa          CMP      r0,#0x1f4
006fce  dd02              BLE      |L1.28630|
                  |L1.28624|
;;;11534  	{
;;;11535  	FORVARDBPSCHHOUR=0;
006fd0  8035              STRH     r5,[r6,#0]
                  |L1.28626|
;;;11536  	return;
;;;11537  	}
;;;11538  
;;;11539  numOfForvardBps_minCnt++;
;;;11540  
;;;11541  
;;;11542  if(numOfForvardBps_minCnt>=60)
;;;11543  	{
;;;11544  	numOfForvardBps_minCnt=0;
;;;11545  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;11546  	numOfForvardBps_hourCnt++;
;;;11547  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;11548  		{
;;;11549  		numOfForvardBps_hourCnt=0;
;;;11550  		}
;;;11551  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;11552  	}
;;;11553  
;;;11554  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;11555  
;;;11556  //if(numOfForvardBps)
;;;11557  //numOfForvardBps_old=numOfForvardBps; 
;;;11558  }
006fd2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28630|
006fd6  f894002a          LDRB     r0,[r4,#0x2a]         ;11539  ; numOfForvardBps_minCnt
006fda  f1000001          ADD      r0,r0,#1              ;11539
006fde  b2c0              UXTB     r0,r0                 ;11539
006fe0  f884002a          STRB     r0,[r4,#0x2a]         ;11539
006fe4  283c              CMP      r0,#0x3c              ;11542
006fe6  d31b              BCC      |L1.28704|
006fe8  f884502a          STRB     r5,[r4,#0x2a]         ;11544
006fec  f44f7794          MOV      r7,#0x128             ;11545
006ff0  4638              MOV      r0,r7                 ;11545
006ff2  f7fffffe          BL       lc640_read_int
006ff6  f1000001          ADD      r0,r0,#1              ;11546
006ffa  b200              SXTH     r0,r0                 ;11546
006ffc  f8a40074          STRH     r0,[r4,#0x74]         ;11546
007000  4aba              LDR      r2,|L1.29420|
007002  f9b61000          LDRSH    r1,[r6,#0]            ;11547  ; FORVARDBPSCHHOUR
007006  f9b22000          LDRSH    r2,[r2,#0]            ;11547  ; NUMIST
00700a  fb01f102          MUL      r1,r1,r2              ;11547
00700e  4281              CMP      r1,r0                 ;11547
007010  dc01              BGT      |L1.28694|
007012  f8a45074          STRH     r5,[r4,#0x74]         ;11549
                  |L1.28694|
007016  f9b41074          LDRSH    r1,[r4,#0x74]         ;11551  ; numOfForvardBps_hourCnt
00701a  4638              MOV      r0,r7                 ;11551
00701c  f7fffffe          BL       lc640_write_int
                  |L1.28704|
007020  f9b40074          LDRSH    r0,[r4,#0x74]         ;11554  ; numOfForvardBps_hourCnt
007024  f9b61000          LDRSH    r1,[r6,#0]            ;11554  ; FORVARDBPSCHHOUR
007028  fb90f0f1          SDIV     r0,r0,r1              ;11554
00702c  f8840028          STRB     r0,[r4,#0x28]         ;11554
007030  e7cf              B        |L1.28626|
;;;11559  
                          ENDP

                  numOfForvardBps_init PROC
;;;11560  //-----------------------------------------------
;;;11561  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
007032  b510              PUSH     {r4,lr}
;;;11562  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;11563  lc640_write_int(EE_FORVBPSHOURCNT,0);
007034  2100              MOVS     r1,#0
007036  f44f7094          MOV      r0,#0x128
00703a  f7fffffe          BL       lc640_write_int
;;;11564  numOfForvardBps_minCnt=58;
00703e  49a9              LDR      r1,|L1.29412|
007040  f04f003a          MOV      r0,#0x3a
007044  f1a10128          SUB      r1,r1,#0x28
007048  f881002a          STRB     r0,[r1,#0x2a]
;;;11565  }
00704c  bd10              POP      {r4,pc}
;;;11566  
                          ENDP

                  outVoltContrHndl PROC
;;;11567  //-----------------------------------------------
;;;11568  void outVoltContrHndl(void)
00704e  b570              PUSH     {r4-r6,lr}
;;;11569  { 
;;;11570  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
007050  4ca7              LDR      r4,|L1.29424|
007052  48a8              LDR      r0,|L1.29428|
;;;11571  	{
;;;11572  	outVoltContrHndlCnt_=0;
;;;11573  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
007054  4aa8              LDR      r2,|L1.29432|
007056  f9b41000          LDRSH    r1,[r4,#0]            ;11570  ; load_U
00705a  f9b06000          LDRSH    r6,[r0,#0]            ;11570  ; U_OUT_KONTR_MAX
00705e  2500              MOVS     r5,#0                 ;11572
007060  f9b20000          LDRSH    r0,[r2,#0]
007064  4ba5              LDR      r3,|L1.29436|
007066  42b1              CMP      r1,r6                 ;11570
007068  dc04              BGT      |L1.28788|
00706a  4ea5              LDR      r6,|L1.29440|
00706c  f9b66000          LDRSH    r6,[r6,#0]            ;11570  ; U_OUT_KONTR_MIN
007070  42b1              CMP      r1,r6                 ;11570
007072  da0f              BGE      |L1.28820|
                  |L1.28788|
007074  801d              STRH     r5,[r3,#0]            ;11572
007076  49a3              LDR      r1,|L1.29444|
007078  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
00707c  4288              CMP      r0,r1
00707e  da1b              BGE      |L1.28856|
;;;11574  		{
;;;11575  		outVoltContrHndlCnt++;
007080  f1000001          ADD      r0,r0,#1
007084  b200              SXTH     r0,r0
007086  8010              STRH     r0,[r2,#0]
;;;11576  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
007088  4288              CMP      r0,r1
00708a  d115              BNE      |L1.28856|
;;;11577  			{
;;;11578  			avar_uout_hndl(1);
00708c  2001              MOVS     r0,#1
00708e  f7fffffe          BL       avar_uout_hndl
007092  e011              B        |L1.28856|
                  |L1.28820|
;;;11579  			}
;;;11580  		}
;;;11581  	}
;;;11582  else
;;;11583  	{
;;;11584  	if(outVoltContrHndlCnt)
007094  b180              CBZ      r0,|L1.28856|
;;;11585  		{
;;;11586  		if(outVoltContrHndlCnt_<5)
007096  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
00709a  2805              CMP      r0,#5
00709c  da0c              BGE      |L1.28856|
;;;11587  			{
;;;11588  			outVoltContrHndlCnt_++;
00709e  f1000001          ADD      r0,r0,#1
0070a2  b200              SXTH     r0,r0
0070a4  8018              STRH     r0,[r3,#0]
;;;11589  			if(outVoltContrHndlCnt_>=5)
0070a6  2805              CMP      r0,#5
0070a8  db06              BLT      |L1.28856|
;;;11590  				{
;;;11591  				outVoltContrHndlCnt=0;
0070aa  8015              STRH     r5,[r2,#0]
;;;11592  				if(uout_av)avar_uout_hndl(0);
0070ac  4896              LDR      r0,|L1.29448|
0070ae  7800              LDRB     r0,[r0,#0]  ; uout_av
0070b0  b110              CBZ      r0,|L1.28856|
0070b2  2000              MOVS     r0,#0
0070b4  f7fffffe          BL       avar_uout_hndl
                  |L1.28856|
;;;11593  				}
;;;11594  			}
;;;11595  		}
;;;11596  	}
;;;11597  
;;;11598  if (load_U<(USIGN*10)) 
0070b8  4894              LDR      r0,|L1.29452|
0070ba  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
0070be  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
0070c2  eb000080          ADD      r0,r0,r0,LSL #2
0070c6  ebb10f40          CMP      r1,r0,LSL #1
0070ca  da0b              BGE      |L1.28900|
;;;11599  	{
;;;11600  	if(!bSILENT)
0070cc  4890              LDR      r0,|L1.29456|
0070ce  6800              LDR      r0,[r0,#0]  ; bSILENT
0070d0  2800              CMP      r0,#0
0070d2  d107              BNE      |L1.28900|
;;;11601  		{
;;;11602  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
0070d4  e8bd4070          POP      {r4-r6,lr}
0070d8  2314              MOVS     r3,#0x14
0070da  2201              MOVS     r2,#1
0070dc  2172              MOVS     r1,#0x72
0070de  20d2              MOVS     r0,#0xd2
0070e0  f7ffbffe          B.W      mess_send
                  |L1.28900|
;;;11603  		}
;;;11604  
;;;11605  	//bU_BAT2REL_AV_BAT=1;
;;;11606  	}
;;;11607  
;;;11608  
;;;11609  }
0070e4  bd70              POP      {r4-r6,pc}
;;;11610  
                          ENDP

                  vent_resurs_hndl PROC
;;;11611  //-----------------------------------------------
;;;11612  void vent_resurs_hndl(void)
0070e6  e92d47f0          PUSH     {r4-r10,lr}
;;;11613  {
;;;11614  char i;
;;;11615  char crc_in,crc_eval;
;;;11616  
;;;11617  for(i=0;i<NUMIST;i++)
0070ea  f04f0200          MOV      r2,#0
;;;11618  	{
;;;11619  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11620  		{
;;;11621  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11622  		}
;;;11623  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11624  		{
;;;11625  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11626  		}
;;;11627  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11628  		{
;;;11629  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11630  		}
;;;11631  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11632  		{
;;;11633  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11634  		}
;;;11635  	crc_in=0;
;;;11636  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11637  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11638  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11639  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11640  
;;;11641  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11642  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11643  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11644  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11645  
;;;11646  	if(crc_eval==crc_in)
;;;11647  		{
;;;11648  		unsigned short temp_US;
;;;11649  		temp_US=0;
;;;11650  
;;;11651  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11652  		temp_US<<=4;
;;;11653  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11654  		temp_US<<=4;
;;;11655  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11656  		temp_US<<=4;
;;;11657  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11658  
;;;11659  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11660  		}
;;;11661  
;;;11662  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
0070ee  4889              LDR      r0,|L1.29460|
0070f0  f8dfc224          LDR      r12,|L1.29464|
0070f4  f9b06000          LDRSH    r6,[r0,#0]
0070f8  487c              LDR      r0,|L1.29420|
0070fa  f9b07000          LDRSH    r7,[r0,#0]            ;11617
0070fe  e06e              B        |L1.29150|
                  |L1.28928|
007100  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11619
007104  eb001002          ADD      r0,r0,r2,LSL #4       ;11619
007108  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11619
00710c  7b41              LDRB     r1,[r0,#0xd]          ;11619
00710e  098b              LSRS     r3,r1,#6              ;11619
007110  d006              BEQ      |L1.28960|
007112  2301              MOVS     r3,#1                 ;11623
007114  ebb31f91          CMP      r3,r1,LSR #6          ;11623
007118  d105              BNE      |L1.28966|
00711a  f8801059          STRB     r1,[r0,#0x59]         ;11625
00711e  e00f              B        |L1.28992|
                  |L1.28960|
007120  f8801058          STRB     r1,[r0,#0x58]         ;11621
007124  e00c              B        |L1.28992|
                  |L1.28966|
007126  2302              MOVS     r3,#2                 ;11627
007128  ebb31f91          CMP      r3,r1,LSR #6          ;11627
00712c  d102              BNE      |L1.28980|
00712e  f880105a          STRB     r1,[r0,#0x5a]         ;11629
007132  e005              B        |L1.28992|
                  |L1.28980|
007134  2303              MOVS     r3,#3                 ;11631
007136  ebb31f91          CMP      r3,r1,LSR #6          ;11631
00713a  d101              BNE      |L1.28992|
00713c  f880105b          STRB     r1,[r0,#0x5b]         ;11633
                  |L1.28992|
007140  f8101f58          LDRB     r1,[r0,#0x58]!        ;11636
007144  f3c11401          UBFX     r4,r1,#4,#2           ;11636
007148  7843              LDRB     r3,[r0,#1]            ;11637
00714a  f0030530          AND      r5,r3,#0x30           ;11637
00714e  ea440495          ORR      r4,r4,r5,LSR #2       ;11637
007152  f8909002          LDRB     r9,[r0,#2]            ;11638
007156  f0090830          AND      r8,r9,#0x30           ;11638
00715a  ea480804          ORR      r8,r8,r4              ;11638
00715e  78c5              LDRB     r5,[r0,#3]            ;11639
007160  f1a00058          SUB      r0,r0,#0x58           ;11639
007164  f0050430          AND      r4,r5,#0x30           ;11639
007168  ea480884          ORR      r8,r8,r4,LSL #2       ;11639
00716c  f001010f          AND      r1,r1,#0xf            ;11641
007170  f003040f          AND      r4,r3,#0xf            ;11642
007174  ea840a01          EOR      r10,r4,r1             ;11642
007178  f009030f          AND      r3,r9,#0xf            ;11643
00717c  ea83090a          EOR      r9,r3,r10             ;11643
007180  f005050f          AND      r5,r5,#0xf            ;11644
007184  ea850909          EOR      r9,r5,r9              ;11644
007188  45c1              CMP      r9,r8                 ;11646
00718a  d113              BNE      |L1.29108|
00718c  ea4f1505          LSL      r5,r5,#4              ;11652
007190  ea430305          ORR      r3,r3,r5              ;11653
007194  ea4f1303          LSL      r3,r3,#4              ;11654
007198  ea440403          ORR      r4,r4,r3              ;11655
00719c  ea4f5304          LSL      r3,r4,#20             ;11656
0071a0  ea4f4313          LSR      r3,r3,#16             ;11656
0071a4  ea410103          ORR      r1,r1,r3              ;11657
0071a8  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11659
0071ac  428b              CMP      r3,r1                 ;11659
0071ae  d001              BEQ      |L1.29108|
0071b0  f8a0105c          STRH     r1,[r0,#0x5c]         ;11659
                  |L1.29108|
0071b4  f8b0105c          LDRH     r1,[r0,#0x5c]
0071b8  eb060386          ADD      r3,r6,r6,LSL #2
0071bc  ebb10f43          CMP      r1,r3,LSL #1
0071c0  dd06              BLE      |L1.29136|
0071c2  2e00              CMP      r6,#0
0071c4  dd04              BLE      |L1.29136|
;;;11663  		{
;;;11664  		bps[i]._av|=(1<<4);
0071c6  7841              LDRB     r1,[r0,#1]
0071c8  f0410110          ORR      r1,r1,#0x10
0071cc  7041              STRB     r1,[r0,#1]
0071ce  e003              B        |L1.29144|
                  |L1.29136|
;;;11665  		}
;;;11666  	else bps[i]._av&=~(1<<4);
0071d0  7841              LDRB     r1,[r0,#1]
0071d2  f0210110          BIC      r1,r1,#0x10
0071d6  7041              STRB     r1,[r0,#1]
                  |L1.29144|
0071d8  f1020201          ADD      r2,r2,#1              ;11617
0071dc  b2d2              UXTB     r2,r2                 ;11617
                  |L1.29150|
0071de  42ba              CMP      r2,r7                 ;11617
0071e0  db8e              BLT      |L1.28928|
;;;11667  	}
;;;11668  }
0071e2  e8bd87f0          POP      {r4-r10,pc}
;;;11669  
                          ENDP

                  vent_hndl PROC
;;;11671  //-----------------------------------------------
;;;11672  void vent_hndl(void)
0071e6  e92d4ff0          PUSH     {r4-r11,lr}
;;;11673  {
0071ea  b087              SUB      sp,sp,#0x1c
;;;11674  if(RELEVENTSIGN==rvsAKB)
;;;11675  	{
;;;11676  	if(vent_stat==0)
0071ec  4c3d              LDR      r4,|L1.29412|
0071ee  484b              LDR      r0,|L1.29468|
;;;11677  		{
;;;11678  		if	(
;;;11679  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
0071f0  494b              LDR      r1,|L1.29472|
;;;11680  			||
;;;11681  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11682  			)
;;;11683  			{
;;;11684  			vent_stat=1;
;;;11685  			}
;;;11686  		}
;;;11687  	else if(vent_stat==1)
;;;11688  		{
;;;11689  		if	(
;;;11690  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
0071f2  4a4c              LDR      r2,|L1.29476|
0071f4  3c28              SUBS     r4,r4,#0x28           ;11676
0071f6  7800              LDRB     r0,[r0,#0]            ;11674  ; RELEVENTSIGN
0071f8  f9943000          LDRSB    r3,[r4,#0]            ;11676
0071fc  f9b11000          LDRSH    r1,[r1,#0]            ;11679
007200  f9b22000          LDRSH    r2,[r2,#0]
007204  b148              CBZ      r0,|L1.29210|
;;;11691  			&&
;;;11692  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11693  			)
;;;11694  			{
;;;11695  			vent_stat=0;
;;;11696  			}
;;;11697  		}
;;;11698  	}
;;;11699  else if(RELEVENTSIGN==rvsBPS)
007206  2802              CMP      r0,#2
007208  d03c              BEQ      |L1.29316|
;;;11700  	{
;;;11701  /*	if	(
;;;11702  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11703  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11704  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11705  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11706  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11707  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11708  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11709  		)
;;;11710  		{
;;;11711  		vent_stat=1;
;;;11712  		}
;;;11713  	else vent_stat=0;
;;;11714  	*/
;;;11715  
;;;11716  	if	(
;;;11717  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11718  		||
;;;11719  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11720  		||
;;;11721  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11722  		||
;;;11723  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11724  		||
;;;11725  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11726  		||
;;;11727  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11728  		||
;;;11729  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11730  		||
;;;11731  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11732  		)
;;;11733  		{
;;;11734  		vent_stat=1;
;;;11735  		}
;;;11736  	else if(vent_stat==1)
;;;11737  		{
;;;11738  		if	(
;;;11739  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11740  			&&
;;;11741  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11742  			&&
;;;11743  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11744  			&&
;;;11745  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11746  			&&
;;;11747  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11748  			&&
;;;11749  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11750  			&&
;;;11751  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11752  			&&
;;;11753  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11754  			)
;;;11755  			{
;;;11756  			vent_stat=0;
;;;11757  			}
;;;11758  		}
;;;11759  	}
;;;11760  else if(RELEVENTSIGN==rvsEXT)
00720a  2801              CMP      r0,#1
00720c  d063              BEQ      |L1.29398|
;;;11761  	{
;;;11762  	if	(
;;;11763  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11764  		||
;;;11765  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11766  		||
;;;11767  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11768  		)
;;;11769  		{
;;;11770  		vent_stat=1;
;;;11771  		}
;;;11772  	else if(vent_stat==1)
;;;11773  		{
;;;11774  		if	(
;;;11775  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11776  			&&
;;;11777  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11778  			&&
;;;11779  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11780  			)
;;;11781  			{
;;;11782  			vent_stat=0;
;;;11783  			}
;;;11784  		}
;;;11785  	}
;;;11786  else vent_stat=1;
00720e  f04f0001          MOV      r0,#1
007212  7020              STRB     r0,[r4,#0]
                  |L1.29204|
;;;11787  //vent_stat=44;
;;;11788  }
007214  b007              ADD      sp,sp,#0x1c
007216  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.29210|
00721a  4f43              LDR      r7,|L1.29480|
00721c  f8df810c          LDR      r8,|L1.29484|
007220  f9b7000c          LDRSH    r0,[r7,#0xc]          ;11679
007224  7bbd              LDRB     r5,[r7,#0xe]          ;11679
007226  f9b7605c          LDRSH    r6,[r7,#0x5c]         ;11681
00722a  f898c000          LDRB     r12,[r8,#0]           ;11678
00722e  f897705e          LDRB     r7,[r7,#0x5e]         ;11681
007232  f8988001          LDRB     r8,[r8,#1]            ;11681
007236  b12b              CBZ      r3,|L1.29252|
007238  2b01              CMP      r3,#1                 ;11687
00723a  d1eb              BNE      |L1.29204|
00723c  f1bc0f55          CMP      r12,#0x55             ;11689
007240  d115              BNE      |L1.29294|
007242  e010              B        |L1.29286|
                  |L1.29252|
007244  f1bc0f55          CMP      r12,#0x55             ;11678
007248  d102              BNE      |L1.29264|
00724a  4288              CMP      r0,r1                 ;11679
00724c  dc07              BGT      |L1.29278|
00724e  b935              CBNZ     r5,|L1.29278|
                  |L1.29264|
007250  f1b80f55          CMP      r8,#0x55              ;11681
007254  d1de              BNE      |L1.29204|
007256  428e              CMP      r6,r1                 ;11681
007258  dc01              BGT      |L1.29278|
00725a  2f00              CMP      r7,#0                 ;11681
00725c  d0da              BEQ      |L1.29204|
                  |L1.29278|
00725e  f04f0001          MOV      r0,#1                 ;11684
007262  7020              STRB     r0,[r4,#0]            ;11684
007264  e7d6              B        |L1.29204|
                  |L1.29286|
007266  4290              CMP      r0,r2                 ;11690
007268  dad4              BGE      |L1.29204|
00726a  2d00              CMP      r5,#0                 ;11690
00726c  d1d2              BNE      |L1.29204|
                  |L1.29294|
00726e  f1b80f55          CMP      r8,#0x55              ;11692
007272  d103              BNE      |L1.29308|
007274  4296              CMP      r6,r2                 ;11692
007276  dacd              BGE      |L1.29204|
007278  2f00              CMP      r7,#0                 ;11692
00727a  d1cb              BNE      |L1.29204|
                  |L1.29308|
00727c  f04f0000          MOV      r0,#0                 ;11695
007280  7020              STRB     r0,[r4,#0]            ;11695
007282  e7c7              B        |L1.29204|
                  |L1.29316|
007284  4e24              LDR      r6,|L1.29464|
007286  4819              LDR      r0,|L1.29420|
007288  6ab5              LDR      r5,[r6,#0x28]         ;11717
00728a  f9b00000          LDRSH    r0,[r0,#0]            ;11716  ; NUMIST
00728e  78f6              LDRB     r6,[r6,#3]            ;11717
007290  b118              CBZ      r0,|L1.29338|
007292  428d              CMP      r5,r1                 ;11717
007294  dc7e              BGT      |L1.29588|
007296  2e1e              CMP      r6,#0x1e              ;11717
007298  d27c              BCS      |L1.29588|
                  |L1.29338|
00729a  f8dfc07c          LDR      r12,|L1.29464|
00729e  2801              CMP      r0,#1                 ;11719
0072a0  f8dc708c          LDR      r7,[r12,#0x8c]        ;11719
0072a4  f89cc067          LDRB     r12,[r12,#0x67]       ;11719
0072a8  f8cdc018          STR      r12,[sp,#0x18]        ;11719
0072ac  dd06              BLE      |L1.29372|
0072ae  428f              CMP      r7,r1                 ;11719
0072b0  dc70              BGT      |L1.29588|
0072b2  f8ddc018          LDR      r12,[sp,#0x18]        ;11719
0072b6  f1bc0f1e          CMP      r12,#0x1e             ;11719
0072ba  d26b              BCS      |L1.29588|
                  |L1.29372|
0072bc  f8dfc058          LDR      r12,|L1.29464|
0072c0  2802              CMP      r0,#2                 ;11721
0072c2  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11721
0072c6  f8cd8014          STR      r8,[sp,#0x14]         ;11721
0072ca  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11721
0072ce  f8cdc010          STR      r12,[sp,#0x10]        ;11721
0072d2  dd36              BLE      |L1.29506|
0072d4  e02c              B        |L1.29488|
                  |L1.29398|
0072d6  e0c9              B        |L1.29804|
                  |L1.29400|
                          DCD      ||.text||+0x1688
                  |L1.29404|
                          DCD      ||.text||+0x21f0
                  |L1.29408|
                          DCD      ||.text||+0x1d14
                  |L1.29412|
                          DCD      ||area_number.25||+0x28
                  |L1.29416|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29420|
                          DCD      NUMIST
                  |L1.29424|
                          DCD      load_U
                  |L1.29428|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29432|
                          DCD      outVoltContrHndlCnt
                  |L1.29436|
                          DCD      outVoltContrHndlCnt_
                  |L1.29440|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29444|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29448|
                          DCD      uout_av
                  |L1.29452|
                          DCD      USIGN
                  |L1.29456|
                          DCD      bSILENT
                  |L1.29460|
                          DCD      TVENTMAX
                  |L1.29464|
                          DCD      bps
                  |L1.29468|
                          DCD      RELEVENTSIGN
                  |L1.29472|
                          DCD      TVENTON
                  |L1.29476|
                          DCD      TVENTOFF
                  |L1.29480|
                          DCD      bat
                  |L1.29484|
                          DCD      BAT_IS_ON
                  |L1.29488|
007330  f8ddc014          LDR      r12,[sp,#0x14]        ;11721
007334  458c              CMP      r12,r1                ;11721
007336  dc57              BGT      |L1.29672|
007338  f8ddc010          LDR      r12,[sp,#0x10]        ;11721
00733c  f1bc0f1e          CMP      r12,#0x1e             ;11721
007340  d252              BCS      |L1.29672|
                  |L1.29506|
007342  f8dfc1b4          LDR      r12,|L1.29944|
007346  2803              CMP      r0,#3                 ;11723
007348  f8dc8154          LDR      r8,[r12,#0x154]       ;11723
00734c  f8cd800c          STR      r8,[sp,#0xc]          ;11723
007350  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11723
007354  f8cdc008          STR      r12,[sp,#8]           ;11723
007358  dd08              BLE      |L1.29548|
00735a  f8ddc00c          LDR      r12,[sp,#0xc]         ;11723
00735e  458c              CMP      r12,r1                ;11723
007360  dc42              BGT      |L1.29672|
007362  f8ddc008          LDR      r12,[sp,#8]           ;11723
007366  f1bc0f1e          CMP      r12,#0x1e             ;11723
00736a  d23d              BCS      |L1.29672|
                  |L1.29548|
00736c  f8df8188          LDR      r8,|L1.29944|
007370  2804              CMP      r0,#4                 ;11725
007372  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11725
007376  f8988193          LDRB     r8,[r8,#0x193]        ;11725
00737a  f8cd8004          STR      r8,[sp,#4]            ;11725
00737e  dd06              BLE      |L1.29582|
007380  458c              CMP      r12,r1                ;11725
007382  dc31              BGT      |L1.29672|
007384  f8dd8004          LDR      r8,[sp,#4]            ;11725
007388  f1b80f1e          CMP      r8,#0x1e              ;11725
00738c  d22c              BCS      |L1.29672|
                  |L1.29582|
00738e  f8df9168          LDR      r9,|L1.29944|
007392  e000              B        |L1.29590|
                  |L1.29588|
007394  e028              B        |L1.29672|
                  |L1.29590|
007396  f8d9821c          LDR      r8,[r9,#0x21c]        ;11727
00739a  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11727
00739e  f8cd9000          STR      r9,[sp,#0]            ;11727
0073a2  2805              CMP      r0,#5                 ;11727
0073a4  dd06              BLE      |L1.29620|
0073a6  4588              CMP      r8,r1                 ;11727
0073a8  dc1e              BGT      |L1.29672|
0073aa  f8dd9000          LDR      r9,[sp,#0]            ;11727
0073ae  f1b90f1e          CMP      r9,#0x1e              ;11727
0073b2  d219              BCS      |L1.29672|
                  |L1.29620|
0073b4  f8dfa140          LDR      r10,|L1.29944|
0073b8  2806              CMP      r0,#6                 ;11729
0073ba  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11729
0073be  f8da9280          LDR      r9,[r10,#0x280]       ;11729
0073c2  dd04              BLE      |L1.29646|
0073c4  4589              CMP      r9,r1                 ;11729
0073c6  dc0f              BGT      |L1.29672|
0073c8  f1be0f1e          CMP      lr,#0x1e              ;11729
0073cc  d20c              BCS      |L1.29672|
                  |L1.29646|
0073ce  f8dfb128          LDR      r11,|L1.29944|
0073d2  2807              CMP      r0,#7                 ;11731
0073d4  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11731
0073d8  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11731
0073dc  dd08              BLE      |L1.29680|
0073de  458a              CMP      r10,r1                ;11731
0073e0  dc02              BGT      |L1.29672|
0073e2  f1bb0f1e          CMP      r11,#0x1e             ;11731
0073e6  d303              BCC      |L1.29680|
                  |L1.29672|
0073e8  f04f0001          MOV      r0,#1                 ;11734
0073ec  7020              STRB     r0,[r4,#0]            ;11734
                  |L1.29678|
0073ee  e711              B        |L1.29204|
                  |L1.29680|
0073f0  2b01              CMP      r3,#1                 ;11736
0073f2  d1fc              BNE      |L1.29678|
0073f4  b118              CBZ      r0,|L1.29694|
0073f6  4295              CMP      r5,r2                 ;11739
0073f8  daf9              BGE      |L1.29678|
0073fa  2e0a              CMP      r6,#0xa               ;11739
0073fc  d2f7              BCS      |L1.29678|
                  |L1.29694|
0073fe  2802              CMP      r0,#2                 ;11741
007400  db04              BLT      |L1.29708|
007402  4297              CMP      r7,r2                 ;11741
007404  daf3              BGE      |L1.29678|
007406  9906              LDR      r1,[sp,#0x18]         ;11741
007408  290a              CMP      r1,#0xa               ;11741
00740a  d2f0              BCS      |L1.29678|
                  |L1.29708|
00740c  2803              CMP      r0,#3                 ;11743
00740e  db05              BLT      |L1.29724|
007410  9905              LDR      r1,[sp,#0x14]         ;11743
007412  4291              CMP      r1,r2                 ;11743
007414  daeb              BGE      |L1.29678|
007416  9904              LDR      r1,[sp,#0x10]         ;11743
007418  290a              CMP      r1,#0xa               ;11743
00741a  d2e8              BCS      |L1.29678|
                  |L1.29724|
00741c  2804              CMP      r0,#4                 ;11745
00741e  db05              BLT      |L1.29740|
007420  9903              LDR      r1,[sp,#0xc]          ;11745
007422  4291              CMP      r1,r2                 ;11745
007424  dae3              BGE      |L1.29678|
007426  9902              LDR      r1,[sp,#8]            ;11745
007428  290a              CMP      r1,#0xa               ;11745
00742a  d2e0              BCS      |L1.29678|
                  |L1.29740|
00742c  2805              CMP      r0,#5                 ;11747
00742e  db04              BLT      |L1.29754|
007430  4594              CMP      r12,r2                ;11747
007432  dadc              BGE      |L1.29678|
007434  9901              LDR      r1,[sp,#4]            ;11747
007436  290a              CMP      r1,#0xa               ;11747
007438  d2d9              BCS      |L1.29678|
                  |L1.29754|
00743a  2806              CMP      r0,#6                 ;11749
00743c  db04              BLT      |L1.29768|
00743e  4590              CMP      r8,r2                 ;11749
007440  dad5              BGE      |L1.29678|
007442  9900              LDR      r1,[sp,#0]            ;11749
007444  290a              CMP      r1,#0xa               ;11749
007446  d2d2              BCS      |L1.29678|
                  |L1.29768|
007448  2807              CMP      r0,#7                 ;11751
00744a  db04              BLT      |L1.29782|
00744c  4591              CMP      r9,r2                 ;11751
00744e  dace              BGE      |L1.29678|
007450  f1be0f0a          CMP      lr,#0xa               ;11751
007454  d2cb              BCS      |L1.29678|
                  |L1.29782|
007456  2808              CMP      r0,#8                 ;11753
007458  db04              BLT      |L1.29796|
00745a  4592              CMP      r10,r2                ;11753
00745c  dac7              BGE      |L1.29678|
00745e  f1bb0f0a          CMP      r11,#0xa              ;11753
007462  d2c4              BCS      |L1.29678|
                  |L1.29796|
007464  f04f0000          MOV      r0,#0                 ;11756
007468  7020              STRB     r0,[r4,#0]            ;11756
                  |L1.29802|
00746a  e6d3              B        |L1.29204|
                  |L1.29804|
00746c  4823              LDR      r0,|L1.29948|
00746e  4d24              LDR      r5,|L1.29952|
007470  4e24              LDR      r6,|L1.29956|
007472  f9b00000          LDRSH    r0,[r0,#0]            ;11762  ; NUMDT
007476  f9b55000          LDRSH    r5,[r5,#0]            ;11763
00747a  7836              LDRB     r6,[r6,#0]            ;11763
00747c  b110              CBZ      r0,|L1.29828|
00747e  428d              CMP      r5,r1                 ;11763
007480  dc1d              BGT      |L1.29886|
007482  b9e6              CBNZ     r6,|L1.29886|
                  |L1.29828|
007484  4f1e              LDR      r7,|L1.29952|
007486  f8dfc07c          LDR      r12,|L1.29956|
00748a  2801              CMP      r0,#1                 ;11765
00748c  f9b77002          LDRSH    r7,[r7,#2]            ;11765
007490  f89cc001          LDRB     r12,[r12,#1]          ;11765
007494  dd04              BLE      |L1.29856|
007496  428f              CMP      r7,r1                 ;11765
007498  dc11              BGT      |L1.29886|
00749a  f1bc0f00          CMP      r12,#0                ;11765
00749e  d10e              BNE      |L1.29886|
                  |L1.29856|
0074a0  f8df805c          LDR      r8,|L1.29952|
0074a4  f8df905c          LDR      r9,|L1.29956|
0074a8  2802              CMP      r0,#2                 ;11767
0074aa  f9b88004          LDRSH    r8,[r8,#4]            ;11767
0074ae  f8999002          LDRB     r9,[r9,#2]            ;11767
0074b2  dd08              BLE      |L1.29894|
0074b4  4588              CMP      r8,r1                 ;11767
0074b6  dc02              BGT      |L1.29886|
0074b8  f1b90f00          CMP      r9,#0                 ;11767
0074bc  d003              BEQ      |L1.29894|
                  |L1.29886|
0074be  f04f0001          MOV      r0,#1                 ;11770
0074c2  7020              STRB     r0,[r4,#0]            ;11770
0074c4  e6a6              B        |L1.29204|
                  |L1.29894|
0074c6  2b01              CMP      r3,#1                 ;11772
0074c8  d191              BNE      |L1.29678|
0074ca  b118              CBZ      r0,|L1.29908|
0074cc  4295              CMP      r5,r2                 ;11775
0074ce  da8e              BGE      |L1.29678|
0074d0  2e00              CMP      r6,#0                 ;11775
0074d2  d18c              BNE      |L1.29678|
                  |L1.29908|
0074d4  2802              CMP      r0,#2                 ;11777
0074d6  db04              BLT      |L1.29922|
0074d8  4297              CMP      r7,r2                 ;11777
0074da  da88              BGE      |L1.29678|
0074dc  f1bc0f00          CMP      r12,#0                ;11777
0074e0  d185              BNE      |L1.29678|
                  |L1.29922|
0074e2  2803              CMP      r0,#3                 ;11779
0074e4  db04              BLT      |L1.29936|
0074e6  4590              CMP      r8,r2                 ;11779
0074e8  dabf              BGE      |L1.29802|
0074ea  f1b90f00          CMP      r9,#0                 ;11779
0074ee  d1bc              BNE      |L1.29802|
                  |L1.29936|
0074f0  f04f0000          MOV      r0,#0                 ;11782
0074f4  7020              STRB     r0,[r4,#0]            ;11782
0074f6  e68d              B        |L1.29204|
;;;11789  #endif //UKU_FSO
                          ENDP

                  |L1.29944|
                          DCD      bps
                  |L1.29948|
                          DCD      NUMDT
                  |L1.29952|
                          DCD      t_ext
                  |L1.29956|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;329    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;330    if(spc_stat!=spcVZ) 
;;;331    	{
;;;332    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;330
;;;333    	sp_ch_error=0;
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;331    	{
;;;332    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;330  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;330
00000c  b200              SXTH     r0,r0                 ;330
00000e  f7fffffe          BL       abs_pal
;;;333    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;334    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;335    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;338  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;338  ; adc_self_ch_buff
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;338
000032  f44f7196          MOV      r1,#0x12c             ;338
000036  f1a406f2          SUB      r6,r4,#0xf2           ;338
00003a  4288              CMP      r0,r1                 ;338
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]            ;340  ; adc_self_ch_buff
000040  87b0              STRH     r0,[r6,#0x3c]         ;340
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]            ;340  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;340
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;342  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;340
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;342  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;343
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;343  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;340
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;342  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;342
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;343  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;345  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;345  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;345
000074  6004              STR      r4,[r0,#0]            ;346  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;346  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;346
00007c  6044              STR      r4,[r0,#4]            ;346  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;351  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;351
000084  6084              STR      r4,[r0,#8]            ;352  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;352  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;354
00008c  60c1              STR      r1,[r0,#0xc]          ;354  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;354  ; adc_result
000092  2964              CMP      r1,#0x64              ;354
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;355  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;355
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;359
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;361
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;361  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;362
0000b0  428c              CMP      r4,r1                 ;362
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;365
0000b8  6002              STR      r2,[r0,#0]            ;365  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;365  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;370  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;370  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;370
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;370  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;371
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;374  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;374
0000d2  b209              SXTH     r1,r1                 ;378
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;378
0000d6  f5b17f00          CMP      r1,#0x200             ;380
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;380
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;381  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;384
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;384
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;389
0000f2  ea4f2424          ASR      r4,r4,#8              ;389
0000f6  8774              STRH     r4,[r6,#0x3a]         ;390
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;390
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;390  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;393
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f
00010a  2827              CMP      r0,#0x27
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1
000116  7530              STRB     r0,[r6,#0x14]
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]  ; adc_ch
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7cf3              LDRB     r3,[r6,#0x13]  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  0798              LSLS     r0,r3,#30
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]
000136  4461              ADD      r1,r1,r12
000138  f1000001          ADD      r0,r0,#1
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  b2c0              UXTB     r0,r0
00013e  2810              CMP      r0,#0x10
000140  d3f7              BCC      |L3.306|
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  ea4f1021          ASR      r0,r1,#4
000146  4933              LDR      r1,|L3.532|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1a10120          SUB      r1,r1,#0x20
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1
000152  b2e8              UXTB     r0,r5
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  74b0              STRB     r0,[r6,#0x12]
000156  2810              CMP      r0,#0x10
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f1030301          ADD      r3,r3,#1
000160  b2d8              UXTB     r0,r3
000162  74f0              STRB     r0,[r6,#0x13]
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  2810              CMP      r0,#0x10
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f1070701          ADD      r7,r7,#1
000170  f0070001          AND      r0,r7,#1
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000174  7470              STRB     r0,[r6,#0x11]
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]
00017c  f02000ff          BIC      r0,r0,#0xff
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
000180  f1000004          ADD      r0,r0,#4
000184  6010              STR      r0,[r2,#0]
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]  ; adc_ch
00018a  0708              LSLS     r0,r1,#28
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]
000190  f02000ff          BIC      r0,r0,#0xff
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  f1000001          ADD      r0,r0,#1
000198  6010              STR      r0,[r2,#0]
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]
00019e  f02000ff          BIC      r0,r0,#0xff
0001a2  f1000002          ADD      r0,r0,#2
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  6010              STR      r0,[r2,#0]
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]
0001ac  f0435380          ORR      r3,r3,#0x10000000
0001b0  6003              STR      r3,[r0,#0]            ;402
0001b2  6a03              LDR      r3,[r0,#0x20]         ;402
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;402
0001b8  6203              STR      r3,[r0,#0x20]         ;403
0001ba  6e03              LDR      r3,[r0,#0x60]         ;403
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;403
0001c0  6603              STR      r3,[r0,#0x60]         ;405
0001c2  07cb              LSLS     r3,r1,#31             ;405
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;405
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;405
0001cc  6143              STR      r3,[r0,#0x14]         ;406
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;406
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;406
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;421
0001d8  6343              STR      r3,[r0,#0x34]         ;421
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;422
0001de  f0235380          BIC      r3,r3,#0x10000000     ;422
0001e2  6143              STR      r3,[r0,#0x14]         ;424
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;424
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;424
0001ec  6343              STR      r3,[r0,#0x34]         ;424
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;425
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;425
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;425
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  6741              STR      r1,[r0,#0x74]
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]
0001fe  f0416180          ORR      r1,r1,#0x4000000
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000202  6741              STR      r1,[r0,#0x74]
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  f0407080          ORR      r0,r0,#0x1000000
00020a  6010              STR      r0,[r2,#0]
00020c  e8bd81f0          POP      {r4-r8,pc}
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xf2
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;331    	{
;;;332    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;330
00000c  7820              LDRB     r0,[r4,#0]            ;330  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;330
000010  b2c0              UXTB     r0,r0
;;;333    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;334    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;335    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;343  ; bps_I
000032  8008              STRH     r0,[r1,#0]            ;338
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12                ;338
00003c  4637              MOV      r7,r6                 ;338
00003e  f9b11000          LDRSH    r1,[r1,#0]            ;340  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]            ;340
000044  f9b83000          LDRSH    r3,[r8,#0]            ;340
000048  f9b77000          LDRSH    r7,[r7,#0]            ;340
00004c  4288              CMP      r0,r1                 ;342
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;340
000054  f1b90f0a          CMP      r9,#0xa               ;342
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;343
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;342
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;342
000064  280a              CMP      r0,#0xa               ;343
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;345
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;345
000072  f88c2001          STRB     r2,[r12,#1]           ;345
000076  f1a30301          SUB      r3,r3,#1              ;346
00007a  f8a83000          STRH     r3,[r8,#0]            ;346
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;351
000084  f88c2001          STRB     r2,[r12,#1]           ;352
000088  f1030301          ADD      r3,r3,#1              ;354
00008c  f8a83000          STRH     r3,[r8,#0]            ;354
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;354
000092  4251              RSBS     r1,r2,#0              ;354
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;355  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;359
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;361  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;361
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;362  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;362
0000b4  f04f0004          MOV      r0,#4                 ;365
0000b8  f88d0001          STRB     r0,[sp,#1]            ;365
0000bc  f88d5002          STRB     r5,[sp,#2]            ;370
0000c0  f04f0002          MOV      r0,#2                 ;370
0000c4  f88d0003          STRB     r0,[sp,#3]            ;371
0000c8  f88d5004          STRB     r5,[sp,#4]            ;371
0000cc  f04f0001          MOV      r0,#1                 ;374
0000d0  f88d0005          STRB     r0,[sp,#5]            ;374
0000d4  f04f0106          MOV      r1,#6                 ;378
0000d8  4668              MOV      r0,sp                 ;380
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;381
0000e2  ea4f2020          ASR      r0,r0,#8              ;381
0000e6  f88d0007          STRB     r0,[sp,#7]            ;384
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;384  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;389
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;389
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;390  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;390
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;393
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]  ; main_kb_cnt
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000144  f04f0106          MOV      r1,#6
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000188  f7fffffe          BL       putchar_sc16is700
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;329    {  
000002  4604              MOV      r4,r0
;;;330    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;331    	{
;;;332    	vz_error=0;
;;;333    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;334    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;342
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;343
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]            ;338
                  |L5.54|
000036  ea000301          AND      r3,r0,r1              ;338
00003a  07db              LSLS     r3,r3,#31             ;338
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]            ;340  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1              ;340
000044  70d0              STRB     r0,[r2,#3]            ;340
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;340
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;342
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;340
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;343
000058  461a              MOV      r2,r3                 ;343
00005a  210e              MOVS     r1,#0xe               ;343
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;343
000066  2202              MOVS     r2,#2                 ;343
000068  210e              MOVS     r1,#0xe               ;345
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;345
000074  2203              MOVS     r2,#3                 ;346
000076  210e              MOVS     r1,#0xe               ;346
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;351
000082  2204              MOVS     r2,#4                 ;351
000084  210e              MOVS     r1,#0xe               ;352
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;354
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;354
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;355  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;355
00009c  70d0              STRB     r0,[r2,#3]            ;359
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;359
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;361
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;361
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;362
0000b0  2201              MOVS     r2,#1                 ;362
0000b2  210e              MOVS     r1,#0xe               ;362
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;370
0000be  461a              MOV      r2,r3                 ;370
0000c0  210e              MOVS     r1,#0xe               ;370
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;371
0000cc  2203              MOVS     r2,#3                 ;374
0000ce  210e              MOVS     r1,#0xe               ;374
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;380
0000da  2204              MOVS     r2,#4                 ;380
0000dc  210e              MOVS     r1,#0xe               ;380
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;384
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;384
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;389  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;389
0000f4  70d0              STRB     r0,[r2,#3]            ;389
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;390
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;390
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;393
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;402
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;402
0001b8  2201              MOVS     r2,#1                 ;403
0001ba  210e              MOVS     r1,#0xe               ;403
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;405
0001c6  2202              MOVS     r2,#2                 ;405
0001c8  210e              MOVS     r1,#0xe               ;405
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;406
0001d4  2203              MOVS     r2,#3                 ;421
0001d6  210e              MOVS     r1,#0xe               ;421
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;422
0001e2  2204              MOVS     r2,#4                 ;424
0001e4  210e              MOVS     r1,#0xe               ;424
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;425
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;425
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;425  ; plazma_inv
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;459
000272  2202              MOVS     r2,#2                 ;459
000274  210e              MOVS     r1,#0xe               ;460
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;462
000280  2203              MOVS     r2,#3                 ;462
000282  210e              MOVS     r1,#0xe               ;462
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;463
00028e  2204              MOVS     r2,#4                 ;463
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  bd70              POP      {r4-r6,pc}
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xbc
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;331    	{
;;;332    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;330  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;330  ; TBOXMAX
;;;333    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;342
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]            ;338  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1                 ;338
00003c  2805              CMP      r0,#5                 ;338
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]            ;340
                  |L6.66|
000042  2400              MOVS     r4,#0                 ;340
000044  2801              CMP      r0,#1                 ;340
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;340
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;342  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;342  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;343
00005a  4298              CMP      r0,r3                 ;343
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;342  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;342
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;343
00006a  b249              SXTB     r1,r1                 ;345
00006c  7011              STRB     r1,[r2,#0]            ;345
00006e  291e              CMP      r1,#0x1e              ;345
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;345  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;346
000078  8039              STRH     r1,[r7,#0]            ;346
00007a  7014              STRB     r4,[r2,#0]            ;346
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;351
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;351  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;352
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;354
00008e  b249              SXTB     r1,r1                 ;354
000090  7011              STRB     r1,[r2,#0]            ;354
000092  291e              CMP      r1,#0x1e              ;354
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;355  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;355
00009c  8039              STRH     r1,[r7,#0]            ;359
00009e  7014              STRB     r4,[r2,#0]            ;359
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;359
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;361  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;361
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;362
0000b0  2100              MOVS     r1,#0                 ;362
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;370
0000be  8800              LDRH     r0,[r0,#0]            ;370  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;370
0000c2  b202              SXTH     r2,r0                 ;370
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;371
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;378  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;380
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;380  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;380
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;381  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;381
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;384
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;384
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;389  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;390
0000fc  2928              CMP      r1,#0x28              ;390
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;393  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;329    {  
;;;330    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;331    	{
;;;332    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;330
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;330
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;333    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;334    	vz1_error=0;
;;;335    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;338
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;342
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0                 ;340
000042  2b01              CMP      r3,#1                 ;340
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;340
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;342
00004e  f8a81000          STRH     r1,[r8,#0]            ;340
000052  2801              CMP      r0,#1                 ;342
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;343
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;343
00005a  2200              MOVS     r2,#0                 ;343
00005c  21e6              MOVS     r1,#0xe6              ;340
00005e  20e1              MOVS     r0,#0xe1              ;342
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;343
000068  f04f0000          MOV      r0,#0                 ;345
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;345
000070  f9b85000          LDRSH    r5,[r8,#0]            ;345
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;346
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;346
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;351
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;351
000086  69c9              LDR      r1,[r1,#0x1c]         ;352
000088  4299              CMP      r1,r3                 ;354
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;354
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;354
000094  b2c0              UXTB     r0,r0                 ;355
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;355
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;355
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;359
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;361
0000aa  7020              STRB     r0,[r4,#0]            ;361
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;362
0000b0  f8a81000          STRH     r1,[r8,#0]            ;362
0000b4  2802              CMP      r0,#2                 ;365
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;365
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;365
0000bc  2200              MOVS     r2,#0                 ;370
0000be  21e6              MOVS     r1,#0xe6              ;370
0000c0  20e1              MOVS     r0,#0xe1              ;370
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;371
0000ca  f04f0000          MOV      r0,#0                 ;371
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;374
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;378
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;380
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;380
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;381
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;381
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;384
0000ea  4299              CMP      r1,r3                 ;384
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;389
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;389
0000f6  b2c0              UXTB     r0,r0                 ;390
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;390
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;390
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;393
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;327    // заполнение флагов для АКБ
;;;328    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;329    {  
000002  f44f70b4          MOV      r0,#0x168
;;;330    if(spc_stat!=spcVZ) 
;;;331    	{
;;;332    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;330
00000e  700a              STRB     r2,[r1,#0]            ;330
000010  f04f0100          MOV      r1,#0
;;;333    	sp_ch_error=0;
;;;334    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;335    	vz2_error=0;
;;;336    	}
;;;337    
;;;338    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;339    	{
;;;340    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f7ffbffe          B.W      lc640_write
;;;341    		{
;;;342    		snmp_bat_flag[0]|=0x0001; 
;;;343    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;344    			{
;;;345    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;346    			snmp_bat_flag_puts[0]|=0x0001;
;;;347    			}
;;;348    		}
;;;349    	else 
;;;350    		{
;;;351    		snmp_bat_flag[0]&=~0x0001; 
;;;352    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;353    			{
;;;354    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;355    			snmp_bat_flag_puts[0]&=~0x0001;
;;;356    			}
;;;357    		}
;;;358    
;;;359    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;360    		{
;;;361    		snmp_bat_flag[0]|=0x0002;
;;;362    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;363    			{
;;;364    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;365    			snmp_bat_flag_puts[0]|=0x0002;
;;;366    			}
;;;367    		}
;;;368    	else 
;;;369    		{
;;;370    		snmp_bat_flag[0]&=~0x0002;
;;;371    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;372    			{
;;;373    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;374    			snmp_bat_flag_puts[0]&=~0x02;
;;;375    			}
;;;376    		}
;;;377    
;;;378    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0004;
;;;381    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;382    			{
;;;383    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;384    			snmp_bat_flag_puts[0]|=0x0004;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0004;
;;;390    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;391    			{
;;;392    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;393    			snmp_bat_flag_puts[0]&=~0x0004;
;;;394    			}
;;;395    		}
;;;396    
;;;397    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;398    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;399    
;;;400    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;401    		{
;;;402    		snmp_bat_flag[0]|=0x0010;
;;;403    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;404    			{
;;;405    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;406    			snmp_bat_flag_puts[0]|=0x0010;
;;;407    			}
;;;408    		}
;;;409    	else 
;;;410    		{
;;;411    		snmp_bat_flag[0]&=~0x0010;
;;;412    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;413    			{
;;;414    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;415    			snmp_bat_flag_puts[0]&=~0x0010;
;;;416    			}
;;;417    		}
;;;418    		
;;;419    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;420    		{
;;;421    		snmp_bat_flag[0]|=0x0020;
;;;422    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;423    			{
;;;424    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;425    			snmp_bat_flag_puts[0]|=0x0020;
;;;426    			}
;;;427    		}
;;;428    	else 
;;;429    		{
;;;430    		snmp_bat_flag[0]&=~0x0020;
;;;431    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;432    			{
;;;433    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;434    			snmp_bat_flag_puts[0]&=~0x0020;
;;;435    			}
;;;436    		}
;;;437    
;;;438    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;439    		{
;;;440    		snmp_bat_flag[0]|=0x0040;
;;;441    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;442    			{
;;;443    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;444    			snmp_bat_flag_puts[0]|=0x0040;
;;;445    			}
;;;446    		}
;;;447    	else 
;;;448    		{
;;;449    		snmp_bat_flag[0]&=~0x0040;
;;;450    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;451    			{
;;;452    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;453    			snmp_bat_flag_puts[0]&=~0x0040;
;;;454    			} 
;;;455    		}
;;;456    
;;;457    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;458    		{
;;;459    		snmp_bat_flag[0]|=0x0080;
;;;460    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;461    			{
;;;462    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;463    			snmp_bat_flag_puts[0]|=0x0080;
;;;464    			}
;;;465    		}
;;;466    	else 
;;;467    		{
;;;468    		snmp_bat_flag[0]&=~0x0080;
;;;469    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;470    			{
;;;471    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;472    			snmp_bat_flag_puts[0]&=~0x0080;
;;;473    			}
;;;474    		}
;;;475    
;;;476    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;477    		{
;;;478    		snmp_bat_flag[0]|=0x0100;
;;;479    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;480    			{
;;;481    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;482    			snmp_bat_flag_puts[0]|=0x0100;
;;;483    			}
;;;484    		}
;;;485    	else 
;;;486    		{
;;;487    		snmp_bat_flag[0]&=~0x0100;
;;;488    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;489    			{
;;;490    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;491    			snmp_bat_flag_puts[0]&=~0x0100;
;;;492    			} 
;;;493    		}
;;;494    
;;;495    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;496    		{
;;;497    		snmp_bat_flag[0]|=0x0200;
;;;498    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;499    			{
;;;500    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;501    			snmp_bat_flag_puts[0]|=0x0200;
;;;502    			}
;;;503    		}
;;;504    	else 
;;;505    		{
;;;506    		snmp_bat_flag[0]&=~0x0200;
;;;507    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;508    			{
;;;509    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;510    			snmp_bat_flag_puts[0]&=~0x0200;
;;;511    			}
;;;512    		}
;;;513    
;;;514    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;515    		{
;;;516    		snmp_bat_flag[0]|=0x0400;
;;;517    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;518    			{
;;;519    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;520    			snmp_bat_flag_puts[0]|=0x0400;
;;;521    			}
;;;522    		}
;;;523    	else 
;;;524    		{
;;;525    		snmp_bat_flag[0]&=~0x0400;
;;;526    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;527    			{
;;;528    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;529    			snmp_bat_flag_puts[0]&=~0x0400;
;;;530    			} 
;;;531    		}
;;;532    
;;;533    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;534    		{
;;;535    		snmp_bat_flag[0]|=0x0800;
;;;536    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;537    			{
;;;538    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;539    			snmp_bat_flag_puts[0]|=0x0800;
;;;540    			}
;;;541    		}
;;;542    	else 
;;;543    		{
;;;544    		snmp_bat_flag[0]&=~0x0800;
;;;545    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;546    			{
;;;547    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;548    			snmp_bat_flag_puts[0]&=~0x0800;
;;;549    			}
;;;550    		}
;;;551    
;;;552    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;553    		{
;;;554    		snmp_bat_flag[0]|=0x1000;
;;;555    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;556    			{
;;;557    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;558    			snmp_bat_flag_puts[0]|=0x1000;
;;;559    			}
;;;560    		}
;;;561    	else 
;;;562    		{
;;;563    		snmp_bat_flag[0]&=~0x1000;
;;;564    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;565    			{
;;;566    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;567    			snmp_bat_flag_puts[0]&=~0x1000;
;;;568    			} 
;;;569    		}
;;;570    	}
;;;571    else 
;;;572    	{
;;;573    	snmp_bat_flag[0]=0; 
;;;574    	snmp_bat_flag_puts[0]=0;
;;;575    	}
;;;576    
;;;577    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;578    	{
;;;579    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;580    		{
;;;581    		snmp_bat_flag[1]|=0x0001; 
;;;582    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;583    			{
;;;584    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;585    			snmp_bat_flag_puts[1]|=0x0001;
;;;586    			}
;;;587    		}
;;;588    	else 
;;;589    		{
;;;590    		snmp_bat_flag[1]&=~0x0001; 
;;;591    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;592    			{
;;;593    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;594    			snmp_bat_flag_puts[1]&=~0x0001;
;;;595    			}
;;;596    		}
;;;597    
;;;598    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;599    		{
;;;600    		snmp_bat_flag[1]|=0x0002;
;;;601    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;602    			{
;;;603    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;604    			snmp_bat_flag_puts[1]|=0x0002;
;;;605    			}
;;;606    		}
;;;607    	else 
;;;608    		{
;;;609    		snmp_bat_flag[1]&=~0x0002;
;;;610    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;611    			{
;;;612    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;613    			snmp_bat_flag_puts[1]&=~0x02;
;;;614    			}
;;;615    		}
;;;616    
;;;617    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0004;
;;;620    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;621    			{
;;;622    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;623    			snmp_bat_flag_puts[1]|=0x0004;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0004;
;;;629    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;630    			{
;;;631    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;632    			snmp_bat_flag_puts[1]&=~0x0004;
;;;633    			}
;;;634    		}
;;;635    
;;;636    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;637    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;638    
;;;639    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;640    		{
;;;641    		snmp_bat_flag[1]|=0x0010;
;;;642    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;643    			{
;;;644    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;645    			snmp_bat_flag_puts[1]|=0x0010;
;;;646    			}
;;;647    		}
;;;648    	else 
;;;649    		{
;;;650    		snmp_bat_flag[1]&=~0x0010;
;;;651    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;652    			{
;;;653    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;654    			snmp_bat_flag_puts[1]&=~0x0010;
;;;655    			}
;;;656    		}
;;;657    		
;;;658    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;659    		{
;;;660    		snmp_bat_flag[1]|=0x0020;
;;;661    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;662    			{
;;;663    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;664    			snmp_bat_flag_puts[1]|=0x0020;
;;;665    			}
;;;666    		}
;;;667    	else 
;;;668    		{
;;;669    		snmp_bat_flag[1]&=~0x0020;
;;;670    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;671    			{
;;;672    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;673    			snmp_bat_flag_puts[1]&=~0x0020;
;;;674    			}
;;;675    		}
;;;676    
;;;677    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;678    		{
;;;679    		snmp_bat_flag[1]|=0x0040;
;;;680    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;681    			{
;;;682    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;683    			snmp_bat_flag_puts[1]|=0x0040;
;;;684    			}
;;;685    		}
;;;686    	else 
;;;687    		{
;;;688    		snmp_bat_flag[1]&=~0x0040;
;;;689    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;690    			{
;;;691    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;692    			snmp_bat_flag_puts[1]&=~0x0040;
;;;693    			} 
;;;694    		}
;;;695    
;;;696    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;697    		{
;;;698    		snmp_bat_flag[1]|=0x0080;
;;;699    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;700    			{
;;;701    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;702    			snmp_bat_flag_puts[1]|=0x0080;
;;;703    			}
;;;704    		}
;;;705    	else 
;;;706    		{
;;;707    		snmp_bat_flag[1]&=~0x0080;
;;;708    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;709    			{
;;;710    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;711    			snmp_bat_flag_puts[1]&=~0x0080;
;;;712    			}
;;;713    		}
;;;714    
;;;715    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;716    		{
;;;717    		snmp_bat_flag[1]|=0x0100;
;;;718    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;719    			{
;;;720    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;721    			snmp_bat_flag_puts[1]|=0x0100;
;;;722    			}
;;;723    		}
;;;724    	else 
;;;725    		{
;;;726    		snmp_bat_flag[1]&=~0x0100;
;;;727    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;728    			{
;;;729    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;730    			snmp_bat_flag_puts[1]&=~0x0100;
;;;731    			} 
;;;732    		}
;;;733    
;;;734    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;735    		{
;;;736    		snmp_bat_flag[1]|=0x0200;
;;;737    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;738    			{
;;;739    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;740    			snmp_bat_flag_puts[1]|=0x0200;
;;;741    			}
;;;742    		}
;;;743    	else 
;;;744    		{
;;;745    		snmp_bat_flag[1]&=~0x0200;
;;;746    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;747    			{
;;;748    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;749    			snmp_bat_flag_puts[1]&=~0x0200;
;;;750    			}
;;;751    		}
;;;752    
;;;753    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;754    		{
;;;755    		snmp_bat_flag[1]|=0x0400;
;;;756    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;757    			{
;;;758    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;759    			snmp_bat_flag_puts[1]|=0x0400;
;;;760    			}
;;;761    		}
;;;762    	else 
;;;763    		{
;;;764    		snmp_bat_flag[1]&=~0x0400;
;;;765    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;766    			{
;;;767    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;768    			snmp_bat_flag_puts[1]&=~0x0400;
;;;769    			} 
;;;770    		}
;;;771    
;;;772    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;773    		{
;;;774    		snmp_bat_flag[1]|=0x0800;
;;;775    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;776    			{
;;;777    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;778    			snmp_bat_flag_puts[1]|=0x0800;
;;;779    			}
;;;780    		}
;;;781    	else 
;;;782    		{
;;;783    		snmp_bat_flag[1]&=~0x0800;
;;;784    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;785    			{
;;;786    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;787    			snmp_bat_flag_puts[1]&=~0x0800;
;;;788    			}
;;;789    		}
;;;790    
;;;791    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;792    		{
;;;793    		snmp_bat_flag[1]|=0x1000;
;;;794    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;795    			{
;;;796    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;797    			snmp_bat_flag_puts[1]|=0x1000;
;;;798    			}
;;;799    		}
;;;800    	else 
;;;801    		{
;;;802    		snmp_bat_flag[1]&=~0x1000;
;;;803    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;804    			{
;;;805    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;806    			snmp_bat_flag_puts[1]&=~0x1000;
;;;807    			} 
;;;808    		}
;;;809    	}
;;;810    else 
;;;811    	{
;;;812    	snmp_bat_flag[1]=0; 
;;;813    	snmp_bat_flag_puts[1]=0;
;;;814    	}
;;;815    /*
;;;816    if(!snmp_bat_status[1])
;;;817    	{
;;;818    	if((bat[1]._Ub<(USIGN*10))) 
;;;819    		{
;;;820    		snmp_bat_flag[1]|=0x01; 
;;;821    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;822    			{
;;;823    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;824    			snmp_bat_flag_puts[1]|=0x01;
;;;825    			}
;;;826    		}
;;;827    	else 
;;;828    		{
;;;829    		snmp_bat_flag[1]&=~0x01; 
;;;830    		if(snmp_bat_flag_puts[1]&0x01) 
;;;831    			{
;;;832    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;833    			snmp_bat_flag_puts[1]&=~0x01;
;;;834    			}
;;;835    		}
;;;836    	if(bat[1]._temper_stat&0x01) 
;;;837    		{
;;;838    		snmp_bat_flag[1]|=0x02;
;;;839    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;840    			{
;;;841    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;842    			snmp_bat_flag_puts[1]|=0x02;
;;;843    			}
;;;844    		}
;;;845    	else 
;;;846    		{
;;;847    		snmp_bat_flag[1]&=~0x02;
;;;848    		if(snmp_bat_flag_puts[1]&0x02) 
;;;849    			{
;;;850    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;851    			snmp_bat_flag_puts[1]&=~0x02;
;;;852    			}
;;;853    		}
;;;854    	if(bat[1]._temper_stat&0x02) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x04;
;;;857    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;860    			snmp_bat_flag_puts[1]|=0x04;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x04;
;;;866    		if(snmp_bat_flag_puts[1]&0x04) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;869    			snmp_bat_flag_puts[1]&=~0x04;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;874    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;875    
;;;876    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;877    		{
;;;878    		snmp_bat_flag[1]|=0x10;
;;;879    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;880    			{
;;;881    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;882    			snmp_bat_flag_puts[1]|=0x10;
;;;883    			}
;;;884    		}
;;;885    	else 
;;;886    		{
;;;887    		snmp_bat_flag[1]&=~0x10;
;;;888    		if(snmp_bat_flag_puts[1]&0x10) 
;;;889    			{
;;;890    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;891    			snmp_bat_flag_puts[1]&=~0x10;
;;;892    			}
;;;893    		}
;;;894    		
;;;895    	if(spc_stat==spcVZ) 
;;;896    		{
;;;897    		snmp_bat_flag[1]|=0x20;
;;;898    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;899    			{
;;;900    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;901    			snmp_bat_flag_puts[1]|=0x20;
;;;902    			}
;;;903    		}
;;;904    	else 
;;;905    		{
;;;906    		snmp_bat_flag[1]&=~0x20;
;;;907    		if(snmp_bat_flag_puts[1]&0x20) 
;;;908    			{
;;;909    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;910    			snmp_bat_flag_puts[1]&=~0x20;
;;;911    			}
;;;912    		}
;;;913    
;;;914    	if(vz_error) 
;;;915    		{
;;;916    		snmp_bat_flag[1]|=0x40;
;;;917    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;918    			{
;;;919    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;920    			snmp_bat_flag_puts[1]|=0x40;
;;;921    			}
;;;922    		}
;;;923    	else 
;;;924    		{
;;;925    		snmp_bat_flag[1]&=~0x40;
;;;926    		if(snmp_bat_flag_puts[1]&0x40) 
;;;927    			{
;;;928    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;929    			snmp_bat_flag_puts[1]&=~0x40;
;;;930    			} 
;;;931    		}
;;;932       }
;;;933    else 
;;;934    	{
;;;935    	snmp_bat_flag[1]=0; 
;;;936    	snmp_bat_flag_puts[1]=0;
;;;937    	} */
;;;938    }
;;;939    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0262              DCW      0x0262
                  cntrl_stat_old
000034  0262              DCW      0x0262
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  Ibmax_
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=1

                          EXPORTAS ||area_number.65||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.66||, DATA, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.67||, DATA, ALIGN=1

                          EXPORTAS ||area_number.67||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.69||, DATA, ALIGN=1

                          EXPORTAS ||area_number.69||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "control.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_9601dfb0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REVSH|
#line 130
|__asm___9_control_c_9601dfb0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
