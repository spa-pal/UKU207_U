; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\system_lpc17xx.o --depend=.\EXE\system_lpc17xx.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\system_lpc17xx.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;408     */
;;;409    void SystemInit (void)
000000  b530              PUSH     {r4,r5,lr}
;;;410    {
;;;411    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;412      LPC_SC->SCS       = SCS_Val;
000002  495c              LDR      r1,|L1.372|
000004  2020              MOVS     r0,#0x20
000006  f8c101a0          STR      r0,[r1,#0x1a0]
                  |L1.10|
;;;413      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;414        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  f8d101a0          LDR      r0,[r1,#0x1a0]
00000e  0640              LSLS     r0,r0,#25
000010  d5fb              BPL      |L1.10|
;;;415      }
;;;416    
;;;417      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000012  2303              MOVS     r3,#3
000014  f1010180          ADD      r1,r1,#0x80
000018  f8c13084          STR      r3,[r1,#0x84]
;;;418    
;;;419      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001c  f44f3000          MOV      r0,#0x20000
000020  f8c10128          STR      r0,[r1,#0x128]
;;;420      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000024  f04f0200          MOV      r2,#0
000028  f8c1212c          STR      r2,[r1,#0x12c]
;;;421    
;;;422    #if (PLL0_SETUP)
;;;423      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002c  f04f0001          MOV      r0,#1
000030  f8c1008c          STR      r0,[r1,#0x8c]
;;;424      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000034  4c50              LDR      r4,|L1.376|
000036  604c              STR      r4,[r1,#4]
;;;425      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000038  6008              STR      r0,[r1,#0]
;;;426      LPC_SC->PLL0FEED  = 0xAA;
00003a  f04f04aa          MOV      r4,#0xaa
00003e  60cc              STR      r4,[r1,#0xc]
;;;427      LPC_SC->PLL0FEED  = 0x55;
000040  f04f0555          MOV      r5,#0x55
000044  60cd              STR      r5,[r1,#0xc]
000046  f1a10180          SUB      r1,r1,#0x80
                  |L1.74|
;;;428      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
00004a  f8d10088          LDR      r0,[r1,#0x88]
00004e  0140              LSLS     r0,r0,#5
000050  d5fb              BPL      |L1.74|
;;;429    
;;;430      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000052  f8413f80          STR      r3,[r1,#0x80]!
;;;431      LPC_SC->PLL0FEED  = 0xAA;
000056  60cc              STR      r4,[r1,#0xc]
;;;432      LPC_SC->PLL0FEED  = 0x55;
000058  60cd              STR      r5,[r1,#0xc]
;;;433    #endif
;;;434    
;;;435    #if (PLL1_SETUP)
;;;436      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;437      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;438      LPC_SC->PLL1FEED  = 0xAA;
;;;439      LPC_SC->PLL1FEED  = 0x55;
;;;440      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;441    
;;;442      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;443      LPC_SC->PLL1FEED  = 0xAA;
;;;444      LPC_SC->PLL1FEED  = 0x55;
;;;445    #else
;;;446      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
00005a  f8c12088          STR      r2,[r1,#0x88]
;;;447    #endif
;;;448    
;;;449      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00005e  4847              LDR      r0,|L1.380|
000060  6448              STR      r0,[r1,#0x44]
;;;450    
;;;451      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000062  f8c12148          STR      r2,[r1,#0x148]
;;;452    #endif
;;;453    
;;;454      /* Determine clock frequency according to clock register values             */
;;;455      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
000066  6888              LDR      r0,[r1,#8]
;;;456        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;457          case 0:                           /* Internal RC oscillator => PLL0     */
;;;458          case 3:                           /* Reserved, default to Internal RC   */
;;;459            SystemFrequency = (IRC_OSC * 
000068  4a45              LDR      r2,|L1.384|
00006a  ea6f6010          MVN      r0,r0,LSR #24         ;455
00006e  f1a10180          SUB      r1,r1,#0x80           ;455
000072  0780              LSLS     r0,r0,#30             ;455
000074  d153              BNE      |L1.286|
000076  f8d1010c          LDR      r0,[r1,#0x10c]        ;456
00007a  f0100003          ANDS     r0,r0,#3              ;456
00007e  d005              BEQ      |L1.140|
000080  2801              CMP      r0,#1                 ;456
000082  d01b              BEQ      |L1.188|
000084  2802              CMP      r0,#2                 ;456
000086  d031              BEQ      |L1.236|
000088  2803              CMP      r0,#3                 ;456
00008a  d16e              BNE      |L1.362|
                  |L1.140|
00008c  f8510f88          LDR      r0,[r1,#0x88]!
000090  f3c0000e          UBFX     r0,r0,#0,#15
000094  1c40              ADDS     r0,r0,#1
000096  0043              LSLS     r3,r0,#1
000098  6808              LDR      r0,[r1,#0]
00009a  f3c04007          UBFX     r0,r0,#16,#8
00009e  1c40              ADDS     r0,r0,#1
0000a0  fbb3f0f0          UDIV     r0,r3,r0
0000a4  4b37              LDR      r3,|L1.388|
0000a6  4358              MULS     r0,r3,r0
0000a8  6fcb              LDR      r3,[r1,#0x7c]
0000aa  f1a10188          SUB      r1,r1,#0x88
0000ae  b2db              UXTB     r3,r3
0000b0  f1030301          ADD      r3,r3,#1
0000b4  fbb0f0f3          UDIV     r0,r0,r3
0000b8  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;460                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
0000ba  e056              B        |L1.362|
                  |L1.188|
;;;464          case 1:                           /* Main oscillator => PLL0            */
;;;465            SystemFrequency = (OSC_CLK * 
0000bc  f8510f88          LDR      r0,[r1,#0x88]!
0000c0  f3c0000e          UBFX     r0,r0,#0,#15
0000c4  1c40              ADDS     r0,r0,#1
0000c6  0043              LSLS     r3,r0,#1
0000c8  6808              LDR      r0,[r1,#0]
0000ca  f3c04007          UBFX     r0,r0,#16,#8
0000ce  1c40              ADDS     r0,r0,#1
0000d0  fbb3f0f0          UDIV     r0,r3,r0
0000d4  4b2c              LDR      r3,|L1.392|
0000d6  4358              MULS     r0,r3,r0
0000d8  6fcb              LDR      r3,[r1,#0x7c]
0000da  f1a10188          SUB      r1,r1,#0x88
0000de  b2db              UXTB     r3,r3
0000e0  f1030301          ADD      r3,r3,#1
0000e4  fbb0f0f3          UDIV     r0,r0,r3
0000e8  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;466                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
0000ea  e03e              B        |L1.362|
                  |L1.236|
;;;470          case 2:                           /* RTC oscillator => PLL0             */
;;;471            SystemFrequency = (RTC_CLK * 
0000ec  f8510f88          LDR      r0,[r1,#0x88]!
0000f0  f3c0000e          UBFX     r0,r0,#0,#15
0000f4  1c40              ADDS     r0,r0,#1
0000f6  0043              LSLS     r3,r0,#1
0000f8  6808              LDR      r0,[r1,#0]
0000fa  f3c04007          UBFX     r0,r0,#16,#8
0000fe  1c40              ADDS     r0,r0,#1
000100  fbb3f0f0          UDIV     r0,r3,r0
000104  f44f43fa          MOV      r3,#0x7d00
000108  4358              MULS     r0,r3,r0
00010a  6fcb              LDR      r3,[r1,#0x7c]
00010c  f1a10188          SUB      r1,r1,#0x88
000110  b2db              UXTB     r3,r3
000112  f1030301          ADD      r3,r3,#1
000116  fbb0f0f3          UDIV     r0,r0,r3
00011a  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;472                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;473                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;474                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;475            break;
00011c  e025              B        |L1.362|
                  |L1.286|
;;;476        }
;;;477      } else {
;;;478        switch (LPC_SC->CLKSRCSEL & 0x03) {
00011e  f8d1010c          LDR      r0,[r1,#0x10c]
000122  f0100003          ANDS     r0,r0,#3
000126  d005              BEQ      |L1.308|
000128  2801              CMP      r0,#1
00012a  d00c              BEQ      |L1.326|
00012c  2802              CMP      r0,#2
00012e  d013              BEQ      |L1.344|
000130  2803              CMP      r0,#3
000132  d11a              BNE      |L1.362|
                  |L1.308|
;;;479          case 0:                           /* Internal RC oscillator => PLL0     */
;;;480          case 3:                           /* Reserved, default to Internal RC   */
;;;481            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000134  f8d10104          LDR      r0,[r1,#0x104]
000138  4b12              LDR      r3,|L1.388|
00013a  b2c0              UXTB     r0,r0
00013c  1c40              ADDS     r0,r0,#1
00013e  fbb3f0f0          UDIV     r0,r3,r0
000142  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;482            break;
000144  e011              B        |L1.362|
                  |L1.326|
;;;483          case 1:                           /* Main oscillator => PLL0            */
;;;484            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000146  f8d10104          LDR      r0,[r1,#0x104]
00014a  4b0f              LDR      r3,|L1.392|
00014c  b2c0              UXTB     r0,r0
00014e  1c40              ADDS     r0,r0,#1
000150  fbb3f0f0          UDIV     r0,r3,r0
000154  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;485            break;
000156  e008              B        |L1.362|
                  |L1.344|
;;;486          case 2:                           /* RTC oscillator => PLL0             */
;;;487            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000158  f8d10104          LDR      r0,[r1,#0x104]
00015c  f44f43fa          MOV      r3,#0x7d00
000160  b2c0              UXTB     r0,r0
000162  1c40              ADDS     r0,r0,#1
000164  fbb3f0f0          UDIV     r0,r3,r0
000168  6010              STR      r0,[r2,#0]  ; SystemFrequency
                  |L1.362|
;;;488            break;
;;;489        }
;;;490      }
;;;491    
;;;492    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;493      LPC_SC->FLASHCFG  = FLASHCFG_Val;
00016a  f243003a          MOV      r0,#0x303a
00016e  6008              STR      r0,[r1,#0]
;;;494    #endif
;;;495    }
000170  bd30              POP      {r4,r5,pc}
                          ENDP

000172  0000              DCW      0x0000
                  |L1.372|
                          DCD      0x400fc000
                  |L1.376|
                          DCD      0x0003004f
                  |L1.380|
                          DCD      0x4100f14a
                  |L1.384|
                          DCD      ||.data||
                  |L1.388|
                          DCD      0x003d0900
                  |L1.392|
                          DCD      0x00989680

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900
