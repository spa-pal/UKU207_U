; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\mess.o --depend=.\EXE\mess.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\mess.crf mess.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mess_hndl PROC
;;;10     //-----------------------------------------------
;;;11     void mess_hndl(void)
000000  b530              PUSH     {r4,r5,lr}
;;;12     {
;;;13     char i;
;;;14     for(i=0;i<MESS_DEEP;i++)
000002  2000              MOVS     r0,#0
;;;15     	{
;;;16     	if((mess[i])&&(mess[i]==mess_old[i])&&(mess_cnt[i]))
000004  4b35              LDR      r3,|L1.220|
000006  f1a30214          SUB      r2,r3,#0x14
00000a  f102040a          ADD      r4,r2,#0xa
                  |L1.14|
00000e  5c11              LDRB     r1,[r2,r0]
000010  b151              CBZ      r1,|L1.40|
000012  5c25              LDRB     r5,[r4,r0]
000014  42a9              CMP      r1,r5
000016  d107              BNE      |L1.40|
000018  5c19              LDRB     r1,[r3,r0]
00001a  b129              CBZ      r1,|L1.40|
;;;17     		{
;;;18     		mess_cnt[i]--;
00001c  1e49              SUBS     r1,r1,#1
00001e  b2c9              UXTB     r1,r1
000020  5419              STRB     r1,[r3,r0]
;;;19     		if(!mess_cnt[i])mess[i]=MESS_ZERO;
000022  b909              CBNZ     r1,|L1.40|
000024  2100              MOVS     r1,#0
000026  5411              STRB     r1,[r2,r0]
                  |L1.40|
;;;20     		
;;;21     		}
;;;22     	mess_old[i]=mess[i];
000028  5c11              LDRB     r1,[r2,r0]
00002a  5421              STRB     r1,[r4,r0]
00002c  1c40              ADDS     r0,r0,#1              ;14
00002e  b2c0              UXTB     r0,r0                 ;14
000030  280a              CMP      r0,#0xa               ;14
000032  d3ec              BCC      |L1.14|
;;;23     	} 
;;;24     }
000034  bd30              POP      {r4,r5,pc}
;;;25     
                          ENDP

                  mess_send PROC
;;;26     //-----------------------------------------------
;;;27     void mess_send(char _mess, short par0, short par1, char _time)
000036  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29     char i;
;;;30     i=0;
000038  2400              MOVS     r4,#0
;;;31     
;;;32     do
;;;33     	{
;;;34     	i++;
;;;35     	}
;;;36     while((mess[i])&&(mess[i]!=_mess)&&(i<MESS_DEEP));
00003a  4e28              LDR      r6,|L1.220|
00003c  3e14              SUBS     r6,r6,#0x14
                  |L1.62|
00003e  1c64              ADDS     r4,r4,#1              ;34
000040  b2e4              UXTB     r4,r4                 ;34
000042  5d35              LDRB     r5,[r6,r4]
000044  b11d              CBZ      r5,|L1.78|
000046  4285              CMP      r5,r0
000048  d001              BEQ      |L1.78|
00004a  2c0a              CMP      r4,#0xa
00004c  d3f7              BCC      |L1.62|
                  |L1.78|
;;;37     
;;;38     mess[i]=_mess;  
00004e  5530              STRB     r0,[r6,r4]
;;;39     mess_par0[i]=par0;
000050  4822              LDR      r0,|L1.220|
000052  300c              ADDS     r0,r0,#0xc
000054  f8401024          STR      r1,[r0,r4,LSL #2]
;;;40     mess_par1[i]=par1;
000058  3028              ADDS     r0,r0,#0x28
00005a  f8402024          STR      r2,[r0,r4,LSL #2]
;;;41     mess_cnt[i]=_time; 
00005e  3834              SUBS     r0,r0,#0x34
000060  5503              STRB     r3,[r0,r4]
;;;42      
;;;43     }
000062  bd70              POP      {r4-r6,pc}
;;;44     
                          ENDP

                  mess_find PROC
;;;45     //-----------------------------------------------
;;;46     char mess_find(char _mess)
000064  2100              MOVS     r1,#0
;;;47     {
;;;48     char i;
;;;49     i=0;
;;;50     
;;;51     do
;;;52     	{
;;;53     	i++;
;;;54     	}
;;;55     while((mess[i]!=_mess)&&(i<MESS_DEEP));
000066  4a1d              LDR      r2,|L1.220|
000068  3a14              SUBS     r2,r2,#0x14
                  |L1.106|
00006a  1c49              ADDS     r1,r1,#1              ;53
00006c  b2c9              UXTB     r1,r1                 ;53
00006e  5c53              LDRB     r3,[r2,r1]
000070  4283              CMP      r3,r0
000072  d001              BEQ      |L1.120|
000074  290a              CMP      r1,#0xa
000076  d3f8              BCC      |L1.106|
                  |L1.120|
;;;56     
;;;57     if(mess[i]==_mess)
000078  5c53              LDRB     r3,[r2,r1]
00007a  4283              CMP      r3,r0
00007c  d110              BNE      |L1.160|
;;;58     	{ 
;;;59     	mess_data[0]=mess_par0[i];  
00007e  4817              LDR      r0,|L1.220|
000080  300c              ADDS     r0,r0,#0xc
000082  f8503021          LDR      r3,[r0,r1,LSL #2]
000086  4816              LDR      r0,|L1.224|
000088  6003              STR      r3,[r0,#0]  ; mess_data
;;;60     	mess_data[1]=mess_par1[i];
00008a  4b14              LDR      r3,|L1.220|
00008c  3334              ADDS     r3,r3,#0x34
00008e  f8533021          LDR      r3,[r3,r1,LSL #2]
000092  6043              STR      r3,[r0,#4]  ; mess_data
;;;61     	mess[i]=MESS_ZERO;
000094  2000              MOVS     r0,#0
000096  5450              STRB     r0,[r2,r1]
;;;62     	mess_cnt[i]=0;
000098  4a10              LDR      r2,|L1.220|
00009a  5450              STRB     r0,[r2,r1]
;;;63     	return 1; 
00009c  2001              MOVS     r0,#1
;;;64     	}
;;;65     else return 0; 
;;;66      
;;;67     }
00009e  4770              BX       lr
                  |L1.160|
0000a0  2000              MOVS     r0,#0                 ;65
0000a2  4770              BX       lr
;;;68     
                          ENDP

                  mess_find_unvol PROC
;;;69     //-----------------------------------------------
;;;70     char mess_find_unvol(char _mess)
0000a4  2100              MOVS     r1,#0
;;;71     {
;;;72     char i;
;;;73     i=0;
;;;74     
;;;75     do
;;;76     	{
;;;77     	i++;
;;;78     	}
;;;79     while((mess[i]!=_mess)&&(i<MESS_DEEP));
0000a6  4a0d              LDR      r2,|L1.220|
0000a8  3a14              SUBS     r2,r2,#0x14
                  |L1.170|
0000aa  1c49              ADDS     r1,r1,#1              ;77
0000ac  b2c9              UXTB     r1,r1                 ;77
0000ae  5c53              LDRB     r3,[r2,r1]
0000b0  4283              CMP      r3,r0
0000b2  d001              BEQ      |L1.184|
0000b4  290a              CMP      r1,#0xa
0000b6  d3f8              BCC      |L1.170|
                  |L1.184|
;;;80     
;;;81     if(mess[i]==_mess)
0000b8  5c52              LDRB     r2,[r2,r1]
0000ba  4282              CMP      r2,r0
0000bc  d10c              BNE      |L1.216|
;;;82     	{ 
;;;83     	mess_data[0]=mess_par0[i];  
0000be  4807              LDR      r0,|L1.220|
0000c0  300c              ADDS     r0,r0,#0xc
0000c2  f8502021          LDR      r2,[r0,r1,LSL #2]
0000c6  4806              LDR      r0,|L1.224|
0000c8  6002              STR      r2,[r0,#0]  ; mess_data
;;;84     	mess_data[1]=mess_par1[i];
0000ca  4a04              LDR      r2,|L1.220|
0000cc  3234              ADDS     r2,r2,#0x34
0000ce  f8521021          LDR      r1,[r2,r1,LSL #2]
0000d2  6041              STR      r1,[r0,#4]  ; mess_data
;;;85     	return 1; 
0000d4  2001              MOVS     r0,#1
;;;86     	}
;;;87     else return 0; 
;;;88      
;;;89     }
0000d6  4770              BX       lr
                  |L1.216|
0000d8  2000              MOVS     r0,#0                 ;87
0000da  4770              BX       lr
                          ENDP

                  |L1.220|
                          DCD      ||.bss||+0x14
                  |L1.224|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mess
                          %        10
                  mess_old
                          %        10
                  mess_cnt
                          %        12
                  mess_par0
                          %        40
                  mess_par1
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  mess_data
                          %        8
