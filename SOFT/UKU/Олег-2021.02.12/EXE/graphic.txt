; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\graphic.o --depend=.\EXE\graphic.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;8      {
000004  9c09              LDR      r4,[sp,#0x24]
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  2920              CMP      r1,#0x20
000008  d236              BCS      |L1.120|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  17cd              ASRS     r5,r1,#31
00000c  eb017555          ADD      r5,r1,r5,LSR #29
000010  10ee              ASRS     r6,r5,#3
000012  f06f073c          MVN      r7,#0x3c
000016  4377              MULS     r7,r6,r7
000018  f44f7cb7          MOV      r12,#0x16e
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
00001c  f0250507          BIC      r5,r5,#7
000020  eb0c0747          ADD      r7,r12,r7,LSL #1      ;25
000024  eba10805          SUB      r8,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000028  4dfb              LDR      r5,|L1.1048|
00002a  4407              ADD      r7,r7,r0              ;25
00002c  f04f0c01          MOV      r12,#1
000030  2a00              CMP      r2,#0                 ;23
000032  d040              BEQ      |L1.182|
000034  b2b8              UXTH     r0,r7                 ;25
000036  f1c80107          RSB      r1,r8,#7              ;28
00003a  b2c9              UXTB     r1,r1                 ;28
00003c  dd1e              BLE      |L1.124|
00003e  eb000302          ADD      r3,r0,r2              ;31
000042  e017              B        |L1.116|
                  |L1.68|
000044  b92c              CBNZ     r4,|L1.82|
000046  5c2a              LDRB     r2,[r5,r0]
000048  fa0cf601          LSL      r6,r12,r1
00004c  4332              ORRS     r2,r2,r6
00004e  542a              STRB     r2,[r5,r0]
000050  e00e              B        |L1.112|
                  |L1.82|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
000052  2c01              CMP      r4,#1
000054  d105              BNE      |L1.98|
000056  5c2a              LDRB     r2,[r5,r0]
000058  fa0cf601          LSL      r6,r12,r1
00005c  4072              EORS     r2,r2,r6
00005e  542a              STRB     r2,[r5,r0]
000060  e006              B        |L1.112|
                  |L1.98|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000062  2c02              CMP      r4,#2
000064  d104              BNE      |L1.112|
000066  5c2a              LDRB     r2,[r5,r0]
000068  fa0cf601          LSL      r6,r12,r1
00006c  4032              ANDS     r2,r2,r6
00006e  542a              STRB     r2,[r5,r0]
                  |L1.112|
000070  1c40              ADDS     r0,r0,#1              ;31
000072  b280              UXTH     r0,r0                 ;31
                  |L1.116|
000074  4283              CMP      r3,r0                 ;31
000076  dce5              BGT      |L1.68|
                  |L1.120|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000078  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.124|
00007c  1883              ADDS     r3,r0,r2              ;31
00007e  e017              B        |L1.176|
                  |L1.128|
000080  b92c              CBNZ     r4,|L1.142|
000082  5c2a              LDRB     r2,[r5,r0]            ;42
000084  fa0cf601          LSL      r6,r12,r1             ;42
000088  4332              ORRS     r2,r2,r6              ;42
00008a  542a              STRB     r2,[r5,r0]            ;42
00008c  e00e              B        |L1.172|
                  |L1.142|
00008e  2c01              CMP      r4,#1                 ;43
000090  d105              BNE      |L1.158|
000092  5c2a              LDRB     r2,[r5,r0]            ;43
000094  fa0cf601          LSL      r6,r12,r1             ;43
000098  4072              EORS     r2,r2,r6              ;43
00009a  542a              STRB     r2,[r5,r0]            ;43
00009c  e006              B        |L1.172|
                  |L1.158|
00009e  2c02              CMP      r4,#2                 ;44
0000a0  d104              BNE      |L1.172|
0000a2  5c2a              LDRB     r2,[r5,r0]            ;44
0000a4  fa0cf601          LSL      r6,r12,r1             ;44
0000a8  4032              ANDS     r2,r2,r6              ;44
0000aa  542a              STRB     r2,[r5,r0]            ;44
                  |L1.172|
0000ac  1e40              SUBS     r0,r0,#1              ;40
0000ae  b280              UXTH     r0,r0                 ;40
                  |L1.176|
0000b0  4283              CMP      r3,r0                 ;40
0000b2  dbe5              BLT      |L1.128|
                  |L1.180|
0000b4  e7e0              B        |L1.120|
                  |L1.182|
0000b6  f04f0eff          MOV      lr,#0xff              ;70
0000ba  2b00              CMP      r3,#0                 ;48
0000bc  d0dc              BEQ      |L1.120|
0000be  b2b2              UXTH     r2,r6                 ;51
0000c0  eb010603          ADD      r6,r1,r3              ;52
0000c4  ea4f77e6          ASR      r7,r6,#31             ;52
0000c8  eb067a57          ADD      r10,r6,r7,LSR #29     ;52
0000cc  f3ca07cf          UBFX     r7,r10,#3,#16         ;52
0000d0  fa1ff988          UXTH     r9,r8                 ;53
0000d4  f02a0807          BIC      r8,r10,#7             ;54
0000d8  eba60608          SUB      r6,r6,r8              ;54
0000dc  fa1ff886          UXTH     r8,r6                 ;54
0000e0  dd44              BLE      |L1.364|
0000e2  42ba              CMP      r2,r7                 ;59
0000e4  d143              BNE      |L1.366|
0000e6  464e              MOV      r6,r9                 ;61
0000e8  e03e              B        |L1.360|
                  |L1.234|
0000ea  b994              CBNZ     r4,|L1.274|
0000ec  f1c20103          RSB      r1,r2,#3              ;63
0000f0  eb010a41          ADD      r10,r1,r1,LSL #1      ;63
0000f4  ebca1181          RSB      r1,r10,r1,LSL #6      ;63
0000f8  eb000141          ADD      r1,r0,r1,LSL #1       ;63
0000fc  f815a001          LDRB     r10,[r5,r1]           ;63
000100  f1c60b07          RSB      r11,r6,#7             ;63
000104  fa0cfb0b          LSL      r11,r12,r11           ;63
000108  ea4a0a0b          ORR      r10,r10,r11           ;63
00010c  f805a001          STRB     r10,[r5,r1]           ;63
000110  e028              B        |L1.356|
                  |L1.274|
000112  2c01              CMP      r4,#1                 ;64
000114  d112              BNE      |L1.316|
000116  f1c20103          RSB      r1,r2,#3              ;64
00011a  eb010a41          ADD      r10,r1,r1,LSL #1      ;64
00011e  ebca1181          RSB      r1,r10,r1,LSL #6      ;64
000122  eb000141          ADD      r1,r0,r1,LSL #1       ;64
000126  f815a001          LDRB     r10,[r5,r1]           ;64
00012a  f1c60b07          RSB      r11,r6,#7             ;64
00012e  fa0cfb0b          LSL      r11,r12,r11           ;64
000132  ea8a0a0b          EOR      r10,r10,r11           ;64
000136  f805a001          STRB     r10,[r5,r1]           ;64
00013a  e013              B        |L1.356|
                  |L1.316|
00013c  2c02              CMP      r4,#2                 ;65
00013e  d111              BNE      |L1.356|
000140  f1c20103          RSB      r1,r2,#3              ;65
000144  eb010a41          ADD      r10,r1,r1,LSL #1      ;65
000148  ebca1181          RSB      r1,r10,r1,LSL #6      ;65
00014c  eb000141          ADD      r1,r0,r1,LSL #1       ;65
000150  f815a001          LDRB     r10,[r5,r1]           ;65
000154  f1c60b07          RSB      r11,r6,#7             ;65
000158  fa0cfb0b          LSL      r11,r12,r11           ;65
00015c  ea2a0a0b          BIC      r10,r10,r11           ;65
000160  f805a001          STRB     r10,[r5,r1]           ;65
                  |L1.356|
000164  1c76              ADDS     r6,r6,#1              ;61
000166  b2b6              UXTH     r6,r6                 ;61
                  |L1.360|
000168  4546              CMP      r6,r8                 ;61
00016a  d3be              BCC      |L1.234|
                  |L1.364|
00016c  e097              B        |L1.670|
                  |L1.366|
00016e  17ce              ASRS     r6,r1,#31             ;25
000170  eb017b56          ADD      r11,r1,r6,LSR #29     ;25
000174  f3cb06cf          UBFX     r6,r11,#3,#16         ;51
000178  f1c60603          RSB      r6,r6,#3              ;70
00017c  eb060a46          ADD      r10,r6,r6,LSL #1      ;70
000180  ebca1686          RSB      r6,r10,r6,LSL #6      ;70
000184  f02b0a07          BIC      r10,r11,#7            ;28
000188  eba10a0a          SUB      r10,r1,r10            ;28
00018c  f04f0bff          MOV      r11,#0xff             ;70
000190  eb000646          ADD      r6,r0,r6,LSL #1       ;70
000194  fa2bfb0a          LSR      r11,r11,r10           ;70
000198  b934              CBNZ     r4,|L1.424|
00019a  f815a006          LDRB     r10,[r5,r6]           ;70
00019e  ea4a0a0b          ORR      r10,r10,r11           ;70
0001a2  f805a006          STRB     r10,[r5,r6]           ;70
0001a6  e010              B        |L1.458|
                  |L1.424|
0001a8  2c01              CMP      r4,#1                 ;71
0001aa  d106              BNE      |L1.442|
0001ac  f815a006          LDRB     r10,[r5,r6]           ;71
0001b0  ea8a0a0b          EOR      r10,r10,r11           ;71
0001b4  f805a006          STRB     r10,[r5,r6]           ;71
0001b8  e007              B        |L1.458|
                  |L1.442|
0001ba  2c02              CMP      r4,#2                 ;72
0001bc  d105              BNE      |L1.458|
0001be  f815a006          LDRB     r10,[r5,r6]           ;72
0001c2  ea2a0a0b          BIC      r10,r10,r11           ;72
0001c6  f805a006          STRB     r10,[r5,r6]           ;72
                  |L1.458|
0001ca  18ce              ADDS     r6,r1,r3              ;52
0001cc  17f1              ASRS     r1,r6,#31             ;52
0001ce  eb067b51          ADD      r11,r6,r1,LSR #29     ;52
0001d2  f3cb01cf          UBFX     r1,r11,#3,#16         ;52
0001d6  f1c10103          RSB      r1,r1,#3              ;74
0001da  eb010a41          ADD      r10,r1,r1,LSL #1      ;74
0001de  ebca1181          RSB      r1,r10,r1,LSL #6      ;74
0001e2  f02b0a07          BIC      r10,r11,#7            ;54
0001e6  eba6060a          SUB      r6,r6,r10             ;54
0001ea  b2b6              UXTH     r6,r6                 ;54
0001ec  f1c60a08          RSB      r10,r6,#8             ;74
0001f0  26ff              MOVS     r6,#0xff              ;70
0001f2  eb000141          ADD      r1,r0,r1,LSL #1       ;74
0001f6  fa06f60a          LSL      r6,r6,r10             ;74
0001fa  b934              CBNZ     r4,|L1.522|
0001fc  f815a001          LDRB     r10,[r5,r1]           ;74
000200  ea4a0a06          ORR      r10,r10,r6            ;74
000204  f805a001          STRB     r10,[r5,r1]           ;74
000208  e010              B        |L1.556|
                  |L1.522|
00020a  2c01              CMP      r4,#1                 ;75
00020c  d106              BNE      |L1.540|
00020e  f815a001          LDRB     r10,[r5,r1]           ;75
000212  ea8a0a06          EOR      r10,r10,r6            ;75
000216  f805a001          STRB     r10,[r5,r1]           ;75
00021a  e007              B        |L1.556|
                  |L1.540|
00021c  2c02              CMP      r4,#2                 ;76
00021e  d105              BNE      |L1.556|
000220  f815a001          LDRB     r10,[r5,r1]           ;76
000224  ea2a0a06          BIC      r10,r10,r6            ;76
000228  f805a001          STRB     r10,[r5,r1]           ;76
                  |L1.556|
00022c  1ab9              SUBS     r1,r7,r2              ;78
00022e  2901              CMP      r1,#1                 ;78
000230  dd35              BLE      |L1.670|
000232  1c51              ADDS     r1,r2,#1              ;80
000234  b289              UXTH     r1,r1                 ;80
000236  e030              B        |L1.666|
                  |L1.568|
000238  b974              CBNZ     r4,|L1.600|
00023a  f1c10603          RSB      r6,r1,#3              ;82
00023e  eb060a46          ADD      r10,r6,r6,LSL #1      ;82
000242  ebca1686          RSB      r6,r10,r6,LSL #6      ;82
000246  eb000646          ADD      r6,r0,r6,LSL #1       ;82
00024a  f815a006          LDRB     r10,[r5,r6]           ;82
00024e  f04f3aff          MOV      r10,#0xffffffff       ;82
000252  f805a006          STRB     r10,[r5,r6]           ;82
000256  e01e              B        |L1.662|
                  |L1.600|
000258  2c01              CMP      r4,#1                 ;83
00025a  d10e              BNE      |L1.634|
00025c  f1c10603          RSB      r6,r1,#3              ;83
000260  eb060a46          ADD      r10,r6,r6,LSL #1      ;83
000264  ebca1686          RSB      r6,r10,r6,LSL #6      ;83
000268  eb000646          ADD      r6,r0,r6,LSL #1       ;83
00026c  f815a006          LDRB     r10,[r5,r6]           ;83
000270  ea6f0a0a          MVN      r10,r10               ;83
000274  f805a006          STRB     r10,[r5,r6]           ;83
000278  e00d              B        |L1.662|
                  |L1.634|
00027a  2c02              CMP      r4,#2                 ;84
00027c  d10b              BNE      |L1.662|
00027e  f1c10603          RSB      r6,r1,#3              ;84
000282  eb060b46          ADD      r11,r6,r6,LSL #1      ;84
000286  ebcb1686          RSB      r6,r11,r6,LSL #6      ;84
00028a  f04f0a00          MOV      r10,#0                ;84
00028e  eb000646          ADD      r6,r0,r6,LSL #1       ;84
000292  f805a006          STRB     r10,[r5,r6]           ;84
                  |L1.662|
000296  1c49              ADDS     r1,r1,#1              ;80
000298  b289              UXTH     r1,r1                 ;80
                  |L1.666|
00029a  42b9              CMP      r1,r7                 ;80
00029c  d3cc              BCC      |L1.568|
                  |L1.670|
00029e  2b00              CMP      r3,#0                 ;90
0002a0  f6bfaf08          BGE      |L1.180|
0002a4  42ba              CMP      r2,r7                 ;93
0002a6  d13d              BNE      |L1.804|
0002a8  f1a90901          SUB      r9,r9,#1              ;95
0002ac  fa1ff189          UXTH     r1,r9                 ;95
0002b0  e035              B        |L1.798|
                  |L1.690|
0002b2  b97c              CBNZ     r4,|L1.724|
0002b4  f1c20303          RSB      r3,r2,#3              ;97
0002b8  eb030643          ADD      r6,r3,r3,LSL #1       ;97
0002bc  ebc61383          RSB      r3,r6,r3,LSL #6       ;97
0002c0  eb000343          ADD      r3,r0,r3,LSL #1       ;97
0002c4  5cee              LDRB     r6,[r5,r3]            ;97
0002c6  f1c10707          RSB      r7,r1,#7              ;97
0002ca  fa0cf707          LSL      r7,r12,r7             ;97
0002ce  433e              ORRS     r6,r6,r7              ;97
0002d0  54ee              STRB     r6,[r5,r3]            ;97
0002d2  e022              B        |L1.794|
                  |L1.724|
0002d4  2c01              CMP      r4,#1                 ;98
0002d6  d10f              BNE      |L1.760|
0002d8  f1c20303          RSB      r3,r2,#3              ;98
0002dc  eb030643          ADD      r6,r3,r3,LSL #1       ;98
0002e0  ebc61383          RSB      r3,r6,r3,LSL #6       ;98
0002e4  eb000343          ADD      r3,r0,r3,LSL #1       ;98
0002e8  5cef              LDRB     r7,[r5,r3]            ;98
0002ea  f1c10607          RSB      r6,r1,#7              ;98
0002ee  fa0cf606          LSL      r6,r12,r6             ;98
0002f2  4077              EORS     r7,r7,r6              ;98
0002f4  54ef              STRB     r7,[r5,r3]            ;98
0002f6  e010              B        |L1.794|
                  |L1.760|
0002f8  2c02              CMP      r4,#2                 ;99
0002fa  d10e              BNE      |L1.794|
0002fc  f1c20303          RSB      r3,r2,#3              ;99
000300  eb030643          ADD      r6,r3,r3,LSL #1       ;99
000304  ebc61383          RSB      r3,r6,r3,LSL #6       ;99
000308  eb000343          ADD      r3,r0,r3,LSL #1       ;99
00030c  5cee              LDRB     r6,[r5,r3]            ;99
00030e  f1c10707          RSB      r7,r1,#7              ;99
000312  fa0cf707          LSL      r7,r12,r7             ;99
000316  43be              BICS     r6,r6,r7              ;99
000318  54ee              STRB     r6,[r5,r3]            ;99
                  |L1.794|
00031a  1e49              SUBS     r1,r1,#1              ;95
00031c  b289              UXTH     r1,r1                 ;95
                  |L1.798|
00031e  4541              CMP      r1,r8                 ;95
000320  d2c7              BCS      |L1.690|
                  |L1.802|
000322  e6a9              B        |L1.120|
                  |L1.804|
000324  b97c              CBNZ     r4,|L1.838|
000326  f1c20103          RSB      r1,r2,#3              ;104
00032a  eb010341          ADD      r3,r1,r1,LSL #1       ;104
00032e  ebc31181          RSB      r1,r3,r1,LSL #6       ;104
000332  eb000141          ADD      r1,r0,r1,LSL #1       ;104
000336  5c6b              LDRB     r3,[r5,r1]            ;104
000338  f1c90608          RSB      r6,r9,#8              ;104
00033c  fa0ef606          LSL      r6,lr,r6              ;104
000340  4333              ORRS     r3,r3,r6              ;104
000342  546b              STRB     r3,[r5,r1]            ;104
000344  e022              B        |L1.908|
                  |L1.838|
000346  2c01              CMP      r4,#1                 ;105
000348  d10f              BNE      |L1.874|
00034a  f1c20103          RSB      r1,r2,#3              ;105
00034e  eb010341          ADD      r3,r1,r1,LSL #1       ;105
000352  ebc31181          RSB      r1,r3,r1,LSL #6       ;105
000356  eb000141          ADD      r1,r0,r1,LSL #1       ;105
00035a  5c6b              LDRB     r3,[r5,r1]            ;105
00035c  f1c90608          RSB      r6,r9,#8              ;105
000360  fa0ef606          LSL      r6,lr,r6              ;105
000364  4073              EORS     r3,r3,r6              ;105
000366  546b              STRB     r3,[r5,r1]            ;105
000368  e010              B        |L1.908|
                  |L1.874|
00036a  2c02              CMP      r4,#2                 ;106
00036c  d10e              BNE      |L1.908|
00036e  f1c20103          RSB      r1,r2,#3              ;106
000372  eb010341          ADD      r3,r1,r1,LSL #1       ;106
000376  ebc31181          RSB      r1,r3,r1,LSL #6       ;106
00037a  eb000141          ADD      r1,r0,r1,LSL #1       ;106
00037e  5c6b              LDRB     r3,[r5,r1]            ;106
000380  f1c90608          RSB      r6,r9,#8              ;106
000384  fa0ef606          LSL      r6,lr,r6              ;106
000388  43b3              BICS     r3,r3,r6              ;106
00038a  546b              STRB     r3,[r5,r1]            ;106
                  |L1.908|
00038c  b974              CBNZ     r4,|L1.940|
00038e  f1c70103          RSB      r1,r7,#3              ;108
000392  eb010341          ADD      r3,r1,r1,LSL #1       ;108
000396  ebc31181          RSB      r1,r3,r1,LSL #6       ;108
00039a  eb000141          ADD      r1,r0,r1,LSL #1       ;108
00039e  5c6b              LDRB     r3,[r5,r1]            ;108
0003a0  fa2efe08          LSR      lr,lr,r8              ;108
0003a4  ea43030e          ORR      r3,r3,lr              ;108
0003a8  546b              STRB     r3,[r5,r1]            ;108
0003aa  e020              B        |L1.1006|
                  |L1.940|
0003ac  2c01              CMP      r4,#1                 ;109
0003ae  d10e              BNE      |L1.974|
0003b0  f1c70103          RSB      r1,r7,#3              ;109
0003b4  eb010341          ADD      r3,r1,r1,LSL #1       ;109
0003b8  ebc31181          RSB      r1,r3,r1,LSL #6       ;109
0003bc  eb000141          ADD      r1,r0,r1,LSL #1       ;109
0003c0  5c6b              LDRB     r3,[r5,r1]            ;109
0003c2  fa2efe08          LSR      lr,lr,r8              ;109
0003c6  ea83030e          EOR      r3,r3,lr              ;109
0003ca  546b              STRB     r3,[r5,r1]            ;109
0003cc  e00f              B        |L1.1006|
                  |L1.974|
0003ce  2c02              CMP      r4,#2                 ;110
0003d0  d10d              BNE      |L1.1006|
0003d2  f1c70103          RSB      r1,r7,#3              ;110
0003d6  eb010341          ADD      r3,r1,r1,LSL #1       ;110
0003da  ebc31181          RSB      r1,r3,r1,LSL #6       ;110
0003de  eb000141          ADD      r1,r0,r1,LSL #1       ;110
0003e2  5c6b              LDRB     r3,[r5,r1]            ;110
0003e4  fa2efe08          LSR      lr,lr,r8              ;110
0003e8  ea23030e          BIC      r3,r3,lr              ;110
0003ec  546b              STRB     r3,[r5,r1]            ;110
                  |L1.1006|
0003ee  1bd1              SUBS     r1,r2,r7              ;112
0003f0  2901              CMP      r1,#1                 ;112
0003f2  dd96              BLE      |L1.802|
0003f4  1e52              SUBS     r2,r2,#1              ;114
0003f6  b291              UXTH     r1,r2                 ;114
0003f8  e02c              B        |L1.1108|
                  |L1.1018|
0003fa  b97c              CBNZ     r4,|L1.1052|
0003fc  f1c10203          RSB      r2,r1,#3              ;116
000400  eb020342          ADD      r3,r2,r2,LSL #1       ;116
000404  ebc31282          RSB      r2,r3,r2,LSL #6       ;116
000408  eb000242          ADD      r2,r0,r2,LSL #1       ;116
00040c  5cab              LDRB     r3,[r5,r2]            ;116
00040e  f04f33ff          MOV      r3,#0xffffffff        ;116
000412  54ab              STRB     r3,[r5,r2]            ;116
000414  e01c              B        |L1.1104|
000416  0000              DCW      0x0000
                  |L1.1048|
                          DCD      lcd_bitmap
                  |L1.1052|
00041c  2c01              CMP      r4,#1                 ;117
00041e  d10b              BNE      |L1.1080|
000420  f1c10203          RSB      r2,r1,#3              ;117
000424  eb020342          ADD      r3,r2,r2,LSL #1       ;117
000428  ebc31282          RSB      r2,r3,r2,LSL #6       ;117
00042c  eb000242          ADD      r2,r0,r2,LSL #1       ;117
000430  5cab              LDRB     r3,[r5,r2]            ;117
000432  43db              MVNS     r3,r3                 ;117
000434  54ab              STRB     r3,[r5,r2]            ;117
000436  e00b              B        |L1.1104|
                  |L1.1080|
000438  2c02              CMP      r4,#2                 ;118
00043a  d109              BNE      |L1.1104|
00043c  f1c10203          RSB      r2,r1,#3              ;118
000440  eb020642          ADD      r6,r2,r2,LSL #1       ;118
000444  ebc61282          RSB      r2,r6,r2,LSL #6       ;118
000448  2300              MOVS     r3,#0                 ;118
00044a  eb000242          ADD      r2,r0,r2,LSL #1       ;118
00044e  54ab              STRB     r3,[r5,r2]            ;118
                  |L1.1104|
000450  1e49              SUBS     r1,r1,#1              ;114
000452  b289              UXTH     r1,r1                 ;114
                  |L1.1108|
000454  42b9              CMP      r1,r7                 ;114
000456  d8d0              BHI      |L1.1018|
000458  e60e              B        |L1.120|
;;;126    //---------------------------------------------
                          ENDP

                  draw_rectangle PROC
;;;127    void draw_rectangle(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char solid,char inverse)
00045a  e92d47f8          PUSH     {r3-r10,lr}
;;;128    {
00045e  4604              MOV      r4,r0
000460  e9dd0809          LDRD     r0,r8,[sp,#0x24]
000464  460f              MOV      r7,r1
000466  4692              MOV      r10,r2
000468  461e              MOV      r6,r3
;;;129    
;;;130    signed short i;
;;;131    /*draw(x_b,y_b,0,y_o,inverse);
;;;132    draw(x_b,y_b+y_o,x_o,0,inverse);
;;;133    draw(x_b+x_o,y_b+y_o,0,-y_o,inverse);
;;;134    draw(x_b+x_o,y_b,-x_o,0,inverse);*/
;;;135    
;;;136    if(solid)
;;;137    	{
;;;138    	for(i=x_b;i<=(x_b+x_o);i++)
00046a  eb04050a          ADD      r5,r4,r10
00046e  b170              CBZ      r0,|L1.1166|
000470  e009              B        |L1.1158|
                  |L1.1138|
;;;139    		{
;;;140    		draw(i,y_b,0,y_o,inverse);
000472  4633              MOV      r3,r6
000474  2200              MOVS     r2,#0
000476  4639              MOV      r1,r7
000478  4620              MOV      r0,r4
00047a  f8cd8000          STR      r8,[sp,#0]
00047e  f7fffffe          BL       draw
000482  1c64              ADDS     r4,r4,#1              ;138
000484  b224              SXTH     r4,r4                 ;138
                  |L1.1158|
000486  42a5              CMP      r5,r4                 ;138
000488  daf3              BGE      |L1.1138|
                  |L1.1162|
;;;141    		}
;;;142    	}
;;;143    else
;;;144    	{
;;;145    	draw(x_b,y_b,0,y_o,inverse);
;;;146    	draw(x_b,y_b+y_o-1,x_o,0,inverse);
;;;147    	draw(x_b+x_o-1,y_b+y_o,0,-y_o,inverse);
;;;148    	draw(x_b+x_o-1,y_b,-x_o,0,inverse);	
;;;149    	}	
;;;150    
;;;151    }
00048a  e8bd87f8          POP      {r3-r10,pc}
                  |L1.1166|
00048e  4633              MOV      r3,r6                 ;145
000490  2200              MOVS     r2,#0                 ;145
000492  4639              MOV      r1,r7                 ;145
000494  4620              MOV      r0,r4                 ;145
000496  f8cd8000          STR      r8,[sp,#0]            ;145
00049a  f7fffffe          BL       draw
00049e  eb070906          ADD      r9,r7,r6              ;146
0004a2  f1a90001          SUB      r0,r9,#1              ;146
0004a6  b201              SXTH     r1,r0                 ;146
0004a8  2300              MOVS     r3,#0                 ;146
0004aa  4652              MOV      r2,r10                ;146
0004ac  4620              MOV      r0,r4                 ;146
0004ae  f8cd8000          STR      r8,[sp,#0]            ;146
0004b2  f7fffffe          BL       draw
0004b6  1e6d              SUBS     r5,r5,#1              ;147
0004b8  4270              RSBS     r0,r6,#0              ;147
0004ba  b22c              SXTH     r4,r5                 ;147
0004bc  b203              SXTH     r3,r0                 ;147
0004be  fa0ff189          SXTH     r1,r9                 ;147
0004c2  2200              MOVS     r2,#0                 ;147
0004c4  4620              MOV      r0,r4                 ;147
0004c6  f8cd8000          STR      r8,[sp,#0]            ;147
0004ca  f7fffffe          BL       draw
0004ce  f1ca0000          RSB      r0,r10,#0             ;148
0004d2  b202              SXTH     r2,r0                 ;148
0004d4  2300              MOVS     r3,#0                 ;148
0004d6  4639              MOV      r1,r7                 ;148
0004d8  4620              MOV      r0,r4                 ;148
0004da  f8cd8000          STR      r8,[sp,#0]            ;148
0004de  f7fffffe          BL       draw
0004e2  e7d2              B        |L1.1162|
;;;152    
                          ENDP

                  draw_ptr PROC
;;;153    //---------------------------------------------
;;;154    void draw_ptr(char x_b,char y_b,char ptr,char vol)
0004e4  e92d41f8          PUSH     {r3-r8,lr}
;;;155    {
0004e8  4607              MOV      r7,r0
0004ea  460e              MOV      r6,r1
0004ec  461d              MOV      r5,r3
;;;156    char i;
;;;157    if(ptr==0)
0004ee  b9ba              CBNZ     r2,|L1.1312|
;;;158    	{
;;;159    	for(i=0;i<vol;i++)
0004f0  2400              MOVS     r4,#0
0004f2  e011              B        |L1.1304|
                  |L1.1268|
;;;160    		{
;;;161    		draw(x_b,y_b+i,-(vol-i),0,0);
0004f4  2300              MOVS     r3,#0
0004f6  eb060804          ADD      r8,r6,r4
0004fa  1b62              SUBS     r2,r4,r5
0004fc  4641              MOV      r1,r8
0004fe  4638              MOV      r0,r7
000500  9300              STR      r3,[sp,#0]
000502  f7fffffe          BL       draw
;;;162    		draw(x_b,y_b+i,(vol-i),0,0);
000506  2300              MOVS     r3,#0
000508  1b2a              SUBS     r2,r5,r4
00050a  4641              MOV      r1,r8
00050c  4638              MOV      r0,r7
00050e  9300              STR      r3,[sp,#0]
000510  f7fffffe          BL       draw
000514  1c64              ADDS     r4,r4,#1              ;159
000516  b2e4              UXTB     r4,r4                 ;159
                  |L1.1304|
000518  42ac              CMP      r4,r5                 ;159
00051a  d3eb              BCC      |L1.1268|
                  |L1.1308|
;;;163    		}
;;;164    	}
;;;165    else if(ptr==2)
;;;166    	{
;;;167    	for(i=0;i<vol;i++)
;;;168    		{
;;;169    		draw(x_b,y_b-i,-(vol-i),0,0);
;;;170    		draw(x_b,y_b-i,(vol-i),0,0);
;;;171    		}
;;;172    	}	
;;;173    }
00051c  e8bd81f8          POP      {r3-r8,pc}
                  |L1.1312|
000520  2a02              CMP      r2,#2                 ;165
000522  d1fb              BNE      |L1.1308|
000524  2400              MOVS     r4,#0                 ;167
000526  e011              B        |L1.1356|
                  |L1.1320|
000528  2300              MOVS     r3,#0                 ;169
00052a  eba60804          SUB      r8,r6,r4              ;169
00052e  1b62              SUBS     r2,r4,r5              ;169
000530  4641              MOV      r1,r8                 ;169
000532  4638              MOV      r0,r7                 ;169
000534  9300              STR      r3,[sp,#0]            ;169
000536  f7fffffe          BL       draw
00053a  2300              MOVS     r3,#0                 ;170
00053c  1b2a              SUBS     r2,r5,r4              ;170
00053e  4641              MOV      r1,r8                 ;170
000540  4638              MOV      r0,r7                 ;170
000542  9300              STR      r3,[sp,#0]            ;170
000544  f7fffffe          BL       draw
000548  1c64              ADDS     r4,r4,#1              ;167
00054a  b2e4              UXTB     r4,r4                 ;167
                  |L1.1356|
00054c  42ac              CMP      r4,r5                 ;167
00054e  d3eb              BCC      |L1.1320|
000550  e7e4              B        |L1.1308|
;;;174    
                          ENDP

                  plot PROC
;;;175    //-----------------------------------------------
;;;176    void plot(signed short x_b,signed short y_b,unsigned long data,signed short len,char inverse)
000552  e92d47f8          PUSH     {r3-r10,lr}
;;;177    {
000556  f8dd9024          LDR      r9,[sp,#0x24]
;;;178    //unsigned short num_byte;
;;;179    //signed short byte_offset;
;;;180    //unsigned short x_target;
;;;181    //unsigned short i;
;;;182    char num_bite;
;;;183    unsigned short /*y_begin*/y_bit_begin;
;;;184    //unsigned short y_target,y_bit_target;
;;;185    unsigned long data1/*,data2*/;
;;;186    char data1_0,data1_1,data1_2,data1_3;
;;;187    
;;;188    data1=0xffffffffUL;
00055a  f04f34ff          MOV      r4,#0xffffffff
;;;189    data1<<=(32-len);
00055e  f1c30320          RSB      r3,r3,#0x20
000562  409c              LSLS     r4,r4,r3
000564  9400              STR      r4,[sp,#0]
;;;190    data1&=data;
000566  9b00              LDR      r3,[sp,#0]
000568  4013              ANDS     r3,r3,r2
00056a  9300              STR      r3,[sp,#0]
;;;191    data1=data1>>y_b;
00056c  9a00              LDR      r2,[sp,#0]
00056e  40ca              LSRS     r2,r2,r1
000570  9200              STR      r2,[sp,#0]
;;;192    
;;;193    data1_0=*((char*)&data1);
000572  f89d2000          LDRB     r2,[sp,#0]
;;;194    data1_1=*(((char*)&data1)+1);
000576  f89d3001          LDRB     r3,[sp,#1]
;;;195    data1_2=*(((char*)&data1)+2);
00057a  f89d4002          LDRB     r4,[sp,#2]
;;;196    data1_3=*(((char*)&data1)+3);
00057e  f89d5003          LDRB     r5,[sp,#3]
;;;197    
;;;198    if(!inverse)
;;;199    	{
;;;200    	lcd_bitmap[x_b]|=data1_0;
000582  f8dfa304          LDR      r10,|L1.2184|
000586  f1b90f00          CMP      r9,#0                 ;198
00058a  eb0a0100          ADD      r1,r10,r0
00058e  f81a6000          LDRB     r6,[r10,r0]
;;;201    	lcd_bitmap[122+x_b]|=data1_1;
000592  f891707a          LDRB     r7,[r1,#0x7a]
;;;202    	lcd_bitmap[244+x_b]|=data1_2;
000596  f891c0f4          LDRB     r12,[r1,#0xf4]
;;;203    	lcd_bitmap[366+x_b]|=data1_3;
00059a  f891816e          LDRB     r8,[r1,#0x16e]
00059e  d10e              BNE      |L1.1470|
0005a0  4316              ORRS     r6,r6,r2              ;200
0005a2  f80a6000          STRB     r6,[r10,r0]           ;200
0005a6  431f              ORRS     r7,r7,r3              ;201
0005a8  f881707a          STRB     r7,[r1,#0x7a]         ;201
0005ac  ea4c0c04          ORR      r12,r12,r4            ;202
0005b0  f881c0f4          STRB     r12,[r1,#0xf4]        ;202
0005b4  ea480805          ORR      r8,r8,r5
0005b8  f881816e          STRB     r8,[r1,#0x16e]
;;;204    	}
;;;205    else if(inverse)
;;;206    	{
;;;207    	lcd_bitmap[x_b]^=data1_0;
;;;208    	lcd_bitmap[122+x_b]^=data1_1;
;;;209    	lcd_bitmap[244+x_b]^=data1_2;
;;;210    	lcd_bitmap[366+x_b]^=data1_3;
;;;211    	}
;;;212    
;;;213    }	
0005bc  e765              B        |L1.1162|
                  |L1.1470|
0005be  4056              EORS     r6,r6,r2              ;207
0005c0  f80a6000          STRB     r6,[r10,r0]           ;207
0005c4  405f              EORS     r7,r7,r3              ;208
0005c6  f881707a          STRB     r7,[r1,#0x7a]         ;208
0005ca  ea8c0c04          EOR      r12,r12,r4            ;209
0005ce  f881c0f4          STRB     r12,[r1,#0xf4]        ;209
0005d2  ea880805          EOR      r8,r8,r5              ;210
0005d6  f881816e          STRB     r8,[r1,#0x16e]        ;210
0005da  e756              B        |L1.1162|
;;;214    
                          ENDP

                  graphic_print PROC
;;;216    //-----------------------------------------------
;;;217    void graphic_print(signed short x_b,signed short y_b,signed short x_l,signed short y_l,signed short x_d,signed short y_d,const char* adress,char inverse)
0005dc  e92d4ffc          PUSH     {r2-r11,lr}
;;;218    {
0005e0  e9dd8b0d          LDRD     r8,r11,[sp,#0x34]
0005e4  9d0c              LDR      r5,[sp,#0x30]
0005e6  4606              MOV      r6,r0
0005e8  4689              MOV      r9,r1
0005ea  4617              MOV      r7,r2
0005ec  469a              MOV      r10,r3
;;;219    signed short i;
;;;220    
;;;221    for(i=0;i<x_l;i++)
0005ee  2400              MOVS     r4,#0
0005f0  e01c              B        |L1.1580|
                  |L1.1522|
;;;222    	{
;;;223    	long data;
;;;224    	
;;;225    	*(((char*)&data)+3)=adress[(i*y_d)+y_d-1];
0005f2  fb048005          MLA      r0,r4,r5,r8
0005f6  1e69              SUBS     r1,r5,#1
0005f8  5c41              LDRB     r1,[r0,r1]
0005fa  f88d1007          STRB     r1,[sp,#7]
;;;226    	*(((char*)&data)+2)=adress[(i*y_d)+y_d-2];
0005fe  1ea9              SUBS     r1,r5,#2
000600  5c41              LDRB     r1,[r0,r1]
000602  f88d1006          STRB     r1,[sp,#6]
;;;227    	*(((char*)&data)+1)=adress[(i*y_d)+y_d-3];
000606  1ee9              SUBS     r1,r5,#3
000608  5c41              LDRB     r1,[r0,r1]
00060a  f88d1005          STRB     r1,[sp,#5]
;;;228    	*((char*)&data)=adress[(i*y_d)+y_d-4];
00060e  1f29              SUBS     r1,r5,#4
000610  5c40              LDRB     r0,[r0,r1]
000612  f88d0004          STRB     r0,[sp,#4]
;;;229    	
;;;230    	//data=0x08000000;
;;;231    	
;;;232    	plot(x_b+i,y_b,data,y_l,inverse);
000616  1930              ADDS     r0,r6,r4
000618  b200              SXTH     r0,r0
00061a  4653              MOV      r3,r10
00061c  f8cdb000          STR      r11,[sp,#0]
000620  4649              MOV      r1,r9
000622  9a01              LDR      r2,[sp,#4]
000624  f7fffffe          BL       plot
000628  1c64              ADDS     r4,r4,#1              ;221
00062a  b224              SXTH     r4,r4                 ;221
                  |L1.1580|
00062c  42bc              CMP      r4,r7                 ;221
00062e  dbe0              BLT      |L1.1522|
;;;233    	}
;;;234    }
000630  e8bd8ffc          POP      {r2-r11,pc}
;;;235    
                          ENDP

                  graphic_print_text PROC
;;;236    //-----------------------------------------------
;;;237    void graphic_print_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
000634  e92d4ff0          PUSH     {r4-r11,lr}
;;;238    {
000638  b095              SUB      sp,sp,#0x54
00063a  460e              MOV      r6,r1
00063c  e9ddc71f          LDRD     r12,r7,[sp,#0x7c]
000640  991e              LDR      r1,[sp,#0x78]
000642  4605              MOV      r5,r0
;;;239    signed short i;
;;;240    char buffer[10];
;;;241    char bitmap_buffer[60];
;;;242    for(i=0;i<10;i++)
000644  2000              MOVS     r0,#0
;;;243    	{
;;;244    	buffer[i]=' ';
000646  f04f0820          MOV      r8,#0x20
00064a  ac12              ADD      r4,sp,#0x48           ;240
                  |L1.1612|
00064c  f8048000          STRB     r8,[r4,r0]
000650  1c40              ADDS     r0,r0,#1              ;242
000652  b200              SXTH     r0,r0                 ;242
000654  280a              CMP      r0,#0xa               ;242
000656  dbf9              BLT      |L1.1612|
;;;245    	}
;;;246    for(i=0;i<num;i++)
000658  2000              MOVS     r0,#0
00065a  e005              B        |L1.1640|
                  |L1.1628|
;;;247    	{
;;;248    	buffer[i]=bgnd[i];
00065c  f8129000          LDRB     r9,[r2,r0]
000660  f8049000          STRB     r9,[r4,r0]
000664  1c40              ADDS     r0,r0,#1              ;246
000666  b200              SXTH     r0,r0                 ;246
                  |L1.1640|
000668  4298              CMP      r0,r3                 ;246
00066a  dbf7              BLT      |L1.1628|
;;;249    	}	
;;;250    	
;;;251    {	
;;;252    signed char i;
;;;253    //char n;
;;;254    char s[10];
;;;255    char minus='+';
00066c  f04f092b          MOV      r9,#0x2b
;;;256    char zero_on;
;;;257    char simb_num;
;;;258    
;;;259    if(data<0)
000670  2900              CMP      r1,#0
000672  da03              BGE      |L1.1660|
;;;260    	{
;;;261    	data=-data;
000674  4248              RSBS     r0,r1,#0
000676  b201              SXTH     r1,r0
;;;262    	minus='-';
000678  f04f092d          MOV      r9,#0x2d
                  |L1.1660|
;;;263    	}
;;;264    
;;;265    for(i=0;i<10;i++)
00067c  2000              MOVS     r0,#0
;;;266    	{
;;;267    	s[i]=data%10;
00067e  f04f0b0a          MOV      r11,#0xa
000682  466a              MOV      r2,sp                 ;254
                  |L1.1668|
000684  fb91fafb          SDIV     r10,r1,r11
000688  fb0b111a          MLS      r1,r11,r10,r1
00068c  5411              STRB     r1,[r2,r0]
;;;268    	data/=10;
00068e  fa0ff18a          SXTH     r1,r10
000692  1c40              ADDS     r0,r0,#1              ;265
000694  b240              SXTB     r0,r0                 ;265
000696  280a              CMP      r0,#0xa               ;265
000698  dbf4              BLT      |L1.1668|
;;;269    	}   
;;;270    
;;;271    zero_on=1;
00069a  f04f0a01          MOV      r10,#1
;;;272    simb_num=0;
00069e  2100              MOVS     r1,#0
;;;273    
;;;274    for (i=9;i>=0;i--)
0006a0  2009              MOVS     r0,#9
                  |L1.1698|
;;;275    	{
;;;276    	if(zero_on&&(!s[i])&&(i>(des)))
0006a2  f1ba0f00          CMP      r10,#0
0006a6  d009              BEQ      |L1.1724|
0006a8  f812b000          LDRB     r11,[r2,r0]
0006ac  f1bb0f00          CMP      r11,#0
0006b0  d104              BNE      |L1.1724|
0006b2  4560              CMP      r0,r12
0006b4  dd02              BLE      |L1.1724|
;;;277    	     {
;;;278    	     s[i]=0x20;
0006b6  f8028000          STRB     r8,[r2,r0]
0006ba  e009              B        |L1.1744|
                  |L1.1724|
;;;279    	     }
;;;280    	else 
;;;281    	     {
;;;282    	     s[i]=s[i]+0x30;
0006bc  f812a000          LDRB     r10,[r2,r0]
0006c0  f10a0a30          ADD      r10,r10,#0x30
0006c4  f802a000          STRB     r10,[r2,r0]
;;;283    	     zero_on=0;
0006c8  f04f0a00          MOV      r10,#0
;;;284    	     simb_num++;
0006cc  1c49              ADDS     r1,r1,#1
0006ce  b2c9              UXTB     r1,r1
                  |L1.1744|
0006d0  1e40              SUBS     r0,r0,#1              ;274
0006d2  b240              SXTB     r0,r0                 ;274
0006d4  2800              CMP      r0,#0                 ;274
0006d6  dae4              BGE      |L1.1698|
;;;285    	     }
;;;286    	 }
;;;287    	          
;;;288    if(minus=='-')	
0006d8  f1b90f2d          CMP      r9,#0x2d
0006dc  d104              BNE      |L1.1768|
;;;289         {
;;;290         s[simb_num++]=minus; 
0006de  4608              MOV      r0,r1
0006e0  1c49              ADDS     r1,r1,#1
0006e2  b2c9              UXTB     r1,r1
0006e4  f8029000          STRB     r9,[r2,r0]
                  |L1.1768|
;;;291         }    
;;;292    if(des)
0006e8  f1bc0f00          CMP      r12,#0
0006ec  d010              BEQ      |L1.1808|
;;;293         {
;;;294         for(i=simb_num;i>des;i--)
0006ee  b248              SXTB     r0,r1
0006f0  e007              B        |L1.1794|
                  |L1.1778|
;;;295              {
;;;296              s[i]=s[i-1];
0006f2  eb020800          ADD      r8,r2,r0
0006f6  f8188c01          LDRB     r8,[r8,#-1]
0006fa  f8028000          STRB     r8,[r2,r0]
0006fe  1e40              SUBS     r0,r0,#1              ;294
000700  b240              SXTB     r0,r0                 ;294
                  |L1.1794|
000702  4560              CMP      r0,r12                ;294
000704  dcf5              BGT      |L1.1778|
;;;297              }
;;;298         s[des]='.';
000706  202e              MOVS     r0,#0x2e
000708  f802000c          STRB     r0,[r2,r12]
;;;299         simb_num++;     
00070c  1c49              ADDS     r1,r1,#1
00070e  b2c9              UXTB     r1,r1
                  |L1.1808|
;;;300         }
;;;301    	
;;;302    for (i=0;i<simb_num;i++)
000710  2000              MOVS     r0,#0
000712  e008              B        |L1.1830|
                  |L1.1812|
;;;303    	{
;;;304         buffer[pos-1-i]=s[i];
000714  eba70800          SUB      r8,r7,r0
000718  f812c000          LDRB     r12,[r2,r0]
00071c  44a0              ADD      r8,r8,r4
00071e  f808cc01          STRB     r12,[r8,#-1]
000722  1c40              ADDS     r0,r0,#1              ;302
000724  b240              SXTB     r0,r0                 ;302
                  |L1.1830|
000726  4288              CMP      r0,r1                 ;302
000728  dbf4              BLT      |L1.1812|
;;;305    	}
;;;306    }	
;;;307    	
;;;308    		
;;;309    for(i=0;i<num;i++)
00072a  2000              MOVS     r0,#0
00072c  af03              ADD      r7,sp,#0xc            ;241
00072e  e022              B        |L1.1910|
                  |L1.1840|
;;;310    	{
;;;311    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
000730  5c21              LDRB     r1,[r4,r0]
000732  f8dfc158          LDR      r12,|L1.2188|
000736  eb010141          ADD      r1,r1,r1,LSL #1
00073a  f81c8011          LDRB     r8,[r12,r1,LSL #1]
00073e  eb000240          ADD      r2,r0,r0,LSL #1
000742  f8078012          STRB     r8,[r7,r2,LSL #1]
;;;312    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
000746  eb0c0141          ADD      r1,r12,r1,LSL #1
00074a  f891c001          LDRB     r12,[r1,#1]
00074e  eb070242          ADD      r2,r7,r2,LSL #1
000752  f882c001          STRB     r12,[r2,#1]
;;;313    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
000756  f891c002          LDRB     r12,[r1,#2]
00075a  f882c002          STRB     r12,[r2,#2]
;;;314    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
00075e  f891c003          LDRB     r12,[r1,#3]
000762  f882c003          STRB     r12,[r2,#3]
;;;315    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
000766  f891c004          LDRB     r12,[r1,#4]
00076a  f882c004          STRB     r12,[r2,#4]
;;;316    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
00076e  7949              LDRB     r1,[r1,#5]
000770  7151              STRB     r1,[r2,#5]
000772  1c40              ADDS     r0,r0,#1              ;309
000774  b200              SXTH     r0,r0                 ;309
                  |L1.1910|
000776  4298              CMP      r0,r3                 ;309
000778  dbda              BLT      |L1.1840|
;;;317    	}
;;;318    for(i=0;i<(num*6);i++)
00077a  2400              MOVS     r4,#0
00077c  eb030843          ADD      r8,r3,r3,LSL #1
000780  e00d              B        |L1.1950|
                  |L1.1922|
;;;319    	{
;;;320    	long data;
;;;321    	
;;;322    	*(((char*)&data)+3)=bitmap_buffer[i];
000782  5d38              LDRB     r0,[r7,r4]
000784  f88d000b          STRB     r0,[sp,#0xb]
;;;323    	
;;;324    	//data=0x08000000;
;;;325    	
;;;326    	plot(x_b+i,y_b,data,8,inverse);
000788  9b21              LDR      r3,[sp,#0x84]
00078a  1928              ADDS     r0,r5,r4
00078c  9300              STR      r3,[sp,#0]
00078e  b200              SXTH     r0,r0
000790  2308              MOVS     r3,#8
000792  4631              MOV      r1,r6
000794  9a02              LDR      r2,[sp,#8]
000796  f7fffffe          BL       plot
00079a  1c64              ADDS     r4,r4,#1              ;318
00079c  b224              SXTH     r4,r4                 ;318
                  |L1.1950|
00079e  ebb40f48          CMP      r4,r8,LSL #1          ;318
0007a2  dbee              BLT      |L1.1922|
;;;327    	}
;;;328    }
0007a4  b015              ADD      sp,sp,#0x54
0007a6  e467              B        |L1.120|
;;;329    
                          ENDP

                  graphic_print_text_text PROC
;;;330    //-----------------------------------------------
;;;331    void graphic_print_text_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
0007a8  e92d43f0          PUSH     {r4-r9,lr}
;;;332    {
0007ac  b095              SUB      sp,sp,#0x54
0007ae  460e              MOV      r6,r1
0007b0  9f1f              LDR      r7,[sp,#0x7c]
0007b2  991c              LDR      r1,[sp,#0x70]
0007b4  4605              MOV      r5,r0
;;;333    signed short i;
;;;334    char buffer[10];
;;;335    char bitmap_buffer[60];
;;;336    for(i=0;i<10;i++)
0007b6  2000              MOVS     r0,#0
;;;337    	{
;;;338    	buffer[i]=' ';
0007b8  f04f0c20          MOV      r12,#0x20
0007bc  ac12              ADD      r4,sp,#0x48           ;334
                  |L1.1982|
0007be  f804c000          STRB     r12,[r4,r0]
0007c2  1c40              ADDS     r0,r0,#1              ;336
0007c4  b200              SXTH     r0,r0                 ;336
0007c6  280a              CMP      r0,#0xa               ;336
0007c8  dbf9              BLT      |L1.1982|
;;;339    	}
;;;340    for(i=0;i<num;i++)
0007ca  2000              MOVS     r0,#0
0007cc  e005              B        |L1.2010|
                  |L1.1998|
;;;341    	{
;;;342    	buffer[i]=bgnd[i];
0007ce  f812c000          LDRB     r12,[r2,r0]
0007d2  f804c000          STRB     r12,[r4,r0]
0007d6  1c40              ADDS     r0,r0,#1              ;340
0007d8  b200              SXTH     r0,r0                 ;340
                  |L1.2010|
0007da  4298              CMP      r0,r3                 ;340
0007dc  dbf7              BLT      |L1.1998|
;;;343    	}	
;;;344    	
;;;345    {	
;;;346    signed char i;
;;;347    //char n;
;;;348    char s[10];
;;;349    char minus='+';
;;;350    char zero_on;
;;;351    char simb_num;
;;;352    
;;;353    if(data<0)
0007de  2900              CMP      r1,#0
0007e0  da01              BGE      |L1.2022|
;;;354    	{
;;;355    	data=-data;
0007e2  4248              RSBS     r0,r1,#0
0007e4  b201              SXTH     r1,r0
                  |L1.2022|
;;;356    	minus='-';
;;;357    	}
;;;358    
;;;359    for(i=0;i<10;i++)
0007e6  2000              MOVS     r0,#0
0007e8  46e8              MOV      r8,sp                 ;348
;;;360    	{
;;;361    	s[i]=data%10;
0007ea  f04f0c0a          MOV      r12,#0xa
                  |L1.2030|
0007ee  fb91f2fc          SDIV     r2,r1,r12
0007f2  fb0c1112          MLS      r1,r12,r2,r1
0007f6  f8081000          STRB     r1,[r8,r0]
;;;362    	data/=10;
0007fa  b211              SXTH     r1,r2
0007fc  1c40              ADDS     r0,r0,#1              ;359
0007fe  b240              SXTB     r0,r0                 ;359
000800  280a              CMP      r0,#0xa               ;359
000802  dbf4              BLT      |L1.2030|
;;;363    	}   
;;;364    
;;;365    zero_on=1;
;;;366    simb_num=0;
;;;367    /*
;;;368    for (i=9;i>=0;i--)
;;;369    	{
;;;370    	if(zero_on&&(!s[i])&&(i>(des)))
;;;371    	     {
;;;372    	     s[i]=0x20;
;;;373    	     }
;;;374    	else 
;;;375    	     {
;;;376    	     s[i]=s[i]+0x30;
;;;377    	     zero_on=0;
;;;378    	     simb_num++;
;;;379    	     }
;;;380    	 }
;;;381    	          
;;;382    	
;;;383    */
;;;384    }	
;;;385    	
;;;386    		
;;;387    for(i=0;i<num;i++)
000804  2000              MOVS     r0,#0
000806  f10d080c          ADD      r8,sp,#0xc            ;335
00080a  e022              B        |L1.2130|
                  |L1.2060|
;;;388    	{
;;;389    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
00080c  5c21              LDRB     r1,[r4,r0]
00080e  f8dfc07c          LDR      r12,|L1.2188|
000812  eb010141          ADD      r1,r1,r1,LSL #1
000816  f81c9011          LDRB     r9,[r12,r1,LSL #1]
00081a  eb000240          ADD      r2,r0,r0,LSL #1
00081e  f8089012          STRB     r9,[r8,r2,LSL #1]
;;;390    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
000822  eb0c0141          ADD      r1,r12,r1,LSL #1
000826  f891c001          LDRB     r12,[r1,#1]
00082a  eb080242          ADD      r2,r8,r2,LSL #1
00082e  f882c001          STRB     r12,[r2,#1]
;;;391    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
000832  f891c002          LDRB     r12,[r1,#2]
000836  f882c002          STRB     r12,[r2,#2]
;;;392    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
00083a  f891c003          LDRB     r12,[r1,#3]
00083e  f882c003          STRB     r12,[r2,#3]
;;;393    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
000842  f891c004          LDRB     r12,[r1,#4]
000846  f882c004          STRB     r12,[r2,#4]
;;;394    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
00084a  7949              LDRB     r1,[r1,#5]
00084c  7151              STRB     r1,[r2,#5]
00084e  1c40              ADDS     r0,r0,#1              ;387
000850  b200              SXTH     r0,r0                 ;387
                  |L1.2130|
000852  4298              CMP      r0,r3                 ;387
000854  dbda              BLT      |L1.2060|
;;;395    	}
;;;396    for(i=0;i<(num*6);i++)
000856  2400              MOVS     r4,#0
000858  eb030943          ADD      r9,r3,r3,LSL #1
00085c  e00d              B        |L1.2170|
                  |L1.2142|
;;;397    	{
;;;398    	long data;
;;;399    	
;;;400    	*(((char*)&data)+3)=bitmap_buffer[i];
00085e  f8180004          LDRB     r0,[r8,r4]
000862  f88d000b          STRB     r0,[sp,#0xb]
;;;401    	
;;;402    	//data=0x08000000;
;;;403    	
;;;404    	plot(x_b+i,y_b,data,8,inverse);
000866  1928              ADDS     r0,r5,r4
000868  b200              SXTH     r0,r0
00086a  2308              MOVS     r3,#8
00086c  9700              STR      r7,[sp,#0]
00086e  4631              MOV      r1,r6
000870  9a02              LDR      r2,[sp,#8]
000872  f7fffffe          BL       plot
000876  1c64              ADDS     r4,r4,#1              ;396
000878  b224              SXTH     r4,r4                 ;396
                  |L1.2170|
00087a  ebb40f49          CMP      r4,r9,LSL #1          ;396
00087e  dbee              BLT      |L1.2142|
;;;405    	}
;;;406    }
000880  b015              ADD      sp,sp,#0x54
000882  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

000886  0000              DCW      0x0000
                  |L1.2184|
                          DCD      lcd_bitmap
                  |L1.2188|
                          DCD      caracter
